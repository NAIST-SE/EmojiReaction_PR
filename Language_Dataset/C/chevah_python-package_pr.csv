chevah/python-package,https://github.com/chevah/python-package,49,2015-12-07T11:47:46Z,2015-12-09T18:16:26Z,2015-12-09T18:16:26Z,CLOSED,False,5234,6,8,https://github.com/dumol,[#3144] Custom malloc implementation.,7,[],https://github.com/chevah/python-package/pull/49,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/49,"Problem
This mirrors â€‹https://bugs.python.org/issue3526. In short: any memory that has been allocated by our
application at some stage will never be freed at the system level.
Solution
Tried to adapt the patch at â€‹https://bugs.python.org/file22698/patch_dlmalloc_Python_2_7_1.diff
How to test
WIP
This marginally works: http://build.chevah.com/builders/python-package-linux-x86/builds/42
reviewer: @adiroiban","Problem
This mirrors â€‹https://bugs.python.org/issue3526. In short: any memory that has been allocated by our
application at some stage will never be freed at the system level.
Solution
Tried to adapt the patch at â€‹https://bugs.python.org/file22698/patch_dlmalloc_Python_2_7_1.diff
How to test
WIP
This marginally works: http://build.chevah.com/builders/python-package-linux-x86/builds/42
reviewer: @adiroiban",True,{}
chevah/python-package,https://github.com/chevah/python-package,49,2015-12-07T11:47:46Z,2015-12-09T18:16:26Z,2015-12-09T18:16:26Z,CLOSED,False,5234,6,8,https://github.com/dumol,[#3144] Custom malloc implementation.,7,[],https://github.com/chevah/python-package/pull/49,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/49#issuecomment-163346838,"Problem
This mirrors â€‹https://bugs.python.org/issue3526. In short: any memory that has been allocated by our
application at some stage will never be freed at the system level.
Solution
Tried to adapt the patch at â€‹https://bugs.python.org/file22698/patch_dlmalloc_Python_2_7_1.diff
How to test
WIP
This marginally works: http://build.chevah.com/builders/python-package-linux-x86/builds/42
reviewer: @adiroiban","I tried applying the patch on AIX and it is worse...
so closing this for now... but we can keep the branch available.
thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/50,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/50#issuecomment-198795499,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","I tried to build 2.7.11 but it failed.
@alibotean please check the 2.7.11 build, maybe you had an idea why it fails... otherwise we can merge this branch with 2.7.10 and only updated libs
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/alibotean,3,https://github.com/chevah/python-package/pull/50#issuecomment-199802615,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","I tried to build 2.7.11 but it failed.

It works out of the box (sort of speak ðŸ˜„). Just updated our buildbot, brink, URLs for pypi and I got a succesfull build right off the bat.
https://buildbot.chevah.com:10443/builders/python-package-win-xp-dev/builds/89",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/alibotean,4,https://github.com/chevah/python-package/pull/50#issuecomment-199803307,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","Now, the question is what do we do with the Linux/Unix version? The way it's now we use only one special case (solaris) all the others use the same Python version.
Would you or @dumol also update for Linux or should I make a special case for Windows as we have for Solaris?",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/50#issuecomment-199804270,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","Would you or @dumol also update for Linux or should I make a special case for Windows as we have for Solaris?

we should also upgrade linux...but in a separate branch... feel free to not touch the linux/unix part",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/alibotean,6,https://github.com/chevah/python-package/pull/50#issuecomment-199847810,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","Fixored:
Extracting manifest to ""c:/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/pywin32_system32/pythoncomloader27.dll.embedded""...
Removed SxS manifest from ""c:/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/pywin32_system32/pythoncomloader27.dll"".",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/50#issuecomment-199853342,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!","Happy with this.
Pushed in production. I will follow up with a ticket to update this on server and include a release notes about the new OpenSSL version.
I will follow up with a ticket to also update python 2.7.11 on Linux and Windows.
Maybe @brunogola  can do this as part of the SSLv3 hack or otherwise we can ask @dumol  to update it.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,50,2016-03-19T19:30:02Z,2016-03-22T16:57:17Z,2016-03-22T16:57:17Z,CLOSED,False,45,25,9,https://github.com/adiroiban,[#3355] Update Python distribtuion on Windows for pyopnessl,14,[],https://github.com/chevah/python-package/pull/50,https://github.com/alibotean,8,https://github.com/chevah/python-package/pull/50#issuecomment-199859193,"Scope
We need pyopenssl 16.0.0 to re-enable FTPS tests on Windows.
Changes
Update the versions... as pyopenssl requried an update pycrypto which required an update cffi :)
@alibotean there is an error in the build... it was also present 5 months ago. Can you please check it.
./chevahbs: line 179: /c/Users/buildslave/chevah/bs/python-package-win-xp-dev/build/build/python2.7-windows-x86/lib/Lib/site-packages/win32/pythoncomloader27.dll.embedded: No such file or directory

I also plan to update the python distro to 2.7.11
How to test
reviewers: @alibotean
check that the build from testing works for you.
After this is in production we might need to follow-up with a ticket on server to advertise the opnenssl update on windows
thanks!",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,51,2016-03-22T14:28:01Z,2016-03-22T14:33:29Z,2016-03-22T14:33:29Z,CLOSED,False,11,11,5,https://github.com/alibotean,[#3359] Upgrade Python to 2.7.11,2,[],https://github.com/chevah/python-package/pull/51,https://github.com/alibotean,1,https://github.com/chevah/python-package/pull/51,"Description
We want to upgrade Python to 2.7.11 version.
WIP","Description
We want to upgrade Python to 2.7.11 version.
WIP",True,{}
chevah/python-package,https://github.com/chevah/python-package,51,2016-03-22T14:28:01Z,2016-03-22T14:33:29Z,2016-03-22T14:33:29Z,CLOSED,False,11,11,5,https://github.com/alibotean,[#3359] Upgrade Python to 2.7.11,2,[],https://github.com/chevah/python-package/pull/51,https://github.com/alibotean,2,https://github.com/chevah/python-package/pull/51#issuecomment-199840670,"Description
We want to upgrade Python to 2.7.11 version.
WIP",Working ðŸ˜„ duplicate of #50. Closing.,True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,1,https://github.com/chevah/python-package/pull/52,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/52#issuecomment-200333229,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Changes don't make sense.
For system on which we have SSLv3 we still want to support it for backward compatibility reason.
Also, please just delete the lines. We don't want to have and accumulate un-used commented code.
Thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/52#issuecomment-200334088,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","To me, it like your openssl version disabled SSLv3 without defining OPENSSL_NO_SSL3 ... something need to be investigate and find a better fix.
thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,4,https://github.com/chevah/python-package/pull/52#issuecomment-200338190,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","At compile time SSLv3 and SSLv2 are available, that's why OPENSSL_NO_SSL3 is not defined.
My build scenario on ArchLinux:
PyOpenSSL 0.13 won't compile against openssl 1.0.2 (pyca/pyopenssl#276) so I downgraded openssl to 1.0.1l. On ArchLinux openssl 1.0.1l is compiled with support to SSLv2 and SSLv3, so when I build PyOpenSSL and Python against this version of openssl, at compile time the flag OPENSSL_NO_SSL3 is not defined.
If I run the builds after that, everything runs ok, but what I really need to test is running this builds against a newer openssl version. So I upgrade openssl to 1.0.2g, where SSLv3 is not supported. Without this patch I can't load PyOpenSSL/SSL.so or _ssl.so because they reference ssl_sslv3_method, as during compile time this was available. After the patch this works, because it will never reference ssl_sslv3_method.
The problem is: the Python and PyOpenSSL builds built against an OpenSSL with SSLv3 enabled will always need an OpenSSL distributed with those methods available as well. There is no way to build them with no support by using options during configure or build time.
If we want to build Python/PyOpenSSL without SSLv3 on a system where OpenSSL headers have no OPENSSL_NO_SSL3, then we can remove manualy this support (as I did), add our own option (NO_SSL3) or force OPENSSL_NO_SSL3 during build, as PyOpenSSL and Python have no option for that.",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,5,https://github.com/chevah/python-package/pull/52#issuecomment-200338627,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","So, if we need this as an optional thing, we probably need two different builds for PyOpenSSL and Python. One with SSLv3 suppot and another without.",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/52#issuecomment-200566747,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Do we still need  defined(NO_SSL2) ?
I assume that we will just build python and openssl on archlinux where OPENSSL_NO_SSL2 is already defined and it will skip all this.

Now we do need to check pyca/pyopenssl#276 and see if we can update pyopenssl 0.13 to compile on latest opnenssl.
thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,7,https://github.com/chevah/python-package/pull/52#issuecomment-200799884,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0",I reverted my changes and now it only adds the check for OPENSSL_NO_SSL3 on PyOpenSSL.,True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/52#issuecomment-200803466,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","OK. So pyopenssl 0.13 is dead... we can patch it for openssl 1.0.2 but then we will need top patch it for the next release... and so on.
Also, current pyopenssl structure is very rigid and we can not have run-time detection of SSL v3 support... so if we want to work with openssl compiled without sslv3 we would need a different pyopenssl version... with a different python distro...

Let's hope that python cryptography and pyopenssl 0.16 provide better support for run-time SSLv3 support detection.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,9,https://github.com/chevah/python-package/pull/52#issuecomment-201238206,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0",As an update: Even with cryptography and pyopenssl 0.16 there is still no way to detect SSLv3 support in run-time. So we need a specific build for ArchLinux. I'm working on that.,True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/52#issuecomment-201239894,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","That is fine. Is important to know what is possible and what not.
I am very happy to have an arch-linux build for openssl without sslv3 and sslv2 and later we  can use it in case some customer ask for it.

I hope that as openssl without sslv3 became more popular a patch will be available for _ssl.c and pyopenssl to have runtime detection.

The initial ticket id on trac is : Dev environment does not work if openssl is built without SSLv3 support
Is ok to focus on having your dev environment working :)
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,11,https://github.com/chevah/python-package/pull/52#issuecomment-202977986,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Latest updates will build Python2.7.10 on ArchLinux with pyOpenSSL 16.0.0 and it's dependencies.
For other OSes nothing is changed.",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,12,https://github.com/chevah/python-package/pull/52#issuecomment-202995899,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,13,https://github.com/chevah/python-package/pull/52#issuecomment-203173587,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Do we still need the changed from python-modules/pyOpenSSL-0.13/OpenSSL/ssl/context.c ?
For libffi changes you should also run the build on AIX and Solaris to validate your changes.
In test_python_binary_dist.py DEFAULT_VALUES should be read and parsed in a separate global place to break the os detection from the actual test.

why do we need this ?
export CHEVAH_BUILD_PATH=$INSTALL_FOLDER


I would say that pip should be installed in python/chevahbs and not in command_build_python_extra_librarie
Also, in command_build_python_extra_libraries I would like to just have a new variable named something like EXTRA_PACKAGES which are empty for all other systems and defined for arch.
The goal is to reduce the number of case $OS in call in the code and have a single case $OS in at the start which sets up all the variables.

PIP_ARGS is defined both in chevah_build and python/chevahbs. Can we have them defined in a single place?
I would say that windows Installing pip + binary modules should be done outside of python/chevahbs
and for now we can install pip for windows and archlinux.

changes looks good.
I will review them in the morning.
I would like to see a bit of less code duplication and a bit more structure in the build scripts.
The scripts are already pretty hard to read so we should see if we can improve them...just a bit.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/bgola,14,https://github.com/chevah/python-package/pull/52#issuecomment-203391748,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Ah, I forgot to revert my changes to pyOpenSSL 0.13, thanks!

export CHEVAH_BUILD_PATH=$INSTALL_FOLDER

is there so we can access it when building cffi (I got this from PR #46 )

changes addressed in test_python_binary_dist.py. I also moved the pip installation to python/chevahbs and removed some duplication and checks for $OS, but still need to check if it's on archlinux before installing pip, so I export the $OS variable. not sure if this is the best, but also this is supposed to be temporary as we might move to cryptography and pyOpenSSL 16.0.0 on other linuxes as well.",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,15,https://github.com/chevah/python-package/pull/52#issuecomment-203399533,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0","Is CHEVAH_BUILD_PATH really needed ?
Please see my other comments.
They are just minor.
Please address or ignore them and merge.
We can continue refactoring the script when we enable it for the other linux builds.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,52,2016-03-23T12:28:33Z,2016-03-30T13:56:48Z,2016-03-30T13:56:48Z,CLOSED,False,49169,20,187,https://github.com/bgola,[#3338] Use cryptography and pyOpenSSL 16.0.0 on ArchLinux builds,29,[],https://github.com/chevah/python-package/pull/52,https://github.com/adiroiban,16,https://github.com/chevah/python-package/pull/52#issuecomment-203420109,"Dev environment does not work if openssl is built without SSLv3 support
The new builds for OpenSSL on ArchLinux are built without support for SSLv3 methods, this breaks the development environment set up because Python can't use urllib2.HTTPS* methods , as SSl.so is linked to a different OpenSSL (with support to SSLv3)
Further investigation showed that when building PyOpenSSL (0.13) or Python (2.7.10) against an OpenSSL with SSLv3 enabled it is impossible to disable those methods, so it would fail to run on systems with OpenSSL built with SSLv3 methods disabled.
Why we got into this (5 whys)

Most distributions still build and distribute OpenSSL with SSLv3 support enabled.

Changes description

On ArchLinux build Python 2.7.10 with pyOpenSSL 16.0.0 with cryptography and cffi modules.

How to try and test the changes
reviewers @adiroiban

check that changes make sense
build it on other OSes and check if ./chevah_build testruns ok.
build it on ArchLinux and check if ssl, pyOpenSSL and cryptography are imported

$ ./chevah_build build
$ ./chevah_build test
python 2.7.10 (default, Mar 29 2016, 16:29:32) 
[GCC 5.3.0]
zlib 1.0
stdlib ssl OpenSSL 1.0.2g  1 Mar 2016
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2g  1 Mar 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.8-dev0",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,53,2016-03-28T09:11:16Z,2017-05-09T13:33:12Z,2017-05-09T13:33:16Z,CLOSED,False,10,1,1,https://github.com/adiroiban,[#3381] Add DBM support in Python.,1,[],https://github.com/chevah/python-package/pull/53,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/53,"Scope
we need the 'dbm' module in our python distribution on freebsd and openbsd
At the low level that is _bsddb
Changes
updated tests
for now this is abadoned since we are using https://github.com/jamesls/semidbm
How to test
WIP","Scope
we need the 'dbm' module in our python distribution on freebsd and openbsd
At the low level that is _bsddb
Changes
updated tests
for now this is abadoned since we are using https://github.com/jamesls/semidbm
How to test
WIP",True,{}
chevah/python-package,https://github.com/chevah/python-package,53,2016-03-28T09:11:16Z,2017-05-09T13:33:12Z,2017-05-09T13:33:16Z,CLOSED,False,10,1,1,https://github.com/adiroiban,[#3381] Add DBM support in Python.,1,[],https://github.com/chevah/python-package/pull/53,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/53#issuecomment-300164989,"Scope
we need the 'dbm' module in our python distribution on freebsd and openbsd
At the low level that is _bsddb
Changes
updated tests
for now this is abadoned since we are using https://github.com/jamesls/semidbm
How to test
WIP",no longer needed... I have used a workaround for htis,True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/54,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/54#issuecomment-213536732,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","windows builder is green.
arch and ubuntu-1604 also
working to enable for all ubuntu versions ...at lease for the supported ones
later we should also enable RHEL and SLES
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/54#issuecomment-213571762,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","Since I was already set on this I tried to enable as many systems as possible... and OpenBSD is now updated.
but there is still work for freebsd ... and aix :)",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/54#issuecomment-213703076,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","Some minor comments aboveâ€¦ However, the Solaris 10 builds are broken, thus:
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/54#issuecomment-213703184,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","Also, Solaris 11 for Sparc has a mysterious issue (unrelated to the generic Solaris 10 one). For details: https://build.chevah.com/builders/python-package-solaris-11-sparc/builds/35/steps/build/logs/stdio",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/54#issuecomment-214665751,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","the build is broken on solaris since libffi was compiled but not installed on solaris.
@dumol I am asking if is ok with you to merge this as it is and have a separate ticket to look at fixing the solaris builds.
thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/54#issuecomment-214696106,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","There are least tree breakages in this:

The generic Solaris 10 ../install-sh error for libffi:
https://buildbot.chevah.com:10443/builders/python-package-solaris-10/builds/81
The mysterious Solaris 11 on SPARC reallocation error:
https://buildbot.chevah.com:10443/builders/python-package-solaris-11-sparc/builds/36
A common AIX / FreeBSD problem introduced by the latest commit, namely No module named cryptography.hazmat.backends.openssl.backend:
https://buildbot.chevah.com:10443/builders/python-package-fbsd-10/builds/10

I'm not happy with breaking six build slaves (of which five are important for our releases) for enabling the newly launched Ubuntu 16.04â€¦ But I guess this branch became something else in the process, so the title of this PR should be updated. And tickets for the breakages in master should be added and assigned. I feel this is over the top for me currentlyâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/54#issuecomment-214717225,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","You are right.
I think that AIX and FreeBSD are already left with the old build system and are green. The need to be updated in separate tickets.
I will also update the code so that solaris will use the old build system in which libffi is not installed.
I will update the ticket title to include osx and the other linux distros
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/54#issuecomment-214785588,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","ok... hope this is fixed.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/alibotean,10,https://github.com/chevah/python-package/pull/54#issuecomment-215040413,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","I saw some changes to the Windows build code that I think was not tested. Please check my comments, thanks.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/54#issuecomment-215142211,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!",I can confirm all the previously-problematic UNIX builds are now green.,True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/adiroiban,12,https://github.com/chevah/python-package/pull/54#issuecomment-215337997,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","I think that the code is ok.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/dumol,13,https://github.com/chevah/python-package/pull/54#issuecomment-215362061,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/bgola,14,https://github.com/chevah/python-package/pull/54#issuecomment-215391819,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","looks good and works great on my archlinux.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,54,2016-04-21T09:21:28Z,2016-04-29T08:25:14Z,2017-04-23T08:55:26Z,MERGED,True,207,154,7,https://github.com/adiroiban,"[#3418] Build for Ubuntu 16.04 and update Linux, OpenBSD and OSX builds to cffi.",10,[],https://github.com/chevah/python-package/pull/54,https://github.com/alibotean,15,https://github.com/chevah/python-package/pull/54#issuecomment-215651302,"Scope
Update build system to create package for ubuntu 16.04
Changes
Since pyopenssl 0.13 no longer works with OpenSSL available on Ubuntu 16.04  i have updated the build system to the one similar to Arch.
In the future all builds should use that system.
I have refactored a bit the windows part to re-use the common process.
src/python/chevahbs no longer installs pip, but just make sure that we have a minimal python.
I have also enable new build system for rhel 5,6,7 and sles 11,12 and generic linux, raspbian7, openbsd and solaris11
aix, freebsd and solaris10 are broken ... but since solaris 10 has a very old openssl I am not sure if we can upgrade it.
As a drive by I have added the github PR template.
How to test
reviewers: @brunogola @dumol @alibotean
check that changes make sense
thanks!","I think that the code is ok.

Oki dok.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,55,2016-04-29T10:47:02Z,2016-04-29T13:09:10Z,2016-04-29T13:09:10Z,CLOSED,False,5,5,1,https://github.com/dumol,[#3405] Update for OpenBSD 5.9.,3,[],https://github.com/chevah/python-package/pull/55,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/55,"Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.","Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.",True,{}
chevah/python-package,https://github.com/chevah/python-package,55,2016-04-29T10:47:02Z,2016-04-29T13:09:10Z,2016-04-29T13:09:10Z,CLOSED,False,5,5,1,https://github.com/dumol,[#3405] Update for OpenBSD 5.9.,3,[],https://github.com/chevah/python-package/pull/55,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/55#issuecomment-215697168,"Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.","Branch: 3405-openbsd59-update
Build status: SUCCESS
Authors:
Duration: 1 hours, 24 minutes, 30 seconds
Full logs: https://buildbot.chevah.com:10443/builders/python-package-gk-review/builds/15
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,55,2016-04-29T10:47:02Z,2016-04-29T13:09:10Z,2016-04-29T13:09:10Z,CLOSED,False,5,5,1,https://github.com/dumol,[#3405] Update for OpenBSD 5.9.,3,[],https://github.com/chevah/python-package/pull/55,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/55#issuecomment-215699641,"Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.","all good. thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,55,2016-04-29T10:47:02Z,2016-04-29T13:09:10Z,2016-04-29T13:09:10Z,CLOSED,False,5,5,1,https://github.com/dumol,[#3405] Update for OpenBSD 5.9.,3,[],https://github.com/chevah/python-package/pull/55,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/55#issuecomment-215703238,"Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.","after this is merged, please also carpe-diem a commit in brink with the latest paver.sh changes :) thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,55,2016-04-29T10:47:02Z,2016-04-29T13:09:10Z,2016-04-29T13:09:10Z,CLOSED,False,5,5,1,https://github.com/dumol,[#3405] Update for OpenBSD 5.9.,3,[],https://github.com/chevah/python-package/pull/55,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/55#issuecomment-215706325,"Scope
Update python-package for OpenBSD 5.9.
Changes
Pulled all changes from master, where the problem with newest OpenSSL versions was solved for Arch Linux and Ubuntu 16.04.
Updated the hardcoded OpenBSD version from 5.8 to 5.9.
Drive-by fixes:

update paver.sh from salt-master (a minor fix for OS X and an improved comment).

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests through paver_review.","Thanks, I already  have a ticket for brink tooâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,56,2016-06-02T07:53:42Z,2016-08-24T17:57:48Z,2017-04-23T08:55:24Z,MERGED,True,36,17,3,https://github.com/adiroiban,[#3468] Add support for SLES 10.,5,[],https://github.com/chevah/python-package/pull/56,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/56,"Scope
This add support for building the python package on SLES 10
Changes
SLES 10 has an old openssl 0.9.8 so we build using the old pyopenssl 0.13.0
libedit is disabled on sles10
How to try and test the changes
reviewers: @dumol
check that changes are ok.
I have pushed a first version in production and I will test this with compat and chevah.server","Scope
This add support for building the python package on SLES 10
Changes
SLES 10 has an old openssl 0.9.8 so we build using the old pyopenssl 0.13.0
libedit is disabled on sles10
How to try and test the changes
reviewers: @dumol
check that changes are ok.
I have pushed a first version in production and I will test this with compat and chevah.server",True,{}
chevah/python-package,https://github.com/chevah/python-package,56,2016-06-02T07:53:42Z,2016-08-24T17:57:48Z,2017-04-23T08:55:24Z,MERGED,True,36,17,3,https://github.com/adiroiban,[#3468] Add support for SLES 10.,5,[],https://github.com/chevah/python-package/pull/56,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/56#issuecomment-223221747,"Scope
This add support for building the python package on SLES 10
Changes
SLES 10 has an old openssl 0.9.8 so we build using the old pyopenssl 0.13.0
libedit is disabled on sles10
How to try and test the changes
reviewers: @dumol
check that changes are ok.
I have pushed a first version in production and I will test this with compat and chevah.server",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,56,2016-06-02T07:53:42Z,2016-08-24T17:57:48Z,2017-04-23T08:55:24Z,MERGED,True,36,17,3,https://github.com/adiroiban,[#3468] Add support for SLES 10.,5,[],https://github.com/chevah/python-package/pull/56,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/56#issuecomment-223750177,"Scope
This add support for building the python package on SLES 10
Changes
SLES 10 has an old openssl 0.9.8 so we build using the old pyopenssl 0.13.0
libedit is disabled on sles10
How to try and test the changes
reviewers: @dumol
check that changes are ok.
I have pushed a first version in production and I will test this with compat and chevah.server","Thanks for putting the final touches to thisâ€¦ I have also detected a small issue with compiling libedit on RHEL 5.x in some cases: https://buildbot.chevah.com:10443/builders/python-package-rhel-5/builds/66
Changes look fine and test_review passesâ€¦ https://buildbot.chevah.com:10443/builders/python-package-gk-review/builds/16
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,58,2016-09-13T17:59:38Z,2016-09-14T15:05:58Z,2016-09-14T15:06:25Z,MERGED,True,3,4,1,https://github.com/dumol,Use PIC on FreeBSD to build successfully with CFFI.,1,[],https://github.com/chevah/python-package/pull/58,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/58,"Scope
Enable CFFI for FreeBSD.
Changes
Enabled PIC for FreeBSD.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the tests.","Scope
Enable CFFI for FreeBSD.
Changes
Enabled PIC for FreeBSD.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,58,2016-09-13T17:59:38Z,2016-09-14T15:05:58Z,2016-09-14T15:06:25Z,MERGED,True,3,4,1,https://github.com/dumol,Use PIC on FreeBSD to build successfully with CFFI.,1,[],https://github.com/chevah/python-package/pull/58,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/58#issuecomment-246796072,"Scope
Enable CFFI for FreeBSD.
Changes
Enabled PIC for FreeBSD.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the tests.","test_review has passed: https://build.chevah.com/builders/python-package-gk-review/builds/17
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,58,2016-09-13T17:59:38Z,2016-09-14T15:05:58Z,2016-09-14T15:06:25Z,MERGED,True,3,4,1,https://github.com/dumol,Use PIC on FreeBSD to build successfully with CFFI.,1,[],https://github.com/chevah/python-package/pull/58,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/58#issuecomment-246814102,"Scope
Enable CFFI for FreeBSD.
Changes
Enabled PIC for FreeBSD.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the tests.","looks good. thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,58,2016-09-13T17:59:38Z,2016-09-14T15:05:58Z,2016-09-14T15:06:25Z,MERGED,True,3,4,1,https://github.com/dumol,Use PIC on FreeBSD to build successfully with CFFI.,1,[],https://github.com/chevah/python-package/pull/58,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/58#issuecomment-246814164,"Scope
Enable CFFI for FreeBSD.
Changes
Enabled PIC for FreeBSD.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the tests.",once ready please push the bfsd build on production,True,{}
chevah/python-package,https://github.com/chevah/python-package,61,2016-12-07T13:02:12Z,2016-12-08T21:59:12Z,2016-12-08T21:59:12Z,CLOSED,False,1,3,1,https://github.com/dumol,[#3742] OpenBSD 6.0 support.,1,[],https://github.com/chevah/python-package/pull/61,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/61,"Scope
No previous support for OpenBSD 6.0, the latest stable version.
Changes
Stop hard-coding a specific version of OpenBSD, as the stable version changes every 6 months.
It's enough to check for the oldest supported version, nowadays 5.9 and to have the corresponding Python packages available at binary.chevah.com
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the automated tests.","Scope
No previous support for OpenBSD 6.0, the latest stable version.
Changes
Stop hard-coding a specific version of OpenBSD, as the stable version changes every 6 months.
It's enough to check for the oldest supported version, nowadays 5.9 and to have the corresponding Python packages available at binary.chevah.com
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,61,2016-12-07T13:02:12Z,2016-12-08T21:59:12Z,2016-12-08T21:59:12Z,CLOSED,False,1,3,1,https://github.com/dumol,[#3742] OpenBSD 6.0 support.,1,[],https://github.com/chevah/python-package/pull/61,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/61#issuecomment-265441702,"Scope
No previous support for OpenBSD 6.0, the latest stable version.
Changes
Stop hard-coding a specific version of OpenBSD, as the stable version changes every 6 months.
It's enough to check for the oldest supported version, nowadays 5.9 and to have the corresponding Python packages available at binary.chevah.com
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,61,2016-12-07T13:02:12Z,2016-12-08T21:59:12Z,2016-12-08T21:59:12Z,CLOSED,False,1,3,1,https://github.com/dumol,[#3742] OpenBSD 6.0 support.,1,[],https://github.com/chevah/python-package/pull/61,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/61#issuecomment-265448568,"Scope
No previous support for OpenBSD 6.0, the latest stable version.
Changes
Stop hard-coding a specific version of OpenBSD, as the stable version changes every 6 months.
It's enough to check for the oldest supported version, nowadays 5.9 and to have the corresponding Python packages available at binary.chevah.com
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run the automated tests.","looks good. we also need to update the chevah/brink
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,62,2016-12-16T11:27:05Z,2016-12-16T11:55:04Z,2016-12-16T11:55:04Z,CLOSED,False,15,1,1,https://github.com/dispera,[#3732] Add Solaris 10 U3 detection to paver,1,[],https://github.com/chevah/python-package/pull/62,https://github.com/dispera,1,https://github.com/chevah/python-package/pull/62,"Scope
Implement Solaris 10 U3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release year, and conditions that checks if the release is 'solaris10u3'. In that case, it saves that on the OS variable.
How to try and test the changes
reviewers: @adiroiban @dumol
You can check by running paver.sh detect_os on a Solaris10u3 system and checking the DEFAULT_VALUES file","Scope
Implement Solaris 10 U3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release year, and conditions that checks if the release is 'solaris10u3'. In that case, it saves that on the OS variable.
How to try and test the changes
reviewers: @adiroiban @dumol
You can check by running paver.sh detect_os on a Solaris10u3 system and checking the DEFAULT_VALUES file",True,{}
chevah/python-package,https://github.com/chevah/python-package,62,2016-12-16T11:27:05Z,2016-12-16T11:55:04Z,2016-12-16T11:55:04Z,CLOSED,False,15,1,1,https://github.com/dispera,[#3732] Add Solaris 10 U3 detection to paver,1,[],https://github.com/chevah/python-package/pull/62,https://github.com/dispera,2,https://github.com/chevah/python-package/pull/62#issuecomment-267574672,"Scope
Implement Solaris 10 U3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release year, and conditions that checks if the release is 'solaris10u3'. In that case, it saves that on the OS variable.
How to try and test the changes
reviewers: @adiroiban @dumol
You can check by running paver.sh detect_os on a Solaris10u3 system and checking the DEFAULT_VALUES file","Same as on the brick repo. Reviewed conditions so it works for Solaris 10 and 11 and tested on Solaris 10u3, 10u11 and Solaris 11.3.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,62,2016-12-16T11:27:05Z,2016-12-16T11:55:04Z,2016-12-16T11:55:04Z,CLOSED,False,15,1,1,https://github.com/dispera,[#3732] Add Solaris 10 U3 detection to paver,1,[],https://github.com/chevah/python-package/pull/62,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/62#issuecomment-267575024,"Scope
Implement Solaris 10 U3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release year, and conditions that checks if the release is 'solaris10u3'. In that case, it saves that on the OS variable.
How to try and test the changes
reviewers: @adiroiban @dumol
You can check by running paver.sh detect_os on a Solaris10u3 system and checking the DEFAULT_VALUES file","Changes looks good.
I think that the changes should be done together with 3725.
We can use 3732 as a ticket to remind us to update paver.sh in brink... but we might just want to update the chevah/brink README to talk that the source of paver.sh is chevah/python package.
It makes more sense to me.
So I think that this PR can be closed and the changes made as part of the work for 3725
Thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dispera,1,https://github.com/chevah/python-package/pull/63,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dispera,2,https://github.com/chevah/python-package/pull/63#issuecomment-268224436,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","This is to continue #86 which was in Brink repo as it should be here (I will mention on chevah/brink README that the source of paver.sh is chevah/python package).
Adding Solaris 10 U3 detection to paver.sh.
Tested on Solaris 10 U3, 10 U11, and Solaris 11.3 (and macOS 10.12, just to try that on a different platform works OK).
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/63#issuecomment-268228692,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","Thanks. It looks good.
There is little point in having solaris 10u3 detection if python-package is not able to build the python package on SOlaris 10u3
I think that the scope of this PR should be extended to include all the changes required to have a fully working pyhon-package on SOlaris 10u3 x86
In include paver.sh changes + automating all the other changes that you have manually done in order to build the package
let me know if you need help
thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dispera,4,https://github.com/chevah/python-package/pull/63#issuecomment-269622488,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","I managed to build the whole chevah python package now:
https://chevah.com/buildbot/builders/python-package-solaris-10u3-x86/builds/42
Tested the branch on Solaris 10u3, 10u11, 11u2 and Ubuntu 12.04, and it worked fine.
I ended up not needing the 'solaris10u3' detection I implemented as the changes work with other Solaris 10 versions. I wasn't sure if removing it, or leave it as we may need it again for 10 U3 on Sparc or x64; and may come handy if in the future some code change breaks the build for older Solaris versions and we have the detection already implemented.
There are some bits to take into account which I added as comments, like Solaris 10 U3 not coming with sqlite3, gmp, and having old zlib version which does not support the compression parameters used by the build. So they need to be installed to the default locations under /usr/local.
I did not have to use the x86 memory patch here as I used OpenSSL 0.9.7. Although it was part of my tests adding it to the script when trying OpenSSL 0.9.8, but it generates a LOT of memory allocation issues with that version.
Readline does not compile as it is now - has libedit memory allocation issues-  but does not break the build neither. This may only happen on x86 if it is similar to OpenSSL 0.9.8 memory bug - so we will see how it goes with x64 and Sparc.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/63#issuecomment-269872229,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","I ended up not needing the 'solaris10u3' detection

The review request comment is longer that the Changes section from the PR description. Is that ok?

There are some bits to take into account which I added as comments,

Added as comment where?
I don't see those comments in the PR

also, the linked build has failed with an exception. Does it mean that this PR is valid? Why?",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dispera,6,https://github.com/chevah/python-package/pull/63#issuecomment-269949866,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","I will update the PR Scope/Changes next time instead of putting a big comment like I did, that will be better.
Regarding the ""There are some bits to take into account which I added as comments"", I meant as comments in the scripts, sorry :P
The linked build failed with an exception, I imagined it would be a permission issue for my git user to have the build uploaded into the testing binaries site.
But I actually wanted to ask you, is that why it failed on the upload step?",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/63#issuecomment-269971384,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","I think that the sqlite / libz / gmp manual compile part is wrong.
We have the sqlite / libz / gmp source code as part of this repo so that we can compile them together with python and statically / dynamically link them with our python version
we don't manually install sqlite / gmp in any other platform
also, for previous builds we managed to install everything using the Sun Studio compiler, why it is no longer working?
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/63#issuecomment-294958275,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","I think it's best to not touch Diego's PR/comments and document my changes on top of his workâ€¦ So, besides cleaning up the build slave (which had a lot of stuff compiled by Diego in /usr/local), this is what I committed:

merged with master, bringing ZLIB and newer GMP and SQLite in this branch
improved the detection for Solaris 10 releases older than u8 in paver.sh
switched to using Sun's compiler (with the exception of libffi, as in HP-UX)
added full deps checks for all Solaris versions, so that no third-party stuff from /usr/local/ or /opt/ gets in our packages.

Still, there are things I don't like about this build slave, so I would keep it as unstable.
Please review the changes and run the tests:
https://chevah.com/buildbot/builders/python-package-solaris-10u3-x86/builds/95
https://chevah.com/buildbot/builders/python-package-group-all/builds/65
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/63#issuecomment-294985283,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","Thanks. I will take a look.
We have a new Sparc server and I hope that Adi L will install it soon.
For now, is ok to just merge what we have here and forget about it... for the moment the customer has not asked for 10u3 so we can ignore it
thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/63#issuecomment-295184296,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","OK, I thought this is kind of important, with one big customer and the previous release already supporting thisâ€¦ But no big deal, will wait for your review, wouldn't want to commit this on my own in master. Thanks!
Don't know about the Sparc serverâ€¦ Do you plan a 10u3 on Sparc too?",True,{}
chevah/python-package,https://github.com/chevah/python-package,63,2016-12-20T11:46:28Z,2017-04-19T15:30:26Z,2017-04-19T15:31:38Z,CLOSED,False,105,65,7,https://github.com/dispera,[#3725] Solaris 10 u3 support.,9,[],https://github.com/chevah/python-package/pull/63,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/63#issuecomment-295221282,"Scope
Implement Solaris 10u3 detection on paver.sh
Changes
Added a variable to store the exact Solaris release, and a condition that checks if the release is 'solaris10u3'. In that case, it sends that to the OS variable, instead of the usual 'solaris10'.
How to try and test the changes
reviewers: @adiroiban
You can check by running 'paver.sh detect_os' on a Solaris10u3 system and checking the DEFAULT_VALUES file","Hi. Sorry. I forget the last message.
For now, I don't plan Solaris 10u3... but if the customer want to have it, we might want to provide this option.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dispera,1,https://github.com/chevah/python-package/pull/64,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dispera,2,https://github.com/chevah/python-package/pull/64#issuecomment-270679709,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/64#issuecomment-270689375,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Neither the source if you download it from the OpenSSL website.

Are you sure?
How come that the source download does not include the headers?
How can the source package be used without the header files?


So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.

If this is the way we go for OSX 10.2 we need this documented in the repo... and not only as a comment in the PR.
if we go for external homebrew, then we need dedicate documentation in SFTPPlus to instruct users how to install OpenSSL from homebrew... and also how to upgrade it in the case of security issues.

Finally we need to run this branch against the osx 10.2 slave
Looking to see how we can have the osx 10.2 slave up and running
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dispera,4,https://github.com/chevah/python-package/pull/64#issuecomment-270693375,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Scratch that about the headers not coming on the source, it seems at one point I looked at the source in the include folder which is empty, they come into ssl/ folder.
Anyway, my point was that Apple at some point (I thon 10.10) deprecated use of OpenSSL and uses its own TLS libraries for crypto, so it does not include the ssl headers with the OS.
I added the HomeBrew info to Trac, I mentioned it on the trac ticket related to this PR, but not here, look on 10.12 Sierra Section:
https://trac.chevah.com/wiki/Infrastructure/OS/OSX",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dispera,5,https://github.com/chevah/python-package/pull/64#issuecomment-270693595,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","By the way, the slave is already up and running, see:
https://trac.chevah.com/ticket/3722
Just needs the builders on buildbot.",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/64#issuecomment-270753392,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","In 3722 I can see that the OS name is macos-1012 ... but in this PR I don't see any changes in the paver.sh and the os is still handles as osx-108 . I that ok?


its own TLS libraries for crypto

Is this their own OpenSSL build / libre SSL or thei reivented the wheel and have created their own SSL/TLS library?
Do you have a link in which this is discussed.
Do you know if the change was done in 10.10 or 10.09 or 10.11?
If we plan to support OSX 10.12 we need to know what is going on with this version and to understand how OpenSSL is handled

I can see
$ /usr/bin/openssl version
OpenSSL 0.9.8zh 14 Jan 2016
so it looks like macOS still has an up to date openssl, why not use this version?

Also, OSX has its own python version which comes compiled against 0.9.8
$ /usr/bin/python
Python 2.7.10 (default, Jul 30 2016, 18:31:42) 
>>> ssl.__file__
'/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ssl.pyc'
>>> ssl.OPENSSL_VERSION_INFO
(0, 9, 8, 29, 15)
>>> 

why not use the same openssl lib? why we need homebrew?


Scratch that about the headers not coming on the source, it seems at one point I looked at the source in the include folder which is empty, they come into ssl/ folder.

If this is no longer relevant, please update the PR description.

Thanks for the work on this, but I feel that it needs more work and use the OpenSSL provided by the OS as this is the OpenSSL which is updated by Apple in case of issues.
If customers want an homebrew-based version, we can do that, but the default version should be the one based on the OpenSSL version provided by Apple
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/64#issuecomment-271440764,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","@dumol lucky no 13... the build is green on macos 12.02 with the homebrew OpenSSL.
my problem is that homebrew feels like an hobby project and I could not find if there is a easy way to install 1.0.2 and not the latest openssl
for now homebrew might provide 1.0.2 but maybe in 1 month it will install 1.0.3 and then our version of python will break....
but... let's release a version and we will see what customers want
I tried to add a check in install_dependencies to document that homebrew is required
@dumol please see if you can have this branch green on all builders and merge it.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/64#issuecomment-271582804,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","As discussed with @dumol we might want to rename this to osx-1012 to keep with the previous osx naming.
now... the problem is that this is not osx-1012 vanilla, but osx-1012-homebrew-openssl-1.0.2 ... and with homebrew I don't know how to pin a version.
but again, we can go with osx-1012 or macos-1012 and see how it it perceived by the customers.
my feeling is that this should be osx-hbopenssl102",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/64#issuecomment-273276663,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Not really happy about this Homebrew stuff either, but here it goesâ€¦ The branch passes all tests: https://chevah.com/buildbot/builders/python-package-gk-review/builds/20
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/64#issuecomment-273279763,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Looks good. Happy to see it green.
@dumol I did not see any comment related to your initial suggestion of having this as osx1012.
Also, in the previous description of the PR you were listed as the requested reviewer. I have updated it so that I am a reviewer.
Please check that the current PR description is valid ... and also the inline comments
Thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/64#issuecomment-273472146,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Actually, I just edited my last comment to correct a grammar slip. Oopsâ€¦
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dumol,12,https://github.com/chevah/python-package/pull/64#issuecomment-273478956,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Thank you for the review, have implemented most of the suggestions. Please check the commit above and the related comments.
In regards to the macos-1202 name, I would normally be strongly against using macos instead of osx just because of the marketing shift from Apple. But seeing how this is actually quite different from the usual builds (because it needs the Homebrew's OpenSSL), I agree to differentiate it by using a different moniker for the OS.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,13,https://github.com/chevah/python-package/pull/64#issuecomment-273489473,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban",thanks. changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dumol,14,https://github.com/chevah/python-package/pull/64#issuecomment-273837141,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","I wondered why the new /usr/local dependencies were not detected by the test scriptâ€¦ There's a test there for pre-approved deps  and there was nothing added by this branch to that hard-coded list.
After a bit of investigation, have discovered that the deps check in the test phase only works for OS'es where we check for readline, as the code was moved to a dedicated function and the call for the new function is indented too much. More at d502092#diff-d928fcacc543beb698c192bc0a02e064L349
If I fix the indentation, the following is output'ed for the test phase:
bs1f-macos-1012-x64-54:build buildslave$ ./python2.7-macos1012-x64/bin/python test_python_binary_dist.py
python 2.7.10 (default, Jan 19 2017, 02:25:40)
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]
zlib 1.0
stdlib ssl OpenSSL 1.0.2j  26 Sep 2016
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.2j  26 Sep 2016
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Got unwanted deps:
        /System/Library/Frameworks/Security.framework/Versions/A/Security
        /usr/lib/libgcc_s.1.dylib
        /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib
        /usr/local/opt/openssl/lib/libssl.1.0.0.dylib

needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/dumol,15,https://github.com/chevah/python-package/pull/64#issuecomment-274139144,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","Have fixed the dependencies check in master, merged the changes and adapted the check for the osx/macos dual nature of our support for this OS. All green test_review results: https://chevah.com/buildbot/builders/python-package-gk-review/builds/23
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,64,2017-01-05T15:59:30Z,2017-01-23T18:25:22Z,2017-01-23T18:25:22Z,CLOSED,False,73,2133,28,https://github.com/dispera,[#3723] Have MacOS 10.12 with homebrew OpenSSL and latest cryptography,23,[],https://github.com/chevah/python-package/pull/64,https://github.com/adiroiban,16,https://github.com/chevah/python-package/pull/64#issuecomment-274144775,"Scope
Compile the python package on macOS 10.12 with the homebrew OpenSSL version
Why we got this

OSX comes with an old OpenSSL 0.9.8 ... which does not have tls 1.2 and SHA2
OSX uses Secure Transport API
Python on OSX still uses OpenSSL ... and the Apple blessed Python comes linked agains 0.9.8
There is no Secure Transport API for Python
Most people use homebrew OpenSSL now

Changes
The OpenSSL version which comes with macOS 10.12 does not include the
headers.
So I installed OpenSSL 1.0.2j with Homebrew, which is what others recommend,
like Mozilla, and the easiest way to tell a customer to upgrade it is with brew.
After that, I just added the LDFLAGS and CPPFLAGS, and ssl_incs/libs to
our scripts, and the package was built fine on macOS 10.12:
The OS signature was updated to macos... this also signals that we will no longer use the OpenSSL provided by the OS.
With an updated OpenSSL we can also cffi and an updated python cryptography
How to try and test the changes
check that changes make sense
reviewers: @adiroiban","thanks.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,65,2017-01-18T16:32:33Z,2017-01-20T10:30:37Z,2017-01-20T10:30:37Z,MERGED,True,7,5,1,https://github.com/adiroiban,[#3777] Only do the ctypes windows hack on windows.,1,[],https://github.com/chevah/python-package/pull/65,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/65,"Scope
See
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=781578
and
https://bugzilla.redhat.com/show_bug.cgi?id=674369
Changes
I went for executing that code only on Windows... since it a windows only hack.
How to try and test the changes
reviewers: @alibotean
check that changes make sense.","Scope
See
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=781578
and
https://bugzilla.redhat.com/show_bug.cgi?id=674369
Changes
I went for executing that code only on Windows... since it a windows only hack.
How to try and test the changes
reviewers: @alibotean
check that changes make sense.",True,{}
chevah/python-package,https://github.com/chevah/python-package,65,2017-01-18T16:32:33Z,2017-01-20T10:30:37Z,2017-01-20T10:30:37Z,MERGED,True,7,5,1,https://github.com/adiroiban,[#3777] Only do the ctypes windows hack on windows.,1,[],https://github.com/chevah/python-package/pull/65,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/65#issuecomment-273526173,"Scope
See
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=781578
and
https://bugzilla.redhat.com/show_bug.cgi?id=674369
Changes
I went for executing that code only on Windows... since it a windows only hack.
How to try and test the changes
reviewers: @alibotean
check that changes make sense.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,65,2017-01-18T16:32:33Z,2017-01-20T10:30:37Z,2017-01-20T10:30:37Z,MERGED,True,7,5,1,https://github.com/adiroiban,[#3777] Only do the ctypes windows hack on windows.,1,[],https://github.com/chevah/python-package/pull/65,https://github.com/alibotean,3,https://github.com/chevah/python-package/pull/65#issuecomment-273740300,"Scope
See
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=781578
and
https://bugzilla.redhat.com/show_bug.cgi?id=674369
Changes
I went for executing that code only on Windows... since it a windows only hack.
How to try and test the changes
reviewers: @alibotean
check that changes make sense.",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,66,2017-01-20T07:20:03Z,2017-01-20T09:40:59Z,2017-01-20T09:40:59Z,CLOSED,False,43,20,1,https://github.com/dumol,[#3810] Fix the test for checking dependencies.,5,[],https://github.com/chevah/python-package/pull/66,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/66,"Scope
The deps check in the test phase only works for OS'es where we check for readline, as the code was moved to a dedicated function and the call for the new function is indented too much. More at â€‹d502092#diff-d928fcacc543beb698c192bc0a02e064L349
Changes
Unindented the call to the function that checks the deps, so that it is always called.
Added sanctioned deps for FreeBSD.
Tuned the deps for Linux in accordance to latest developments.
Drive-by test:

improved the deps check in OpenBSD to account for any unusual deps not in /usr, eg. /opt or /home.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.","Scope
The deps check in the test phase only works for OS'es where we check for readline, as the code was moved to a dedicated function and the call for the new function is indented too much. More at â€‹d502092#diff-d928fcacc543beb698c192bc0a02e064L349
Changes
Unindented the call to the function that checks the deps, so that it is always called.
Added sanctioned deps for FreeBSD.
Tuned the deps for Linux in accordance to latest developments.
Drive-by test:

improved the deps check in OpenBSD to account for any unusual deps not in /usr, eg. /opt or /home.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,66,2017-01-20T07:20:03Z,2017-01-20T09:40:59Z,2017-01-20T09:40:59Z,CLOSED,False,43,20,1,https://github.com/dumol,[#3810] Fix the test for checking dependencies.,5,[],https://github.com/chevah/python-package/pull/66,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/66#issuecomment-274022348,"Scope
The deps check in the test phase only works for OS'es where we check for readline, as the code was moved to a dedicated function and the call for the new function is indented too much. More at â€‹d502092#diff-d928fcacc543beb698c192bc0a02e064L349
Changes
Unindented the call to the function that checks the deps, so that it is always called.
Added sanctioned deps for FreeBSD.
Tuned the deps for Linux in accordance to latest developments.
Drive-by test:

improved the deps check in OpenBSD to account for any unusual deps not in /usr, eg. /opt or /home.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.","test_review passed with deps checking for all OS'es in the stable target for python-package: https://chevah.com/buildbot/builders/python-package-gk-review/builds/21
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,66,2017-01-20T07:20:03Z,2017-01-20T09:40:59Z,2017-01-20T09:40:59Z,CLOSED,False,43,20,1,https://github.com/dumol,[#3810] Fix the test for checking dependencies.,5,[],https://github.com/chevah/python-package/pull/66,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/66#issuecomment-274023514,"Scope
The deps check in the test phase only works for OS'es where we check for readline, as the code was moved to a dedicated function and the call for the new function is indented too much. More at â€‹d502092#diff-d928fcacc543beb698c192bc0a02e064L349
Changes
Unindented the call to the function that checks the deps, so that it is always called.
Added sanctioned deps for FreeBSD.
Tuned the deps for Linux in accordance to latest developments.
Drive-by test:

improved the deps check in OpenBSD to account for any unusual deps not in /usr, eg. /opt or /home.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.","looks good. thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,67,2017-01-26T07:55:14Z,2017-01-26T18:06:07Z,2017-01-27T10:25:38Z,MERGED,True,7,1,1,https://github.com/bgola,[#3827] Clean temporary directory on OSX.,2,[],https://github.com/chevah/python-package/pull/67,https://github.com/bgola,1,https://github.com/chevah/python-package/pull/67,"Scope
On OSX the temporary pip directory was not removed if pip failed as it is not under /tmp.
Changes
Add code to clean the folder under ${TMPDIR}.
How to try and test the changes
reviewers: @adiroiban @dumol
Please check if changes make sense.","Scope
On OSX the temporary pip directory was not removed if pip failed as it is not under /tmp.
Changes
Add code to clean the folder under ${TMPDIR}.
How to try and test the changes
reviewers: @adiroiban @dumol
Please check if changes make sense.",True,{}
chevah/python-package,https://github.com/chevah/python-package,67,2017-01-26T07:55:14Z,2017-01-26T18:06:07Z,2017-01-27T10:25:38Z,MERGED,True,7,1,1,https://github.com/bgola,[#3827] Clean temporary directory on OSX.,2,[],https://github.com/chevah/python-package/pull/67,https://github.com/bgola,2,https://github.com/chevah/python-package/pull/67#issuecomment-275330881,"Scope
On OSX the temporary pip directory was not removed if pip failed as it is not under /tmp.
Changes
Add code to clean the folder under ${TMPDIR}.
How to try and test the changes
reviewers: @adiroiban @dumol
Please check if changes make sense.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,67,2017-01-26T07:55:14Z,2017-01-26T18:06:07Z,2017-01-27T10:25:38Z,MERGED,True,7,1,1,https://github.com/bgola,[#3827] Clean temporary directory on OSX.,2,[],https://github.com/chevah/python-package/pull/67,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/67#issuecomment-275358367,"Scope
On OSX the temporary pip directory was not removed if pip failed as it is not under /tmp.
Changes
Add code to clean the folder under ${TMPDIR}.
How to try and test the changes
reviewers: @adiroiban @dumol
Please check if changes make sense.","don't forget the ticket id in the title.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,67,2017-01-26T07:55:14Z,2017-01-26T18:06:07Z,2017-01-27T10:25:38Z,MERGED,True,7,1,1,https://github.com/bgola,[#3827] Clean temporary directory on OSX.,2,[],https://github.com/chevah/python-package/pull/67,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/67#issuecomment-275390031,"Scope
On OSX the temporary pip directory was not removed if pip failed as it is not under /tmp.
Changes
Add code to clean the folder under ${TMPDIR}.
How to try and test the changes
reviewers: @adiroiban @dumol
Please check if changes make sense.","looks good. ... only a few minor comments
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/68,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/68#issuecomment-278633568,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","This is a proof of concept, feedback welcomeâ€¦
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/bgola,3,https://github.com/chevah/python-package/pull/68#issuecomment-278640306,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","I'm not sure what is the goal with this custom version, but if we are using the date, wouldn't it be better if we export that from the build script automatically so we don't need to change the serial value every time we build?
regarding the format, i think that's fine.",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/68#issuecomment-278674891,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","I think that Misu's work is proof of concept.
Yes. We should export the version from the build script... maybe via a env var.
I would like to keep this change as small as posible so just inject the version in PY_VERSION.

The goal here is to be able to identify the exact python-package release which was used to run a test and to create a distributable package.

Right now we have the Arch linux test passing on chevah/server ... and the local paver dist working, yet the staging version is failing.
We have versions for each software used by our paver deps  command, with the exception of the python distribution itself.

The goal is to create an environment in which we can detect failures similar to ArchLinux ... or at least to help us investigate that.
I think that keeping a note in python version is one step",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/68#issuecomment-278921214,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","so... for me is ok even if we have
$ build/Python-2.7.10/python                                  
Python 2.7.10 (default, Feb  8 2017, 20:12:45, a3da34ed3) 

I would not add a separate release so that we will not trigger some side effects.... I don't know what software might use the version for doing funny things.
Thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/68#issuecomment-279141984,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Thanks for the suggestions, have tried a different approach, no C code changes this time, just a sed command to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the first 8 letters of the git revision are displayed before the build date):
Python 2.7.10 (863ba9ad, Feb 11 2017, 13:39:45)
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (863ba9ad, Feb 11 2017, 13:39:45) \n[GCC 4.8.4]'

What do you think?
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/68#issuecomment-279142063,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","As I have reversed the previous changes in the same commit, I recommend taking a look at the changes as a whole. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/68#issuecomment-279219810,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","thanks. looks pretty good.
Since we can't use the sha for version comparison I think that the current solution is excellent :)

This can be done in a separate ticket... but maybe is a easy fix.
To help identify a version, maybe we can include this 8 chars in the python archive name... beside the date.... or instead of the date :)
If we are using it instead of the date we can use it as the base for a poor man's versioning scheme ... with some support from paver.sh so maybe this can be done in a separate branch.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/68#issuecomment-279373207,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Thank you for the feedback, I'm working on getting this into shape, thus:
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/68#issuecomment-279465463,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","I think I've implemented all suggestionsâ€¦ Not sure about the paver.sh thing though, do you want to download through it a specific version of the python-package archive (eg. python2.7-ubuntu1404-x64-20170213-d2361052.tar.gz) instead of the generic one (eg. python2.7-ubuntu1404-x64.tar.gz), as we currently do? For now we depend on symbolic links on the server hosting the packages and the long name is not that relevant.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/68#issuecomment-279468672,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","I would like to get rid of symbolic links and grab the python based on the OS name + arch + python version + sha.
I would like the python archive to include the exact python version like '2.7.10'
so the archive name would be
python-2.7.10.c3dea23-linux-x86.tar.gz

in paver.conf instead of PYTHON_VERSION='python2.7' we can have something like
PYTHON_VERSION='default@2.7.11.23d24:solaris10-x64@2.7.8.53da3f4:sles10-x64@2.7.11.578ac4f2'

then paver.sh will decide which version to install based on PYTHON_VERSION....
and in an ideal word, each time paver.sh is called it will also look at the existing python_version and reinstall it if the existing version is different to the one from paver.conf",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,12,https://github.com/chevah/python-package/pull/68#issuecomment-279508009,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Changes looks good.
You can leave or remove the timestamp from the archive name.
For now we will still use the symbolic link as we also need to update the Windows version.
After that we can look at implementing PYTHON_VERSION changes in a separate ticket.
Thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/bgola,13,https://github.com/chevah/python-package/pull/68#issuecomment-279662329,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/dumol,14,https://github.com/chevah/python-package/pull/68#issuecomment-279797474,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Have implemented the suggestions from the last review and updated the PR. @adiroiban please take a look at the results and let me know if they are fine. (Have removed @bgola from list of reviews for this). Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,15,https://github.com/chevah/python-package/pull/68#issuecomment-279822789,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","i like it a lot :) great work.
just a small change request.
please also keep the version in a file.. maybe lib/PYTHON_VERSION or lib/python-release
and lib is found in both windows and unix version.
looking forward to see this hitting production.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,68,2017-02-08T18:07:08Z,2017-02-15T21:40:42Z,2017-02-15T21:40:42Z,CLOSED,False,48,38,4,https://github.com/dumol,[#3855] Custom Python versioning on Linux/Unix.,15,[],https://github.com/chevah/python-package/pull/68,https://github.com/adiroiban,16,https://github.com/chevah/python-package/pull/68#issuecomment-279837535,"Scope
The python binary in python-package should advertise a custom version through sys.version.
The custom version should be based on the current git revision.
The python archive name should include this custom version, eg. python-2.7.10.c3dea23-linux-x86.tar.gz.
Changes
Added a sed command in python's chevahbs script to hijack an unused Mercurial-related string which would have always been default downstream of us. This is how the result looks like (the short form of the git revision is displayed before the build date):
Python 2.7.10 (ba67e06, Feb 13 2017, 14:08:38) 
[GCC 4.8.4] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.version
>>> '2.7.10 (ba67e06, Feb 13 2017, 14:08:38) \n[GCC 4.8.4]'

Added a python test for checking the presence of the short form of the git revision in python's sys.version string. When failing, the check errors out as follows:
% ./chevah_build test
~/dumol/python-package/build ~/dumol/python-package
python 2.7.10 (18aebdb9, Feb 13 2017, 18:38:53) 
[GCC 4.8.4]
zlib 1.0
stdlib ssl OpenSSL 1.0.1f 6 Jan 2014
cryptography 1.3.1 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
pyopenssl 16.0.0 - OpenSSL OpenSSL 1.0.1f 6 Jan 2014
PyCrypto 2.6.1
ctypes 1.1.0
setproctitle 1.1.10
Python's version doesn't match git rev!
        Bin ver: 18aebdb
        Git rev: a896862
PWD : /home/chevah/dumol/python-package/build
Fail: ./python2.7-ubuntu1404-x64/bin/python test_python_binary_dist.py


Added the git rev string in the python package archive and stopped using time stamps.
Drive-by changes:

removed duplicate python tests
cleaned up the error code scheme even more.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build and test python-package, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/29
Check sys.version for the python binary.
Check the file name for the newly created archive.
Check that the test for the git rev works (eg. by testing with a different python binary).","Not sure about the paver.sh thing though, do you want to download through it a specific version of the python-package archive (eg. python2.7-ubuntu1404-x64-20170213-d2361052.tar.gz) instead of the generic one (eg. python2.7-ubuntu1404-x64.tar.gz), as we currently do? For now we depend on symbolic links on the server hosting the packages and the long name is not that relevant.

the paver.sh will be done in a separate ticket.
for backward compatibility we will still need to keep the symlink.
the plan is for paver.sh to download directly the archive and re-download it ... in this way we can have different branches with different python versions
thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/69,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25","Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25",True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/69#issuecomment-278773843,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/69#issuecomment-278775533,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25","looks good. thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/bgola,4,https://github.com/chevah/python-package/pull/69#issuecomment-278920031,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25",changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/69#issuecomment-278967432,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25","For the record, I have removed the last commit, that upgraded _X_OPEN_SOURCE define to 600, as it is no longer necessary with Sun Studio 12.4 on Solaris 10 x86.",True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/69#issuecomment-278972331,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25","thanks for the info. still good :)
I have observed that in Python3 that code is removed",True,{}
chevah/python-package,https://github.com/chevah/python-package,69,2017-02-09T18:44:38Z,2017-02-10T16:45:26Z,2017-02-10T16:45:26Z,CLOSED,False,11,4,1,https://github.com/dumol,[#3834] Check for the multiprocessing module.,2,[],https://github.com/chevah/python-package/pull/69,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/69#issuecomment-278994616,"Scope
Solaris 10 x86 is missing the multiprocessing module.
Changes
Added a new test to check for the multiprocessing module when testing the python binary.
Downgraded the compiler from 12.5 to 12.4 on the Solaris x86, so that we don't have to updated the POSIX-related definition in multiprocessing.h to make the needed extra functions available through the Sun Studio compiler. Note that on our current SPARC Solaris 10 server the 12.5 version doesn't work because of a hardware incompatibility.
Drive-by changes:

incremented duplicated error code when testing the python binary
improved on the error code scheme when testing the python binary.

How to try and test the changes
reviewers: @adiroiban @brunogola
Please review changes
Check for missing multiprocessing module with the old code in the module, eg. https://chevah.com/buildbot/builders/python-package-solaris-10/builds/120/steps/test/logs/stdio
Run the tests, including the new one of the multiprocessing module on all the review targets, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/25",Also updated the PR description and the Trac wiki page on Solaris to document the situation.,True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/70,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/70#issuecomment-283031495,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Ok, so what do we need to check? Both scandir and _scandir? Or only _scandir?

we can test scandir but the C module is _scandir... so the important test is for _scandir

And here's how things look on a build slave where scandir is compiled through EXTRA_LIBRARIES_NO_CFFI:

It looks good. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/70#issuecomment-283141293,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Got an all-green test_review on this, let me know what you think. If the helper function is fine, I can added it to more module, suggestions welcome.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/70#issuecomment-283332911,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","looks good.
We might  want to start introducing the python module own tests as part of the chevah python test
for example, to make sure we run something like this
$ ./build/python2.7-ubuntu1604-x64/bin/python python-modules/python-scandir-1.5/test/run_tests.py 

I have pushed a quick and dirty update with my suggestions... feel free to revert it as they are only minor comments
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/70#issuecomment-283433347,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Problem is, the test suite for scandir has some issues:


a Unicode-related problem in Unix, that cascades into lots of errors, eg. https://chevah.com/buildbot/builders/python-package-sles-10/builds/49/steps/test/logs/stdio. I've tried a workaround that improves things somehow (https://chevah.com/buildbot/builders/python-package-sles-10/builds/52/steps/test/logs/stdio), but then the Unicode-related test break for all slaves, including Windows, where they worked (https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/181/steps/test/logs/stdio).


an issue with stat in Windows, eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/179/steps/test/logs/stdio (perhaps a problem with rounding?)


So, what to do next? :-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/70#issuecomment-283477395,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","the tests are poorly written.
We should report them upstream... fix them upstream and once fixed, include them in the project.
So, for now, we can skip the tests.
Please revert my change.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/70#issuecomment-283881703,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Have limited scandir's own tests to Windows and MacOS, after working around the small issue with rounding on Windows.
Have also added egg checks to the other C modules.
PR description updated above to reflect the above changes, please check the latest commits. Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/70#issuecomment-283886553,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","looks good. thanks!
To have the test pass instead of
execute $LOCAL_PYTHON_BINARY somethin

we can have
    LANG=en_US.UTF-8
    execute $LOCAL_PYTHON_BINARY ../python-modules/python-scandir-1.5/test/run_tests.py
    LANG=C

this will execute the tests
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/70#issuecomment-284078729,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","That's how I did the first time, but I want the code to be as clear as
possible, even if the price is a bit of repetition.",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/70#issuecomment-284132775,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","Now we have scandir's internal tests for most of the build slaves, as properly exporting LC_ALL fixes the issues on more systems. We should probably enable some more internal tests for modules, but in a separate PR, as it will surely prove problematic in our diverse build environment.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,70,2017-02-27T12:32:18Z,2017-03-04T13:29:18Z,2017-03-04T13:29:18Z,CLOSED,False,4140,5,20,https://github.com/dumol,[#3901] Add scandir module.,19,[],https://github.com/chevah/python-package/pull/70,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/70#issuecomment-284133851,"Scope
Add scandir module to our Python package to fix issues with the server in AIX.
Changes
Added scandir version 1.5 to PIP_LIBRARIES and EXTRA_LIBRARIES_NO_CFFI.
Added tests for the scandir and _scandir module (the last one is not tested in Windows).
Added a test to make sure zip_safe is False, eg. remove the relevant line from setup.py in scandir's module sub-dir, the test should fail for SLES 10:
_scandir module not in current path, is zip_safe set to True for it?
	current path: /srv/buildslave/runtime/build-sles10-x64/slave/python-package-sles-10/build/build
	module file: /srv/buildslave/.python-eggs/scandir-1.5-py2.7-linux-x86_64.egg-tmp/_scandir.so

Added this test for the other C modules.
Added tests for Python modules, beginning with scandir's own tests. For now, some Linux / Unix build slaves are excepted because of problems reported upstream, as mentioned in the changes.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/37","thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/71,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/71#issuecomment-286784682,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","Updating sources in versioned dirs results in huge diffs. I think these are my changes for this branch, from git diff master chevah_build functions.sh src/*/chevahbs src/python/*.patch python-modules/:
Edited to remove the enormous diff as the changes were obsoleted by the later commits, see below for an updated diff.",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/71#issuecomment-286833162,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/71#issuecomment-286869499,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","if the test pass... please merge.
Please don't push the change into production just yet.
I want to release 3.20.0 and then after release we can push into production and have a full release to test the new build.
thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/71#issuecomment-286988528,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","so.. this need to be in master so that you can continue the work on HP-UX.
Also, we can push into production the Linux Generic versions, Arch, Raspbian, OSX, macOS, the bsd, and ubuntu ...
and sles, rhel. aix, solaris and windows can be pushed later.
thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/71#issuecomment-287161570,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","While reviewing my changes I have tried a fix for a minor issues and then discovered lots of redundant code in the chevahbs scripts and got a bit carried away with those clean-ups. Have updated the pull request and have re-run the tests.
Consequently the changes are a bit bigger (lots of removals). For the record, these would be the relevant changes to master (minus the upstream sources and the patches for Python):
diff --git a/chevah_build b/chevah_build
index 735c88f9..e3b27e27 100755
--- a/chevah_build
+++ b/chevah_build
@@ -8,26 +8,32 @@
 # publish_staging
 #
 
-LIBFFI_VERSION=3.2.1
-GMP_VERSION=6.0.0
-LIBEDIT_VERSION=20150325-3.1
-PYTHON_BUILD_VERSION=2.7.10
-PYSQLITE_VERSION=2.6.3
-SQLITE_VERSION=3.8.1
+# Beware that older versions might be used for selected platforms below.
+PYTHON_BUILD_VERSION=""2.7.13""
+LIBFFI_VERSION=""3.2.1""
+# We statically build the BSD libedit on selected platforms to get the
+# readline module available without linking to the GPL-only readline libs.
+LIBEDIT_VERSION=""20160903-3.1""
+# PyCrypto needs GMP or MPIR for fast math. GMP has support for AIX/HP-UX/etc.
+GMP_VERSION=""6.1.2""
+SQLITE_VERSION=""3.17.0""
+PYSQLITE_VERSION=""2.6.3""
 
 # Git revision to inject into Python's sys.version string through chevahbs.
 PYTHON_PACKAGE_VERSION=$(git rev-parse --short HEAD)
 # The ID of the redistributable version used on Windows.
 REDISTRIBUTABLE_VERSION=""9.00.30729.6161""
 
-export PYTHON_BUILD_VERSION PYTHON_PACKAGE_VERSION REDISTRIBUTABLE_VERSION
-
 # pycparser needs to be explicitly installed to work around setuptools auto
 # dependencies.
-PYCPARSER_VERSION=2.14
+PYCPARSER_VERSION=""2.14""
 
-BUILD_LIBFFI=""yes""
-BUILD_CFFI=""yes""
+# Export the variables needed by the chevahbs scripts and the test phase.
+export PYTHON_BUILD_VERSION PYTHON_PACKAGE_VERSION REDISTRIBUTABLE_VERSION
+export BUILD_LIBEDIT=""yes""
+export BUILD_GMP=""yes""
+export BUILD_LIBFFI=""yes""
+export BUILD_CFFI=""yes""
 EXTRA_LIBRARIES=""\
     python-modules/cffi-1.5.2 \
     python-modules/pycrypto-2.6.1 \
@@ -103,7 +109,7 @@ INSTALLED_PACKAGES=''
 # for example by exporting ARCH in paver.sh as ""x86"" instead of ""x64"" or
 # ""ppc"" instead of ""ppc64"".
 # We also use $ARCH when building the statically compiled libffi and GMP.
-# and $OS when building for ArchLinux
+# $OS is used when patching/configuring/building/testing.
 export ARCH
 export OS
 # Explicitly choose the C compiler in order to make it possible to switch
@@ -153,8 +159,10 @@ case $OS in
                 export CFLAGS=""$CFLAGS -qmaxmem=-1 -q64""
             fi
         fi
+        # There are issues with compiling libedit on AIX.
+        export BUILD_LIBEDIT=""no""
         # On AIX cffi based modules are not ported yet.
-        BUILD_CFFI=""no""
+        export BUILD_CFFI=""no""
         PIP_LIBRARIES=""""
         EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
         ;;
@@ -191,8 +199,10 @@ case $OS in
                 export LDFLAGS=""$LDFLAGS -L/usr/lib/mps/64 -R/usr/lib/mps/64""
             fi
         fi
+        # readline with libedit is doable in Solaris, but the result is buggy.
+        export BUILD_LIBEDIT=""no""
         # cffi modules are not ready yet on Solaris.
-        BUILD_CFFI=""no""
+        export BUILD_CFFI=""no""
         PIP_LIBRARIES=""""
         EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
         ;;
@@ -202,7 +212,7 @@ case $OS in
         export MAKE=gmake
         ;;
     osx*)
-        # The extra params needed to fix the minimum target version to 10.8
+        # The extra params needed to set the minimum target version to 10.8
         # have the important benefit of getting rid of the libgcc dependency.
         export CC=""clang""
         export CXX=""clang++""
@@ -217,14 +227,24 @@ case $OS in
         # The location of the Homebrew OpenSSL libs and include directories.
         export LDFLAGS=""-L/usr/local/opt/openssl/lib $LDFLAGS""
         export CPPFLAGS=""-I/usr/local/opt/openssl/include""
+        export BUILD_LIBEDIT=""no""
         ;;
-
     freebsd*)
         export CC=""clang""
         export CXX=""clang++""
+        export BUILD_LIBEDIT=""no""
+        ;;
+    archlinux)
+        export BUILD_LIBEDIT=""no""
+        ;;
+    linux*)
+        # We don't compile libedit for generic Linux builds because it links
+        # to local ncurses libs (one of ncurses, ncursesw, tinfo, others?),
+        # and the result is not portable.
+        export BUILD_LIBEDIT=""no""
         ;;
     sles10)
-        BUILD_CFFI=""no""
+        export BUILD_CFFI=""no""
         PIP_LIBRARIES=""""
         EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
         ;;
@@ -235,8 +255,11 @@ case $OS in
         # On windows extra libraries are installed only using PIP.
         EXTRA_LIBRARIES=""""
         PIP_LIBRARIES=$PIP_LIBRARIES_WIN
+        # For Windows we don't build everything from source yet.
+        export BUILD_LIBEDIT=""no""
+        export BUILD_GMP=""no""
         # We don't build libffi, as cffi it is available as a wheel in pypi.
-        BUILD_LIBFFI=""no""
+        export BUILD_LIBFFI=""no""
         ;;
 esac
 
@@ -394,46 +417,29 @@ command_build() {
     # Clean the build dir to avoid contamination from previous builds.
     command_clean
 
-    if [ $BUILD_LIBFFI == ""yes"" ]; then
+    # Build stuff statically on most platforms, copy headers and libs in
+    # the following locations, added to $CPPFLAGS and $LDFLAGS accordingly.
+    mkdir -p $INSTALL_FOLDER/{include,lib}
+    export CPPFLAGS=""-I${INSTALL_FOLDER}/include/ ${CPPFLAGS}""
+    export LDFLAGS=""-L${INSTALL_FOLDER}/lib/ ${LDFLAGS}""
+
+    if [ ""$BUILD_LIBFFI"" = ""yes"" ]; then
         build 'libffi' ""libffi-$LIBFFI_VERSION"" ${PYTHON_BUILD_FOLDER}
+    else
+        (>&2 echo ""Skipping building LIBFFI!"")
     fi
 
-    case $OS in
-        windows*)
-            # For Windows we don't build everything from source yet.
-            echo ""Skipping GMP""
-            ;;
-        *)
-            # Build GMP statically on all platforms, copy headers and libs in
-            # a temp location, and update $CPPFLAGS and $LDFLAGS accordingly.
-            # For any other statically-compiled lib, such as libedit,
-            # we'll need these shell vars.
-            build 'gmp' ""gmp-$GMP_VERSION"" ${PYTHON_BUILD_FOLDER}
-            ;;
-    esac
+    if [ ""$BUILD_LIBEDIT"" = ""yes"" ]; then
+        build 'libedit' ""libedit-$LIBEDIT_VERSION"" ${PYTHON_BUILD_FOLDER}
+    else
+        (>&2 echo ""Skipping building LIBEDIT!"")
+    fi
 
-    mkdir -p $INSTALL_FOLDER/{include,lib}
-    export CPPFLAGS=""${CPPFLAGS} -I$INSTALL_FOLDER/include/""
-    export LDFLAGS=""${LDFLAGS} -L$INSTALL_FOLDER/lib/""
-
-    # Statically build the BSD libedit on selected platforms to get readline
-    # support without linking to the GPL-only readline. We don't do this for
-    # generic Linux builds because the result depends on the local ncurses
-    # libs (ncurses, ncursesw, tinfo, others?), and the result is not portable.
-    # $CPPFLAGS and $LDFLAGS already point to these 'include' and 'lib' dirs.
-    case $OS in
-        sles10)
-            # Don't build libedit on SLES 10 as this is an old platform and is
-            # ok if it runs with limited support.
-            true
-            ;;
-        ubuntu*|raspbian*|rhel*|sles*|solaris*|archlinux)
-            build 'libedit' ""libedit-$LIBEDIT_VERSION"" ${PYTHON_BUILD_FOLDER}
-            cp -r $INSTALL_FOLDER/tmp/libedit/{editline/,*.h} \
-                $INSTALL_FOLDER/include/
-            cp $INSTALL_FOLDER/tmp/libedit/libedit* $INSTALL_FOLDER/lib/
-            ;;
-    esac
+    if [ ""$BUILD_GMP"" = ""yes"" ]; then
+        build 'gmp' ""gmp-$GMP_VERSION"" ${PYTHON_BUILD_FOLDER}
+    else
+        (>&2 echo ""Skipping building GMP!"")
+    fi
 
     case $OS in
         windows*)
@@ -625,7 +631,6 @@ initialize_python_module(){
 help_text_test=\
 ""Run a quick test for the Python from build.""
 command_test() {
-    export BUILD_CFFI
     test_file='test_python_binary_dist.py'
     execute mkdir -p build/
     execute cp python-modules/chevah-python-test/${test_file} build/
diff --git a/functions.sh b/functions.sh
index e44b4399..48617754 100644
--- a/functions.sh
+++ b/functions.sh
@@ -96,6 +96,11 @@ select_chevahbs_command() {
 # Internal function for calling build script on each source.
 #
 chevahbs_build() {
+    if [ -n ""$(type -t chevahbs_patch)"" ]; then
+        # Looks like the chevahbs script has patches to apply.
+        echo ""Patching...""
+        chevahbs_patch $@
+    fi
     echo ""Configuring...""
     chevahbs_configure $@
     echo ""Compiling...""
@@ -149,6 +154,11 @@ build() {
     echo ""Copying source code ${build_folder}...""
     execute cp -r ${source_folder} ${build_folder}
     execute cp src/${project_folder}/chevahbs ${build_folder}/
+    if [ $(ls src/${project_folder}/*.patch 2>/dev/null | wc -l) -gt 0 ]; then
+        echo ""The following patches are to be copied:""
+        ls -1 src/${project_folder}/*.patch
+        execute cp src/${project_folder}/*.patch ${build_folder}/
+    fi
     execute cp 'functions.sh' ${build_folder}/
 
     execute pushd ${build_folder}
diff --git a/python-modules/chevah-python-test/test_python_binary_dist.py b/python-modules/chevah-python-test/test_python_binary_dist.py
index 7bd1c4d3..d1078430 100644
--- a/python-modules/chevah-python-test/test_python_binary_dist.py
+++ b/python-modules/chevah-python-test/test_python_binary_dist.py
@@ -7,10 +7,10 @@ import subprocess
 
 script_helper = './get_binaries_deps.sh'
 platform_system = platform.system().lower()
-test_for_readline = False
 with open('../DEFAULT_VALUES') as default_values_file:
     chevah_os = default_values_file.read().split(' ')[2]
 BUILD_CFFI = os.environ.get('BUILD_CFFI', 'no').lower() == 'yes'
+BUILD_LIBEDIT = os.environ.get('BUILD_LIBEDIT', 'no').lower() == 'yes'
 
 
 def get_allowed_deps():
@@ -37,7 +37,6 @@ def get_allowed_deps():
             ]
         # Distro-specific deps to add. Now we may specify major versions too.
         if ('rhel' in chevah_os):
-            test_for_readline = True
             allowed_deps.extend([
                 'libcom_err.so.2',
                 'libgssapi_krb5.so.2',
@@ -65,23 +64,19 @@ def get_allowed_deps():
                     'libpcre.so.1',
                     ])
         elif ('sles' in chevah_os):
-            test_for_readline = True
             sles_version = int(chevah_os[4:])
-            if sles_version >= 11:
-                allowed_deps.extend([
-                    'libncursesw.so.5',
-                    ])
+            allowed_deps.extend([
+                'libncursesw.so.5',
+                ])
             if sles_version >= 12:
                 allowed_deps.extend([
                     'libtinfo.so.5',
                     ])
         elif ('ubuntu' in chevah_os):
-            test_for_readline = True
             allowed_deps.extend([
                 'libtinfo.so.5',
                 ])
         elif ('raspbian' in chevah_os):
-            test_for_readline = True
             allowed_deps.extend([
                 'libcofi_rpi.so',
                 'libgcc_s.so.1',
@@ -117,7 +112,6 @@ def get_allowed_deps():
                 'libthread.a',
                 ])
     elif platform_system == 'sunos':
-        test_for_readline = True
         # This is the common list of deps for Solaris 10 & 11 builds.
         allowed_deps = [
             'libc.so.1',
@@ -184,6 +178,7 @@ def get_allowed_deps():
             allowed_deps.extend([
                 '/usr/lib/libcrypto.0.9.8.dylib',
                 '/usr/lib/libssl.0.9.8.dylib',
+                '/usr/lib/libncurses.5.4.dylib',
                 ])
         elif ('macos' in chevah_os):
             # Additional deps when using Homebrew's OpenSSL.
@@ -210,6 +205,7 @@ def get_allowed_deps():
             '/usr/lib/libc.so',
             '/usr/lib/libcrypto.so',
             '/usr/lib/libm.so',
+            '/usr/lib/libncursesw.so.14.0',
             '/usr/lib/libpthread.so',
             '/usr/lib/libssl.so',
             '/usr/lib/libutil.so',
@@ -500,17 +496,22 @@ def main():
             sys.stderr.write('""spwd"" missing.\n')
             exit_code = 11
 
+
     # We compile the readline module using libedit only on selected platforms.
-    if test_for_readline:
+    if BUILD_LIBEDIT:
         try:
             import readline
             readline.get_history_length()
         except:
             sys.stderr.write('""readline"" missing.\n')
             exit_code = 12
+        else:
+            print '""readline"" module is present.'
+
 
     exit_code = test_dependencies() | exit_code
 
+
     sys.exit(exit_code)
 
 
diff --git a/src/gmp/chevahbs b/src/gmp/chevahbs
index 2610def9..7d738df7 100755
--- a/src/gmp/chevahbs
+++ b/src/gmp/chevahbs
@@ -39,23 +39,7 @@ chevahbs_compile() {
 
 chevahbs_install() {
     install_folder=$1
-    # As with libffi, we copy the files manually to a temporary location and
-    # then we get them from there before compiling PyCrypto. We'll also have
-    # to instruct the compiler to link against our GMP by augmenting CPPFLAGS
-    # with the include's location and LDFLAGS with the location of the libs.
-    local temp_folder=$INSTALL_FOLDER/tmp/gmp/
-    execute mkdir -p $temp_folder
-    execute cp .libs/* $temp_folder
-    ranlib $temp_folder/libgmp.a
-    execute cp gmp.h $temp_folder
-
-    # We need GMP or MPIR for fast math in PyCrypto. We use GMP because
-    # its devs do a better job of supporting exotic platforms such as AIX.
-    # $CPPFLAGS and $LDFLAGS already point to these 'include' and 'lib' dirs.
-    mkdir -p $INSTALL_FOLDER/include
-    mkdir -p $INSTALL_FOLDER/lib
-    cp $INSTALL_FOLDER/tmp/gmp/gmp.h $INSTALL_FOLDER/include
-    cp $INSTALL_FOLDER/tmp/gmp/libgmp* $INSTALL_FOLDER/lib
+    execute $MAKE install DESTDIR=$INSTALL_FOLDER
 }
 
 
diff --git a/src/libedit/chevahbs b/src/libedit/chevahbs
index 809a7504..373ab52c 100755
--- a/src/libedit/chevahbs
+++ b/src/libedit/chevahbs
@@ -8,19 +8,8 @@
 
 chevahbs_configure() {
     # We want static builds only, so that we don't have to mess with LIBPATH.
-    # Support for Unicode (wide-char/UTF-8) is added with ""--enable-widec"".
-    CONF_OPTS=""--disable-shared --enable-static --enable-widec""
-    execute mkdir m4
-    # RHEL 4 and 5 have an older autoconf, and we can't auto-reconfigure.
-    case $OS in
-        rhel4|rhel5)
-            # This redirects the echo output to stderr.
-            >&2 echo ""This seems to be a RHEL 4/5 system, skipping autoreconf!""
-            ;;
-        *)
-            execute autoreconf --install --force
-            ;;
-    esac
+    CONF_OPTS=""--disable-shared --enable-static""
+    touch *
     execute ./configure --prefix="""" $CONF_OPTS
 }
 
@@ -32,15 +21,7 @@ chevahbs_compile() {
 
 chevahbs_install() {
     install_folder=$1
-    # We copy the includes and libs manually to a temporary location, and
-    # we instruct the compiler to link against our lib by augmenting CPPFLAGS
-    # with the include's location and LDFLAGS with the location of the libs.
-    local temp_folder=$INSTALL_FOLDER/tmp/libedit/
-    execute mkdir -p $temp_folder
-    execute cp src/.libs/* $temp_folder
-    execute ranlib $temp_folder/libedit.a
-    execute chmod +x $temp_folder/libedit.a
-    execute cp -r src/*.h src/editline/ $temp_folder
+    execute $MAKE install DESTDIR=$INSTALL_FOLDER
 }
 
 
diff --git a/src/libffi/chevahbs b/src/libffi/chevahbs
index 4e87acef..77523f74 100755
--- a/src/libffi/chevahbs
+++ b/src/libffi/chevahbs
@@ -22,39 +22,34 @@ chevahbs_compile() {
 chevahbs_install() {
     install_folder=$1
 
-    if [ x${ARCH##ppc} != x""$ARCH"" ]; then
-        # libffi installs its headers in $PREFIX/lib/libffi-$VERSION/include,
-        # instead of $PREFIX/include, so we copy them manually to a temporary
-        # location.
-        # From there we will copy them just in time for building Python sources.
-        # For Python's setup.py to pick them up, we will augment CPPFLAGS with
-        # the include's location and LDFLAGS with the location of the libs.
-        local temp_folder=$INSTALL_FOLDER/tmp/libffi
-        execute mkdir -p $temp_folder
-
-        execute cp powerpc-ibm-aix*/.libs/* $temp_folder
-        execute cp powerpc-ibm-aix*/include/*.h $temp_folder
-    elif [ ""$OS"" = ""solaris10"" ]; then
-        # I don't know why it is skip... but doing the actual install will
-        # break the build.
-        echo 'Skipping installation of libffi on Solaris 10.'
-    elif [ ""$OS"" = ""solaris11"" ]; then
-        # I don't know why it is skip... but doing the actual install will
-        # break the build.
-        echo 'Skipping installation of libffi on Solaris 11.'
-    else
-        execute $MAKE install DESTDIR=$INSTALL_FOLDER
-
-        # libffi installs its headers in $PREFIX/lib/libffi-$VERSION/include,
-        # instead of $PREFIX/include, so we copy them manually to the default
-        # location.
-        execute mkdir -p $INSTALL_FOLDER/include
-        execute cp $INSTALL_FOLDER/lib/libffi-*/include/* $INSTALL_FOLDER/include
-        # On some systems libffi in installed in /lib64 and then cffi is
-        # searching for it in /lib.
-        # THis affect RHEL, SLES and OpenBSD.
-        cp $INSTALL_FOLDER/lib64/* $INSTALL_FOLDER/lib
-        echo 'cffi done... here to ignore a possible previous error'
+    # Installing fails on some OS'es.
+    # Following workarounds should cover all 32/64bit cases.
+    case $OS in
+        aix*)
+            execute ln -s ../install-sh powerpc-ibm-aix""$(oslevel)""/install-sh
+            ;;
+        solaris10)
+            case $ARCH in
+                sparc*)
+                    execute ln -s ../install-sh sparc-sun-solaris2.10/install-sh
+                    ;;
+                *)
+                    execute ln -s ../install-sh i386-pc-solaris2.10/install-sh
+                    ;;
+            esac
+            ;;
+    esac
+
+    execute $MAKE install DESTDIR=$INSTALL_FOLDER
+
+    # libffi installs its headers in $PREFIX/lib/libffi-$VERSION/include,
+    # instead of $PREFIX/include, so we copy them to the default location.
+    execute mkdir -p $INSTALL_FOLDER/include
+    execute cp $INSTALL_FOLDER/lib*/libffi-*/include/* $INSTALL_FOLDER/include/
+    # On some systems libffi is installed in /lib64 and then cffi is
+    # searching for it in /lib. This affects RHEL 5-7 and SLES 11-12.
+    if [ -d $INSTALL_FOLDER/lib64 ]; then
+        execute cp $INSTALL_FOLDER/lib64/* $INSTALL_FOLDER/lib/
     fi
 }
 
diff --git a/src/python/chevahbs b/src/python/chevahbs
index 199599d5..844f5446 100755
--- a/src/python/chevahbs
+++ b/src/python/chevahbs
@@ -5,6 +5,25 @@
 # Import shared code.
 . ./functions.sh
 
+chevahbs_patch() {
+    echo ""Applying disabled_modules.patch:""
+    patch < disabled_modules.patch
+    if [ ""$BUILD_LIBEDIT"" = ""yes"" ]; then
+        echo ""Applying readline_libedit.patch:""
+        patch -p0 < readline_libedit.patch
+    fi
+    case $OS in
+        solaris10)
+            echo ""Applying solaris10_paths.patch:""
+            patch < solaris10_paths.patch
+            ;;
+        openbsd*)
+            echo ""Applying random_openbsd.patch:""
+            patch < random_openbsd.patch
+    esac
+}
+
+
 chevahbs_configure() {
     CONFIG_ARGS=""--disable-shared""
 
@@ -28,20 +47,14 @@ chevahbs_configure() {
                 ""
             ;;
         aix*)
-            # In AIX we build _ctypes with external libffi, but not the system
-            # one. We use our libffi files and statically link against its libs.
-            execute mkdir -p build/libffi
-            execute cp $INSTALL_FOLDER/tmp/libffi/* build/libffi/
-            # The following two parameters are picked up by Python's setup.py
-            # and will convince it to use our external libffi for _ctypes.
-            export CPPFLAGS=""${CPPFLAGS} -Ibuild/libffi/""
-            export LDFLAGS=""${LDFLAGS} -Lbuild/libffi/""
             # Workaround for http://bugs.python.org/issue21917
             echo ""import os; os.__dict__.pop('O_NOFOLLOW', None)"" \
                 >> Lib/site-packages/sitecustomize.py
-            # MAXMEM option with a value greater than 8192.
+            # Computed goto's are a problem with Python 2.7.13,
+            # details at https://bugs.python.org/issue9799.
             CONFIG_ARGS=""${CONFIG_ARGS} \
                 --with-system-ffi \
+                --without-computed-gotos \
                 ""
             ;;
         solaris10)
@@ -68,6 +81,11 @@ chevahbs_configure() {
             ;;
     esac
 
+    # This requires the v4 patch from https://bugs.python.org/issue13501.
+    if [ ""$BUILD_LIBEDIT"" = ""yes"" ]; then
+        CONFIG_ARGS=""${CONFIG_ARGS} --with-readline=editline""
+    fi
+
     case $OS in
         windows)
             echo ""Skip configure on Windows.""

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/71#issuecomment-287187180,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41",thanks. changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,71,2017-03-15T13:59:23Z,2017-03-17T09:32:41Z,2017-03-17T11:44:28Z,CLOSED,False,640827,734596,7060,https://github.com/dumol,"[#3931] Updated Python, GMP, SQLite and libedit.",25,[],https://github.com/chevah/python-package/pull/71,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/71#issuecomment-287333832,"Scope
For building on HP-UX, we need latest Python and GMP sources, to ease porting the patches from http://hpux.connect.org.uk/.
We are several versions behind for some of the upstream software we use and a few security issues are affecting us, eg. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3416 for SQLite.
Changes
Updated the sources for Python, GMP, SQLite and libedit to latest upstream versions and fixed the issues with building and testing.
Also updated the Windows installer to 2.7.13 after discussing the issue with @alibotean in private.
Nota bene: On Solaris 10 we are still using Python 2.7.8 because we are tied to the OpenSSL 0.9.7 system version.
Drive-by changes:

separated our patches for python to apply them only when necessary (eg. changes needed for Solaris 10 are only applied when building on Solaris 10)
changed the way we detect when to build libedit and test for readline to avoid decoupling between the two
fixed an issue with installing libffi on Solaris 10 that proved to affect AIX also
consequently removed AIX quirks in Python's setup.py and our chevahbs script for building libffi and Python
removed some more related quirks in installing GMP and libedit
got an improved libedit patch from https://bugs.python.org/issue13501.

How to try and test the changes
reviewers: @adiroiban
Please review the changes (relevant diffs below).
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/41","Thanks, have updated the following production packages:
root@weesp:~# readlink /srv/binary-site/binary.chevah.com/production/python/* | grep 8f291bb
archlinux/x64/python-2.7.13.8f291bb-archlinux-x64.tar.gz
freebsd10/x64/python-2.7.13.8f291bb-freebsd10-x64.tar.gz
linux/x64/python-2.7.13.8f291bb-linux-x64.tar.gz
linux/x86/python-2.7.13.8f291bb-linux-x86.tar.gz
macos1012/x64/python-2.7.13.8f291bb-macos1012-x64.tar.gz
openbsd60/x64/python-2.7.13.8f291bb-openbsd60-x64.tar.gz
osx108/x64/python-2.7.13.8f291bb-osx108-x64.tar.gz
raspbian7/armv7l/python-2.7.13.8f291bb-raspbian7-armv7l.tar.gz
ubuntu1204/x64/python-2.7.13.8f291bb-ubuntu1204-x64.tar.gz
ubuntu1204/x86/python-2.7.13.8f291bb-ubuntu1204-x86.tar.gz
ubuntu1404/x64/python-2.7.13.8f291bb-ubuntu1404-x64.tar.gz
ubuntu1604/x64/python-2.7.13.8f291bb-ubuntu1604-x64.tar.gz",True,{}
chevah/python-package,https://github.com/chevah/python-package,72,2017-03-30T14:47:24Z,2017-04-03T16:26:02Z,2017-04-03T16:26:02Z,CLOSED,False,7,2,4,https://github.com/dumol,[#3966] Support for OpenSSL 1.0.x in HP-UX.,4,[],https://github.com/chevah/python-package/pull/72,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/72,"Scope
As noted in Trac's ticket #2703, the HP-UX initial support was done for OpenSSL 0.9.8, but only 1.0.2 is currently supported in HP-UX, according to https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=OPENSSL11I.
Changes
Added an explicit import for _ssl to avoid errors with pip and cffi when building against OpenSSL 1.0.2.
Do not build CFFI on HP-UX for now.
Updated OpenSSL deps to 1.0.x for the test phase.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/44","Scope
As noted in Trac's ticket #2703, the HP-UX initial support was done for OpenSSL 0.9.8, but only 1.0.2 is currently supported in HP-UX, according to https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=OPENSSL11I.
Changes
Added an explicit import for _ssl to avoid errors with pip and cffi when building against OpenSSL 1.0.2.
Do not build CFFI on HP-UX for now.
Updated OpenSSL deps to 1.0.x for the test phase.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/44",True,{}
chevah/python-package,https://github.com/chevah/python-package,72,2017-03-30T14:47:24Z,2017-04-03T16:26:02Z,2017-04-03T16:26:02Z,CLOSED,False,7,2,4,https://github.com/dumol,[#3966] Support for OpenSSL 1.0.x in HP-UX.,4,[],https://github.com/chevah/python-package/pull/72,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/72#issuecomment-290462031,"Scope
As noted in Trac's ticket #2703, the HP-UX initial support was done for OpenSSL 0.9.8, but only 1.0.2 is currently supported in HP-UX, according to https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=OPENSSL11I.
Changes
Added an explicit import for _ssl to avoid errors with pip and cffi when building against OpenSSL 1.0.2.
Do not build CFFI on HP-UX for now.
Updated OpenSSL deps to 1.0.x for the test phase.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/44",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,72,2017-03-30T14:47:24Z,2017-04-03T16:26:02Z,2017-04-03T16:26:02Z,CLOSED,False,7,2,4,https://github.com/dumol,[#3966] Support for OpenSSL 1.0.x in HP-UX.,4,[],https://github.com/chevah/python-package/pull/72,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/72#issuecomment-291099758,"Scope
As noted in Trac's ticket #2703, the HP-UX initial support was done for OpenSSL 0.9.8, but only 1.0.2 is currently supported in HP-UX, according to https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=OPENSSL11I.
Changes
Added an explicit import for _ssl to avoid errors with pip and cffi when building against OpenSSL 1.0.2.
Do not build CFFI on HP-UX for now.
Updated OpenSSL deps to 1.0.x for the test phase.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/44","thanks. looks good.
The fact that _ssl import is needes is a bug with the Python dynamic module loading.
We have observed the same bug in RHEL4.
Instead of importing the private _ssl, we went for importing the high level public hashlib ... which will trigger the _ssl import
I think that this is fine.
Right now I don't have time to work more in this python-package.
In order to move forward with the HP-UX issue so that we can use the latest OpenSSL, we should first integrate the automated tests from python-cryptography and pyopenssl
in a similar way in which we are executing the tests for scandir
thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,72,2017-03-30T14:47:24Z,2017-04-03T16:26:02Z,2017-04-03T16:26:02Z,CLOSED,False,7,2,4,https://github.com/dumol,[#3966] Support for OpenSSL 1.0.x in HP-UX.,4,[],https://github.com/chevah/python-package/pull/72,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/72#issuecomment-291195248,"Scope
As noted in Trac's ticket #2703, the HP-UX initial support was done for OpenSSL 0.9.8, but only 1.0.2 is currently supported in HP-UX, according to https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=OPENSSL11I.
Changes
Added an explicit import for _ssl to avoid errors with pip and cffi when building against OpenSSL 1.0.2.
Do not build CFFI on HP-UX for now.
Updated OpenSSL deps to 1.0.x for the test phase.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/44",Wrong copy/paste in the commit message. :-/,True,{}
chevah/python-package,https://github.com/chevah/python-package,73,2017-04-07T09:35:30Z,2017-05-08T06:24:32Z,2017-05-08T06:24:33Z,CLOSED,False,63,1,5,https://github.com/dumol,[#3962] Parallel builds.,9,[],https://github.com/chevah/python-package/pull/73,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/73,"Scope
Speed up building python-package.
Changes
With -j for GNU make where supported .
With PARALLEL and the native make in HP-UX (where I had to keep using gmake for libffi).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/50
Compare the running times, especially for dedicated, bare metal machines, which were also the slowest ones. Per review test, the above one took ~58min, while the previous serial one took ~84min.","Scope
Speed up building python-package.
Changes
With -j for GNU make where supported .
With PARALLEL and the native make in HP-UX (where I had to keep using gmake for libffi).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/50
Compare the running times, especially for dedicated, bare metal machines, which were also the slowest ones. Per review test, the above one took ~58min, while the previous serial one took ~84min.",True,{}
chevah/python-package,https://github.com/chevah/python-package,73,2017-04-07T09:35:30Z,2017-05-08T06:24:32Z,2017-05-08T06:24:33Z,CLOSED,False,63,1,5,https://github.com/dumol,[#3962] Parallel builds.,9,[],https://github.com/chevah/python-package/pull/73,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/73#issuecomment-299464584,"Scope
Speed up building python-package.
Changes
With -j for GNU make where supported .
With PARALLEL and the native make in HP-UX (where I had to keep using gmake for libffi).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/50
Compare the running times, especially for dedicated, bare metal machines, which were also the slowest ones. Per review test, the above one took ~58min, while the previous serial one took ~84min.","Tests for the latest rev: https://chevah.com/buildbot/builders/python-package-group-all/builds/74
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,73,2017-04-07T09:35:30Z,2017-05-08T06:24:32Z,2017-05-08T06:24:33Z,CLOSED,False,63,1,5,https://github.com/dumol,[#3962] Parallel builds.,9,[],https://github.com/chevah/python-package/pull/73,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/73#issuecomment-299465474,"Scope
Speed up building python-package.
Changes
With -j for GNU make where supported .
With PARALLEL and the native make in HP-UX (where I had to keep using gmake for libffi).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/50
Compare the running times, especially for dedicated, bare metal machines, which were also the slowest ones. Per review test, the above one took ~58min, while the previous serial one took ~84min.",look good. thanks. changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,74,2017-04-25T10:13:20Z,2017-04-25T15:44:00Z,2017-04-25T15:44:00Z,CLOSED,False,1,0,1,https://github.com/dumol,[#4019] Fix deps for Solaris 11 x64.,1,[],https://github.com/chevah/python-package/pull/74,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/74,"Scope
Deps test on Solaris 11 x64 fails with:
Got unwanted deps:
	/usr/lib/amd64/libc.so.1

Changes
Added missing dep.
This issue was introduced by #63, where test group-all failed for Solaris 11 x64, but nobody noticed.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run test_review, eg.: https://chevah.com/buildbot/builders/python-package-gk-review/builds/45","Scope
Deps test on Solaris 11 x64 fails with:
Got unwanted deps:
	/usr/lib/amd64/libc.so.1

Changes
Added missing dep.
This issue was introduced by #63, where test group-all failed for Solaris 11 x64, but nobody noticed.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run test_review, eg.: https://chevah.com/buildbot/builders/python-package-gk-review/builds/45",True,{}
chevah/python-package,https://github.com/chevah/python-package,74,2017-04-25T10:13:20Z,2017-04-25T15:44:00Z,2017-04-25T15:44:00Z,CLOSED,False,1,0,1,https://github.com/dumol,[#4019] Fix deps for Solaris 11 x64.,1,[],https://github.com/chevah/python-package/pull/74,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/74#issuecomment-296985399,"Scope
Deps test on Solaris 11 x64 fails with:
Got unwanted deps:
	/usr/lib/amd64/libc.so.1

Changes
Added missing dep.
This issue was introduced by #63, where test group-all failed for Solaris 11 x64, but nobody noticed.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run test_review, eg.: https://chevah.com/buildbot/builders/python-package-gk-review/builds/45",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,74,2017-04-25T10:13:20Z,2017-04-25T15:44:00Z,2017-04-25T15:44:00Z,CLOSED,False,1,0,1,https://github.com/dumol,[#4019] Fix deps for Solaris 11 x64.,1,[],https://github.com/chevah/python-package/pull/74,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/74#issuecomment-297006938,"Scope
Deps test on Solaris 11 x64 fails with:
Got unwanted deps:
	/usr/lib/amd64/libc.so.1

Changes
Added missing dep.
This issue was introduced by #63, where test group-all failed for Solaris 11 x64, but nobody noticed.
How to try and test the changes
reviewers: @adiroiban
Please review the change.
Run test_review, eg.: https://chevah.com/buildbot/builders/python-package-gk-review/builds/45","thanks. looks good.
compat tests have passed https://chevah.com/buildbot/builders/compat-solaris-11/builds/163/steps/test/logs/stdio
the green list for gk-review is great.
as part of fixing the hpux issue, maybe we can include the compat tests as part of the python-package test suite...as running the whole build (including deps) only takes 2 minutes.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,75,2017-04-26T10:50:12Z,2017-04-26T14:59:11Z,2017-04-26T15:22:38Z,CLOSED,False,25,1,2,https://github.com/adiroiban,[bad-id] Use a fixed version of pip and setuptools,4,[],https://github.com/chevah/python-package/pull/75,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/75,see #77,see #77,True,{}
chevah/python-package,https://github.com/chevah/python-package,75,2017-04-26T10:50:12Z,2017-04-26T14:59:11Z,2017-04-26T15:22:38Z,CLOSED,False,25,1,2,https://github.com/adiroiban,[bad-id] Use a fixed version of pip and setuptools,4,[],https://github.com/chevah/python-package/pull/75,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/75#issuecomment-297352384,see #77,needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,75,2017-04-26T10:50:12Z,2017-04-26T14:59:11Z,2017-04-26T15:22:38Z,CLOSED,False,25,1,2,https://github.com/adiroiban,[bad-id] Use a fixed version of pip and setuptools,4,[],https://github.com/chevah/python-package/pull/75,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/75#issuecomment-297358468,see #77,"as a side now, I saw that the src/python/chevahbs is using both patch and patch -p0 ... is this on purpose?",True,{}
chevah/python-package,https://github.com/chevah/python-package,75,2017-04-26T10:50:12Z,2017-04-26T14:59:11Z,2017-04-26T15:22:38Z,CLOSED,False,25,1,2,https://github.com/adiroiban,[bad-id] Use a fixed version of pip and setuptools,4,[],https://github.com/chevah/python-package/pull/75,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/75#issuecomment-297395861,see #77,"I think that the current version is patching the source get-pip.py ... but we should have a get-pip.py in build and patch and execute that version.
Will update this soon... but you can still review it
thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,76,2017-04-26T13:45:27Z,2017-04-27T18:03:16Z,2017-04-27T18:03:19Z,MERGED,True,74,11,7,https://github.com/adiroiban,[#4020] Patch the HP-UX build to load the right libraries.,17,[],https://github.com/chevah/python-package/pull/76,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/76,"Scope
The latest 2.7.13 build is failing on HPUX
Why we got this

No complete tests for the new distribution when used with our full build and test system

Changes
Add a patch for site.py on HPUX
The tests were extended to run a full test for compat.
As a drive-by change I have documented the basic principles of generating a patch.
How to try and test the changes
reviewers: @dumol
this depends on #77 . I have include it here as otherwise the build is blocked
check that changes make sense.
for now it is using a specific branch from chevah/compat.... but I hope that branch will be merged soon into master and then I will update the code to use master
thanks","Scope
The latest 2.7.13 build is failing on HPUX
Why we got this

No complete tests for the new distribution when used with our full build and test system

Changes
Add a patch for site.py on HPUX
The tests were extended to run a full test for compat.
As a drive-by change I have documented the basic principles of generating a patch.
How to try and test the changes
reviewers: @dumol
this depends on #77 . I have include it here as otherwise the build is blocked
check that changes make sense.
for now it is using a specific branch from chevah/compat.... but I hope that branch will be merged soon into master and then I will update the code to use master
thanks",True,{}
chevah/python-package,https://github.com/chevah/python-package,76,2017-04-26T13:45:27Z,2017-04-27T18:03:16Z,2017-04-27T18:03:19Z,MERGED,True,74,11,7,https://github.com/adiroiban,[#4020] Patch the HP-UX build to load the right libraries.,17,[],https://github.com/chevah/python-package/pull/76,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/76#issuecomment-297548734,"Scope
The latest 2.7.13 build is failing on HPUX
Why we got this

No complete tests for the new distribution when used with our full build and test system

Changes
Add a patch for site.py on HPUX
The tests were extended to run a full test for compat.
As a drive-by change I have documented the basic principles of generating a patch.
How to try and test the changes
reviewers: @dumol
this depends on #77 . I have include it here as otherwise the build is blocked
check that changes make sense.
for now it is using a specific branch from chevah/compat.... but I hope that branch will be merged soon into master and then I will update the code to use master
thanks","for now the ./chevah_build test_compat is a separate step
one test is failing... but it does not seem like a critical error in python-package
I have updated the buildbot to run test_compat in separate step so that it can fail... I will soon update the buildbot configuration to  mark it just as a warning
I think that we can merge it as it is and then have a separate issue if there are more errors.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,76,2017-04-26T13:45:27Z,2017-04-27T18:03:16Z,2017-04-27T18:03:19Z,MERGED,True,74,11,7,https://github.com/adiroiban,[#4020] Patch the HP-UX build to load the right libraries.,17,[],https://github.com/chevah/python-package/pull/76,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/76#issuecomment-297790066,"Scope
The latest 2.7.13 build is failing on HPUX
Why we got this

No complete tests for the new distribution when used with our full build and test system

Changes
Add a patch for site.py on HPUX
The tests were extended to run a full test for compat.
As a drive-by change I have documented the basic principles of generating a patch.
How to try and test the changes
reviewers: @dumol
this depends on #77 . I have include it here as otherwise the build is blocked
check that changes make sense.
for now it is using a specific branch from chevah/compat.... but I hope that branch will be merged soon into master and then I will update the code to use master
thanks","However, some exotic build slaves might not pass compat tests, in which case we might move them from the all group to unstable, if we want to rely on this. Or possibly define a review group for python-package?

For now, the compat tests are just ""informative"".
If the test fails, the step will still succeed, as the step is not called with execute.
I am updating the compat build system to be faster...and to also pass on hpux. Hope that will reach compat master soon
In the future, I want to update buildmaster to allow ""warning"" state. That is a step which somehow fails, but the whole build is still considered successful.
once we have Solaris 10 Sparc up and running, can can start adding a PQM for this project... and only leave out Solaria 11 Sparc.
Thanks for the great review!",True,{}
chevah/python-package,https://github.com/chevah/python-package,77,2017-04-26T14:29:56Z,2017-04-27T16:17:34Z,2017-04-27T16:17:37Z,MERGED,True,41,1,3,https://github.com/adiroiban,[#4024] Use a fixed version of pip and setuptools,6,[],https://github.com/chevah/python-package/pull/77,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/77,"Scope
This updates the build script for python to use a pinned version for pip and setuptools.
In previous code the latest version was used so if the pypi server was update, we would end up with different python distribution, for the same commit
Changes
There is no way for get-pip.py to install a specific pip. it will always install the latest...so I had to patch it.
for setuptools there was a workarround
How to try and test the changes
reviewers: @dumol
check that changes make sense
we have newer setuptools in our pypi,chevah.com mirror.
you can try updating the chevah_build with an even older pip version and check that the requiest version is used","Scope
This updates the build script for python to use a pinned version for pip and setuptools.
In previous code the latest version was used so if the pypi server was update, we would end up with different python distribution, for the same commit
Changes
There is no way for get-pip.py to install a specific pip. it will always install the latest...so I had to patch it.
for setuptools there was a workarround
How to try and test the changes
reviewers: @dumol
check that changes make sense
we have newer setuptools in our pypi,chevah.com mirror.
you can try updating the chevah_build with an even older pip version and check that the requiest version is used",True,{}
chevah/python-package,https://github.com/chevah/python-package,77,2017-04-26T14:29:56Z,2017-04-27T16:17:34Z,2017-04-27T16:17:37Z,MERGED,True,41,1,3,https://github.com/adiroiban,[#4024] Use a fixed version of pip and setuptools,6,[],https://github.com/chevah/python-package/pull/77,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/77#issuecomment-297426552,"Scope
This updates the build script for python to use a pinned version for pip and setuptools.
In previous code the latest version was used so if the pypi server was update, we would end up with different python distribution, for the same commit
Changes
There is no way for get-pip.py to install a specific pip. it will always install the latest...so I had to patch it.
for setuptools there was a workarround
How to try and test the changes
reviewers: @dumol
check that changes make sense
we have newer setuptools in our pypi,chevah.com mirror.
you can try updating the chevah_build with an even older pip version and check that the requiest version is used",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,78,2017-05-03T10:52:47Z,2017-05-04T10:11:52Z,2017-05-04T10:11:52Z,CLOSED,False,28,2,3,https://github.com/dumol,[#4043] NetBSD support.,2,[],https://github.com/chevah/python-package/pull/78,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/78,"Scope
I've been giving NetBSD 7.1 a try for some weeks, so why not add support for this OS while at it? :-]
Changes
Added support for NetBSD 7.x in paver.sh.
Updated tests for NetBSD 7 amd64.
Built a package on my notebook and uploaded it, so that I have a working paver.sh locally.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/49","Scope
I've been giving NetBSD 7.1 a try for some weeks, so why not add support for this OS while at it? :-]
Changes
Added support for NetBSD 7.x in paver.sh.
Updated tests for NetBSD 7 amd64.
Built a package on my notebook and uploaded it, so that I have a working paver.sh locally.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/49",True,{}
chevah/python-package,https://github.com/chevah/python-package,78,2017-05-03T10:52:47Z,2017-05-04T10:11:52Z,2017-05-04T10:11:52Z,CLOSED,False,28,2,3,https://github.com/dumol,[#4043] NetBSD support.,2,[],https://github.com/chevah/python-package/pull/78,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/78#issuecomment-298879384,"Scope
I've been giving NetBSD 7.1 a try for some weeks, so why not add support for this OS while at it? :-]
Changes
Added support for NetBSD 7.x in paver.sh.
Updated tests for NetBSD 7 amd64.
Built a package on my notebook and uploaded it, so that I have a working paver.sh locally.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/49",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,78,2017-05-03T10:52:47Z,2017-05-04T10:11:52Z,2017-05-04T10:11:52Z,CLOSED,False,28,2,3,https://github.com/dumol,[#4043] NetBSD support.,2,[],https://github.com/chevah/python-package/pull/78,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/78#issuecomment-298900086,"Scope
I've been giving NetBSD 7.1 a try for some weeks, so why not add support for this OS while at it? :-]
Changes
Added support for NetBSD 7.x in paver.sh.
Updated tests for NetBSD 7 amd64.
Built a package on my notebook and uploaded it, so that I have a working paver.sh locally.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/49","OMG :) full BSD support :) thanks.
Please create a slave for it for brink and compat and I will look at adding support for it
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/79,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52","Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/79#issuecomment-300775047,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/79#issuecomment-300791283,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52",thanks. changes-approved,True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/79#issuecomment-301039170,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52","I can't come to terms with the count to 16, I think we can do betterâ€¦
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/79#issuecomment-301070186,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52",":)
Thanks.
If it works is ok.
For updating the latest pip, the important part is to update the PIP version in the chevah_build.
updating get-pip.py is optional.

We still the patched get-pip.py as otherwise it will install the latest pip available in ou pypi.chevah.com and will ignore what we have configured in our script.
So if we run it now it will install pip 9.0.1.... but if later we copy pip 12.3.0 in our pypi.chevah.com , the same old get-pip.py will install the latest (now 12.3.0) version,
We don't want that.
We want a build, which when re-build at any time in the future, will use the same versions.
For the python-package we want to always pin all our dependencies.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/79#issuecomment-301074589,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52","OK, I seeâ€¦ I thought we want latest pip from now on.",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/79#issuecomment-301105878,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52","OK, I have redone the last commit.
get-pip.py is latest version which accepts custom pip versions through a command switch, so no need for the patch and for exporting CHEVAH_PIP_VERSION.
pip is set to 9.0.1, but I have also tested 7.1.2 with this new arrangement, and it worked in Ubuntu 14.04 on Deag with the usual warning that pip is not the latest version.
Have tried to also update setuptools to latest version, but run into more problems and could not figure them on the spot. Please give it a try if you have the time. Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/79#issuecomment-301244564,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52","thanks.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,79,2017-05-11T12:32:32Z,2017-05-15T09:23:39Z,2017-05-15T09:23:39Z,CLOSED,False,20066,17707,7,https://github.com/dumol,[#4040] No more generic symlinks.,6,[],https://github.com/chevah/python-package/pull/79,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/79#issuecomment-301422346,"Scope
we have start pushing the new build system in all project ... and those repos which were not yet updated, should be updated.
for this we should stop creating symlinks in the python package as they are no longer used.
With this, we should update the paver.sh with the latest version from brink ... to keep them up to date
Changes
Have removed the code for generating symbolic links per OS/ARCH.
Have updated paver.sh from brink with related changes in paver.conf and pavement.py (updated used brink/twisted versions to latest).
Drive-by change:

got rid of the count to 16 while setting version per platform (code manually tested on the exotic platforms)
updated get-pip.py to latest version and set pip to 9.0.1.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run ./paver.sh deps.
Run ./chevah_build build and notice there is no generic symlink in dist/ anymore.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/52",https://chevah.com/buildbot/builders/python-package-gk-review/builds/53,True,{}
chevah/python-package,https://github.com/chevah/python-package,80,2017-05-31T18:21:13Z,2017-06-01T10:52:45Z,2017-06-01T10:52:46Z,CLOSED,False,4,0,1,https://github.com/dumol,[#4132] Ubuntu 16.04 ARM64 support.,1,[],https://github.com/chevah/python-package/pull/80,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/80,"Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.","Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.",True,{}
chevah/python-package,https://github.com/chevah/python-package,80,2017-05-31T18:21:13Z,2017-06-01T10:52:45Z,2017-06-01T10:52:46Z,CLOSED,False,4,0,1,https://github.com/dumol,[#4132] Ubuntu 16.04 ARM64 support.,1,[],https://github.com/chevah/python-package/pull/80,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/80#issuecomment-305273930,"Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,80,2017-05-31T18:21:13Z,2017-06-01T10:52:45Z,2017-06-01T10:52:46Z,CLOSED,False,4,0,1,https://github.com/dumol,[#4132] Ubuntu 16.04 ARM64 support.,1,[],https://github.com/chevah/python-package/pull/80,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/80#issuecomment-305309614,"Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.","looks good.  python build is faster than rpi2
chevah/server tests are running in 14 minutes vs 17 minutes as on rpi2 ... so there is an improvement.
I was hopping that we can have them run in 10 minutes... but this is also ok.

As a side note, I think that we can remove the ubuntu 12 (x86 and x64) builders.

the compat tests are failing... maybe due to missing / failing pam module, but this need to be handled in a separate ticket:
https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3/steps/test_1/logs/stdio

thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,80,2017-05-31T18:21:13Z,2017-06-01T10:52:45Z,2017-06-01T10:52:46Z,CLOSED,False,4,0,1,https://github.com/dumol,[#4132] Ubuntu 16.04 ARM64 support.,1,[],https://github.com/chevah/python-package/pull/80,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/80#issuecomment-305337887,"Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.","I have also tried rpi3 build... and got a similar dependency failure https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/0/steps/test/logs/stdio ... but maybe this can be done in a separate ticket
I was just anxious to compare the performance",True,{}
chevah/python-package,https://github.com/chevah/python-package,80,2017-05-31T18:21:13Z,2017-06-01T10:52:45Z,2017-06-01T10:52:46Z,CLOSED,False,4,0,1,https://github.com/dumol,[#4132] Ubuntu 16.04 ARM64 support.,1,[],https://github.com/chevah/python-package/pull/80,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/80#issuecomment-305445461,"Scope
python-package builds fine on the new Pine64 board, but there's one additional dep on Ubuntu 16.04 compared to the arm64 build on Ubuntu 14.04. (Or perhaps last arm64 build was affected by the bug fixed in #66.)
Changes
Simply added the missing dep for ARM64 builds on Ubuntu 16.04.
How to try and test the changes
reviewers: @adiroiban
Please check the change.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/3.","There's a separate ticket for Raspbian 8 support, as we also need to not use Raspbian 7 binaries. When done with both, I'll bring over all the changes to brink.",True,{}
chevah/python-package,https://github.com/chevah/python-package,81,2017-06-01T15:40:20Z,2017-06-02T09:07:16Z,2017-06-02T09:07:17Z,CLOSED,False,11,5,3,https://github.com/dumol,[#4128] Raspbian 8 support.,4,[],https://github.com/chevah/python-package/pull/81,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/81,"Scope
On the new RPi 3 host we have Raspbian 8.
Although the raspbian7 package actually works in Raspbian 8, we need to support this with native packages.
Changes
Added missing dep.
No more hard-coding for version 7 in Raspbian.
No more scandir tests in Raspbian as they fail in version 8, even with UTF-8 locale present and set.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg.
https://chevah.com/buildbot/builders/python-package-raspbian-7/builds/139
https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/6","Scope
On the new RPi 3 host we have Raspbian 8.
Although the raspbian7 package actually works in Raspbian 8, we need to support this with native packages.
Changes
Added missing dep.
No more hard-coding for version 7 in Raspbian.
No more scandir tests in Raspbian as they fail in version 8, even with UTF-8 locale present and set.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg.
https://chevah.com/buildbot/builders/python-package-raspbian-7/builds/139
https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/6",True,{}
chevah/python-package,https://github.com/chevah/python-package,81,2017-06-01T15:40:20Z,2017-06-02T09:07:16Z,2017-06-02T09:07:17Z,CLOSED,False,11,5,3,https://github.com/dumol,[#4128] Raspbian 8 support.,4,[],https://github.com/chevah/python-package/pull/81,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/81#issuecomment-305533388,"Scope
On the new RPi 3 host we have Raspbian 8.
Although the raspbian7 package actually works in Raspbian 8, we need to support this with native packages.
Changes
Added missing dep.
No more hard-coding for version 7 in Raspbian.
No more scandir tests in Raspbian as they fail in version 8, even with UTF-8 locale present and set.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg.
https://chevah.com/buildbot/builders/python-package-raspbian-7/builds/139
https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/6",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,81,2017-06-01T15:40:20Z,2017-06-02T09:07:16Z,2017-06-02T09:07:17Z,CLOSED,False,11,5,3,https://github.com/dumol,[#4128] Raspbian 8 support.,4,[],https://github.com/chevah/python-package/pull/81,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/81#issuecomment-305634939,"Scope
On the new RPi 3 host we have Raspbian 8.
Although the raspbian7 package actually works in Raspbian 8, we need to support this with native packages.
Changes
Added missing dep.
No more hard-coding for version 7 in Raspbian.
No more scandir tests in Raspbian as they fail in version 8, even with UTF-8 locale present and set.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg.
https://chevah.com/buildbot/builders/python-package-raspbian-7/builds/139
https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/6","thanks. looks good.
It looks like raspbian 8 python-package creation is slower than raspbian7 ... I was expecting a 30% improvement :(
No need to spend much time with this.
Thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,81,2017-06-01T15:40:20Z,2017-06-02T09:07:16Z,2017-06-02T09:07:17Z,CLOSED,False,11,5,3,https://github.com/dumol,[#4128] Raspbian 8 support.,4,[],https://github.com/chevah/python-package/pull/81,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/81#issuecomment-305722346,"Scope
On the new RPi 3 host we have Raspbian 8.
Although the raspbian7 package actually works in Raspbian 8, we need to support this with native packages.
Changes
Added missing dep.
No more hard-coding for version 7 in Raspbian.
No more scandir tests in Raspbian as they fail in version 8, even with UTF-8 locale present and set.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg.
https://chevah.com/buildbot/builders/python-package-raspbian-7/builds/139
https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/6",Wait 'till I update Raspbian on the RPi 2 to version 8. Things will normalizeâ€¦ :-D,True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/82,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/82#issuecomment-306873881,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","just a drive by comment.
happy to see an updated cryptography.
You can look at also updating pyopenssl to 17.0.0

if we care about python cryptography and libressl we can look at sponsoring a jenkins builder/slave for a linux with libressl and then openbsd with libressl .
In this way, if there is an issue, there is change that the developers might look into this issue
there is no guarantee that upstream developers will work for free for libressl, but we can try
:)",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/82#issuecomment-307192428,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/82#issuecomment-307725572,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","Thanks! Have reverted to using the old set of PIP_LIBRARIES for rhel5/sles11. Tests currently running at https://chevah.com/buildbot/builders/python-package-group-all/builds/4.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/82#issuecomment-308075304,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0",I thought failing the compat tests will break the build. Do we have failed compat tests for this branch?,True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/82#issuecomment-308090818,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","I thought failing the compat tests will break the build. Do we have failed compat tests for this branch?

When I have introduced the compat tests in python-package, there was a chicken and egg problem.
compat tests were failing due to python-package changes.... but the compat tests should have been updated to work with latest python-package
see: https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/5/steps/test_1/logs/stdio
one tests is failing... but the step is successful",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/82#issuecomment-308427243,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","OK, have enabled failed builds for failed compat tests. But now I see Windows fails as well: https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/11
Is this serious or the chicken and egg problem?",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/82#issuecomment-308988817,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","@adiroiban, when you have some time please look at the failed compat test for windows referenced above. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,82,2017-06-07T15:13:19Z,2017-06-22T09:48:34Z,2017-06-22T09:55:09Z,CLOSED,False,24,8,4,https://github.com/dumol,[#4154] OpenBSD 6.1 support.,10,[],https://github.com/chevah/python-package/pull/82,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/82#issuecomment-310323281,"Scope
OpenBSD 6.1 is the latest stable version.
Current code doesn't build on OpenBSD 6.1.
Changes
Use wxneeded flag when linking the Python binary in OpenBSD. In 6.1 it's not enough to mark the current filesystem as wxallowed for binaries to be exempted from the W^X policy.
Updated cryptography to latest version.
This also required newer cffi and asn1crypto.
For some OS'es, latest pyOpenSSL was needed.
Still, some older OS'es didn't build cryptography, so the following actions were taken:

for OS X 10.8, the upstream wheel was uploaded (this is used in MacOS 10.12 too)
for RHEL 5 and SLES 11 we make an exception and still use the old set of PIP_LIBRARIES.

Drive-by fix:

get the number of processors in Windows too to silence a warning during the test phase.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/0","We talked this face to face during the team-building and the Windows errors seem innocuous, so this should land on master.",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/83,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/83#issuecomment-312693882,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","win-xp and ubuntu1605-arm64 still fail compat tests. Otherwise this branch would pass test_review, albeit not consistently, because of mysterious issues with hpux (hw problems?) and race conditions in compat tests on a few slaves (sles10 and obsd61). Details at https://chevah.com/buildbot/builders/python-package-gk-review/builds/6.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/83#issuecomment-312736287,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","I have updated paver.sh with the version from brink in which the bootstrap is simplified by BASE_REQUIREMENTS

Compat bug 4183 is not yet fixed... hope it will be fixed soon.

Is still not clear how the openssl version is selected by the build system.
Is the python build system smart enough so that it will auto-detect the newest openssl version?
It would help to have some words, somewhere (maybe in the chevah build script), to talk about SLES 11 SM usage.

The build looks good https://chevah.com/buildbot/builders/server-sles-11-sm/builds/0
I hope that I will fix the compat soon and will follow up on the server branch to add the SLES 11 SM version
thanks!
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/83#issuecomment-312749927,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","See chevah/server#1227
it looks like the arch and osx-108  are failing due to cryptogrphy
and Windows fails due to some permissions errors on binary.chevah.com https://chevah.com/buildbot/builders/server-win-dc-client/builds/174/steps/deps/logs/stdio
and the other builds fails due to newer cryptography, which has different default values
we need to look into this... I think that some of the failures are not due to the changes in this branch (but from previous branches) but we need to fix them
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/83#issuecomment-312865431,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","The build system worked with OpenSSL 1.0.x out of the box, the only requirement is to have OpenSSL 1.0.x libs and headers installed. There could be a problem if headers if both versions of OpenSSL are installed, I haven't tested. And it's not our problem, as we control both build slaves.",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/83#issuecomment-312868579,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","The above Windows build failed because it couldn't find a fallback package.
And there is no fallback package because the link is not updated any more in python-package.
It tried to get a fallback package because there is no Python package for the current testing version.
That one is missing because there was no successful build of current python-package.
And this happens because the compat tests fail consistently for Windows.",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/83#issuecomment-312874279,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","After manually fixing the symbolic link for the fallback version in testing, the build passes: https://chevah.com/buildbot/builders/server-win-dc-client/builds/184",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/83#issuecomment-312922425,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","I've set OS X to use cryptography 1.8.2, the last version that supports 10.8. Please retry with latest revision.
As for Arch, as far as I can tell, it seems to have the same issues with the default values that are changed in latest cryptography that affects the others slaves. Please double-check. Thanks!
Tests associated with this rev:  https://chevah.com/buildbot/builders/python-package-gk-review/builds/9
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,83,2017-07-03T11:17:40Z,2017-07-06T08:39:28Z,2017-07-06T08:39:28Z,CLOSED,False,22,20,4,https://github.com/dumol,[#4198] Support for SLES 11 with Security Module.,7,[],https://github.com/chevah/python-package/pull/83,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/83#issuecomment-313332967,"Scope
Build with the OpenSSL 1.0.x from the Security Module repo on SLES 11. Therefore, use updated cryptography.
Changes
Patched paver.sh to check for libopenssl1 RPM in SUSE 11.
Defined new chevah_os for this SLES11/OpenSSL 1.0.x combo as sles11sm.
Patched chevah_build to install libopenssl1-dev if needed in SLES 11 with SM.
Patched test_python_binary_dist.py to account for the sles11sm moniker.
Drive-by fix:

use cryptography 1.8.3 on OS X, as our 10.8 is not supported in 1.9.0.

How to try and test the changes
reviewers: @adiroiban
Build the package in SLES 11 SM and checked for updated cryptography linked to the OpenSSL 1.0.x lib from the Security Module.
Build the package in SLES 11 without SM to check for possible breakage.
Run the automated test suite.","python-2.7.13.25cf4cf packages from all build slaves have been uploaded in production in https://chevah.com/buildbot/builders/python-package-group-all/builds/7, https://chevah.com/buildbot/builders/python-package-hpux/builds/23 and https://chevah.com/buildbot/builders/python-package-raspbian-8/builds/19.",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/84,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/84#issuecomment-316999654,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/84#issuecomment-317015323,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","Struck by luck! :-]
test_review for above revision is all green: https://chevah.com/buildbot/builders/python-package-gk-review/builds/0",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/84#issuecomment-317025876,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","32 should be only for SPARC. We not yet received complains for x86... and I don't think that we have any customers on X86/AMD64.
We are keeping the AMD64 slaves as they are fast and help with testing the Solaris differences from other Unixes.

having the config with default is a feature.
we should not fix paver.sh to accept a single version without default or os name.
There should be no issue with overwriting the paver.conf ...and having a paver.conf file is a feature as it allows us to do these type of things.",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/84#issuecomment-317027593,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","Thanks for the review! Please notice that, with the last commit, I'm overwriting paver.sh in compat, not paver.conf, not sure if you noticedâ€¦ Would that be fine too?",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/84#issuecomment-317028544,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.",yes. Is ok to also update paver.sh... I did not noticed at the first review.,True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/84#issuecomment-317366447,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","I think that paver.sh should still detect the CPU as it is.. 64bit.
Also, we should keep the python binary name as SPARC64 even if we build 32bit
The name is about the targeted CPU, and we target the modern sparc 64bit cpu.
we should build 32 only on SPARC
thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,84,2017-07-21T13:23:23Z,2017-07-24T14:00:13Z,2017-07-24T14:00:13Z,CLOSED,False,67,30,3,https://github.com/dumol,[#4244] Build only 32bit binaries on Solaris.,8,[],https://github.com/chevah/python-package/pull/84,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/84#issuecomment-317396825,"Scope
RAM usage issues on Solaris 10 SPARC. Let's see if 32binaries on Solaris would alleviate this. On the other commercial UNIX'es (AIX and HP-UX) we only have 32bit binaries.
Changes
Force 32bit builds on Solaris.
Replaced if with case for normalizing arch names in paver.sh.
Completed deps list for 32bit builds on Solaris.
Worked around an issue with forcing the new Python version for compat tests.
Also use current paver.sh to overwrite the one in compat (needed in this case because of the arch switch for Solaris).
Things to discuss:

should we force 32bit builds only for sparc (and not for amd64?)
should we fix paver.sh everywhere to accept single versions without a default@ prefix or should we mandate the prefix and a suffix of :?
is there any downside to overwriting paver.sh for the compat tests?

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check that 32bit binaries are built for all Solaris versions.","paver.sh detects the CPU correctly as sparcv9. But we have that sub-routine for normalizing arch names and forcing 32bit builds on some OS'es, which is a bit of kludge, but a necessary one. I tried to simplify it in this PR.
Anyway, I'm fine with forcing 32bit builds on SPARC only in Solaris, but I'm strongly against using sparc64 for 32bit builds on SPARC because:

We use the same convention for forcing 32bit builds on AIX. CPU is detected as ppc64 and we force 32bit builds by using ppc.
There are lots of place in chevah_build where we check for 64bit options by testing if $ARCH ends with 64.

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,85,2017-08-02T11:26:21Z,2017-08-02T15:07:13Z,2017-08-02T15:07:21Z,MERGED,True,1,4,2,https://github.com/adiroiban,[#4266] Fix the build system.,1,[],https://github.com/chevah/python-package/pull/85,https://github.com/adiroiban,1,https://github.com/chevah/python-package/pull/85,"Scope
This fix the build system for the python-package repo... and not the python distribution.
Why we got this
It looks like we don't have any tests before merge to test that build system is still valid
Changes
Fix the brink package name and update the latest lint
How to try and test the changes
reviewers: @dumol
Check that  changes make sense","Scope
This fix the build system for the python-package repo... and not the python distribution.
Why we got this
It looks like we don't have any tests before merge to test that build system is still valid
Changes
Fix the brink package name and update the latest lint
How to try and test the changes
reviewers: @dumol
Check that  changes make sense",True,{}
chevah/python-package,https://github.com/chevah/python-package,85,2017-08-02T11:26:21Z,2017-08-02T15:07:13Z,2017-08-02T15:07:21Z,MERGED,True,1,4,2,https://github.com/adiroiban,[#4266] Fix the build system.,1,[],https://github.com/chevah/python-package/pull/85,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/85#issuecomment-319650383,"Scope
This fix the build system for the python-package repo... and not the python distribution.
Why we got this
It looks like we don't have any tests before merge to test that build system is still valid
Changes
Fix the brink package name and update the latest lint
How to try and test the changes
reviewers: @dumol
Check that  changes make sense","Thanks! Have already merged and tested this in #86, it worksâ€¦
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,86,2017-08-02T11:52:33Z,2017-08-04T12:16:17Z,2017-08-04T12:16:17Z,CLOSED,False,69,22,4,https://github.com/dumol,[#4070] FreeBSD 11 support.,11,[],https://github.com/chevah/python-package/pull/86,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/86,"Scope
FreeBSD 10 package doesn't work in FreeBSD 11.
Changes
Stop trying to use freebsd10 moniker and binaries for all FreeBSD versions.
Updated deps for FreeBSD 11.
Appended specific version in paver.conf.
Drive-by changes:

updated paver.sh and paver.conf from brink
fixed chevah-brink issue by merging with fixed branch
fixed cache validation issue in paver.sh.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check out new FreeBSD 11 build slave (only one compat test fails).","Scope
FreeBSD 10 package doesn't work in FreeBSD 11.
Changes
Stop trying to use freebsd10 moniker and binaries for all FreeBSD versions.
Updated deps for FreeBSD 11.
Appended specific version in paver.conf.
Drive-by changes:

updated paver.sh and paver.conf from brink
fixed chevah-brink issue by merging with fixed branch
fixed cache validation issue in paver.sh.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check out new FreeBSD 11 build slave (only one compat test fails).",True,{}
chevah/python-package,https://github.com/chevah/python-package,86,2017-08-02T11:52:33Z,2017-08-04T12:16:17Z,2017-08-04T12:16:17Z,CLOSED,False,69,22,4,https://github.com/dumol,[#4070] FreeBSD 11 support.,11,[],https://github.com/chevah/python-package/pull/86,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/86#issuecomment-319659393,"Scope
FreeBSD 10 package doesn't work in FreeBSD 11.
Changes
Stop trying to use freebsd10 moniker and binaries for all FreeBSD versions.
Updated deps for FreeBSD 11.
Appended specific version in paver.conf.
Drive-by changes:

updated paver.sh and paver.conf from brink
fixed chevah-brink issue by merging with fixed branch
fixed cache validation issue in paver.sh.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check out new FreeBSD 11 build slave (only one compat test fails).",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,86,2017-08-02T11:52:33Z,2017-08-04T12:16:17Z,2017-08-04T12:16:17Z,CLOSED,False,69,22,4,https://github.com/dumol,[#4070] FreeBSD 11 support.,11,[],https://github.com/chevah/python-package/pull/86,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/86#issuecomment-319726760,"Scope
FreeBSD 10 package doesn't work in FreeBSD 11.
Changes
Stop trying to use freebsd10 moniker and binaries for all FreeBSD versions.
Updated deps for FreeBSD 11.
Appended specific version in paver.conf.
Drive-by changes:

updated paver.sh and paver.conf from brink
fixed chevah-brink issue by merging with fixed branch
fixed cache validation issue in paver.sh.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check out new FreeBSD 11 build slave (only one compat test fails).","Bootstrapping Python for the compat tests fail everywhere: https://chevah.com/buildbot/builders/python-package-group-all/builds/3
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,86,2017-08-02T11:52:33Z,2017-08-04T12:16:17Z,2017-08-04T12:16:17Z,CLOSED,False,69,22,4,https://github.com/dumol,[#4070] FreeBSD 11 support.,11,[],https://github.com/chevah/python-package/pull/86,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/86#issuecomment-319996235,"Scope
FreeBSD 10 package doesn't work in FreeBSD 11.
Changes
Stop trying to use freebsd10 moniker and binaries for all FreeBSD versions.
Updated deps for FreeBSD 11.
Appended specific version in paver.conf.
Drive-by changes:

updated paver.sh and paver.conf from brink
fixed chevah-brink issue by merging with fixed branch
fixed cache validation issue in paver.sh.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Check out new FreeBSD 11 build slave (only one compat test fails).","Full results for all dev builders at https://chevah.com/buildbot/builders/python-package-gk-review/builds/11.
Failures:

 new fbsd-11 builder fails one of the compat tests, TestSystemUsers.test_authenticateWithUsernameAndPassword_good. More at https://chevah.com/buildbot/builders/python-package-fbsd-11/builds/11/steps/test_1/logs/stdio
 ubuntu-1604-arm64 fails compat testing (or is so slow that it gets killed by buildbot). As compat tests were not run properly up to now in python-package because of the cache invalidation issue, it could be that this is not a regression. More at https://chevah.com/buildbot/builders/python-package-ubuntu-1604-arm64/builds/17/steps/test_1/logs/stdio
 hpux fails randomly (known, filled bug), but retesting the same rev worked: https://chevah.com/buildbot/builders/python-package-hpux/builds/19

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,87,2017-08-25T16:39:48Z,2017-08-28T12:25:51Z,2017-08-28T12:25:58Z,MERGED,True,16,5,2,https://github.com/dumol,[#4299] HP-UX processor count fix.,6,[],https://github.com/chevah/python-package/pull/87,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/87,"Scope
machinfo | grep proc | grep core | awk '{print $1}' only works as intended on HP-UX machines with a single physical processor.
Changes
After some digging, I found a command that I was able to massage into giving us the logical number of CPUs. However, this seems to suit HP-UX hardware, as on Mosna I got slightly better compile times with 4 threadsÂ¹ (the number of logical CPUs) compared to 2 threadsÂ² (the number of physical CPUs), when compiling python-package without GMP.

https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/0
https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/1

Drive-by changes:

re-discovered a bug with compiling GMP on HP-UX with more than 2 threads. Filled it to be reported upstream on a hacking day or something
count active CPUs on AIX instead of maximum available
some more commenting for get_number_of_cpus(), to not have to remember all the related gory details.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run test_review which lately also includes hpux-dev: https://chevah.com/buildbot/builders/python-package-gk-review/builds/18.","Scope
machinfo | grep proc | grep core | awk '{print $1}' only works as intended on HP-UX machines with a single physical processor.
Changes
After some digging, I found a command that I was able to massage into giving us the logical number of CPUs. However, this seems to suit HP-UX hardware, as on Mosna I got slightly better compile times with 4 threadsÂ¹ (the number of logical CPUs) compared to 2 threadsÂ² (the number of physical CPUs), when compiling python-package without GMP.

https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/0
https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/1

Drive-by changes:

re-discovered a bug with compiling GMP on HP-UX with more than 2 threads. Filled it to be reported upstream on a hacking day or something
count active CPUs on AIX instead of maximum available
some more commenting for get_number_of_cpus(), to not have to remember all the related gory details.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run test_review which lately also includes hpux-dev: https://chevah.com/buildbot/builders/python-package-gk-review/builds/18.",True,{}
chevah/python-package,https://github.com/chevah/python-package,87,2017-08-25T16:39:48Z,2017-08-28T12:25:51Z,2017-08-28T12:25:58Z,MERGED,True,16,5,2,https://github.com/dumol,[#4299] HP-UX processor count fix.,6,[],https://github.com/chevah/python-package/pull/87,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/87#issuecomment-324974071,"Scope
machinfo | grep proc | grep core | awk '{print $1}' only works as intended on HP-UX machines with a single physical processor.
Changes
After some digging, I found a command that I was able to massage into giving us the logical number of CPUs. However, this seems to suit HP-UX hardware, as on Mosna I got slightly better compile times with 4 threadsÂ¹ (the number of logical CPUs) compared to 2 threadsÂ² (the number of physical CPUs), when compiling python-package without GMP.

https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/0
https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/1

Drive-by changes:

re-discovered a bug with compiling GMP on HP-UX with more than 2 threads. Filled it to be reported upstream on a hacking day or something
count active CPUs on AIX instead of maximum available
some more commenting for get_number_of_cpus(), to not have to remember all the related gory details.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run test_review which lately also includes hpux-dev: https://chevah.com/buildbot/builders/python-package-gk-review/builds/18.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/88,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/88#issuecomment-326984065,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/88#issuecomment-327005806,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Thanks!
I have updated buildmaster to have an alpine linux slave. Feel free to update buildmaster config.
I only wanted to see the python-package build
The slave is started with ./paver debug & ... I did not look at the init script
It looks like it is failing https://chevah.com/buildbot/builders/python-package-alpine/builds/0
The dependencies detection need to be updated.
There are also ""Error relocating""
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/88#issuecomment-327227665,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Sorry for forgetting about the deps, I was in a bit of a rush yesterday and remembered too late about themâ€¦
Fixing this proved to be quite challenging, as Alpine's ldd, that comes with musl (the C library used instead of glibc), seems to be having issues with some of the Python modules. I switched to objdump -p as described in the man page for of the orthodox Linux ldd. This has allowed me to also drop the virtual Linux deps:  linux-gate.so and linux-vdso.so.
The downside is objdump only checks what's listed in the headers of the binaries (as does readelf). If you prefer we stick with ldd in Linux to check deps recursively, I found an alternative for Alpine Linux that works with the problematic Python modules too: lddtree. eg:
$ lddtree ./build/python2.7-alpine36-x64/lib/python2.7/site-packages/setproctitle.so
setproctitle.so => ./build/python2.7-alpine36-x64/lib/python2.7/site-packages/setproctitle.so (interpreter => none)
    libc.musl-x86_64.so.1 => /lib/libc.musl-x86_64.so.1

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/88#issuecomment-327286090,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","we can use ldd on linux and lddtree / objdump on Alpine.
we might need to run compat tests with ""-v"" to see exactly which tests if crashing the whole test suite :)
I am now updating brink and compat to allow running the whole suite with -v
I hope that by the time you will resume working on this, compat/master will be updated and ready to be used here.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/88#issuecomment-327289479,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","but I tried to run just the brink tests and I got a segfault when trying to send the coverage
https://chevah.com/buildbot/builders/brink-alpine/builds/5/steps/test/logs/stdio
but we can live with this for now. I have skipped coverage reporting for alpine as this is an issue with the codecov.io code.... but might reveal an issue with using the OpenSSL related code.
so for python-package we might look to see whether we can enable the pyopenssl tests as part of the test steps
Brink is green Alpine chevah/brink#112

On Compat it fails with segfault due to PAM.
It also has another issue, in that  os.getgroups() returns duplicate groups... but we can work around this...
and I guess that for Alpine we can completely disable PAM and system users as I guess most of the people who want to run SFTPPlus on Alpine will not want to run it as root.
Compat is also green with coverage and pam skipped. chevah/compat#76

I see that Alpine uses LibreSSL.
On server it fails with a segfaul on a SSL related tests https://chevah.com/buildbot/builders/server-alpine/builds/1
Can we have OpenSSL on Alpine ?
Here is the branch on server dedicated to adding support for Alpine https://github.com/chevah/server/tree/4332-alpine-linux",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/88#issuecomment-327798334,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","I don't know about PAM, I'm surprised to see it's available on Alpine. Perhaps we should keep our options open and find a way to run with PAM on Alpine too, as hipsters run everything as root, I suppose. :-]
Maybe tests fail because the PAM binaries compiled with glibc on Debian fail on Alpine with musl? If you agree, please fill me a ticket and I'll try to fix this at some pointâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/88#issuecomment-327799580,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","For the PAM on Alpine, I am ok to ignore it for now... and do something only once we get a customer who need it.
chevah/server has config to skip PAM at all so it should work and we have a workaround.

the SSL issue is important, and if possible I would like to see it fixed in this PR :)
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/88#issuecomment-327901717,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Found a way to always use OpenSSL, let me know if it's good enough. Also, should we try updating pyOpenSSL and/or setproctitle for the other OS'es using stuff from python-modules?
I don't mind if you work on this while I'm gone, if needed. :-]
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/88#issuecomment-327932362,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","I find it hard to read this diff. In aa73445 I am not sure if this is vanila upstream code, or we also did some changes.
We got the python-module for legacy reason.
On modern Linux system we should use pip.
If we need to patch the upstream code, then we patch it and publish it as a new source package in pypi.chevah.com
pip install can be used to install/build from source. If we need special flags we can pass them to pip

I don't have time to work on Alpine Linux now, but I think that this should be done via pip and a source package.

I give it a try on chevah/server and it still segfaults at the same test https://chevah.com/buildbot/builders/server-alpine/builds/5/steps/test/logs/stdio
I don't know why as both python and cryptography are using the same openssl version.

The error might be due to an old version of Python Cryptography 1.9.
I see that on Alpine linux it is 2.0.3 https://pkgs.alpinelinux.org/package/edge/main/x86/py-cryptography

chevah/compat is updated on master to support alpine, so we should be able to build the alpine distribution on buildslave

Thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/88#issuecomment-333851830,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","OK then, if the failures are present with OpenSSL too, I would rather stick with the system libs, regardless of the problem with pip. In the BSDs we also use the SSL libs in base, not OpenSSL from ports/packages.
Unfortunately, I don't think the package version for py-cryptography in Alpine Linux edge is relevant (although I think it can't be that old). We are using the stable 3.6 release of Alpine and the included version is up to date:
bs1a-lnx-alpine-x64-100:~# apk info py2-crypto
py2-crypto-2.6.1-r2 description:
A Python collection of cryptographic algorithms and protocols (for python2)

py2-crypto-2.6.1-r2 webpage:
https://www.dlitz.net/software/pycrypto/

py2-crypto-2.6.1-r2 installed size:
3760128

So I have reverted the last two commitsâ€¦ With the a3cb2b95 rev I see all of the python-package, brink and compat builds are green:
https://chevah.com/buildbot/builders/python-package-alpine/builds/8
https://chevah.com/buildbot/builders/brink-alpine/builds/14
https://chevah.com/buildbot/builders/compat-alpine/builds/25
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,12,https://github.com/chevah/python-package/pull/88#issuecomment-334147705,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Compat was green for a long time https://chevah.com/buildbot/builders/compat-alpine
Server is failing as soon as it needs to touch SSL/TLS :)
https://chevah.com/buildbot/builders/server-alpine/builds/14/steps/test/logs/stdio
I have not run the tests with OpenSSL.
Please look at having Alpine Linux with OpenSSL.
It would help to include a few SSL/TLS related tests in the python-package tests, maybe run the pyOpenSSL test suite.
Thanks!
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,13,https://github.com/chevah/python-package/pull/88#issuecomment-334453963,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Sorry, there seems to be a misunderstandingâ€¦ Currently there are two packages built for Alpine at https://binary.chevah.com/production/python/alpine36/x64/, one with LibreSSL (git rev a3cb2b95) and the other with OpenSSL(git rev aa73445b).
I think you've run tests with both and there doesn't seem to be any difference. A test you've run with OpenSSL libs: https://chevah.com/buildbot/builders/server-alpine/builds/5/steps/test/logs/stdio
So, if there is nothing to be gained from compiling with third-party OpenSSL, I am for keeping to use the default LibreSSL (which is OpenSSL-based too, but forked a while ago and with some cleanups). If we are successful with LibreSSL, we could also bundle it with Solaris 10 packages, and get rid of the Python 2.7.8 dependency, as LibreSSL had markedly less security issues compared to OpenSSL since forking (removing code helped). What do you say?
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,14,https://github.com/chevah/python-package/pull/88#issuecomment-334459137,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","I am ok with any library :) but is important for them to be usable , right now the python-package fails for any SSL operation so I think that on whatever route we got, this still needs changes
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,15,https://github.com/chevah/python-package/pull/88#issuecomment-334465507,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Problem is, I don't know what to do. Server builds fail similarly with both LibreSSL and OpenSSL, old cryptography version 1.9 seems a red herring (the same version appears in FreeBSD and Ubuntu builds). What next? :-]
Maybe we are missing a crucial test in python-package? How can we load and use the SSL libs here and they cannot be used at all in server?",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,16,https://github.com/chevah/python-package/pull/88#issuecomment-334469086,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","I don't know what is wrong... standard Python SSL seems to work, as I can download files over HTTPS with pip
I think this will just have to wait until we get a request from someone wanting to use SFTPPlus on Alpine",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,17,https://github.com/chevah/python-package/pull/88#issuecomment-334716060,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Found the culprit for the signal 11 crashes, our binary was violating MPROTECT rules and the grsec-hardened default kernel of Alpine was killing it.  Would not have expected it, as the generic Linux binaries worked for me on Hardened Gentoo for yearsâ€¦
Anyway, after a bit of documentation it seems it's enough to enable EMUTRAMP to avoid this for a Python binary. However, it's not enough to mark the file with paxmark, as customary on a local system, as tar loses the new file attribute. So I went for an older tool, paxctl, that uses the program headers to mark the binary as needed for trampolines emulation under a grsec-hardened kernel. This survives packing and unpacking our package.
Have also updated corresponding server branch with the latest git rev of the Alpine python-package, please pull my change. A build with it: https://chevah.com/buildbot/builders/server-alpine/builds/25
Happy to finally have a working package for a hardened distro that works with the default hardened kernel and libs! :-]
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,18,https://github.com/chevah/python-package/pull/88#issuecomment-334724396,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","great success :)
but, if we are adding exceptions, is our code still hardened?
Can we fix the code so that it does not need this massage?
Does the alpine own python has the same tools applied to it?
Thanks!
changes-approved
As a followup maybe we can have public.sftpplus.com running in a docker container based on alpine? :)
What do you think?",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,19,https://github.com/chevah/python-package/pull/88#issuecomment-334758281,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","Yes, the code is still hardened, but the python binary is marked so that the grsec kernel knows it has to emulate trampolines for it. More at https://wiki.gentoo.org/wiki/Hardened/PaX_Quickstart#Enforce_non-executable_pages (the EMUTRAMP paragraph).
Maybe Python's interpreter can be fixed in this regard, maybe not, it's far above my head. But I observed nobody tried, so I guess it's not trivial at all, if possible.
And yes, all python binaries are marked as such in a system running a grsec kernel. Which makes me think I have disabled a corresponding protection in my Hardened Gentoo kernel (maybe because I was running VirtualBox), otherwise the generic linux python-package would not have run on my desktop.
I'm not a fan of dockerizing for security reasons. More so, in this case the kernel would be the one from Ubuntu. But I am thinking on using hardened OS'es exclusively for servers running public services (eg. Yeovil, Weesp and Deag at the moment).",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/dumol,20,https://github.com/chevah/python-package/pull/88#issuecomment-335410685,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","@adiroiban somehow this is still in Review required mode. Please approve, thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,88,2017-09-04T15:06:55Z,2017-10-10T15:08:27Z,2017-10-12T08:29:48Z,MERGED,True,29,2,5,https://github.com/dumol,[#4322] Alpine Linux support,8,[],https://github.com/chevah/python-package/pull/88,https://github.com/adiroiban,21,https://github.com/chevah/python-package/pull/88#issuecomment-335421090,"Scope
paver.sh tries to use a generic Linux package in Alpine, but that fails.
Changes
Identify Alpine Linux.
Check for version 3.6 or newer.
Use lddtree -l, as musl's ldd has issues with some Python modules.
Updated deps to accommodate this peculiar little distro.
Mark resulting python binary with paxctl for EMUTRAMP, otherwise grsec kernels will kill it, as default behaviour violates MPROTECT.
Updated paver.conf accordingly.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the tests.
Run a server test with latest package, eg. https://chevah.com/buildbot/builders/server-alpine/builds/25","yes... I will look at updating the GitHub hooks so that when a comment is left, it will also sync it with the GitHub review actions
I prefer the comment way of doing things :) rather than click, click to the review comment box",True,{}
chevah/python-package,https://github.com/chevah/python-package,89,2017-10-12T08:33:17Z,2017-10-17T16:57:02Z,2017-10-17T16:57:11Z,MERGED,True,71,51,4,https://github.com/dumol,[#4318] Detect Ubuntu without LBS tools.,13,['needs-merge'],https://github.com/chevah/python-package/pull/89,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/89,"Scope
Ubuntu detection in paver.sh fails if lsb-release package missing. Detected on Pine64 after removing python3* packages.
Changes
Refactored Ubuntu detection to use /etc/os-release, present in Ubuntu 14.04 and newer, the only releases currently supported.
When older supported Linux distros (without /etc/os-release) are phased out (RHEL 6 and SLES 10&11), we could move to using /etc/os-release exclusively for distro detection in Linux (except for Arch, which is a rolling release distro and thus has no version info in that file)..
Drive-by changes:

use /etc/os-release for Raspbian and Alpine Linux too
never build the _locale Python module to avoid depending on libintl, the GNU gettext libs
updated AIX deps with full paths after installing latest OpenSSL libs from IBM
check that $os_version_raw only contains digits and periods.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/30
Remove lsb* packages and check ./paver.sh detect_os on an Ubuntu system.
Force an unexpected character in $os_version_raw to test new check.","Scope
Ubuntu detection in paver.sh fails if lsb-release package missing. Detected on Pine64 after removing python3* packages.
Changes
Refactored Ubuntu detection to use /etc/os-release, present in Ubuntu 14.04 and newer, the only releases currently supported.
When older supported Linux distros (without /etc/os-release) are phased out (RHEL 6 and SLES 10&11), we could move to using /etc/os-release exclusively for distro detection in Linux (except for Arch, which is a rolling release distro and thus has no version info in that file)..
Drive-by changes:

use /etc/os-release for Raspbian and Alpine Linux too
never build the _locale Python module to avoid depending on libintl, the GNU gettext libs
updated AIX deps with full paths after installing latest OpenSSL libs from IBM
check that $os_version_raw only contains digits and periods.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/30
Remove lsb* packages and check ./paver.sh detect_os on an Ubuntu system.
Force an unexpected character in $os_version_raw to test new check.",True,{}
chevah/python-package,https://github.com/chevah/python-package,89,2017-10-12T08:33:17Z,2017-10-17T16:57:02Z,2017-10-17T16:57:11Z,MERGED,True,71,51,4,https://github.com/dumol,[#4318] Detect Ubuntu without LBS tools.,13,['needs-merge'],https://github.com/chevah/python-package/pull/89,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/89#issuecomment-336481671,"Scope
Ubuntu detection in paver.sh fails if lsb-release package missing. Detected on Pine64 after removing python3* packages.
Changes
Refactored Ubuntu detection to use /etc/os-release, present in Ubuntu 14.04 and newer, the only releases currently supported.
When older supported Linux distros (without /etc/os-release) are phased out (RHEL 6 and SLES 10&11), we could move to using /etc/os-release exclusively for distro detection in Linux (except for Arch, which is a rolling release distro and thus has no version info in that file)..
Drive-by changes:

use /etc/os-release for Raspbian and Alpine Linux too
never build the _locale Python module to avoid depending on libintl, the GNU gettext libs
updated AIX deps with full paths after installing latest OpenSSL libs from IBM
check that $os_version_raw only contains digits and periods.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/30
Remove lsb* packages and check ./paver.sh detect_os on an Ubuntu system.
Force an unexpected character in $os_version_raw to test new check.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,89,2017-10-12T08:33:17Z,2017-10-17T16:57:02Z,2017-10-17T16:57:11Z,MERGED,True,71,51,4,https://github.com/dumol,[#4318] Detect Ubuntu without LBS tools.,13,['needs-merge'],https://github.com/chevah/python-package/pull/89,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/89#issuecomment-336845713,"Scope
Ubuntu detection in paver.sh fails if lsb-release package missing. Detected on Pine64 after removing python3* packages.
Changes
Refactored Ubuntu detection to use /etc/os-release, present in Ubuntu 14.04 and newer, the only releases currently supported.
When older supported Linux distros (without /etc/os-release) are phased out (RHEL 6 and SLES 10&11), we could move to using /etc/os-release exclusively for distro detection in Linux (except for Arch, which is a rolling release distro and thus has no version info in that file)..
Drive-by changes:

use /etc/os-release for Raspbian and Alpine Linux too
never build the _locale Python module to avoid depending on libintl, the GNU gettext libs
updated AIX deps with full paths after installing latest OpenSSL libs from IBM
check that $os_version_raw only contains digits and periods.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/30
Remove lsb* packages and check ./paver.sh detect_os on an Ubuntu system.
Force an unexpected character in $os_version_raw to test new check.","chevah-robot did not had access to this repo, so it failed to sync with trac.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,89,2017-10-12T08:33:17Z,2017-10-17T16:57:02Z,2017-10-17T16:57:11Z,MERGED,True,71,51,4,https://github.com/dumol,[#4318] Detect Ubuntu without LBS tools.,13,['needs-merge'],https://github.com/chevah/python-package/pull/89,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/89#issuecomment-337286328,"Scope
Ubuntu detection in paver.sh fails if lsb-release package missing. Detected on Pine64 after removing python3* packages.
Changes
Refactored Ubuntu detection to use /etc/os-release, present in Ubuntu 14.04 and newer, the only releases currently supported.
When older supported Linux distros (without /etc/os-release) are phased out (RHEL 6 and SLES 10&11), we could move to using /etc/os-release exclusively for distro detection in Linux (except for Arch, which is a rolling release distro and thus has no version info in that file)..
Drive-by changes:

use /etc/os-release for Raspbian and Alpine Linux too
never build the _locale Python module to avoid depending on libintl, the GNU gettext libs
updated AIX deps with full paths after installing latest OpenSSL libs from IBM
check that $os_version_raw only contains digits and periods.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-gk-review/builds/30
Remove lsb* packages and check ./paver.sh detect_os on an Ubuntu system.
Force an unexpected character in $os_version_raw to test new check.",With latest changes: https://chevah.com/buildbot/builders/python-package-gk-review/builds/32,True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/90,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/90#issuecomment-337914852,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/90#issuecomment-338372840,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Please review the commits with no imports.

which are those?
If we are using patches, why do we still need to treat the upstream as source?
Maybw we should use git attributes and set all the upstream files as binary / -diff
https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/90#issuecomment-338394037,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Please review the commits with no imports.

which are those?

Basically, those which don't mention updating/upgrading sources. There are 4 of them in total. For you convenience:


these two have some changes of substance:
846e753
661f3ac


these two are trivial:
4d94a74
9aa864d



If we are using patches, why do we still need to treat the upstream as source?
Maybw we should use git attributes and set all the upstream files as binary / -diff
https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html

From what I could gather quickly (the above link has 21 pages in my maximized browser window), git attributes are a kind of per-path sticky .gitinfo's. How does that help us? Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/90#issuecomment-338599197,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","I have pushed a new commit with changed attributes to see how github can handle the diff :)
Now I can get a nice diff on the command line.
$ git diff --stat master... | grep -v Bin
 chevah_build                                       |   9 +--
 .../chevah-python-test/test_python_binary_dist.py  |   2 +-
 src/python/chevahbs                                |  16 ++---
 src/python/crypto_threadid.patch                   |   6 +-
 src/python/hpux_fpic.patch                         |   2 +-
 src/python/hpux_nativemake.patch                   |  12 ----
 src/python/hpux_site.patch                         |   2 +-
 src/python/openbsd_random.patch                    |  12 ----
 src/python/readline_libedit.patch                  |  80 +++++++++++----------
 src/python/solaris10_paths.patch                   |   6 +-
 9274 files changed, 62 insertions(+), 85 deletions(-)",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/90#issuecomment-339287144,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Cool trick, thanks! The diff stats look clean indeed, but the diff itself still shows the names of the source files (now shown as binary), which makes it too huge to be of practical use with the many changes in this branch.
I'll upload latest test binaries and test on dedicated server branch. But why it's not enough to pass compat tests any more? It's not like there's anything I can do here, the changes are from upstream and mostly for getting up to date with latest security issues.",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/90#issuecomment-339411594,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Is ok. Please merge and push to production.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/90#issuecomment-339614748,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","Git attributes got lost, it seemsâ€¦ For later reference, I've used this to review my changes in this branch:
git diff master chevah_build src/python/chevahbs src/python/*.patch \
    python-modules/chevah-python-test/test_python_binary_dist.py",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/90#issuecomment-339690313,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10",group-all build with upload to production: https://chevah.com/buildbot/builders/python-package-group-all/builds/11 (only FreeBSD 11 failed because of a single compat test).,True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/90#issuecomment-339741906,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","yes. it looks like freebsd 11 was always failing... and was never a supported os.
In the near future I will not have time to look at freebsd 11 failes.
Should we still keep a freebsd 11 slave?",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/90#issuecomment-339923826,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","We support FreeBSD 10.x, so I guess FreeBSD 11.x would be next in line if we continue doing that. Shouldn't take much effort, only one test is currently failing. And then I'll finally have a green python-package waterfall again! :-]
Also, if that is of any significance, I plan to use FreeBSD 11.x on my desktop at home (currently still fooling around with DragonFly BSD 5.0 with a HAMMER2 filesystem on that computer).",True,{}
chevah/python-package,https://github.com/chevah/python-package,90,2017-10-19T13:14:22Z,2017-10-26T09:58:35Z,2017-10-27T09:46:35Z,MERGED,True,50864,21360,4675,https://github.com/dumol,"[#4380] Python 2.7.14, SQLite 3.20.1 and pysqlite 2.8.3",12,['needs-merge'],https://github.com/chevah/python-package/pull/90,https://github.com/adiroiban,12,https://github.com/chevah/python-package/pull/90#issuecomment-339926070,"Scope
Get latest security updates and bugfixes for upstream sources.
Changes
Updated Python to 2.7.14 to get latest security updates and bugfixes.
Discarded patches not required any more.
Forwarded-ported the rest of the patches.
Updated SQLite to 3.20.1 for same reason.
Updated pysqlite to 2.8.3 to have the best interface to latest SQLite.
Drive-by fixes:

make sure sed invocation errors will bail out the build
system sqlite headers not required on Solaris 10 any more.

How to try and test the changes
reviewers: @adiroiban
Please review the commits with no imports.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/10","If you are going to use FreeBSD 11 on your desktop, then I will look at fixing it.
Is a single test, but is an important one... but yes, it should not be that hard to fix :)",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/91,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/91#issuecomment-339713641,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","Please let me know if you are fine with a length of 4 or you have other ideasâ€¦ Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/91#issuecomment-339733281,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","Thanks for working on this.
I don't know how and if the current change would help :)
I would say that in order to get consistent results we should have minimum 8 characters :) extra safety
I don't know how we ended up with git running for the same revision and getting different values... and I don't know why min 4 will do the job.
I guess what when we do shallow clones (depth=1) for git is hard to know if there are conflicts.
We are forcing 4 characters now, but in the future , python package repo might grow and have conflicts in 4 characters and then git-rev will use 5 even if we ask for 4.
I am not convinced that this will fix it, and I would say that we should go for a value higher than 4 ... maybe 8?
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/91#issuecomment-339929965,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","The current change does help. The problem is solved with any length, as the variability was killing us (sometimes the git rev was 7 chars longs, other times it was 8 chars long).
In regards to the other points you've raised, they are valid, although not really affecting us, I think. Collision wouldn't be much of a problem as the older binary packages will be overwritten (save the special case of older git clones trying to download a newer package). And if the minimum length is raised upstream, we could raise it here too, in a similar commit.
But all in all, I don't mind a length of 8, will follow up with a patch implementing just thatâ€¦ Thanks for the review!",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/91#issuecomment-339944444,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","Implemented suggested changes and updated PR description accordingly.
Added a new test for the length of the git rev set in the binary as I witness --short=4 resulted in a length of 5. :-]
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,91,2017-10-26T15:50:57Z,2017-10-30T11:48:07Z,2017-10-30T12:45:50Z,MERGED,True,7,3,2,https://github.com/dumol,[#4425] Use a fixed length for the git rev in the version.,4,['needs-merge'],https://github.com/chevah/python-package/pull/91,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/91#issuecomment-339962944,"Scope
With latest production Python packages, some of the packages use a git rev of 7 characters and others use 8 characters. This leads to broken tests, as the used length is not consistent among similar build slaves (being dependent of core.abbrev conf variable according to git-rev-parse(1)).
Changes
Force the length of 8 for consistency.
Test the length of the git rev set in the binary.
Drive-by change:

really minor comment clarification in regards to sqlite libs to link to in Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-gk-review/builds/39","Maybe we should use 7, as GitHub does? Those short 7 chars git rev are visible all over the place around hereâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,92,2017-10-30T13:31:22Z,2017-10-30T14:57:06Z,2017-10-30T14:57:37Z,MERGED,True,4,3,1,https://github.com/dumol,[#4437] Minor /etc/os-release fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/92,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/92,"Scope
VERSION_ID is sometimes missing from /etc/os-release.  For example on my old Gentoo installation that I keep around at home. Result:
$ ./paver.sh
./paver.sh: line 603: VERSION_ID: unbound variable

Also, Ubuntu non-LTS versions are now rejected, while we used to equate them with generic Linux before introducing support for /etc/os-release.
Changes
Only use VERSION_ID from /etc/os-release on supported distros, for now: Ubuntu, Raspbian and Alpine. This variable is not set on some rolling-release distros according to https://www.freedesktop.org/software/systemd/man/os-release.html.
Use generic Linux binaries on non-LTS Ubuntu versions.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run paver.sh on a rolling-release distro such as Gentoo.
Run paver.sh on a non-LTS Ubuntu version.
Run the automated tests.","Scope
VERSION_ID is sometimes missing from /etc/os-release.  For example on my old Gentoo installation that I keep around at home. Result:
$ ./paver.sh
./paver.sh: line 603: VERSION_ID: unbound variable

Also, Ubuntu non-LTS versions are now rejected, while we used to equate them with generic Linux before introducing support for /etc/os-release.
Changes
Only use VERSION_ID from /etc/os-release on supported distros, for now: Ubuntu, Raspbian and Alpine. This variable is not set on some rolling-release distros according to https://www.freedesktop.org/software/systemd/man/os-release.html.
Use generic Linux binaries on non-LTS Ubuntu versions.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run paver.sh on a rolling-release distro such as Gentoo.
Run paver.sh on a non-LTS Ubuntu version.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,92,2017-10-30T13:31:22Z,2017-10-30T14:57:06Z,2017-10-30T14:57:37Z,MERGED,True,4,3,1,https://github.com/dumol,[#4437] Minor /etc/os-release fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/92,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/92#issuecomment-340444202,"Scope
VERSION_ID is sometimes missing from /etc/os-release.  For example on my old Gentoo installation that I keep around at home. Result:
$ ./paver.sh
./paver.sh: line 603: VERSION_ID: unbound variable

Also, Ubuntu non-LTS versions are now rejected, while we used to equate them with generic Linux before introducing support for /etc/os-release.
Changes
Only use VERSION_ID from /etc/os-release on supported distros, for now: Ubuntu, Raspbian and Alpine. This variable is not set on some rolling-release distros according to https://www.freedesktop.org/software/systemd/man/os-release.html.
Use generic Linux binaries on non-LTS Ubuntu versions.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run paver.sh on a rolling-release distro such as Gentoo.
Run paver.sh on a non-LTS Ubuntu version.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/93,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/93#issuecomment-340827429,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","thanks for working at this... due to this bug I have r as alias for reset :)
But if i run our python twice in a row, it heal itself :)",True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/93#issuecomment-342787978,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","Hhmm, interestingâ€¦ Thanks for the feedback! So:
$ stty
speed 9600 baud; line = 0;
eol = M-^?; eol2 = M-^?;
-brkint ixany
-echok
$ ./build/python2.7-ubuntu1604-x64/bin/python 
Python 2.7.14 (9d506c63, Nov  8 2017, 13:08:38) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> ^D>>> 
$ speed 9600 baud; line = 0;
eof = <undef>; rprnt = <undef>; werase = <undef>; lnext = <undef>; min = 1; time = 0;
-brkint inlcr ixany
-icanon -iexten -echo -echok
$ Python 2.7.14 (9d506c63, Nov  8 2017, 13:08:38) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> exit()
>>> $ stty
speed 9600 baud; line = 0;
-brkint ixany
-echok

@adiroiban, you might want to use stty sane instead of reset, as it doesn't clean up the screen:
$ stty sane
$ stty
speed 9600 baud; line = 0;",True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/93#issuecomment-342791822,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.",Upstream bugfix: https://gnats.netbsd.org/48957,True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/93#issuecomment-342799781,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","For reference, a better fix is available here: https://trac.macports.org/ticket/48807#comment:141",True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/93#issuecomment-342807190,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.",thanks for the info and stty sane,True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/93#issuecomment-343118708,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","With updated sources, I have retested all supported platforms for readline support through libedit and tried to solve the remaining issues. Only AIX, HP-UX and  Solaris 10 are still without readline support (and generic Linux, for portability reasons).
I think it's possible to get at least Solaris 10 on-board with an older version of libedit. If you think that we need that, I could dedicate some more time to it. Perhaps by using a second version of libedit, as we do with some Python modules.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,93,2017-10-31T16:40:30Z,2017-11-09T12:00:18Z,2017-11-09T12:00:29Z,MERGED,True,146,61,96,https://github.com/dumol,[#4401] libedit fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/93,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/93#issuecomment-343120932,"Scope
Botched output after using readline module in Ubuntu.
With our Python package, import readline, which seems to works well, and then exit the interpreter. The console output is botched afterwards, you have to reset the console to get normal output back.
Changes
Updated libedit sources from upstream.
Added patch to fix this issue from https://trac.macports.org/ticket/48807#comment:141.
Drive-by changes:

updated paver.conf to use latest Python packages
added readline support for Arch Linux, MacOS, FreeBSD and Solaris 11
document where readline support is not possible with current libedit version.

How to try and test the changes
reviewers: @adiroiban
Please review the changes outside src/libedit/libedit-* (everything except the second commit).
Test the new binary in your OS for botched terminal settings after exiting the repl.
Run the automated tests.","Command-line for diff to review:
git diff master chevah_build paver.conf python-modules/chevah-python-test/test_python_binary_dist.py src/libedit/chevahbs  src/libedit/terminal_restore.patch  src/python/chevahbs 

Review build: https://chevah.com/buildbot/builders/python-package-gk-review/builds/0",True,{}
chevah/python-package,https://github.com/chevah/python-package,94,2017-11-14T18:17:41Z,2017-11-15T12:51:50Z,2018-03-23T11:30:29Z,MERGED,True,15,16,2,https://github.com/dumol,[#4483] Functional pysqlite2 module on Solaris 10 SPARC.,3,['needs-merge'],https://github.com/chevah/python-package/pull/94,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/94,"Scope
It looks like sqlite is no longer working on solaris 10 sparc.
Changes
Use a test that actually breaks when pysqlite2 module is broken.
Link to sqlite libs in /usr/lib/mps only on Solaris 10 versions up to u7.
Output the version of both SQLite system lib and the corresponding Python module.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/4","Scope
It looks like sqlite is no longer working on solaris 10 sparc.
Changes
Use a test that actually breaks when pysqlite2 module is broken.
Link to sqlite libs in /usr/lib/mps only on Solaris 10 versions up to u7.
Output the version of both SQLite system lib and the corresponding Python module.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/4",True,{}
chevah/python-package,https://github.com/chevah/python-package,94,2017-11-14T18:17:41Z,2017-11-15T12:51:50Z,2018-03-23T11:30:29Z,MERGED,True,15,16,2,https://github.com/dumol,[#4483] Functional pysqlite2 module on Solaris 10 SPARC.,3,['needs-merge'],https://github.com/chevah/python-package/pull/94,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/94#issuecomment-344369759,"Scope
It looks like sqlite is no longer working on solaris 10 sparc.
Changes
Use a test that actually breaks when pysqlite2 module is broken.
Link to sqlite libs in /usr/lib/mps only on Solaris 10 versions up to u7.
Output the version of both SQLite system lib and the corresponding Python module.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/4","Diff may look simple and logical, but the path to it was none of these things. :-]
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,94,2017-11-14T18:17:41Z,2017-11-15T12:51:50Z,2018-03-23T11:30:29Z,MERGED,True,15,16,2,https://github.com/dumol,[#4483] Functional pysqlite2 module on Solaris 10 SPARC.,3,['needs-merge'],https://github.com/chevah/python-package/pull/94,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/94#issuecomment-344584561,"Scope
It looks like sqlite is no longer working on solaris 10 sparc.
Changes
Use a test that actually breaks when pysqlite2 module is broken.
Link to sqlite libs in /usr/lib/mps only on Solaris 10 versions up to u7.
Output the version of both SQLite system lib and the corresponding Python module.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/4","Thanks for the review!
Uploading packages to production in:
https://chevah.com/buildbot/builders/python-package-solaris-10/builds/22
https://chevah.com/buildbot/builders/python-package-solaris-10-sparc/builds/13
https://chevah.com/buildbot/builders/python-package-solaris-10u3-x86/builds/15
The git rev for solaris10 would be 62700b56.",True,{}
chevah/python-package,https://github.com/chevah/python-package,95,2017-12-06T11:12:17Z,2017-12-06T14:07:35Z,2018-03-23T11:30:24Z,MERGED,True,6,6,2,https://github.com/dumol,[#4438] Use /etc/os-release for Arch Linux too.,2,['needs-merge'],https://github.com/chevah/python-package/pull/95,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/95,"Scope
Now that we don't use VERSION_ID for all distros where we count on /etc/os-release, Arch as rolling-release distro should fit among them as well.
Changes
Stop using /etc/arch-release in favour of /etc/os-release.
Drive-by change:

updated paver.conf

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Check that Arch is detected properly by paver.sh.
Run the automated tests.","Scope
Now that we don't use VERSION_ID for all distros where we count on /etc/os-release, Arch as rolling-release distro should fit among them as well.
Changes
Stop using /etc/arch-release in favour of /etc/os-release.
Drive-by change:

updated paver.conf

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Check that Arch is detected properly by paver.sh.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,95,2017-12-06T11:12:17Z,2017-12-06T14:07:35Z,2018-03-23T11:30:24Z,MERGED,True,6,6,2,https://github.com/dumol,[#4438] Use /etc/os-release for Arch Linux too.,2,['needs-merge'],https://github.com/chevah/python-package/pull/95,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/95#issuecomment-349608544,"Scope
Now that we don't use VERSION_ID for all distros where we count on /etc/os-release, Arch as rolling-release distro should fit among them as well.
Changes
Stop using /etc/arch-release in favour of /etc/os-release.
Drive-by change:

updated paver.conf

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Check that Arch is detected properly by paver.sh.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,96,2018-01-03T15:13:55Z,2018-01-04T11:11:33Z,2018-01-04T11:11:37Z,MERGED,True,163,82,1,https://github.com/dumol,[#2696] Full deps check for all supported Linux distributions.,3,['needs-merge'],https://github.com/chevah/python-package/pull/96,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/96,"Scope
Local Python tests check for full deps in all OS'es except Linux. Enable this for supported distributions.
Changes
Rebuilt list of deps for supported Linux distro to include full paths.
Change the way we parse ldd's output to make this possible in Linux distros other than Alpine (which already had it enabled).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.","Scope
Local Python tests check for full deps in all OS'es except Linux. Enable this for supported distributions.
Changes
Rebuilt list of deps for supported Linux distro to include full paths.
Change the way we parse ldd's output to make this possible in Linux distros other than Alpine (which already had it enabled).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,96,2018-01-03T15:13:55Z,2018-01-04T11:11:33Z,2018-01-04T11:11:37Z,MERGED,True,163,82,1,https://github.com/dumol,[#2696] Full deps check for all supported Linux distributions.,3,['needs-merge'],https://github.com/chevah/python-package/pull/96,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/96#issuecomment-355037046,"Scope
Local Python tests check for full deps in all OS'es except Linux. Enable this for supported distributions.
Changes
Rebuilt list of deps for supported Linux distro to include full paths.
Change the way we parse ldd's output to make this possible in Linux distros other than Alpine (which already had it enabled).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,96,2018-01-03T15:13:55Z,2018-01-04T11:11:33Z,2018-01-04T11:11:37Z,MERGED,True,163,82,1,https://github.com/dumol,[#2696] Full deps check for all supported Linux distributions.,3,['needs-merge'],https://github.com/chevah/python-package/pull/96,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/96#issuecomment-355249885,"Scope
Local Python tests check for full deps in all OS'es except Linux. Enable this for supported distributions.
Changes
Rebuilt list of deps for supported Linux distro to include full paths.
Change the way we parse ldd's output to make this possible in Linux distros other than Alpine (which already had it enabled).
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.","Tests fail on osx/macos, but only because of compat failures. Deps tests are fine, eg.:
bs1i-osx-108-x64-33:build buildslave$ git status
On branch 2696-full-deps-check
nothing to commit, working directory clean
bs1i-osx-108-x64-33:build buildslave$ ./chevah_build test
~/runtime/build-osx108-x64/slave/python-package-osx-108/build/build ~/runtime/build-osx108-x64/slave/python-package-osx-108/build
##### Executing Chevah tests... #####
python 2.7.14 (d0a1e1bd, Jan  3 2018, 19:04:25)
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]
zlib 1.0
stdlib ssl OpenSSL 0.9.8r 8 Feb 2011
cryptography 1.8.2 - OpenSSL OpenSSL 1.1.0f  25 May 2017
pyopenssl 17.0.0 - OpenSSL OpenSSL 1.1.0f  25 May 2017
PyCrypto 2.6.1
ctypes 1.1.0
pysqlite2 2.8.3 - sqlite 3.20.1
setproctitle 1.1.10
""readline"" module is present.
##### Executing tests for included Python modules... #####
Testing scandir...
test_basic (test_scandir.TestScandirC) ... ok
test_bytes (test_scandir.TestScandirC) ... ok
test_dir_entry (test_scandir.TestScandirC) ... ok
test_file_attributes (test_scandir.TestScandirC) ... skipped 'st_file_attributes not supported'
test_path (test_scandir.TestScandirC) ... ok
test_returns_iter (test_scandir.TestScandirC) ... ok
test_stat (test_scandir.TestScandirC) ... ok
test_symlink (test_scandir.TestScandirC) ... ok
test_unicode (test_scandir.TestScandirC) ... ok
test_walk_unicode_handling (test_scandir.TestScandirC) ... ok
test_basic (test_scandir.TestScandirGeneric) ... ok
test_bytes (test_scandir.TestScandirGeneric) ... ok
test_dir_entry (test_scandir.TestScandirGeneric) ... ok
test_file_attributes (test_scandir.TestScandirGeneric) ... skipped 'st_file_attributes not supported'
test_path (test_scandir.TestScandirGeneric) ... ok
test_returns_iter (test_scandir.TestScandirGeneric) ... ok
test_stat (test_scandir.TestScandirGeneric) ... ok
test_symlink (test_scandir.TestScandirGeneric) ... ok
test_unicode (test_scandir.TestScandirGeneric) ... ok
test_walk_unicode_handling (test_scandir.TestScandirGeneric) ... ok
test_basic (test_scandir.TestScandirPython) ... ok
test_bytes (test_scandir.TestScandirPython) ... ok
test_dir_entry (test_scandir.TestScandirPython) ... ok
test_file_attributes (test_scandir.TestScandirPython) ... skipped 'st_file_attributes not supported'
test_path (test_scandir.TestScandirPython) ... ok
test_returns_iter (test_scandir.TestScandirPython) ... ok
test_stat (test_scandir.TestScandirPython) ... ok
test_symlink (test_scandir.TestScandirPython) ... ok
test_unicode (test_scandir.TestScandirPython) ... ok
test_walk_unicode_handling (test_scandir.TestScandirPython) ... ok
test_traversal (test_walk.TestWalk) ... ok
test_symlink_to_directory (test_walk.TestWalkSymlink) ... ok
test_symlink_to_file (test_walk.TestWalkSymlink) ... ok

----------------------------------------------------------------------
Ran 33 tests in 0.013s

OK (skipped=3)",True,{}
chevah/python-package,https://github.com/chevah/python-package,97,2018-01-03T16:32:07Z,2018-01-08T14:40:25Z,2018-03-23T11:30:21Z,MERGED,True,11,10,3,https://github.com/dumol,[#4308] Limit parallel builds on HP-UX for GMP only.,2,['needs-merge'],https://github.com/chevah/python-package/pull/97,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/97,"Scope
Parallel builds of GMP fail on HP-UX when using more than 2 threadsâ€¦ Eg. https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/3/steps/build/logs/stdio:
Making target""mpn/mp_bases.lo""
	/bin/sh ./libtool  --tag=CC    --mode=compile /opt/aCC/bin/cc -w -DHAVE_CONFIG_H  -I.  -D__GMP_WITHIN_GMP    +O2 -c -o mpn/mp_bases.lo mpn/mp_bases.c
libtool: compile:  /opt/aCC/bin/cc -w -DHAVE_CONFIG_H -I. -D__GMP_WITHIN_GMP +O2 -c mpn/mp_bases.c -o mpn/mp_bases.o
Making target""config.h""
At end of source: error #2018: expected a "")""

""mpn/mp_bases.c"", line 185: error #2274: improperly terminated macro invocation
    /* 173 */ { 8, CNST_LIMB(0x226ef7776aa7fd29), CNST_LIMB(0x
                                                  ^

At end of source: error #2029: expected an expression

At end of source: error #2067: expected a ""}""

At end of source: error #2067: expected a ""}""

At end of source: error #2065: expected a "";""

6 errors detected in the compilation of ""mpn/mp_bases.c"".

Changes
As GMP author has shown no interest in fixing issues with the native make in HP-UX, we limit the number of parallel builds to 2 on HP-UX when building GMP.
Drive-by fixes:

improve .gitignore
fixed a couple of spelling errors.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build it on HP-UX.
Run the automated tests.","Scope
Parallel builds of GMP fail on HP-UX when using more than 2 threadsâ€¦ Eg. https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/3/steps/build/logs/stdio:
Making target""mpn/mp_bases.lo""
	/bin/sh ./libtool  --tag=CC    --mode=compile /opt/aCC/bin/cc -w -DHAVE_CONFIG_H  -I.  -D__GMP_WITHIN_GMP    +O2 -c -o mpn/mp_bases.lo mpn/mp_bases.c
libtool: compile:  /opt/aCC/bin/cc -w -DHAVE_CONFIG_H -I. -D__GMP_WITHIN_GMP +O2 -c mpn/mp_bases.c -o mpn/mp_bases.o
Making target""config.h""
At end of source: error #2018: expected a "")""

""mpn/mp_bases.c"", line 185: error #2274: improperly terminated macro invocation
    /* 173 */ { 8, CNST_LIMB(0x226ef7776aa7fd29), CNST_LIMB(0x
                                                  ^

At end of source: error #2029: expected an expression

At end of source: error #2067: expected a ""}""

At end of source: error #2067: expected a ""}""

At end of source: error #2065: expected a "";""

6 errors detected in the compilation of ""mpn/mp_bases.c"".

Changes
As GMP author has shown no interest in fixing issues with the native make in HP-UX, we limit the number of parallel builds to 2 on HP-UX when building GMP.
Drive-by fixes:

improve .gitignore
fixed a couple of spelling errors.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build it on HP-UX.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,97,2018-01-03T16:32:07Z,2018-01-08T14:40:25Z,2018-03-23T11:30:21Z,MERGED,True,11,10,3,https://github.com/dumol,[#4308] Limit parallel builds on HP-UX for GMP only.,2,['needs-merge'],https://github.com/chevah/python-package/pull/97,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/97#issuecomment-355938217,"Scope
Parallel builds of GMP fail on HP-UX when using more than 2 threadsâ€¦ Eg. https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/3/steps/build/logs/stdio:
Making target""mpn/mp_bases.lo""
	/bin/sh ./libtool  --tag=CC    --mode=compile /opt/aCC/bin/cc -w -DHAVE_CONFIG_H  -I.  -D__GMP_WITHIN_GMP    +O2 -c -o mpn/mp_bases.lo mpn/mp_bases.c
libtool: compile:  /opt/aCC/bin/cc -w -DHAVE_CONFIG_H -I. -D__GMP_WITHIN_GMP +O2 -c mpn/mp_bases.c -o mpn/mp_bases.o
Making target""config.h""
At end of source: error #2018: expected a "")""

""mpn/mp_bases.c"", line 185: error #2274: improperly terminated macro invocation
    /* 173 */ { 8, CNST_LIMB(0x226ef7776aa7fd29), CNST_LIMB(0x
                                                  ^

At end of source: error #2029: expected an expression

At end of source: error #2067: expected a ""}""

At end of source: error #2067: expected a ""}""

At end of source: error #2065: expected a "";""

6 errors detected in the compilation of ""mpn/mp_bases.c"".

Changes
As GMP author has shown no interest in fixing issues with the native make in HP-UX, we limit the number of parallel builds to 2 on HP-UX when building GMP.
Drive-by fixes:

improve .gitignore
fixed a couple of spelling errors.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Build it on HP-UX.
Run the automated tests.","Forgot:
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,99,2018-03-07T14:52:16Z,2018-03-08T11:37:46Z,2018-03-08T11:37:51Z,MERGED,True,37,96,4,https://github.com/dumol,[#4712] No more package management at build time.,6,['needs-merge'],https://github.com/chevah/python-package/pull/99,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/99,"Scope
As discussed in #4092, remove code that automatically installs/uninstalls packages for building python-package and just make sure the dependencies of chevah_build.sh are documented. Also, relevant and helpful errors should be generated when needed binaries/libs are missing.
Changes
Remove code that uninstalled packages.
Updated code that installed packages to only check for required packages.
Quit with a relevant error when one or more packages are missing, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/6/steps/build/logs/stdio.
Drive-by fixes:

updated paver.conf and paver.sh from server repo
consequently, updated minimum supported RHEL version to major version 5
make it possible to use a symbolic link for build/ sub-directory
updated deps for Arch Linux
updated Git on solaris-11-sparc and win-xp to support GitHub with TLS 1.2 only.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.","Scope
As discussed in #4092, remove code that automatically installs/uninstalls packages for building python-package and just make sure the dependencies of chevah_build.sh are documented. Also, relevant and helpful errors should be generated when needed binaries/libs are missing.
Changes
Remove code that uninstalled packages.
Updated code that installed packages to only check for required packages.
Quit with a relevant error when one or more packages are missing, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/6/steps/build/logs/stdio.
Drive-by fixes:

updated paver.conf and paver.sh from server repo
consequently, updated minimum supported RHEL version to major version 5
make it possible to use a symbolic link for build/ sub-directory
updated deps for Arch Linux
updated Git on solaris-11-sparc and win-xp to support GitHub with TLS 1.2 only.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.",True,{}
chevah/python-package,https://github.com/chevah/python-package,99,2018-03-07T14:52:16Z,2018-03-08T11:37:46Z,2018-03-08T11:37:51Z,MERGED,True,37,96,4,https://github.com/dumol,[#4712] No more package management at build time.,6,['needs-merge'],https://github.com/chevah/python-package/pull/99,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/99#issuecomment-371165441,"Scope
As discussed in #4092, remove code that automatically installs/uninstalls packages for building python-package and just make sure the dependencies of chevah_build.sh are documented. Also, relevant and helpful errors should be generated when needed binaries/libs are missing.
Changes
Remove code that uninstalled packages.
Updated code that installed packages to only check for required packages.
Quit with a relevant error when one or more packages are missing, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/6/steps/build/logs/stdio.
Drive-by fixes:

updated paver.conf and paver.sh from server repo
consequently, updated minimum supported RHEL version to major version 5
make it possible to use a symbolic link for build/ sub-directory
updated deps for Arch Linux
updated Git on solaris-11-sparc and win-xp to support GitHub with TLS 1.2 only.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,99,2018-03-07T14:52:16Z,2018-03-08T11:37:46Z,2018-03-08T11:37:51Z,MERGED,True,37,96,4,https://github.com/dumol,[#4712] No more package management at build time.,6,['needs-merge'],https://github.com/chevah/python-package/pull/99,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/99#issuecomment-371263987,"Scope
As discussed in #4092, remove code that automatically installs/uninstalls packages for building python-package and just make sure the dependencies of chevah_build.sh are documented. Also, relevant and helpful errors should be generated when needed binaries/libs are missing.
Changes
Remove code that uninstalled packages.
Updated code that installed packages to only check for required packages.
Quit with a relevant error when one or more packages are missing, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/6/steps/build/logs/stdio.
Drive-by fixes:

updated paver.conf and paver.sh from server repo
consequently, updated minimum supported RHEL version to major version 5
make it possible to use a symbolic link for build/ sub-directory
updated deps for Arch Linux
updated Git on solaris-11-sparc and win-xp to support GitHub with TLS 1.2 only.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.","chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.

this test is using the pam module in /etc/pam.d/chevah-pam-test ... so maybe at some paint the pam code was updated and it is no longer working.
I remember that we had similar issues in the past with the pam module... but I can't find the ticket... and I also can't find the documentation for how to manually test the pam module
The pam module was introduced in chevah/salt-master#182
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,99,2018-03-07T14:52:16Z,2018-03-08T11:37:46Z,2018-03-08T11:37:51Z,MERGED,True,37,96,4,https://github.com/dumol,[#4712] No more package management at build time.,6,['needs-merge'],https://github.com/chevah/python-package/pull/99,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/99#issuecomment-371462035,"Scope
As discussed in #4092, remove code that automatically installs/uninstalls packages for building python-package and just make sure the dependencies of chevah_build.sh are documented. Also, relevant and helpful errors should be generated when needed binaries/libs are missing.
Changes
Remove code that uninstalled packages.
Updated code that installed packages to only check for required packages.
Quit with a relevant error when one or more packages are missing, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/6/steps/build/logs/stdio.
Drive-by fixes:

updated paver.conf and paver.sh from server repo
consequently, updated minimum supported RHEL version to major version 5
make it possible to use a symbolic link for build/ sub-directory
updated deps for Arch Linux
updated Git on solaris-11-sparc and win-xp to support GitHub with TLS 1.2 only.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
chevah.compat.tests.elevated.test_system_users:TestSystemUsersPAM.test_pamWithUsernameAndPassword_ok fails on both OS X and MacOS.",Trac ticket #4770 has been filled to solve the PAM tests failing for OSX/MacOS.,True,{}
chevah/python-package,https://github.com/chevah/python-package,100,2018-03-23T11:39:31Z,2018-03-25T09:20:15Z,2018-09-03T07:29:09Z,MERGED,True,3,5,2,https://github.com/dumol,[#4797] Updated packages for RHEL7 with OpenSSL 1.0.1 and HP-UX.,2,['needs-merge'],https://github.com/chevah/python-package/pull/100,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/100,"Scope
Update Python packages for OS'es with OpenSSL 1.0.1 for which we use older versions.
Changes
Python 2.7.14 builds with no issues on RHEL 7.3 with OpenSSL 1.0.1. The lib deps tests needed a minor fix.
Couldn't build Python 2.7.14 on AIX 7.1 with OpenSSL 1.0.1e (there are several releases from IBM with this version, nothing worked for me). The issues are documented in the associated Trac ticket: https://trac.chevah.com/ticket/4797#comment:3.
This means on AIX we should keep using 2.7.13 until both clients stuck on the unsupported 1.0.1 version of OpenSSL upgrade to 1.0.2k.
Drive-by change:

stop disabling IPv6 support on HP-UX as it doesn't break the build any more with 2.7.14.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Check the updated packages with server, specifically the branch implementing IPv6 support, eg. https://chevah.com/buildbot/builders/server-hpux/builds/176","Scope
Update Python packages for OS'es with OpenSSL 1.0.1 for which we use older versions.
Changes
Python 2.7.14 builds with no issues on RHEL 7.3 with OpenSSL 1.0.1. The lib deps tests needed a minor fix.
Couldn't build Python 2.7.14 on AIX 7.1 with OpenSSL 1.0.1e (there are several releases from IBM with this version, nothing worked for me). The issues are documented in the associated Trac ticket: https://trac.chevah.com/ticket/4797#comment:3.
This means on AIX we should keep using 2.7.13 until both clients stuck on the unsupported 1.0.1 version of OpenSSL upgrade to 1.0.2k.
Drive-by change:

stop disabling IPv6 support on HP-UX as it doesn't break the build any more with 2.7.14.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Check the updated packages with server, specifically the branch implementing IPv6 support, eg. https://chevah.com/buildbot/builders/server-hpux/builds/176",True,{}
chevah/python-package,https://github.com/chevah/python-package,100,2018-03-23T11:39:31Z,2018-03-25T09:20:15Z,2018-09-03T07:29:09Z,MERGED,True,3,5,2,https://github.com/dumol,[#4797] Updated packages for RHEL7 with OpenSSL 1.0.1 and HP-UX.,2,['needs-merge'],https://github.com/chevah/python-package/pull/100,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/100#issuecomment-375632818,"Scope
Update Python packages for OS'es with OpenSSL 1.0.1 for which we use older versions.
Changes
Python 2.7.14 builds with no issues on RHEL 7.3 with OpenSSL 1.0.1. The lib deps tests needed a minor fix.
Couldn't build Python 2.7.14 on AIX 7.1 with OpenSSL 1.0.1e (there are several releases from IBM with this version, nothing worked for me). The issues are documented in the associated Trac ticket: https://trac.chevah.com/ticket/4797#comment:3.
This means on AIX we should keep using 2.7.13 until both clients stuck on the unsupported 1.0.1 version of OpenSSL upgrade to 1.0.2k.
Drive-by change:

stop disabling IPv6 support on HP-UX as it doesn't break the build any more with 2.7.14.

How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Check the updated packages with server, specifically the branch implementing IPv6 support, eg. https://chevah.com/buildbot/builders/server-hpux/builds/176",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,101,2018-04-02T13:41:23Z,2018-04-03T07:41:25Z,2018-04-03T07:41:31Z,MERGED,True,28488,15261,42,https://github.com/dumol,[#4836] SQLite upgrade to 3.23.0.,4,['needs-merge'],https://github.com/chevah/python-package/pull/101,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/101,"Scope
Build python-package with a more recent SQLite, as the version we are currently using, 3.20.1, is affected by a few security issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-9237/Sqlite.html
â€‹https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=sqlite
Note that on Windows we are at the mercy of the upstream Python packagers and the version they include, 3.8.11.0, is affected by even more serious issues.
Changes
Updated the included SQLite sources and incremented SQLITE_VERSION accordingly.
Added an up-to-date SQLite 32-bit Windows DLL in src/sqlite and used it to overwrite the DLL included in Python's Windows installer.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Make sure the updated Windows DLL works as expected.","Scope
Build python-package with a more recent SQLite, as the version we are currently using, 3.20.1, is affected by a few security issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-9237/Sqlite.html
â€‹https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=sqlite
Note that on Windows we are at the mercy of the upstream Python packagers and the version they include, 3.8.11.0, is affected by even more serious issues.
Changes
Updated the included SQLite sources and incremented SQLITE_VERSION accordingly.
Added an up-to-date SQLite 32-bit Windows DLL in src/sqlite and used it to overwrite the DLL included in Python's Windows installer.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Make sure the updated Windows DLL works as expected.",True,{}
chevah/python-package,https://github.com/chevah/python-package,101,2018-04-02T13:41:23Z,2018-04-03T07:41:25Z,2018-04-03T07:41:31Z,MERGED,True,28488,15261,42,https://github.com/dumol,[#4836] SQLite upgrade to 3.23.0.,4,['needs-merge'],https://github.com/chevah/python-package/pull/101,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/101#issuecomment-377931445,"Scope
Build python-package with a more recent SQLite, as the version we are currently using, 3.20.1, is affected by a few security issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-9237/Sqlite.html
â€‹https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=sqlite
Note that on Windows we are at the mercy of the upstream Python packagers and the version they include, 3.8.11.0, is affected by even more serious issues.
Changes
Updated the included SQLite sources and incremented SQLITE_VERSION accordingly.
Added an up-to-date SQLite 32-bit Windows DLL in src/sqlite and used it to overwrite the DLL included in Python's Windows installer.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Make sure the updated Windows DLL works as expected.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,101,2018-04-02T13:41:23Z,2018-04-03T07:41:25Z,2018-04-03T07:41:31Z,MERGED,True,28488,15261,42,https://github.com/dumol,[#4836] SQLite upgrade to 3.23.0.,4,['needs-merge'],https://github.com/chevah/python-package/pull/101,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/101#issuecomment-378157864,"Scope
Build python-package with a more recent SQLite, as the version we are currently using, 3.20.1, is affected by a few security issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-9237/Sqlite.html
â€‹https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=sqlite
Note that on Windows we are at the mercy of the upstream Python packagers and the version they include, 3.8.11.0, is affected by even more serious issues.
Changes
Updated the included SQLite sources and incremented SQLITE_VERSION accordingly.
Added an up-to-date SQLite 32-bit Windows DLL in src/sqlite and used it to overwrite the DLL included in Python's Windows installer.
How to try and test the changes
reviewers: @adiroiban
Please review the changes.
Run the automated tests.
Make sure the updated Windows DLL works as expected.","Both the sources and the 32bit DLL were downloaded from upstream sqlite.org site. I thought it goes without saying, but it seems that's not the case, so I documented it  to be clear. Could be helpful in some other ways, as there are plenty of downloads to choose from on the sqlite.org download page.
However, upstream Python packagers were not using the same source. From what I can tell, they build the SQLite DLL themselves, possibly with Visual Studio, as apparently they are not using GCC as the SQLite maintainer does.",True,{}
chevah/python-package,https://github.com/chevah/python-package,102,2018-04-03T10:36:19Z,2018-05-04T10:03:53Z,2018-05-04T10:45:45Z,MERGED,True,9570,4050,258,https://github.com/dumol,[#4837] cryptography updates.,20,['needs-merge'],https://github.com/chevah/python-package/pull/102,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/102,"#Scope
Version 1.9 we are currently using on most OS'es is not known to have security issues, but it bundles OpenSSL 1.1.0f on Windows and OSX / MacOS, which does have a number of issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-217/product_id-383/version_id-223239/Openssl-Openssl-1.1.0f.html.
More so, newest pyOpenSSL requires newer cryptography. pyOpenSSL has fixed in latest versions bugs with a security impact. More at https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
Changes
Updated cryptography for SLES 11 (and possibly RHEL 5) to latest version with support for OpenSSL 0.9.8, namely version 1.3.4.
Updated cryptography to latest version 2.2.2 for all OS'es using 1.9.
Switched to using cffi-based modules for AIX, HP-UX and Solaris 11 with the following cryptography versions:

pristine 2.2.2 for AIX, with a minor patch for Python to find ld_so_aix & co.
slightly patched 2.2.2 for HP-UX (minor problems with CFLAGS and C syntax)
2.2.2 / 1.8.2 / 1.6 for Solaris 11, depending on OpenSSL version and availability of EC crypto, more in 6fc61a5. A bit of pruning for compile flags is needed for 2.2.2.

Drive-by fixes:

updated pip and setuptools to latest stable versions: 9.0.3 and 39.0.1
updated cffi to latest version, 1.15.2, to avoid reinstalling when building cryptography's and related issues on exotic platforms
happily hacked in support for OpenBSD 6.3 and LibreSSL 2.7.x
updated SQLite sources and Windows DLL to fix a nasty bug found upstream
updated scandir to latest version, as 1.5 PyPI archive was not handled well in the Unix world (CR+LF endings). scandir tests now pass on Debian Linux and Solaris 10 AMD64 too
call ioscan with full path on HP-UX to account for a $PATH with no /usr/sbin
updated paver.conf for Ubuntu 18.04
updated Solaris 11 installation on Jacu from 11.1 to 11.2 to match the Solaris 11 AMD64 installations. OpenSSL version was upgraded from 1.0.0j to 1.0.1h.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and src/python, everything else is related to updating upstream sources.
Run the automated tests.
Check out cffi-based modules in AIX / HP-UX / Solaris 11, especially cryptography.
Check failed compat tests on Solaris 11 SPARC.","#Scope
Version 1.9 we are currently using on most OS'es is not known to have security issues, but it bundles OpenSSL 1.1.0f on Windows and OSX / MacOS, which does have a number of issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-217/product_id-383/version_id-223239/Openssl-Openssl-1.1.0f.html.
More so, newest pyOpenSSL requires newer cryptography. pyOpenSSL has fixed in latest versions bugs with a security impact. More at https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
Changes
Updated cryptography for SLES 11 (and possibly RHEL 5) to latest version with support for OpenSSL 0.9.8, namely version 1.3.4.
Updated cryptography to latest version 2.2.2 for all OS'es using 1.9.
Switched to using cffi-based modules for AIX, HP-UX and Solaris 11 with the following cryptography versions:

pristine 2.2.2 for AIX, with a minor patch for Python to find ld_so_aix & co.
slightly patched 2.2.2 for HP-UX (minor problems with CFLAGS and C syntax)
2.2.2 / 1.8.2 / 1.6 for Solaris 11, depending on OpenSSL version and availability of EC crypto, more in 6fc61a5. A bit of pruning for compile flags is needed for 2.2.2.

Drive-by fixes:

updated pip and setuptools to latest stable versions: 9.0.3 and 39.0.1
updated cffi to latest version, 1.15.2, to avoid reinstalling when building cryptography's and related issues on exotic platforms
happily hacked in support for OpenBSD 6.3 and LibreSSL 2.7.x
updated SQLite sources and Windows DLL to fix a nasty bug found upstream
updated scandir to latest version, as 1.5 PyPI archive was not handled well in the Unix world (CR+LF endings). scandir tests now pass on Debian Linux and Solaris 10 AMD64 too
call ioscan with full path on HP-UX to account for a $PATH with no /usr/sbin
updated paver.conf for Ubuntu 18.04
updated Solaris 11 installation on Jacu from 11.1 to 11.2 to match the Solaris 11 AMD64 installations. OpenSSL version was upgraded from 1.0.0j to 1.0.1h.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and src/python, everything else is related to updating upstream sources.
Run the automated tests.
Check out cffi-based modules in AIX / HP-UX / Solaris 11, especially cryptography.
Check failed compat tests on Solaris 11 SPARC.",True,{}
chevah/python-package,https://github.com/chevah/python-package,102,2018-04-03T10:36:19Z,2018-05-04T10:03:53Z,2018-05-04T10:45:45Z,MERGED,True,9570,4050,258,https://github.com/dumol,[#4837] cryptography updates.,20,['needs-merge'],https://github.com/chevah/python-package/pull/102,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/102#issuecomment-384542446,"#Scope
Version 1.9 we are currently using on most OS'es is not known to have security issues, but it bundles OpenSSL 1.1.0f on Windows and OSX / MacOS, which does have a number of issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-217/product_id-383/version_id-223239/Openssl-Openssl-1.1.0f.html.
More so, newest pyOpenSSL requires newer cryptography. pyOpenSSL has fixed in latest versions bugs with a security impact. More at https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
Changes
Updated cryptography for SLES 11 (and possibly RHEL 5) to latest version with support for OpenSSL 0.9.8, namely version 1.3.4.
Updated cryptography to latest version 2.2.2 for all OS'es using 1.9.
Switched to using cffi-based modules for AIX, HP-UX and Solaris 11 with the following cryptography versions:

pristine 2.2.2 for AIX, with a minor patch for Python to find ld_so_aix & co.
slightly patched 2.2.2 for HP-UX (minor problems with CFLAGS and C syntax)
2.2.2 / 1.8.2 / 1.6 for Solaris 11, depending on OpenSSL version and availability of EC crypto, more in 6fc61a5. A bit of pruning for compile flags is needed for 2.2.2.

Drive-by fixes:

updated pip and setuptools to latest stable versions: 9.0.3 and 39.0.1
updated cffi to latest version, 1.15.2, to avoid reinstalling when building cryptography's and related issues on exotic platforms
happily hacked in support for OpenBSD 6.3 and LibreSSL 2.7.x
updated SQLite sources and Windows DLL to fix a nasty bug found upstream
updated scandir to latest version, as 1.5 PyPI archive was not handled well in the Unix world (CR+LF endings). scandir tests now pass on Debian Linux and Solaris 10 AMD64 too
call ioscan with full path on HP-UX to account for a $PATH with no /usr/sbin
updated paver.conf for Ubuntu 18.04
updated Solaris 11 installation on Jacu from 11.1 to 11.2 to match the Solaris 11 AMD64 installations. OpenSSL version was upgraded from 1.0.0j to 1.0.1h.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and src/python, everything else is related to updating upstream sources.
Run the automated tests.
Check out cffi-based modules in AIX / HP-UX / Solaris 11, especially cryptography.
Check failed compat tests on Solaris 11 SPARC.","A significant chunk of this has been done during Happy Hacking Day (OpenBSD-related stuff) and in my spare time (support for older AIX versions and unsuccessfully hacking on libedit for Solaris).
AIX 6 slave can't build this successfully, but I'll work more on the ""new"" installation in Foi in my spare time. On AIX 5.3 things are smooth.
Beware of the Solaris 11 SPARC update to 11.2, which breaks compat. More stuff in the PR description.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,102,2018-04-03T10:36:19Z,2018-05-04T10:03:53Z,2018-05-04T10:45:45Z,MERGED,True,9570,4050,258,https://github.com/dumol,[#4837] cryptography updates.,20,['needs-merge'],https://github.com/chevah/python-package/pull/102,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/102#issuecomment-386328025,"#Scope
Version 1.9 we are currently using on most OS'es is not known to have security issues, but it bundles OpenSSL 1.1.0f on Windows and OSX / MacOS, which does have a number of issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-217/product_id-383/version_id-223239/Openssl-Openssl-1.1.0f.html.
More so, newest pyOpenSSL requires newer cryptography. pyOpenSSL has fixed in latest versions bugs with a security impact. More at https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
Changes
Updated cryptography for SLES 11 (and possibly RHEL 5) to latest version with support for OpenSSL 0.9.8, namely version 1.3.4.
Updated cryptography to latest version 2.2.2 for all OS'es using 1.9.
Switched to using cffi-based modules for AIX, HP-UX and Solaris 11 with the following cryptography versions:

pristine 2.2.2 for AIX, with a minor patch for Python to find ld_so_aix & co.
slightly patched 2.2.2 for HP-UX (minor problems with CFLAGS and C syntax)
2.2.2 / 1.8.2 / 1.6 for Solaris 11, depending on OpenSSL version and availability of EC crypto, more in 6fc61a5. A bit of pruning for compile flags is needed for 2.2.2.

Drive-by fixes:

updated pip and setuptools to latest stable versions: 9.0.3 and 39.0.1
updated cffi to latest version, 1.15.2, to avoid reinstalling when building cryptography's and related issues on exotic platforms
happily hacked in support for OpenBSD 6.3 and LibreSSL 2.7.x
updated SQLite sources and Windows DLL to fix a nasty bug found upstream
updated scandir to latest version, as 1.5 PyPI archive was not handled well in the Unix world (CR+LF endings). scandir tests now pass on Debian Linux and Solaris 10 AMD64 too
call ioscan with full path on HP-UX to account for a $PATH with no /usr/sbin
updated paver.conf for Ubuntu 18.04
updated Solaris 11 installation on Jacu from 11.1 to 11.2 to match the Solaris 11 AMD64 installations. OpenSSL version was upgraded from 1.0.0j to 1.0.1h.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and src/python, everything else is related to updating upstream sources.
Run the automated tests.
Check out cffi-based modules in AIX / HP-UX / Solaris 11, especially cryptography.
Check failed compat tests on Solaris 11 SPARC.","I am looking at this, but I  try to think how to approach it.
I am planning to use this in chevah/server and see if test pass... and with that we start using the latest versions.",True,{}
chevah/python-package,https://github.com/chevah/python-package,102,2018-04-03T10:36:19Z,2018-05-04T10:03:53Z,2018-05-04T10:45:45Z,MERGED,True,9570,4050,258,https://github.com/dumol,[#4837] cryptography updates.,20,['needs-merge'],https://github.com/chevah/python-package/pull/102,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/102#issuecomment-386374043,"#Scope
Version 1.9 we are currently using on most OS'es is not known to have security issues, but it bundles OpenSSL 1.1.0f on Windows and OSX / MacOS, which does have a number of issues: â€‹https://www.cvedetails.com/vulnerability-list/vendor_id-217/product_id-383/version_id-223239/Openssl-Openssl-1.1.0f.html.
More so, newest pyOpenSSL requires newer cryptography. pyOpenSSL has fixed in latest versions bugs with a security impact. More at https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
Changes
Updated cryptography for SLES 11 (and possibly RHEL 5) to latest version with support for OpenSSL 0.9.8, namely version 1.3.4.
Updated cryptography to latest version 2.2.2 for all OS'es using 1.9.
Switched to using cffi-based modules for AIX, HP-UX and Solaris 11 with the following cryptography versions:

pristine 2.2.2 for AIX, with a minor patch for Python to find ld_so_aix & co.
slightly patched 2.2.2 for HP-UX (minor problems with CFLAGS and C syntax)
2.2.2 / 1.8.2 / 1.6 for Solaris 11, depending on OpenSSL version and availability of EC crypto, more in 6fc61a5. A bit of pruning for compile flags is needed for 2.2.2.

Drive-by fixes:

updated pip and setuptools to latest stable versions: 9.0.3 and 39.0.1
updated cffi to latest version, 1.15.2, to avoid reinstalling when building cryptography's and related issues on exotic platforms
happily hacked in support for OpenBSD 6.3 and LibreSSL 2.7.x
updated SQLite sources and Windows DLL to fix a nasty bug found upstream
updated scandir to latest version, as 1.5 PyPI archive was not handled well in the Unix world (CR+LF endings). scandir tests now pass on Debian Linux and Solaris 10 AMD64 too
call ioscan with full path on HP-UX to account for a $PATH with no /usr/sbin
updated paver.conf for Ubuntu 18.04
updated Solaris 11 installation on Jacu from 11.1 to 11.2 to match the Solaris 11 AMD64 installations. OpenSSL version was upgraded from 1.0.0j to 1.0.1h.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and src/python, everything else is related to updating upstream sources.
Run the automated tests.
Check out cffi-based modules in AIX / HP-UX / Solaris 11, especially cryptography.
Check failed compat tests on Solaris 11 SPARC.","This is work in progress, I still have to update at least pyOpenSSL and Python (2.7.15 was launched a few days ago). Please review the changes in chevah_build and src/python/ and let me move on with the security-related updates until I reach a stage where it makes sense to start using this into the server repo and roll the security fixes in a new SFTPPlus release. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,103,2018-05-04T11:04:25Z,2018-05-16T11:37:37Z,2018-05-16T11:37:44Z,MERGED,True,360,113,158,https://github.com/dumol,[#4838] pyOpenSSL updates.,10,['needs-merge'],https://github.com/chevah/python-package/pull/103,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/103,"Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.","Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,103,2018-05-04T11:04:25Z,2018-05-16T11:37:37Z,2018-05-16T11:37:44Z,MERGED,True,360,113,158,https://github.com/dumol,[#4838] pyOpenSSL updates.,10,['needs-merge'],https://github.com/chevah/python-package/pull/103,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/103#issuecomment-387016259,"Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.","Although pyOpenSSL 0.13.1 builds fine on Solaris 10, it doesn't seem to actually run properly, see for example: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/45/steps/test/logs/stdio.
The error being:
#### Executing Chevah tests... #####
""OpenSSL"" missing. ld.so.1: python: fatal: relocation error: file /export/home/buildslave/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/python2.7-solaris10-x64/lib/python2.7/site-packages/OpenSSL/SSL.so: symbol SSL_set_SSL_CTX: referenced symbol not found
python 2.7.8 (22ded152, May  4 2018, 14:03:01) [C]

The diff for pyOpenSSL upgrade from 0.13 suggests that SSL_set_SSL_CTX was used to fix CVE-2013-4314, so we need OpenSSL libs that support this on Solaris 10 too.",True,{}
chevah/python-package,https://github.com/chevah/python-package,103,2018-05-04T11:04:25Z,2018-05-16T11:37:37Z,2018-05-16T11:37:44Z,MERGED,True,360,113,158,https://github.com/dumol,[#4838] pyOpenSSL updates.,10,['needs-merge'],https://github.com/chevah/python-package/pull/103,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/103#issuecomment-387024414,"Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.","Good news is Oracle has packaged OpenSSL 1.0.1 and lately 1.0.2 for Solaris 10. The current relevant patches (from January 2018) are:

for SPARC: https://getupdates.oracle.com/readme/151912-11
for X86: https://getupdates.oracle.com/readme/151913-11

They bundle OpenSSL 1.0.2n.",True,{}
chevah/python-package,https://github.com/chevah/python-package,103,2018-05-04T11:04:25Z,2018-05-16T11:37:37Z,2018-05-16T11:37:44Z,MERGED,True,360,113,158,https://github.com/dumol,[#4838] pyOpenSSL updates.,10,['needs-merge'],https://github.com/chevah/python-package/pull/103,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/103#issuecomment-388311464,"Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,103,2018-05-04T11:04:25Z,2018-05-16T11:37:37Z,2018-05-16T11:37:44Z,MERGED,True,360,113,158,https://github.com/dumol,[#4838] pyOpenSSL updates.,10,['needs-merge'],https://github.com/chevah/python-package/pull/103,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/103#issuecomment-388903235,"Scope
We use pyOpenSSL 17.0.0 on most OS'es, but changes upstream suggest this version has security issues: â€‹https://github.com/pyca/pyopenssl/blob/master/CHANGELOG.rst
On AIX / HP-UX / Solaris we currently use 0.13.0, affected by
â€‹https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4314.
This is a nasty security issue: The X509Extension in pyOpenSSL before 0.13.1 does not properly handle a '\0' character in a domain name in the Subject Alternative Name field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority.
Changes
Updated pyOpenSSL to latest version, 17.5.0, for OS'es using latest cryptography.
Fix CVE-2013-4314 for pyOpenSSL with an update to the undocumented 0.13.1 release. Only Solaris 10 is still using this old version in python-package, but on server this affected AIX / HP-UX / Solaris (all versions).
Have tried hard to use cryptography for Solaris 10 as well:

Installed latest OpenSSL-related Oracle patches for Solaris 10, this gives us 1.0.1n in /usr
But as with the OpenSSL version in Solaris 10.2, this comes without Elliptic-curve, so newest cryptography to build would be 1.8.2
Furthermore, NPN functions are missing from there libs, so cryptography 1.8.2 and possibly some older versions build,  but fail to work
Newest cryptograpy to not require NPN is 0.3, but that doesn't build, eg.: https://chevah.com/buildbot/builders/python-package-solaris-10/builds/92.

The lack of NPN functions in Oracle's OpenSSL patches means we are still stuck with using Python 2.7.8 on Solaris 10, as the backported _ssl module in 2.7.9+ requires NPN functions.
All of the above is documented in the comments.
Drive-by fixes:

updated deps for Ubuntu 18.04 and possibly newer (if still using OpenSSL 1.1.x)
cherry-picked an AIX fix related to not finding ld_so_aix and friends from #104.

How to try and test the changes
reviewers: @adiroiban
Please review changes in paver.sh chevah_build src/python python-modules/chevah-python-test.
Run the automated tests.","Tests on server are failing https://chevah.com/buildbot/builders/server-gk-review/builds/546
looks like the random module in pyOpenSSL no longer has the bytes function and another small issue related to hash methods.
I will look into this and see if this is a good thing or something is missing here.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/104,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/104#issuecomment-387692028,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/104#issuecomment-387697795,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","Solaris 10 builds were broken with the installation of OpenSSL 1.0.2 patches.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/104#issuecomment-387728174,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","I've tried (mostly in my spare time) to fix Solaris 10 builds against OpenSSL 0.9.7 in /usr/sfw when there is an OpenSSL 1.0.2 in /usr, made some progress, but there are strong assumptions in Python's setup.py in favour of /usr headers and libs, I wouldn't overturn them for such a corner case.
I think we can conclude that's it's not worthy to support such a setup. Solaris 10 builds were fine with rev
b2a170d  in https://chevah.com/buildbot/builders/python-package-gk-review/builds/22, before installing OpenSSL 1.0.2 patches from Oracle. And the changes since then are not at all relevant to Solaris.
Building against OpenSSL 1.0.2 in Solaris 10 will be worked upon in #103.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/104#issuecomment-389561876,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","I have updated chevah-keycert chevah/chevah-keycert#35.
I hope it will now work on AIX .
But if tests are still failing, feel free to remove the chevah-keycert test.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/104#issuecomment-389781062,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","Thanks, let's seeâ€¦ It wasn't that bad, and for some OS'es the fixes seemed straightforward from what I've seen yesterday when taking a quick look.",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/104#issuecomment-389813377,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","Actually, it's worse, nothing passes, it seems ./brink.sh test fails for chevah-keycert for all slaves: https://chevah.com/buildbot/builders/python-package-gk-review/builds/28
Previous revision had some passes: https://chevah.com/buildbot/builders/python-package-gk-review/builds/27",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/104#issuecomment-389842461,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.",you can remove the keycert tests,True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/104#issuecomment-389901174,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","Was thinking of a different solution, enabling compat and chevah-keycert tests only for some platforms.
I don't like that python-package builds fail for some unsupported platforms such as fbsd-11 and solaris-11-sparc just because the compat tests fail, yet compat failures on those platforms will not be fixed. Maybe compat tests should only be enabled for supported platforms?
In the same vein we can enable chevah-keycert only for some platforms, given that tests pass now. In time we should aim for parity with compat, but this should be better than nothing.
However, for that, chevah-keycert shouldn't fail on every platform, like it does nowâ€¦ :-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/104#issuecomment-390181602,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","I've tried a bit of debugging for the chevah-keycert test failuresâ€¦
Interestingly, on Ubuntu 160.4 ./brink.sh test only fails through buildbot, not when executed on the build slave through a shell. I've tried executing with bash -x, but apart from a minor $PATH diff, things look the same until the end.
Output from running through buildbot:
  + execute_venv test
  + build/venv/bin/python -c 'from paver.tasks import main; main()' test
  ---> pavement.test
  /srv/buildslave/runtime/build-ubuntu1604-x64/slave/python-package-ubuntu-1604/build/build/chevah-keycert/build/venv/lib/python2.7/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuil
    _warn(""Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability."", PowmInsecureWarning)
  ...............................................................................................................................
  + exit_code=1

Output from running in a shell:
+ execute_venv test
+ build/venv/bin/python -c 'from paver.tasks import main; main()' test
---> pavement.test
/srv/buildslave/runtime/build-ubuntu1604-x64/slave/python-package-ubuntu-1604/build/build/chevah-keycert/build/venv/lib/python2.7/site-packages/Crypto/Util/number.py:57: PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability.
  _warn(""Not using mpz_powm_sec.  You should rebuild using libgmp >= 5 to avoid timing attack vulnerability."", PowmInsecureWarning)
...............................................................................................................................
Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
chevah/keycert/__init__.py                    5      0   100%
chevah/keycert/common.py                     77     25    68%
chevah/keycert/exceptions.py                  8      0   100%
chevah/keycert/sexpy.py                      36      1    97%
chevah/keycert/ssh.py                       668     12    98%
chevah/keycert/ssl.py                        97      0   100%
chevah/keycert/tests/__init__.py              6      0   100%
chevah/keycert/tests/helpers.py              33      0   100%
chevah/keycert/tests/keydata.py              25      0   100%
chevah/keycert/tests/test_exceptions.py      12      0   100%
chevah/keycert/tests/test_ssh.py            713      0   100%
chevah/keycert/tests/test_ssl.py            125      0   100%
-------------------------------------------------------------
TOTAL                                      1805     38    98%
----------------------------------------------------------------------
Ran 127 tests in 1.733s

OK
Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
chevah/keycert/tests/__init__.py              6      0   100%
chevah/keycert/tests/helpers.py              33      0   100%
chevah/keycert/tests/keydata.py              25      0   100%
chevah/keycert/tests/test_exceptions.py      12      0   100%
chevah/keycert/tests/test_ssh.py            713      0   100%
chevah/keycert/tests/test_ssl.py            125      0   100%
-------------------------------------------------------------
TOTAL                                       914      0   100%
Tests coverage OK
See HTML coverate in build/cover
+ exit_code=0",True,{}
chevah/python-package,https://github.com/chevah/python-package,104,2018-05-08T08:47:06Z,2018-05-21T13:00:44Z,2018-05-21T14:11:14Z,MERGED,True,27277,16278,4552,https://github.com/dumol,[#4908] Python 2.7.15 update.,12,['needs-merge'],https://github.com/chevah/python-package/pull/104,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/104#issuecomment-390196218,"#Scope
Python 2.7.15 was released a few days ago and there are some security fixes in there (including an updated copy of expat), according to â€‹https://github.com/python/cpython/blob/2.7/Misc/NEWS.d/2.7.15rc1.rst, so I'm treating this as a security issue.
Changes
Updated Python sources and Windows installer to 2.7.15 from upstream.
Updated our patches accordingly.
Drive-by changes:

nis modules is disabled, as we don't use it and it links to lots of libs (GSS-API, Kerberos etc.)
a second AIX-specific hack for ld_so_aix woes, as upstream fixes from Python's bug tracker do not cover all scenarios
cherry-picked Ubuntu 18.04 updates from #103
reverted chevah-keycert tests
excepted unsupported platforms such as solaris11-sparc and freebsd11 from running compat tests.
minor tweaks for Solaris 10.

How to try and test the changes
reviewers: @adiroiban
Review changes to master in chevah_build, functions.sh and src/python/*.patch.
Think of a better solution for AIX's ld_so_aix woes?
Run the automated tests.","There seems to be a problem with the error code from ./brink test (obviously). When coverage is not good enough (/me thinks), eg. for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/65/steps/test_1/logs/stdio. The error code for this failure was 2 and the build failed, although coverage looks good (again, /me thinks).
I changed chevah_build to soft fail for chevah-keycert tests for now to move aheadâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/105,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.","#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/105#issuecomment-393816467,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/105#issuecomment-395772412,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.","@adiroiban, 2.7.15.ba61f65 binaries uploaded to testing for all platforms and arches. Hope everything will turned out fine in server.",True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/105#issuecomment-396025229,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.","Just a note
@dumol for hpux. I tried to take builds from older PRs and test HPUX part by part.
For example I looked at #104 and tried a rebuild but it failed now

Failed rebuild now https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/255
Success build in 9 may https://chevah.com/buildbot/builders/python-package-hpux-dev/builds/102

I was expecting it to fail maybe at pyopenssl, but it looks like that is not the case.
In an ideal world, we could look at any past build which was green and be rebuilding it we should also get a new green build. We can discuss over IRC what option we have.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/105#issuecomment-396155333,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.","Thanks for reviewing this!
HP-UX rebuilds fail roughly 2 out 3 times because of the issues in https://trac.chevah.com/ticket/4205. You should just retry until successful, if the failure is one of those listed there.
However, I'm confident we don't have to backtrack that much for HP-UX. I'll try to get a better build here. I think the build improvements in 4d12876 are causing the segmentation faults in server, most probably the flag for position-independent code.
As for AIX 7, I've tried several months ago to rebuild on AIX 7.1 with OpenSSL 1.0.1e (there are several releases from IBM with this version, nothing worked for me). The issues are documented in Trac, ticket  https://trac.chevah.com/ticket/4797, and the associated PR.
For AIX, if there's still a need for supporting OpenSSL 1.0.1 (for which IBM dropped support an year and a half ago), my suggestion would be to do things as in RHEL 7, but with an older Python package, not recommended for anything else but as a way to upgrade to latest stuff. No one should be using that unsupported OpenSSL version in AIX any more.",True,{}
chevah/python-package,https://github.com/chevah/python-package,105,2018-06-01T08:54:34Z,2018-06-11T11:27:00Z,2018-09-03T07:29:07Z,MERGED,True,42348,17,125,https://github.com/dumol,[#4952] Build gmpy2 (or gmpy) module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/105,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/105#issuecomment-396226432,"#Scope
We need gmpy (version1 â€‹https://pypi.org/project/gmpy/#files) to speed ssh operations
$ ./build-ubuntu1604-x64/bin/python 
Python 2.7.14 (620df8b0, Nov  9 2017, 16:16:50) 
[GCC 5.4.0 20160609] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import gmpy
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named gmpy
>>> 

the tests in python package needs to be updated to have import gmpy
we can build it in python-package or create wheels for each platform
Later we should migrate to gmpy2... I have start looking at converting the code from gmpy2 to gmpy, but meanwhile we should have gmpy functional
Changes
gmpy is unmaintained, has been superseded by gmpy2.
Build gmpy2 in a dedicated step, as with pysqlite, because we need to build it without MPFR and MPC (we only need MP with GMP at the moment).
But use the official wheel for Windows (which has MPIR included instead of GMP).
I've added a basic test for gmpy2 for what we use, as discussed on IRC.
Have tried adding more tests from the test* sub-dirs, but most of them have multiple broken tests on all platforms, see for example the patch and first test phase for https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/88. The only fully-functional test seems to be test3/test_mpz_args.py, not sure if we want this, it's not quite related, AFAICT.
For HP-UX was only able to get a functional gmpy2 when building 64bit binaries, but then some other stuff broke: a minor module in cryptography, setproctitle and _scandir (but not scandir). Have tried for some hours, mostly in my free time, to fix either the 64bit issues or gmpy2 for 32bit builds, but failed.
So on HP-UX we are using gmpy instead of gmpy2.
Drive-by fixes:

use aCC -Ae insted of cc on HP-UX to make it possible to use more than 2 threads when compiling GMP
link with aCC -b on  HP-UX to allow for CFLAGS not supported by default ld.

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah.sh and python-modules/chevah-python-test/test_python_binary_dist.py.
Run the automated tests.","Thanks for AIX we need to communicate with the customers and see what they want.
For now,  I will put AIX 7.1 with old OpenSSL in unsupported on chevah/server",True,{}
chevah/python-package,https://github.com/chevah/python-package,106,2018-06-06T14:50:31Z,2018-06-08T08:53:03Z,2018-07-03T14:25:52Z,MERGED,True,52,31,2,https://github.com/dumol,[#4833] Build libffi only when needed.,7,['needs-merge'],https://github.com/chevah/python-package/pull/106,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/106,"Scope
Our bundled libffi is used twice:

by Python if using --with-system-ffi (on AIX and HP-UX)
by CFFI (on all platforms where we use pip/cffi/cryptography).

Stop building libffi unnecessarily on OS'es which bundle and support it. Linking to OS-provided libffi means one less liability from a security point of view.
Changes
Build CFFI against OS libs where this is possible (everywhere but AIX and HP-UX).
But not on the BSDs, where libffi is not included in the base system and has to be installed as a package.
Systems not building CFFI are not affected (currently Windows and Solaris 10).
Systems not tested, but for which I deduced required deps: Solaris 11 SPARC 64bit (as we force 32bit builds) and Raspbian 7.
Drive-by fixes:

lower MACOSX_DEPLOYMENT_TARGET to 10.11 in preparation for dropping support for OS X 10.8 - 10.10
cosmetic changes for how we document and check for needed packages on some Linux distros.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
Our bundled libffi is used twice:

by Python if using --with-system-ffi (on AIX and HP-UX)
by CFFI (on all platforms where we use pip/cffi/cryptography).

Stop building libffi unnecessarily on OS'es which bundle and support it. Linking to OS-provided libffi means one less liability from a security point of view.
Changes
Build CFFI against OS libs where this is possible (everywhere but AIX and HP-UX).
But not on the BSDs, where libffi is not included in the base system and has to be installed as a package.
Systems not building CFFI are not affected (currently Windows and Solaris 10).
Systems not tested, but for which I deduced required deps: Solaris 11 SPARC 64bit (as we force 32bit builds) and Raspbian 7.
Drive-by fixes:

lower MACOSX_DEPLOYMENT_TARGET to 10.11 in preparation for dropping support for OS X 10.8 - 10.10
cosmetic changes for how we document and check for needed packages on some Linux distros.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,106,2018-06-06T14:50:31Z,2018-06-08T08:53:03Z,2018-07-03T14:25:52Z,MERGED,True,52,31,2,https://github.com/dumol,[#4833] Build libffi only when needed.,7,['needs-merge'],https://github.com/chevah/python-package/pull/106,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/106#issuecomment-395348254,"Scope
Our bundled libffi is used twice:

by Python if using --with-system-ffi (on AIX and HP-UX)
by CFFI (on all platforms where we use pip/cffi/cryptography).

Stop building libffi unnecessarily on OS'es which bundle and support it. Linking to OS-provided libffi means one less liability from a security point of view.
Changes
Build CFFI against OS libs where this is possible (everywhere but AIX and HP-UX).
But not on the BSDs, where libffi is not included in the base system and has to be installed as a package.
Systems not building CFFI are not affected (currently Windows and Solaris 10).
Systems not tested, but for which I deduced required deps: Solaris 11 SPARC 64bit (as we force 32bit builds) and Raspbian 7.
Drive-by fixes:

lower MACOSX_DEPLOYMENT_TARGET to 10.11 in preparation for dropping support for OS X 10.8 - 10.10
cosmetic changes for how we document and check for needed packages on some Linux distros.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,106,2018-06-06T14:50:31Z,2018-06-08T08:53:03Z,2018-07-03T14:25:52Z,MERGED,True,52,31,2,https://github.com/dumol,[#4833] Build libffi only when needed.,7,['needs-merge'],https://github.com/chevah/python-package/pull/106,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/106#issuecomment-395674557,"Scope
Our bundled libffi is used twice:

by Python if using --with-system-ffi (on AIX and HP-UX)
by CFFI (on all platforms where we use pip/cffi/cryptography).

Stop building libffi unnecessarily on OS'es which bundle and support it. Linking to OS-provided libffi means one less liability from a security point of view.
Changes
Build CFFI against OS libs where this is possible (everywhere but AIX and HP-UX).
But not on the BSDs, where libffi is not included in the base system and has to be installed as a package.
Systems not building CFFI are not affected (currently Windows and Solaris 10).
Systems not tested, but for which I deduced required deps: Solaris 11 SPARC 64bit (as we force 32bit builds) and Raspbian 7.
Drive-by fixes:

lower MACOSX_DEPLOYMENT_TARGET to 10.11 in preparation for dropping support for OS X 10.8 - 10.10
cosmetic changes for how we document and check for needed packages on some Linux distros.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Thanks for the review, I will merge this in master and then into the gmpy PR, #105.
One thing I forgot is to lower the deployment target for MacOS to 10.11 to cover all versions used by Ixmal, once we drop OS X support. Will do this as a drive-by here.

I am ok to keep libffi as an external dependency in FreeBSD.

I thought the same in the beginning (see f725362), but I've changed my mind since then. And the more I think about it, the more I lean to the side of not using packages on the BSDs. I'm very sure it's the right thing to do on OpenBSD, not that sure on FreeBSD, but better to keep things on the safe side.

Please double check that once this is used in chevah/server we update the documentation to note the libffi is require for freebsd
[â€¦]
In this list I don't see the change for Arch / Alpine.

Because we don't do package verifications for those OS'es, it's only something I planned for future happy hacking sessions. But you can see I have updated the list for Alpine on Wednesday in my ticket: https://trac.chevah.com/ticket/4773. When done with this, I can do the same for Arch Linux. If we still support it by then, that is. :-]
As this doesn't appear in my needs_merge list on Trac:
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,106,2018-06-06T14:50:31Z,2018-06-08T08:53:03Z,2018-07-03T14:25:52Z,MERGED,True,52,31,2,https://github.com/dumol,[#4833] Build libffi only when needed.,7,['needs-merge'],https://github.com/chevah/python-package/pull/106,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/106#issuecomment-395695603,"Scope
Our bundled libffi is used twice:

by Python if using --with-system-ffi (on AIX and HP-UX)
by CFFI (on all platforms where we use pip/cffi/cryptography).

Stop building libffi unnecessarily on OS'es which bundle and support it. Linking to OS-provided libffi means one less liability from a security point of view.
Changes
Build CFFI against OS libs where this is possible (everywhere but AIX and HP-UX).
But not on the BSDs, where libffi is not included in the base system and has to be installed as a package.
Systems not building CFFI are not affected (currently Windows and Solaris 10).
Systems not tested, but for which I deduced required deps: Solaris 11 SPARC 64bit (as we force 32bit builds) and Raspbian 7.
Drive-by fixes:

lower MACOSX_DEPLOYMENT_TARGET to 10.11 in preparation for dropping support for OS X 10.8 - 10.10
cosmetic changes for how we document and check for needed packages on some Linux distros.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","but better to keep things on the safe side.

ok. you are our only customer/stakeholder for openbsd/freebsd so I will go with your suggestions :)",True,{}
chevah/python-package,https://github.com/chevah/python-package,107,2018-06-15T11:04:53Z,2018-06-21T09:56:53Z,2018-06-21T17:11:33Z,MERGED,True,15,13,5,https://github.com/dumol,[#4205] HP-UX build fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/107,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/107,"Scope
HP-UX python-package builds sometimes fail on Mosna.
Initially, this seems to be related to Mosna specifically, but further testing focused on this specific issue revealed the root cause for this to be parallel building, especially for GMP, but sometimes for Python as well.
Changes
Use gmake for GMP and Python on HP-UX. This means no parallel builds for these two components on HP-UX.
Switch back to using the regular C compiler on HP-UX, instead of the C++ compiler in C mode. This was only necessary for building GMP with more than 2 threads.
Drive-by change:

updated paver.conf with latest stuff.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests. You'll have to do 10 in a row to make sure these failures are gone.","Scope
HP-UX python-package builds sometimes fail on Mosna.
Initially, this seems to be related to Mosna specifically, but further testing focused on this specific issue revealed the root cause for this to be parallel building, especially for GMP, but sometimes for Python as well.
Changes
Use gmake for GMP and Python on HP-UX. This means no parallel builds for these two components on HP-UX.
Switch back to using the regular C compiler on HP-UX, instead of the C++ compiler in C mode. This was only necessary for building GMP with more than 2 threads.
Drive-by change:

updated paver.conf with latest stuff.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests. You'll have to do 10 in a row to make sure these failures are gone.",True,{}
chevah/python-package,https://github.com/chevah/python-package,107,2018-06-15T11:04:53Z,2018-06-21T09:56:53Z,2018-06-21T17:11:33Z,MERGED,True,15,13,5,https://github.com/dumol,[#4205] HP-UX build fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/107,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/107#issuecomment-397588370,"Scope
HP-UX python-package builds sometimes fail on Mosna.
Initially, this seems to be related to Mosna specifically, but further testing focused on this specific issue revealed the root cause for this to be parallel building, especially for GMP, but sometimes for Python as well.
Changes
Use gmake for GMP and Python on HP-UX. This means no parallel builds for these two components on HP-UX.
Switch back to using the regular C compiler on HP-UX, instead of the C++ compiler in C mode. This was only necessary for building GMP with more than 2 threads.
Drive-by change:

updated paver.conf with latest stuff.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests. You'll have to do 10 in a row to make sure these failures are gone.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,107,2018-06-15T11:04:53Z,2018-06-21T09:56:53Z,2018-06-21T17:11:33Z,MERGED,True,15,13,5,https://github.com/dumol,[#4205] HP-UX build fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/107,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/107#issuecomment-399046035,"Scope
HP-UX python-package builds sometimes fail on Mosna.
Initially, this seems to be related to Mosna specifically, but further testing focused on this specific issue revealed the root cause for this to be parallel building, especially for GMP, but sometimes for Python as well.
Changes
Use gmake for GMP and Python on HP-UX. This means no parallel builds for these two components on HP-UX.
Switch back to using the regular C compiler on HP-UX, instead of the C++ compiler in C mode. This was only necessary for building GMP with more than 2 threads.
Drive-by change:

updated paver.conf with latest stuff.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests. You'll have to do 10 in a row to make sure these failures are gone.","Thanks for the review!
An interesting related observation is that we use 32 builds for all Unices, except Solaris 10 x64. But only in HP-UX we use a 64 suffix for 32bit builds (meaning ia64 here for Itanium).",True,{}
chevah/python-package,https://github.com/chevah/python-package,107,2018-06-15T11:04:53Z,2018-06-21T09:56:53Z,2018-06-21T17:11:33Z,MERGED,True,15,13,5,https://github.com/dumol,[#4205] HP-UX build fixes.,2,['needs-merge'],https://github.com/chevah/python-package/pull/107,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/107#issuecomment-399177322,"Scope
HP-UX python-package builds sometimes fail on Mosna.
Initially, this seems to be related to Mosna specifically, but further testing focused on this specific issue revealed the root cause for this to be parallel building, especially for GMP, but sometimes for Python as well.
Changes
Use gmake for GMP and Python on HP-UX. This means no parallel builds for these two components on HP-UX.
Switch back to using the regular C compiler on HP-UX, instead of the C++ compiler in C mode. This was only necessary for building GMP with more than 2 threads.
Drive-by change:

updated paver.conf with latest stuff.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests. You'll have to do 10 in a row to make sure these failures are gone.",Well... we can't use ia32 as that is x86 :),True,{}
chevah/python-package,https://github.com/chevah/python-package,108,2018-07-03T13:12:35Z,2020-05-19T10:24:14Z,2020-05-19T10:24:15Z,CLOSED,False,34331,4955,246,https://github.com/dumol,[#4970] PyCrypto update from master.,10,[],https://github.com/chevah/python-package/pull/108,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/108,"Scope
Ditto, to fix â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459, as per â€‹pycrypto/pycrypto#176 and other issues fixed since latest stable release.
Prior discussions on this at https://trac.chevah.com/ticket/4788.
Changes
Uses latest pycrypto sources from master.
Fixed a minor build issue on Solaris.
Fixed build issue on macOS / OpenBSD / FreeBSD 11 with Clang 4.x using a backport fix for libtom 17.0 from Homebrew/homebrew-core#3922.
Drive-by fixes:

only set specific CFLAG for libedit on Solaris when building libedit
fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries
don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream.

How to try and test the changes
reviewers: WIP","Scope
Ditto, to fix â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459, as per â€‹pycrypto/pycrypto#176 and other issues fixed since latest stable release.
Prior discussions on this at https://trac.chevah.com/ticket/4788.
Changes
Uses latest pycrypto sources from master.
Fixed a minor build issue on Solaris.
Fixed build issue on macOS / OpenBSD / FreeBSD 11 with Clang 4.x using a backport fix for libtom 17.0 from Homebrew/homebrew-core#3922.
Drive-by fixes:

only set specific CFLAG for libedit on Solaris when building libedit
fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries
don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream.

How to try and test the changes
reviewers: WIP",True,{}
chevah/python-package,https://github.com/chevah/python-package,108,2018-07-03T13:12:35Z,2020-05-19T10:24:14Z,2020-05-19T10:24:15Z,CLOSED,False,34331,4955,246,https://github.com/dumol,[#4970] PyCrypto update from master.,10,[],https://github.com/chevah/python-package/pull/108,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/108#issuecomment-630729897,"Scope
Ditto, to fix â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459, as per â€‹pycrypto/pycrypto#176 and other issues fixed since latest stable release.
Prior discussions on this at https://trac.chevah.com/ticket/4788.
Changes
Uses latest pycrypto sources from master.
Fixed a minor build issue on Solaris.
Fixed build issue on macOS / OpenBSD / FreeBSD 11 with Clang 4.x using a backport fix for libtom 17.0 from Homebrew/homebrew-core#3922.
Drive-by fixes:

only set specific CFLAG for libedit on Solaris when building libedit
fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries
don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream.

How to try and test the changes
reviewers: WIP",No longer relevant.,True,{}
chevah/python-package,https://github.com/chevah/python-package,108,2018-07-03T13:12:35Z,2020-05-19T10:24:14Z,2020-05-19T10:24:15Z,CLOSED,False,34331,4955,246,https://github.com/dumol,[#4970] PyCrypto update from master.,10,[],https://github.com/chevah/python-package/pull/108,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/108#issuecomment-630730300,"Scope
Ditto, to fix â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459, as per â€‹pycrypto/pycrypto#176 and other issues fixed since latest stable release.
Prior discussions on this at https://trac.chevah.com/ticket/4788.
Changes
Uses latest pycrypto sources from master.
Fixed a minor build issue on Solaris.
Fixed build issue on macOS / OpenBSD / FreeBSD 11 with Clang 4.x using a backport fix for libtom 17.0 from Homebrew/homebrew-core#3922.
Drive-by fixes:

only set specific CFLAG for libedit on Solaris when building libedit
fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries
don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream.

How to try and test the changes
reviewers: WIP",No longer relevant.,True,{}
chevah/python-package,https://github.com/chevah/python-package,109,2018-07-04T14:39:58Z,2018-07-11T09:52:31Z,2018-07-11T09:52:39Z,MERGED,True,46,22,1,https://github.com/dumol,"[#4773] Package verification for all Linux distros, check essential commands everywhere else.",11,['needs-merge'],https://github.com/chevah/python-package/pull/109,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/109,"Scope
Following the work in Trac ticket #4712, we don't install/uninstall packages anymore when building Python, but we check for required packages on some of the systems.
We could add Alpine to that list of systems.
Changes
Check required packages in Alpine with apk (and in Arch Linux with pacman while at it).
Check that essential commands are present on OS'es where we don't check for installed packages: Windows, the Unices, OSX/macOS, the BSDs and generic Linux.
Drive-by changes:

also check for git and patch everywhere as they are actually required
fixed a bug that prevented package verification on SLES 11 in last revisions
various related minor fixes: comments, outputs, code syntax.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests for all OS'es, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/16.
Add a common fake required package and/or command and check that the build is not started.","Scope
Following the work in Trac ticket #4712, we don't install/uninstall packages anymore when building Python, but we check for required packages on some of the systems.
We could add Alpine to that list of systems.
Changes
Check required packages in Alpine with apk (and in Arch Linux with pacman while at it).
Check that essential commands are present on OS'es where we don't check for installed packages: Windows, the Unices, OSX/macOS, the BSDs and generic Linux.
Drive-by changes:

also check for git and patch everywhere as they are actually required
fixed a bug that prevented package verification on SLES 11 in last revisions
various related minor fixes: comments, outputs, code syntax.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests for all OS'es, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/16.
Add a common fake required package and/or command and check that the build is not started.",True,{}
chevah/python-package,https://github.com/chevah/python-package,109,2018-07-04T14:39:58Z,2018-07-11T09:52:31Z,2018-07-11T09:52:39Z,MERGED,True,46,22,1,https://github.com/dumol,"[#4773] Package verification for all Linux distros, check essential commands everywhere else.",11,['needs-merge'],https://github.com/chevah/python-package/pull/109,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/109#issuecomment-402500964,"Scope
Following the work in Trac ticket #4712, we don't install/uninstall packages anymore when building Python, but we check for required packages on some of the systems.
We could add Alpine to that list of systems.
Changes
Check required packages in Alpine with apk (and in Arch Linux with pacman while at it).
Check that essential commands are present on OS'es where we don't check for installed packages: Windows, the Unices, OSX/macOS, the BSDs and generic Linux.
Drive-by changes:

also check for git and patch everywhere as they are actually required
fixed a bug that prevented package verification on SLES 11 in last revisions
various related minor fixes: comments, outputs, code syntax.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests for all OS'es, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/16.
Add a common fake required package and/or command and check that the build is not started.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,109,2018-07-04T14:39:58Z,2018-07-11T09:52:31Z,2018-07-11T09:52:39Z,MERGED,True,46,22,1,https://github.com/dumol,"[#4773] Package verification for all Linux distros, check essential commands everywhere else.",11,['needs-merge'],https://github.com/chevah/python-package/pull/109,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/109#issuecomment-404097280,"Scope
Following the work in Trac ticket #4712, we don't install/uninstall packages anymore when building Python, but we check for required packages on some of the systems.
We could add Alpine to that list of systems.
Changes
Check required packages in Alpine with apk (and in Arch Linux with pacman while at it).
Check that essential commands are present on OS'es where we don't check for installed packages: Windows, the Unices, OSX/macOS, the BSDs and generic Linux.
Drive-by changes:

also check for git and patch everywhere as they are actually required
fixed a bug that prevented package verification on SLES 11 in last revisions
various related minor fixes: comments, outputs, code syntax.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests for all OS'es, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/16.
Add a common fake required package and/or command and check that the build is not started.","@adiroiban, maybe you lost track of this? I would like to merge this in master if changes are fine by you. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,109,2018-07-04T14:39:58Z,2018-07-11T09:52:31Z,2018-07-11T09:52:39Z,MERGED,True,46,22,1,https://github.com/dumol,"[#4773] Package verification for all Linux distros, check essential commands everywhere else.",11,['needs-merge'],https://github.com/chevah/python-package/pull/109,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/109#issuecomment-404111645,"Scope
Following the work in Trac ticket #4712, we don't install/uninstall packages anymore when building Python, but we check for required packages on some of the systems.
We could add Alpine to that list of systems.
Changes
Check required packages in Alpine with apk (and in Arch Linux with pacman while at it).
Check that essential commands are present on OS'es where we don't check for installed packages: Windows, the Unices, OSX/macOS, the BSDs and generic Linux.
Drive-by changes:

also check for git and patch everywhere as they are actually required
fixed a bug that prevented package verification on SLES 11 in last revisions
various related minor fixes: comments, outputs, code syntax.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests for all OS'es, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/16.
Add a common fake required package and/or command and check that the build is not started.","Thanks!
command -v is something from POSIX, mandatory since the 2008 revision, it seems. But that is not relevant here, as we use Bash anyway.",True,{}
chevah/python-package,https://github.com/chevah/python-package,110,2018-07-12T10:44:20Z,2018-07-26T07:33:54Z,2018-09-03T07:28:38Z,MERGED,True,507226,74791,1283,https://github.com/dumol,[#4985] PyCryptodome instead of PyCrypto.,32,['needs-merge'],https://github.com/chevah/python-package/pull/110,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/110,"Scope
To fix â€‹â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459 and other known and unknown vulnerabilities from pycrypto, which has been unmaintained for several years now. Prior discussions on this in Trac ticket #4788.
There is also #108  for updating pycrypto from master, but knowing pycryptodome is (almost) a drop-in replacement, this might be easier. And it's definitely the better option.
Changes
As this is not quite a drop-in replacement, it's not feasible to use pycrypto and pycryptodome side by side, so all traces of pycrypto have been removed and pycryptodome was fixed to build on all supported platforms, with help from upstream. The fixes have been incorporated in a new stable version : 3.6.4.
An extensive test suite from upstream is run an all platforms, except HP-UX, for now. This requires quite some RAM, so slaves building this have been given at least 1GB of RAM, but typically 1.5GB. It also increases build times considerably, especially on Unices, because their proprietary compilers have no support for 128bit integers. Build times for SPARC have doubled!
There are currently minor issues with PyCryptodome's builds on RHEL 6 and SLES 11 (with or without the Security Module). Working with upstream on fixing these issues one by one. For now we use the upstream wheel on these platforms for the current version. The way we do it should make it painfully obvious when upgrading the generic version (defined at the beginning of chevah_build), to avoid these platforms being left behind when incrementing the generic version.
There are major issues on HP-UX with running the PyCryptodome tests (segmentation faults), but they seem caused by libffi/cffi. Could be related with the HP-UX crashes we get lately. To be investigated and hopefully fixed in another ticket.
Drive-by changes:

Only set specific CFLAGS for libedit on Solaris when building libedit.
Fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries.
Don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream. In OS X, OpenSSL 0.9.8 is only used for the standard ssl module now. However, stop using that wheel on MacOS, where we want OpenSSL updates through Homebrew.
Use the upstream Linux generic cryptography 2.2.2 wheel on SLES 11 as well, but only on SLES 11, as we don't want cryptography's baked-in OpenSSL to override the locally installed OpenSSL on other Linux distros, not even on SLES 11 SM.
Always use pip to get PyCryptodome, for more flexibility in using wheels on some Linux platforms (see above comments on RHEL 6, SLES 11 and SLES 11 SM).

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build, python-modules/chevah-python-test/test_python_binary_dist.py  and src/libffi/chevahbs.
Run the automated tests.
Start migrating to pycryptodome? This seems to be the definitive guide: http://pycryptodome.readthedocs.io/en/latest/src/vs_pycrypto.html","Scope
To fix â€‹â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459 and other known and unknown vulnerabilities from pycrypto, which has been unmaintained for several years now. Prior discussions on this in Trac ticket #4788.
There is also #108  for updating pycrypto from master, but knowing pycryptodome is (almost) a drop-in replacement, this might be easier. And it's definitely the better option.
Changes
As this is not quite a drop-in replacement, it's not feasible to use pycrypto and pycryptodome side by side, so all traces of pycrypto have been removed and pycryptodome was fixed to build on all supported platforms, with help from upstream. The fixes have been incorporated in a new stable version : 3.6.4.
An extensive test suite from upstream is run an all platforms, except HP-UX, for now. This requires quite some RAM, so slaves building this have been given at least 1GB of RAM, but typically 1.5GB. It also increases build times considerably, especially on Unices, because their proprietary compilers have no support for 128bit integers. Build times for SPARC have doubled!
There are currently minor issues with PyCryptodome's builds on RHEL 6 and SLES 11 (with or without the Security Module). Working with upstream on fixing these issues one by one. For now we use the upstream wheel on these platforms for the current version. The way we do it should make it painfully obvious when upgrading the generic version (defined at the beginning of chevah_build), to avoid these platforms being left behind when incrementing the generic version.
There are major issues on HP-UX with running the PyCryptodome tests (segmentation faults), but they seem caused by libffi/cffi. Could be related with the HP-UX crashes we get lately. To be investigated and hopefully fixed in another ticket.
Drive-by changes:

Only set specific CFLAGS for libedit on Solaris when building libedit.
Fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries.
Don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream. In OS X, OpenSSL 0.9.8 is only used for the standard ssl module now. However, stop using that wheel on MacOS, where we want OpenSSL updates through Homebrew.
Use the upstream Linux generic cryptography 2.2.2 wheel on SLES 11 as well, but only on SLES 11, as we don't want cryptography's baked-in OpenSSL to override the locally installed OpenSSL on other Linux distros, not even on SLES 11 SM.
Always use pip to get PyCryptodome, for more flexibility in using wheels on some Linux platforms (see above comments on RHEL 6, SLES 11 and SLES 11 SM).

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build, python-modules/chevah-python-test/test_python_binary_dist.py  and src/libffi/chevahbs.
Run the automated tests.
Start migrating to pycryptodome? This seems to be the definitive guide: http://pycryptodome.readthedocs.io/en/latest/src/vs_pycrypto.html",True,{}
chevah/python-package,https://github.com/chevah/python-package,110,2018-07-12T10:44:20Z,2018-07-26T07:33:54Z,2018-09-03T07:28:38Z,MERGED,True,507226,74791,1283,https://github.com/dumol,[#4985] PyCryptodome instead of PyCrypto.,32,['needs-merge'],https://github.com/chevah/python-package/pull/110,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/110#issuecomment-404822608,"Scope
To fix â€‹â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459 and other known and unknown vulnerabilities from pycrypto, which has been unmaintained for several years now. Prior discussions on this in Trac ticket #4788.
There is also #108  for updating pycrypto from master, but knowing pycryptodome is (almost) a drop-in replacement, this might be easier. And it's definitely the better option.
Changes
As this is not quite a drop-in replacement, it's not feasible to use pycrypto and pycryptodome side by side, so all traces of pycrypto have been removed and pycryptodome was fixed to build on all supported platforms, with help from upstream. The fixes have been incorporated in a new stable version : 3.6.4.
An extensive test suite from upstream is run an all platforms, except HP-UX, for now. This requires quite some RAM, so slaves building this have been given at least 1GB of RAM, but typically 1.5GB. It also increases build times considerably, especially on Unices, because their proprietary compilers have no support for 128bit integers. Build times for SPARC have doubled!
There are currently minor issues with PyCryptodome's builds on RHEL 6 and SLES 11 (with or without the Security Module). Working with upstream on fixing these issues one by one. For now we use the upstream wheel on these platforms for the current version. The way we do it should make it painfully obvious when upgrading the generic version (defined at the beginning of chevah_build), to avoid these platforms being left behind when incrementing the generic version.
There are major issues on HP-UX with running the PyCryptodome tests (segmentation faults), but they seem caused by libffi/cffi. Could be related with the HP-UX crashes we get lately. To be investigated and hopefully fixed in another ticket.
Drive-by changes:

Only set specific CFLAGS for libedit on Solaris when building libedit.
Fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries.
Don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream. In OS X, OpenSSL 0.9.8 is only used for the standard ssl module now. However, stop using that wheel on MacOS, where we want OpenSSL updates through Homebrew.
Use the upstream Linux generic cryptography 2.2.2 wheel on SLES 11 as well, but only on SLES 11, as we don't want cryptography's baked-in OpenSSL to override the locally installed OpenSSL on other Linux distros, not even on SLES 11 SM.
Always use pip to get PyCryptodome, for more flexibility in using wheels on some Linux platforms (see above comments on RHEL 6, SLES 11 and SLES 11 SM).

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build, python-modules/chevah-python-test/test_python_binary_dist.py  and src/libffi/chevahbs.
Run the automated tests.
Start migrating to pycryptodome? This seems to be the definitive guide: http://pycryptodome.readthedocs.io/en/latest/src/vs_pycrypto.html",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,110,2018-07-12T10:44:20Z,2018-07-26T07:33:54Z,2018-09-03T07:28:38Z,MERGED,True,507226,74791,1283,https://github.com/dumol,[#4985] PyCryptodome instead of PyCrypto.,32,['needs-merge'],https://github.com/chevah/python-package/pull/110,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/110#issuecomment-405669741,"Scope
To fix â€‹â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459 and other known and unknown vulnerabilities from pycrypto, which has been unmaintained for several years now. Prior discussions on this in Trac ticket #4788.
There is also #108  for updating pycrypto from master, but knowing pycryptodome is (almost) a drop-in replacement, this might be easier. And it's definitely the better option.
Changes
As this is not quite a drop-in replacement, it's not feasible to use pycrypto and pycryptodome side by side, so all traces of pycrypto have been removed and pycryptodome was fixed to build on all supported platforms, with help from upstream. The fixes have been incorporated in a new stable version : 3.6.4.
An extensive test suite from upstream is run an all platforms, except HP-UX, for now. This requires quite some RAM, so slaves building this have been given at least 1GB of RAM, but typically 1.5GB. It also increases build times considerably, especially on Unices, because their proprietary compilers have no support for 128bit integers. Build times for SPARC have doubled!
There are currently minor issues with PyCryptodome's builds on RHEL 6 and SLES 11 (with or without the Security Module). Working with upstream on fixing these issues one by one. For now we use the upstream wheel on these platforms for the current version. The way we do it should make it painfully obvious when upgrading the generic version (defined at the beginning of chevah_build), to avoid these platforms being left behind when incrementing the generic version.
There are major issues on HP-UX with running the PyCryptodome tests (segmentation faults), but they seem caused by libffi/cffi. Could be related with the HP-UX crashes we get lately. To be investigated and hopefully fixed in another ticket.
Drive-by changes:

Only set specific CFLAGS for libedit on Solaris when building libedit.
Fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries.
Don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream. In OS X, OpenSSL 0.9.8 is only used for the standard ssl module now. However, stop using that wheel on MacOS, where we want OpenSSL updates through Homebrew.
Use the upstream Linux generic cryptography 2.2.2 wheel on SLES 11 as well, but only on SLES 11, as we don't want cryptography's baked-in OpenSSL to override the locally installed OpenSSL on other Linux distros, not even on SLES 11 SM.
Always use pip to get PyCryptodome, for more flexibility in using wheels on some Linux platforms (see above comments on RHEL 6, SLES 11 and SLES 11 SM).

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build, python-modules/chevah-python-test/test_python_binary_dist.py  and src/libffi/chevahbs.
Run the automated tests.
Start migrating to pycryptodome? This seems to be the definitive guide: http://pycryptodome.readthedocs.io/en/latest/src/vs_pycrypto.html","I have pushed the .gitattributes, but GitHub is ignoring the .gitattributes file.
So other than having a nicer list with $ git diff --stat master... | grep -v Bin there is not much use for .gitattributes
As noted here https://stackoverflow.com/questions/7607739/gitattributes-not-making-a-difference-trying-to-skip-files-when-using-git-diff git difftool is also ignoring .gitattributes",True,{}
chevah/python-package,https://github.com/chevah/python-package,110,2018-07-12T10:44:20Z,2018-07-26T07:33:54Z,2018-09-03T07:28:38Z,MERGED,True,507226,74791,1283,https://github.com/dumol,[#4985] PyCryptodome instead of PyCrypto.,32,['needs-merge'],https://github.com/chevah/python-package/pull/110,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/110#issuecomment-405845907,"Scope
To fix â€‹â€‹https://nvd.nist.gov/vuln/detail/CVE-2013-7459 and other known and unknown vulnerabilities from pycrypto, which has been unmaintained for several years now. Prior discussions on this in Trac ticket #4788.
There is also #108  for updating pycrypto from master, but knowing pycryptodome is (almost) a drop-in replacement, this might be easier. And it's definitely the better option.
Changes
As this is not quite a drop-in replacement, it's not feasible to use pycrypto and pycryptodome side by side, so all traces of pycrypto have been removed and pycryptodome was fixed to build on all supported platforms, with help from upstream. The fixes have been incorporated in a new stable version : 3.6.4.
An extensive test suite from upstream is run an all platforms, except HP-UX, for now. This requires quite some RAM, so slaves building this have been given at least 1GB of RAM, but typically 1.5GB. It also increases build times considerably, especially on Unices, because their proprietary compilers have no support for 128bit integers. Build times for SPARC have doubled!
There are currently minor issues with PyCryptodome's builds on RHEL 6 and SLES 11 (with or without the Security Module). Working with upstream on fixing these issues one by one. For now we use the upstream wheel on these platforms for the current version. The way we do it should make it painfully obvious when upgrading the generic version (defined at the beginning of chevah_build), to avoid these platforms being left behind when incrementing the generic version.
There are major issues on HP-UX with running the PyCryptodome tests (segmentation faults), but they seem caused by libffi/cffi. Could be related with the HP-UX crashes we get lately. To be investigated and hopefully fixed in another ticket.
Drive-by changes:

Only set specific CFLAGS for libedit on Solaris when building libedit.
Fix deps test on Ubuntu 18.04 to account for latest ldd's output on statically linked binaries.
Don't bother building old cryptography 1.8.2 on OS X, we have a working 2.2.2 wheel from upstream. In OS X, OpenSSL 0.9.8 is only used for the standard ssl module now. However, stop using that wheel on MacOS, where we want OpenSSL updates through Homebrew.
Use the upstream Linux generic cryptography 2.2.2 wheel on SLES 11 as well, but only on SLES 11, as we don't want cryptography's baked-in OpenSSL to override the locally installed OpenSSL on other Linux distros, not even on SLES 11 SM.
Always use pip to get PyCryptodome, for more flexibility in using wheels on some Linux platforms (see above comments on RHEL 6, SLES 11 and SLES 11 SM).

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build, python-modules/chevah-python-test/test_python_binary_dist.py  and src/libffi/chevahbs.
Run the automated tests.
Start migrating to pycryptodome? This seems to be the definitive guide: http://pycryptodome.readthedocs.io/en/latest/src/vs_pycrypto.html","I prefer to have the hpux fix in a separate PR.

I'm working on HP-UX in another branch, derived from this: 5017-hpux-cffi-crash. Using the latest libffi RC on HP-UX I see as a non-issue, because HP-UX is broken in master.

Also, I think that we can leave rhel5/6 and sles 11 for a separate PR.

Do you care to elaborate? PyCryptodome's maintainer has just started his summer vacation and won't come back for 6 weeks. Even then, there's no guarantee he will solve these problems with priority. The issue on RHEL 6, for example, does not replicate with the distro's Python.

As a start I want to have an ubuntu 16.04 with pycryptodome so that I can work on parting chevah-keycert

I don't like goal posts moving all the time. First, PyCryptodome is not good, it's not fully compatible. Then maybe it's good, give it a try. No, it's no good for us particularly, work on PyCrypto master. But if you get it working on all platforms, then it will be good to adapt the code. No, no, don't work on all platforms, HP-UX bug fixing is a waste of time. OK, you got it working on anything but HP-UX? No, I just want it on Ubuntu 16.04 and don't care about the rest, for now.
It is quite discouraging.


So, to make baby steps which are easier to integrate I would like to have here all platfroms that don't required special handling of


pycryptodome==${PYCRYPTODOME_VERSION}upstream


and this should be targeted to pycryptodome so cryptography changes should be left for a separate pr


cryptography==${CRYPTOGRAPHY_VERSION}upstream

What is the issue with this little hack? It solves problems for which we have no alternate solutions. If you are opposing the versioning, let's fix that. I am not keen to step back from this work for no reason other than a naming issue.
Also, drive-by fixes are an issue now? It's a related fix that brings latest cryptography on both OS X and SLES 11.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,111,2018-07-16T10:01:51Z,2020-05-19T10:24:27Z,2020-05-19T10:24:27Z,CLOSED,False,2,13,1,https://github.com/dumol,[#5017] HP-UX CFFI crash.,38,[],https://github.com/chevah/python-package/pull/111,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/111,"Scope
When running pycryptodome's self tests on HP-UX, we get a segmentation fault:
##### Executing tests for included Python modules... #####
Testing PyCryptodome...
./functions.sh: line 121: 11980 Segmentation fault      (core dumped) ""$@""
PWD : /srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux-dev/build/build
Fail: ./python2.7-hpux1131-ia64/bin/python -m Crypto.SelfTest
program finished with exit code 1

A bit of debugging suggests a problem with cffi (or maybe libffi).
CFFI dev investigated on our hardware and found libffi broken on HP-UX Itanium.
Changes
Stop using CFFI / cryptography on HP-UX and revert to OpenSSL 0.13.x, as for Solaris 10.
Stop building libffi on HP-UX and make sure cffi modules is missing to force PyCryptodome to use ctypes.
How to try and test the changes
reviewers: WIP","Scope
When running pycryptodome's self tests on HP-UX, we get a segmentation fault:
##### Executing tests for included Python modules... #####
Testing PyCryptodome...
./functions.sh: line 121: 11980 Segmentation fault      (core dumped) ""$@""
PWD : /srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux-dev/build/build
Fail: ./python2.7-hpux1131-ia64/bin/python -m Crypto.SelfTest
program finished with exit code 1

A bit of debugging suggests a problem with cffi (or maybe libffi).
CFFI dev investigated on our hardware and found libffi broken on HP-UX Itanium.
Changes
Stop using CFFI / cryptography on HP-UX and revert to OpenSSL 0.13.x, as for Solaris 10.
Stop building libffi on HP-UX and make sure cffi modules is missing to force PyCryptodome to use ctypes.
How to try and test the changes
reviewers: WIP",True,{}
chevah/python-package,https://github.com/chevah/python-package,111,2018-07-16T10:01:51Z,2020-05-19T10:24:27Z,2020-05-19T10:24:27Z,CLOSED,False,2,13,1,https://github.com/dumol,[#5017] HP-UX CFFI crash.,38,[],https://github.com/chevah/python-package/pull/111,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/111#issuecomment-630730053,"Scope
When running pycryptodome's self tests on HP-UX, we get a segmentation fault:
##### Executing tests for included Python modules... #####
Testing PyCryptodome...
./functions.sh: line 121: 11980 Segmentation fault      (core dumped) ""$@""
PWD : /srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux-dev/build/build
Fail: ./python2.7-hpux1131-ia64/bin/python -m Crypto.SelfTest
program finished with exit code 1

A bit of debugging suggests a problem with cffi (or maybe libffi).
CFFI dev investigated on our hardware and found libffi broken on HP-UX Itanium.
Changes
Stop using CFFI / cryptography on HP-UX and revert to OpenSSL 0.13.x, as for Solaris 10.
Stop building libffi on HP-UX and make sure cffi modules is missing to force PyCryptodome to use ctypes.
How to try and test the changes
reviewers: WIP",No longer relevant.,True,{}
chevah/python-package,https://github.com/chevah/python-package,111,2018-07-16T10:01:51Z,2020-05-19T10:24:27Z,2020-05-19T10:24:27Z,CLOSED,False,2,13,1,https://github.com/dumol,[#5017] HP-UX CFFI crash.,38,[],https://github.com/chevah/python-package/pull/111,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/111#issuecomment-630730384,"Scope
When running pycryptodome's self tests on HP-UX, we get a segmentation fault:
##### Executing tests for included Python modules... #####
Testing PyCryptodome...
./functions.sh: line 121: 11980 Segmentation fault      (core dumped) ""$@""
PWD : /srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux-dev/build/build
Fail: ./python2.7-hpux1131-ia64/bin/python -m Crypto.SelfTest
program finished with exit code 1

A bit of debugging suggests a problem with cffi (or maybe libffi).
CFFI dev investigated on our hardware and found libffi broken on HP-UX Itanium.
Changes
Stop using CFFI / cryptography on HP-UX and revert to OpenSSL 0.13.x, as for Solaris 10.
Stop building libffi on HP-UX and make sure cffi modules is missing to force PyCryptodome to use ctypes.
How to try and test the changes
reviewers: WIP",No longer relevant.,True,{}
chevah/python-package,https://github.com/chevah/python-package,112,2018-07-24T11:27:25Z,2018-07-25T08:00:33Z,2018-07-25T08:00:40Z,MERGED,True,20598,18,56,https://github.com/dumol,"[#5026] Unbreak HP-UX by not using CFFI / cryptography. Use cryptography wheel on SLES 11 / OS X, but not on macOS.",4,['needs-merge'],https://github.com/chevah/python-package/pull/112,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/112,"Scope
Currently, in python-package we use latest cryptography in HP-UX (with a small patch).
But server tests crash with it, and consequently we use an older packaget for HP-UX with many security updates missing.
Changes
Stop building CFFI/cryptography on HP-UX and revert to pyOpenSSL 0.13.x, as with Solaris 10.
GMPY 1.x sources were imported, to be built separately in HP-UX, where there are issues with GMPY 2.x, and we can't use the wheel any more.
All of the work has been done in the 5017-hpux-cffi-crash branch. Here I have just cherry-picked commits and changes from that branch and its parent, 4985-pycryptodome-instead-of-pycrypto.
Drive-by fixes (also cherry-picked from the latter branch above, have passed review in #110):

Stop using upstream cryptography wheel on macOS, where we want it linked to Homebrew's OpenSSL libs.
Use latest cryptography on SLES 11, OS X 10.8 (and possibly RHEL 5) through upstream wheels, that come with OpenSSL 1.1.0h. stdlib ssl is still linked to local 0.9.8, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/44/steps/test/logs/stdio

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py. Or altenatively the last two commits.
Run automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/28
Test server in HP-UX with a testing package from this branch, eg. https://chevah.com/buildbot/builders/server-hpux/builds/66","Scope
Currently, in python-package we use latest cryptography in HP-UX (with a small patch).
But server tests crash with it, and consequently we use an older packaget for HP-UX with many security updates missing.
Changes
Stop building CFFI/cryptography on HP-UX and revert to pyOpenSSL 0.13.x, as with Solaris 10.
GMPY 1.x sources were imported, to be built separately in HP-UX, where there are issues with GMPY 2.x, and we can't use the wheel any more.
All of the work has been done in the 5017-hpux-cffi-crash branch. Here I have just cherry-picked commits and changes from that branch and its parent, 4985-pycryptodome-instead-of-pycrypto.
Drive-by fixes (also cherry-picked from the latter branch above, have passed review in #110):

Stop using upstream cryptography wheel on macOS, where we want it linked to Homebrew's OpenSSL libs.
Use latest cryptography on SLES 11, OS X 10.8 (and possibly RHEL 5) through upstream wheels, that come with OpenSSL 1.1.0h. stdlib ssl is still linked to local 0.9.8, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/44/steps/test/logs/stdio

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py. Or altenatively the last two commits.
Run automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/28
Test server in HP-UX with a testing package from this branch, eg. https://chevah.com/buildbot/builders/server-hpux/builds/66",True,{}
chevah/python-package,https://github.com/chevah/python-package,112,2018-07-24T11:27:25Z,2018-07-25T08:00:33Z,2018-07-25T08:00:40Z,MERGED,True,20598,18,56,https://github.com/dumol,"[#5026] Unbreak HP-UX by not using CFFI / cryptography. Use cryptography wheel on SLES 11 / OS X, but not on macOS.",4,['needs-merge'],https://github.com/chevah/python-package/pull/112,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/112#issuecomment-407391229,"Scope
Currently, in python-package we use latest cryptography in HP-UX (with a small patch).
But server tests crash with it, and consequently we use an older packaget for HP-UX with many security updates missing.
Changes
Stop building CFFI/cryptography on HP-UX and revert to pyOpenSSL 0.13.x, as with Solaris 10.
GMPY 1.x sources were imported, to be built separately in HP-UX, where there are issues with GMPY 2.x, and we can't use the wheel any more.
All of the work has been done in the 5017-hpux-cffi-crash branch. Here I have just cherry-picked commits and changes from that branch and its parent, 4985-pycryptodome-instead-of-pycrypto.
Drive-by fixes (also cherry-picked from the latter branch above, have passed review in #110):

Stop using upstream cryptography wheel on macOS, where we want it linked to Homebrew's OpenSSL libs.
Use latest cryptography on SLES 11, OS X 10.8 (and possibly RHEL 5) through upstream wheels, that come with OpenSSL 1.1.0h. stdlib ssl is still linked to local 0.9.8, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/44/steps/test/logs/stdio

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py. Or altenatively the last two commits.
Run automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/28
Test server in HP-UX with a testing package from this branch, eg. https://chevah.com/buildbot/builders/server-hpux/builds/66","As this is possibly the last PR before switching to pycryptodome, it might be worth considering updating PyCrypto from master where possible, by integrating the unfinished changes in #108.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,112,2018-07-24T11:27:25Z,2018-07-25T08:00:33Z,2018-07-25T08:00:40Z,MERGED,True,20598,18,56,https://github.com/dumol,"[#5026] Unbreak HP-UX by not using CFFI / cryptography. Use cryptography wheel on SLES 11 / OS X, but not on macOS.",4,['needs-merge'],https://github.com/chevah/python-package/pull/112,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/112#issuecomment-407466762,"Scope
Currently, in python-package we use latest cryptography in HP-UX (with a small patch).
But server tests crash with it, and consequently we use an older packaget for HP-UX with many security updates missing.
Changes
Stop building CFFI/cryptography on HP-UX and revert to pyOpenSSL 0.13.x, as with Solaris 10.
GMPY 1.x sources were imported, to be built separately in HP-UX, where there are issues with GMPY 2.x, and we can't use the wheel any more.
All of the work has been done in the 5017-hpux-cffi-crash branch. Here I have just cherry-picked commits and changes from that branch and its parent, 4985-pycryptodome-instead-of-pycrypto.
Drive-by fixes (also cherry-picked from the latter branch above, have passed review in #110):

Stop using upstream cryptography wheel on macOS, where we want it linked to Homebrew's OpenSSL libs.
Use latest cryptography on SLES 11, OS X 10.8 (and possibly RHEL 5) through upstream wheels, that come with OpenSSL 1.1.0h. stdlib ssl is still linked to local 0.9.8, eg. https://chevah.com/buildbot/builders/python-package-sles-11/builds/44/steps/test/logs/stdio

How to try and test the changes
reviewers: @adiroiban
Please review changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py. Or altenatively the last two commits.
Run automated tests, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/28
Test server in HP-UX with a testing package from this branch, eg. https://chevah.com/buildbot/builders/server-hpux/builds/66","it might be worth considering updating PyCrypto from master where possible, by integrating the unfinished changes in #108.

I think that we can drop the work for pycrypto. pycrytodome is the future and once it builds on HPUX we should put all our effort into pycrytodome",True,{}
chevah/python-package,https://github.com/chevah/python-package,113,2018-08-16T06:49:44Z,2018-08-17T13:43:53Z,2018-08-17T13:44:00Z,MERGED,True,886,3847,564,https://github.com/dumol,[#5048] Stop using PyCryptodome wheel in RHEL 6.,2,['needs-merge'],https://github.com/chevah/python-package/pull/113,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/113,"Scope
Our issue with pycryptodome on RHEL 6 was fixed upstream. For details see â€‹Legrandin/pycryptodome#187 (comment).
A new version, 3.6.5, was released with this fix. To be tested.
High priority, to keep exchanges with upstream on the fast lane.
Changes
Updated used pycryptodome to 3.6.5.
Stop using upstream wheel in RHEL 6.
How to try and test the changes
reviewers: @adiroiban
Please double-check changes for chevah_build.sh in 200570b.
Run the automated tests.","Scope
Our issue with pycryptodome on RHEL 6 was fixed upstream. For details see â€‹Legrandin/pycryptodome#187 (comment).
A new version, 3.6.5, was released with this fix. To be tested.
High priority, to keep exchanges with upstream on the fast lane.
Changes
Updated used pycryptodome to 3.6.5.
Stop using upstream wheel in RHEL 6.
How to try and test the changes
reviewers: @adiroiban
Please double-check changes for chevah_build.sh in 200570b.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,113,2018-08-16T06:49:44Z,2018-08-17T13:43:53Z,2018-08-17T13:44:00Z,MERGED,True,886,3847,564,https://github.com/dumol,[#5048] Stop using PyCryptodome wheel in RHEL 6.,2,['needs-merge'],https://github.com/chevah/python-package/pull/113,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/113#issuecomment-413443919,"Scope
Our issue with pycryptodome on RHEL 6 was fixed upstream. For details see â€‹Legrandin/pycryptodome#187 (comment).
A new version, 3.6.5, was released with this fix. To be tested.
High priority, to keep exchanges with upstream on the fast lane.
Changes
Updated used pycryptodome to 3.6.5.
Stop using upstream wheel in RHEL 6.
How to try and test the changes
reviewers: @adiroiban
Please double-check changes for chevah_build.sh in 200570b.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/115,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/115#issuecomment-418374572,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","I can take a look and see why safety is not failing on Windows.

We don't always need/want the latest packages.
As long as there are no bugs and no security features we can work with older version.
But we can have pip list --outdated as an informational test as is always good to have the latest version.
Some packages are only used for development (ex click) and should be not present in the public product release.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/115#issuecomment-419049341,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","I can take a look and see why safety is not failing on Windows.

I suspected a shell issue, but the error code from safety when executed on Windows is 0 even when vulnerabilities are found, eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/69
So this seems like an upstream bugâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/115#issuecomment-419051940,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.",Have reported the safety issue on Windows at pyupio/safety#153. Let's see what upstream thinks about itâ€¦,True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/115#issuecomment-419418959,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/115#issuecomment-419824481,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Thanks for the review!

Not sure why scandir is not reported as vulnerable.

Why do you think scandir 0.7 was vulnerable? Have updated it as a drive-by fix. Actually wasn't intending it, but I removed scandir sources from python-modules/ after implementing PIP_LIBRARIES_NO_CFFI, as they were no longer required for building scandir, even on Solaris 10 and HP-UX. But then I realized we actually need most files in there for running the scandir tests, so I had to put them back. And at that moment I thought it would be better to put latest stable version, as the OpenBSD issue was fixed upstream.",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/115#issuecomment-419853230,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Why do you think scandir 0.7 was vulnerable?

Sorry about that. I saw that scandir was a drive-by but it did not ""clicked"" that it is safe.
All good.",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/115#issuecomment-419854262,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","On a related note, pip's report for outdated packages is not that good. I think you have to keep pip updated to have a relevant output, otherwise I think it lists what was outdated when that version of pip was released.
Eg. now it says pyOpenSSL latest version is 17.5.0, but there is a 18.0.0 version alreadyâ€¦
Scratch that, I've found out why. We shouldn't use your pypi server when we check for outdated packages. :-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/115#issuecomment-419869137,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Outdated packages checked only on our server. See above comment for details.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/115#issuecomment-419882604,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Please re-review. Thoroughly, as there were some important changes and PR's text has important additions. Some new updates are not really needed (such as the get-pip.py, pip and pypiwin32 -> pywin32 updates), so I can remove them if you think they might get in the way.
Although pypiwin32 -> pywin32 looks like it could be a security update, judging by the changelog at https://github.com/mhammond/pywin32/blob/master/CHANGES.txt (look for leak and crash until you hit Since build 218).
On a related note to PIP_LIBRARIES_NO_CFFI and building more stuff through pip, I couldn't find a switch for pip to show more output for the compilation in background. I was looking through https://pip.pypa.io/en/stable/reference/pip_install/.  Any other ideas? Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/115#issuecomment-419924270,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Some new updates are not really needed (such as the get-pip.py, pip and pypiwin32 -> pywin32 updates), so I can remove them if you think they might get in the way.

Yes. I think that get-pip.py can be removed as latest python comes with pip... I think that only on Solaris  SPARC we still need it, as the old Python version from Solaris has no pip.


Although pypiwin32 -> pywin32 looks like it could be a security update,

Yes. We should stop using pypiwin32 and just use pywin32.
For some time, the upstream dev had not time to publish binary wheels for pywin32 so someone else create pypiwin32 and uploaded the wheels.
In this we can use pywin32 without compiling it on Windows.
So pypiwin32 is obsolete and we should switch to pywin32.


On a related note to PIP_LIBRARIES_NO_CFFI and building more stuff through pip, I couldn't find a switch for pip to show more output for the compilation in background. I was looking through https://pip.pypa.io/en/stable/reference/pip_install/. Any other ideas? Thanks!

Which output is missing / What information do you want to see for pip install?
Does pip install -v PKG1 PKG2 give what you want?
Btw. I think that we should always using pip install -v to see whether a new binary was created or a cached wheel was used.
Modern pip versions are keeping a cache of all installed packages as wheels.
If a package does not has a wheel on PYPI, pip will create one and stored on the local cache and use it when needed, without recompiling.

I will look at the changes a bit later. I just wanted to answer the questions",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,12,https://github.com/chevah/python-package/pull/115#issuecomment-420194880,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Thanks for the answers and the review!

I think that only on Solaris SPARC we still need it, as the old Python version from Solaris has no pip.

To be precise, Solaris 10 on both SPARC and X64 is stuck with Python 2.7.8.

Does pip install -v PKG1 PKG2 give what you want?

The output is more verbose, for sure. But I still can't see the compilation phase for pycryptodome. Sometimes there is interesting output even when building succeeds, as it was the case for the recent issue with RHEL 6. I suppose -v is a general switch to pip, so I see it can be repeated 3 times for increased verbosity. However, neither -vvv or -v -v -v help much in this regard.
So, to be honest, I would prefer building pycryptodome from local sources, as we do it for Solaris 10 and HP-UX. What do you think?

idna, enum32, ipaddress are pulled by cryptography... not sure why we don't get the latest version for them, but as long as there is no know security we should be fine.

Because the packages are pulled from our server only?",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/adiroiban,13,https://github.com/chevah/python-package/pull/115#issuecomment-420196885,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","Because the packages are pulled from our server only?

True :) Thanks

So, to be honest, I would prefer building pycryptodome from local sources, as we do it for Solaris 10 and HP-UX. What do you think?

Sure. No problem. THanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,115,2018-09-04T13:22:30Z,2018-09-11T08:54:12Z,2018-09-11T08:54:34Z,MERGED,True,20479,54118,196,https://github.com/dumol,[#4974] Test for outdated and insecure Python modules with pip and safety.,20,['needs-review'],https://github.com/chevah/python-package/pull/115,https://github.com/dumol,14,https://github.com/chevah/python-package/pull/115#issuecomment-420198860,"Scope
We might want to look into setting up something like â€‹â€‹https://pyup.io/safety/
Is free for on-premise deployment.
Changes
Use pip list --outdated to show old Python modules.
Use safety to check for known vulnerabilities in Python modules and error out if any found.
But do not bundle safety, only install it with pip during test phase.
Drive-by fixes:

updated pip and get-pip.py to latest version: 18.0
also copy paver.conf alongside paver.sh for compat tests, to avoid incompatibilities
updated pypiwin32 and renamed accordingly to upstream to pywin32, added test for it
updated scandir to 1.9.0 (this fixes testing in OpenBSD)
install some modules through pip even on Solaris 10 and HP-UX using PIP_LIBRARIES_NO_CFFI
adjusted list of required packages for SLES 12 to account for the SP3 upgrade.

How to try and test the changes
reviewers: @adiroiban
Please double-check changes in chevah_build and python-modules/chevah-python-test/test_python_binary_dist.py
Run the automated tests and check for the output of our tests.
pip should list all outdated packages, eg. pyOpenSSL everywhere, as 18.0.0 was released and we are at most at 17.5.0.
safety should list all packages with known vulnerabilities.
Make sure the test phase errors out if any vulnerabilities are found.
Note that for some reason safety doesn't error on Windows (and only on Windows), eg. https://chevah.com/buildbot/builders/python-package-win-xp-dev/builds/62/steps/test/logs/stdio. Reported upstream at pyupio/safety#153.","So, to be honest, I would prefer building pycryptodome from local sources, as we do it for Solaris 10 and HP-UX. What do you think?



Sure. No problem. THanks!

OK, to be tried in another PR as a drive-by, if feasible. This one has been going for too long.",True,{}
chevah/python-package,https://github.com/chevah/python-package,116,2018-09-05T09:19:28Z,2018-09-06T07:11:12Z,2018-09-06T07:11:17Z,MERGED,True,61,36,526,https://github.com/dumol,[#5057] Security updates for pycryptodome and cryptography.,4,['needs-merge'],https://github.com/chevah/python-package/pull/116,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/116,"Scope
As suggested by safety while working in #115:
-> pycryptodome, installed 3.6.5, affected <3.6.6, id 36384
pycryptodome before 3.6.6 has a vulnerability on AESNI ECB with payloads smaller than 16 bytes.
--
-> cryptography, installed 2.2.2, affected >=1.9.0,<2.3, id 36351
python-cryptography versions >=1.9.0 and <2.3 did not enforce a minimum tag length for finalize_with_tag API. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.
Changes
Updated PyCryptodome to 3.6.6 and cryptography to 2.3.1 in chevah_build, python-modules/ sub-dir and on https://pypi.chevah.com.
Drive-by fixes:

For OpenBSD there is no longer a need for patching cryptography.
Identifying what cryptography version to use in different Solaris 11.x versions works in a more simple way now.

How to try and test the changes
reviewers: @adiroiban
Review the changes in chevah_build or the latest two commits.
Run the automated tests.","Scope
As suggested by safety while working in #115:
-> pycryptodome, installed 3.6.5, affected <3.6.6, id 36384
pycryptodome before 3.6.6 has a vulnerability on AESNI ECB with payloads smaller than 16 bytes.
--
-> cryptography, installed 2.2.2, affected >=1.9.0,<2.3, id 36351
python-cryptography versions >=1.9.0 and <2.3 did not enforce a minimum tag length for finalize_with_tag API. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.
Changes
Updated PyCryptodome to 3.6.6 and cryptography to 2.3.1 in chevah_build, python-modules/ sub-dir and on https://pypi.chevah.com.
Drive-by fixes:

For OpenBSD there is no longer a need for patching cryptography.
Identifying what cryptography version to use in different Solaris 11.x versions works in a more simple way now.

How to try and test the changes
reviewers: @adiroiban
Review the changes in chevah_build or the latest two commits.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,116,2018-09-05T09:19:28Z,2018-09-06T07:11:12Z,2018-09-06T07:11:17Z,MERGED,True,61,36,526,https://github.com/dumol,[#5057] Security updates for pycryptodome and cryptography.,4,['needs-merge'],https://github.com/chevah/python-package/pull/116,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/116#issuecomment-418661172,"Scope
As suggested by safety while working in #115:
-> pycryptodome, installed 3.6.5, affected <3.6.6, id 36384
pycryptodome before 3.6.6 has a vulnerability on AESNI ECB with payloads smaller than 16 bytes.
--
-> cryptography, installed 2.2.2, affected >=1.9.0,<2.3, id 36351
python-cryptography versions >=1.9.0 and <2.3 did not enforce a minimum tag length for finalize_with_tag API. If a user did not validate the input length prior to passing it to finalize_with_tag an attacker could craft an invalid payload with a shortened tag (e.g. 1 byte) such that they would have a 1 in 256 chance of passing the MAC check. GCM tag forgeries can cause key leakage.
Changes
Updated PyCryptodome to 3.6.6 and cryptography to 2.3.1 in chevah_build, python-modules/ sub-dir and on https://pypi.chevah.com.
Drive-by fixes:

For OpenBSD there is no longer a need for patching cryptography.
Identifying what cryptography version to use in different Solaris 11.x versions works in a more simple way now.

How to try and test the changes
reviewers: @adiroiban
Review the changes in chevah_build or the latest two commits.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/117,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/117#issuecomment-421539329,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Compat tests are currently failing. I think compat master is a bit left behind. Can you please double-check? Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/117#issuecomment-421924240,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?",needs-changes,True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/117#issuecomment-421925985,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Once this is in production, please consider updating chevah/server to use the new package names.

Can't do this until the transition to PyCryptodome is completed in https://trac.chevah.com/ticket/5034.
Also, even with not overwriting paver.conf, compat tests fail everywhere. The reason they worked in latest revisions for master (in python-package) is because paver.conf was overwritten after the current Python version was configured for compat tests. Therefore, compat tests were run for an older Python version.
Can you please look at updating compat master? The error everywhere is:
Installing base requirements: chevah-brink==0.69.1 paver==1.2.4.
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
ImportError: No module named paver.tasks

I wouldn't want to commit this to master with broken compat tests everywhere. Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/117#issuecomment-422782624,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","I start working on compat as part of chevah/compat#91
Which python-package version should I use?
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/117#issuecomment-422807592,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?",PYTHON_CONFIGURATION='default@2.7.15.1afde4e1:solaris10@2.7.8.1afde4e1' is the latest revision with PyCrypto and the one to hit server master really soon now in chevah/server#1443,True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/117#issuecomment-422821617,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Thanks.
Latest python looks ok on my local system.
The changes from this PR looks good. .. not sure why compat tests are no longer working.
The compat tests need to run in a similar way to buildbot. That is run paver deps before test_ci.
I am testing this on my local computer...",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/117#issuecomment-422830974,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Ok. So the issue is the new pip version
    Skipping link http://pypi.chevah.com/simple/chevah-brink/chevah-brink-0.58.0-py2.py3-none-any.whl (from http://pypi.chevah.com/simple/chevah-brink/); wrong project name (not chevah-brink)

Somehow it does not work with our packages.
I think that latest pip wants chevah_brink-0.58.0-py2.py3-none-any.whl . That is use underscore in project name.
My suggestion is to use an older pip version for now... while we look at how to update the package names",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/117#issuecomment-422833496,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","I think that the current trick with static files will not do the trick, so we might look at installing https://github.com/pypiserver/pypiserver on the public server and no longer have pypi on deag",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/117#issuecomment-423482676,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","the issue is that we need to force using older pip.
I have pushed a commit.
Not sure how you want to handle it
I guess that in order to close this fast we should use pip 9.0.0.
Then, in a separate task we can look at upgrading our pypi servers and then start using latest pip.
As part of the separate task, we should test chevah/server branch series-2 that it can still use the pypi server.. so that we don't end up breaking SFTPPlus V2 dev
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/117#issuecomment-423965642,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","Thank you for the fix. I've set 9.0.3, that was used extensively, to be used in the same way as before. We don't need latest pip for now, so I'm fine with the current situation, no need to complicate things unnecessarily.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,117,2018-09-13T12:28:28Z,2018-09-25T10:20:53Z,2018-09-25T10:20:57Z,MERGED,True,62,39,3,https://github.com/dumol,[#5023] Debian-specific packages.,11,['needs-merge'],https://github.com/chevah/python-package/pull/117,https://github.com/adiroiban,12,https://github.com/chevah/python-package/pull/117#issuecomment-423969684,"Scope
As discussed in Trac ticket #4986 and on private IRC, we should have specific Python packages for Debian (both x86 and x64).
The updated paver.sh should be integrated into server.
Changes
Treat Debian as supported Linux distro, including a sane REPL for Python.
In the end unsupported Linux distros are no longer equated to Debian because:

There are multiple incompatible but supported OpenSSL versions in the wild: 1.0.2, 1.1.0, etc.
Building readline module on Debian 7 means the resulting Python depends on the specific ncurses libs on Debian 7.

Drive-by fixes:

stop overwriting Python package to be tested with compat
downgrade pip back to 9.0.3 to have it working with our infrastructure.  And execute it in a more straightforward way.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Update compat to work with latest Python package?","thanks. hope all tests will be green
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,118,2018-10-04T08:13:07Z,2018-10-26T08:49:18Z,2019-06-20T08:34:01Z,CLOSED,False,63,40,4,https://github.com/dumol,[#5084] Debian packages with PyCrypto.,3,['needs-merge'],https://github.com/chevah/python-package/pull/118,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/118,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In Trac ticket #5023, we updated paver.sh to build Debian-specific Python packages. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Debian-specific Python packages using PyCrypto to make it possible to move forward on this with the build slaves, compat, server, etc.
Changes
Branched out from 1afde4e1 to still use PyCrypto: 1afde4e...5084-debian-packages-with-pycrypto
Updated paver.conf, paver.sh and bits from chevah_build.sh and our own Python tests to make the builds on the linux-* slaves are green.
How to try and test the changes
reviewers: @adiroiban
More of a FYI","ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In Trac ticket #5023, we updated paver.sh to build Debian-specific Python packages. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Debian-specific Python packages using PyCrypto to make it possible to move forward on this with the build slaves, compat, server, etc.
Changes
Branched out from 1afde4e1 to still use PyCrypto: 1afde4e...5084-debian-packages-with-pycrypto
Updated paver.conf, paver.sh and bits from chevah_build.sh and our own Python tests to make the builds on the linux-* slaves are green.
How to try and test the changes
reviewers: @adiroiban
More of a FYI",True,{}
chevah/python-package,https://github.com/chevah/python-package,118,2018-10-04T08:13:07Z,2018-10-26T08:49:18Z,2019-06-20T08:34:01Z,CLOSED,False,63,40,4,https://github.com/dumol,[#5084] Debian packages with PyCrypto.,3,['needs-merge'],https://github.com/chevah/python-package/pull/118,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/118#issuecomment-426946790,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In Trac ticket #5023, we updated paver.sh to build Debian-specific Python packages. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Debian-specific Python packages using PyCrypto to make it possible to move forward on this with the build slaves, compat, server, etc.
Changes
Branched out from 1afde4e1 to still use PyCrypto: 1afde4e...5084-debian-packages-with-pycrypto
Updated paver.conf, paver.sh and bits from chevah_build.sh and our own Python tests to make the builds on the linux-* slaves are green.
How to try and test the changes
reviewers: @adiroiban
More of a FYI","On the linux-x86 and linux-x64 slaves I have generated and uploaded Python packages for Debian 7 based on revision db42da13. Used successfully in chevah/compat#92.
Generic Linux slaves should also be renamed to debian7-x86 and debian7-64 in salt-master.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,118,2018-10-04T08:13:07Z,2018-10-26T08:49:18Z,2019-06-20T08:34:01Z,CLOSED,False,63,40,4,https://github.com/dumol,[#5084] Debian packages with PyCrypto.,3,['needs-merge'],https://github.com/chevah/python-package/pull/118,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/118#issuecomment-427032617,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In Trac ticket #5023, we updated paver.sh to build Debian-specific Python packages. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Debian-specific Python packages using PyCrypto to make it possible to move forward on this with the build slaves, compat, server, etc.
Changes
Branched out from 1afde4e1 to still use PyCrypto: 1afde4e...5084-debian-packages-with-pycrypto
Updated paver.conf, paver.sh and bits from chevah_build.sh and our own Python tests to make the builds on the linux-* slaves are green.
How to try and test the changes
reviewers: @adiroiban
More of a FYI","The same is true for python-package, but I don't want to mix packages with PyCrypto with packages with PyCryptodome in the same PYTHON_CONFIGURATION. And we need them anyway for server, to have Debian packages of SFTPPlus.",True,{'THUMBS_UP': ['https://github.com/adiroiban']}
chevah/python-package,https://github.com/chevah/python-package,118,2018-10-04T08:13:07Z,2018-10-26T08:49:18Z,2019-06-20T08:34:01Z,CLOSED,False,63,40,4,https://github.com/dumol,[#5084] Debian packages with PyCrypto.,3,['needs-merge'],https://github.com/chevah/python-package/pull/118,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/118#issuecomment-433335911,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In Trac ticket #5023, we updated paver.sh to build Debian-specific Python packages. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Debian-specific Python packages using PyCrypto to make it possible to move forward on this with the build slaves, compat, server, etc.
Changes
Branched out from 1afde4e1 to still use PyCrypto: 1afde4e...5084-debian-packages-with-pycrypto
Updated paver.conf, paver.sh and bits from chevah_build.sh and our own Python tests to make the builds on the linux-* slaves are green.
How to try and test the changes
reviewers: @adiroiban
More of a FYI",Closing this one as wellâ€¦,True,{}
chevah/python-package,https://github.com/chevah/python-package,119,2018-10-25T07:35:25Z,2018-10-26T14:51:44Z,2018-10-26T14:51:51Z,MERGED,True,14,153968,398,https://github.com/dumol,[#5103] Build libffi on SLES.,5,['needs-merge'],https://github.com/chevah/python-package/pull/119,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/119,"Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,119,2018-10-25T07:35:25Z,2018-10-26T14:51:44Z,2018-10-26T14:51:51Z,MERGED,True,14,153968,398,https://github.com/dumol,[#5103] Build libffi on SLES.,5,['needs-merge'],https://github.com/chevah/python-package/pull/119,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/119#issuecomment-432946259,"Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,119,2018-10-25T07:35:25Z,2018-10-26T14:51:44Z,2018-10-26T14:51:51Z,MERGED,True,14,153968,398,https://github.com/dumol,[#5103] Build libffi on SLES.,5,['needs-merge'],https://github.com/chevah/python-package/pull/119,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/119#issuecomment-432993971,"Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",Thanks. I am now testing this as part of chevah/server#1443,True,{}
chevah/python-package,https://github.com/chevah/python-package,119,2018-10-25T07:35:25Z,2018-10-26T14:51:44Z,2018-10-26T14:51:51Z,MERGED,True,14,153968,398,https://github.com/dumol,[#5103] Build libffi on SLES.,5,['needs-merge'],https://github.com/chevah/python-package/pull/119,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/119#issuecomment-432995554,"Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Thanks. I am now testing this as part of chevah/server#1443

This revision won't work on server, as it uses PyCryptodome. To fix this in server I'll have to branch out from latest revision still using PyCrypto: 1afde4e",True,{}
chevah/python-package,https://github.com/chevah/python-package,119,2018-10-25T07:35:25Z,2018-10-26T14:51:44Z,2018-10-26T14:51:51Z,MERGED,True,14,153968,398,https://github.com/dumol,[#5103] Build libffi on SLES.,5,['needs-merge'],https://github.com/chevah/python-package/pull/119,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/119#issuecomment-432995919,"Scope
We have inadvertently built our Python packages against a libffi6 package from the monitoring OpenSUSE repo for SLES, used for installing Zabbix.
Changes
Just don't use any local libffi on SLES, as even the libffi-devel packages from the SDKs DVDs or repos try to replace the libffi4 package available to be installed in a default setup with libffi43 packages that come with no vendor support.
We have a similar situation with AIX / HP-UX / the BSDs, where we use our own libffi.
To be extra safe, have removed libffi-devel and libffi6 from SLES minions through Salt.
Drive-by fixes:

updated paver.sh with latest Ubuntu-related improvements from chevah/salt-master#391
use stderr when erroring out from chevah_build
removed unused libffi-3.3-rc0 sources.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",I already did something similar in #118 for specific Debian 7 packages.,True,{}
chevah/python-package,https://github.com/chevah/python-package,120,2018-10-25T10:43:40Z,2018-10-26T08:27:58Z,2019-06-20T08:34:54Z,CLOSED,False,88,60,4,https://github.com/dumol,[#5104] SLES packages with PyCrypto and no libffi6 deps.,6,['needs-merge'],https://github.com/chevah/python-package/pull/120,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/120,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #119, we got rid of the libffi6 deps. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate SLES Python packages with PyCrypto and no libffi6 deps to make it possible to fix this for server.
Changes
Branched out from #118 to still use PyCrypto.
Backported relevant changes to chevah_build.sh and our Python tests from #119 to fix the issue.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for SLES.","ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #119, we got rid of the libffi6 deps. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate SLES Python packages with PyCrypto and no libffi6 deps to make it possible to fix this for server.
Changes
Branched out from #118 to still use PyCrypto.
Backported relevant changes to chevah_build.sh and our Python tests from #119 to fix the issue.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for SLES.",True,{}
chevah/python-package,https://github.com/chevah/python-package,120,2018-10-25T10:43:40Z,2018-10-26T08:27:58Z,2019-06-20T08:34:54Z,CLOSED,False,88,60,4,https://github.com/dumol,[#5104] SLES packages with PyCrypto and no libffi6 deps.,6,['needs-merge'],https://github.com/chevah/python-package/pull/120,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/120#issuecomment-433024688,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #119, we got rid of the libffi6 deps. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate SLES Python packages with PyCrypto and no libffi6 deps to make it possible to fix this for server.
Changes
Branched out from #118 to still use PyCrypto.
Backported relevant changes to chevah_build.sh and our Python tests from #119 to fix the issue.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for SLES.","@adiroiban, this is where I generated new SLES packages for server. Just copy/paste from paver.conf if you're fine with the changes. You might want the Debian 7 ones as well, and settle that in server as well.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,120,2018-10-25T10:43:40Z,2018-10-26T08:27:58Z,2019-06-20T08:34:54Z,CLOSED,False,88,60,4,https://github.com/dumol,[#5104] SLES packages with PyCrypto and no libffi6 deps.,6,['needs-merge'],https://github.com/chevah/python-package/pull/120,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/120#issuecomment-433305252,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #119, we got rid of the libffi6 deps. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate SLES Python packages with PyCrypto and no libffi6 deps to make it possible to fix this for server.
Changes
Branched out from #118 to still use PyCrypto.
Backported relevant changes to chevah_build.sh and our Python tests from #119 to fix the issue.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for SLES.","Please publish sles 11 and sles 12 versions on production.

Have already done that yesterday afternoon. Double-checked as of now to be sure, eg. https://binary.chevah.com/production/python/sles11sm/x64/python-2.7.15.bfb4e344-sles11sm-x64.tar.gz",True,{}
chevah/python-package,https://github.com/chevah/python-package,120,2018-10-25T10:43:40Z,2018-10-26T08:27:58Z,2019-06-20T08:34:54Z,CLOSED,False,88,60,4,https://github.com/dumol,[#5104] SLES packages with PyCrypto and no libffi6 deps.,6,['needs-merge'],https://github.com/chevah/python-package/pull/120,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/120#issuecomment-433329959,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #119, we got rid of the libffi6 deps. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate SLES Python packages with PyCrypto and no libffi6 deps to make it possible to fix this for server.
Changes
Branched out from #118 to still use PyCrypto.
Backported relevant changes to chevah_build.sh and our Python tests from #119 to fix the issue.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for SLES.","@dumol Thanks. I was looking for 2c231d5 as this was the last commit on this branch... but now that I check that commit I see that is a simple update and bfb4e34 is the same thing :)
I think that we can close this, as there is not much to be done here.",True,{}
chevah/python-package,https://github.com/chevah/python-package,121,2018-11-12T15:23:29Z,2018-11-13T10:00:21Z,2018-11-13T10:00:26Z,MERGED,True,33,2,3,https://github.com/dumol,[#5124] Amazon Linux support.,3,['needs-merge'],https://github.com/chevah/python-package/pull/121,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/121,"Scope
Support for Amazon Linux 2.  Using â€‹https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html.
Changes
Recognize amzn Linux distribution type.
Support Amazon Linux version 2 and newer.
Drive-by fix:

nicer exit message for unsupported Linux distros with /etc/os-release files.

How to try and test the changes
reviewers: @adiroiban
Please review the simple changes.
Manually test on one of the new amazon slaves on Fiser and Ghindari, not yet integrated in our Buildbot setup. All tests pass with no changes other than the dep checks.","Scope
Support for Amazon Linux 2.  Using â€‹https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html.
Changes
Recognize amzn Linux distribution type.
Support Amazon Linux version 2 and newer.
Drive-by fix:

nicer exit message for unsupported Linux distros with /etc/os-release files.

How to try and test the changes
reviewers: @adiroiban
Please review the simple changes.
Manually test on one of the new amazon slaves on Fiser and Ghindari, not yet integrated in our Buildbot setup. All tests pass with no changes other than the dep checks.",True,{}
chevah/python-package,https://github.com/chevah/python-package,121,2018-11-12T15:23:29Z,2018-11-13T10:00:21Z,2018-11-13T10:00:26Z,MERGED,True,33,2,3,https://github.com/dumol,[#5124] Amazon Linux support.,3,['needs-merge'],https://github.com/chevah/python-package/pull/121,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/121#issuecomment-437920563,"Scope
Support for Amazon Linux 2.  Using â€‹https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html.
Changes
Recognize amzn Linux distribution type.
Support Amazon Linux version 2 and newer.
Drive-by fix:

nicer exit message for unsupported Linux distros with /etc/os-release files.

How to try and test the changes
reviewers: @adiroiban
Please review the simple changes.
Manually test on one of the new amazon slaves on Fiser and Ghindari, not yet integrated in our Buildbot setup. All tests pass with no changes other than the dep checks.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,121,2018-11-12T15:23:29Z,2018-11-13T10:00:21Z,2018-11-13T10:00:26Z,MERGED,True,33,2,3,https://github.com/dumol,[#5124] Amazon Linux support.,3,['needs-merge'],https://github.com/chevah/python-package/pull/121,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/121#issuecomment-438206616,"Scope
Support for Amazon Linux 2.  Using â€‹https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html.
Changes
Recognize amzn Linux distribution type.
Support Amazon Linux version 2 and newer.
Drive-by fix:

nicer exit message for unsupported Linux distros with /etc/os-release files.

How to try and test the changes
reviewers: @adiroiban
Please review the simple changes.
Manually test on one of the new amazon slaves on Fiser and Ghindari, not yet integrated in our Buildbot setup. All tests pass with no changes other than the dep checks.","Thanks. Please publish it to production.
[â€¦]
Once this is merged, please create a ticket in chevah/server in which we will add this new Linux version.

Thanks! This was the support for master. To upload binaries to production ASAP, I'll have to apply these changes to a branch with PyCrypto, eg. one derived from #119. With the uploaded binaries I'll enable the build slaves for Amazon Linux 2 and start working on server.

I have assisted a client running SFTPPlus rhel 7.4 in Amazon Linux 2 and it worked.
It was strange, as systemd was not there.

Hhmmm, judging by the deps, some things should not work, even on the older 7.x package. But maybe the problematic deps are for modules not used by SFTPPlus.

I went for sysV script.
For the sysV script we should also need a variant in which the process is not started as root, but directly as the ""sftpplus"" user.

I don't see/understand the reason for supporting running SysV init scripts outside a SysV-compatible init system. You can run SFTPPlus as a dedicated user through SysV, but all SysV init scripts are run by root. If you don't like that, you can use a script to run your daemon outside the SysV system, but it's not going to be a SysV init script. Do we want such a script, in addition to the SysV init one?",True,{}
chevah/python-package,https://github.com/chevah/python-package,122,2018-11-13T10:14:48Z,2018-11-16T11:12:51Z,2019-06-20T08:30:58Z,CLOSED,False,34,3,4,https://github.com/dumol,[#5131] Amazon Linux packages with PyCrypto.,2,['needs-merge'],https://github.com/chevah/python-package/pull/122,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/122,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #121 , we got support for Amazon Linux 2. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Amazon Linux 2 Python packages with PyCrypto for server.
Changes
Branched out from #120 to use PyCrypto.
Cherry-picked the changes in #121 for Amazon Linux support.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for Amazon Linux 2.","ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #121 , we got support for Amazon Linux 2. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Amazon Linux 2 Python packages with PyCrypto for server.
Changes
Branched out from #120 to use PyCrypto.
Cherry-picked the changes in #121 for Amazon Linux support.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for Amazon Linux 2.",True,{}
chevah/python-package,https://github.com/chevah/python-package,122,2018-11-13T10:14:48Z,2018-11-16T11:12:51Z,2019-06-20T08:30:58Z,CLOSED,False,34,3,4,https://github.com/dumol,[#5131] Amazon Linux packages with PyCrypto.,2,['needs-merge'],https://github.com/chevah/python-package/pull/122,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/122#issuecomment-438225251,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #121 , we got support for Amazon Linux 2. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Amazon Linux 2 Python packages with PyCrypto for server.
Changes
Branched out from #120 to use PyCrypto.
Cherry-picked the changes in #121 for Amazon Linux support.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for Amazon Linux 2.","FYI. See updated paver.conf for version to use in Amazon Linux: 2.7.15.f95a94ce
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,122,2018-11-13T10:14:48Z,2018-11-16T11:12:51Z,2019-06-20T08:30:58Z,CLOSED,False,34,3,4,https://github.com/dumol,[#5131] Amazon Linux packages with PyCrypto.,2,['needs-merge'],https://github.com/chevah/python-package/pull/122,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/122#issuecomment-439362184,"ðŸš« NOT TO BE MERGED WITH MASTER ðŸš«
Scope
In #121 , we got support for Amazon Linux 2. But in production we are stuck with older packages, still using PyCrypto, more precisely revision 1afde4e1.
Generate Amazon Linux 2 Python packages with PyCrypto for server.
Changes
Branched out from #120 to use PyCrypto.
Cherry-picked the changes in #121 for Amazon Linux support.
How to try and test the changes
reviewers: @adiroiban
More of a FYI and to know were to get specific revision for Amazon Linux 2.","Thanks! Will not merge this either, although this time the PR is relative to the branch I've used to start this. #123 is close to getting PyCrypto back alongside PyCryptodome anyway, and things will smooth out for this repo.",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/123,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/123#issuecomment-439454326,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/123#issuecomment-441445128,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I think that for Pycrypto we should try to pathc.
For pyopenssl, I am not sure which vulnerability is reported. I am looking at https://snyk.io/vuln/pip:pyopenssl
But the null byte handler should have been fixed in 0.13.1.
For the other error, I don't think that we are affected - https://people.canonical.com/~ubuntu-security/cve/2018/CVE-2018-1000807.html
0.13.1 don't have the new code which is vulnerable.
So I think that 0.13.1 is fine.
Is just that safety should tag the CVE as > 0.13.1

but everywhere else, we need to upgrade pytonnssl to 17.5.0... or better 18.0.0 :).",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/123#issuecomment-441640202,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","So there's only one place where we use a pyOpenSSL version newer than 0.13.1, but older than 17.5.0, and that is Solaris 11. In theory this could be solved by upgrading our Solaris 11 installations to 11.3 SRU 19 or later. Which in practice means reinstallation everywhere, as detailed in https://trac.chevah.com/ticket/4918.
Even if we fix this for Solaris 11, there will still be a need to ignore these IDs for pyOpenSSL 0.13.1 in Solaris 10 and HP-UX (possibly also on SLES 10, but nobody cares). I could rename the function from add_ignored_safety_ids_for_pyopenssl_pre17_5_0 to add_ignored_safety_ids_for_pyopenssl_13_1 to account for that. Alternatively, we could also file an issue with safety upstream, but in my experience they ignore their free users.
On the other OS'es I could also upgrade pyOpenSSL to latest version (currently 18.0.0), but that is not a security issue, and wouldn't change anything for this. Would prefer a separate branch/PR.
Would the above be acceptable?",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/123#issuecomment-441707983,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I think that we should drop support for Solaris 11.
I don't think that we have customers on Solaris 11. I know that we have only for Solaris 10.
@tim441 can confirm if we sold any Solaris 11 license.
I would say that we should drop support for Solaris 11 as is too much work to keep it secure.


Alternatively, we could also file an issue with safety upstream, but in my experience they ignore their free users.

I think that we should report this to the safety project, so that they can update their DB to only raise these warnings if pyopenssl 14.0 or newer is found.
If they will ignore it, then this is a bad sign, and yes. we should create a function lik
add_ignored_safety_pyopenssl_false_positives
But I hope that they can update their db based on our feedback.

Yes pyopenssl for the other OS should be upgraded in another branch, but it can wait. Maybe we will upgrade to 19.0.0 :)
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/tim441,6,https://github.com/chevah/python-package/pull/123#issuecomment-441711729,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I am unaware of any Solaris 11 users and agree it makes sense to drop this
â€¦
On Mon, 26 Nov 2018 at 16:39, Adi Roiban ***@***.***> wrote:
 I think that we should drop support for Solaris 11.
 I don't think that we have customers on Solaris 11. I know that we have
 only for Solaris 10.
 @tim441 <https://github.com/tim441> can confirm if we sold any Solaris 11
 license.

 I would say that we should drop support for Solaris 11 as is too much work
 to keep it secure.
 ------------------------------

 Alternatively, we could also file an issue with safety upstream, but in my
 experience they ignore their free users.

 I think that we should report this to the safety project, so that they
 can update their DB to only raise these warnings if pyopenssl 14.0 or newer
 is found.

 If they will ignore it, then this is a bad sign, and yes. we should create
 a function lik

 add_ignored_safety_pyopenssl_false_positives

 But I hope that they can update their db based on our feedback.
 ------------------------------

 Yes pyopenssl for the other OS should be upgraded in another branch, but
 it can wait. Maybe we will upgrade to 19.0.0 :)

 Thanks!

 â€”
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#123 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABpCNQuyiK8VHo024zZZ9--dXdbMJaTfks5uzBlLgaJpZM4Yfg4U>
 .",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/123#issuecomment-441711814,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I now see that the free db is updated once per month.
To run it on your own buildbot and get real time updated you need to pay $120 per month.
There is a cheaper version, but in this case they will check your code on GitHub and report errors...so you don't have full control",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/123#issuecomment-441983348,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I remembered this message on support, might be relevant:
On 05/09/18 13:51, Lowdon Peter DWP TECHNOLOGY wrote:

Hi Adi,
This is the breakdown of the estate
Tiny fraction - Solaris 11.3 (SPARC)
Single server - Solaris 10 update4 (SPARC)
Vast Majority - Solaris 10 update11 (SPARC)
Handful of servers - Solaris 9 (SPARC)
Hope this helps.

I do have a mild interest in keeping Solaris 11 supported, so I will spin up a Solaris 11.4 x86 VM for python-package in my free time if Solaris 11 support is to be completely dropped. As I did for AIX 6.1 on Foi.
Note that DWP is using Solaris 11.3 on SPARC, so it's a slightly different matter. On a second thought, I think we could alternatively spin up kernel zones with updated Solaris 11.3 and/or 11.4 on SPARC using Solaris 11.2 on Jacu. Not sure how time-consuming that would be in comparison to simply reinstalling a newer Solaris version on Jacu.",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/123#issuecomment-442012147,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","For the record, I reported upstream the safety issue with pyOpenSSL 0.13.1 at https://github.com/pyupio/safety/issues/174.
Also took the time to update the spreadsheet for SFTPPlus external dependencies and associated vulnerabilities at https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/.",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,10,https://github.com/chevah/python-package/pull/123#issuecomment-443304469,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/123#issuecomment-443874295,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","Looks good.
But now on SLES-11 SM we have  1.0.1, while on normal we have 1.1.0... maybe we should drop SLES 11-SM and just keep the SLES-11 with embedded OpenSSL",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/dumol,12,https://github.com/chevah/python-package/pull/123#issuecomment-444012711,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.","I don't know about SLES 11 SMâ€¦ I prefer system OpenSSL over an upstream wheel wherever we have the option of a vendor-maintained version. Let's see what Suse will do about OpenSSL 1.0.1 in SLES 11 SM.
There's a similar issue in other distros as well, so maybe something to investigate and possibly fix on our side in another PR.",True,{}
chevah/python-package,https://github.com/chevah/python-package,123,2018-11-15T10:32:23Z,2018-12-04T11:30:22Z,2018-12-04T11:30:27Z,MERGED,True,48721,1463,740,https://github.com/dumol,[#5115] Bring back PyCrypto alongside PyCryptodome.,34,['needs-merge'],https://github.com/chevah/python-package/pull/123,https://github.com/adiroiban,13,https://github.com/chevah/python-package/pull/123#issuecomment-444018377,"Scope
Get PyCrypto back.
Ideally with PyCryptodome built as pycryptodomex, to not lose all the work invested in getting that working on everything but HP-UX.
More on this in internal Trac ticket #5040.
Changes
Use PyCryptodome 3.6.6 as PyCryptodomex.
Build PyCrypto 2.6.1 again, but this time always from EXTRA_LIBRARIES. Imported pristine sources + patches separated in a corresponding sub-dir.
But in the end, for Windows I had to pack the patched sources and upload them to PyPI server anyway, as pycrypto-2.6.1chevah1â€¦ Â¯\_(ãƒ„)_/Â¯
Apply all Ubuntu 16.04 patches to PyCrypto's sources  + our own patch for AIX. This way we patch two security vulnerabilities for PyCrypto 2.6.1: CVE-2013-7459 and CVE-2018-6594.
Drive-by changes:

added a way to exclude false positives from safety checks for pyOpenSSL 0.13.1 and patched PyCrypto 2.6.1
added a mechanism for keeping changes to stuff in python-modules/ in separate patches, eg. for python-modules/pycrypto-2.6.1, patches are applied from python-modules/pycrypto-2.6.1-patches
build zlib on macOS to account for missing headers in 10.14
build libffi on Solaris 11 to account for issues with multiple libffi libs in 11.4
build libedit and readline modules on Solaris 11 SPARC again
identify Solaris 11 older than 11.4 as solaris-112, following the scheme for older Solaris 10
on Solaris 11.2, get back to pyOpenSSL 0.13.1, as 0.17.0 is vulnerable, and the patch for it requires a version of cryptography that doesn't run on Solaris 11.2.
use required latest cryptography (and pyOpenSSL 0.17.5) in Solaris 11.4 (there's no longer a need for patched chevah versions and our fork in GitHub)
also updated cryptography to latest version on all OS'es using it, thus also OpenSSL version for Windows / SLES 11 / OS X
while at it, also updated pyOpenSSL to latest version: 18.0.0.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
For my changes: git diff master paver.sh chevah_build functions.sh python-modules/chevah-python-test/test_python_binary_dist.py src/
For Ubuntu patches + our patch for PyCrypto: git diff master --text python-modules/pycrypto-2.6.1-patches/
Everything else should be just source renames and imports.
Run the automated tests.",yes... not sure what the distros will do about 1.0.1... will see. thanks!,True,{}
chevah/python-package,https://github.com/chevah/python-package,124,2018-12-28T10:54:13Z,2019-01-08T11:47:06Z,2019-01-08T13:21:05Z,MERGED,True,10,2,3,https://github.com/dumol,[#5168] Alpine 3.7 support.,2,['needs-merge'],https://github.com/chevah/python-package/pull/124,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/124,"Scope
There's not much left until 2019-05-01, the end of support date for Alpine Linux 3.6, according to â€‹https://wiki.alpinelinux.org/wiki/Alpine_Linux:Releases.
While at it, see what's with the no_aes Alpine slaves, which seem completely unused, wasting RAM.
Changes
salt-master fixes were done as a drive-by in chevah/salt-master#413.
I left the Alpine 3.6 slave alone for now.
Updated the no_aes Alpiine slave on Lotu to 3.7. There seem to be less persistent issues now when testing server: https://chevah.com/buildbot/builders/server-alpine-37/builds/3/steps/test/logs/stdio
For the other no_aes Alpine slave on Neaua I chose to reinstall with the Standard install disk, not the Virtual one. There seem to be one less persistent issue here: https://chevah.com/buildbot/builders/server-alpine-37/builds/2/steps/test/logs/stdio
Drive-by fixes:

fixed package checking with Alpine's apk.

How to try and test the changes
reviewers: @adiroiban
Check the drive-by fix in changes.
Check the issues with the Alpine 3.7 standard and virtual installations referenced above and decide on what to do next.","Scope
There's not much left until 2019-05-01, the end of support date for Alpine Linux 3.6, according to â€‹https://wiki.alpinelinux.org/wiki/Alpine_Linux:Releases.
While at it, see what's with the no_aes Alpine slaves, which seem completely unused, wasting RAM.
Changes
salt-master fixes were done as a drive-by in chevah/salt-master#413.
I left the Alpine 3.6 slave alone for now.
Updated the no_aes Alpiine slave on Lotu to 3.7. There seem to be less persistent issues now when testing server: https://chevah.com/buildbot/builders/server-alpine-37/builds/3/steps/test/logs/stdio
For the other no_aes Alpine slave on Neaua I chose to reinstall with the Standard install disk, not the Virtual one. There seem to be one less persistent issue here: https://chevah.com/buildbot/builders/server-alpine-37/builds/2/steps/test/logs/stdio
Drive-by fixes:

fixed package checking with Alpine's apk.

How to try and test the changes
reviewers: @adiroiban
Check the drive-by fix in changes.
Check the issues with the Alpine 3.7 standard and virtual installations referenced above and decide on what to do next.",True,{}
chevah/python-package,https://github.com/chevah/python-package,124,2018-12-28T10:54:13Z,2019-01-08T11:47:06Z,2019-01-08T13:21:05Z,MERGED,True,10,2,3,https://github.com/dumol,[#5168] Alpine 3.7 support.,2,['needs-merge'],https://github.com/chevah/python-package/pull/124,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/124#issuecomment-451144639,"Scope
There's not much left until 2019-05-01, the end of support date for Alpine Linux 3.6, according to â€‹https://wiki.alpinelinux.org/wiki/Alpine_Linux:Releases.
While at it, see what's with the no_aes Alpine slaves, which seem completely unused, wasting RAM.
Changes
salt-master fixes were done as a drive-by in chevah/salt-master#413.
I left the Alpine 3.6 slave alone for now.
Updated the no_aes Alpiine slave on Lotu to 3.7. There seem to be less persistent issues now when testing server: https://chevah.com/buildbot/builders/server-alpine-37/builds/3/steps/test/logs/stdio
For the other no_aes Alpine slave on Neaua I chose to reinstall with the Standard install disk, not the Virtual one. There seem to be one less persistent issue here: https://chevah.com/buildbot/builders/server-alpine-37/builds/2/steps/test/logs/stdio
Drive-by fixes:

fixed package checking with Alpine's apk.

How to try and test the changes
reviewers: @adiroiban
Check the drive-by fix in changes.
Check the issues with the Alpine 3.7 standard and virtual installations referenced above and decide on what to do next.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,124,2018-12-28T10:54:13Z,2019-01-08T11:47:06Z,2019-01-08T13:21:05Z,MERGED,True,10,2,3,https://github.com/dumol,[#5168] Alpine 3.7 support.,2,['needs-merge'],https://github.com/chevah/python-package/pull/124,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/124#issuecomment-451478537,"Scope
There's not much left until 2019-05-01, the end of support date for Alpine Linux 3.6, according to â€‹https://wiki.alpinelinux.org/wiki/Alpine_Linux:Releases.
While at it, see what's with the no_aes Alpine slaves, which seem completely unused, wasting RAM.
Changes
salt-master fixes were done as a drive-by in chevah/salt-master#413.
I left the Alpine 3.6 slave alone for now.
Updated the no_aes Alpiine slave on Lotu to 3.7. There seem to be less persistent issues now when testing server: https://chevah.com/buildbot/builders/server-alpine-37/builds/3/steps/test/logs/stdio
For the other no_aes Alpine slave on Neaua I chose to reinstall with the Standard install disk, not the Virtual one. There seem to be one less persistent issue here: https://chevah.com/buildbot/builders/server-alpine-37/builds/2/steps/test/logs/stdio
Drive-by fixes:

fixed package checking with Alpine's apk.

How to try and test the changes
reviewers: @adiroiban
Check the drive-by fix in changes.
Check the issues with the Alpine 3.7 standard and virtual installations referenced above and decide on what to do next.","Alpine is here mostly for Docker. Can you please take some time and look at updating the file from https://github.com/proatria/sftpplus-docker/blob/master/Dockerfile
I think that we no longer have 'linux' a we might suggest Alpine as the ""default"" OS.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,125,2019-01-09T11:55:36Z,2019-01-10T09:57:53Z,2019-01-10T10:19:53Z,MERGED,True,68,22,2,https://github.com/dumol,[#5180] Build psutil on supported platforms.,8,['needs-merge'],https://github.com/chevah/python-package/pull/125,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/125,"Scope
Adding psutil support.
Changes
Build psutil everywhere except:

Windows, where we use the upstream wheel
HP-UX, for which there is no support from uppstream
AIX 5.3, where the build fails.

Drive-by fixes:

updated deps for Alpine 3.7 and Debian 8
build Debian packages as portable as possible, there might be of some use on other unsupported Linux platforms. This means no readline module on Debian.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
Adding psutil support.
Changes
Build psutil everywhere except:

Windows, where we use the upstream wheel
HP-UX, for which there is no support from uppstream
AIX 5.3, where the build fails.

Drive-by fixes:

updated deps for Alpine 3.7 and Debian 8
build Debian packages as portable as possible, there might be of some use on other unsupported Linux platforms. This means no readline module on Debian.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,125,2019-01-09T11:55:36Z,2019-01-10T09:57:53Z,2019-01-10T10:19:53Z,MERGED,True,68,22,2,https://github.com/dumol,[#5180] Build psutil on supported platforms.,8,['needs-merge'],https://github.com/chevah/python-package/pull/125,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/125#issuecomment-452671789,"Scope
Adding psutil support.
Changes
Build psutil everywhere except:

Windows, where we use the upstream wheel
HP-UX, for which there is no support from uppstream
AIX 5.3, where the build fails.

Drive-by fixes:

updated deps for Alpine 3.7 and Debian 8
build Debian packages as portable as possible, there might be of some use on other unsupported Linux platforms. This means no readline module on Debian.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,125,2019-01-09T11:55:36Z,2019-01-10T09:57:53Z,2019-01-10T10:19:53Z,MERGED,True,68,22,2,https://github.com/dumol,[#5180] Build psutil on supported platforms.,8,['needs-merge'],https://github.com/chevah/python-package/pull/125,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/125#issuecomment-452723387,"Scope
Adding psutil support.
Changes
Build psutil everywhere except:

Windows, where we use the upstream wheel
HP-UX, for which there is no support from uppstream
AIX 5.3, where the build fails.

Drive-by fixes:

updated deps for Alpine 3.7 and Debian 8
build Debian packages as portable as possible, there might be of some use on other unsupported Linux platforms. This means no readline module on Debian.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","With these changes we do have psutil in the Windows package, as a wheel. It's just not tested, because it bails out on import with an error about the Windows version on our XP slaves.
I agree we should try using a newer Windows version for building python-package. But this looks like a major undertaking, lots of things are different in the Windows build. And we don't have AdiL with us any moreâ€¦
Then we can fix this minor issue with checking for psutil on Windows XP. But for now it doesn't really make sense to write code that it's not run.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/126,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/126#issuecomment-465983886,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","If you want other updates besides the SQLite one, please let me know.
I'm only aware of a moderate issue with OpenSSL 1.0.2, to be fixed on Feb 26 by upstream. This will probably be included in Python 2.7.16, to be released on March 2. Only affects Windows.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/126#issuecomment-466191209,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","Thanks. Great work.
I need to write an example of cython and make sure that cython is usable... just importing cython is a first step, but it will not guarantee that it can compile .pyx files.
I will write a demo .pyx file and update the pytho module test code to compile a pyx file and then use it in the test",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/126#issuecomment-466321522,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","Thanks, that should also work on Windows, our current XP slaves for python-package have Visual C installed.
True, there is a Trac ticket for using newer Windows build slaves for this (#5192). And I'm currently thinking of jumping straight to Windows 2019, and leverage Microsoft's support for backward compatibility when building on them.",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/126#issuecomment-466345849,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","jumping straight to Windows 2019

Windows 2019 looks good and if you add a Windows 2019 slave, please also install Python 2.7 from upstream in C:/Python27 and then install https://www.microsoft.com/EN-US/DOWNLOAD/DETAILS.ASPX?ID=44266

I saw that MS did an ugly thing with Windows 10... they released a major upgrade but still kept the version number as 10.
Is good that Windows Server version was updated.
It was confusing as I had Windows 10 installed on my laptop and there was an app advertised as only working on Windows 10 and installable from Windows Store... but when I went on Windows store it told me that the software is not available for me... without any hint that I should update.
Bad user experience.
But we are not using any of the Windows 10 features... we are not even using Windows 8/2012 features.",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/126#issuecomment-470493666,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","@adiroiban, any news on this front?
Would like to get Python 2.7.16 (has security fixes) and cryptography 2.6 (with updated OpenSSL wheels on Windows and OS X) into python-package.
Should I do it in this branch or separately?",True,{}
chevah/python-package,https://github.com/chevah/python-package,126,2019-02-21T11:21:57Z,2019-03-08T09:09:56Z,2019-03-08T09:10:01Z,MERGED,True,290288,25277,2042,https://github.com/dumol,[#5203] Cython addition.,8,['needs-merge'],https://github.com/chevah/python-package/pull/126,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/126#issuecomment-470857860,"Scope
see if it is easy to get cython for our Linux and Windows python-package version
MacOS is optional.
Changes
This was completely problem-free for all the platforms.
On Windows I have used the upstream wheel, which according to their documentation requires using Visual C on Windows.
Drive-by fixes:

updated SQLite for latest security issues: https://blade.tencent.com/magellan/index_en.html
detect MSYS env under Windows.

How to try and test the changes
reviewers: @adiroiban
Check changes, eg. with:
git diff master paver.conf chevah_build python-modules/chevah-python-test/ paver.sh

Run the automated tests.","Thanks, will merge this into master then. And open a dedicate ticket for updating Python and cryptographyâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,127,2019-03-14T12:37:47Z,2019-03-26T13:06:48Z,2019-03-26T13:06:53Z,MERGED,True,11417,12121,4751,https://github.com/dumol,"[#5225] Updates for Python,  cryptography, etc.",6,['needs-merge'],https://github.com/chevah/python-package/pull/127,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/127,"Scope
python-package with latest Python and cryptography for updated OpenSSL wheels.
Also check for other possible security updates while at it.
Changes
Mostly uneventful updates:

Python 2.7.15 -> 2.7.16 (OpenSSL wheel on Windows updated from 1.0.2o to 1.0.2q)
cryptography 2.4.2 -> 2.6.1 (OpenSSL wheel on Win / OS X / SLES 11 updated from 1.1.0j to 1.1.1b)
pyOpenSSL 0.18.0 ->  0.19.0 (for compatibility with OpenSSL 1.1.1, as documented upstream)
cffi 1.11.5 -> 1.12.2 (fixes some minor bugs)
scandir 1.9.0 -> 1.10.0 (not really needed after all).

How to try and test the changes
reviewers: @adiroiban
To review changes: git diff master chevah_build python-modules/chevah-python-test/
Latest cryptography fails on XP, but do we care? It works fine for Windows Server 2019, which should replace the XP slaves for python-package once compat tests are fixed in chevah/compat#94.","Scope
python-package with latest Python and cryptography for updated OpenSSL wheels.
Also check for other possible security updates while at it.
Changes
Mostly uneventful updates:

Python 2.7.15 -> 2.7.16 (OpenSSL wheel on Windows updated from 1.0.2o to 1.0.2q)
cryptography 2.4.2 -> 2.6.1 (OpenSSL wheel on Win / OS X / SLES 11 updated from 1.1.0j to 1.1.1b)
pyOpenSSL 0.18.0 ->  0.19.0 (for compatibility with OpenSSL 1.1.1, as documented upstream)
cffi 1.11.5 -> 1.12.2 (fixes some minor bugs)
scandir 1.9.0 -> 1.10.0 (not really needed after all).

How to try and test the changes
reviewers: @adiroiban
To review changes: git diff master chevah_build python-modules/chevah-python-test/
Latest cryptography fails on XP, but do we care? It works fine for Windows Server 2019, which should replace the XP slaves for python-package once compat tests are fixed in chevah/compat#94.",True,{}
chevah/python-package,https://github.com/chevah/python-package,127,2019-03-14T12:37:47Z,2019-03-26T13:06:48Z,2019-03-26T13:06:53Z,MERGED,True,11417,12121,4751,https://github.com/dumol,"[#5225] Updates for Python,  cryptography, etc.",6,['needs-merge'],https://github.com/chevah/python-package/pull/127,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/127#issuecomment-473264471,"Scope
python-package with latest Python and cryptography for updated OpenSSL wheels.
Also check for other possible security updates while at it.
Changes
Mostly uneventful updates:

Python 2.7.15 -> 2.7.16 (OpenSSL wheel on Windows updated from 1.0.2o to 1.0.2q)
cryptography 2.4.2 -> 2.6.1 (OpenSSL wheel on Win / OS X / SLES 11 updated from 1.1.0j to 1.1.1b)
pyOpenSSL 0.18.0 ->  0.19.0 (for compatibility with OpenSSL 1.1.1, as documented upstream)
cffi 1.11.5 -> 1.12.2 (fixes some minor bugs)
scandir 1.9.0 -> 1.10.0 (not really needed after all).

How to try and test the changes
reviewers: @adiroiban
To review changes: git diff master chevah_build python-modules/chevah-python-test/
Latest cryptography fails on XP, but do we care? It works fine for Windows Server 2019, which should replace the XP slaves for python-package once compat tests are fixed in chevah/compat#94.","Compat tests fail for salted POSIX systems, to be fixed in chevah/compat#94.
Same for win-2019 compat tests, which are the only thing currently preventing us to finally replace win-xp with win-2019.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,128,2019-04-02T16:12:24Z,2019-04-03T08:22:54Z,2019-04-03T08:22:59Z,MERGED,True,19,10,3,https://github.com/dumol,[#5214] Windows package management with Chocolatey.,5,['needs-merge'],https://github.com/chevah/python-package/pull/128,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/128,"Scope
Currently we use command -v to check for the presence of some needed commands like make and patch for Windows slaves, but with Chocolatey we go a step further and check for Microsoft Visual C++ Compiler for Python 2.7, packaged as vcpython27 in Chocolatey.
Changes
Use Choco when available on Windows.
Before (or on Windows slaves without Chocolatey):
Checking for required packages or commands...
Checking if make is available...
/usr/bin/make
Checking if git is available...
/c/Program Files/Git/bin/git
Checking if patch is available...
/usr/bin/patch
All required dependencies are present: make git patch

After:
Checking for required packages or commands...
Checking if vcpython27 is available...
vcpython27|9.0.0.30729
Checking if make is available...
make|4.2.1
Checking if git is available...
git|2.21.0
All required dependencies are present: vcpython27 make git

Drive-by fixes:

Removed psutil test exception on Windows, now that we ditched XP slaves.
Improved psutil test.
Use latest version of psutil.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","Scope
Currently we use command -v to check for the presence of some needed commands like make and patch for Windows slaves, but with Chocolatey we go a step further and check for Microsoft Visual C++ Compiler for Python 2.7, packaged as vcpython27 in Chocolatey.
Changes
Use Choco when available on Windows.
Before (or on Windows slaves without Chocolatey):
Checking for required packages or commands...
Checking if make is available...
/usr/bin/make
Checking if git is available...
/c/Program Files/Git/bin/git
Checking if patch is available...
/usr/bin/patch
All required dependencies are present: make git patch

After:
Checking for required packages or commands...
Checking if vcpython27 is available...
vcpython27|9.0.0.30729
Checking if make is available...
make|4.2.1
Checking if git is available...
git|2.21.0
All required dependencies are present: vcpython27 make git

Drive-by fixes:

Removed psutil test exception on Windows, now that we ditched XP slaves.
Improved psutil test.
Use latest version of psutil.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,128,2019-04-02T16:12:24Z,2019-04-03T08:22:54Z,2019-04-03T08:22:59Z,MERGED,True,19,10,3,https://github.com/dumol,[#5214] Windows package management with Chocolatey.,5,['needs-merge'],https://github.com/chevah/python-package/pull/128,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/128#issuecomment-479095712,"Scope
Currently we use command -v to check for the presence of some needed commands like make and patch for Windows slaves, but with Chocolatey we go a step further and check for Microsoft Visual C++ Compiler for Python 2.7, packaged as vcpython27 in Chocolatey.
Changes
Use Choco when available on Windows.
Before (or on Windows slaves without Chocolatey):
Checking for required packages or commands...
Checking if make is available...
/usr/bin/make
Checking if git is available...
/c/Program Files/Git/bin/git
Checking if patch is available...
/usr/bin/patch
All required dependencies are present: make git patch

After:
Checking for required packages or commands...
Checking if vcpython27 is available...
vcpython27|9.0.0.30729
Checking if make is available...
make|4.2.1
Checking if git is available...
git|2.21.0
All required dependencies are present: vcpython27 make git

Drive-by fixes:

Removed psutil test exception on Windows, now that we ditched XP slaves.
Improved psutil test.
Use latest version of psutil.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/129,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]","Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/129#issuecomment-479893294,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/129#issuecomment-480101340,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]","ah... please remove psutil from solaris as it does not work.
no need to spend more time with it... or use the previous verions for solaris.
thanks!

the change in psutils is making some tests in Windows to fail...
I will try to fix them.
But in the future we need to look at creating wheel files for OSX / Linux and Windows and deploy them independent of the whole python-package.",True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/129#issuecomment-480311968,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]","hm... we need to sync python-package with chevah/server build slaves.
it looks like some platforms are missing, for example

ubuntu-1404
debian-8-x64

Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/129#issuecomment-480745244,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]","hm... we need to sync python-package with chevah/server build slaves.

Sorry, what do you mean? Missing testing packages?
On Friday evening I have uploaded production packages for the latest rev in master: 690bed90. This is the corresponding build: https://chevah.com/buildbot/builders/python-package-group-all/builds/8.",True,{}
chevah/python-package,https://github.com/chevah/python-package,129,2019-04-04T09:09:09Z,2019-04-05T12:54:31Z,2019-04-08T09:34:29Z,MERGED,True,81,251407,2001,https://github.com/dumol,[#5250] Added subprocess32 module.,9,['needs-merge'],https://github.com/chevah/python-package/pull/129,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/129#issuecomment-480758290,"Scope
Include subprocess32 so that we can get some better timeout support, needed to support the future multi-cpu code.
Changes
Added Windows wheel and sources on our PyPI servers.
Included subprocess32 in PIP_LIBRARIES* for all OS'es.
Fixed minor compilation issue on Solaris.
Added subprocess32 to the spreadsheet with external deps and known vulnerabilities: https://docs.google.com/spreadsheets/d/12N64qFknk91f0YzEFEZ62jJ8VHfhrX2OT0nNTCn9bvY/
Maybe we should import this as an CSV file in this repo?
Drive-by fixes:

Slightly improved tests for some modules such as scandir, setproctitle, etc.
Stopped building psutil on Solaris 10 and 11.2 as requested below.
Removed sources for Cython module, not really needed, as it builds just fine through PIP.

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/

Look for anything not green at https://chevah.com/buildbot/waterfall?category=python-package :-]",Thanks. I was working with db5f082 ... will update to 690bed9 thanks!,True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/130,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/130#issuecomment-483640623,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","thanks for working on this.
I think that removing homebrew dependency can help with PROD deployment
note that LibreSSL will only be used for dev/testing tools using the Python standard library.
For heavy lifting of protecting network connection with TLS we will still use Python cryptography lib which AFAIK only works with OpenSSL",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/130#issuecomment-483989425,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","LibreSSL will be used for everything, just as in OpenBSD. LibreSSL is a fork of OpenSSL that kept API compatibility, so it was working with cryptography (almost) all the time.
Anyway, switching to LibreSSL in macOS 10.13 was quick and easy,  here's a build for you to check: https://chevah.com/buildbot/builders/python-package-macos-1013/builds/0. Excerpts:
python 2.7.16 (bd07d0d0, Apr 17 2019, 11:18:32) 
[GCC 4.2.1 Compatible Apple LLVM 9.1.0 (clang-902.0.39.1)]
zlib 1.0
stdlib ssl LibreSSL 2.2.7
cryptography 2.6.1 - OpenSSL LibreSSL 2.2.7
pyOpenSSL 19.0.0 - OpenSSL LibreSSL 2.2.7
PyCrypto 2.6.1
PyCryptodome 3.6.6
ctypes 1.1.0
gmpy2 2.0.8 with:
	MP (Multiple-precision library) - GMP 6.1.2
	MPFR (Floating-point library) - None
	MPC (Complex library) - None
Cython 0.29.5
""subprocess32"" module is present.
pysqlite2 2.8.3 - sqlite 3.27.1
setproctitle 1.1.10
psutil 5.6.1
""readline"" module is present.",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/130#issuecomment-484120000,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","A bit rough around the edges. Asking for feedback for nowâ€¦
Fine with using the following OS names?

macos for macOS 10.13 and newer (with the OS-included LibreSSL 2.2.7 for both Python's ssl and cryptography)
osx for OS X 10.8 and newer, up to and including macOS 10.12 (with OS-included OpenSSL 0.9.8 for Python's ssl and upstream wheel for cryptography with embedded OpenSSL).

Would also like to shorten GIT rev from 8 to 7 characters, to match GitHub's short revs. What do you think?
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/130#issuecomment-485123473,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","Fine with using the following OS names?

yes. is much better than what is now in the PR :)

Would also like to shorten GIT rev from 8 to 7 characters, to match GitHub's short revs. What do you think?

there is the possibility of getting a conflict with a size of 7
if you run got --pretty=format:'%h %an %ad %s' --date=short -10 on chevah/server you get 8 ...but on chevah/keycert is 7.
now I don't know if we publish to production for that conflict, so I would say that the probability is low...and if you are annoyed by 8 chars, we can use that.
I prefer to have them at 8 or longer if needed (let git decide what is the minimum)
For example for chevah-keycert
you can use
chevah/chevah-keycert@fc2e35b
or
chevah/chevah-keycert@fc2e
as there are no conflicts.
but for chevah/server for
chevah/server@e1b3059
you can't use an URL of 5 chars....
but I not sure that this is due to the conflicts... because on chevah/keycert I don't see a redirect when using the short SHA....
my guess is that GitHub has 2 types of repos... small repos are handled by some type or server and larger repos by another type",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/130#issuecomment-485123513,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4",ah... I forgot needs-changes,True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/130#issuecomment-485377965,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","Fine with using the following OS names?

yes. is much better than what is now in the PR :)

Would also like to shorten GIT rev from 8 to 7 characters, to match GitHub's short revs. What do you think?

there is the possibility of getting a conflict with a size of 7
if you run got --pretty=format:'%h %an %ad %s' --date=short -10 on chevah/server you get 8 ...but on chevah/keycert is 7.
now I don't know if we publish to production for that conflict, so I would say that the probability is low...and if you are annoyed by 8 chars, we can use that.
I prefer to have them at 8 or longer if needed (let git decide what is the minimum)
[â€¦]

No biggie, was just getting annoyed by not being able to quickly copy/paste git revs for Python packages from GitHub, which only shows 7 characters by default.",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/130#issuecomment-485395743,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","Also removed here special treatment for SLES 11 with Security Module. Buildmaster updated accordingly. While at it, have shrunk the list of the review target considerably for python-package, as starting Eliseni, Foi, Mosna, and so many other rarely-used VMs is not fun.
Updated spreadsheet with required dependency and associated exported CSV file. Have you looked at them? What do you think of this arrangement? Flat ODS file for easy editing in LibreOffice and exported CSV for easy-to-check diffs.
On a related note, there is no longer any known security issue with python-package on all supported platforms. :-]
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,130,2019-04-12T06:59:18Z,2019-04-26T07:31:07Z,2019-04-26T07:31:13Z,MERGED,True,493950,53,1311,https://github.com/dumol,[#5247] Stop using Homebrew's OpenSSL libs.,14,['needs-merge'],https://github.com/chevah/python-package/pull/130,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/130#issuecomment-486771660,"Scope
Using OS-provided LibreSSL libs for both Python's ssl and cryptography modules, if feasible. As discussed in Track ticket #5243.
This would mean supporting only macOS 10.13 and newer.
Changes
Imported LibreSSL 2.2.7 sources to copy needed headers during the build phase on macOS 10.13.
Drive-by fixes:

Stop building zlib on macOS, as we should only build on 10.13, where the zlib headers are present
Renamed the names for Apple OS'es to osx for OS X 10.8 - macOS 10.12, and macos for macOS 10.13 and newer
Removed special treatment for SLES 11 with SM.
Imported  spreadsheet with dependencies and possible vulnerabilities, for now as both CSV and  ODS.

How to try and test the changes
reviewers: @adiroiban
Please review changes: git diff master paver.sh chevah_build python-modules/chevah-python-test/
Run the automated python-package tests on macOS 10.13, eg.:
https://chevah.com/buildbot/builders/python-package-macos-1013/builds/1
Try the testing packages on both macOS 10.13 and macOS 10.14 for compat / server / etc. Eg.:
https://chevah.com/buildbot/builders/compat-macos-1014/builds/10
https://chevah.com/buildbot/builders/server-macos-1013/builds/4
https://chevah.com/buildbot/builders/server-macos-1014/builds/4","looks good. thanks
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,131,2019-05-08T09:17:24Z,2019-05-08T12:29:02Z,2019-06-20T08:30:54Z,MERGED,True,86,23,4,https://github.com/dumol,[#5265] OpenBSD 6.5 cryptography build fix.,4,['needs-merge'],https://github.com/chevah/python-package/pull/131,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/131,"Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,131,2019-05-08T09:17:24Z,2019-05-08T12:29:02Z,2019-06-20T08:30:54Z,MERGED,True,86,23,4,https://github.com/dumol,[#5265] OpenBSD 6.5 cryptography build fix.,4,['needs-merge'],https://github.com/chevah/python-package/pull/131,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/131#issuecomment-490439039,"Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","Minimal changes in this PR, mostly for my freshly updated OpenBSD 6.5 desktop.
But I wonder if this would be a good time to enable optimizations when building Python, as advised during build:
If you want a release build with all optimizations active (LTO, PGO, etc), 
please run ./configure --enable-optimizations

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,131,2019-05-08T09:17:24Z,2019-05-08T12:29:02Z,2019-06-20T08:30:54Z,MERGED,True,86,23,4,https://github.com/dumol,[#5265] OpenBSD 6.5 cryptography build fix.,4,['needs-merge'],https://github.com/chevah/python-package/pull/131,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/131#issuecomment-490443510,"Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","I think that we can enable optimizations for OpenBSD and Debian x86.. these are some version that we test but don't distribute to customers.
Also, we can see how much slower the optimized compilation end up.
and I think that is better to start with enabling one optimization at a time, rather than enabling all :)

OK, thanks! Will do that here as a drive-by before merging.",True,{}
chevah/python-package,https://github.com/chevah/python-package,131,2019-05-08T09:17:24Z,2019-05-08T12:29:02Z,2019-06-20T08:30:54Z,MERGED,True,86,23,4,https://github.com/dumol,[#5265] OpenBSD 6.5 cryptography build fix.,4,['needs-merge'],https://github.com/chevah/python-package/pull/131,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/131#issuecomment-490466217,"Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","For the record, enabling optimizations didn't work too well on OpenBSD and Debian x86. There's a suite of 400 tests that runs when optimizations are set and many tests fail. Eg. https://chevah.com/buildbot/builders/python-package-debian-9-x86/builds/7/steps/build/logs/stdio.
The used diff:
diff --git a/chevah_build b/chevah_build
index f6155c6a..7d7f0d2f 100755
--- a/chevah_build
+++ b/chevah_build
@@ -402,9 +402,12 @@ case $OS in
         # Beware that zlib headers are not present either on macOS 10.14.
         # We don't care here because we build on 10.13.
         ;;
-    freebsd*|openbsd*)
+    freebsd*)
         export CC=""clang""
         export CXX=""clang++""
+    openbsd*)
+        # If you specifically set CC as ""clang"", optimized Python build fails.
+        # More at https://bugs.python.org/issue36002.
         export BUILD_LIBFFI=""yes""
         if [ ""$OS"" = ""openbsd65"" ]; then
             # Latest cryptography (2.6.1) fails to build on OpenBSD 6.5.
diff --git a/src/python/chevahbs b/src/python/chevahbs
index b6fc62c7..0544fe0f 100755
--- a/src/python/chevahbs
+++ b/src/python/chevahbs
@@ -133,9 +133,17 @@ chevahbs_configure() {
             LDFLAGS=""$LDFLAGS -lncurses""
             ;;
         openbsd*)
-            # In OpenBSD 6.1 and newer we need to mark the Python binary as
+            # On OpenBSD 6.1 and newer we need to mark the Python binary as
             # ""wxneeded"" because it breaks the mandatory W^X protection.
             LDFLAGS=""$LDFLAGS -Wl,-z,wxneeded""
+            # Experimentally enabling all optimizations on selected platforms.
+            CONFIG_ARGS=""${CONFIG_ARGS} --enable-optimizations""
+            ;;
+        debian*)
+            # Experimentally enabling all optimizations on selected platforms.
+            if [ ""$ARCH"" = ""x86""  ]; then
+                CONFIG_ARGS=""${CONFIG_ARGS} --enable-optimizations""
+            fi
             ;;
     esac",True,{}
chevah/python-package,https://github.com/chevah/python-package,131,2019-05-08T09:17:24Z,2019-05-08T12:29:02Z,2019-06-20T08:30:54Z,MERGED,True,86,23,4,https://github.com/dumol,[#5265] OpenBSD 6.5 cryptography build fix.,4,['needs-merge'],https://github.com/chevah/python-package/pull/131,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/131#issuecomment-490501876,"Scope
Cryptography fails to build on OpenBSD 6.5.
High prio, because I have upgraded to 6.5 and can't use paver stuff locally.
Changes
Used the  OpenBSD -current  patches for cryptography 2.6.1 to build a special tarball to be used on OpenBSD 6.5
Drive-by changes:

updated paver stuff
fixed deps for Debian 9, for which a Python package was retroactively built.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","I can't see the test results in the output... is too noisy.
I think that we need to update buildbot to have a separate step for the python tests",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/132,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/132#issuecomment-504396323,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/132#issuecomment-504454310,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","I've tried the unsupported platform as wellâ€¦
HP-UX is not supported by bcrypt:
building '_bcrypt' extension
creating build/temp.hp-ux-B.11.31-ia64-2.7/build
creating build/temp.hp-ux-B.11.31-ia64-2.7/build/temp.hp-ux-B.11.31-ia64-2.7
creating build/temp.hp-ux-B.11.31-ia64-2.7/src
creating build/temp.hp-ux-B.11.31-ia64-2.7/src/_csrc
/opt/aCC/bin/cc -w +DD32 +z -g -DNDEBUG -O +z -Isrc/_csrc -I/srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux/build/build/python2.7-hpux1131-ia64/include -I/srv/buildslave/runtime/build-hpux1131-ia64/slave/python-package-hpux/build/build/python2.7-hpux1131-ia64/include/python2.7 -c build/temp.hp-ux-B.11.31-ia64-2.7/_bcrypt.c -o build/temp.hp-ux-B.11.31-ia64-2.7/build/temp.hp-ux-B.11.31-ia64-2.7/_bcrypt.o
""src/_csrc/portable_endian.h"", line 218: error #2035: #error directive: platform not supported
  #   error platform not supported
      ^

""src/_csrc/pycabcrypt.h"", line 33: error #2020: identifier ""u_int8_t"" is undefined
  int encode_base64(char *, const u_int8_t *, size_t);
                                  ^

2 errors detected in the compilation of ""build/temp.hp-ux-B.11.31-ia64-2.7/_bcrypt.c"".
error: command '/opt/aCC/bin/cc' failed with exit status 2",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/132#issuecomment-504596955,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","Thanks for the work.
I forgot to mention that this is only needed for v4... so only Win, Linux and OSX.
For the future, any change done to python package, is only needed for Win / Linux and OSX.",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/132#issuecomment-505114319,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","It looks good...so this is the change for both bcrypt and a new alpine 3.10 slave?
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/132#issuecomment-505352241,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","It looks good...so this is the change for both bcrypt and a new alpine 3.10 slave?

Yes, both. Drive-by fixes list is ducked below the verbose error output from Solaris x64.",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/132#issuecomment-505356689,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","I was asking as I it looks like there is no Alpine 3.10 binary
For testing, I was using this code https://github.com/chevah/server/compare/4484-conch-without-pycrypto
https://chevah.com/buildbot/builders/server-alpine-310/builds/0",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/132#issuecomment-505366028,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","I was asking as I it looks like there is no Alpine 3.10 binary

There is no uploaded Alpine 3.10 package for latest rev in this branch because I've only triggered test_review here. Which doesn't include Alpine 3.10 yet, only Alpine 3.7, which is stable for compat / python-package / server.
I've manually triggered a build for Alpine 3.10 for latest rev, manually sync'ed the results to binary.chevah.com and retried your build at https://chevah.com/buildbot/builders/server-alpine-310/builds/1.
I expect a few issues with the switch back to OpenSSL, I could try fix them (already have a ticket for that), if it's not too much of a bother. Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/132#issuecomment-505800763,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","Forgot to askâ€¦ @adiroiban, do we care about CVE-2019-1543? If yes, then I'll upgrade cryptography to 2.7, as this is fixed in the OpenSSL wheels included in 2.7.
OpenSSL project didn't care enough about this to release a new version to fix it though, judging by https://www.openssl.org/news/vulnerabilities-1.1.1.html. It was fixed with 1.1.1c when its time came.",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/132#issuecomment-505804484,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","Thanks for the comment
I don't think that we need a new release now... but I guess that for the future we can consider updating crypgography each time there is a new PR for python-package... if is not too hard",True,{}
chevah/python-package,https://github.com/chevah/python-package,132,2019-06-20T08:30:18Z,2019-06-26T09:40:32Z,2019-06-26T13:14:19Z,MERGED,True,7159,707,34,https://github.com/dumol,[#5281] Added bcrypt and Alpine 3.10.,11,['needs-merge'],https://github.com/chevah/python-package/pull/132,https://github.com/dumol,11,https://github.com/chevah/python-package/pull/132#issuecomment-505869180,"Scope
Add bcrypt to python-package
This is needed to support private SSH keys encrypted using bcrypt
Changes
Added bcrypt package and a simple test for it.
But not on HP-UX, where it is totally unsupported, see comment for details.
On Solaris 10 x64 there were a couple of issues:

System libffi is missing libffi.pc, which is needed for bcrypt build.
With our own libffi, bcrypt build still fails with:

~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build/build/bcrypt-3.1.7 ~/runtime/build-solaris10-x64/slave/python-package-solaris-10/build
""_configtest.c"", line 1: warning: implicit function declaration: __sync_synchronize
ld: fatal: file _configtest.o: wrong ELF class: ELFCLASS64
ld: fatal: file processing errors. No output written to _configtest
Note: will not use '__sync_synchronize()' in the C code
***** The above error message can be safely ignored.

""c/_cffi_backend.c"", line 7205: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(char, char) returning char
""c/_cffi_backend.c"", line 7206: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, long) returning long
""c/_cffi_backend.c"", line 7207: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long long, long long) returning long long
""c/_cffi_backend.c"", line 7208: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning double
""c/_cffi_backend.c"", line 7209: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(float, double) returning float
""c/_cffi_backend.c"", line 7210: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(void) returning void
""c/_cffi_backend.c"", line 7211: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to int) returning pointer to int
""c/_cffi_backend.c"", line 7212: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7214: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int, ...) returning int
""c/_cffi_backend.c"", line 7215: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc7_s {unsigned char a1, short a2}
""c/_cffi_backend.c"", line 7216: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc11_s {int a1, int a2}
""c/_cffi_backend.c"", line 7217: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc12_s {double a1}
""c/_cffi_backend.c"", line 7218: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc13_s {int a1, int a2, int a3}
""c/_cffi_backend.c"", line 7219: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc14_s {float a1}
""c/_cffi_backend.c"", line 7220: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc15_s {float a1, int a2}
""c/_cffi_backend.c"", line 7221: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc16_s {float a1, float a2}
""c/_cffi_backend.c"", line 7222: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(int) returning struct _testfunc17_s {int a1, float a2}
""c/_cffi_backend.c"", line 7223: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc17_s {int a1, float a2}) returning int
""c/_cffi_backend.c"", line 7224: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(long double, int) returning long double
""c/_cffi_backend.c"", line 7225: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _testfunc7_s {unsigned char a1, short a2}) returning short
""c/_cffi_backend.c"", line 7226: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc21_s {int a, int b, int c, int d, int e, int f, int g, int h, int i, int j}) returning int
""c/_cffi_backend.c"", line 7227: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(struct _testfunc22_s {array[10] of int a}, struct _testfunc22_s {array[10] of int a}) returning struct _testfunc22_s {array[10] of int a}
""c/_cffi_backend.c"", line 7228: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to char) returning int
""c/_cffi_backend.c"", line 7499: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7500: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7501: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7502: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7503: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7504: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7505: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7506: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7507: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7508: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7509: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7510: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7511: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7512: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7513: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7514: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7515: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7516: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7517: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7518: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7519: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7520: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7521: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7522: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7523: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7524: warning: initialization type mismatch
""c/_cffi_backend.c"", line 7525: warning: initialization type mismatch
""c/realize_c_type.c"", line 653: warning: syntax error:  empty declaration
""c/cdlopen.c"", line 196: warning: assignment type mismatch:
	pointer to void ""="" pointer to function(pointer to struct _cffi_getconst_s {unsigned long long value, pointer to const struct _cffi_type_context_s {..} ctx, int gindex}) returning int

This is fixable with forcing a 32bit build for Solaris 10 on amd64 arch as well. Note that for all the other Unix flavours we are building 32bit binaries, Solaris 10 x64 was the last one standing on 64bit ground.
64bit builds might be fixable on Solaris 10 x64, but I haven't tried hard, not sure it's worth the trouble.
Drive-by fixes:

support for Alpine 3.10
external deps doc fixes and updates.

How to try and test the changes
reviewers: @adiroiban
Please review changes in our code: git diff master chevah_build python-modules/chevah-python-test
Run the automated tests.
Assess if building 32bit binaries on Solaris 10 amd64 is acceptable or should we try harder to keep the Solaris amd64 builds 64bit-only.","I don't think that we need a new release now... but I guess that for the future we can consider updating crypgography each time there is a new PR for python-package... if is not too hard

I think I'll do it now, in a separate PR, because I broke HP-UX and I don't like that in master. Thanks!",True,{'THUMBS_UP': ['https://github.com/adiroiban']}
chevah/python-package,https://github.com/chevah/python-package,133,2019-06-26T14:45:38Z,2019-06-27T11:51:59Z,2019-06-27T11:52:04Z,MERGED,True,19,32,2,https://github.com/dumol,[#5286] Cryptography 2.7 update. HP-UX fixes.,3,['needs-merge'],https://github.com/chevah/python-package/pull/133,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/133,"Scope
Fix HP-UX build, the work in #132 broke it a couple of ways.
While at it, update cryptography to 2.7 for CVE-2019-1543, fixed in OpenSSL 1.1.1c.
Changes
Fixed HP-UX build to not build or test bcrypt package.
Updated cryptography to latest stable version, 2.7.
Uploaded 2.7 cryptography source package and wheels for Windows / OS X / SLES 11 on binary server.
How to try and test the changes
reviewers:  @adiroiban
Please review changes.
Run the automated tests. For ALL slaves. :-]","Scope
Fix HP-UX build, the work in #132 broke it a couple of ways.
While at it, update cryptography to 2.7 for CVE-2019-1543, fixed in OpenSSL 1.1.1c.
Changes
Fixed HP-UX build to not build or test bcrypt package.
Updated cryptography to latest stable version, 2.7.
Uploaded 2.7 cryptography source package and wheels for Windows / OS X / SLES 11 on binary server.
How to try and test the changes
reviewers:  @adiroiban
Please review changes.
Run the automated tests. For ALL slaves. :-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,133,2019-06-26T14:45:38Z,2019-06-27T11:51:59Z,2019-06-27T11:52:04Z,MERGED,True,19,32,2,https://github.com/dumol,[#5286] Cryptography 2.7 update. HP-UX fixes.,3,['needs-merge'],https://github.com/chevah/python-package/pull/133,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/133#issuecomment-506266021,"Scope
Fix HP-UX build, the work in #132 broke it a couple of ways.
While at it, update cryptography to 2.7 for CVE-2019-1543, fixed in OpenSSL 1.1.1c.
Changes
Fixed HP-UX build to not build or test bcrypt package.
Updated cryptography to latest stable version, 2.7.
Uploaded 2.7 cryptography source package and wheels for Windows / OS X / SLES 11 on binary server.
How to try and test the changes
reviewers:  @adiroiban
Please review changes.
Run the automated tests. For ALL slaves. :-]",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,134,2019-07-25T09:48:51Z,2019-07-25T10:05:46Z,2020-06-25T09:33:42Z,CLOSED,False,1304,7542,84,https://github.com/dumol,Update to pysqlite3.,3,[],https://github.com/chevah/python-package/pull/134,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/134,"Scope
From #chevah logs:
2019-07-22T15:56:11  <adi[m]> dumol: it looks like there is a new python sqlite driver https://github.com/coleifer/pysqlite3
2019-07-22T15:56:38  <adi[m]> the one that we use now is from Aug 2016
2019-07-22T15:57:28  <adi[m]> and is buggy ... and Laura found a bug in Windows
2019-07-22T16:01:29  <adi[m]> but I don't know if that verion works with python2.7
2019-07-22T16:01:40  <adi[m]> as it the version from upstream
2019-07-22T16:01:49  <adi[m]> so we might just need to patch our python 2.7 code
2019-07-22T16:04:56  <adi[m]> as a start, can you please try to see if you can compile that code with python2.7 and run the standard tests
Changes
Replaced pysqlite version 2.8.3 with pysqlite3 0.2.1.
Moved command_build_pysqlite after command_build_python_extra_libraries, as it requires setuptools.
How to try and test the changes
reviewers: @adiroiban
This was a quick try.
PR added to not forget about it.","Scope
From #chevah logs:
2019-07-22T15:56:11  <adi[m]> dumol: it looks like there is a new python sqlite driver https://github.com/coleifer/pysqlite3
2019-07-22T15:56:38  <adi[m]> the one that we use now is from Aug 2016
2019-07-22T15:57:28  <adi[m]> and is buggy ... and Laura found a bug in Windows
2019-07-22T16:01:29  <adi[m]> but I don't know if that verion works with python2.7
2019-07-22T16:01:40  <adi[m]> as it the version from upstream
2019-07-22T16:01:49  <adi[m]> so we might just need to patch our python 2.7 code
2019-07-22T16:04:56  <adi[m]> as a start, can you please try to see if you can compile that code with python2.7 and run the standard tests
Changes
Replaced pysqlite version 2.8.3 with pysqlite3 0.2.1.
Moved command_build_pysqlite after command_build_python_extra_libraries, as it requires setuptools.
How to try and test the changes
reviewers: @adiroiban
This was a quick try.
PR added to not forget about it.",True,{}
chevah/python-package,https://github.com/chevah/python-package,134,2019-07-25T09:48:51Z,2019-07-25T10:05:46Z,2020-06-25T09:33:42Z,CLOSED,False,1304,7542,84,https://github.com/dumol,Update to pysqlite3.,3,[],https://github.com/chevah/python-package/pull/134,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/134#issuecomment-514977825,"Scope
From #chevah logs:
2019-07-22T15:56:11  <adi[m]> dumol: it looks like there is a new python sqlite driver https://github.com/coleifer/pysqlite3
2019-07-22T15:56:38  <adi[m]> the one that we use now is from Aug 2016
2019-07-22T15:57:28  <adi[m]> and is buggy ... and Laura found a bug in Windows
2019-07-22T16:01:29  <adi[m]> but I don't know if that verion works with python2.7
2019-07-22T16:01:40  <adi[m]> as it the version from upstream
2019-07-22T16:01:49  <adi[m]> so we might just need to patch our python 2.7 code
2019-07-22T16:04:56  <adi[m]> as a start, can you please try to see if you can compile that code with python2.7 and run the standard tests
Changes
Replaced pysqlite version 2.8.3 with pysqlite3 0.2.1.
Moved command_build_pysqlite after command_build_python_extra_libraries, as it requires setuptools.
How to try and test the changes
reviewers: @adiroiban
This was a quick try.
PR added to not forget about it.","Building the new module currently fails with:
/srv/buildslave/runtime/build-ubuntu1804-x64/slave/python-package-ubuntu-1804/build/build/pysqlite /srv/buildslave/runtime/build-ubuntu1804-x64/slave/python-package-ubuntu-1804/build
running build_static
Builds a C extension using a sqlite3 amalgamation
building 'pysqlite3._sqlite3' extension
creating build
creating build/temp.linux-x86_64-2.7
creating build/temp.linux-x86_64-2.7/src
gcc -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -fPIC -DMODULE_NAME=""pysqlite3.dbapi2"" -DSQLITE_ALLOW_COVERING_INDEX_SCAN=1 -DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_LOAD_EXTENSION=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_STAT4=1 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT=1 -DSQLITE_SOUNDEX=1 -DSQLITE_USE_URI=1 -DSQLITE_TEMP_STORE=3 -I. -I/srv/buildslave/runtime/build-ubuntu1804-x64/slave/python-package-ubuntu-1804/build/build/python2.7-ubuntu1804-x64/include/python2.7 -c src/module.c -o build/temp.linux-x86_64-2.7/src/module.o
src/module.c: In function 'module_register_converter':
src/module.c:199:5: warning: implicit declaration of function '_Py_IDENTIFIER'; did you mean '_IO_SCIENTIFIC'? [-Wimplicit-function-declaration]
     _Py_IDENTIFIER(upper);
     ^~~~~~~~~~~~~~
     _IO_SCIENTIFIC
src/module.c:199:20: error: 'upper' undeclared (first use in this function); did you mean 'toupper'?
     _Py_IDENTIFIER(upper);
                    ^~~~~
                    toupper
src/module.c:199:20: note: each undeclared identifier is reported only once for each function it appears in
src/module.c:206:12: warning: implicit declaration of function '_PyObject_CallMethodId'; did you mean 'PyObject_CallMethod'? [-Wimplicit-function-declaration]
     name = _PyObject_CallMethodId(orig_name, &PyId_upper, NULL);
            ^~~~~~~~~~~~~~~~~~~~~~
            PyObject_CallMethod
src/module.c:206:47: error: 'PyId_upper' undeclared (first use in this function); did you mean '_ISupper'?
     name = _PyObject_CallMethodId(orig_name, &PyId_upper, NULL);
                                               ^~~~~~~~~~
                                               _ISupper
src/module.c: At top level:
src/module.c:346:15: error: variable '_sqlite3module' has initializer but incomplete type
 static struct PyModuleDef _sqlite3module = {
               ^~~~~~~~~~~
src/module.c:347:9: error: 'PyModuleDef_HEAD_INIT' undeclared here (not in a function); did you mean 'PyObject_HEAD_INIT'?
         PyModuleDef_HEAD_INIT,
         ^~~~~~~~~~~~~~~~~~~~~
         PyObject_HEAD_INIT
src/module.c:347:9: warning: excess elements in struct initializer
src/module.c:347:9: note: (near initialization for '_sqlite3module')
src/module.c:348:9: warning: excess elements in struct initializer
         ""_sqlite3"",
         ^~~~~~~~~~
src/module.c:348:9: note: (near initialization for '_sqlite3module')
src/module.c:349:9: warning: excess elements in struct initializer
         NULL,
         ^~~~
src/module.c:349:9: note: (near initialization for '_sqlite3module')
src/module.c:350:9: warning: excess elements in struct initializer
         -1,
         ^
src/module.c:350:9: note: (near initialization for '_sqlite3module')
src/module.c:351:9: warning: excess elements in struct initializer
         module_methods,
         ^~~~~~~~~~~~~~
src/module.c:351:9: note: (near initialization for '_sqlite3module')
src/module.c:352:9: warning: excess elements in struct initializer
         NULL,
         ^~~~
src/module.c:352:9: note: (near initialization for '_sqlite3module')
src/module.c:353:9: warning: excess elements in struct initializer
         NULL,
         ^~~~
src/module.c:353:9: note: (near initialization for '_sqlite3module')
src/module.c:354:9: warning: excess elements in struct initializer
         NULL,
         ^~~~
src/module.c:354:9: note: (near initialization for '_sqlite3module')
src/module.c:355:9: warning: excess elements in struct initializer
         NULL
         ^~~~
src/module.c:355:9: note: (near initialization for '_sqlite3module')
src/module.c: In function 'PyInit__sqlite3':
src/module.c:364:14: warning: implicit declaration of function 'PyModule_Create'; did you mean '_PyModule_Clear'? [-Wimplicit-function-declaration]
     module = PyModule_Create(&_sqlite3module);
              ^~~~~~~~~~~~~~~
              _PyModule_Clear
src/module.c:364:12: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
     module = PyModule_Create(&_sqlite3module);
            ^
src/module.c:375:16: warning: 'return' with a value, in function returning void
         return NULL;
                ^~~~
src/module.c:358:16: note: declared here
 PyMODINIT_FUNC PyInit__sqlite3(void)
                ^~~~~~~~~~~~~~~
src/module.c:378:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_ConnectionType);
     ^~~~~~~~~
src/module.c:380:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_CursorType);
     ^~~~~~~~~
src/module.c:382:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_CacheType);
     ^~~~~~~~~
src/module.c:384:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_StatementType);
     ^~~~~~~~~
src/module.c:386:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_PrepareProtocolType);
     ^~~~~~~~~
src/module.c:388:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF(&pysqlite_RowType);
     ^~~~~~~~~
src/module.c:456:5: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
     Py_INCREF((PyObject*)&PyUnicode_Type);
     ^~~~~~~~~
src/module.c:494:12: warning: 'return' with a value, in function returning void
     return module;
            ^~~~~~
src/module.c:358:16: note: declared here
 PyMODINIT_FUNC PyInit__sqlite3(void)
                ^~~~~~~~~~~~~~~
src/module.c: At top level:
src/module.c:346:27: error: storage size of '_sqlite3module' isn't known
 static struct PyModuleDef _sqlite3module = {
                           ^~~~~~~~~~~~~~
error: command 'gcc' failed with exit status 1",True,{}
chevah/python-package,https://github.com/chevah/python-package,134,2019-07-25T09:48:51Z,2019-07-25T10:05:46Z,2020-06-25T09:33:42Z,CLOSED,False,1304,7542,84,https://github.com/dumol,Update to pysqlite3.,3,[],https://github.com/chevah/python-package/pull/134,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/134#issuecomment-514983406,"Scope
From #chevah logs:
2019-07-22T15:56:11  <adi[m]> dumol: it looks like there is a new python sqlite driver https://github.com/coleifer/pysqlite3
2019-07-22T15:56:38  <adi[m]> the one that we use now is from Aug 2016
2019-07-22T15:57:28  <adi[m]> and is buggy ... and Laura found a bug in Windows
2019-07-22T16:01:29  <adi[m]> but I don't know if that verion works with python2.7
2019-07-22T16:01:40  <adi[m]> as it the version from upstream
2019-07-22T16:01:49  <adi[m]> so we might just need to patch our python 2.7 code
2019-07-22T16:04:56  <adi[m]> as a start, can you please try to see if you can compile that code with python2.7 and run the standard tests
Changes
Replaced pysqlite version 2.8.3 with pysqlite3 0.2.1.
Moved command_build_pysqlite after command_build_python_extra_libraries, as it requires setuptools.
How to try and test the changes
reviewers: @adiroiban
This was a quick try.
PR added to not forget about it.","We can close it for now.
I will try to backport some of the changes in our python-package .... but is complicated, as we see the errors on WIndows, and we don't yet have the process to build Python/sqlite from source on Windows...
so I think that as an experiment, I will try with golang... will also need to setup the go compiler on WIndows, but I hope it will be a simple task.",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/135,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/135#issuecomment-515543786,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","More of a FYI for now, before leaving for a weekâ€¦
Check SLES 11 build for the current progress: https://chevah.com/buildbot/builders/python-package-sles-11/builds/74/
As the Python's ssl module still links to the system OpenSSL libs, there's a need to also build them statically as we do with libffi and zlib. If you have a better idea, do let me know, thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/135#issuecomment-518208293,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","For not linking ssl module to system OpenSSL libs.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/135#issuecomment-519544821,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/135#issuecomment-519952505,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","Shortened OS names break compat tests for Windows. Fixing that requires updating brink.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/135#issuecomment-523495944,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","Thanks for working on this. please try brink 0.71.0 :)
Looking forward to the generic linux version :)",True,{}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/135#issuecomment-524246910,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19","An epic journey spanning two 1-week vacations for me, but everythingÂ¹ should work now.
needs-review

Except when it doesn't. :-]",True,{'LAUGH': ['https://github.com/adiroiban']}
chevah/python-package,https://github.com/chevah/python-package,135,2019-07-26T17:51:09Z,2019-09-11T13:18:26Z,2019-09-12T12:07:49Z,MERGED,True,1081221,1760,3054,https://github.com/dumol,[#5298] Generic glibc-based Linux runtime.,22,['needs-merge'],https://github.com/chevah/python-package/pull/135,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/135#issuecomment-524300163,"Scope
Few years back, we had a generic Linux runtime built on Debian's oldstable version. However, since then, OpenSSL's APIs have become more volatile.
So let's have a generic Linux version that includes OpenSSL for everything, as we actually include it for SLES 11 anyway (through the cryptography wheel with OpenSSL 1.1.x).
Include everything else that is needed to have it working on any glibc-based Linux distro: libffi, zlib, libedit.
Changes
Build a generic Linux build with statically-linked OpenSSL libs on SLES 11 and unsupported glibc-based distro (such as RHEL 6, Arch, non-LTS Ubuntu, older LTS versions with OpenSSL 1.0.1, older Debians with OpenSSL 1.0.1, etc).
A generic Linux build must link only to glibc's libs. This means the generic python-package build will:

fail on RHEL 6 - because crypt module links to  /lib64/libfreebl3.so, which belongs to the nss-softokn-freebl package, which can't be uninstalled.
fail on Arch Linux - because various modules link to /usr/lib/libncursesw.so.6 (setproctitle, psutil, bcrypt, cython, scandir, posixsubprocess32).
pass on Ubuntu 14.04.

As glibc is backward-compatible, not forward-compatible, to support SLES 11 with the generic linux build, you have to build it on a system where glibc is the same version or older. More on this at https://abi-laboratory.pro/?view=timeline&l=glibc.
Therefore, ALL slaves set for building generic Linux runtime (rhel-6, ubuntu-1404, arch) have been disabled for python-package in our Buildbot setup through chevah/salt-master@feec288. Except sles-11, which has the oldest glibc version:  2.11.3.
Drive-by fixes:

 Debian builds with libedit, as there's no more a need for it to be as compatible as possible.
 RHEL/SLES detected through /etc/os-release too, it is now present on all supported distros.
 Refactored detect_os() in paver.sh for improved control flow while at it.
 All error outputs in paver.sh should go to stderr, as in chevah_build.
 Shortened some OS names: win, amzn, obsd, fbsd, sol.
 Updated external deps spreadsheets (to be further updated accordingly if PR passes review)

How to try and test the changes
reviewers: @adiroiban
Assess above choices.
Please review changes, eg.:
git diff master paver.conf paver.sh chevah_build src/openssl/chevahbs python-modules/chevah-python-test/

Run the automated tests for python-package, eg. https://chevah.com/buildbot/builders/python-package-group-all/builds/19
Run the automated tests for compat with generic Linux runtime for sles-11 / rhel-6 / arch, eg. https://chevah.com/buildbot/builders/compat-group-all/builds/19",Server PR using binaries generated in this branch: chevah/server#1600,True,{}
chevah/python-package,https://github.com/chevah/python-package,136,2019-10-17T08:18:06Z,2019-11-04T08:58:57Z,2019-11-04T08:59:02Z,MERGED,True,219,102,7,https://github.com/dumol,"[#5328] Improved support for macOS 10.14+, RHEL 8, OpenBSD 6.6, AIX.",9,['needs-merge'],https://github.com/chevah/python-package/pull/136,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/136,"Scope
Our current macOS Python package runs on macOS 10.14 and 10.15 too. But it would be nice to have python-package build on 10.15 with the newest compiler, while being tested on 10.13 with the stable build slaves for macOS. Akin to what we do in Windows, where we build on 2019, but test on 2012 and 2016 tooâ€¦
Maybe switch from using LibreSSL 2.2.7 (default ""OpenSSL"" libs on 10.13) to using 2.6.x (default ""OpenSSL"" libs on 10.14, but also used for OpenSSH in 10.13). Although both versions are present in macOS 10.15, the 2.6.x LibreSSL libs would probably be supported for one more year with security updates by Apple.
Changes
Copy over zlib headers, as we do for LibreSSL when building on macOS, because they are missing on 10.14+.
Have not switched LibreSSL version because version 2.2.7 is actually linked by default on both 10.13 and 10.14. OpenSSH doesn't seem to be linked to libs from /usr/lib. And openssl binary is not linked to default libs on 10.14. More on this in the associated Trac ticket.
Was able to use LibreSSL 2.2.7 when building on macOS 10.14 too, when linking 2.2.7 libs as default in $INSTALL_FOLDER/lib, which is prepended with -L in LDFLAGS. For reference the needed diff:
diff --git a/chevah_build b/chevah_build
index 5149fb07..c16fb8ff 100755
--- a/chevah_build
+++ b/chevah_build
@@ -676,6 +676,13 @@ command_build() {
                 $INSTALL_FOLDER/include/
             echo ""Updating CFLAGS accordingly!""
             export CFLAGS=""$CFLAGS -I${INSTALL_FOLDER}/include""
+            # Hack to link to LibreSSL 2.2.x libs on every macOS version.
+            execute pushd ${INSTALL_FOLDER}/lib/
+                execute ln -s /usr/lib/libssl.35.dylib
+                execute ln -s libssl.35.dylib libssl.dylib
+                execute ln -s /usr/lib/libcrypto.35.dylib
+                execute ln -s libcrypto.35.dylib libcrypto.dylib
+            execute popd
             build 'python' ""Python-$PYTHON_BUILD_VERSION"" ${PYTHON_BUILD_FOLDER}
             ;;
         *)

Have tried the same hack when building on macOS 10.15 too, but not entirely successful. Building is fine, stdlib ssl module seems fine, but loading cryptography for testing errors out with
Abort trap: 6 

Therefore, I will keep using macos-1013 as default macOS builder for now.
Drive-by fixes:

Updated deps for rhel-8 (also documented them in spreadsheet and csv files)
Patch Python to build on OpenBSD 6.6.
Handle files larger than 2GB on AIX.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated test, including macos-1013, rhel-8, and obsd.
No need to update runtime version in other repos, as I have generated required packages manually for RHEL 8 and OpenBSD 6.6 with the current revision in master.","Scope
Our current macOS Python package runs on macOS 10.14 and 10.15 too. But it would be nice to have python-package build on 10.15 with the newest compiler, while being tested on 10.13 with the stable build slaves for macOS. Akin to what we do in Windows, where we build on 2019, but test on 2012 and 2016 tooâ€¦
Maybe switch from using LibreSSL 2.2.7 (default ""OpenSSL"" libs on 10.13) to using 2.6.x (default ""OpenSSL"" libs on 10.14, but also used for OpenSSH in 10.13). Although both versions are present in macOS 10.15, the 2.6.x LibreSSL libs would probably be supported for one more year with security updates by Apple.
Changes
Copy over zlib headers, as we do for LibreSSL when building on macOS, because they are missing on 10.14+.
Have not switched LibreSSL version because version 2.2.7 is actually linked by default on both 10.13 and 10.14. OpenSSH doesn't seem to be linked to libs from /usr/lib. And openssl binary is not linked to default libs on 10.14. More on this in the associated Trac ticket.
Was able to use LibreSSL 2.2.7 when building on macOS 10.14 too, when linking 2.2.7 libs as default in $INSTALL_FOLDER/lib, which is prepended with -L in LDFLAGS. For reference the needed diff:
diff --git a/chevah_build b/chevah_build
index 5149fb07..c16fb8ff 100755
--- a/chevah_build
+++ b/chevah_build
@@ -676,6 +676,13 @@ command_build() {
                 $INSTALL_FOLDER/include/
             echo ""Updating CFLAGS accordingly!""
             export CFLAGS=""$CFLAGS -I${INSTALL_FOLDER}/include""
+            # Hack to link to LibreSSL 2.2.x libs on every macOS version.
+            execute pushd ${INSTALL_FOLDER}/lib/
+                execute ln -s /usr/lib/libssl.35.dylib
+                execute ln -s libssl.35.dylib libssl.dylib
+                execute ln -s /usr/lib/libcrypto.35.dylib
+                execute ln -s libcrypto.35.dylib libcrypto.dylib
+            execute popd
             build 'python' ""Python-$PYTHON_BUILD_VERSION"" ${PYTHON_BUILD_FOLDER}
             ;;
         *)

Have tried the same hack when building on macOS 10.15 too, but not entirely successful. Building is fine, stdlib ssl module seems fine, but loading cryptography for testing errors out with
Abort trap: 6 

Therefore, I will keep using macos-1013 as default macOS builder for now.
Drive-by fixes:

Updated deps for rhel-8 (also documented them in spreadsheet and csv files)
Patch Python to build on OpenBSD 6.6.
Handle files larger than 2GB on AIX.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated test, including macos-1013, rhel-8, and obsd.
No need to update runtime version in other repos, as I have generated required packages manually for RHEL 8 and OpenBSD 6.6 with the current revision in master.",True,{}
chevah/python-package,https://github.com/chevah/python-package,136,2019-10-17T08:18:06Z,2019-11-04T08:58:57Z,2019-11-04T08:59:02Z,MERGED,True,219,102,7,https://github.com/dumol,"[#5328] Improved support for macOS 10.14+, RHEL 8, OpenBSD 6.6, AIX.",9,['needs-merge'],https://github.com/chevah/python-package/pull/136,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/136#issuecomment-543760748,"Scope
Our current macOS Python package runs on macOS 10.14 and 10.15 too. But it would be nice to have python-package build on 10.15 with the newest compiler, while being tested on 10.13 with the stable build slaves for macOS. Akin to what we do in Windows, where we build on 2019, but test on 2012 and 2016 tooâ€¦
Maybe switch from using LibreSSL 2.2.7 (default ""OpenSSL"" libs on 10.13) to using 2.6.x (default ""OpenSSL"" libs on 10.14, but also used for OpenSSH in 10.13). Although both versions are present in macOS 10.15, the 2.6.x LibreSSL libs would probably be supported for one more year with security updates by Apple.
Changes
Copy over zlib headers, as we do for LibreSSL when building on macOS, because they are missing on 10.14+.
Have not switched LibreSSL version because version 2.2.7 is actually linked by default on both 10.13 and 10.14. OpenSSH doesn't seem to be linked to libs from /usr/lib. And openssl binary is not linked to default libs on 10.14. More on this in the associated Trac ticket.
Was able to use LibreSSL 2.2.7 when building on macOS 10.14 too, when linking 2.2.7 libs as default in $INSTALL_FOLDER/lib, which is prepended with -L in LDFLAGS. For reference the needed diff:
diff --git a/chevah_build b/chevah_build
index 5149fb07..c16fb8ff 100755
--- a/chevah_build
+++ b/chevah_build
@@ -676,6 +676,13 @@ command_build() {
                 $INSTALL_FOLDER/include/
             echo ""Updating CFLAGS accordingly!""
             export CFLAGS=""$CFLAGS -I${INSTALL_FOLDER}/include""
+            # Hack to link to LibreSSL 2.2.x libs on every macOS version.
+            execute pushd ${INSTALL_FOLDER}/lib/
+                execute ln -s /usr/lib/libssl.35.dylib
+                execute ln -s libssl.35.dylib libssl.dylib
+                execute ln -s /usr/lib/libcrypto.35.dylib
+                execute ln -s libcrypto.35.dylib libcrypto.dylib
+            execute popd
             build 'python' ""Python-$PYTHON_BUILD_VERSION"" ${PYTHON_BUILD_FOLDER}
             ;;
         *)

Have tried the same hack when building on macOS 10.15 too, but not entirely successful. Building is fine, stdlib ssl module seems fine, but loading cryptography for testing errors out with
Abort trap: 6 

Therefore, I will keep using macos-1013 as default macOS builder for now.
Drive-by fixes:

Updated deps for rhel-8 (also documented them in spreadsheet and csv files)
Patch Python to build on OpenBSD 6.6.
Handle files larger than 2GB on AIX.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated test, including macos-1013, rhel-8, and obsd.
No need to update runtime version in other repos, as I have generated required packages manually for RHEL 8 and OpenBSD 6.6 with the current revision in master.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,136,2019-10-17T08:18:06Z,2019-11-04T08:58:57Z,2019-11-04T08:59:02Z,MERGED,True,219,102,7,https://github.com/dumol,"[#5328] Improved support for macOS 10.14+, RHEL 8, OpenBSD 6.6, AIX.",9,['needs-merge'],https://github.com/chevah/python-package/pull/136,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/136#issuecomment-549262177,"Scope
Our current macOS Python package runs on macOS 10.14 and 10.15 too. But it would be nice to have python-package build on 10.15 with the newest compiler, while being tested on 10.13 with the stable build slaves for macOS. Akin to what we do in Windows, where we build on 2019, but test on 2012 and 2016 tooâ€¦
Maybe switch from using LibreSSL 2.2.7 (default ""OpenSSL"" libs on 10.13) to using 2.6.x (default ""OpenSSL"" libs on 10.14, but also used for OpenSSH in 10.13). Although both versions are present in macOS 10.15, the 2.6.x LibreSSL libs would probably be supported for one more year with security updates by Apple.
Changes
Copy over zlib headers, as we do for LibreSSL when building on macOS, because they are missing on 10.14+.
Have not switched LibreSSL version because version 2.2.7 is actually linked by default on both 10.13 and 10.14. OpenSSH doesn't seem to be linked to libs from /usr/lib. And openssl binary is not linked to default libs on 10.14. More on this in the associated Trac ticket.
Was able to use LibreSSL 2.2.7 when building on macOS 10.14 too, when linking 2.2.7 libs as default in $INSTALL_FOLDER/lib, which is prepended with -L in LDFLAGS. For reference the needed diff:
diff --git a/chevah_build b/chevah_build
index 5149fb07..c16fb8ff 100755
--- a/chevah_build
+++ b/chevah_build
@@ -676,6 +676,13 @@ command_build() {
                 $INSTALL_FOLDER/include/
             echo ""Updating CFLAGS accordingly!""
             export CFLAGS=""$CFLAGS -I${INSTALL_FOLDER}/include""
+            # Hack to link to LibreSSL 2.2.x libs on every macOS version.
+            execute pushd ${INSTALL_FOLDER}/lib/
+                execute ln -s /usr/lib/libssl.35.dylib
+                execute ln -s libssl.35.dylib libssl.dylib
+                execute ln -s /usr/lib/libcrypto.35.dylib
+                execute ln -s libcrypto.35.dylib libcrypto.dylib
+            execute popd
             build 'python' ""Python-$PYTHON_BUILD_VERSION"" ${PYTHON_BUILD_FOLDER}
             ;;
         *)

Have tried the same hack when building on macOS 10.15 too, but not entirely successful. Building is fine, stdlib ssl module seems fine, but loading cryptography for testing errors out with
Abort trap: 6 

Therefore, I will keep using macos-1013 as default macOS builder for now.
Drive-by fixes:

Updated deps for rhel-8 (also documented them in spreadsheet and csv files)
Patch Python to build on OpenBSD 6.6.
Handle files larger than 2GB on AIX.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated test, including macos-1013, rhel-8, and obsd.
No need to update runtime version in other repos, as I have generated required packages manually for RHEL 8 and OpenBSD 6.6 with the current revision in master.","I think that we can try using this python-package build in the chevah/server RHEL8 branch.

Not really needed, as the only changes related here to RHEL 8 are for deps checking. There is already a ""backported"" RHEL Python package for the current revision in master.",True,{}
chevah/python-package,https://github.com/chevah/python-package,137,2019-11-06T12:02:33Z,2019-11-21T14:24:24Z,2019-12-20T14:06:48Z,MERGED,True,149377,49511,8609,https://github.com/dumol,"[#5348] Updates: cryptography 2.8, Python 2.7.17, etc.",11,['needs-merge'],https://github.com/chevah/python-package/pull/137,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/137,"Scope
Update cryptography to 2.8.
This would update OpenSSL to 1.1.1d in wheels we use.
Also update OpenSSL  accordingly where we build it from source, eg. generic Linux.
Changes
Updated cryptography from 2.7 to 2.8, with OpenSSL 1.1.1d.
Updated OpenSSL for generic Linux stdlib ssl module from 1.1.1c to 1.1.1d.
Fixes a number of minor CVEs, more at https://www.openssl.org/news/vulnerabilities-1.1.1.html.
Drive-by updates:

 Python 2.7.16 -> 2.7.17
 SQLite 3.27.1 -> 3.30.1
 libedit 20170329-3.1 -> 20191025-3.1  (back-pedalled on this as readline crashes on Ubuntu)
 asn1crypto 0.24.0 -> 1.2.0
 cffi 1.12.2 -> 1.13.2
 Cython 0.29.5 -> 0.29.14
 ipaddress 1.0.18 -> 1.0.23
 psutil 5.6.1 -> 5.6.5
 pycryptodomex 3.6.6 -> 3.9.1
 pycparser 2.14 -> 2.19
 setuptools 39.0.1 -> 41.6.0
 subprocess32 3.5.3 -> 3.5.4
 wheel 0.25.0 -> 0.33.6
 pywin32 223 -> 225
 six 1.11.0 -> 1.13.0

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/ src/*/chevahbs

Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/30","Scope
Update cryptography to 2.8.
This would update OpenSSL to 1.1.1d in wheels we use.
Also update OpenSSL  accordingly where we build it from source, eg. generic Linux.
Changes
Updated cryptography from 2.7 to 2.8, with OpenSSL 1.1.1d.
Updated OpenSSL for generic Linux stdlib ssl module from 1.1.1c to 1.1.1d.
Fixes a number of minor CVEs, more at https://www.openssl.org/news/vulnerabilities-1.1.1.html.
Drive-by updates:

 Python 2.7.16 -> 2.7.17
 SQLite 3.27.1 -> 3.30.1
 libedit 20170329-3.1 -> 20191025-3.1  (back-pedalled on this as readline crashes on Ubuntu)
 asn1crypto 0.24.0 -> 1.2.0
 cffi 1.12.2 -> 1.13.2
 Cython 0.29.5 -> 0.29.14
 ipaddress 1.0.18 -> 1.0.23
 psutil 5.6.1 -> 5.6.5
 pycryptodomex 3.6.6 -> 3.9.1
 pycparser 2.14 -> 2.19
 setuptools 39.0.1 -> 41.6.0
 subprocess32 3.5.3 -> 3.5.4
 wheel 0.25.0 -> 0.33.6
 pywin32 223 -> 225
 six 1.11.0 -> 1.13.0

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/ src/*/chevahbs

Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/30",True,{}
chevah/python-package,https://github.com/chevah/python-package,137,2019-11-06T12:02:33Z,2019-11-21T14:24:24Z,2019-12-20T14:06:48Z,MERGED,True,149377,49511,8609,https://github.com/dumol,"[#5348] Updates: cryptography 2.8, Python 2.7.17, etc.",11,['needs-merge'],https://github.com/chevah/python-package/pull/137,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/137#issuecomment-551873237,"Scope
Update cryptography to 2.8.
This would update OpenSSL to 1.1.1d in wheels we use.
Also update OpenSSL  accordingly where we build it from source, eg. generic Linux.
Changes
Updated cryptography from 2.7 to 2.8, with OpenSSL 1.1.1d.
Updated OpenSSL for generic Linux stdlib ssl module from 1.1.1c to 1.1.1d.
Fixes a number of minor CVEs, more at https://www.openssl.org/news/vulnerabilities-1.1.1.html.
Drive-by updates:

 Python 2.7.16 -> 2.7.17
 SQLite 3.27.1 -> 3.30.1
 libedit 20170329-3.1 -> 20191025-3.1  (back-pedalled on this as readline crashes on Ubuntu)
 asn1crypto 0.24.0 -> 1.2.0
 cffi 1.12.2 -> 1.13.2
 Cython 0.29.5 -> 0.29.14
 ipaddress 1.0.18 -> 1.0.23
 psutil 5.6.1 -> 5.6.5
 pycryptodomex 3.6.6 -> 3.9.1
 pycparser 2.14 -> 2.19
 setuptools 39.0.1 -> 41.6.0
 subprocess32 3.5.3 -> 3.5.4
 wheel 0.25.0 -> 0.33.6
 pywin32 223 -> 225
 six 1.11.0 -> 1.13.0

How to try and test the changes
reviewers: @adiroiban
Please review changes:
git diff master chevah_build python-modules/chevah-python-test/ src/*/chevahbs

Run the automated tests, eg: https://chevah.com/buildbot/builders/python-package-group-all/builds/30","This basically updates everything but pip (because later versions do not work in our setup) and libedit (where the latest version builds everywhere, but crashes on Ubuntu when I tested for the issue patched in the current version).
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,138,2019-12-19T14:23:13Z,2020-01-22T14:44:17Z,2020-06-25T09:33:39Z,CLOSED,False,1071,803,4,https://github.com/dumol,Updated README for releases and other downloads.,3,[],https://github.com/chevah/python-package/pull/138,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/138,"Scope
Document GitHub releases.
Changes
Mention releases in README.
Also where to find older Python packages.
Drive-by fixes:

 Minor README improvements.
 Updated documented deps.
 Treat all Debian versions as generic Linux.

How to try and test the changes
reviewers: @adiroiban
Please review changes.","Scope
Document GitHub releases.
Changes
Mention releases in README.
Also where to find older Python packages.
Drive-by fixes:

 Minor README improvements.
 Updated documented deps.
 Treat all Debian versions as generic Linux.

How to try and test the changes
reviewers: @adiroiban
Please review changes.",True,{}
chevah/python-package,https://github.com/chevah/python-package,138,2019-12-19T14:23:13Z,2020-01-22T14:44:17Z,2020-06-25T09:33:39Z,CLOSED,False,1071,803,4,https://github.com/dumol,Updated README for releases and other downloads.,3,[],https://github.com/chevah/python-package/pull/138,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/138#issuecomment-567939289,"Scope
Document GitHub releases.
Changes
Mention releases in README.
Also where to find older Python packages.
Drive-by fixes:

 Minor README improvements.
 Updated documented deps.
 Treat all Debian versions as generic Linux.

How to try and test the changes
reviewers: @adiroiban
Please review changes.","This is kind of associated to https://trac.chevah.com/ticket/5279 (where GitHub releases were built), but not really.
Please take a look, thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,138,2019-12-19T14:23:13Z,2020-01-22T14:44:17Z,2020-06-25T09:33:39Z,CLOSED,False,1071,803,4,https://github.com/dumol,Updated README for releases and other downloads.,3,[],https://github.com/chevah/python-package/pull/138,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/138#issuecomment-577213509,"Scope
Document GitHub releases.
Changes
Mention releases in README.
Also where to find older Python packages.
Drive-by fixes:

 Minor README improvements.
 Updated documented deps.
 Treat all Debian versions as generic Linux.

How to try and test the changes
reviewers: @adiroiban
Please review changes.",These changes were merged into #139.,True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/139,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/139#issuecomment-575651802,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Had to disable manifest tricks on Windows x64 to get successful builds, not sure if they are still needed.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/139#issuecomment-576253283,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",needs-changes,True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/139#issuecomment-577217913,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Lots of improvements, please revisit PR text before reviewing the changes. Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/139#issuecomment-577266672,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Thanks.
I have create a ticket for chevah/server so that we can run a full test.
https://trac.chevah.com/ticket/5376
Was the package published to staging ?
MiÈ™u, can you please try to create a branch on chevah/server for ticket/5376 and add it as a distributable.
Thanks!",True,{}
chevah/python-package,https://github.com/chevah/python-package,139,2020-01-17T13:33:15Z,2020-02-05T09:41:00Z,2020-02-05T09:41:08Z,MERGED,True,122854,96891,2623,https://github.com/dumol,[#5370] Windows 64bit package.,24,['needs-merge'],https://github.com/chevah/python-package/pull/139,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/139#issuecomment-577272909,"Scope
Build 64bit Windows package as Windows Nanoserver can't run 32bit binaries.
Changes
Configured Buildbot to also run python-package builds on Server 2016.
Build 32bit Windows package on Server 2016.
Build 64bit Windows package on other Windows versions, including our Server 2019 slaves.
Obviously, had to download some 64bit wheels: cryptography, pywin32, gmpy2. The last one was missing at https://pypi.org/project/gmpy2/#files, so I got it from https://www.lfd.uci.edu/~gohlke/pythonlibs/.
Visual Studio 2008 redistributables updated to version 9.0.30729.9518, using DLLs from Windows Server 2019.
publicKeyToken value is no longer removed from Manifest files.
Lots of small related doc improvements.
Drive-by fixes:

GMP updated from 6.1.2 to 6.2.0
PyOpenSSL updated from 19.0.0 to 19.1.0.
pywin32 updated from version 225 to 227.
Merged in doc changes from #138.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","I have create a ticket for chevah/server so that we can run a full test.
https://trac.chevah.com/ticket/5376
Was the package published to staging ?

This is done automatically for any successful python-package build. And then there's a script that removes packages older than 2 weeks or something.

MiÈ™u, can you please try to create a branch on chevah/server for ticket/5376 and add it as a distributable.

Ack.",True,{}
chevah/python-package,https://github.com/chevah/python-package,140,2020-04-17T10:04:28Z,2020-04-23T10:26:43Z,2020-04-23T10:26:51Z,MERGED,True,527044,781823,10492,https://github.com/dumol,[#5395] Python / OpenSSL / cryptography / psutil updates and bz2 support.,21,['needs-merge'],https://github.com/chevah/python-package/pull/140,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/140,"Scope
Package Python 2.7.18, the final 2.7.x release.
Also update psutil for latest security issues.
Enable bz2 support at least on Linux + Windows + macos... as static bz2 library
Changes
Updated Python to 2.7.18 for everything but Solaris 10. Fixes CVE-2019-18348 and CVE-2020-8492.
Updated OpenSSL sources to 1.1.1g for the generic Linux package to fix CVE-2020-1967.
Updated cryptography to 2.9.1 to fix CVE-2020-1967 for the Windows and generic Linux wheels.
Upstream 2.9+ wheels require OS X 10.9, but our build slave runs 10.8, so specific support for OS X 10.8 - 10.12 was removed.
Also, cryptography 2.9 requires LibreSSL 2.7+, so I've switched macOS to building OpenSSL statically for both stdlib's ssl and cryptography. I've tried the upstream wheel too, but 2.9.1 has not been properly built, more at pyca/cryptography#5215. The build targets 10.8 though, so it should work on older OS X versions as well.
Updated psutil to 5.7.0 to fix CVE-2019-18874. Also re-enabled it on the BSDs, following upstream fixes.
Build bz module everywhere and test for it. It is compiled against system bzip2 libs only where they are installed by default: macOS, Solaris, FreeBSD.
Drive-by fixes:

Updated paver stuff and pavement.py deps.
Removed specific support for SLES 12+, use generic Linux build on all SLES versions.
Added Ubuntu 20.04 support.
Minor updates: cffi, pycparser, setuptools (to 44.x, last major release for Python 2.7), pycryptodomex.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master pavement.py paver.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/
Run the automated tests.
Consider the switch to static OpenSSL 1.1.1 libs for cryptography on macOS.
Try bz2 with the latest testing packages.","Scope
Package Python 2.7.18, the final 2.7.x release.
Also update psutil for latest security issues.
Enable bz2 support at least on Linux + Windows + macos... as static bz2 library
Changes
Updated Python to 2.7.18 for everything but Solaris 10. Fixes CVE-2019-18348 and CVE-2020-8492.
Updated OpenSSL sources to 1.1.1g for the generic Linux package to fix CVE-2020-1967.
Updated cryptography to 2.9.1 to fix CVE-2020-1967 for the Windows and generic Linux wheels.
Upstream 2.9+ wheels require OS X 10.9, but our build slave runs 10.8, so specific support for OS X 10.8 - 10.12 was removed.
Also, cryptography 2.9 requires LibreSSL 2.7+, so I've switched macOS to building OpenSSL statically for both stdlib's ssl and cryptography. I've tried the upstream wheel too, but 2.9.1 has not been properly built, more at pyca/cryptography#5215. The build targets 10.8 though, so it should work on older OS X versions as well.
Updated psutil to 5.7.0 to fix CVE-2019-18874. Also re-enabled it on the BSDs, following upstream fixes.
Build bz module everywhere and test for it. It is compiled against system bzip2 libs only where they are installed by default: macOS, Solaris, FreeBSD.
Drive-by fixes:

Updated paver stuff and pavement.py deps.
Removed specific support for SLES 12+, use generic Linux build on all SLES versions.
Added Ubuntu 20.04 support.
Minor updates: cffi, pycparser, setuptools (to 44.x, last major release for Python 2.7), pycryptodomex.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master pavement.py paver.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/
Run the automated tests.
Consider the switch to static OpenSSL 1.1.1 libs for cryptography on macOS.
Try bz2 with the latest testing packages.",True,{}
chevah/python-package,https://github.com/chevah/python-package,140,2020-04-17T10:04:28Z,2020-04-23T10:26:43Z,2020-04-23T10:26:51Z,MERGED,True,527044,781823,10492,https://github.com/dumol,[#5395] Python / OpenSSL / cryptography / psutil updates and bz2 support.,21,['needs-merge'],https://github.com/chevah/python-package/pull/140,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/140#issuecomment-617690492,"Scope
Package Python 2.7.18, the final 2.7.x release.
Also update psutil for latest security issues.
Enable bz2 support at least on Linux + Windows + macos... as static bz2 library
Changes
Updated Python to 2.7.18 for everything but Solaris 10. Fixes CVE-2019-18348 and CVE-2020-8492.
Updated OpenSSL sources to 1.1.1g for the generic Linux package to fix CVE-2020-1967.
Updated cryptography to 2.9.1 to fix CVE-2020-1967 for the Windows and generic Linux wheels.
Upstream 2.9+ wheels require OS X 10.9, but our build slave runs 10.8, so specific support for OS X 10.8 - 10.12 was removed.
Also, cryptography 2.9 requires LibreSSL 2.7+, so I've switched macOS to building OpenSSL statically for both stdlib's ssl and cryptography. I've tried the upstream wheel too, but 2.9.1 has not been properly built, more at pyca/cryptography#5215. The build targets 10.8 though, so it should work on older OS X versions as well.
Updated psutil to 5.7.0 to fix CVE-2019-18874. Also re-enabled it on the BSDs, following upstream fixes.
Build bz module everywhere and test for it. It is compiled against system bzip2 libs only where they are installed by default: macOS, Solaris, FreeBSD.
Drive-by fixes:

Updated paver stuff and pavement.py deps.
Removed specific support for SLES 12+, use generic Linux build on all SLES versions.
Added Ubuntu 20.04 support.
Minor updates: cffi, pycparser, setuptools (to 44.x, last major release for Python 2.7), pycryptodomex.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master pavement.py paver.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/
Run the automated tests.
Consider the switch to static OpenSSL 1.1.1 libs for cryptography on macOS.
Try bz2 with the latest testing packages.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,140,2020-04-17T10:04:28Z,2020-04-23T10:26:43Z,2020-04-23T10:26:51Z,MERGED,True,527044,781823,10492,https://github.com/dumol,[#5395] Python / OpenSSL / cryptography / psutil updates and bz2 support.,21,['needs-merge'],https://github.com/chevah/python-package/pull/140,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/140#issuecomment-617753336,"Scope
Package Python 2.7.18, the final 2.7.x release.
Also update psutil for latest security issues.
Enable bz2 support at least on Linux + Windows + macos... as static bz2 library
Changes
Updated Python to 2.7.18 for everything but Solaris 10. Fixes CVE-2019-18348 and CVE-2020-8492.
Updated OpenSSL sources to 1.1.1g for the generic Linux package to fix CVE-2020-1967.
Updated cryptography to 2.9.1 to fix CVE-2020-1967 for the Windows and generic Linux wheels.
Upstream 2.9+ wheels require OS X 10.9, but our build slave runs 10.8, so specific support for OS X 10.8 - 10.12 was removed.
Also, cryptography 2.9 requires LibreSSL 2.7+, so I've switched macOS to building OpenSSL statically for both stdlib's ssl and cryptography. I've tried the upstream wheel too, but 2.9.1 has not been properly built, more at pyca/cryptography#5215. The build targets 10.8 though, so it should work on older OS X versions as well.
Updated psutil to 5.7.0 to fix CVE-2019-18874. Also re-enabled it on the BSDs, following upstream fixes.
Build bz module everywhere and test for it. It is compiled against system bzip2 libs only where they are installed by default: macOS, Solaris, FreeBSD.
Drive-by fixes:

Updated paver stuff and pavement.py deps.
Removed specific support for SLES 12+, use generic Linux build on all SLES versions.
Added Ubuntu 20.04 support.
Minor updates: cffi, pycparser, setuptools (to 44.x, last major release for Python 2.7), pycryptodomex.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master pavement.py paver.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/
Run the automated tests.
Consider the switch to static OpenSSL 1.1.1 libs for cryptography on macOS.
Try bz2 with the latest testing packages.","I've switched to building OpenSSL on macOS too, to have latest OpenSSL and cryptography on macOS as well. The way it's built, it should even run on OS X 10.8â€¦ :-]
This could be feasible for Solaris 10 as well, want me to try?",True,{}
chevah/python-package,https://github.com/chevah/python-package,140,2020-04-17T10:04:28Z,2020-04-23T10:26:43Z,2020-04-23T10:26:51Z,MERGED,True,527044,781823,10492,https://github.com/dumol,[#5395] Python / OpenSSL / cryptography / psutil updates and bz2 support.,21,['needs-merge'],https://github.com/chevah/python-package/pull/140,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/140#issuecomment-617836024,"Scope
Package Python 2.7.18, the final 2.7.x release.
Also update psutil for latest security issues.
Enable bz2 support at least on Linux + Windows + macos... as static bz2 library
Changes
Updated Python to 2.7.18 for everything but Solaris 10. Fixes CVE-2019-18348 and CVE-2020-8492.
Updated OpenSSL sources to 1.1.1g for the generic Linux package to fix CVE-2020-1967.
Updated cryptography to 2.9.1 to fix CVE-2020-1967 for the Windows and generic Linux wheels.
Upstream 2.9+ wheels require OS X 10.9, but our build slave runs 10.8, so specific support for OS X 10.8 - 10.12 was removed.
Also, cryptography 2.9 requires LibreSSL 2.7+, so I've switched macOS to building OpenSSL statically for both stdlib's ssl and cryptography. I've tried the upstream wheel too, but 2.9.1 has not been properly built, more at pyca/cryptography#5215. The build targets 10.8 though, so it should work on older OS X versions as well.
Updated psutil to 5.7.0 to fix CVE-2019-18874. Also re-enabled it on the BSDs, following upstream fixes.
Build bz module everywhere and test for it. It is compiled against system bzip2 libs only where they are installed by default: macOS, Solaris, FreeBSD.
Drive-by fixes:

Updated paver stuff and pavement.py deps.
Removed specific support for SLES 12+, use generic Linux build on all SLES versions.
Added Ubuntu 20.04 support.
Minor updates: cffi, pycparser, setuptools (to 44.x, last major release for Python 2.7), pycryptodomex.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master pavement.py paver.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/
Run the automated tests.
Consider the switch to static OpenSSL 1.1.1 libs for cryptography on macOS.
Try bz2 with the latest testing packages.","It looks good.
I am using the files from testing on the  chevah/server RHEL-8 branch... hope all is ok.

This could be feasible for Solaris 10 as well, want me to try?

No :). I think that we should leave Solaris 10 rest in peace .

don't forget to update paver.conf from this branch once this goes to production.
I will wait for the test to finish for chevah/server ...but I think that all is ok and ready to merge
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,142,2020-05-18T12:01:11Z,2020-05-25T14:15:29Z,2020-06-25T09:33:25Z,MERGED,True,23286,20463,5,https://github.com/dumol,Alpine fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/142,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/142,"Scope
Planning to use Alpine Linux on the last leg of my 10-year old desktop.
Changes
Fixed the issues found while building on Alpine 3.11 in a VM on my OpenBSD desktop.
Also updated https://github.com/chevah/python-package/releases/tag/2.7.18.4b61bd67 with the Alpine 3.11 package.
Drive-by fix:

updated get-pip.py.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","Scope
Planning to use Alpine Linux on the last leg of my 10-year old desktop.
Changes
Fixed the issues found while building on Alpine 3.11 in a VM on my OpenBSD desktop.
Also updated https://github.com/chevah/python-package/releases/tag/2.7.18.4b61bd67 with the Alpine 3.11 package.
Drive-by fix:

updated get-pip.py.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,142,2020-05-18T12:01:11Z,2020-05-25T14:15:29Z,2020-06-25T09:33:25Z,MERGED,True,23286,20463,5,https://github.com/dumol,Alpine fixes.,5,['needs-merge'],https://github.com/chevah/python-package/pull/142,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/142#issuecomment-630135313,"Scope
Planning to use Alpine Linux on the last leg of my 10-year old desktop.
Changes
Fixed the issues found while building on Alpine 3.11 in a VM on my OpenBSD desktop.
Also updated https://github.com/chevah/python-package/releases/tag/2.7.18.4b61bd67 with the Alpine 3.11 package.
Drive-by fix:

updated get-pip.py.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the tests.","Stuff I've been working on in my free time today.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/143,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/143#issuecomment-653596278,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","SInce this is an open source project, maybe we can try to compile Python for ARM64 on Travis-CI https://docs.travis-ci.com/user/multi-cpu-architectures/
Let me know if you think is a good idea and if you would like to give it a try .",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/143#issuecomment-653772034,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","SInce this is an open source project, maybe we can try to compile Python for ARM64 on Travis-CI https://docs.travis-ci.com/user/multi-cpu-architectures/

Thanks, looks interesting! But disappointing to see they are also on Ubuntu 16.04â€¦ :-/",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/143#issuecomment-653784524,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","Something I've worked on in my free time this weekâ€¦ Please take a look!
Should probably rename paver stuff to brink and update PIP as well before merging in master.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/143#issuecomment-656818229,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","I will review this after the brink update is merged.
I want to enable travis-ci on ARM64 as part of this PR.",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/143#issuecomment-659324870,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","I will review this after the brink update is merged.
I want to enable travis-ci on ARM64 as part of this PR.

Brink update merged in master and in this branch too.
Looking forward to travis-ci integration too! ;-]",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/143#issuecomment-660899006,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","Some meaningful changes were lost when merging with master.
Also forgot about fixing dangling symlinks in dist/ before packing up.
needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/143#issuecomment-660928588,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.",we also have setuptools-44.1.1-py2.py3-none-any.whl updated...which is the last version with support for python2,True,{}
chevah/python-package,https://github.com/chevah/python-package,143,2020-07-03T11:01:04Z,2020-07-27T10:47:43Z,2020-07-27T10:48:51Z,MERGED,True,771,740,11,https://github.com/dumol,Generic Linux ARM64 package.,27,['needs-merge'],https://github.com/chevah/python-package/pull/143,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/143#issuecomment-662416247,"Scope
Using the Pine64 board again these days, to keep my flat cool.
But with a Debian-based Armbian this time.
Also as a way to test backup and recovery from scratch.
Changes
Used the SD card with the Ubuntu 16.04 image to build a generic Linux arm64 package by:

Setting Ubuntu 16.04 as unsupported in paver.sh to trigger the generic Linux build.
Adapting the generic x64 Linux build for arm64.

Drive-by fixes:

Updated cryptography to latest version: 2.9.2.
Updated setuptools to latest version for Python 2.7x: 44.1.1.
Minor Alpine adjustments for 3.12 (previous PR was for 3.11).
Minor compilation fix for Debian 10 on arm64.
Travis CI integration for ARM64 builds.
Avoid dangling bin/bz* symlinks in the install folder.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run automated tests, esp. the new Travis CI build for ARM64.","As per the updated PR.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/144,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/144#issuecomment-656624870,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","Alpine deps test is fixed in #143.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/144#issuecomment-656654044,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","There is another cleanup that should be done.
Right now, I need the following workaround as otherwise the build fails... due to bzgrep and other broken symlinks
I think that python-package should remove these files before creating the distributable.
    # Remove the build helpers.
    if pave.fs.exists([target, 'lib', 'config']):
        pave.fs.deleteFolder([target, 'lib', 'config'])",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/144#issuecomment-656663116,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","I would like to use this PR to also experiment with GitHub actions and see how we can implement a publish step from GitHub to our site.
One option is to have SFTPPlus running on weeps and have a special account which could upload files with HTTP (maybe on a non-standard port) and that account to be configured to only upload files)
I can setup GitHub action to upload the distributable after a successful build.",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/144#issuecomment-656664309,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.",I want to migrate from Buildbot to GitHub Actions as GitHub Actions has more developers and some nice features like for example cancelling an existing test if a newer version was pushed.,True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/144#issuecomment-657660031,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","I am not sure why buildbot tests are no longer trigerred.

They are not automatically triggered in this repo for every commit in every branch, only for master branch. This is because they take quite a lot, especially on the slower slaves. Imagine the havoc after triggering builds on all slaves marked for review for every commit you've tried with GitHub actionsâ€¦ :-]
I have triggered a test_review now.

The builds on GitHub action works for both MacOS and Windows 2019.
On MacOS they fail as the OS has gettext installed. I think that our buildscript should be updated to not compile gettext, even if gettext library is present. If I remove gettext, then all other tools like wget will fail.

I've tried removing Homebrew altogether before starting building, but it doesn't seem to improve on this. Worse thing, I can't debug it because I can't login to see what linked to /usr/local/opt/gettext/lib/libintl.8.dylib.

On Windows, the tests are failing at compat step.
I hope that you can find out and fix buildbot tests.

Not sure here, do you mean fixing the Windows compat tests on GitHub? On our Buildbot they run just fine.

I think that this can be merged as it is.
Once we have SFTPPlus installed on the download server / binary.chevah.com I can update GitHub action to automatically copy the build files for testing.

You mean automatically copy the packages? But what about the platforms that GitHub doesn't have? What about generic Linux which is build on SLES 11? Even with self-hosted runners, the choice of platforms is quite limited: https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/144#issuecomment-657834182,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","They are not automatically triggered in this repo for every commit in every branch, only for master branch.

Thanks. Makes sense.


I've tried removing Homebrew altogether before starting building, but it doesn't seem to improve on this.

Yes... debugging is complicated.
The plan is to add support for tmux debugging which will be enabled when a commit contains the [debug] word in the commit message.
Debugging is easier when we run on our hosted VMs.
This was just an experiment to discover the issues we have with GitHub actions.
This is also a plan B in case we  have serious problems with our datacenter.


Not sure here, do you mean fixing the Windows compat tests on GitHub? On our Buildbot they run just fine.

I need to see why they are green on buildbot... and why they pass here.. but this is a minor issue.


You mean automatically copy the packages? But what about the platforms that GitHub doesn't have?

We should update our chevah_build script to be able to compile a generic/standalone/static-linked python even when compiled on Ubuntu.
This can be trigerred via an env variable.
I don't plan to fully replace our own hosted slave VM.
But I do plan to replace buildmaster and use GitHub Action runners instead of buildslaves.
Another option is to use Docker.. GithHub Action cloud environment support running things inside docker.
In theory we can use that to build for Alpine.

I tried to load the ENV vars from the fixed build dir used by chevah_build",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/144#issuecomment-658021229,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","We should update our chevah_build script to be able to compile a generic/standalone/static-linked python even when compiled on Ubuntu.
This can be trigerred via an env variable.

Not sure this is a good ideaâ€¦ We generate the generic Linux x64 build on SLES 11 because it has to run on everything from SLES 11 and RHEL 6 to latest Arch.",True,{}
chevah/python-package,https://github.com/chevah/python-package,144,2020-07-09T10:18:35Z,2020-07-16T10:25:58Z,2020-07-16T10:27:08Z,MERGED,True,24500,24175,12,https://github.com/dumol,[#5442] Brink transition.,47,['needs-merge'],https://github.com/chevah/python-package/pull/144,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/144#issuecomment-658075565,"Scope
Transition to brink, as the other repos: server, compat, etc.
Changes
Quick and dirty adaptation for chevah_build.
Drive-by fixes:

Updated PIP to latest version: 20.1.1.
Updated Cython to latest version: 0.29.21
Updated get-pip.py to same version as PIP, to please my OCD.
Run compat tests on fbsd-11, now that they were fixed in compat repo.
Updated pavement.py
Added GitHub Actions for a few OS'es as an experiment.

How to try and test the changes
reviewers: @adiroiban
Review changes.
Run the automated tests.","Not sure this is a good ideaâ€¦ We generate the generic Linux x64 build on SLES 11 because it has to run on everything from SLES 11 and RHEL 6 to latest Arch.

Well.. this is a plan B idea... but in theory the generic linux should work on any modern linux, including Ubuntu 20.04.
There is also Ubuntu 16.04 which is a bit older",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/145,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/145#issuecomment-722371908,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","This now depends on chevah/compat#103 for the platforms with OpenSSL 1.0.2 (Amazon 2, RHEL 7, Solaris 11.4).",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/145#issuecomment-724303528,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","I have enabled the latest python as part of this PR chevah/server#1735
It doesn't look that bad on my laptop but it fails with missing space on the slaves:
https://chevah.com/buildbot/builders/server-ubuntu-2004/builds/957",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/145#issuecomment-724554004,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","I think the cryptography env issue should be fixed by patching the site.py file and set the env there.
You can set the env in all python packages, or maybe just into amz2 and rhel7.
There is another thing that needs to be ""patched""
$ ./build-server/bin/python 
Python 2.7.18 (f321735d, Nov  9 2020, 18:58:17) 
[GCC 9.3.0] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import cryptography
__main__:1: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in a future release.
>>> 

$ ./build-server/bin/python 
Python 2.7.18 (f321735d, Nov  9 2020, 18:58:17) 
[GCC 9.3.0] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import OpenSSL
/home/adi/chevah/server/build-server/lib/python2.7/site-packages/OpenSSL/crypto.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support for it is now deprecated in cryptography, and will be removed in a future release.
  from cryptography import x509


The path is to ignore the warnings
$ ./build-server/bin/python 
Python 2.7.18 (f321735d, Nov  9 2020, 18:58:17) 
[GCC 9.3.0] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import warnings
>>> warnings.filterwarnings('ignore', category=UserWarning, module='OpenSSL.crypto')
>>> import OpenSSL
>>>

In site.py we should have something like this beside the os.environ change.
import warninigs
warnings.filterwarnings(
    'ignore',
    category=UserWarning,
    module='OpenSSL.crypto',
    )",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/145#issuecomment-724556831,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","With these warnings error, I think that we should update the way chevah_build test to put all stderr into a file and fail if the file is non-empty at the end of run",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/145#issuecomment-724584289,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","Thanks.
it looks good, but we need to fix the warnings.
A server run
https://chevah.com/buildbot/builders/server-amzn-2/builds/1306/steps/test/logs/stdio
I think that this should be fixed in python site.py and not in chevah/compat
The required fixed for site.py

Ignore cryptography py2 warning - all OSes
Set cryptography env for older OpenSSL - can be set for all OSes if is easier.

neeed-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/145#issuecomment-725953337,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","I think the cryptography env issue should be fixed by patching the site.py file and set the env there.
You can set the env in all python packages, or maybe just into amz2 and rhel7.

So it's not enough is set in compat? We have to set it here too? (Then maybe we can remove it from compat after the latest python packages are used there?)
In compat the required env was exported unconditionally. The OS'es with OpenSSL 1.0.2 are:

RHEL 7
AMZN 2
AIX
Solaris 11.4


There is another thing that needs to be ""patched""

[â€¦]

In site.py we should have something like this beside the os.environ change.
import warninigs
warnings.filterwarnings(
    'ignore',
    category=UserWarning,
    module='OpenSSL.crypto',
    )


Fine by me, but wouldn't this be kind of dangerous? I gather this suppresses all warnings from cryptographyâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/145#issuecomment-725959872,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","With these warnings error, I think that we should update the way chevah_build test to put all stderr into a file and fail if the file is non-empty at the end of run

A good idea in theory, but in practice we have errors we can't really get rid of. E.g.:

loading our heavily-patched readline returns bind: Invalid command 'enable-meta-key'.
pypi keeps outputting: DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained. pip 21.0 will drop support for Python 2.7 in January 2021. More details about Python 2 support in pip can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support pip 21.0 will remove support for this functionality.
even scandir's test output always goes to stderr.

It's quite messy.",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/dumol,9,https://github.com/chevah/python-package/pull/145#issuecomment-726041598,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","Implemented the above as discussed in private.
At least one more warning remains, on Solaris 10, don't know how to deal with it:
/srv/buildslave/runtime/build-solaris10-x64/slave/python-package-sol-10/build/build/python2.7-sol10-x86/lib/python2.7/site-packages/subprocess32.py:149: RuntimeWarning: The _posixsubprocess module is not being used. Child process reliability may suffer if your program uses threads.
  ""program uses threads."", RuntimeWarning)

For the moment, haven't bothered with the OS'es not included in test_review, e.g. AIX and HP-UX.
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,145,2020-11-04T12:51:14Z,2020-11-16T08:59:56Z,2020-11-16T09:00:02Z,MERGED,True,4875,4456,3285,https://github.com/dumol,[#5508] Cryptography 3.2 and other updates.,31,['needs-merge'],https://github.com/chevah/python-package/pull/145,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/145#issuecomment-726820478,"Scope
Fix CVE-2020-25659.
Changes
Updated cryptography to 3.2.1.
Other updates to latest versions:

OpenSSL 1.1.1g -> 1.1.1h
pip 20.1.1 -> 20.2.4
cffi 1.14.0 -> 1.14.3
psutil 5.7.0 -> 5.7.3
pywin32 227 -> 228.

Drive-by fixes:

Allow latest cryptography with OpenSSL 1.0.2 on specific platforms: RHEL 7, AMZN 2, AIX,  Solaris 11.4.
Suppress specific cryptography warnings in regards to Python 2 and OpenSSL 1.0.2.
Build cryptography on the generic Linux platform (currently CentOS 5.11). There's no need for the upstream wheel any more, since switching for this platform from SLES 11.4.
OpenBSD 6.8 and FreeBSD 12 support.
Brink updates from compat/server repos.

How to try and test the changes
reviewers: @adiroiban
Please review changes excluding source updates, e.g.:
git diff master brink.* chevah_build src/*/chevahbs python-modules/chevah-python-test/","Looks good. Great work.
Please push it into prod.
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/146,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/146#issuecomment-770142743,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","I have removed the pynacl deps from paramiko - paramiko/paramiko#1806
Not sure if and when this will be merged and release...for now we will use a forked paramiko 2.7.2.chevah1",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/146#issuecomment-781309324,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","Now done. This is almost done, but not quite! I'm still waiting for Ubuntu / Red Hat to patch their OpenSSL 1.0.2 in 16.04/7.x for latest CVEs, as disclosed yesterday by OpenSSL. Those patches should be applied on top of our 1.0.2 sources.
Things to consider in addition to what has been done and documented in the PR text:

The Windows wheels for cryptography come with outdated OpenSSL. Same for the upstream Python Windows packages. What to do? Try to build them on Windows as well?
On a related note, pyOpenSSL 20 has dropped support for OpenSSL 1.0.2, but it looks like it still works with it. Being cautious, I've used 19.0.2 on AIX and Solaris 11.4.
For AIX, should we build a single package now? What we build on 5.3 should work on newer versions too, now that we build zlib and OpenSSL statically. (However, psutil still doesn't build on 5.3.)
Should I try to backport the cleanups from pythia? This has the potential to halve package sizesâ€¦ If yes, can I remove pycryptodomex and cython as well, as for pythia?

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/adiroiban,4,https://github.com/chevah/python-package/pull/146#issuecomment-786968643,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","WOW +1,516,782 âˆ’1,157,090 ... this is one huge PR :)
For OpenSSL I will have to trust the upstream developers.

Sorry for the late reply.
I think that we can just merge it and if there are issues we can fix them later
I went with reviewing this diff that looks good.
git diff master.. .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/Lib/

Nice work. Hard work! Thanks!
Looking forward to use the latest python-package ...and more than than to start using python3 with pythia :)
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/dumol,5,https://github.com/chevah/python-package/pull/146#issuecomment-789637402,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","WOW +1,516,782 âˆ’1,157,090 ... this is one huge PR :)

Maybe if we are still using this it would worth trying git sub-modules?

For OpenSSL I will have to trust the upstream developers.
Sorry for the late reply.
I think that we can just merge it and if there are issues we can fix them later
I went with reviewing this diff that looks good.
git diff master.. .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/Lib/


The command I've suggested in the PR text is almost identicalâ€¦ :-]

Nice work. Hard work! Thanks!
Looking forward to use the latest python-package ...and more than than to start using python3 with pythia :)

Thanks! My latest comment might have escaped your attention thoughâ€¦ Can you please also consider #146 (comment)?",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/adiroiban,6,https://github.com/chevah/python-package/pull/146#issuecomment-789840685,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","The Windows wheels for cryptography come with outdated OpenSSL. Same for the upstream Python Windows packages. What to do? Try to build them on Windows as well?

Maybe wait ... I hope they will be updated soon for cryptography.
Windows build should be a separate PR ... as with Python 2.7 no longer available upstream we might need to build it.

On a related note, pyOpenSSL 20 has dropped support for OpenSSL 1.0.2, but it looks like it still works with it. Being cautious, I've used 19.0.2 on AIX and Solaris 11.4.

Thanks. For now we don't need anything from PyOpenSSL 20.

For AIX, should we build a single package now? What we build on 5.3 should work on newer versions too, now that we build zlib and OpenSSL statically. (However, psutil still doesn't build on 5.3.)

Yes. I think that we should drop AIX 5.1 and build a single AIX 7.1 package for AIX.

Should I try to backport the cleanups from pythia? This has the potential to halve package sizesâ€¦ If yes, can I remove pycryptodomex and cython as well, as for pythia?

yes pycryptodomex  and cython can be removed.
and we are very close of removing pycrypto... I think just one PR away.",True,{}
chevah/python-package,https://github.com/chevah/python-package,146,2021-01-20T11:20:36Z,2021-03-05T12:34:30Z,2021-03-05T12:34:35Z,MERGED,True,1097225,737437,9089,https://github.com/dumol,[#5535] Build OpenSSL on AIX.,52,['needs-merge'],https://github.com/chevah/python-package/pull/146,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/146#issuecomment-790451126,"Scope
Embed OpenSSL libs in AIX packages, as for generic Linux.
Changes
I've tried latest OpenSSL 1.1.1, which builds, but its tests never pass on AIX. Further digging through OpenSSL's issue tracker shows AIX build is known to be broken.
OpenSSL 1.0.2 tests sometimes pass (about 1/6 times). So, on AIX, the OpenSSL build is re-tried until tests passes, for up to 20 times.
Therefore, latest public OpenSSL 1.0.2 sources are used. With current security patches from Ubuntu 16.04 on top of them, fixing CVE-2020-1971.
Drive-by changes:

Removed specific support for RHEL 7 and AMZN 2 (because of OpenSSL 1.0.2 deprecation from cryptography).
Updated Python sources from https://github.com/ActiveState/cpython. Fixes CVE-2020-27619, CVE-2020-26116, CVE-2019-20907, CVE-2020-8492. (Except on Windows, where Python is not built from sources.)
Updated OpenSSL sources to 1.1.1j where embedded OpenSSL 1.1.1 is used. Fixes CVE-2020-1971, CVE-2021-23840, CVE-2021-23841.
Updated cryptography to 3.3.2 for OS'es using latest version. Fixes CVE-2020-36242 and adds workaround for CVE-2021-23840.
Updated other Python modules where there were newer versions still supporting Python 2.7: pip, cffi, PyOpenSSL (except on AIX and Solaris), psutil.
Updated GMP and SQLite sources to latest versions.

To be done:

 Patch our OpenSSL 1.0.2 sources for CVE-2021-23840 and CVE-2021-23841 when upstream patches for Ubuntu 16.04 or RHEL 7 are released.
 Patch our Python 2.7.18 sources for CVE-2021-3177 as per ActiveState/cpython#6.
 Update external_deps.* docs accordingly.
 Force rebuilding wheels even when there are cached ones (this has broken the arm64 build when OpenSSL sources were updated without updating cryptography).
 Publish to bin.chevah.com the testing packages built through GitHub actions, as we no longer have a macOS slave.

How to try and test the changes
reviewers: @adiroiban
Please review relevant changes, e.g. git diff master .github/ brink.* chevah_build src/*/chevahbs src/*/*.patch python-modules/chevah-python-test/ src/python/Python-2.7.18/.
In addition, maybe the changes to OpenSSL 1.0.2 sources? be5195d, 1561a11, d9ea8c9, 966d156, c5cf180.
Run the automated tests for all OS'es, e.g. https://chevah.com/buildbot/builders/python-package-group-all/builds/45.","The Windows wheels for cryptography come with outdated OpenSSL. Same for the upstream Python Windows packages. What to do? Try to build them on Windows as well?

Maybe wait ... I hope they will be updated soon for cryptography.

They've already been updated actually. But only for Python 3.6+, cryptography maintainers seem resolute on not supporting 2.7 any more. But maybe you know moreâ€¦

Windows build should be a separate PR ... as with Python 2.7 no longer available upstream we might need to build it.

Agreed. Filled https://trac.chevah.com/ticket/5576. Feel free to raise it's priority if needed. However, I have no idea how much time it'll take or even if it's something I can do, as I'm inexperienced with building stuff on Windows.
Given the security implications, do you want this in the next release of python-package? Or should I do a release after merging this and another one after solving this Windows-only issue?
[â€¦]

and we are very close of removing pycrypto... I think just one PR away.

That would be great too. Probably too late to remove it in this PR though.",True,{}
chevah/python-package,https://github.com/chevah/python-package,147,2021-03-11T09:20:51Z,2021-03-31T10:58:03Z,2021-04-02T13:44:50Z,MERGED,True,1042,1686787,7504,https://github.com/dumol,"[#5576] Build OpenSSL, Python, cryptography on Windows.",24,['needs-merge'],https://github.com/chevah/python-package/pull/147,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/147,"Scope

Build latest OpenSSL 1.1.1 for Python and cryptography on Windows.
Build Python 2.7 from our patched sources on Windows.
Build cryptography 3.3.2, the last version that works with Python 2.7, against updated OpenSSL 1.1.1.

Changes
Use the BAT files from pyca/infra@147cd4e to build latest OpenSSL 1.1.1 and cryptography 3.3.2 on Windows. Fixes CVE-2021-23841, CVE-2021-23840 on Windows.
I've also tried building Python 2.7 on Windows, but it turned out to be much harder than expected. Filled a separate ticket for that: https://trac.chevah.com/ticket/5589.
In the mean time, the PR diffs from ActivePython's repo are used to hot patch the upstream Windows packages with all their current fixes except CVE-2021-3177. Fixes CVE-2019-20907, CVE-2020-26116, CVE-2020-27619, CVE-2020-8492 on Windows.
Drive-by changes:

Updated OpenSSL 1.1.1 sources to 1.1.1k. Fixes CVE-2021-3449 and CVE-2021-3450 on Windows, generic Linux, and macOS.
Also build on Windows 2016 through GitHub actions to test the x86 build.
Removed support for AIX 5/6, HP-UX, Solaris 10/11.2 (including Python 2.7.8 sources).
Solaris 11.4 packages now have solaris114 in their filenames, in line with other OS'es.
Improved package checking.
Other very minor improvements.

How to try and test the changes
reviewers: @adiroiban
git diff master .github/ brink.* functions.sh chevah_build python-modules/ src/*/chevahbs src/openssl/win* src/python/*.diff
https://chevah.com/buildbot/builders/python-package-group-all/builds/49","Scope

Build latest OpenSSL 1.1.1 for Python and cryptography on Windows.
Build Python 2.7 from our patched sources on Windows.
Build cryptography 3.3.2, the last version that works with Python 2.7, against updated OpenSSL 1.1.1.

Changes
Use the BAT files from pyca/infra@147cd4e to build latest OpenSSL 1.1.1 and cryptography 3.3.2 on Windows. Fixes CVE-2021-23841, CVE-2021-23840 on Windows.
I've also tried building Python 2.7 on Windows, but it turned out to be much harder than expected. Filled a separate ticket for that: https://trac.chevah.com/ticket/5589.
In the mean time, the PR diffs from ActivePython's repo are used to hot patch the upstream Windows packages with all their current fixes except CVE-2021-3177. Fixes CVE-2019-20907, CVE-2020-26116, CVE-2020-27619, CVE-2020-8492 on Windows.
Drive-by changes:

Updated OpenSSL 1.1.1 sources to 1.1.1k. Fixes CVE-2021-3449 and CVE-2021-3450 on Windows, generic Linux, and macOS.
Also build on Windows 2016 through GitHub actions to test the x86 build.
Removed support for AIX 5/6, HP-UX, Solaris 10/11.2 (including Python 2.7.8 sources).
Solaris 11.4 packages now have solaris114 in their filenames, in line with other OS'es.
Improved package checking.
Other very minor improvements.

How to try and test the changes
reviewers: @adiroiban
git diff master .github/ brink.* functions.sh chevah_build python-modules/ src/*/chevahbs src/openssl/win* src/python/*.diff
https://chevah.com/buildbot/builders/python-package-group-all/builds/49",True,{}
chevah/python-package,https://github.com/chevah/python-package,147,2021-03-11T09:20:51Z,2021-03-31T10:58:03Z,2021-04-02T13:44:50Z,MERGED,True,1042,1686787,7504,https://github.com/dumol,"[#5576] Build OpenSSL, Python, cryptography on Windows.",24,['needs-merge'],https://github.com/chevah/python-package/pull/147,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/147#issuecomment-802755994,"Scope

Build latest OpenSSL 1.1.1 for Python and cryptography on Windows.
Build Python 2.7 from our patched sources on Windows.
Build cryptography 3.3.2, the last version that works with Python 2.7, against updated OpenSSL 1.1.1.

Changes
Use the BAT files from pyca/infra@147cd4e to build latest OpenSSL 1.1.1 and cryptography 3.3.2 on Windows. Fixes CVE-2021-23841, CVE-2021-23840 on Windows.
I've also tried building Python 2.7 on Windows, but it turned out to be much harder than expected. Filled a separate ticket for that: https://trac.chevah.com/ticket/5589.
In the mean time, the PR diffs from ActivePython's repo are used to hot patch the upstream Windows packages with all their current fixes except CVE-2021-3177. Fixes CVE-2019-20907, CVE-2020-26116, CVE-2020-27619, CVE-2020-8492 on Windows.
Drive-by changes:

Updated OpenSSL 1.1.1 sources to 1.1.1k. Fixes CVE-2021-3449 and CVE-2021-3450 on Windows, generic Linux, and macOS.
Also build on Windows 2016 through GitHub actions to test the x86 build.
Removed support for AIX 5/6, HP-UX, Solaris 10/11.2 (including Python 2.7.8 sources).
Solaris 11.4 packages now have solaris114 in their filenames, in line with other OS'es.
Improved package checking.
Other very minor improvements.

How to try and test the changes
reviewers: @adiroiban
git diff master .github/ brink.* functions.sh chevah_build python-modules/ src/*/chevahbs src/openssl/win* src/python/*.diff
https://chevah.com/buildbot/builders/python-package-group-all/builds/49",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,147,2021-03-11T09:20:51Z,2021-03-31T10:58:03Z,2021-04-02T13:44:50Z,MERGED,True,1042,1686787,7504,https://github.com/dumol,"[#5576] Build OpenSSL, Python, cryptography on Windows.",24,['needs-merge'],https://github.com/chevah/python-package/pull/147,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/147#issuecomment-812537300,"Scope

Build latest OpenSSL 1.1.1 for Python and cryptography on Windows.
Build Python 2.7 from our patched sources on Windows.
Build cryptography 3.3.2, the last version that works with Python 2.7, against updated OpenSSL 1.1.1.

Changes
Use the BAT files from pyca/infra@147cd4e to build latest OpenSSL 1.1.1 and cryptography 3.3.2 on Windows. Fixes CVE-2021-23841, CVE-2021-23840 on Windows.
I've also tried building Python 2.7 on Windows, but it turned out to be much harder than expected. Filled a separate ticket for that: https://trac.chevah.com/ticket/5589.
In the mean time, the PR diffs from ActivePython's repo are used to hot patch the upstream Windows packages with all their current fixes except CVE-2021-3177. Fixes CVE-2019-20907, CVE-2020-26116, CVE-2020-27619, CVE-2020-8492 on Windows.
Drive-by changes:

Updated OpenSSL 1.1.1 sources to 1.1.1k. Fixes CVE-2021-3449 and CVE-2021-3450 on Windows, generic Linux, and macOS.
Also build on Windows 2016 through GitHub actions to test the x86 build.
Removed support for AIX 5/6, HP-UX, Solaris 10/11.2 (including Python 2.7.8 sources).
Solaris 11.4 packages now have solaris114 in their filenames, in line with other OS'es.
Improved package checking.
Other very minor improvements.

How to try and test the changes
reviewers: @adiroiban
git diff master .github/ brink.* functions.sh chevah_build python-modules/ src/*/chevahbs src/openssl/win* src/python/*.diff
https://chevah.com/buildbot/builders/python-package-group-all/builds/49","Ping me once this hits production and I will give it a quick test on compat. (I know we already tests compat with this)...but just to double check.

chevah/compat#108 ;-]",True,{'THUMBS_UP': ['https://github.com/adiroiban']}
chevah/python-package,https://github.com/chevah/python-package,148,2021-06-30T10:13:24Z,2021-07-16T11:44:02Z,2021-07-16T11:44:06Z,MERGED,True,11943,766312,3053,https://github.com/dumol,[#5577] Smaller packages and other cleanups.,88,['needs-merge'],https://github.com/chevah/python-package/pull/148,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/148,"Scope
Backport the package cleanups from pythia to halve the size of the resulting packages.
Including removing pycryptodomex and cython. And pycrypto.
Also, backport the downloading code from chevah/pythia to always use curl to download from GitHub's servers (from published releases).
In addition, add retrying, as exemplified at â€‹https://stackoverflow.com/a/42873372.
Changes
Removed GMP, gmpy2, pycrypto, pycryptodomex, cython.
Backported the package clean-ups from Pythia. Adapted them for Python 2.7, especially on Windows, where there's lots of cruft compared to the minimal Python 3.8 packages.
Backported all brink.sh improvements from Pythia. GitHub releases is the default source for downloading Python packages now. curl is the only supported downloader.
Added retrying options for curl for both checking and downloading online packages. Only options that work on CentOS 5 are used.
PYTHON_PACKAGE_VERSION file now also contains OS and ARCH, just like a package name. While at it, only use 7 characters for the Git revision, like GitHub and Pythia. Also use the Pythia-way of determining it, for consistency across GHA workflows.
Drive-by fixes:

Alpine 3.14 support.
Minor Python updates from ActiveState, fixes CVE-2021-23336. Have stopped short of picking their 2.7.18.x versioning because on Windows we are still using upstream packages with (almost) all their security fixes applied as hot patches. (The exception is CVE-2021-3177, which requires recompiling: ActiveState/cpython@8bf77ab)
SQLite updated to 3.36.0.
Visual C for Python 2.7 is now downloaded from https://binary.chevah.com and installed separately because there's no longer a Chocolatey package as Microsoft has removed the download from their site.
Alpine / RHEL 8 / Generic Linux packages are now built through Docker.
ARM64 is still built through our Pine64 board, but using a GHA runner associated to this repo. I start it manually only when I need it, so there's a low chance of it being exploited. Even then, we should be notified of the fork and I can reflash the SD card.
AIX 7.1 package is built manually on Eliseni on the WPAR set up with the IBM compiler.

How to try and test the changes
reviewers: @adiroiban
To review relevant changes: git diff master .github/ brink.* chevah_build functions.sh publish_dist.sh python-modules/chevah-python-test/ src/*/README src/*/chevahbs
https://bin.chevah.com:20443/testing/2.7.18.71afee7/  was tried for chevah/server in chevah/server#1822.","Scope
Backport the package cleanups from pythia to halve the size of the resulting packages.
Including removing pycryptodomex and cython. And pycrypto.
Also, backport the downloading code from chevah/pythia to always use curl to download from GitHub's servers (from published releases).
In addition, add retrying, as exemplified at â€‹https://stackoverflow.com/a/42873372.
Changes
Removed GMP, gmpy2, pycrypto, pycryptodomex, cython.
Backported the package clean-ups from Pythia. Adapted them for Python 2.7, especially on Windows, where there's lots of cruft compared to the minimal Python 3.8 packages.
Backported all brink.sh improvements from Pythia. GitHub releases is the default source for downloading Python packages now. curl is the only supported downloader.
Added retrying options for curl for both checking and downloading online packages. Only options that work on CentOS 5 are used.
PYTHON_PACKAGE_VERSION file now also contains OS and ARCH, just like a package name. While at it, only use 7 characters for the Git revision, like GitHub and Pythia. Also use the Pythia-way of determining it, for consistency across GHA workflows.
Drive-by fixes:

Alpine 3.14 support.
Minor Python updates from ActiveState, fixes CVE-2021-23336. Have stopped short of picking their 2.7.18.x versioning because on Windows we are still using upstream packages with (almost) all their security fixes applied as hot patches. (The exception is CVE-2021-3177, which requires recompiling: ActiveState/cpython@8bf77ab)
SQLite updated to 3.36.0.
Visual C for Python 2.7 is now downloaded from https://binary.chevah.com and installed separately because there's no longer a Chocolatey package as Microsoft has removed the download from their site.
Alpine / RHEL 8 / Generic Linux packages are now built through Docker.
ARM64 is still built through our Pine64 board, but using a GHA runner associated to this repo. I start it manually only when I need it, so there's a low chance of it being exploited. Even then, we should be notified of the fork and I can reflash the SD card.
AIX 7.1 package is built manually on Eliseni on the WPAR set up with the IBM compiler.

How to try and test the changes
reviewers: @adiroiban
To review relevant changes: git diff master .github/ brink.* chevah_build functions.sh publish_dist.sh python-modules/chevah-python-test/ src/*/README src/*/chevahbs
https://bin.chevah.com:20443/testing/2.7.18.71afee7/  was tried for chevah/server in chevah/server#1822.",True,{}
chevah/python-package,https://github.com/chevah/python-package,148,2021-06-30T10:13:24Z,2021-07-16T11:44:02Z,2021-07-16T11:44:06Z,MERGED,True,11943,766312,3053,https://github.com/dumol,[#5577] Smaller packages and other cleanups.,88,['needs-merge'],https://github.com/chevah/python-package/pull/148,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/148#issuecomment-879047426,"Scope
Backport the package cleanups from pythia to halve the size of the resulting packages.
Including removing pycryptodomex and cython. And pycrypto.
Also, backport the downloading code from chevah/pythia to always use curl to download from GitHub's servers (from published releases).
In addition, add retrying, as exemplified at â€‹https://stackoverflow.com/a/42873372.
Changes
Removed GMP, gmpy2, pycrypto, pycryptodomex, cython.
Backported the package clean-ups from Pythia. Adapted them for Python 2.7, especially on Windows, where there's lots of cruft compared to the minimal Python 3.8 packages.
Backported all brink.sh improvements from Pythia. GitHub releases is the default source for downloading Python packages now. curl is the only supported downloader.
Added retrying options for curl for both checking and downloading online packages. Only options that work on CentOS 5 are used.
PYTHON_PACKAGE_VERSION file now also contains OS and ARCH, just like a package name. While at it, only use 7 characters for the Git revision, like GitHub and Pythia. Also use the Pythia-way of determining it, for consistency across GHA workflows.
Drive-by fixes:

Alpine 3.14 support.
Minor Python updates from ActiveState, fixes CVE-2021-23336. Have stopped short of picking their 2.7.18.x versioning because on Windows we are still using upstream packages with (almost) all their security fixes applied as hot patches. (The exception is CVE-2021-3177, which requires recompiling: ActiveState/cpython@8bf77ab)
SQLite updated to 3.36.0.
Visual C for Python 2.7 is now downloaded from https://binary.chevah.com and installed separately because there's no longer a Chocolatey package as Microsoft has removed the download from their site.
Alpine / RHEL 8 / Generic Linux packages are now built through Docker.
ARM64 is still built through our Pine64 board, but using a GHA runner associated to this repo. I start it manually only when I need it, so there's a low chance of it being exploited. Even then, we should be notified of the fork and I can reflash the SD card.
AIX 7.1 package is built manually on Eliseni on the WPAR set up with the IBM compiler.

How to try and test the changes
reviewers: @adiroiban
To review relevant changes: git diff master .github/ brink.* chevah_build functions.sh publish_dist.sh python-modules/chevah-python-test/ src/*/README src/*/chevahbs
https://bin.chevah.com:20443/testing/2.7.18.71afee7/  was tried for chevah/server in chevah/server#1822.",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,149,2021-07-16T12:20:54Z,2021-07-19T10:13:17Z,2021-07-19T10:13:23Z,MERGED,True,111,68,4,https://github.com/dumol,Master branch workflow fixes.,13,['needs-merge'],https://github.com/chevah/python-package/pull/149,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/149,"Scope
Fix cloning sources independently for both master and PR branches.
Changes
Adapted the relevant code from chevah/server.
Drive-by fixes:

Clone sources independently on all platforms, for consistency.
Make sure stderr output is always shown for our Python tests.

How to try and test the changes
reviewers: @adiroiban","Scope
Fix cloning sources independently for both master and PR branches.
Changes
Adapted the relevant code from chevah/server.
Drive-by fixes:

Clone sources independently on all platforms, for consistency.
Make sure stderr output is always shown for our Python tests.

How to try and test the changes
reviewers: @adiroiban",True,{}
chevah/python-package,https://github.com/chevah/python-package,150,2021-07-19T10:38:11Z,2021-07-23T09:01:17Z,2021-07-23T09:01:21Z,MERGED,True,18,12,2,https://github.com/dumol,Fixed publishing on Windows.,7,['needs-merge'],https://github.com/chevah/python-package/pull/150,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/150,"Scope
Publishing on Windows was broken by a ""cosmetic"" change, just before merging the previous PR into master.
Changes
Switch back to the old sequence of commands for publishing on Windows.
Drive-by changes:

Actually fail when publishing a package fails. At the expense of leaving private keys behind on disk.
Document that cloning sources independently results in broken actions when opening a PR.

How to try and test the changes
reviewers: @adiroiban","Scope
Publishing on Windows was broken by a ""cosmetic"" change, just before merging the previous PR into master.
Changes
Switch back to the old sequence of commands for publishing on Windows.
Drive-by changes:

Actually fail when publishing a package fails. At the expense of leaving private keys behind on disk.
Document that cloning sources independently results in broken actions when opening a PR.

How to try and test the changes
reviewers: @adiroiban",True,{}
chevah/python-package,https://github.com/chevah/python-package,151,2021-07-26T11:26:39Z,2021-08-10T11:07:33Z,2021-08-10T11:07:36Z,MERGED,True,573,949,9,https://github.com/dumol,AIX fixes for building on IBM Cloud.,12,['needs-merge'],https://github.com/chevah/python-package/pull/151,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/151,"Scope
For latest release, the AIX 7.1 package was built on IBM Cloud, as Eliseni lost network connectivity in our datacenter.
Changes
Do not compile on more than 8 threads on AIX. OpenSSL build was consistently failing with 20 threads, so I've used the number from Eliseni.
Install OpenSSL manually on AIX, as on CentOS 5.
Check for all required commands on AIX, not just the generic ones.
Drive-by changes:

Re-enabled compat tests.
Use https://bin.chevah.com:20443/third-party-stuff/ instead of https://binary.chevah.com/third-party-stuff/.
Test for the Perl moduleTest::Simpleeverywhere OpenSSL is built.
Updated documented dependencies and their security-related issues.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Try this branch on an IBM cloud VM, e.g. the current one at 169.47.177.73, which has everything setup. Can you please save it? Thanks!
Pine64 doesn't boot for some reason, but otherwise things should be fine.","Scope
For latest release, the AIX 7.1 package was built on IBM Cloud, as Eliseni lost network connectivity in our datacenter.
Changes
Do not compile on more than 8 threads on AIX. OpenSSL build was consistently failing with 20 threads, so I've used the number from Eliseni.
Install OpenSSL manually on AIX, as on CentOS 5.
Check for all required commands on AIX, not just the generic ones.
Drive-by changes:

Re-enabled compat tests.
Use https://bin.chevah.com:20443/third-party-stuff/ instead of https://binary.chevah.com/third-party-stuff/.
Test for the Perl moduleTest::Simpleeverywhere OpenSSL is built.
Updated documented dependencies and their security-related issues.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Try this branch on an IBM cloud VM, e.g. the current one at 169.47.177.73, which has everything setup. Can you please save it? Thanks!
Pine64 doesn't boot for some reason, but otherwise things should be fine.",True,{}
chevah/python-package,https://github.com/chevah/python-package,152,2021-09-15T07:45:45Z,2021-09-16T09:07:05Z,2021-09-16T10:02:17Z,MERGED,True,2505,814,5573,https://github.com/dumol,[#5727] OpenSSL August 2021 patches.,10,['needs-merge'],https://github.com/chevah/python-package/pull/152,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/152,"Scope
Update python-package with the latest OpenSSL security updates from OpenSSL 1.1.1l. More at â€‹https://www.openssl.org/news/vulnerabilities.html.
Also update OpenSSL 1.0.2 sources for the AIX package using the updated source package for Ubuntu Server 16.04.
In the end, still build the x86 Windows package, to have it ready in case we need it again in server. Therefore, the related brink.sh change in server repo was not backported here.
Changes
Done the above. OpenSSL 1.0.2 patches for CVE-2021-3712 applied from https://launchpad.net/ubuntu/+source/openssl1.0/1.0.2n-1ubuntu5.7.
AIX packages were built manually on both Eliseni's WPAR and an IBM Cloud VM generated from my ""python-package"" saved image. At https://bin.chevah.com:20443/testing/2.7.18.13fe715/, I've uploaded the one from Eliseni as it has an older 7.1 TL (technology level) version: 7100-02 vs 7100-05.
Drive-by changes:

Updated cffi and wheel to the latest versions.
Back to using Start-BitsTransfer on Windows with SFTPPlus 4.13.
Minor Docker optimizations for faster builds.

How to try and test the changes
reviewers: @adiroiban
To review changes:
git diff master .github chevah_build python-modules/chevah-python-test/

To test with server: chevah/server#1855","Scope
Update python-package with the latest OpenSSL security updates from OpenSSL 1.1.1l. More at â€‹https://www.openssl.org/news/vulnerabilities.html.
Also update OpenSSL 1.0.2 sources for the AIX package using the updated source package for Ubuntu Server 16.04.
In the end, still build the x86 Windows package, to have it ready in case we need it again in server. Therefore, the related brink.sh change in server repo was not backported here.
Changes
Done the above. OpenSSL 1.0.2 patches for CVE-2021-3712 applied from https://launchpad.net/ubuntu/+source/openssl1.0/1.0.2n-1ubuntu5.7.
AIX packages were built manually on both Eliseni's WPAR and an IBM Cloud VM generated from my ""python-package"" saved image. At https://bin.chevah.com:20443/testing/2.7.18.13fe715/, I've uploaded the one from Eliseni as it has an older 7.1 TL (technology level) version: 7100-02 vs 7100-05.
Drive-by changes:

Updated cffi and wheel to the latest versions.
Back to using Start-BitsTransfer on Windows with SFTPPlus 4.13.
Minor Docker optimizations for faster builds.

How to try and test the changes
reviewers: @adiroiban
To review changes:
git diff master .github chevah_build python-modules/chevah-python-test/

To test with server: chevah/server#1855",True,{}
chevah/python-package,https://github.com/chevah/python-package,152,2021-09-15T07:45:45Z,2021-09-16T09:07:05Z,2021-09-16T10:02:17Z,MERGED,True,2505,814,5573,https://github.com/dumol,[#5727] OpenSSL August 2021 patches.,10,['needs-merge'],https://github.com/chevah/python-package/pull/152,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/152#issuecomment-919922305,"Scope
Update python-package with the latest OpenSSL security updates from OpenSSL 1.1.1l. More at â€‹https://www.openssl.org/news/vulnerabilities.html.
Also update OpenSSL 1.0.2 sources for the AIX package using the updated source package for Ubuntu Server 16.04.
In the end, still build the x86 Windows package, to have it ready in case we need it again in server. Therefore, the related brink.sh change in server repo was not backported here.
Changes
Done the above. OpenSSL 1.0.2 patches for CVE-2021-3712 applied from https://launchpad.net/ubuntu/+source/openssl1.0/1.0.2n-1ubuntu5.7.
AIX packages were built manually on both Eliseni's WPAR and an IBM Cloud VM generated from my ""python-package"" saved image. At https://bin.chevah.com:20443/testing/2.7.18.13fe715/, I've uploaded the one from Eliseni as it has an older 7.1 TL (technology level) version: 7100-02 vs 7100-05.
Drive-by changes:

Updated cffi and wheel to the latest versions.
Back to using Start-BitsTransfer on Windows with SFTPPlus 4.13.
Minor Docker optimizations for faster builds.

How to try and test the changes
reviewers: @adiroiban
To review changes:
git diff master .github chevah_build python-modules/chevah-python-test/

To test with server: chevah/server#1855",needs-review,True,{}
chevah/python-package,https://github.com/chevah/python-package,153,2021-10-22T08:52:29Z,2021-10-26T07:59:30Z,2021-10-26T07:59:34Z,MERGED,True,29,17,7,https://github.com/dumol,Use bin.chevah.com as PyPI server.,4,['needs-merge'],https://github.com/chevah/python-package/pull/153,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/153,"Scope
pypi.chevah.com is gone, use bin.chevah.com instead.
Changes
Updated brink stuff from server repo to:

Use https://bin.chevah.com:20443/pypi/simple
Use latest python-package revision.

Drive-by fixes:

FreeBSD 13 support.

Requires chevah/compat#119 to pass compat tests.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
Have also tested this on AIX.","Scope
pypi.chevah.com is gone, use bin.chevah.com instead.
Changes
Updated brink stuff from server repo to:

Use https://bin.chevah.com:20443/pypi/simple
Use latest python-package revision.

Drive-by fixes:

FreeBSD 13 support.

Requires chevah/compat#119 to pass compat tests.
How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.
Have also tested this on AIX.",True,{}
chevah/python-package,https://github.com/chevah/python-package,157,2021-10-28T11:46:25Z,2021-11-01T15:46:24Z,2021-11-01T15:46:28Z,MERGED,True,43,25,2,https://github.com/dumol,Minor AIX-related fixes.,7,['needs-merge'],https://github.com/chevah/python-package/pull/157,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/157,"Scope
Fixes #154.
Fixes #155.
Changes
Only use an HTTP PyPI server on AIX for cryptography's deps. The previous check was wrong because it checked $OS before it was defined.
Use the ld hack when building Safety deps AIX, otherwise installing Cython as a dep for PyYAML fails on AIX, where it has to be built.
Drive-by fix:

Enabled basic Bash checks to avoid issues with empty env vars in the future.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
Fixes #154.
Fixes #155.
Changes
Only use an HTTP PyPI server on AIX for cryptography's deps. The previous check was wrong because it checked $OS before it was defined.
Use the ld hack when building Safety deps AIX, otherwise installing Cython as a dep for PyYAML fails on AIX, where it has to be built.
Drive-by fix:

Enabled basic Bash checks to avoid issues with empty env vars in the future.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/158,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/158#issuecomment-957259041,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

The version should be something like 20.3.4+chevah1 ...but version comparison is undefined for custom versions.
But I think that we should ignore the pip warning.
as long a safety is ok, we should also be ok :)
python package versioning is defined in https://www.python.org/dev/peps/pep-0440/",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/158#issuecomment-957270357,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","Thanks, I was looking at pip's history and tried to follow the same convention. Have only found things like 20.2b1 and 10.0.0b1.",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/158#issuecomment-972950393,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","I've tried to double-check all is fine, so I have regenerated the wheel from the 20.3.4chevah branch of chevah/pip, to which I've added a few more commits today.
For the record, this is what I've used on Ubuntu 20.04:
python3 setup.py bdist_wheel --universal

However, this is as not as good as the previous one generated from patching the 20.3.4 release... I get:
Collecting pip==20.3.4chevah1
  Downloading https://bin.chevah.com:20443/pypi/simple/pip/pip-20.3.4chevah1-py2.py3-none-any.whl (1.5 MB)
ERROR: Package 'pip' requires a different Python: 2.7.18 not in '>=3.6'
PWD : /home/runner/work/python-package/python-package/python-package
Fail: /home/runner/work/python-package/python-package/python-package/build/python2.7-ubuntu1804-x64/bin/python python-modules/get-pip.py --index-url=https://bin.chevah.com:20443/pypi/simple --trusted-host=bin.chevah.com --no-cache-dir --no-warn-script-location pip==20.3.4chevah1 --no-setuptools setuptools==44.1.1
Error: Process completed with exit code 1.

For now, I have reverted to a wheel generated from the patched released tarball, for which I've used version 20.3.4chevah0. Let me know what could be wrong, I've used exactly the same changes and the same command as above. I've double-checked and regenerated it, to be sure. Thanks!
needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/158#issuecomment-973021595,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","The current pip package information defined as 3.6 is the minimum version
via https://github.com/chevah/pip/blob/20.3.4chevah/setup.py#L85

It was introduced here https://github.com/chevah/pip/commits/7c775c86df34bffd3b56df58847ca87f8bd5778f
i see that 20.3.4 is the last version with support for 2.7 - https://github.com/pypa/pip/tree/20.3.4
So the patch should be applied on the code from that tag
Make sense?",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/158#issuecomment-973900297,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","Thanks! Our fork didn't have that tag. I've tried yesterday to use what looked to me like the relevant commit, but it definitely wasn't the right stuff.
I have re-forked our repo from command line through changing URL remote, after resetting to that tag. Branched out from there, re-applied the changes, and regenerated the chevah1 wheel. This time it's all goodâ€¦",True,{'HOORAY': ['https://github.com/adiroiban']}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/dumol,7,https://github.com/chevah/python-package/pull/158#issuecomment-1005614076,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","As this has stalled for quite a while, should I also update embedded OpenSSL libs to latest 1.1.1 version, as a drive-by fix?
Bugfixes only this time for 1.1.1m, but stillâ€¦ More at https://www.openssl.org/news/cl111.txt",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,8,https://github.com/chevah/python-package/pull/158#issuecomment-1008684292,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","All good. Thanks and sorry for the delay.
yes. I think that updating openssl would help.",True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,9,https://github.com/chevah/python-package/pull/158#issuecomment-1008684363,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.",needs-changes,True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,10,https://github.com/chevah/python-package/pull/158#issuecomment-1043035865,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.",Thanks. I will wait for the files to hit the testing server and I will give them a try.,True,{}
chevah/python-package,https://github.com/chevah/python-package,158,2021-11-02T09:12:48Z,2022-02-21T12:41:53Z,2022-02-21T12:41:57Z,MERGED,True,12213,7757,3337,https://github.com/dumol,Use patched pip to solve latest security issue.,22,['needs-merge'],https://github.com/chevah/python-package/pull/158,https://github.com/adiroiban,11,https://github.com/chevah/python-package/pull/158#issuecomment-1043054608,"Scope
Safety tests fail in master with:
> pip, installed 20.3.4, affected <21.1, id 42218
Pip version 21.1 stops splitting on unicode separators in git references, which could be maliciously used to install a different revision on the repository. 
https://github.com/pypa/pip/issues/9827

Changes
Backported the fix from https://github.com/pypa/pip/pull/9827/files for pip 20.3.4 and built a wheel versioned as 20.3.4chevah1.
I've also tried version 20.3.5chevah1, but it didn't help in getting rid of the upgrade warning:
WARNING: You are using pip version 20.3.5chevah1; however, version 20.3.4 is available.

Drive-by fixes:

Updated OpenSSL 1.1.1 sources to version 1.1.1m.
Updated SQLite, pyOpenSSL, cffi, psutil, pycparser.
Fixes #159.

How to try and test the changes
reviewers: @adiroiban
Evaluate the fix from https://github.com/pypa/pip/pull/9827/files.
Run the automated tests.","Thanks.
I think that we should merge it.
If we found any issue while running chevah/server tests we can fix it in a separate PR...as this PR is quite big.",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/162,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/162#issuecomment-1088618260,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","This is more difficult than expectedâ€¦ Latest libxcrypt requires Perl 5.14.0, I could not make use of the 5.10.0 version we use on CentOS 5.11 to build OpenSSL. I guess we could build Perl as well, but it looks like overkillâ€¦
(Note that CentOS 6 comes with Perl 5.10.1, so we would need third-party packages to update to a newer Perl version on CentOS 6 too.)
Version 4.4.17 (from April 2020) was the latest version to build without Perl, but it requires Autoconf 2.64 (or higher). This would be present on CentOS 6 (version 2.69), but on CentOS 5 we only have version 2.13.
What do you think we should do?

Also include Perl 5 sources and build it for generic Linux packages. (Or use something like https://perlbrew.pl/.)
Start building generic Linux x64 packages on CentOS 6 with third-party Perl packages.
Just document that on some distros, such as Amazon Linux 2022,  the libxcrypt-compat package is needed.

needs-review",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/adiroiban,3,https://github.com/chevah/python-package/pull/162#issuecomment-1088637759,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","Thanks for the update

Just document that on some distros, like Amazon Linux 2022, the libxcrypt-compat package is needed.

We can do that in chevah/server as a start

Maybe we can just have a separate SFTPPlus build with libxcrypt-compat include for Amazon Linux 2022

I guess that RHEL5 and RHEL6 also need libxcrypt-compat , but they already have it installed by default.


Start building generic Linux x64 packages on CentOS 6 with third-party Perl packages.

If it will also work on RHEL5, we can do it.


Also include Perl 5 sources and build it for generic Linux packages. (Or something like https://perlbrew.pl/.)

Nope to include the Perl 5 source. This repo is already too big.
Maybe perlbrew.pl

needs-changes",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/dumol,4,https://github.com/chevah/python-package/pull/162#issuecomment-1088805756,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","Thanks for the quick feedback!
[â€¦]

Maybe we can just have a separate SFTPPlus build with libxcrypt-compat include for Amazon Linux 2022

You mean have a dedicated package for Amazon Linux 2022, like for RHEL 8?

I guess that RHEL5 and RHEL6 also need libxcrypt-compat , but they already have it installed by default.

It's part of glibc on older distributions.


Start building generic Linux x64 packages on CentOS 6 with third-party Perl packages.

If it will also work on RHEL5, we can do it.

No, it won't work. Linking to the glibc libs in CentOS 6 means RHEL 5 becomes completely unsupported.",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/adiroiban,5,https://github.com/chevah/python-package/pull/162#issuecomment-1088985867,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","You mean have a dedicated package for Amazon Linux 2022, like for RHEL 8?

yes. but I think for the start we should go with the docs to install the extra package for AMZ 2022.

Is strange that the code tries to load libcrypt.so.1 , not libxcrypt .
Can we just build the old libcript for Python ?
    from chevah.compat.unix_users import (
  File ""/opt/sftpplus/lib/python2.7/site-packages/chevah/compat/unix_users.py"", line 13, in <module>
    import crypt
ImportError: libcrypt.so.1: cannot open shared object file: No such file or directory


What I can do, is remove support for OS accounts from Amazon 2022.
So far all customers on Amazon are not using  OS accounts.
I think that we should not bother with building libxcrypt",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/dumol,6,https://github.com/chevah/python-package/pull/162#issuecomment-1090067667,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","You mean have a dedicated package for Amazon Linux 2022, like for RHEL 8?

yes. but I think for the start we should go with the docs to install the extra package for AMZ 2022.

OK, I'll start with that then.

Is strange that the code tries to load libcrypt.so.1 , not libxcrypt .
Can we just build the old libcript for Python ?

Old libcrypt.so was part of glibc. This is gone from newer distros such as AMZN 2022.
Then there's libcrypt.so.1 which is from:

libcrypt package on most distros of today, such as AMZN 2 (or Debian and its derivatives). This is built from glibc sources.
libxcrypt-compat package on newest distros such as AMZN 2022 and current Arch. This is from https://github.com/besser82/libxcrypt, which split from glibc project some time ago, but it's now developed independently. This guide has an extensive explanation: https://fedoraproject.org/wiki/Changes/Replace_glibc_libcrypt_with_libxcrypt.

I guess we could search for the newest glibc which include libcrypt sources that would still build on CentOS 5, butâ€¦ do we want that?
I would rather keep the status-quo as long as there's an easily-installable OS package that solves this issue.

What I can do, is remove support for OS accounts from Amazon 2022. So far all customers on Amazon are not using OS accounts.
I think that we should not bother with building libxcrypt

Why? It's perfectly functional as long as you install libxcrypt-compatâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/adiroiban,7,https://github.com/chevah/python-package/pull/162#issuecomment-1090195495,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","OK. let's go with the docs.


Why? It's perfectly functional as long as you install libxcrypt-compatâ€¦

my plan was like this

if you don't have libxcrypt-compat, sftpplus will not fail, but OS accounts are not available
if you have libxcrypt-compat all is ok",True,{}
chevah/python-package,https://github.com/chevah/python-package,162,2022-04-05T09:53:09Z,,2022-04-06T12:16:40Z,OPEN,False,127563,330,310,https://github.com/dumol,Build libxcrypt.,16,['needs-changes'],https://github.com/chevah/python-package/pull/162,https://github.com/dumol,8,https://github.com/chevah/python-package/pull/162#issuecomment-1090200546,"Scope
Fixes #161.
Changes
WIP
How to try and test the changes
reviewers: WIP
How the changes can be tested and verified by team members.
How to run manual tests.","my plan was like this
* if you don't have libxcrypt-compat, sftpplus will not fail, but OS accounts are not available

* if you have libxcrypt-compat all is ok


Ah, OK, that would be very graceful. Nothing against itâ€¦",True,{}
chevah/python-package,https://github.com/chevah/python-package,163,2022-04-06T11:05:05Z,2022-04-18T08:48:27Z,2022-04-18T08:48:31Z,MERGED,True,76818,46458,6108,https://github.com/dumol,OpenSSL / zlib security updates.,16,['needs-merge'],https://github.com/chevah/python-package/pull/163,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/163,"Scope
Fix CVE-2018-25032 for zlib.
Fix CVE-2022-0778 for OpenSSL.
Changes
Updated zlib sources to version 1.2.12.
Updated OpenSSL 1.1.1 sources for Windows, macOS, and generic Linux to version 1.1.1n. This also adds cipher suites based on DHE_PSK (RFC 4279) and ECDHE_PSK (RFC 5489).
Updated OpenSSL 1.0.2 sources for AIX to version 1.0.2v-chevah4.
Drive-by changes:

Updated libffi sources to version 3.4.2.
Removed workarounds for installing libffi.
Updated brink.{conf,sh} from server repo.
As GitHub's own windows-2016 runners are gone, build win32 package on Windows 2019. The 64bit Windows package is now built on Server 2022.

How to try and test the changes
reviewers: @adiroiban
Review changes, e.g.: git diff master .github/ brink* chevah_build src/*/chevahbs python-modules/chevah-python-test/
Check the automated tests.","Scope
Fix CVE-2018-25032 for zlib.
Fix CVE-2022-0778 for OpenSSL.
Changes
Updated zlib sources to version 1.2.12.
Updated OpenSSL 1.1.1 sources for Windows, macOS, and generic Linux to version 1.1.1n. This also adds cipher suites based on DHE_PSK (RFC 4279) and ECDHE_PSK (RFC 5489).
Updated OpenSSL 1.0.2 sources for AIX to version 1.0.2v-chevah4.
Drive-by changes:

Updated libffi sources to version 3.4.2.
Removed workarounds for installing libffi.
Updated brink.{conf,sh} from server repo.
As GitHub's own windows-2016 runners are gone, build win32 package on Windows 2019. The 64bit Windows package is now built on Server 2022.

How to try and test the changes
reviewers: @adiroiban
Review changes, e.g.: git diff master .github/ brink* chevah_build src/*/chevahbs python-modules/chevah-python-test/
Check the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,163,2022-04-06T11:05:05Z,2022-04-18T08:48:27Z,2022-04-18T08:48:31Z,MERGED,True,76818,46458,6108,https://github.com/dumol,OpenSSL / zlib security updates.,16,['needs-merge'],https://github.com/chevah/python-package/pull/163,https://github.com/adiroiban,2,https://github.com/chevah/python-package/pull/163#issuecomment-1101183683,"Scope
Fix CVE-2018-25032 for zlib.
Fix CVE-2022-0778 for OpenSSL.
Changes
Updated zlib sources to version 1.2.12.
Updated OpenSSL 1.1.1 sources for Windows, macOS, and generic Linux to version 1.1.1n. This also adds cipher suites based on DHE_PSK (RFC 4279) and ECDHE_PSK (RFC 5489).
Updated OpenSSL 1.0.2 sources for AIX to version 1.0.2v-chevah4.
Drive-by changes:

Updated libffi sources to version 3.4.2.
Removed workarounds for installing libffi.
Updated brink.{conf,sh} from server repo.
As GitHub's own windows-2016 runners are gone, build win32 package on Windows 2019. The 64bit Windows package is now built on Server 2022.

How to try and test the changes
reviewers: @adiroiban
Review changes, e.g.: git diff master .github/ brink* chevah_build src/*/chevahbs python-modules/chevah-python-test/
Check the automated tests.","thanks.
Can you please create a chevah/server PR to update the version?
changes-approved",True,{}
chevah/python-package,https://github.com/chevah/python-package,163,2022-04-06T11:05:05Z,2022-04-18T08:48:27Z,2022-04-18T08:48:31Z,MERGED,True,76818,46458,6108,https://github.com/dumol,OpenSSL / zlib security updates.,16,['needs-merge'],https://github.com/chevah/python-package/pull/163,https://github.com/dumol,3,https://github.com/chevah/python-package/pull/163#issuecomment-1101229713,"Scope
Fix CVE-2018-25032 for zlib.
Fix CVE-2022-0778 for OpenSSL.
Changes
Updated zlib sources to version 1.2.12.
Updated OpenSSL 1.1.1 sources for Windows, macOS, and generic Linux to version 1.1.1n. This also adds cipher suites based on DHE_PSK (RFC 4279) and ECDHE_PSK (RFC 5489).
Updated OpenSSL 1.0.2 sources for AIX to version 1.0.2v-chevah4.
Drive-by changes:

Updated libffi sources to version 3.4.2.
Removed workarounds for installing libffi.
Updated brink.{conf,sh} from server repo.
As GitHub's own windows-2016 runners are gone, build win32 package on Windows 2019. The 64bit Windows package is now built on Server 2022.

How to try and test the changes
reviewers: @adiroiban
Review changes, e.g.: git diff master .github/ brink* chevah_build src/*/chevahbs python-modules/chevah-python-test/
Check the automated tests.","Thanks!
If of any importance for chevah-robot, just noticed this is still in Review required mode. I need to forcefully merge it without waiting for requirements to be met.",True,{}
chevah/python-package,https://github.com/chevah/python-package,165,2022-05-04T09:56:19Z,2022-05-10T10:02:16Z,2022-05-10T10:02:20Z,MERGED,True,399,514,9,https://github.com/dumol,Ubuntu 22.04 support.,16,['needs-merge'],https://github.com/chevah/python-package/pull/165,https://github.com/dumol,1,https://github.com/chevah/python-package/pull/165,"Scope
Build an Ubuntu 22.04 package.
Changes
The latest cryptography version to support Python 2.7 is 3.3.2, and that has no support for OpenSSL 3.0.x.
Therefore, use the generic Linux package on Ubuntu 22.04 for now.
For the record, cryptography 3.4.x has been patched to support that for Python 3 though, e.g. https://814773.bugs.gentoo.org/attachment.cgi?id=743943.
Drive-by fixes:

Backported minor improvement from pythia repo: pypi args, pkg mgmt, openssl manual installation, more error checks.
Updated documented external dependencies.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Scope
Build an Ubuntu 22.04 package.
Changes
The latest cryptography version to support Python 2.7 is 3.3.2, and that has no support for OpenSSL 3.0.x.
Therefore, use the generic Linux package on Ubuntu 22.04 for now.
For the record, cryptography 3.4.x has been patched to support that for Python 3 though, e.g. https://814773.bugs.gentoo.org/attachment.cgi?id=743943.
Drive-by fixes:

Backported minor improvement from pythia repo: pypi args, pkg mgmt, openssl manual installation, more error checks.
Updated documented external dependencies.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.",True,{}
chevah/python-package,https://github.com/chevah/python-package,165,2022-05-04T09:56:19Z,2022-05-10T10:02:16Z,2022-05-10T10:02:20Z,MERGED,True,399,514,9,https://github.com/dumol,Ubuntu 22.04 support.,16,['needs-merge'],https://github.com/chevah/python-package/pull/165,https://github.com/dumol,2,https://github.com/chevah/python-package/pull/165#issuecomment-1120928624,"Scope
Build an Ubuntu 22.04 package.
Changes
The latest cryptography version to support Python 2.7 is 3.3.2, and that has no support for OpenSSL 3.0.x.
Therefore, use the generic Linux package on Ubuntu 22.04 for now.
For the record, cryptography 3.4.x has been patched to support that for Python 3 though, e.g. https://814773.bugs.gentoo.org/attachment.cgi?id=743943.
Drive-by fixes:

Backported minor improvement from pythia repo: pypi args, pkg mgmt, openssl manual installation, more error checks.
Updated documented external dependencies.

How to try and test the changes
reviewers: @adiroiban
Please review changes.
Run the automated tests.","Looks good. Thanks.

Thanks for the review!

MiÈ™u, can you take a look and see why centos 8 buils is failing on compat chevah/compat#679
Link to a failure https://github.com/chevah/compat/runs/6333108384?check_suite_focus=true
Run yum -y install git tar which sudo
CentOS Linux 8 - AppStream                       50  B/s |  38  B     00:00    
Error: Failed to download metadata for repo 'appstream': Cannot prepare internal mirrorlist: No URLs in mirrorlist
Error: Process completed with exit code 1.


Probably because IBM killed CentOS. We need to switch to something else there too: Oracle, Rocky, etc. I'll look into it.

You can release this and try to use the updated version on that compat PR.
Thanks!

I don't plan to do a release following the merge of this PR, as there's nothing of substance to be changed. Just like in server repo, use the currently released python-package with the minor update to brink.sh from this branch.",True,{}
