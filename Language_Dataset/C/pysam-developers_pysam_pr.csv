pysam-developers/pysam,https://github.com/pysam-developers/pysam,248,2016-03-07T00:43:18Z,2016-03-07T16:17:57Z,2016-03-07T16:17:57Z,CLOSED,False,43,5,4,https://github.com/kyleabeauchamp,Changes necessary for conda build,1,[],https://github.com/pysam-developers/pysam/pull/248,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/248,"Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.","Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,248,2016-03-07T00:43:18Z,2016-03-07T16:17:57Z,2016-03-07T16:17:57Z,CLOSED,False,43,5,4,https://github.com/kyleabeauchamp,Changes necessary for conda build,1,[],https://github.com/pysam-developers/pysam/pull/248,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/248#issuecomment-193024908,"Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.","I imagine this could be done more cleanly by refactoring some of the buildchain in setup.py and cy_build.py, but the changes here are ""minimally perturbative"" of the non-conda build path, which is probably a good thing for now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,248,2016-03-07T00:43:18Z,2016-03-07T16:17:57Z,2016-03-07T16:17:57Z,CLOSED,False,43,5,4,https://github.com/kyleabeauchamp,Changes necessary for conda build,1,[],https://github.com/pysam-developers/pysam/pull/248,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/248#issuecomment-193027711,"Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.","This would also imply that the conda build that bioconda rolls out would have libcurl disabled.  However, I think that's fine for the time being, right?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,248,2016-03-07T00:43:18Z,2016-03-07T16:17:57Z,2016-03-07T16:17:57Z,CLOSED,False,43,5,4,https://github.com/kyleabeauchamp,Changes necessary for conda build,1,[],https://github.com/pysam-developers/pysam/pull/248,https://github.com/sebastian-luna-valero,4,https://github.com/pysam-developers/pysam/pull/248#issuecomment-193245765,"Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.","Hi Kyle,
I found this thread while I was creating a pysam recipe myself.
A possible workaround is to update setup.py in build.sh as follows:
sed -i'' -e 's/HTSLIB_MODE = \""shared\""/HTSLIB_MODE = \""separate\""/g' setup.py
I think the cause of the problem is having HTSLIB_MODE enforced to ""shared"" in setup.py and then not being able to link with a shared htslib installation:
https://github.com/pysam-developers/pysam/blob/v0.9.0/setup.py#L79
Meanwhile, I have a conda recipe that seems to work:
bioconda/bioconda-recipes#969
Best regards,
Sebastian",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,248,2016-03-07T00:43:18Z,2016-03-07T16:17:57Z,2016-03-07T16:17:57Z,CLOSED,False,43,5,4,https://github.com/kyleabeauchamp,Changes necessary for conda build,1,[],https://github.com/pysam-developers/pysam/pull/248,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/248#issuecomment-193323722,"Added (trivial) support for --old-and-unmanageable build option that avoids egg-style naming.
Added workarounds in build.sh for manually re-naming rpaths on OSX conda builds
Added extra RPATH options in meta.yaml, which fixes the conda builds on linux systems

Once we're happy with this, I'll make a PR to bioconda-recipes that points to the latest git commit.  I think it's fine to just call that ""0.9.0"" for the meantime.","Looks like your recipe is working, so perhaps I don't need the current changes merged.  Not sure.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,252,2016-03-12T20:26:09Z,2016-04-10T19:26:36Z,2016-04-10T19:26:36Z,MERGED,True,16,5,1,https://github.com/kyleabeauchamp,Add test for array dtypes,1,[],https://github.com/pysam-developers/pysam/pull/252,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/252,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/255,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196144457,,Here are some basic tests covering the issues I found.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196145705,,"Here's the output:
nosetests test_samtools_python.py -s -v
test_samtools_python.test_idxstats_parse ... ERROR
test_samtools_python.test_bedcov ... FAIL

======================================================================
ERROR: test_samtools_python.test_idxstats_parse
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""~/anaconda2/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest
    self.test(*self.arg)
  File ""~/src/pysam/tests/test_samtools_python.py"", line 7, in test_idxstats_parse
    _seqname, _seqlen, nmapped, _nunmapped = line.split()
ValueError: need more than 1 value to unpack

======================================================================
FAIL: test_samtools_python.test_bedcov
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""~/anaconda2/lib/python2.7/site-packages/nose/case.py"", line 197, in runTest
    self.test(*self.arg)
  File ""~/src/pysam/tests/test_samtools_python.py"", line 15, in test_bedcov
    assert len(fields) in [4, 5], ""bedcov should give tab delimited output with 4 or 5 fields.  Split line (%s) gives %d fields."" % (fields, len(fields))
AssertionError: bedcov should give tab delimited output with 4 or 5 fields.  Split line (['c']) gives 1 fields.

----------------------------------------------------------------------
Ran 2 tests in 0.008s

FAILED (errors=1, failures=1)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196449852,,"Actually, these tests are somewhat of a dupe of #245
However, they're still probably useful tests, pending the outcome of how we deal with legacy vs. new-style output.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196465291,,"I added tests for both new and old style output, with the assumption that we add some flag for switching between the two.
I believe the old-style output tests will still pass on pysam 0.8.4",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,6,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196465778,,I am not recommending that we use the name old_style_output for the kwarg--consider it a placeholder...,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196514947,,"ahh, sorry, just catching up!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,8,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196517196,,I updated the kwarg to be split_lines.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/kyleabeauchamp,9,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196518149,,"Also, I have confirmed that the tests behave as expected on pysam 0.8.4 and 0.9
0.8.4

test_samtools_python.test_idxstats_parse_split_lines ... ok
test_samtools_python.test_bedcov_split_lines ... ok
test_samtools_python.test_idxstats_parse ... ERROR
test_samtools_python.test_bedcov ... ERROR


0.9.0

test_samtools_python.test_idxstats_parse_split_lines ... ERROR
test_samtools_python.test_bedcov_split_lines ... FAIL
test_samtools_python.test_idxstats_parse ... ok
test_samtools_python.test_bedcov ... ok",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,255,2016-03-14T05:10:56Z,2016-03-21T21:35:28Z,2016-03-21T21:35:28Z,MERGED,True,34,0,1,https://github.com/kyleabeauchamp,Added tests for some samtools wrapped functionality,6,[],https://github.com/pysam-developers/pysam/pull/255,https://github.com/AndreasHeger,10,https://github.com/pysam-developers/pysam/pull/255#issuecomment-196553206,,"Thanks, I have currently limited time, will get to it this weekend.
Best,
Andreas",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,258,2016-03-23T04:11:33Z,2016-04-10T19:25:35Z,2016-04-10T19:25:35Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix test on py3k,4,[],https://github.com/pysam-developers/pysam/pull/258,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/258,It seems my test wasn't quite py3k compatible.  Let's see if this does the trick.,It seems my test wasn't quite py3k compatible.  Let's see if this does the trick.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,258,2016-03-23T04:11:33Z,2016-04-10T19:25:35Z,2016-04-10T19:25:35Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix test on py3k,4,[],https://github.com/pysam-developers/pysam/pull/258,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/258#issuecomment-200208078,It seems my test wasn't quite py3k compatible.  Let's see if this does the trick.,"So the issue here is that the samtools calls return bytes on py3k and strings on py2k.  This means that users (and tests) cannot do line.split(""\"") because the tab is a string, not a byte object.  Not sure what the right answer is longterm, but at least this fixes the tests.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,258,2016-03-23T04:11:33Z,2016-04-10T19:25:35Z,2016-04-10T19:25:35Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix test on py3k,4,[],https://github.com/pysam-developers/pysam/pull/258,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/258#issuecomment-200223250,It seems my test wasn't quite py3k compatible.  Let's see if this does the trick.,"The test failure appears to be a random unrelated failure:
ERROR: testRemoteExplicitIndexBAM (AlignmentFile_test.TestExplicitIndex)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,258,2016-03-23T04:11:33Z,2016-04-10T19:25:35Z,2016-04-10T19:25:35Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix test on py3k,4,[],https://github.com/pysam-developers/pysam/pull/258,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/258#issuecomment-208048211,It seems my test wasn't quite py3k compatible.  Let's see if this does the trick.,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,264,2016-04-01T08:15:23Z,2016-04-10T19:27:22Z,2016-04-10T19:27:22Z,MERGED,True,2,2,1,https://github.com/Bratdaking,#262 Fix install issue,2,[],https://github.com/pysam-developers/pysam/pull/264,https://github.com/Bratdaking,1,https://github.com/pysam-developers/pysam/pull/264,Tabixproxies and vcf couldn't locate the htslib dirs during a manual install. Added these to the respective parts in the setup script.,Tabixproxies and vcf couldn't locate the htslib dirs during a manual install. Added these to the respective parts in the setup script.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,264,2016-04-01T08:15:23Z,2016-04-10T19:27:22Z,2016-04-10T19:27:22Z,MERGED,True,2,2,1,https://github.com/Bratdaking,#262 Fix install issue,2,[],https://github.com/pysam-developers/pysam/pull/264,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/264#issuecomment-208048321,Tabixproxies and vcf couldn't locate the htslib dirs during a manual install. Added these to the respective parts in the setup script.,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,269,2016-04-28T16:25:54Z,2016-05-06T19:50:38Z,2016-05-06T19:50:38Z,MERGED,True,2,1,1,https://github.com/dlrice,Update glossary.rst,1,[],https://github.com/pysam-developers/pysam/pull/269,https://github.com/dlrice,1,https://github.com/pysam-developers/pysam/pull/269,adding link to hard clipped term.,adding link to hard clipped term.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,269,2016-04-28T16:25:54Z,2016-05-06T19:50:38Z,2016-05-06T19:50:38Z,MERGED,True,2,1,1,https://github.com/dlrice,Update glossary.rst,1,[],https://github.com/pysam-developers/pysam/pull/269,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/269#issuecomment-217541897,adding link to hard clipped term.,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,274,2016-05-06T03:27:25Z,2016-05-06T19:51:35Z,2016-05-06T19:52:27Z,MERGED,True,2,1,1,https://github.com/natechols,include PM in RG header tag order list,1,[],https://github.com/pysam-developers/pysam/pull/274,https://github.com/natechols,1,https://github.com/pysam-developers/pysam/pull/274,"Related to issue 71, although it wasn't giving me any errors, it just silently removed PM from @RG.","Related to issue 71, although it wasn't giving me any errors, it just silently removed PM from @RG.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,275,2016-05-06T18:10:21Z,2016-05-06T19:49:49Z,2016-05-06T19:49:49Z,MERGED,True,1,1,1,https://github.com/fpepin,typo fix in update.rst,1,[],https://github.com/pysam-developers/pysam/pull/275,https://github.com/fpepin,1,https://github.com/pysam-developers/pysam/pull/275,thread-save -> thread-safe,thread-save -> thread-safe,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,275,2016-05-06T18:10:21Z,2016-05-06T19:49:49Z,2016-05-06T19:49:49Z,MERGED,True,1,1,1,https://github.com/fpepin,typo fix in update.rst,1,[],https://github.com/pysam-developers/pysam/pull/275,https://github.com/AndreasHegerGenomics,2,https://github.com/pysam-developers/pysam/pull/275#issuecomment-217541299,thread-save -> thread-safe,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,276,2016-05-06T20:14:55Z,2016-05-06T20:45:18Z,2016-05-06T20:45:18Z,MERGED,True,1,1,1,https://github.com/kyleabeauchamp,Update INSTALL,1,[],https://github.com/pysam-developers/pysam/pull/276,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/276,Found it,Found it,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,276,2016-05-06T20:14:55Z,2016-05-06T20:45:18Z,2016-05-06T20:45:18Z,MERGED,True,1,1,1,https://github.com/kyleabeauchamp,Update INSTALL,1,[],https://github.com/pysam-developers/pysam/pull/276,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/276#issuecomment-217554135,Found it,"Thanks, missed that one - should have grepped through all files...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,282,2016-05-11T09:38:04Z,2016-05-30T20:57:57Z,2016-05-30T21:10:26Z,MERGED,True,38,4,2,https://github.com/marcelm,Allow specifying a FASTA reference when reading a CRAM file,1,[],https://github.com/pysam-developers/pysam/pull/282,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/282,"The reference_filename parameter to the AlignmentFile constructor is now
also interpreted when opening a CRAM file for reading, not only when writing.
Closes #280","The reference_filename parameter to the AlignmentFile constructor is now
also interpreted when opening a CRAM file for reading, not only when writing.
Closes #280",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,282,2016-05-11T09:38:04Z,2016-05-30T20:57:57Z,2016-05-30T21:10:26Z,MERGED,True,38,4,2,https://github.com/marcelm,Allow specifying a FASTA reference when reading a CRAM file,1,[],https://github.com/pysam-developers/pysam/pull/282,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/282#issuecomment-218431211,"The reference_filename parameter to the AlignmentFile constructor is now
also interpreted when opening a CRAM file for reading, not only when writing.
Closes #280","There is one problem that should possibly be documented/fixed before this is merged: If AlignmentFile.fetch() is called with multiple_iterators=True, then the CRAM file is re-opened, but without setting the reference.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,282,2016-05-11T09:38:04Z,2016-05-30T20:57:57Z,2016-05-30T21:10:26Z,MERGED,True,38,4,2,https://github.com/marcelm,Allow specifying a FASTA reference when reading a CRAM file,1,[],https://github.com/pysam-developers/pysam/pull/282,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/282#issuecomment-222554021,"The reference_filename parameter to the AlignmentFile constructor is now
also interpreted when opening a CRAM file for reading, not only when writing.
Closes #280",Many thanks. I have added reference_filename to VariantFile. For release 0.9.2 I plan to refactor VariantFile to make it a factory function returning different objects for BAM and CRAM files to reflect the additional parameterization of CRAM.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,282,2016-05-11T09:38:04Z,2016-05-30T20:57:57Z,2016-05-30T21:10:26Z,MERGED,True,38,4,2,https://github.com/marcelm,Allow specifying a FASTA reference when reading a CRAM file,1,[],https://github.com/pysam-developers/pysam/pull/282,https://github.com/marcelm,4,https://github.com/pysam-developers/pysam/pull/282#issuecomment-222554937,"The reference_filename parameter to the AlignmentFile constructor is now
also interpreted when opening a CRAM file for reading, not only when writing.
Closes #280","Cool, thanks! You mean AlignmentFile instead of VariantFile, right?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,283,2016-05-11T11:39:04Z,2016-05-27T21:02:51Z,2016-05-27T21:02:53Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix: multiple_iterators default value documented incorrectly,1,[],https://github.com/pysam-developers/pysam/pull/283,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/283,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,283,2016-05-11T11:39:04Z,2016-05-27T21:02:51Z,2016-05-27T21:02:53Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix: multiple_iterators default value documented incorrectly,1,[],https://github.com/pysam-developers/pysam/pull/283,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/283#issuecomment-222252537,,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,284,2016-05-11T13:01:03Z,2016-06-14T20:59:22Z,2018-04-10T14:22:16Z,CLOSED,False,5,1,1,https://github.com/marcelm,Add a TestDoubleFetchCram unit test,1,[],https://github.com/pysam-developers/pysam/pull/284,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/284,"This pull request commits a failing unit test that should in my opinion pass. (It is not meant for merging directly.)
The test is a copy of the TestDoubleFetch test, but it works on ex1.cram instead of ex1.bam. It tests whether fetch()ing from a CRAM file with multiple iterators works.
I’m not sure what the problem is, but it fails in the testDoubleFetchWithRegion method on the first iteration of the for loop. The first .fetch() (stored in a) correctly returns the first read of the region, but the second .fetch() (stored in b, with multiple_iterators set to True) returns the first read of the file.","This pull request commits a failing unit test that should in my opinion pass. (It is not meant for merging directly.)
The test is a copy of the TestDoubleFetch test, but it works on ex1.cram instead of ex1.bam. It tests whether fetch()ing from a CRAM file with multiple iterators works.
I’m not sure what the problem is, but it fails in the testDoubleFetchWithRegion method on the first iteration of the for loop. The first .fetch() (stored in a) correctly returns the first read of the region, but the second .fetch() (stored in b, with multiple_iterators set to True) returns the first read of the file.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,284,2016-05-11T13:01:03Z,2016-06-14T20:59:22Z,2018-04-10T14:22:16Z,CLOSED,False,5,1,1,https://github.com/marcelm,Add a TestDoubleFetchCram unit test,1,[],https://github.com/pysam-developers/pysam/pull/284,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/284#issuecomment-218452844,"This pull request commits a failing unit test that should in my opinion pass. (It is not meant for merging directly.)
The test is a copy of the TestDoubleFetch test, but it works on ex1.cram instead of ex1.bam. It tests whether fetch()ing from a CRAM file with multiple iterators works.
I’m not sure what the problem is, but it fails in the testDoubleFetchWithRegion method on the first iteration of the for loop. The first .fetch() (stored in a) correctly returns the first read of the region, but the second .fetch() (stored in b, with multiple_iterators set to True) returns the first read of the file.","Here is a simpler test:
>>> import pysam
>>> f = pysam.AlignmentFile('pysam_data/ex1.cram')
>>> next(f.fetch('chr1', 200)).qname
'EAS1_103:4:294:525:849'
>>> next(f.fetch('chr1', 200, multiple_iterators=True)).qname
'EAS56_57:6:190:289:82'

...:849 is correct. ...:82 is the first read in the file.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,284,2016-05-11T13:01:03Z,2016-06-14T20:59:22Z,2018-04-10T14:22:16Z,CLOSED,False,5,1,1,https://github.com/marcelm,Add a TestDoubleFetchCram unit test,1,[],https://github.com/pysam-developers/pysam/pull/284,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/284#issuecomment-222252798,"This pull request commits a failing unit test that should in my opinion pass. (It is not meant for merging directly.)
The test is a copy of the TestDoubleFetch test, but it works on ex1.cram instead of ex1.bam. It tests whether fetch()ing from a CRAM file with multiple iterators works.
I’m not sure what the problem is, but it fails in the testDoubleFetchWithRegion method on the first iteration of the for loop. The first .fetch() (stored in a) correctly returns the first read of the region, but the second .fetch() (stored in b, with multiple_iterators set to True) returns the first read of the file.","Thawks, will take a look at this this w/e.
Best wishes,
Andreas",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,284,2016-05-11T13:01:03Z,2016-06-14T20:59:22Z,2018-04-10T14:22:16Z,CLOSED,False,5,1,1,https://github.com/marcelm,Add a TestDoubleFetchCram unit test,1,[],https://github.com/pysam-developers/pysam/pull/284,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/284#issuecomment-226014423,"This pull request commits a failing unit test that should in my opinion pass. (It is not meant for merging directly.)
The test is a copy of the TestDoubleFetch test, but it works on ex1.cram instead of ex1.bam. It tests whether fetch()ing from a CRAM file with multiple iterators works.
I’m not sure what the problem is, but it fails in the testDoubleFetchWithRegion method on the first iteration of the for loop. The first .fetch() (stored in a) correctly returns the first read of the region, but the second .fetch() (stored in b, with multiple_iterators set to True) returns the first read of the file.","Thanks, I have opened an issue and incorporated the unit test.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,288,2016-05-26T14:32:23Z,2016-05-26T16:17:52Z,2016-05-26T16:18:20Z,MERGED,True,4260,1473,184,https://github.com/bioinformed,Update to htslib 1.3.1,2,[],https://github.com/pysam-developers/pysam/pull/288,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/288,Only obvious changes were needed.  Testing has been light.,Only obvious changes were needed.  Testing has been light.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,288,2016-05-26T14:32:23Z,2016-05-26T16:17:52Z,2016-05-26T16:18:20Z,MERGED,True,4260,1473,184,https://github.com/bioinformed,Update to htslib 1.3.1,2,[],https://github.com/pysam-developers/pysam/pull/288,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/288#issuecomment-221920276,Only obvious changes were needed.  Testing has been light.,"Thanks, merged! Will test and then do a 0.9.1 release.
Best wishes,
Andreas",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,290,2016-05-27T21:01:53Z,2016-05-27T21:03:56Z,2017-11-17T13:24:54Z,MERGED,True,57,51,9,https://github.com/AndreasHeger,Ah fasta file from stdin,2,[],https://github.com/pysam-developers/pysam/pull/290,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/290,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,294,2016-06-07T22:51:43Z,2016-06-09T07:31:12Z,2017-11-17T13:24:55Z,MERGED,True,2276,2126,99,https://github.com/AndreasHeger,Ah redirect stdout to file,8,[],https://github.com/pysam-developers/pysam/pull/294,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/294,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,297,2016-06-15T05:38:31Z,2016-06-19T19:15:36Z,2016-06-19T19:15:36Z,MERGED,True,2,10,1,https://github.com/kyleabeauchamp,Update INSTALL,1,[],https://github.com/pysam-developers/pysam/pull/297,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/297,AFAIK some info here was previously wrong.,AFAIK some info here was previously wrong.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,297,2016-06-15T05:38:31Z,2016-06-19T19:15:36Z,2016-06-19T19:15:36Z,MERGED,True,2,10,1,https://github.com/kyleabeauchamp,Update INSTALL,1,[],https://github.com/pysam-developers/pysam/pull/297,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/297#issuecomment-226281475,AFAIK some info here was previously wrong.,"PS: unrelated, but looks like the bioconda builds for 0.9.1 are available online:
https://anaconda.org/bioconda/pysam/files",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,300,2016-06-19T16:20:20Z,2016-06-19T19:14:32Z,2016-06-19T19:14:39Z,MERGED,True,11,1,1,https://github.com/kyleabeauchamp,Add bioconda instructions?,3,[],https://github.com/pysam-developers/pysam/pull/300,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/300,"Given that people are currently having lots of install issues, it may make sense to direct people to the bioconda packages.  Up to you.","Given that people are currently having lots of install issues, it may make sense to direct people to the bioconda packages.  Up to you.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,300,2016-06-19T16:20:20Z,2016-06-19T19:14:32Z,2016-06-19T19:14:39Z,MERGED,True,11,1,1,https://github.com/kyleabeauchamp,Add bioconda instructions?,3,[],https://github.com/pysam-developers/pysam/pull/300,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/300#issuecomment-227014943,"Given that people are currently having lots of install issues, it may make sense to direct people to the bioconda packages.  Up to you.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,301,2016-06-20T01:57:46Z,2016-06-20T08:56:46Z,2016-06-20T08:56:50Z,MERGED,True,24,15,1,https://github.com/0xaf1f,Improve handling of build system for external htslib,1,[],https://github.com/pysam-developers/pysam/pull/301,https://github.com/0xaf1f,1,https://github.com/pysam-developers/pysam/pull/301,This is a patch I have applied in order to build the Debian package using the system htslib installation. I've tried to make it flexible so that it still works for the other two cases you support.,This is a patch I have applied in order to build the Debian package using the system htslib installation. I've tried to make it flexible so that it still works for the other two cases you support.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,301,2016-06-20T01:57:46Z,2016-06-20T08:56:46Z,2016-06-20T08:56:50Z,MERGED,True,24,15,1,https://github.com/0xaf1f,Improve handling of build system for external htslib,1,[],https://github.com/pysam-developers/pysam/pull/301,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/301#issuecomment-227086100,This is a patch I have applied in order to build the Debian package using the system htslib installation. I've tried to make it flexible so that it still works for the other two cases you support.,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,305,2016-06-22T22:05:09Z,2016-06-22T22:05:15Z,2017-11-17T13:24:55Z,MERGED,True,36,8,4,https://github.com/AndreasHeger,Ah installation tests,5,[],https://github.com/pysam-developers/pysam/pull/305,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/305,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,309,2016-07-01T01:55:12Z,2016-07-01T20:01:06Z,2016-07-08T18:18:30Z,MERGED,True,1,1,1,https://github.com/odoublewen,Update calignmentfile.pyx,1,[],https://github.com/pysam-developers/pysam/pull/309,https://github.com/odoublewen,1,https://github.com/pysam-developers/pysam/pull/309,"Error message (""file has no sequences defined"") was misleading.  The argument is check_sq, not check_seq.  Also, the message should suggest setting it to False, since True is the default.","Error message (""file has no sequences defined"") was misleading.  The argument is check_sq, not check_seq.  Also, the message should suggest setting it to False, since True is the default.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,309,2016-07-01T01:55:12Z,2016-07-01T20:01:06Z,2016-07-08T18:18:30Z,MERGED,True,1,1,1,https://github.com/odoublewen,Update calignmentfile.pyx,1,[],https://github.com/pysam-developers/pysam/pull/309,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/309#issuecomment-230035566,"Error message (""file has no sequences defined"") was misleading.  The argument is check_sq, not check_seq.  Also, the message should suggest setting it to False, since True is the default.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,313,2016-07-18T13:54:18Z,2016-07-18T15:01:52Z,2016-07-18T15:02:01Z,MERGED,True,132,62,6,https://github.com/AndreasHeger,Ah htslib config query,9,[],https://github.com/pysam-developers/pysam/pull/313,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/313,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,317,2016-07-24T01:39:00Z,2016-08-01T14:59:57Z,2016-08-01T15:00:03Z,MERGED,True,8,8,4,https://github.com/0xaf1f,Fix spelling/grammar issues found using Debian QA tools,1,[],https://github.com/pysam-developers/pysam/pull/317,https://github.com/0xaf1f,1,https://github.com/pysam-developers/pysam/pull/317,The package linter picked these up and the notices don't go away without being fixed :),The package linter picked these up and the notices don't go away without being fixed :),True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,317,2016-07-24T01:39:00Z,2016-08-01T14:59:57Z,2016-08-01T15:00:03Z,MERGED,True,8,8,4,https://github.com/0xaf1f,Fix spelling/grammar issues found using Debian QA tools,1,[],https://github.com/pysam-developers/pysam/pull/317,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/317#issuecomment-236606422,The package linter picked these up and the notices don't go away without being fixed :),Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,319,2016-07-28T23:27:16Z,2016-08-01T14:59:17Z,2016-08-01T14:59:22Z,MERGED,True,8,7,1,https://github.com/kyleabeauchamp,Fix docstring in refskip,3,[],https://github.com/pysam-developers/pysam/pull/319,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/319,"There is no docstring on the is_refskip property on pileup reads.  I added the following one, but I am not 100% sure if my interpretation is correct:
""1 iff the base on the padded read is skipped in the reference, i.e. an insertion""","There is no docstring on the is_refskip property on pileup reads.  I added the following one, but I am not 100% sure if my interpretation is correct:
""1 iff the base on the padded read is skipped in the reference, i.e. an insertion""",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,319,2016-07-28T23:27:16Z,2016-08-01T14:59:17Z,2016-08-01T14:59:22Z,MERGED,True,8,7,1,https://github.com/kyleabeauchamp,Fix docstring in refskip,3,[],https://github.com/pysam-developers/pysam/pull/319,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/319#issuecomment-236144680,"There is no docstring on the is_refskip property on pileup reads.  I added the following one, but I am not 100% sure if my interpretation is correct:
""1 iff the base on the padded read is skipped in the reference, i.e. an insertion""","Close, but it's specifically cigar N rather than an insertion.  See documentation additions in samtools/htslib#226, which you might want to copy for is_refskip here.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,319,2016-07-28T23:27:16Z,2016-08-01T14:59:17Z,2016-08-01T14:59:22Z,MERGED,True,8,7,1,https://github.com/kyleabeauchamp,Fix docstring in refskip,3,[],https://github.com/pysam-developers/pysam/pull/319,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/319#issuecomment-236211560,"There is no docstring on the is_refskip property on pileup reads.  I added the following one, but I am not 100% sure if my interpretation is correct:
""1 iff the base on the padded read is skipped in the reference, i.e. an insertion""","Thanks, I copied the docstring from HTSLib.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,319,2016-07-28T23:27:16Z,2016-08-01T14:59:17Z,2016-08-01T14:59:22Z,MERGED,True,8,7,1,https://github.com/kyleabeauchamp,Fix docstring in refskip,3,[],https://github.com/pysam-developers/pysam/pull/319,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/319#issuecomment-236606219,"There is no docstring on the is_refskip property on pileup reads.  I added the following one, but I am not 100% sure if my interpretation is correct:
""1 iff the base on the padded read is skipped in the reference, i.e. an insertion""",Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,322,2016-08-03T13:30:35Z,2016-08-22T10:34:09Z,2016-08-22T10:34:09Z,MERGED,True,364,0,3,https://github.com/TyberiusPrime,Introducing find_introns,3,[],https://github.com/pysam-developers/pysam/pull/322,https://github.com/TyberiusPrime,1,https://github.com/pysam-developers/pysam/pull/322,"Add AligmentFile.find_introns(read_iterator): returns {(start, stop): read count} for all 'skipped' regions in the reads returned by read_iterator.
I find this a very nice addition to count_coverage to see what (if any) introns your reads support.
The interface right now is iterator based - I think, if there's no performance hit, that this make a much cleaner interface and implementation than passing reference, start, end, region, and a possible filter function to the various read counting functions. They all end up calling fetch anyhow, and this is more universal.","Add AligmentFile.find_introns(read_iterator): returns {(start, stop): read count} for all 'skipped' regions in the reads returned by read_iterator.
I find this a very nice addition to count_coverage to see what (if any) introns your reads support.
The interface right now is iterator based - I think, if there's no performance hit, that this make a much cleaner interface and implementation than passing reference, start, end, region, and a possible filter function to the various read counting functions. They all end up calling fetch anyhow, and this is more universal.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,322,2016-08-03T13:30:35Z,2016-08-22T10:34:09Z,2016-08-22T10:34:09Z,MERGED,True,364,0,3,https://github.com/TyberiusPrime,Introducing find_introns,3,[],https://github.com/pysam-developers/pysam/pull/322,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/322#issuecomment-241374460,"Add AligmentFile.find_introns(read_iterator): returns {(start, stop): read count} for all 'skipped' regions in the reads returned by read_iterator.
I find this a very nice addition to count_coverage to see what (if any) introns your reads support.
The interface right now is iterator based - I think, if there's no performance hit, that this make a much cleaner interface and implementation than passing reference, start, end, region, and a possible filter function to the various read counting functions. They all end up calling fetch anyhow, and this is more universal.","Thanks, this is useful. I like the iterator interface.
I don't know about performance, something to be looked at later. The loop might execute quicker
by specifying
cdef AlignedSegment r",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,324,2016-08-08T20:31:02Z,2016-08-22T10:28:09Z,2016-08-22T10:28:09Z,MERGED,True,3,5,1,https://github.com/mdpearson,Make force_bytes() behave the same on Python 2.7 as it does on 3.x.,1,[],https://github.com/pysam-developers/pysam/pull/324,https://github.com/mdpearson,1,https://github.com/pysam-developers/pysam/pull/324,"Hello,
Pysam's fetch() methods accept bytes from Python 3 and Python 2 callers, but only accept Unicode from Python 3 callers. This is because pysam/cutils::force_bytes() behaves differently under Python 2 than it does under Python 3.
In Python 3, force_bytes() converts a string or unicode object to bytes. In Python 2, it does nothing. This leads to unusual behavior: for instance, in Pysam 0.8.2.1, AlignmentFile.fetch(u""1"", 0, 100) will raise a TypeError (""Expected bytes, got unicode"") but the same call on a FastaFile object will succeed. (This seems to be a happy accident due to some string interpolation in the FastaFile method that was removed sometime before pysam 0.8.4. As of 0.9.4, neither method accepts unicode from Python 2.)
The Python 3 guard has been present for a long time; it was introduced in December 2011 (14b55f4) but I'm not entirely sure why.
As more packages add Python 3 compatibility, consumers still using Python 2.7 can find themselves passing unicode strings without their knowledge. (For example, Pybedtools 0.7.x returns chromosome ID's as unicode to Python 2 callers, whereas 0.6.x returns them as bytes.)
This PR will make Pysam consistently accept bytes, or unicode, from Python 2, or 3.","Hello,
Pysam's fetch() methods accept bytes from Python 3 and Python 2 callers, but only accept Unicode from Python 3 callers. This is because pysam/cutils::force_bytes() behaves differently under Python 2 than it does under Python 3.
In Python 3, force_bytes() converts a string or unicode object to bytes. In Python 2, it does nothing. This leads to unusual behavior: for instance, in Pysam 0.8.2.1, AlignmentFile.fetch(u""1"", 0, 100) will raise a TypeError (""Expected bytes, got unicode"") but the same call on a FastaFile object will succeed. (This seems to be a happy accident due to some string interpolation in the FastaFile method that was removed sometime before pysam 0.8.4. As of 0.9.4, neither method accepts unicode from Python 2.)
The Python 3 guard has been present for a long time; it was introduced in December 2011 (14b55f4) but I'm not entirely sure why.
As more packages add Python 3 compatibility, consumers still using Python 2.7 can find themselves passing unicode strings without their knowledge. (For example, Pybedtools 0.7.x returns chromosome ID's as unicode to Python 2 callers, whereas 0.6.x returns them as bytes.)
This PR will make Pysam consistently accept bytes, or unicode, from Python 2, or 3.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,324,2016-08-08T20:31:02Z,2016-08-22T10:28:09Z,2016-08-22T10:28:09Z,MERGED,True,3,5,1,https://github.com/mdpearson,Make force_bytes() behave the same on Python 2.7 as it does on 3.x.,1,[],https://github.com/pysam-developers/pysam/pull/324,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/324#issuecomment-241373222,"Hello,
Pysam's fetch() methods accept bytes from Python 3 and Python 2 callers, but only accept Unicode from Python 3 callers. This is because pysam/cutils::force_bytes() behaves differently under Python 2 than it does under Python 3.
In Python 3, force_bytes() converts a string or unicode object to bytes. In Python 2, it does nothing. This leads to unusual behavior: for instance, in Pysam 0.8.2.1, AlignmentFile.fetch(u""1"", 0, 100) will raise a TypeError (""Expected bytes, got unicode"") but the same call on a FastaFile object will succeed. (This seems to be a happy accident due to some string interpolation in the FastaFile method that was removed sometime before pysam 0.8.4. As of 0.9.4, neither method accepts unicode from Python 2.)
The Python 3 guard has been present for a long time; it was introduced in December 2011 (14b55f4) but I'm not entirely sure why.
As more packages add Python 3 compatibility, consumers still using Python 2.7 can find themselves passing unicode strings without their knowledge. (For example, Pybedtools 0.7.x returns chromosome ID's as unicode to Python 2 callers, whereas 0.6.x returns them as bytes.)
This PR will make Pysam consistently accept bytes, or unicode, from Python 2, or 3.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,326,2016-08-10T03:27:21Z,2016-08-22T10:25:46Z,2016-08-22T10:25:46Z,MERGED,True,9,8,4,https://github.com/indraniel,+ include the AH header tag to @SQ lines,2,[],https://github.com/pysam-developers/pysam/pull/326,https://github.com/indraniel,1,https://github.com/pysam-developers/pysam/pull/326,"This change accounts for possible 'AH' tags present on the @sq lines in the SAM header.

the ""AH"" header tag corresponds to Alternate Haplotypes in ALT mapping mode
based on samtools/hts-specs issue 147: samtools/hts-specs#147
this tag is already being produced by bwa 0.7.15

see tag 0.7.15 (r1140) https://github.com/lh3/bwa/releases/tag/v0.7.15","This change accounts for possible 'AH' tags present on the @sq lines in the SAM header.

the ""AH"" header tag corresponds to Alternate Haplotypes in ALT mapping mode
based on samtools/hts-specs issue 147: samtools/hts-specs#147
this tag is already being produced by bwa 0.7.15

see tag 0.7.15 (r1140) https://github.com/lh3/bwa/releases/tag/v0.7.15",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,326,2016-08-10T03:27:21Z,2016-08-22T10:25:46Z,2016-08-22T10:25:46Z,MERGED,True,9,8,4,https://github.com/indraniel,+ include the AH header tag to @SQ lines,2,[],https://github.com/pysam-developers/pysam/pull/326,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/326#issuecomment-241372764,"This change accounts for possible 'AH' tags present on the @sq lines in the SAM header.

the ""AH"" header tag corresponds to Alternate Haplotypes in ALT mapping mode
based on samtools/hts-specs issue 147: samtools/hts-specs#147
this tag is already being produced by bwa 0.7.15

see tag 0.7.15 (r1140) https://github.com/lh3/bwa/releases/tag/v0.7.15","Thanks, great!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,333,2016-08-26T16:22:16Z,2016-08-31T21:39:47Z,2016-08-31T21:39:53Z,MERGED,True,1,1,1,https://github.com/amblina,Update calignedsegment.pyx docstring for query_length,1,[],https://github.com/pysam-developers/pysam/pull/333,https://github.com/amblina,1,https://github.com/pysam-developers/pysam/pull/333,Quick change to the query_length method docstring as infer_query_length is in AlignedSegment not AlignmentFile plus errant '.',Quick change to the query_length method docstring as infer_query_length is in AlignedSegment not AlignmentFile plus errant '.',True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,333,2016-08-26T16:22:16Z,2016-08-31T21:39:47Z,2016-08-31T21:39:53Z,MERGED,True,1,1,1,https://github.com/amblina,Update calignedsegment.pyx docstring for query_length,1,[],https://github.com/pysam-developers/pysam/pull/333,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/333#issuecomment-243911165,Quick change to the query_length method docstring as infer_query_length is in AlignedSegment not AlignmentFile plus errant '.',Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,334,2016-08-30T14:18:49Z,2016-08-31T21:39:18Z,2016-09-06T20:20:25Z,MERGED,True,9,1,2,https://github.com/bioinformed,Minor fixes to cbcf.VariantRecord,2,[],https://github.com/pysam-developers/pysam/pull/334,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/334,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,334,2016-08-30T14:18:49Z,2016-08-31T21:39:18Z,2016-09-06T20:20:25Z,MERGED,True,9,1,2,https://github.com/bioinformed,Minor fixes to cbcf.VariantRecord,2,[],https://github.com/pysam-developers/pysam/pull/334,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/334#issuecomment-243498370,,CI failure seems to be spurious and caused by a sporadic environment failure.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,334,2016-08-30T14:18:49Z,2016-08-31T21:39:18Z,2016-09-06T20:20:25Z,MERGED,True,9,1,2,https://github.com/bioinformed,Minor fixes to cbcf.VariantRecord,2,[],https://github.com/pysam-developers/pysam/pull/334,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/334#issuecomment-243911038,,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,334,2016-08-30T14:18:49Z,2016-08-31T21:39:18Z,2016-09-06T20:20:25Z,MERGED,True,9,1,2,https://github.com/bioinformed,Minor fixes to cbcf.VariantRecord,2,[],https://github.com/pysam-developers/pysam/pull/334,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/334#issuecomment-243915278,,"Thanks!  Working on pysam is now a part of my day job, so expect more updates in the coming weeks.  (I've moved from 23andMe to Helix as of this week.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,334,2016-08-30T14:18:49Z,2016-08-31T21:39:18Z,2016-09-06T20:20:25Z,MERGED,True,9,1,2,https://github.com/bioinformed,Minor fixes to cbcf.VariantRecord,2,[],https://github.com/pysam-developers/pysam/pull/334,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/334#issuecomment-245077604,,"That is good news, certainly for pysam! All the best in your new post.
Best wishes,
Andreas",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,336,2016-09-03T01:25:11Z,2016-09-06T18:44:22Z,2016-09-06T18:44:23Z,CLOSED,False,413,378,2,https://github.com/bioinformed,Bug fixes and update to new Cython,5,[],https://github.com/pysam-developers/pysam/pull/336,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/336,Major bug fix to setting GT values.  Minor update to newest Cython and update cbcf to use new @Property syntax.,Major bug fix to setting GT values.  Minor update to newest Cython and update cbcf to use new @Property syntax.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,336,2016-09-03T01:25:11Z,2016-09-06T18:44:22Z,2016-09-06T18:44:23Z,CLOSED,False,413,378,2,https://github.com/bioinformed,Bug fixes and update to new Cython,5,[],https://github.com/pysam-developers/pysam/pull/336,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/336#issuecomment-245049318,Major bug fix to setting GT values.  Minor update to newest Cython and update cbcf to use new @Property syntax.,Closing to update PR with newer fixes.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/337,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/337#issuecomment-245069570,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,"Great, many thanks! Please feel free to merge whenever you think it is complete, don't let me hold you up.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/337#issuecomment-245071874,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,"I don't think I have permissions to merge PRs.  Also, this one has a
complication-- the CI system needs to update to Cython >=0.24, since I've
started using some of the new functionality since Cython 0.22.
Thanks,
-Kevin
On Tue, Sep 6, 2016 at 1:53 PM, Andreas Heger notifications@github.com
wrote:

Great, many thanks! Please feel free to merge whenever you think it is
complete, don't let me hold you up.
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#337 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ABM-v_BwOM5WwGdvyPODwGm3LlmwCpCZks5qncTCgaJpZM4J2J-a
.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/337#issuecomment-245073795,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,"Apologies, this was an oversight - you are now an 'owner'.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/337#issuecomment-245075811,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,"Looks like this affects only python3.3. Cython 0.24.1 is only available for python 3.4 and 3.5 on the conda channel. It seems that anaconda dropped support for version 3.3, see
http://conda.pydata.org/docs/py2or3.html#create-python-2-or-3-environments
Maybe we should do so, too.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,337,2016-09-06T18:46:11Z,2016-09-13T22:58:44Z,2016-09-13T22:58:44Z,MERGED,True,439,379,2,https://github.com/bioinformed,Major fixes for writing genotypes,7,[],https://github.com/pysam-developers/pysam/pull/337,https://github.com/kyleabeauchamp,6,https://github.com/pysam-developers/pysam/pull/337#issuecomment-245090965,Major bug fixes to setting genotyhpe (GT) values. Minor update to newest Cython and update cbcf to use new @Property syntax.,"SGTM.  For Bioconda packaging, 3.3 seems to have been disabled: https://github.com/bioconda/bioconda-recipes/blob/master/scripts/env_matrix.yml",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,338,2016-09-07T13:04:21Z,2016-09-07T18:36:37Z,2017-06-29T12:30:54Z,MERGED,True,23,2,2,https://github.com/amblina,Fix for #332: Hardclipped bases in cigar ignored by pysam.AlignedSegment.infer_query_length(),4,[],https://github.com/pysam-developers/pysam/pull/338,https://github.com/amblina,1,https://github.com/pysam-developers/pysam/pull/338,"#332
BAM_CHARD_CLIP ops in cigar are now used as part of calculation to infer original query length.  I have also added a test for infer_query_length().","#332
BAM_CHARD_CLIP ops in cigar are now used as part of calculation to infer original query length.  I have also added a test for infer_query_length().",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,338,2016-09-07T13:04:21Z,2016-09-07T18:36:37Z,2017-06-29T12:30:54Z,MERGED,True,23,2,2,https://github.com/amblina,Fix for #332: Hardclipped bases in cigar ignored by pysam.AlignedSegment.infer_query_length(),4,[],https://github.com/pysam-developers/pysam/pull/338,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/338#issuecomment-245375904,"#332
BAM_CHARD_CLIP ops in cigar are now used as part of calculation to infer original query length.  I have also added a test for infer_query_length().",I can't recall any reason why hard-clipped bases should be excluded from the query length. Many thanks for the PR!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,339,2016-09-07T18:40:38Z,2016-09-07T18:41:11Z,2017-11-17T13:24:56Z,MERGED,True,2,23,2,https://github.com/AndreasHeger,"Revert ""Fix for #332: Hardclipped bases in cigar ignored by pysam.AlignedSegment.infer_query_length()""",1,[],https://github.com/pysam-developers/pysam/pull/339,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/339,Reverts #338,Reverts #338,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,345,2016-09-16T04:31:18Z,2016-09-26T10:10:14Z,2016-09-26T10:10:23Z,MERGED,True,8,3,1,https://github.com/K377U,Install fails on Ubuntu 14.04 when using pysam as requirement for other module,1,[],https://github.com/pysam-developers/pysam/pull/345,https://github.com/K377U,1,https://github.com/pysam-developers/pysam/pull/345,"When running make print-config first row contains
make[1]: Entering directory `/tmp/pip-build-eXV8ja/pysam/htslib'
This makes current code break.","When running make print-config first row contains
make[1]: Entering directory `/tmp/pip-build-eXV8ja/pysam/htslib'
This makes current code break.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,345,2016-09-16T04:31:18Z,2016-09-26T10:10:14Z,2016-09-26T10:10:23Z,MERGED,True,8,3,1,https://github.com/K377U,Install fails on Ubuntu 14.04 when using pysam as requirement for other module,1,[],https://github.com/pysam-developers/pysam/pull/345,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/345#issuecomment-249531034,"When running make print-config first row contains
make[1]: Entering directory `/tmp/pip-build-eXV8ja/pysam/htslib'
This makes current code break.",Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,346,2016-09-21T15:22:31Z,2016-09-22T19:39:48Z,2016-09-22T19:39:48Z,MERGED,True,384,35,5,https://github.com/bioinformed,Merge dev progress,9,[],https://github.com/pysam-developers/pysam/pull/346,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/346,"Fix #259 Error loading empty VCFs (due to empty index)
Fix mode specification and validation for VariantFile [API change!]
Add pysam.BGZFile reader and writer object [WIP - needs testing]
Add initial support for removing header lines. [WIP - still very dangerous]","Fix #259 Error loading empty VCFs (due to empty index)
Fix mode specification and validation for VariantFile [API change!]
Add pysam.BGZFile reader and writer object [WIP - needs testing]
Add initial support for removing header lines. [WIP - still very dangerous]",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,348,2016-09-26T10:08:12Z,2016-09-26T10:09:04Z,2016-09-26T10:09:10Z,MERGED,True,23,2,2,https://github.com/AndreasHeger,"Revert ""Revert ""Fix for #332: Hardclipped bases in cigar ignored by pysam.AlignedSegment.infer_query_length()""""",1,[],https://github.com/pysam-developers/pysam/pull/348,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/348,Reverts #339,Reverts #339,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,351,2016-10-04T15:28:28Z,2016-10-04T15:29:17Z,2016-10-04T15:29:17Z,MERGED,True,18,1,1,https://github.com/bioinformed,Fix id check; add method to add filters,1,[],https://github.com/pysam-developers/pysam/pull/351,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/351,Small fix + minor new feature requested by Erik Gafni,Small fix + minor new feature requested by Erik Gafni,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,356,2016-10-20T00:32:33Z,2016-10-20T17:50:21Z,2016-10-20T17:50:21Z,CLOSED,False,212,171,4,https://github.com/bioinformed,More work on mutating and writing,7,[],https://github.com/pysam-developers/pysam/pull/356,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/356,Address issue #314 and other work to prevent crashes and make the API safer.,Address issue #314 and other work to prevent crashes and make the API safer.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,356,2016-10-20T00:32:33Z,2016-10-20T17:50:21Z,2016-10-20T17:50:21Z,CLOSED,False,212,171,4,https://github.com/bioinformed,More work on mutating and writing,7,[],https://github.com/pysam-developers/pysam/pull/356,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/356#issuecomment-255178307,Address issue #314 and other work to prevent crashes and make the API safer.,Closing.  I have fixed several more test failures and will create a new PR.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,358,2016-10-20T17:52:12Z,2016-10-20T18:41:31Z,2016-10-20T18:41:31Z,MERGED,True,212,171,4,https://github.com/bioinformed,Address issue #314 and other work to prevent crashes and make the API safer.,7,[],https://github.com/pysam-developers/pysam/pull/358,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/358,"It is still possible to crash Python with a segfault, but at least it is harder to do now.","It is still possible to crash Python with a segfault, but at least it is harder to do now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,361,2016-10-26T07:07:04Z,2016-10-27T02:38:30Z,2016-10-27T02:38:30Z,CLOSED,False,30,32,3,https://github.com/bioinformed,Fix Issue #360: pysam breaks with Cython 0.25,2,[],https://github.com/pysam-developers/pysam/pull/361,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/361,"Fix Issue #360.  May not be the ideal fix, because pysam.libchtslib is now called pysam.chtslib.  Fix tested on OS X and Linux for Python versions 2.7.12, 3.4.5 and 3.5.2 and Cython versions 0.24.1 and 0.25.","Fix Issue #360.  May not be the ideal fix, because pysam.libchtslib is now called pysam.chtslib.  Fix tested on OS X and Linux for Python versions 2.7.12, 3.4.5 and 3.5.2 and Cython versions 0.24.1 and 0.25.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,361,2016-10-26T07:07:04Z,2016-10-27T02:38:30Z,2016-10-27T02:38:30Z,CLOSED,False,30,32,3,https://github.com/bioinformed,Fix Issue #360: pysam breaks with Cython 0.25,2,[],https://github.com/pysam-developers/pysam/pull/361,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/361#issuecomment-256531528,"Fix Issue #360.  May not be the ideal fix, because pysam.libchtslib is now called pysam.chtslib.  Fix tested on OS X and Linux for Python versions 2.7.12, 3.4.5 and 3.5.2 and Cython versions 0.24.1 and 0.25.",Working on a different solution that renames all extension modules (per Issue #316),True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,362,2016-10-26T10:27:01Z,2016-10-31T20:19:31Z,2016-10-31T21:04:21Z,MERGED,True,1,0,1,https://github.com/MikkelSchubert,Fix compilation with musl libc,1,[],https://github.com/pysam-developers/pysam/pull/362,https://github.com/MikkelSchubert,1,https://github.com/pysam-developers/pysam/pull/362,"Compilation of pysam (HEAD and 0.9.1.4) with musl libc on Alpine Linux breaks due to missing type declarations in htslib/htslib/knetfile.h:
gcc -fno-strict-aliasing -Os -fomit-frame-pointer -g -DNDEBUG -Os -fomit-frame-pointer -g -fPIC -Ipysam -I. -Ihtslib -I/usr/include/python2.7 -c pysam/htslib_util.c -o build/temp.linux-x86_64-2.7/pysam/htslib_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
In file included from pysam/htslib_util.c:7:0:
htslib/htslib/knetfile.h:88:2: error: unknown type name 'ssize_t'
  ssize_t knet_read(knetFile *fp, void *buf, size_t len);
  ^~~~~~~
error: command 'gcc' failed with exit status 1

The attached commit adds the necessary include to allow compilation in this environment.","Compilation of pysam (HEAD and 0.9.1.4) with musl libc on Alpine Linux breaks due to missing type declarations in htslib/htslib/knetfile.h:
gcc -fno-strict-aliasing -Os -fomit-frame-pointer -g -DNDEBUG -Os -fomit-frame-pointer -g -fPIC -Ipysam -I. -Ihtslib -I/usr/include/python2.7 -c pysam/htslib_util.c -o build/temp.linux-x86_64-2.7/pysam/htslib_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
In file included from pysam/htslib_util.c:7:0:
htslib/htslib/knetfile.h:88:2: error: unknown type name 'ssize_t'
  ssize_t knet_read(knetFile *fp, void *buf, size_t len);
  ^~~~~~~
error: command 'gcc' failed with exit status 1

The attached commit adds the necessary include to allow compilation in this environment.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,362,2016-10-26T10:27:01Z,2016-10-31T20:19:31Z,2016-10-31T21:04:21Z,MERGED,True,1,0,1,https://github.com/MikkelSchubert,Fix compilation with musl libc,1,[],https://github.com/pysam-developers/pysam/pull/362,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/362#issuecomment-257408661,"Compilation of pysam (HEAD and 0.9.1.4) with musl libc on Alpine Linux breaks due to missing type declarations in htslib/htslib/knetfile.h:
gcc -fno-strict-aliasing -Os -fomit-frame-pointer -g -DNDEBUG -Os -fomit-frame-pointer -g -fPIC -Ipysam -I. -Ihtslib -I/usr/include/python2.7 -c pysam/htslib_util.c -o build/temp.linux-x86_64-2.7/pysam/htslib_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
In file included from pysam/htslib_util.c:7:0:
htslib/htslib/knetfile.h:88:2: error: unknown type name 'ssize_t'
  ssize_t knet_read(knetFile *fp, void *buf, size_t len);
  ^~~~~~~
error: command 'gcc' failed with exit status 1

The attached commit adds the necessary include to allow compilation in this environment.",Thanks! And +1 for introducing me to musl and Alpine Linux!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/365,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256541462,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","This looks like it cleans up a lot of redundant special-case code, which IMHO is a big win for maintainability.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256751039,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","@AndreasHeger: The code looks good and the test suite passes, but I don't understand the TravisCI failures.  Can you please take a look when you get a chance?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256755171,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","OK, I wonder if this is the issue: https://github.com/pysam-developers/pysam/blob/master/run_tests_travis.sh#L135
I think in the past we had cython as an optional dependency, so we had a manual test of with and without cython installed in the CI script.  AFAIK now that might be deprecated.  Correct me if I'm wrong.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256755629,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.",Actually that doesn't seem like it.  Hmm,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/kyleabeauchamp,6,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256765314,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.",Related to #260 perhaps?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/kyleabeauchamp,7,https://github.com/pysam-developers/pysam/pull/365#issuecomment-256848379,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","I stared at the setup script some more and it indeed strange that ""pysam/libchtslib.pyx"" is claimed to be missing and tripping the ""no cython"" code path.
Do we need to support both cython and nocython builds?  IMHO it would be great to reduce the number of code paths in setup.py and in the CI tests.  One step in that direction would be to make cython a hard dependency and simplify the build.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/AndreasHeger,8,https://github.com/pysam-developers/pysam/pull/365#issuecomment-257396978,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","Thanks both, I will have a look now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/365#issuecomment-257406536,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","Hi @bioinformed and @kyleabeauchamp. The issue was that the travis script ran:
python setup.py sdist
...
pip install pysam-xxx.tar.gz

However, the dist command does not cythonize .pyx files into .c. The fix was to run:
python setup.py build sdist
...
pip install pysam-xxx.tar.gz

I am not sure why it used to work. Could be that .c files were accidentally part of the repos or this might be change with the cython 0.25 builder?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,365,2016-10-27T04:02:16Z,2016-10-31T20:08:02Z,2016-10-31T20:11:49Z,MERGED,True,98,123,26,https://github.com/bioinformed,Issue 316 360 rename shared libs,6,[],https://github.com/pysam-developers/pysam/pull/365,https://github.com/AndreasHeger,10,https://github.com/pysam-developers/pysam/pull/365#issuecomment-257406634,"Implement issue #316 to change all Cython modules to have a lib prefix.  This is an alternative way to correct issue #360.  Tested on Linux and OSX with Python 2.7.12, 3.4.5, and 3.5.2 with Cython 0.24.1 and 0.25.","@bioinformed, many thanks for the refactoring!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/366,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/366#issuecomment-256803403,,See pip release notes: https://pip.pypa.io/en/stable/news/,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/366#issuecomment-257038136,,I think this is ready to merge.  It future-proofs the CI script against a pending change in the pip command-line options.  It also cleans up a deprecation warning in the current CI output logs.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/366#issuecomment-257038982,,"Is this work likely to fix the CI failures I observed with the library
renaming PR?
On Fri, Oct 28, 2016 at 3:53 PM, Kyle Beauchamp notifications@github.com
wrote:

I think this is ready to merge. It future-proofs the CI script against a
pending change in the pip command-line options. It also cleans up a
deprecation warning in the current CI output logs.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#366 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ABM-v90uu6SYRtGV4o2vPrDkvwXkL6ZKks5q4m7qgaJpZM4Ki86E
.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/366#issuecomment-257039217,,"I highly doubt it.  However, if you look at my other PR #369, the latest Linux build therein reproduces the error that you observe (in a much more minimal changeset).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,366,2016-10-28T00:02:24Z,2016-10-31T20:12:56Z,2016-10-31T20:12:56Z,MERGED,True,3,3,1,https://github.com/kyleabeauchamp,Fix deprecation warning in travis pip setup,1,[],https://github.com/pysam-developers/pysam/pull/366,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/366#issuecomment-257406896,,"Thanks, @kyleabeauchamp",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,369,2016-10-28T20:16:08Z,2016-10-31T20:14:48Z,2016-10-31T20:14:49Z,MERGED,True,8,12,2,https://github.com/kyleabeauchamp,[WIP] Enable container infrastructure for Travis,5,[],https://github.com/pysam-developers/pysam/pull/369,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/369,"Allegedly, switching off the sudo access will migrate our Travis builds to the newer container-based infrastructure (https://docs.travis-ci.com/user/migrating-from-legacy/).  I believe this may improve CI speed and may also enable local reproducibility (YMMV).
I've also added some minor cleanup to the CI to enhance readability.","Allegedly, switching off the sudo access will migrate our Travis builds to the newer container-based infrastructure (https://docs.travis-ci.com/user/migrating-from-legacy/).  I believe this may improve CI speed and may also enable local reproducibility (YMMV).
I've also added some minor cleanup to the CI to enhance readability.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,369,2016-10-28T20:16:08Z,2016-10-31T20:14:48Z,2016-10-31T20:14:49Z,MERGED,True,8,12,2,https://github.com/kyleabeauchamp,[WIP] Enable container infrastructure for Travis,5,[],https://github.com/pysam-developers/pysam/pull/369,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/369#issuecomment-257039356,"Allegedly, switching off the sudo access will migrate our Travis builds to the newer container-based infrastructure (https://docs.travis-ci.com/user/migrating-from-legacy/).  I believe this may improve CI speed and may also enable local reproducibility (YMMV).
I've also added some minor cleanup to the CI to enhance readability.",cc @bioinformed  The linux builds for 1be33be are terminating with very similar cython / nose style messages that you observed.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,369,2016-10-28T20:16:08Z,2016-10-31T20:14:48Z,2016-10-31T20:14:49Z,MERGED,True,8,12,2,https://github.com/kyleabeauchamp,[WIP] Enable container infrastructure for Travis,5,[],https://github.com/pysam-developers/pysam/pull/369,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/369#issuecomment-257407405,"Allegedly, switching off the sudo access will migrate our Travis builds to the newer container-based infrastructure (https://docs.travis-ci.com/user/migrating-from-legacy/).  I believe this may improve CI speed and may also enable local reproducibility (YMMV).
I've also added some minor cleanup to the CI to enhance readability.","Thanks, much appreciated!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,374,2016-11-15T14:57:14Z,2016-11-19T21:19:28Z,2016-11-20T14:11:19Z,MERGED,True,69,0,1,https://github.com/marcelm,Script for building manylinux1 wheels,1,[],https://github.com/pysam-developers/pysam/pull/374,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/374,"As discussed in issue #344, it would be great if wheels for pysam were available. Pysam is quite a heavy dependency, and it is one of those packages for which offering wheels would therefore really pay off by reducing installation time.
This script is based on the manylinux1 demo. It uses docker to build binary, manylinux1 wheels. It is meant to be run locally for now. The wheels are put into a wheelhouse/ directory, and someone with access to the PyPI account then needs to upload them (I guess with twine upload).
The only limitation is that HTTPS and S3 URLs are not supported because this would mean that OpenSSL needs to be bundled into the wheel, which in turn would make pysam developers responsible for updating the wheels when there is a security problem. This would probably need to be communicated.","As discussed in issue #344, it would be great if wheels for pysam were available. Pysam is quite a heavy dependency, and it is one of those packages for which offering wheels would therefore really pay off by reducing installation time.
This script is based on the manylinux1 demo. It uses docker to build binary, manylinux1 wheels. It is meant to be run locally for now. The wheels are put into a wheelhouse/ directory, and someone with access to the PyPI account then needs to upload them (I guess with twine upload).
The only limitation is that HTTPS and S3 URLs are not supported because this would mean that OpenSSL needs to be bundled into the wheel, which in turn would make pysam developers responsible for updating the wheels when there is a security problem. This would probably need to be communicated.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,374,2016-11-15T14:57:14Z,2016-11-19T21:19:28Z,2016-11-20T14:11:19Z,MERGED,True,69,0,1,https://github.com/marcelm,Script for building manylinux1 wheels,1,[],https://github.com/pysam-developers/pysam/pull/374,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/374#issuecomment-261740286,"As discussed in issue #344, it would be great if wheels for pysam were available. Pysam is quite a heavy dependency, and it is one of those packages for which offering wheels would therefore really pay off by reducing installation time.
This script is based on the manylinux1 demo. It uses docker to build binary, manylinux1 wheels. It is meant to be run locally for now. The wheels are put into a wheelhouse/ directory, and someone with access to the PyPI account then needs to upload them (I guess with twine upload).
The only limitation is that HTTPS and S3 URLs are not supported because this would mean that OpenSSL needs to be bundled into the wheel, which in turn would make pysam developers responsible for updating the wheels when there is a security problem. This would probably need to be communicated.","Great, many thanks!
I will play around with the script to get the wheels up. Currently busy at work, aiming for a new release in three weeks (early Dec).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,374,2016-11-15T14:57:14Z,2016-11-19T21:19:28Z,2016-11-20T14:11:19Z,MERGED,True,69,0,1,https://github.com/marcelm,Script for building manylinux1 wheels,1,[],https://github.com/pysam-developers/pysam/pull/374,https://github.com/marcelm,3,https://github.com/pysam-developers/pysam/pull/374#issuecomment-261780570,"As discussed in issue #344, it would be great if wheels for pysam were available. Pysam is quite a heavy dependency, and it is one of those packages for which offering wheels would therefore really pay off by reducing installation time.
This script is based on the manylinux1 demo. It uses docker to build binary, manylinux1 wheels. It is meant to be run locally for now. The wheels are put into a wheelhouse/ directory, and someone with access to the PyPI account then needs to upload them (I guess with twine upload).
The only limitation is that HTTPS and S3 URLs are not supported because this would mean that OpenSSL needs to be bundled into the wheel, which in turn would make pysam developers responsible for updating the wheels when there is a security problem. This would probably need to be communicated.","Great, thanks for merging!
I’m following the development around the manylinux1 standard and will let you know when there is a solution for the OpenSSL thing. I don’t see it as a blocker, though.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,379,2016-12-01T09:07:46Z,2016-12-01T17:46:17Z,2016-12-01T17:46:17Z,CLOSED,False,1,1,1,https://github.com/standage,Simple fix to ValueError issue during CI build,1,[],https://github.com/pysam-developers/pysam/pull/379,https://github.com/standage,1,https://github.com/pysam-developers/pysam/pull/379,"Simple fix based on @EricDeveaud's comment on #349. I was getting the same error when trying to install with pip install pysam on Travis CI. Now it works fine with pip install https://github.com/standage/pysam.git. Obviously, it would be nice if this got fixed in the next release so we could all go back to using the canonical pip version!","Simple fix based on @EricDeveaud's comment on #349. I was getting the same error when trying to install with pip install pysam on Travis CI. Now it works fine with pip install https://github.com/standage/pysam.git. Obviously, it would be nice if this got fixed in the next release so we could all go back to using the canonical pip version!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,379,2016-12-01T09:07:46Z,2016-12-01T17:46:17Z,2016-12-01T17:46:17Z,CLOSED,False,1,1,1,https://github.com/standage,Simple fix to ValueError issue during CI build,1,[],https://github.com/pysam-developers/pysam/pull/379,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/379#issuecomment-264164306,"Simple fix based on @EricDeveaud's comment on #349. I was getting the same error when trying to install with pip install pysam on Travis CI. Now it works fine with pip install https://github.com/standage/pysam.git. Obviously, it would be nice if this got fixed in the next release so we could all go back to using the canonical pip version!",Is this not already fixed by #345 (which is a better approach)?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,379,2016-12-01T09:07:46Z,2016-12-01T17:46:17Z,2016-12-01T17:46:17Z,CLOSED,False,1,1,1,https://github.com/standage,Simple fix to ValueError issue during CI build,1,[],https://github.com/pysam-developers/pysam/pull/379,https://github.com/standage,3,https://github.com/pysam-developers/pysam/pull/379#issuecomment-264242272,"Simple fix based on @EricDeveaud's comment on #349. I was getting the same error when trying to install with pip install pysam on Travis CI. Now it works fine with pip install https://github.com/standage/pysam.git. Obviously, it would be nice if this got fixed in the next release so we could all go back to using the canonical pip version!","Yes, #345 fixes my issue. I should have thought to try pip installing the latest master, which indeed works. When you cut a new release I'll go back to installing from PyPI.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,384,2016-12-10T23:48:39Z,2016-12-19T12:53:58Z,2016-12-19T12:54:00Z,MERGED,True,17,12,1,https://github.com/AndreasHeger,{AH} new method to compute hash value,1,[],https://github.com/pysam-developers/pysam/pull/384,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/384,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,385,2016-12-11T22:05:49Z,2016-12-19T12:56:59Z,2016-12-19T12:56:59Z,MERGED,True,422,393,11,https://github.com/bioinformed,More bcf fixes,13,[],https://github.com/pysam-developers/pysam/pull/385,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/385,"Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class","Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class",True,{'THUMBS_UP': ['https://github.com/hzpc-joostk']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,385,2016-12-11T22:05:49Z,2016-12-19T12:56:59Z,2016-12-19T12:56:59Z,MERGED,True,422,393,11,https://github.com/bioinformed,More bcf fixes,13,[],https://github.com/pysam-developers/pysam/pull/385,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/385#issuecomment-266321826,"Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class","@AndreasHeger: You may want to review this PR, since it adds a common base class HTSFile for AlignmentFile and  VariantFile and exposes more htsFormat information.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,385,2016-12-11T22:05:49Z,2016-12-19T12:56:59Z,2016-12-19T12:56:59Z,MERGED,True,422,393,11,https://github.com/bioinformed,More bcf fixes,13,[],https://github.com/pysam-developers/pysam/pull/385,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/385#issuecomment-266347851,"Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class","Should this base class be used for TabixFile as well?  It seems to have at least some of the same fields (e.g. filename, index).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,385,2016-12-11T22:05:49Z,2016-12-19T12:56:59Z,2016-12-19T12:56:59Z,MERGED,True,422,393,11,https://github.com/bioinformed,More bcf fixes,13,[],https://github.com/pysam-developers/pysam/pull/385,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/385#issuecomment-266498171,"Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class","Good point, @kyleabeauchamp!   TabixFile now inherits from HTSFile too.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,385,2016-12-11T22:05:49Z,2016-12-19T12:56:59Z,2016-12-19T12:56:59Z,MERGED,True,422,393,11,https://github.com/bioinformed,More bcf fixes,13,[],https://github.com/pysam-developers/pysam/pull/385,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/385#issuecomment-267958015,"Issue #371: do not interpret vector end codes for scalar values
Issue #355: Implement streams using file descriptors for VariantFile
Fix Python 3 build on Darwin
Refactor common functionality from AlignmentFile and VariantFile into a common HTSFile base class","Thanks, having HTSFile is clearly the right thing to do.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,389,2016-12-26T05:04:29Z,2017-01-05T20:31:41Z,2017-01-05T20:35:21Z,MERGED,True,0,4,1,https://github.com/0xaf1f,setup.py: remove redundant setting of HTSLIB_MODE,1,[],https://github.com/pysam-developers/pysam/pull/389,https://github.com/0xaf1f,1,https://github.com/pysam-developers/pysam/pull/389,It's already initialized earlier in the script.,It's already initialized earlier in the script.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,389,2016-12-26T05:04:29Z,2017-01-05T20:31:41Z,2017-01-05T20:35:21Z,MERGED,True,0,4,1,https://github.com/0xaf1f,setup.py: remove redundant setting of HTSLIB_MODE,1,[],https://github.com/pysam-developers/pysam/pull/389,https://github.com/0xaf1f,2,https://github.com/pysam-developers/pysam/pull/389#issuecomment-269163318,It's already initialized earlier in the script.,"This code was there before you added the line:
HTSLIB_MODE = os.environ.get(""HTSLIB_MODE"", ""shared"")
earlier on in the script.  However, the code that this patch removes makes it impossible to ever use HTSLIB_MODE=separate, because it would get overridden to ""shared"" no matter what (in both the try and except clauses). I don't know if you had intended something different.
Just an additional note-- we don't need this patch for Debian (we're using ""external"" for this mode), but since I had added part of the code here, I felt like I should clean it up since it looks like it's now obsolete.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,389,2016-12-26T05:04:29Z,2017-01-05T20:31:41Z,2017-01-05T20:35:21Z,MERGED,True,0,4,1,https://github.com/0xaf1f,setup.py: remove redundant setting of HTSLIB_MODE,1,[],https://github.com/pysam-developers/pysam/pull/389,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/389#issuecomment-270750140,It's already initialized earlier in the script.,Thanks! I will need to go through setup.py and simplify.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,391,2017-01-06T23:58:19Z,2017-01-06T23:58:44Z,2017-11-17T13:24:56Z,MERGED,True,9,46,1,https://github.com/AndreasHeger,Ah use conda packages for externals,4,[],https://github.com/pysam-developers/pysam/pull/391,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/391,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,392,2017-01-08T16:36:23Z,2017-01-08T17:09:13Z,2017-01-08T17:09:18Z,MERGED,True,55,19,4,https://github.com/bioinformed,Support Python 3.6 file system path protocol,4,[],https://github.com/pysam-developers/pysam/pull/392,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/392,"Support Python 3.6 file system path protocol (using os.fsencode, available since Python 3.2).  Also fix remaining flaw preventing solution to #355 from working for VariantFiles.","Support Python 3.6 file system path protocol (using os.fsencode, available since Python 3.2).  Also fix remaining flaw preventing solution to #355 from working for VariantFiles.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,393,2017-01-18T22:28:12Z,2017-01-22T19:32:25Z,2017-01-22T19:32:30Z,MERGED,True,272,101,7,https://github.com/AndreasHeger,Ah add file descriptor support to alignment file,13,[],https://github.com/pysam-developers/pysam/pull/393,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/393,Addresses #355 for AlignmentFile objects,Addresses #355 for AlignmentFile objects,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,393,2017-01-18T22:28:12Z,2017-01-22T19:32:25Z,2017-01-22T19:32:30Z,MERGED,True,272,101,7,https://github.com/AndreasHeger,Ah add file descriptor support to alignment file,13,[],https://github.com/pysam-developers/pysam/pull/393,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/393#issuecomment-273622239,Addresses #355 for AlignmentFile objects,... still requires a test.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,394,2017-01-19T20:31:02Z,2017-01-19T20:31:10Z,2017-01-19T21:12:59Z,MERGED,True,1,0,1,https://github.com/AndreasHeger,{AH} enable py3.6,1,[],https://github.com/pysam-developers/pysam/pull/394,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/394,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,394,2017-01-19T20:31:02Z,2017-01-19T20:31:10Z,2017-01-19T21:12:59Z,MERGED,True,1,0,1,https://github.com/AndreasHeger,{AH} enable py3.6,1,[],https://github.com/pysam-developers/pysam/pull/394,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/394#issuecomment-273897417,,"FWIW, the bioconda infrastruction hasn't enabled 3.6 just yet, but it's ongoing:
bioconda/bioconda-recipes#3338",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,394,2017-01-19T20:31:02Z,2017-01-19T20:31:10Z,2017-01-19T21:12:59Z,MERGED,True,1,0,1,https://github.com/AndreasHeger,{AH} enable py3.6,1,[],https://github.com/pysam-developers/pysam/pull/394,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/394#issuecomment-273899614,,"Thanks. Interestingly, it worked. bcftools, etc. were picked up, but pysam compiled against python3.6.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,394,2017-01-19T20:31:02Z,2017-01-19T20:31:10Z,2017-01-19T21:12:59Z,MERGED,True,1,0,1,https://github.com/AndreasHeger,{AH} enable py3.6,1,[],https://github.com/pysam-developers/pysam/pull/394,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/394#issuecomment-273900180,,"Yep, there should be no problem building pysam because the bioconda dependencies are all non-python libraries.
The only possible issue is that we'll need bioconda to enable 3.6 so that they can build the pysam py3.6 package once you finalize the release.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,401,2017-02-06T16:37:59Z,2017-02-17T19:51:29Z,2017-11-17T13:25:02Z,MERGED,True,2,3,1,https://github.com/AndreasHeger,Ah runpat hissues,2,[],https://github.com/pysam-developers/pysam/pull/401,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/401,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,401,2017-02-06T16:37:59Z,2017-02-17T19:51:29Z,2017-11-17T13:25:02Z,MERGED,True,2,3,1,https://github.com/AndreasHeger,Ah runpat hissues,2,[],https://github.com/pysam-developers/pysam/pull/401,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/401#issuecomment-277874841,,I'll test on Linux and OSX and let you know if I can provoke any failures.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,401,2017-02-06T16:37:59Z,2017-02-17T19:51:29Z,2017-11-17T13:25:02Z,MERGED,True,2,3,1,https://github.com/AndreasHeger,Ah runpat hissues,2,[],https://github.com/pysam-developers/pysam/pull/401,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/401#issuecomment-280749433,,"seems ok, I will merge for now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,408,2017-02-15T21:50:36Z,2017-02-16T22:40:10Z,2017-02-16T22:40:10Z,MERGED,True,3,0,1,https://github.com/dpryan79,Attempt to fix #406,1,[],https://github.com/pysam-developers/pysam/pull/408,https://github.com/dpryan79,1,https://github.com/pysam-developers/pysam/pull/408,"This seems to fix the issue I reported in #406. In short, for arrays the valuetype is always going to be set to B, which won't be appropriate for the type of the array. This code changes this to the type of the array or None if that's not a known type (e.g., if a known type ends up getting stored as something else...the ZM tag in my original example in #406 is such a case) then this is changed to None and generated as needed. It's likely that this means that some of the other code in packTags() is no longer needed.","This seems to fix the issue I reported in #406. In short, for arrays the valuetype is always going to be set to B, which won't be appropriate for the type of the array. This code changes this to the type of the array or None if that's not a known type (e.g., if a known type ends up getting stored as something else...the ZM tag in my original example in #406 is such a case) then this is changed to None and generated as needed. It's likely that this means that some of the other code in packTags() is no longer needed.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,408,2017-02-15T21:50:36Z,2017-02-16T22:40:10Z,2017-02-16T22:40:10Z,MERGED,True,3,0,1,https://github.com/dpryan79,Attempt to fix #406,1,[],https://github.com/pysam-developers/pysam/pull/408,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/408#issuecomment-280486323,"This seems to fix the issue I reported in #406. In short, for arrays the valuetype is always going to be set to B, which won't be appropriate for the type of the array. This code changes this to the type of the array or None if that's not a known type (e.g., if a known type ends up getting stored as something else...the ZM tag in my original example in #406 is such a case) then this is changed to None and generated as needed. It's likely that this means that some of the other code in packTags() is no longer needed.","Great, thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,418,2017-03-17T02:27:28Z,2017-04-10T11:56:23Z,2017-04-10T11:56:23Z,MERGED,True,6,6,1,https://github.com/abjonnes,update setup.py to use correct sysconfig variable for py3,3,[],https://github.com/pysam-developers/pysam/pull/418,https://github.com/abjonnes,1,https://github.com/pysam-developers/pysam/pull/418,"This addresses #417. The SOABI and EXT_SUFFIX variables were introduced in py3.2 with PEP 3149, which apparently broke some extensions that use SO. This problem was fixed and SO was deprecated in py3.4. See issue16754 for some more discussion.","This addresses #417. The SOABI and EXT_SUFFIX variables were introduced in py3.2 with PEP 3149, which apparently broke some extensions that use SO. This problem was fixed and SO was deprecated in py3.4. See issue16754 for some more discussion.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,418,2017-03-17T02:27:28Z,2017-04-10T11:56:23Z,2017-04-10T11:56:23Z,MERGED,True,6,6,1,https://github.com/abjonnes,update setup.py to use correct sysconfig variable for py3,3,[],https://github.com/pysam-developers/pysam/pull/418,https://github.com/abjonnes,2,https://github.com/pysam-developers/pysam/pull/418#issuecomment-287260668,"This addresses #417. The SOABI and EXT_SUFFIX variables were introduced in py3.2 with PEP 3149, which apparently broke some extensions that use SO. This problem was fixed and SO was deprecated in py3.4. See issue16754 for some more discussion.","Apparently extension suffices on OSX did not use ABI until py3.5, so we should use EXT_SUFFIX directly in all cases, falling back to SO if not available, since this is what is used by distutils internally.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,418,2017-03-17T02:27:28Z,2017-04-10T11:56:23Z,2017-04-10T11:56:23Z,MERGED,True,6,6,1,https://github.com/abjonnes,update setup.py to use correct sysconfig variable for py3,3,[],https://github.com/pysam-developers/pysam/pull/418,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/418#issuecomment-292894517,"This addresses #417. The SOABI and EXT_SUFFIX variables were introduced in py3.2 with PEP 3149, which apparently broke some extensions that use SO. This problem was fixed and SO was deprecated in py3.4. See issue16754 for some more discussion.","Thanks, apologies for the delay in getting back, this makes sense.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/428,Incorporate htslib/bcftool/ssamtools 1.4,Incorporate htslib/bcftool/ssamtools 1.4,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292396043,Incorporate htslib/bcftool/ssamtools 1.4,"FWIW tests seem almost all good on my Ubuntu 16.04 + anaconda3.6 environment, modulo what is likely a missing file or something:

======================================================================
ERROR: testFTPView (faidx_test.TestRemoteFileFTP)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""~/src/software/pysam/tests/faidx_test.py"", line 229, in testFTPView
    with pysam.Fastafile(self.url) as f:
  File ""pysam/libcfaidx.pyx"", line 114, in pysam.libcfaidx.FastaFile.__cinit__ (pysam/libcfaidx.c:2351)
  File ""pysam/libcfaidx.pyx"", line 164, in pysam.libcfaidx.FastaFile._open (pysam/libcfaidx.c:3540)
ValueError: could not locate index file GRCh38_full_analysis_set_plus_decoy_hla.fa.fai
----------------------------------------------------------------------
Ran 920 tests in 148.871s

FAILED (SKIP=1, errors=1)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292640529,Incorporate htslib/bcftool/ssamtools 1.4,"Thanks. This is remote file access and the URL is valid, the error might a bit more than missing file. I will check.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292665193,Incorporate htslib/bcftool/ssamtools 1.4,Any thoughts on syncing the pysam versioning to match HTSLib and friends?  It might help reduce confusion when people have different versions sitting around.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292665335,Incorporate htslib/bcftool/ssamtools 1.4,E.g. if everything was 1.4 it might be less confusing that HTSLib 1.4 and pysam 0.11,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292685990,Incorporate htslib/bcftool/ssamtools 1.4,"@kyleabeauchamp, good point. @bioinformed and I discussed this before (off-line) and our thoughts were that pysam is not quite >1.0 yet, the VariantFile API is not yet fully settled. But that aside, it might also be difficult to tie both too closely together if we want to use semantic versioning for pysam to indicate breaking changes to the pysam API while the underlying htslib remains unchanged. Do you know of a good versioning scheme that would allow this?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,428,2017-04-06T21:10:57Z,2017-04-08T01:34:47Z,2017-04-08T02:03:05Z,MERGED,True,39337,13016,261,https://github.com/AndreasHeger,Htslib 1.4,9,[],https://github.com/pysam-developers/pysam/pull/428,https://github.com/kyleabeauchamp,7,https://github.com/pysam-developers/pysam/pull/428#issuecomment-292687597,Incorporate htslib/bcftool/ssamtools 1.4,"I don't know of a good alternative versioning scheme.  I imagine there might be Boost ""add-on-libraries"" that are independent of Boost but whose versioning is tied to the Boost version--however I can't think of any offhand.
I agree that fixing to HTSLib would reduce our ability to separately implement semantic versioning.  I think your rationale is a convincing reason to stick with status quo for a while.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,429,2017-04-08T21:04:22Z,2017-04-10T09:29:52Z,2017-04-10T09:29:55Z,MERGED,True,48,17,3,https://github.com/AndreasHeger,"{AH} fix usage message, closes #422",3,[],https://github.com/pysam-developers/pysam/pull/429,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/429,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,430,2017-04-09T22:01:20Z,2017-04-09T22:01:34Z,2017-04-09T22:01:37Z,MERGED,True,103,23,5,https://github.com/AndreasHeger,{AH} export SAM enums closes #419,1,[],https://github.com/pysam-developers/pysam/pull/430,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/430,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,431,2017-04-10T00:00:20Z,2017-04-10T03:54:45Z,2017-04-11T10:04:02Z,MERGED,True,5,2,1,https://github.com/bioinformed,BCF: Fix lazy header writing,1,[],https://github.com/pysam-developers/pysam/pull/431,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/431,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,432,2017-04-10T00:30:09Z,2017-04-10T03:55:23Z,2017-04-10T03:55:25Z,MERGED,True,41,12,1,https://github.com/bioinformed,Address several outstanding BGZfile issues,1,[],https://github.com/pysam-developers/pysam/pull/432,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/432,"[#411] Fix BGZfile initialization bug
[#412] Add seek support for BGZFile
[#395] Make BGZfile iterable","[#411] Fix BGZfile initialization bug
[#412] Add seek support for BGZFile
[#395] Make BGZfile iterable",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,434,2017-04-10T03:51:14Z,2017-04-10T09:11:21Z,2017-04-10T14:24:54Z,MERGED,True,44,32,2,https://github.com/bioinformed,[#433] correct getQueryEnd,1,[],https://github.com/pysam-developers/pysam/pull/434,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/434,See #433,See #433,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,434,2017-04-10T03:51:14Z,2017-04-10T09:11:21Z,2017-04-10T14:24:54Z,MERGED,True,44,32,2,https://github.com/bioinformed,[#433] correct getQueryEnd,1,[],https://github.com/pysam-developers/pysam/pull/434,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/434#issuecomment-292844761,See #433,"@AndreasHeger: Please review.
I'm pretty confident about the fix itself.  However in addressing it, I've decided that infer_query_length() is not sensible.  I recommend getting rid of the always flag (if possible) and adding a flag to control whether the result includes hard-clipped bases or not.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,434,2017-04-10T03:51:14Z,2017-04-10T09:11:21Z,2017-04-10T14:24:54Z,MERGED,True,44,32,2,https://github.com/bioinformed,[#433] correct getQueryEnd,1,[],https://github.com/pysam-developers/pysam/pull/434,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/434#issuecomment-292892965,See #433,"Thanks, looks much better. I will open a separate issue about getting rid of the always flag.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,435,2017-04-10T10:34:16Z,2017-04-10T13:54:50Z,2017-04-10T13:54:54Z,MERGED,True,24,4,3,https://github.com/AndreasHeger,"{AH} fix tid access in fetch, closes #415",3,[],https://github.com/pysam-developers/pysam/pull/435,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/435,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,436,2017-04-10T12:52:11Z,2017-04-10T13:24:40Z,2017-04-10T13:24:43Z,MERGED,True,138,2115,4,https://github.com/AndreasHeger,Ah add sam header flag,2,[],https://github.com/pysam-developers/pysam/pull/436,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/436,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,437,2017-04-10T15:47:22Z,2017-04-10T19:21:22Z,2017-04-10T19:21:25Z,MERGED,True,85,29,3,https://github.com/AndreasHeger,split infer_query_length into infer_read_length and infer_query_lengt…,1,[],https://github.com/pysam-developers/pysam/pull/437,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/437,"…h, closes #332","…h, closes #332",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,448,2017-04-21T20:06:23Z,2017-04-23T20:53:02Z,2017-04-23T20:53:50Z,MERGED,True,6,1,1,https://github.com/dpryan79,Fix #440,1,[],https://github.com/pysam-developers/pysam/pull/448,https://github.com/dpryan79,1,https://github.com/pysam-developers/pysam/pull/448,"This fixes the issue I reported in #440 with infer_query_length(). Old code specifying always will now use the new functions.
I'm getting a bug report every day or so now from people using deepTools that's due to this, so a quickish 0.11.1 release would be awesome :) If you want to pack anything else into it and need a hand then I'm happy to help.","This fixes the issue I reported in #440 with infer_query_length(). Old code specifying always will now use the new functions.
I'm getting a bug report every day or so now from people using deepTools that's due to this, so a quickish 0.11.1 release would be awesome :) If you want to pack anything else into it and need a hand then I'm happy to help.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,448,2017-04-21T20:06:23Z,2017-04-23T20:53:02Z,2017-04-23T20:53:50Z,MERGED,True,6,1,1,https://github.com/dpryan79,Fix #440,1,[],https://github.com/pysam-developers/pysam/pull/448,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/448#issuecomment-296487837,"This fixes the issue I reported in #440 with infer_query_length(). Old code specifying always will now use the new functions.
I'm getting a bug report every day or so now from people using deepTools that's due to this, so a quickish 0.11.1 release would be awesome :) If you want to pack anything else into it and need a hand then I'm happy to help.","Thanks, looks good. I will add a deprecation statement to the docs and then release.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,448,2017-04-21T20:06:23Z,2017-04-23T20:53:02Z,2017-04-23T20:53:50Z,MERGED,True,6,1,1,https://github.com/dpryan79,Fix #440,1,[],https://github.com/pysam-developers/pysam/pull/448,https://github.com/dpryan79,3,https://github.com/pysam-developers/pysam/pull/448#issuecomment-296487897,"This fixes the issue I reported in #440 with infer_query_length(). Old code specifying always will now use the new functions.
I'm getting a bug report every day or so now from people using deepTools that's due to this, so a quickish 0.11.1 release would be awesome :) If you want to pack anything else into it and need a hand then I'm happy to help.","Awesome, thanks @AndreasHeger!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,454,2017-05-08T21:30:58Z,2017-05-08T21:31:48Z,2017-05-08T21:31:48Z,CLOSED,False,2202,1052,99,https://github.com/AndreasHegerGenomics,Ah htslib 1.4.1,5,[],https://github.com/pysam-developers/pysam/pull/454,https://github.com/AndreasHegerGenomics,1,https://github.com/pysam-developers/pysam/pull/454,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,455,2017-05-08T21:32:43Z,2017-05-09T19:07:52Z,2017-11-17T13:24:25Z,MERGED,True,2202,1053,99,https://github.com/AndreasHeger,Ah htslib 1.4.1,7,[],https://github.com/pysam-developers/pysam/pull/455,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/455,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,456,2017-05-09T03:50:35Z,2017-05-09T19:07:51Z,2017-07-24T13:13:25Z,MERGED,True,2928,1157,106,https://github.com/bioinformed,KBJ's eclectic development branch,18,[],https://github.com/pysam-developers/pysam/pull/456,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/456,"Sorry for submitting a mashup of several updates.  With the rush to issue a new release with the security fix, I didn't have the time to split things out cleanly.  Contained within are:
VariantFile and related object fixes

Restore VariantFile.dealloc
Correct handling of bcf_str_missing in bcf_array_to_object and bcf_object_to_array
Added update() and pop() methods to some dict-like proxy objects
Fix handling of INFO/END
Add argument to issue a warning instead of an exception if input appears to be truncated

Other features and fixes:

Make AlignmentFile __dealloc__ and close more stringent
Normalize whitespace in libcalignmentfile.pyx
Fix MANIFEST.in entries for pysam/libc*z
Add argument AlignmentFile to issue a warning instead of an exception if input appears to be truncated

Experimental features:

HFile object wrapper
VariantRecord: Initialization arguments to VariantRecord.new_record
VariantRecord: Initial implementation of object comparison
VariantRecord: Initial support for non-ploidy 2 data","Sorry for submitting a mashup of several updates.  With the rush to issue a new release with the security fix, I didn't have the time to split things out cleanly.  Contained within are:
VariantFile and related object fixes

Restore VariantFile.dealloc
Correct handling of bcf_str_missing in bcf_array_to_object and bcf_object_to_array
Added update() and pop() methods to some dict-like proxy objects
Fix handling of INFO/END
Add argument to issue a warning instead of an exception if input appears to be truncated

Other features and fixes:

Make AlignmentFile __dealloc__ and close more stringent
Normalize whitespace in libcalignmentfile.pyx
Fix MANIFEST.in entries for pysam/libc*z
Add argument AlignmentFile to issue a warning instead of an exception if input appears to be truncated

Experimental features:

HFile object wrapper
VariantRecord: Initialization arguments to VariantRecord.new_record
VariantRecord: Initial implementation of object comparison
VariantRecord: Initial support for non-ploidy 2 data",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,456,2017-05-09T03:50:35Z,2017-05-09T19:07:51Z,2017-07-24T13:13:25Z,MERGED,True,2928,1157,106,https://github.com/bioinformed,KBJ's eclectic development branch,18,[],https://github.com/pysam-developers/pysam/pull/456,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/456#issuecomment-300078779,"Sorry for submitting a mashup of several updates.  With the rush to issue a new release with the security fix, I didn't have the time to split things out cleanly.  Contained within are:
VariantFile and related object fixes

Restore VariantFile.dealloc
Correct handling of bcf_str_missing in bcf_array_to_object and bcf_object_to_array
Added update() and pop() methods to some dict-like proxy objects
Fix handling of INFO/END
Add argument to issue a warning instead of an exception if input appears to be truncated

Other features and fixes:

Make AlignmentFile __dealloc__ and close more stringent
Normalize whitespace in libcalignmentfile.pyx
Fix MANIFEST.in entries for pysam/libc*z
Add argument AlignmentFile to issue a warning instead of an exception if input appears to be truncated

Experimental features:

HFile object wrapper
VariantRecord: Initialization arguments to VariantRecord.new_record
VariantRecord: Initial implementation of object comparison
VariantRecord: Initial support for non-ploidy 2 data","Travis failures are due to version mismatches, not the contents of this PR.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,456,2017-05-09T03:50:35Z,2017-05-09T19:07:51Z,2017-07-24T13:13:25Z,MERGED,True,2928,1157,106,https://github.com/bioinformed,KBJ's eclectic development branch,18,[],https://github.com/pysam-developers/pysam/pull/456,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/456#issuecomment-300270515,"Sorry for submitting a mashup of several updates.  With the rush to issue a new release with the security fix, I didn't have the time to split things out cleanly.  Contained within are:
VariantFile and related object fixes

Restore VariantFile.dealloc
Correct handling of bcf_str_missing in bcf_array_to_object and bcf_object_to_array
Added update() and pop() methods to some dict-like proxy objects
Fix handling of INFO/END
Add argument to issue a warning instead of an exception if input appears to be truncated

Other features and fixes:

Make AlignmentFile __dealloc__ and close more stringent
Normalize whitespace in libcalignmentfile.pyx
Fix MANIFEST.in entries for pysam/libc*z
Add argument AlignmentFile to issue a warning instead of an exception if input appears to be truncated

Experimental features:

HFile object wrapper
VariantRecord: Initialization arguments to VariantRecord.new_record
VariantRecord: Initial implementation of object comparison
VariantRecord: Initial support for non-ploidy 2 data","Many thanks, a lot of work!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,457,2017-05-09T22:44:08Z,2017-05-10T02:27:11Z,2017-07-24T13:13:26Z,MERGED,True,42,61,2,https://github.com/bioinformed,Fix error in calling `bcf_get_genotypes` and a few other more minor glitches,3,[],https://github.com/pysam-developers/pysam/pull/457,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/457,"The error in calling bcf_get_genotypes was due to a last minute cleanup that wasn't valid.  The remainder are:

fix a few ordering issues, which are side-effects of developing under Python 3.6 where all dicts are ordered.
fix return type of pop() method.
Make header attributes public/readonly.
rename VariantContig.header property to header_record due to conflict with the previous change.
Allow filter initialization of VariantRecordFilter in VariantHeader.new_record from another VariantRecordFilter instance.

Hopefully a run through Travis will pick up any residual issues.","The error in calling bcf_get_genotypes was due to a last minute cleanup that wasn't valid.  The remainder are:

fix a few ordering issues, which are side-effects of developing under Python 3.6 where all dicts are ordered.
fix return type of pop() method.
Make header attributes public/readonly.
rename VariantContig.header property to header_record due to conflict with the previous change.
Allow filter initialization of VariantRecordFilter in VariantHeader.new_record from another VariantRecordFilter instance.

Hopefully a run through Travis will pick up any residual issues.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,458,2017-05-10T20:36:43Z,2017-05-10T20:36:57Z,2017-05-10T20:37:01Z,MERGED,True,319,276,9,https://github.com/AndreasHeger,"{AH} add GFF3 support to tabix, closes #452",1,[],https://github.com/pysam-developers/pysam/pull/458,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/458,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,460,2017-05-10T23:44:39Z,2017-05-11T00:25:54Z,2017-07-24T13:13:28Z,MERGED,True,93,40,1,https://github.com/bioinformed,Fix even more bugs that have resulted from supporting non-diploid data,5,[],https://github.com/pysam-developers/pysam/pull/460,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/460,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,461,2017-05-11T04:41:37Z,2017-05-11T05:55:26Z,2017-05-11T05:55:30Z,MERGED,True,211,62,2,https://github.com/bioinformed,Multiple fixes related to VariantRecordInfo and handling of INFO/END,1,[],https://github.com/pysam-developers/pysam/pull/461,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/461,"A pysam user has privately reported a bug with the VariantRecord class.  The
situation is somewhat complicated, but the root cause is that INFO/END is
able to get out of sync with the VariantRecord stop coordinate.  After
trying several simpler workarounds, it seems that the best solution is to
not expose INFO/END via VariantRecord.info.  This is because it is an
artifact of the VCF text format that isn't used in BCF or the htslib
in-memory representation.  Instead, all access is via VariantRecord.stop and
VariantRecord.rlen, while INFO/END is kept in sync behind the scenes.
In fixing researching and this bug, I've also found and fixed several other
bugs in VariantRecordInfo:

scalar INFO entries could not be set again after being deleted
multiple cases where access to values was attempted before ensuring
that lazy parsing had occurred
__bool__ and __len__ counted deleted entries
__delitem__ now allows unset flags to be deleted without raising a KeyError","A pysam user has privately reported a bug with the VariantRecord class.  The
situation is somewhat complicated, but the root cause is that INFO/END is
able to get out of sync with the VariantRecord stop coordinate.  After
trying several simpler workarounds, it seems that the best solution is to
not expose INFO/END via VariantRecord.info.  This is because it is an
artifact of the VCF text format that isn't used in BCF or the htslib
in-memory representation.  Instead, all access is via VariantRecord.stop and
VariantRecord.rlen, while INFO/END is kept in sync behind the scenes.
In fixing researching and this bug, I've also found and fixed several other
bugs in VariantRecordInfo:

scalar INFO entries could not be set again after being deleted
multiple cases where access to values was attempted before ensuring
that lazy parsing had occurred
__bool__ and __len__ counted deleted entries
__delitem__ now allows unset flags to be deleted without raising a KeyError",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,470,2017-05-30T08:58:14Z,2017-06-05T10:37:13Z,2017-06-05T10:37:13Z,MERGED,True,1,0,1,https://github.com/nieder,remove implicit declarations on memset and strlen,1,[],https://github.com/pysam-developers/pysam/pull/470,https://github.com/nieder,1,https://github.com/pysam-developers/pysam/pull/470,"Fixes this problem:
gcc -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -fwrapv -O3 -Wall -Wstrict-prototypes -MD -I/sw/include -Ipysam -I. -I/sw/include -I/sw/include/python2.7 -c pysam/tabix_util.c -o build/temp.macosx-10.11-x86_64-2.7/pysam/tabix_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
pysam/tabix_util.c:20:3: warning: implicitly declaring library function 'memset' with type 'void
      *(void *, int, unsigned long)' [-Wimplicit-function-declaration]
  memset(*line, 0, *linelen);
  ^
pysam/tabix_util.c:20:3: note: include the header <string.h> or explicitly provide a declaration
      for 'memset'
pysam/tabix_util.c:23:11: warning: implicitly declaring library function 'strlen' with type
      'unsigned long (const char *)' [-Wimplicit-function-declaration]
  return (strlen(*line));
          ^
pysam/tabix_util.c:23:11: note: include the header <string.h> or explicitly provide a
      declaration for 'strlen'","Fixes this problem:
gcc -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -fwrapv -O3 -Wall -Wstrict-prototypes -MD -I/sw/include -Ipysam -I. -I/sw/include -I/sw/include/python2.7 -c pysam/tabix_util.c -o build/temp.macosx-10.11-x86_64-2.7/pysam/tabix_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
pysam/tabix_util.c:20:3: warning: implicitly declaring library function 'memset' with type 'void
      *(void *, int, unsigned long)' [-Wimplicit-function-declaration]
  memset(*line, 0, *linelen);
  ^
pysam/tabix_util.c:20:3: note: include the header <string.h> or explicitly provide a declaration
      for 'memset'
pysam/tabix_util.c:23:11: warning: implicitly declaring library function 'strlen' with type
      'unsigned long (const char *)' [-Wimplicit-function-declaration]
  return (strlen(*line));
          ^
pysam/tabix_util.c:23:11: note: include the header <string.h> or explicitly provide a
      declaration for 'strlen'",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,470,2017-05-30T08:58:14Z,2017-06-05T10:37:13Z,2017-06-05T10:37:13Z,MERGED,True,1,0,1,https://github.com/nieder,remove implicit declarations on memset and strlen,1,[],https://github.com/pysam-developers/pysam/pull/470,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/470#issuecomment-306157500,"Fixes this problem:
gcc -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -fwrapv -O3 -Wall -Wstrict-prototypes -MD -I/sw/include -Ipysam -I. -I/sw/include -I/sw/include/python2.7 -c pysam/tabix_util.c -o build/temp.macosx-10.11-x86_64-2.7/pysam/tabix_util.o -Wno-unused -Wno-strict-prototypes -Wno-sign-compare -Wno-error=declaration-after-statement
pysam/tabix_util.c:20:3: warning: implicitly declaring library function 'memset' with type 'void
      *(void *, int, unsigned long)' [-Wimplicit-function-declaration]
  memset(*line, 0, *linelen);
  ^
pysam/tabix_util.c:20:3: note: include the header <string.h> or explicitly provide a declaration
      for 'memset'
pysam/tabix_util.c:23:11: warning: implicitly declaring library function 'strlen' with type
      'unsigned long (const char *)' [-Wimplicit-function-declaration]
  return (strlen(*line));
          ^
pysam/tabix_util.c:23:11: note: include the header <string.h> or explicitly provide a
      declaration for 'strlen'",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,474,2017-06-02T20:23:15Z,2017-06-05T10:37:52Z,2017-06-05T10:37:52Z,MERGED,True,3,0,1,https://github.com/kyleabeauchamp,Add example of fastq output,1,[],https://github.com/pysam-developers/pysam/pull/474,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/474,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,474,2017-06-02T20:23:15Z,2017-06-05T10:37:52Z,2017-06-05T10:37:52Z,MERGED,True,3,0,1,https://github.com/kyleabeauchamp,Add example of fastq output,1,[],https://github.com/pysam-developers/pysam/pull/474,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/474#issuecomment-305899996,,cc #473,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,474,2017-06-02T20:23:15Z,2017-06-05T10:37:52Z,2017-06-05T10:37:52Z,MERGED,True,3,0,1,https://github.com/kyleabeauchamp,Add example of fastq output,1,[],https://github.com/pysam-developers/pysam/pull/474,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/474#issuecomment-305900115,,I didn't check that this formats OK in the output HTML due to some local build issues I was having.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,474,2017-06-02T20:23:15Z,2017-06-05T10:37:52Z,2017-06-05T10:37:52Z,MERGED,True,3,0,1,https://github.com/kyleabeauchamp,Add example of fastq output,1,[],https://github.com/pysam-developers/pysam/pull/474,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/474#issuecomment-306157608,,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,476,2017-06-05T12:04:55Z,2017-06-05T12:05:10Z,2017-06-05T12:05:13Z,MERGED,True,383,230,5,https://github.com/AndreasHeger,Ah gff3 fixes,2,[],https://github.com/pysam-developers/pysam/pull/476,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/476,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,480,2017-06-08T14:38:44Z,2017-06-08T16:05:23Z,2017-06-08T16:05:28Z,MERGED,True,5,13,1,https://github.com/bioinformed,Correct VariantRecord edge cases described in Issue #479,1,[],https://github.com/pysam-developers/pysam/pull/480,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/480,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,1,https://github.com/pysam-developers/pysam/pull/489,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/489#issuecomment-309802505,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Thanks for your work on this issue!  I've not tried using relative loader paths before.  I'll start testing the various cases, including install from the various modes and also linking from a dependent package.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/489#issuecomment-310666446,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","This patch fixes the initial installation problems on OS X, but only addresses linking from within the same directory.  pysam is frequently extended by Cython modules in other packages, which no longer works with this patch applied.  I think we're stuck with having non-movable binaries.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,4,https://github.com/pysam-developers/pysam/pull/489#issuecomment-310669640,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",Thanks @bioinformed for the quick review! Do you know of any specific packages that do what you described (i.e. with Cython modules that extend pysam)?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,5,https://github.com/pysam-developers/pysam/pull/489#issuecomment-310676914,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","HTseq is one of the more popular packages that links against pysam.  There are many others too, including substantial non-open source packages used by some leading NGS companies.  (I know because I've written a few of them and gotten support requests from many more.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,6,https://github.com/pysam-developers/pysam/pull/489#issuecomment-310678467,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Thanks. I'll look into this a little more, but this seems quite intricate...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,7,https://github.com/pysam-developers/pysam/pull/489#issuecomment-310683384,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Also see: http://pysam.readthedocs.io/en/latest/usage.html#extending-pysam
This will give you a small test that is representative of how others are extending pysam.  It is a wonder this works on Linux out of the box.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,8,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311652235,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","@bioinformed  I finally had some time to look into this properly. I think we can get relative paths to work in every situation (egg/wheel/local install), but I made a slight change to the setup: instead of using @loader_path directly in the install name, I reverted to using @rpath for the install name prefix, and setting rpath on the library to @loader_path. For packages that run inside Python, this is functionally identical to what I had before, but gives some flexibility to 3rd party applications that want to link against pysam: they can provide -rpath upon compilation to specify the pysam install location. Is that acceptable?
This dance with @rpath and @loader_path is similar to how Conda and Enthought EPD packages are built; see conda/conda-build#279. The fix that I have here is also very similar to the existing bioconda recipe for pysam, though that doesn't include the provision with @rpath.
To test this, I ran python setup.py develop, python setup.py install, and I installed from a platform wheel, each time in a clean environment. I then ran the tests, and I installed htseq and ran the tests for that package. In each case I got a clean test run (with one caveat, described below). I was also able to dynamically load the pysam libraries from an external C program, though I had to set -rpath when compiling.
The only issue that I had while testing was that there has been a new version of samtools/htslib/... in the last week or so. If this new version is installed in the environment, it interferes with the version of htslib which is vendorized with pysam. To work around this, I pinned the version numbers of samtools etc. to 1.4 in the travis setup script (2bf0869). I haven't properly investigated what is going on here.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,9,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311653076,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","That said, I'd be happy to run additional tests!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,10,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311662661,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",This looks extremely promising!  I'll start testing...,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,11,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311672922,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Unfortunately this latest version is still failing for me.  I checked and HTseq seems to have dropped their use of linking against pysam, probably because it doesn't work reliably.  Here is one of my packages to use to test: https://github.com/bioinformed/vgraph
I think the solution will require setting an rpath relative to the Python binary or site-packages.  It is currently done via an absolute path, but I suspect it could be done via a relative path.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,12,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311697589,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Unfortunately this latest version is still failing for me.

Can you tell me how you installed the package? Perhaps I can reproduce...
Thanks for pointing out the vgraph package; I installed that via pip in clean environment and ran the doctests, and everything passed.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,13,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311701871,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",I've just retested from a new virtualenv and it is working now.  I need to go back and see if I can recreate that I did previous to cause the link failure.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,14,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311702838,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",Could it be samtools/htslib/bcftools at version 1.5? That gave me a lot of grief...,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,15,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311704897,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",Nope-- I'm working on adding support for the new htslib/samtools/bcftools in another branch.  And I don't use the Travis script for local testing.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,16,https://github.com/pysam-developers/pysam/pull/489#issuecomment-311706170,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",@caethan: I know you've worked on the problem of pysam linking before.  Can you give this PR a try and see if it works for you?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,17,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312262366,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",@AndreasHeger: I think @jvkersch may have fixed the linking problems on OS X.  Please review and merge if you're comfortable.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/AndreasHeger,18,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312459756,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","thanks @jvkersch  and @bioinformed  - outside my expertise, sounds all good to me!
I will augment the travis test script to test linking agaiinst pysam libraries outside the pysam install directory.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,19,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312460533,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!",Thanks @bioinformed and @AndreasHeger ! Please ping me if there are any issues with this.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,20,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312516396,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Bad news.  vgraph uses the pysam pxd files, which works with this PR.  I have another package that links against functions defined in pysam and htslib, which does not.  Before reverting this PR, I'll see if I can track down the specific problem.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/AndreasHeger,21,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312645620,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","Thanks. If you let me know how you link, I will add same tests.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/jvkersch,22,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312647084,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","@bioinformed Thanks for the notification; I would like to look into this but I don't have much time this week. I will try to get to it over the weekend, or by next week at the latest.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,489,2017-06-20T14:26:27Z,2017-07-01T22:48:38Z,2017-07-03T14:58:33Z,MERGED,True,11,15,2,https://github.com/jvkersch,Use @loader_path for mac OS library paths,3,[],https://github.com/pysam-developers/pysam/pull/489,https://github.com/bioinformed,23,https://github.com/pysam-developers/pysam/pull/489#issuecomment-312667686,"This is somewhat of an experimental PR to solicit some feedback on an issue with building pysam eggs/wheels on mac OS. The issue is that the current configuration in cy_build.py will cause the absolute path to the interpreter to be used in the libraries' rpath, and this makes an egg/wheel unshareable between different machines, or even different Python installations on the same machine.
To see this in more detail:

Build a wheel; python setup.py bdist_wheel
Unpack the egg; cd dist && unzip pysam*.whl
Inspect the rpath for any of the shared libraries (note the absolute path):

$ otool -l pysam/libcutils.*.so | grep -A2 LC_RPATH
          cmd LC_RPATH
      cmdsize 88
         path /Users/jvkersch/miniconda3/envs/pysam-env/lib/python3.6/site-packages (offset 12)

This PR removes the explicit setting of rpath, and changes the install_name for the shared libraries to something of the form @loader_path/<library-name>.  I was able to run the tests successfully on a clean install from wheels, and in a (different) environment with python setup.py develop.
Perhaps there's something I've overlooked here, please let me know if that's the case!","I'll create a dummy app, since I don't have permission to share this app.  However, here is how I link from setup.py:
ext_modules = [Extension('helix_app_covetous.libcovetous',
                        ['helix_app_covetous/libcovetous.pyx'],
                         include_dirs=pysam.get_include()+[np.get_include()],
                         extra_link_args=pysam.get_libraries(),
                         define_macros=pysam.get_defines(),
                         )]

(covetous is a coverage analysis app developed by Helix that extracts coverage information from BAMs, stores it in a highly compressed manner, and allows running queries on many thousands of samples very quickly.  It isn't open source yet, but that is planned when it is feature complete and stable.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,496,2017-07-03T11:01:56Z,2017-07-03T11:03:42Z,2017-07-03T11:03:46Z,MERGED,True,3360,1991,80,https://github.com/AndreasHeger,{ah} htslib 1.5,3,[],https://github.com/pysam-developers/pysam/pull/496,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/496,upgrade to htslib/samtools/bcftools version 1.5,upgrade to htslib/samtools/bcftools version 1.5,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,498,2017-07-03T13:39:45Z,2017-07-06T20:22:16Z,2017-07-06T20:22:20Z,MERGED,True,293,271,13,https://github.com/AndreasHeger,{AH} import paths via TestUtils,8,[],https://github.com/pysam-developers/pysam/pull/498,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/498,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,502,2017-07-10T10:15:16Z,2017-07-21T09:18:15Z,2017-07-21T09:18:35Z,MERGED,True,142,14,4,https://github.com/AndreasHeger,Ah faidx instantiate records,5,[],https://github.com/pysam-developers/pysam/pull/502,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/502,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,502,2017-07-10T10:15:16Z,2017-07-21T09:18:15Z,2017-07-21T09:18:35Z,MERGED,True,142,14,4,https://github.com/AndreasHeger,Ah faidx instantiate records,5,[],https://github.com/pysam-developers/pysam/pull/502,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/502#issuecomment-314173710,,"LTGM.
Minor optional comment.  It might be possible to achieve the same thing without set_x() functions and instead via @property getters and setters.  The only downside there would be the inability to simultaneously set  sequence and qual, so that might still need a standalone member function with arguments.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,502,2017-07-10T10:15:16Z,2017-07-21T09:18:15Z,2017-07-21T09:18:35Z,MERGED,True,142,14,4,https://github.com/AndreasHeger,Ah faidx instantiate records,5,[],https://github.com/pysam-developers/pysam/pull/502,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/502#issuecomment-314208398,,"Thanks. My thoughts in not using @Property this time was to not cause the same confusion as with AlignedSegment. There, the issue was that getter/setters were sometimes expensive operations and people got caught out. Caching every property is cumbersome.
That being said, FastxRecord is light-weight and could provide @Property access.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,502,2017-07-10T10:15:16Z,2017-07-21T09:18:15Z,2017-07-21T09:18:35Z,MERGED,True,142,14,4,https://github.com/AndreasHeger,Ah faidx instantiate records,5,[],https://github.com/pysam-developers/pysam/pull/502,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/502#issuecomment-314214141,,"Cool, good to know the details here.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,510,2017-07-21T12:12:12Z,2017-07-21T12:12:18Z,2017-11-17T13:25:04Z,MERGED,True,255,40,16,https://github.com/AndreasHeger,Ah add linking tests,5,[],https://github.com/pysam-developers/pysam/pull/510,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/510,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,511,2017-07-21T12:19:23Z,2017-07-21T12:20:14Z,2017-07-21T12:20:22Z,MERGED,True,79,46,4,https://github.com/AndreasHeger,"{AH} add tabix line_skip, fixes #487. Remove pileup preset.",2,[],https://github.com/pysam-developers/pysam/pull/511,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/511,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,513,2017-07-22T17:18:23Z,2017-07-22T19:01:01Z,2017-07-22T19:01:05Z,MERGED,True,2,2,1,https://github.com/bioinformed,Fix bcf_translate to skip deleted INFO fields to avoid segfaults,1,[],https://github.com/pysam-developers/pysam/pull/513,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/513,"Background
bcf_translate works correctly on newly created or loaded BCF records, but it does not properly account for records which have been modified by having one or more INFO fields deleted.
Nature of fix
Prior to attempt to update the info value (either in place or after resizing), update the entry's key id (to keep all ids valid) and then check whether line->d.info[i].vptr is NULL.   This indicates that the key and value have been deleted.  Otherwise, vptr is incorrectly assumed to point to a valid value and a segmentation fault results.
Other issues not addressed in this PR
bcf_translate uses a data structure stored within the source BCF header data structure.  This is a poor design decision, because it presumes that any header will be used to translate to no more than one destination header.  Worse, there is no check to verify that the same destination header is used or that the source and destination have not changed since the translation table was initialized.  Both requirements are unchecked and can cause crashes or write corrupted data.  There is no good reason that the translation data structure is part of the header, except that it would require breaking ABI compatibility.  This suggests adding a bcf_translate2 function that takes an explicit translation table as a parameter with clear documentation on the assumptions and lifetime of the translation struct.
Notes
This fix was also submitted upstream to htslib.  See PR #568","Background
bcf_translate works correctly on newly created or loaded BCF records, but it does not properly account for records which have been modified by having one or more INFO fields deleted.
Nature of fix
Prior to attempt to update the info value (either in place or after resizing), update the entry's key id (to keep all ids valid) and then check whether line->d.info[i].vptr is NULL.   This indicates that the key and value have been deleted.  Otherwise, vptr is incorrectly assumed to point to a valid value and a segmentation fault results.
Other issues not addressed in this PR
bcf_translate uses a data structure stored within the source BCF header data structure.  This is a poor design decision, because it presumes that any header will be used to translate to no more than one destination header.  Worse, there is no check to verify that the same destination header is used or that the source and destination have not changed since the translation table was initialized.  Both requirements are unchecked and can cause crashes or write corrupted data.  There is no good reason that the translation data structure is part of the header, except that it would require breaking ABI compatibility.  This suggests adding a bcf_translate2 function that takes an explicit translation table as a parameter with clear documentation on the assumptions and lifetime of the translation struct.
Notes
This fix was also submitted upstream to htslib.  See PR #568",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,513,2017-07-22T17:18:23Z,2017-07-22T19:01:01Z,2017-07-22T19:01:05Z,MERGED,True,2,2,1,https://github.com/bioinformed,Fix bcf_translate to skip deleted INFO fields to avoid segfaults,1,[],https://github.com/pysam-developers/pysam/pull/513,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/513#issuecomment-317203572,"Background
bcf_translate works correctly on newly created or loaded BCF records, but it does not properly account for records which have been modified by having one or more INFO fields deleted.
Nature of fix
Prior to attempt to update the info value (either in place or after resizing), update the entry's key id (to keep all ids valid) and then check whether line->d.info[i].vptr is NULL.   This indicates that the key and value have been deleted.  Otherwise, vptr is incorrectly assumed to point to a valid value and a segmentation fault results.
Other issues not addressed in this PR
bcf_translate uses a data structure stored within the source BCF header data structure.  This is a poor design decision, because it presumes that any header will be used to translate to no more than one destination header.  Worse, there is no check to verify that the same destination header is used or that the source and destination have not changed since the translation table was initialized.  Both requirements are unchecked and can cause crashes or write corrupted data.  There is no good reason that the translation data structure is part of the header, except that it would require breaking ABI compatibility.  This suggests adding a bcf_translate2 function that takes an explicit translation table as a parameter with clear documentation on the assumptions and lifetime of the translation struct.
Notes
This fix was also submitted upstream to htslib.  See PR #568","@AndreasHeger: FYI -- this PR is fixes a nasty bug in htslib in bcf_translate.  Although I've submitted a PR upstream, we will need to remember to restore this fix should we update htslib before that PR is accepted and merged.
Normally, I'd just wait for the upstream fix and not maintain a local fix, but I've seen this failure in my own code and in private reports from multiple other companies using VariantFile.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,514,2017-07-22T17:26:56Z,2017-07-22T19:26:49Z,2017-07-22T19:26:52Z,MERGED,True,64,55,8,https://github.com/bioinformed,Fix temp file paths used in tests,1,[],https://github.com/pysam-developers/pysam/pull/514,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/514,"Scope
Running tests with nose would use the tests directory as CWD, so test file paths were all relative to the tests directory.  In contrast, pytest runs from the pysam base directory as CWD, so all test file file paths must be updated.  Prior changes were sufficient to ensure that existing test files were found in the correct locations, but many temporary files were created in CWD, rather than the tests directory.
Limitations

There are still a few temp files not created in tests, including the 1kGenomes index file.
In future, all temporary files should probably be written to a dedicated directory that can be removed after the test suite is run.","Scope
Running tests with nose would use the tests directory as CWD, so test file paths were all relative to the tests directory.  In contrast, pytest runs from the pysam base directory as CWD, so all test file file paths must be updated.  Prior changes were sufficient to ensure that existing test files were found in the correct locations, but many temporary files were created in CWD, rather than the tests directory.
Limitations

There are still a few temp files not created in tests, including the 1kGenomes index file.
In future, all temporary files should probably be written to a dedicated directory that can be removed after the test suite is run.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/515,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/515#issuecomment-317210506,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","Thanks for the fixes.
We should be consistent. I prefer contig over reference as well. Why 'stop' rather than 'end'? Neither are reserved words.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/515#issuecomment-317210778,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","... but generally, not an issue to go with contig, start, stop.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/515#issuecomment-317210960,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","It is a picky English thing. The most natural converse of 'end' is 'begin', not 'start'.  Also I've found that 'end' is more often linguistically correlated with inclusive coordinates than 'stop'. I've also standardized on 'start' and 'stop' in over 150k lines of code spanning many libraries and applications, so it is a strong stylistic convention that has taken root among several significant commercial NGS groups.

I understand if these reasons are not as compelling to you as they are to me.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/515#issuecomment-317211138,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","Thanks, let us go with contig, start, stop .",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,515,2017-07-22T19:33:53Z,2017-07-22T22:13:20Z,2017-07-22T22:13:23Z,MERGED,True,374,229,8,https://github.com/bioinformed,Refactor parse region,4,[],https://github.com/pysam-developers/pysam/pull/515,https://github.com/bioinformed,6,https://github.com/pysam-developers/pysam/pull/515#issuecomment-317212043,"Scope


Update glossary entry for CIGAR


Correct error return in pysam_bam_update


Remove incorrect use of inline declarations in external Cython definitions


Refactor region_parsing and related code to HTSFile base class.
Doing so exposed a bifurcation in terminology.  AlignmentFile uses
reference and end, where as VariantFile is careful to always use
contig and stop.  Although there is more code in the wild using
AlignmentFile, I strongly prefer the latter nomenclature and updated all
of the code to use that.  However, extra keyword arguments were added to
enable backward compatible use of reference and end.


I understand this change may be a bit controversial and I am happy to discuss before merging this PR.","Great. I should mention that this PR is a precursor to adding support for retry logic around operations that occasionally fail over HTTP(S) and S3.  I'm going to focus initially on VariantFile and Fastafile, but will add the same logic to AlignmentFile when I have a stable solution to the former cases.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,516,2017-07-23T01:56:06Z,2017-07-24T13:12:34Z,2017-07-24T13:12:37Z,MERGED,True,129,93,8,https://github.com/bioinformed,Expose IO errors via IOError exceptions,2,[],https://github.com/pysam-developers/pysam/pull/516,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/516,"Scope
Restructure error handling in FastaFile.fetch, FastaFile._fetch, and VariantFile.fetch to expose IO errors by raising PythonIOError exceptions when errno is set.  The intent is to address hidden data loss (Issue #504), clarify when IO errors are occurring, and incremental to being able to add retry logic.  Testing is difficult, since simulating IO errors is not trivial.
Also added some missing detection of BCF allocation failures and raise MemoryException.
Concerns
FastaFile.fetch still raises ValueError for non-IO errors.  However raising IOError is a non-backward compatible change and may cause problems in practice.  To me, is justifiable in order to unobfuscate when IO errors occur.","Scope
Restructure error handling in FastaFile.fetch, FastaFile._fetch, and VariantFile.fetch to expose IO errors by raising PythonIOError exceptions when errno is set.  The intent is to address hidden data loss (Issue #504), clarify when IO errors are occurring, and incremental to being able to add retry logic.  Testing is difficult, since simulating IO errors is not trivial.
Also added some missing detection of BCF allocation failures and raise MemoryException.
Concerns
FastaFile.fetch still raises ValueError for non-IO errors.  However raising IOError is a non-backward compatible change and may cause problems in practice.  To me, is justifiable in order to unobfuscate when IO errors occur.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,516,2017-07-23T01:56:06Z,2017-07-24T13:12:34Z,2017-07-24T13:12:37Z,MERGED,True,129,93,8,https://github.com/bioinformed,Expose IO errors via IOError exceptions,2,[],https://github.com/pysam-developers/pysam/pull/516,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/516#issuecomment-317357613,"Scope
Restructure error handling in FastaFile.fetch, FastaFile._fetch, and VariantFile.fetch to expose IO errors by raising PythonIOError exceptions when errno is set.  The intent is to address hidden data loss (Issue #504), clarify when IO errors are occurring, and incremental to being able to add retry logic.  Testing is difficult, since simulating IO errors is not trivial.
Also added some missing detection of BCF allocation failures and raise MemoryException.
Concerns
FastaFile.fetch still raises ValueError for non-IO errors.  However raising IOError is a non-backward compatible change and may cause problems in practice.  To me, is justifiable in order to unobfuscate when IO errors occur.","Thanks, generally a good thing.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,516,2017-07-23T01:56:06Z,2017-07-24T13:12:34Z,2017-07-24T13:12:37Z,MERGED,True,129,93,8,https://github.com/bioinformed,Expose IO errors via IOError exceptions,2,[],https://github.com/pysam-developers/pysam/pull/516,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/516#issuecomment-317417986,"Scope
Restructure error handling in FastaFile.fetch, FastaFile._fetch, and VariantFile.fetch to expose IO errors by raising PythonIOError exceptions when errno is set.  The intent is to address hidden data loss (Issue #504), clarify when IO errors are occurring, and incremental to being able to add retry logic.  Testing is difficult, since simulating IO errors is not trivial.
Also added some missing detection of BCF allocation failures and raise MemoryException.
Concerns
FastaFile.fetch still raises ValueError for non-IO errors.  However raising IOError is a non-backward compatible change and may cause problems in practice.  To me, is justifiable in order to unobfuscate when IO errors occur.","Scope
Restructure error handling in FastaFile.fetch, FastaFile._fetch, and VariantFile.fetch to expose IO errors by raising PythonIOError exceptions when errno is set.  The intent is to address hidden data loss (Issue #504), clarify when IO errors are occurring, and incremental to being able to add retry logic.  Testing is difficult, since simulating IO errors is not trivial.
Also added some missing detection of BCF allocation failures and raise MemoryException.
Concerns
FastaFile.fetch still raises ValueError for non-IO errors.  However raising IOError is a non-backward compatible change and may cause problems in practice.  To me, is justifiable in order to unobfuscate when IO errors occur.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,518,2017-07-24T14:36:11Z,2017-12-01T23:08:54Z,2017-12-01T23:09:03Z,MERGED,True,863,497,10,https://github.com/AndreasHeger,"{AH} separate header into AlignmentHeader from AlignmentFile, closes …",8,[],https://github.com/pysam-developers/pysam/pull/518,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/518,"…#517
This PR separates header functionality into a separate class (AlignmentHeader, cf. VariantHeader) and propagates the information through to iterators and AlignedSegments. The benefit is that:

reference names can be looked up even after a file has been closed or is out-of-scope
reference names are always available and no need to look up via tid.

At the moment AlignmentHeaders are read-only objects, i.e. the header needs to be created before any derived AlignedSegments are being created.
A few backwards incompatible changes are the consequence of this refactoring, most notable that AlignmentFile.header now returns AlignmentHeader and not a dictionary.","…#517
This PR separates header functionality into a separate class (AlignmentHeader, cf. VariantHeader) and propagates the information through to iterators and AlignedSegments. The benefit is that:

reference names can be looked up even after a file has been closed or is out-of-scope
reference names are always available and no need to look up via tid.

At the moment AlignmentHeaders are read-only objects, i.e. the header needs to be created before any derived AlignedSegments are being created.
A few backwards incompatible changes are the consequence of this refactoring, most notable that AlignmentFile.header now returns AlignmentHeader and not a dictionary.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,518,2017-07-24T14:36:11Z,2017-12-01T23:08:54Z,2017-12-01T23:09:03Z,MERGED,True,863,497,10,https://github.com/AndreasHeger,"{AH} separate header into AlignmentHeader from AlignmentFile, closes …",8,[],https://github.com/pysam-developers/pysam/pull/518,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/518#issuecomment-348534800,"…#517
This PR separates header functionality into a separate class (AlignmentHeader, cf. VariantHeader) and propagates the information through to iterators and AlignedSegments. The benefit is that:

reference names can be looked up even after a file has been closed or is out-of-scope
reference names are always available and no need to look up via tid.

At the moment AlignmentHeaders are read-only objects, i.e. the header needs to be created before any derived AlignedSegments are being created.
A few backwards incompatible changes are the consequence of this refactoring, most notable that AlignmentFile.header now returns AlignmentHeader and not a dictionary.","TODO, @bioinformed suggestion:
... add an option to the AlignmentFile constructor which allows or restricts passing the AlignmentHeader to AlignedSegments.  If the header is None, then tids are handled as they are now.  If not, there will be intelligent setting and remapping as aligned segments are passed between AlignmentFiles",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/vorlonofportland,1,https://github.com/pysam-developers/pysam/pull/519,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.","Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/519#issuecomment-318761983,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.",@vorlonofportland: What version of Ubuntu are you seeing this on?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/vorlonofportland,3,https://github.com/pysam-developers/pysam/pull/519#issuecomment-318807881,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.","@bioinformed this is for the upcoming Ubuntu 17.10 release, building against artful-proposed (new htslib is currently blocked from the Ubuntu release due to pysam compatibility).
I haven't checked whether this is specific to Ubuntu, or if it's also reproducible in Debian unstable. I believe it would be, since I don't think Ubuntu has any non-default linker flags that change this behavior.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/519#issuecomment-318837788,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.","@vorlonofportland: Thanks for the information.  Do you have any idea why linking is now different under Ubuntu 17.10?  This doesn't seem to be a problem on previous versions.
I'll test this branch on OS X, CentOS, and BSD to be sure there are no other side effects.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/bioinformed,5,https://github.com/pysam-developers/pysam/pull/519#issuecomment-318837849,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.",and look into why testAllStepper is failing.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/519#issuecomment-319088782,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.",Thanks @vorlonofportland and @bioinformed,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/bioinformed,7,https://github.com/pysam-developers/pysam/pull/519#issuecomment-320293943,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.","I've been able to reproduce the crash on OS X:
error: libcsamtools.cpython-36m-darwin.so debug map object file '/Users/kevin.jacobs/projects/pysam/build/temp.macosx-10.12-x86_64-3.6/pysam/pysam_util.o' has changed (actual time is 0x59849f51, debug map time is 0x59849f34) since this executable was linked, file will be ignored
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x68)
  * frame #0: 0x00007fffdbd7f6a0 libsystem_c.dylib`flockfile + 4
    frame #1: 0x00007fffdbd88324 libsystem_c.dylib`vfprintf_l + 28
    frame #2: 0x00007fffdbd80dff libsystem_c.dylib`fprintf + 186
    frame #3: 0x0000000103c9d2df libcsamtools.cpython-36m-darwin.so`mpileup(conf=<unavailable>, n=1, fn=0x0000000101c18980) at bam_plcmd.c.pysam.c:418 [opt]
    frame #4: 0x0000000103c9ca1b libcsamtools.cpython-36m-darwin.so`bam_mpileup(argc=<unavailable>, argv=<unavailable>) at bam_plcmd.c.pysam.c:1114 [opt]
    frame #5: 0x0000000103c757eb libcutils.cpython-36m-darwin.so`__pyx_pf_5pysam_9libcutils_8_pysam_dispatch(__pyx_self=<unavailable>, __pyx_v_collection=<unavailable>, __pyx_v_method=0x0000000000000007, __pyx_v_args=<unavailable>, __pyx_v_catch_stdout=<unavailable>, __pyx_v_is_usage=<unavailable>, __pyx_v_save_stdout=<unavailable>) at libcutils.c:6876 [opt]
    frame #6: 0x0000000100054420 python`_PyCFunction_FastCallDict + 464
[...]

But have no specific insight as to why it is currently failing.  Any thoughts, @vorlonofportland ?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/AndreasHeger,8,https://github.com/pysam-developers/pysam/pull/519#issuecomment-327924822,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.",Revisiting this PR - I think the fundamental problem is that the dependencies have become too complex. I will try to simplify.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,519,2017-07-28T20:48:58Z,2017-12-01T16:02:13Z,2017-12-01T16:02:13Z,CLOSED,False,3,1,1,https://github.com/vorlonofportland,fix missing symbols in libcsamtools and libcbcftools libraries,1,[],https://github.com/pysam-developers/pysam/pull/519,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/519#issuecomment-348533294,"Building on Ubuntu fails because a couple of the .so's wind up with
unresolved references to symbols found elsewhere in the tree.  Fix their
linkage so that they load cleanly.","Thanks, the issue has been variables declared as extern between cython extensions. Please see comment to #443.
I am closing this PR now, but please let me know if there are unresolved issues.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,520,2017-07-28T20:49:22Z,2017-07-31T14:42:06Z,2017-07-31T14:42:11Z,MERGED,True,1,0,1,https://github.com/vorlonofportland,skip usage() tests on autobuilders,1,[],https://github.com/pysam-developers/pysam/pull/520,https://github.com/vorlonofportland,1,https://github.com/pysam-developers/pysam/pull/520,"The usage() functions check whether stdin is a tty before displaying usage
information.  Therefore, we should not test this code when running on an
autobuilder without a tty.
Clever allocation of a pty from within the test suite itself for purposes
of testing this path is left as an exercise for the reader.","The usage() functions check whether stdin is a tty before displaying usage
information.  Therefore, we should not test this code when running on an
autobuilder without a tty.
Clever allocation of a pty from within the test suite itself for purposes
of testing this path is left as an exercise for the reader.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,520,2017-07-28T20:49:22Z,2017-07-31T14:42:06Z,2017-07-31T14:42:11Z,MERGED,True,1,0,1,https://github.com/vorlonofportland,skip usage() tests on autobuilders,1,[],https://github.com/pysam-developers/pysam/pull/520,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/520#issuecomment-319087881,"The usage() functions check whether stdin is a tty before displaying usage
information.  Therefore, we should not test this code when running on an
autobuilder without a tty.
Clever allocation of a pty from within the test suite itself for purposes
of testing this path is left as an exercise for the reader.","Great, thanks",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,521,2017-07-31T13:29:00Z,2017-08-01T14:15:17Z,2017-08-03T15:29:50Z,MERGED,True,96,107,4,https://github.com/bioinformed,Simplify file detection logic and allow remote index files,4,[],https://github.com/pysam-developers/pysam/pull/521,https://github.com/bioinformed,1,https://github.com/pysam-developers/pysam/pull/521,"Scope
Substantially simplify index loading logic in AlignmentFile._open:

Remove attempts to guess data and index file names; this is magic that I recommend we leave to htslib.
Remove file existence check prior to opening files with htslib; do check for errors more carefully afterward and raise the appropriate error (IOError for when errno is set, ValueError otherwise for backward compatibility)
Catch IO errors when explicitly loading an index.
Allow remote indices (tested using S3 signed URLs, not easily added to the test suite).
Document filepath_index and make it an alias for index_filename.
Added a require_index parameter to AlignmentFile","Scope
Substantially simplify index loading logic in AlignmentFile._open:

Remove attempts to guess data and index file names; this is magic that I recommend we leave to htslib.
Remove file existence check prior to opening files with htslib; do check for errors more carefully afterward and raise the appropriate error (IOError for when errno is set, ValueError otherwise for backward compatibility)
Catch IO errors when explicitly loading an index.
Allow remote indices (tested using S3 signed URLs, not easily added to the test suite).
Document filepath_index and make it an alias for index_filename.
Added a require_index parameter to AlignmentFile",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,521,2017-07-31T13:29:00Z,2017-08-01T14:15:17Z,2017-08-03T15:29:50Z,MERGED,True,96,107,4,https://github.com/bioinformed,Simplify file detection logic and allow remote index files,4,[],https://github.com/pysam-developers/pysam/pull/521,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/521#issuecomment-319080601,"Scope
Substantially simplify index loading logic in AlignmentFile._open:

Remove attempts to guess data and index file names; this is magic that I recommend we leave to htslib.
Remove file existence check prior to opening files with htslib; do check for errors more carefully afterward and raise the appropriate error (IOError for when errno is set, ValueError otherwise for backward compatibility)
Catch IO errors when explicitly loading an index.
Allow remote indices (tested using S3 signed URLs, not easily added to the test suite).
Document filepath_index and make it an alias for index_filename.
Added a require_index parameter to AlignmentFile","Great, thanks. Checking for indices is historical baggage, the more we can remove, the better!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,521,2017-07-31T13:29:00Z,2017-08-01T14:15:17Z,2017-08-03T15:29:50Z,MERGED,True,96,107,4,https://github.com/bioinformed,Simplify file detection logic and allow remote index files,4,[],https://github.com/pysam-developers/pysam/pull/521,https://github.com/cshenanigans,3,https://github.com/pysam-developers/pysam/pull/521#issuecomment-320002458,"Scope
Substantially simplify index loading logic in AlignmentFile._open:

Remove attempts to guess data and index file names; this is magic that I recommend we leave to htslib.
Remove file existence check prior to opening files with htslib; do check for errors more carefully afterward and raise the appropriate error (IOError for when errno is set, ValueError otherwise for backward compatibility)
Catch IO errors when explicitly loading an index.
Allow remote indices (tested using S3 signed URLs, not easily added to the test suite).
Document filepath_index and make it an alias for index_filename.
Added a require_index parameter to AlignmentFile","@bioinformed 👍 awesome, I need this! any idea when you'll be releasing 0.12? P.S. Hi!!!!!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,521,2017-07-31T13:29:00Z,2017-08-01T14:15:17Z,2017-08-03T15:29:50Z,MERGED,True,96,107,4,https://github.com/bioinformed,Simplify file detection logic and allow remote index files,4,[],https://github.com/pysam-developers/pysam/pull/521,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/521#issuecomment-320004172,"Scope
Substantially simplify index loading logic in AlignmentFile._open:

Remove attempts to guess data and index file names; this is magic that I recommend we leave to htslib.
Remove file existence check prior to opening files with htslib; do check for errors more carefully afterward and raise the appropriate error (IOError for when errno is set, ValueError otherwise for backward compatibility)
Catch IO errors when explicitly loading an index.
Allow remote indices (tested using S3 signed URLs, not easily added to the test suite).
Document filepath_index and make it an alias for index_filename.
Added a require_index parameter to AlignmentFile","@cshenanigans: Assuming we can resolve the last few bugs, the plan is to release in the next day or two.  Please let us know what other features you'd like to see.",True,"{'THUMBS_UP': ['https://github.com/cshenanigans'], 'HOORAY': ['https://github.com/cshenanigans']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,522,2017-07-31T20:52:12Z,2017-08-01T12:57:13Z,2017-08-01T12:57:13Z,MERGED,True,1,1,1,https://github.com/nh13,Fix link to tabix,1,[],https://github.com/pysam-developers/pysam/pull/522,https://github.com/nh13,1,https://github.com/pysam-developers/pysam/pull/522,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,526,2017-08-08T18:10:38Z,2017-08-08T19:32:04Z,2017-11-16T17:54:59Z,MERGED,True,7,1,1,https://github.com/msto,Handle unset ref when creating new records,1,[],https://github.com/pysam-developers/pysam/pull/526,https://github.com/msto,1,https://github.com/pysam-developers/pysam/pull/526,"Hi,
I found a small bug in the updated VariantHeader.new_record method. When setting the record's initial attributes, the setters' calls to bcf_sync_end raise an exception because record.ref is None.
I added a quick check in bcf_sync_end to handle this case. I think setting ref_len to 0 prior to the INFO/END deletion shouldn't have any side effects, since a new record shouldn't have any alleles or a set END anyways.
This bug could also be solved by setting ref before setting the remaining attributes in new_record, but I wasn't sure what the desired default would be for ref (or if it would be a good idea to force a default).","Hi,
I found a small bug in the updated VariantHeader.new_record method. When setting the record's initial attributes, the setters' calls to bcf_sync_end raise an exception because record.ref is None.
I added a quick check in bcf_sync_end to handle this case. I think setting ref_len to 0 prior to the INFO/END deletion shouldn't have any side effects, since a new record shouldn't have any alleles or a set END anyways.
This bug could also be solved by setting ref before setting the remaining attributes in new_record, but I wasn't sure what the desired default would be for ref (or if it would be a good idea to force a default).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,526,2017-08-08T18:10:38Z,2017-08-08T19:32:04Z,2017-11-16T17:54:59Z,MERGED,True,7,1,1,https://github.com/msto,Handle unset ref when creating new records,1,[],https://github.com/pysam-developers/pysam/pull/526,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/526#issuecomment-321058159,"Hi,
I found a small bug in the updated VariantHeader.new_record method. When setting the record's initial attributes, the setters' calls to bcf_sync_end raise an exception because record.ref is None.
I added a quick check in bcf_sync_end to handle this case. I think setting ref_len to 0 prior to the INFO/END deletion shouldn't have any side effects, since a new record shouldn't have any alleles or a set END anyways.
This bug could also be solved by setting ref before setting the remaining attributes in new_record, but I wasn't sure what the desired default would be for ref (or if it would be a good idea to force a default).",Thanks for the bug report and PR!  Much appreciated!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,526,2017-08-08T18:10:38Z,2017-08-08T19:32:04Z,2017-11-16T17:54:59Z,MERGED,True,7,1,1,https://github.com/msto,Handle unset ref when creating new records,1,[],https://github.com/pysam-developers/pysam/pull/526,https://github.com/msto,3,https://github.com/pysam-developers/pysam/pull/526#issuecomment-321078865,"Hi,
I found a small bug in the updated VariantHeader.new_record method. When setting the record's initial attributes, the setters' calls to bcf_sync_end raise an exception because record.ref is None.
I added a quick check in bcf_sync_end to handle this case. I think setting ref_len to 0 prior to the INFO/END deletion shouldn't have any side effects, since a new record shouldn't have any alleles or a set END anyways.
This bug could also be solved by setting ref before setting the remaining attributes in new_record, but I wasn't sure what the desired default would be for ref (or if it would be a good idea to force a default).","No problem, thanks for merging it in so quickly!
I was actually going to follow up with a related bug. In the ref setter method, if the record doesn't already have an associated list of alleles, its list of alleles is set to contain just the ref allele.

  
    
      pysam/pysam/libcbcf.pyx
    
    
        Lines 3136 to 3141
      in
      27d8452
    
  
  
    

        
          
           if r.d.allele and r.n_allele: 
        

        
          
               alleles = [r.d.allele[i] for i in range(r.n_allele)] 
        

        
          
               alleles[0] = value 
        

        
          
           else: 
        

        
          
               alleles = [value] 
        

        
          
           self.alleles = alleles 
        
    
  


However, the alleles setter method raises an exception if passed a list of fewer than 2 alleles.

  
    
      pysam/pysam/libcbcf.pyx
    
    
        Lines 3169 to 3170
      in
      27d8452
    
  
  
    

        
          
           if len(values) < 2: 
        

        
          
               raise ValueError('must set at least 2 alleles') 
        
    
  


How do you think this one should be solved? Is the allele count restriction necessary? I ran a quick test without it and nothing seemed to break, so I could submit another PR with a quick fix removing that test. If it is necessary, I think setting a new record's ref allele would then require the addition of a dummy or default alternate allele.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,526,2017-08-08T18:10:38Z,2017-08-08T19:32:04Z,2017-11-16T17:54:59Z,MERGED,True,7,1,1,https://github.com/msto,Handle unset ref when creating new records,1,[],https://github.com/pysam-developers/pysam/pull/526,https://github.com/bioinformed,4,https://github.com/pysam-developers/pysam/pull/526#issuecomment-321097804,"Hi,
I found a small bug in the updated VariantHeader.new_record method. When setting the record's initial attributes, the setters' calls to bcf_sync_end raise an exception because record.ref is None.
I added a quick check in bcf_sync_end to handle this case. I think setting ref_len to 0 prior to the INFO/END deletion shouldn't have any side effects, since a new record shouldn't have any alleles or a set END anyways.
This bug could also be solved by setting ref before setting the remaining attributes in new_record, but I wasn't sure what the desired default would be for ref (or if it would be a good idea to force a default).",VCF doesn't allow null alleles and requires at least one alt allele.  The easier way to proceed is to require ref and at least one alt to be specified during construction (even if they default to 'N' and '<NON_REF>') and then enforce that requirement globally.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,530,2017-08-21T15:53:49Z,2017-08-21T20:07:45Z,2017-08-21T20:07:49Z,MERGED,True,71,1,3,https://github.com/AndreasHeger,Ah add get index statistics,2,[],https://github.com/pysam-developers/pysam/pull/530,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/530,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,532,2017-09-03T10:11:57Z,2017-09-07T19:53:49Z,2017-09-07T21:17:27Z,MERGED,True,7,5,1,https://github.com/SoapGentoo,Allow for building out of tree,1,[],https://github.com/pysam-developers/pysam/pull/532,https://github.com/SoapGentoo,1,https://github.com/pysam-developers/pysam/pull/532,"Gentoo builds all python packages out of tree,
as is best practice. Using -Isamtools implicitly
assumes that everything is being built inplace.
See also: https://bugs.gentoo.org/show_bug.cgi?id=629670","Gentoo builds all python packages out of tree,
as is best practice. Using -Isamtools implicitly
assumes that everything is being built inplace.
See also: https://bugs.gentoo.org/show_bug.cgi?id=629670",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,532,2017-09-03T10:11:57Z,2017-09-07T19:53:49Z,2017-09-07T21:17:27Z,MERGED,True,7,5,1,https://github.com/SoapGentoo,Allow for building out of tree,1,[],https://github.com/pysam-developers/pysam/pull/532,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/532#issuecomment-327910435,"Gentoo builds all python packages out of tree,
as is best practice. Using -Isamtools implicitly
assumes that everything is being built inplace.
See also: https://bugs.gentoo.org/show_bug.cgi?id=629670","Great, many thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,533,2017-09-03T22:46:06Z,2017-09-07T19:52:57Z,2017-09-07T21:13:05Z,CLOSED,False,3,1,2,https://github.com/0xaf1f,Create bcftools/config.h if it doesn't exist,1,[],https://github.com/pysam-developers/pysam/pull/533,https://github.com/0xaf1f,1,https://github.com/pysam-developers/pysam/pull/533,"since bcftools and samtools 1.5 are using the same build system,
they need to be treated the same way. Compilation fails when bcftools
can't find its config.h.","since bcftools and samtools 1.5 are using the same build system,
they need to be treated the same way. Compilation fails when bcftools
can't find its config.h.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,533,2017-09-03T22:46:06Z,2017-09-07T19:52:57Z,2017-09-07T21:13:05Z,CLOSED,False,3,1,2,https://github.com/0xaf1f,Create bcftools/config.h if it doesn't exist,1,[],https://github.com/pysam-developers/pysam/pull/533,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/533#issuecomment-327904680,"since bcftools and samtools 1.5 are using the same build system,
they need to be treated the same way. Compilation fails when bcftools
can't find its config.h.","@0xaf1f - I am really sorry I did not notice this pull-request - it would have saved me quite some time.
I was away and swamped by github notifications and wanted to make sure the conda package builds as soon as possible, but did not check the pull requests.
Many thanks for submitting this - lesson learned!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,533,2017-09-03T22:46:06Z,2017-09-07T19:52:57Z,2017-09-07T21:13:05Z,CLOSED,False,3,1,2,https://github.com/0xaf1f,Create bcftools/config.h if it doesn't exist,1,[],https://github.com/pysam-developers/pysam/pull/533,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/533#issuecomment-327910092,"since bcftools and samtools 1.5 are using the same build system,
they need to be treated the same way. Compilation fails when bcftools
can't find its config.h.","I am closing the PR as it indeed exactly does the same fixes, see  a67b90f",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,533,2017-09-03T22:46:06Z,2017-09-07T19:52:57Z,2017-09-07T21:13:05Z,CLOSED,False,3,1,2,https://github.com/0xaf1f,Create bcftools/config.h if it doesn't exist,1,[],https://github.com/pysam-developers/pysam/pull/533,https://github.com/0xaf1f,4,https://github.com/pysam-developers/pysam/pull/533#issuecomment-327928017,"since bcftools and samtools 1.5 are using the same build system,
they need to be treated the same way. Compilation fails when bcftools
can't find its config.h.","No worries. I guess if I checked the issues more closely, I could have made it known there that I had found the solution.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,537,2017-09-12T11:13:54Z,2017-09-18T09:28:42Z,2018-11-23T15:36:28Z,MERGED,True,44,17,2,https://github.com/mvdbeek,Allow tabix index files to be created in a custom location,5,[],https://github.com/pysam-developers/pysam/pull/537,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/537,"This is one of the modifications we have been using in Galaxy, where we can't easily store indexes next to the data files they belong to.
With the recent pysam changes that allow custom index locations we thought it may be of interest to also allow creating indexes in non-default locations.
This PR also includes an option that prevents deleting uncompressed tabix files using the keep_original argument when generating an index (we consider a users history as immutable, so we would like to avoid removing files), and we check if a file is compressed using gzip instead of assuming that gzipped files must end with .gz (since our storage does not include meaningful filenames).","This is one of the modifications we have been using in Galaxy, where we can't easily store indexes next to the data files they belong to.
With the recent pysam changes that allow custom index locations we thought it may be of interest to also allow creating indexes in non-default locations.
This PR also includes an option that prevents deleting uncompressed tabix files using the keep_original argument when generating an index (we consider a users history as immutable, so we would like to avoid removing files), and we check if a file is compressed using gzip instead of assuming that gzipped files must end with .gz (since our storage does not include meaningful filenames).",True,{'THUMBS_UP': ['https://github.com/nsoranzo']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,537,2017-09-12T11:13:54Z,2017-09-18T09:28:42Z,2018-11-23T15:36:28Z,MERGED,True,44,17,2,https://github.com/mvdbeek,Allow tabix index files to be created in a custom location,5,[],https://github.com/pysam-developers/pysam/pull/537,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/537#issuecomment-330169151,"This is one of the modifications we have been using in Galaxy, where we can't easily store indexes next to the data files they belong to.
With the recent pysam changes that allow custom index locations we thought it may be of interest to also allow creating indexes in non-default locations.
This PR also includes an option that prevents deleting uncompressed tabix files using the keep_original argument when generating an index (we consider a users history as immutable, so we would like to avoid removing files), and we check if a file is compressed using gzip instead of assuming that gzipped files must end with .gz (since our storage does not include meaningful filenames).","Great, many thanks!",True,{'HEART': ['https://github.com/mvdbeek']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,537,2017-09-12T11:13:54Z,2017-09-18T09:28:42Z,2018-11-23T15:36:28Z,MERGED,True,44,17,2,https://github.com/mvdbeek,Allow tabix index files to be created in a custom location,5,[],https://github.com/pysam-developers/pysam/pull/537,https://github.com/bgruening,3,https://github.com/pysam-developers/pysam/pull/537#issuecomment-330170342,"This is one of the modifications we have been using in Galaxy, where we can't easily store indexes next to the data files they belong to.
With the recent pysam changes that allow custom index locations we thought it may be of interest to also allow creating indexes in non-default locations.
This PR also includes an option that prevents deleting uncompressed tabix files using the keep_original argument when generating an index (we consider a users history as immutable, so we would like to avoid removing files), and we check if a file is compressed using gzip instead of assuming that gzipped files must end with .gz (since our storage does not include meaningful filenames).",👍,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,540,2017-09-18T11:37:46Z,2017-09-18T11:37:56Z,2021-11-05T14:56:28Z,MERGED,True,13,0,3,https://github.com/AndreasHeger,{AH} execute linking tests only when explicitely requested via PYSAM_…,1,[],https://github.com/pysam-developers/pysam/pull/540,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/540,…LINKING_TESTS env var. Keep on travis. Fixes #534,…LINKING_TESTS env var. Keep on travis. Fixes #534,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,550,2017-10-09T14:03:16Z,2017-10-20T15:57:15Z,2017-10-20T15:57:18Z,MERGED,True,75,25,3,https://github.com/AndreasHeger,"{AH} add report header reading, fixes #544",3,[],https://github.com/pysam-developers/pysam/pull/550,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/550,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,551,2017-10-09T14:03:38Z,2017-10-20T15:11:58Z,2017-10-20T15:12:02Z,MERGED,True,403,221,3,https://github.com/AndreasHeger,"{AH} add missing tags, fixes #531",2,[],https://github.com/pysam-developers/pysam/pull/551,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/551,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,558,2017-10-27T14:00:00Z,2017-10-27T14:01:11Z,2017-10-27T14:01:14Z,MERGED,True,6393,1544,118,https://github.com/AndreasHeger,Ah htslib1.6,6,[],https://github.com/pysam-developers/pysam/pull/558,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/558,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,561,2017-10-30T18:54:21Z,2017-11-03T16:20:10Z,2017-11-03T16:20:10Z,MERGED,True,40,0,1,https://github.com/ramyala,Assert on reads with invalid MD tags,2,[],https://github.com/pysam-developers/pysam/pull/561,https://github.com/ramyala,1,https://github.com/pysam-developers/pysam/pull/561,"Its possible that MD tag derived seqeunce length is longer than CIGAR
alignment length. In such cases, building alignment sequence can lead
to a buffer overflow error. Such reads will now generate an assertion.","Its possible that MD tag derived seqeunce length is longer than CIGAR
alignment length. In such cases, building alignment sequence can lead
to a buffer overflow error. Such reads will now generate an assertion.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,561,2017-10-30T18:54:21Z,2017-11-03T16:20:10Z,2017-11-03T16:20:10Z,MERGED,True,40,0,1,https://github.com/ramyala,Assert on reads with invalid MD tags,2,[],https://github.com/pysam-developers/pysam/pull/561,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/561#issuecomment-341753123,"Its possible that MD tag derived seqeunce length is longer than CIGAR
alignment length. In such cases, building alignment sequence can lead
to a buffer overflow error. Such reads will now generate an assertion.","Great, thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,565,2017-11-07T19:25:10Z,2017-11-10T09:59:09Z,2017-11-10T09:59:12Z,MERGED,True,3,1,1,https://github.com/ramyala,Improve assert log for mismatched MD tag reads,1,[],https://github.com/pysam-developers/pysam/pull/565,https://github.com/ramyala,1,https://github.com/pysam-developers/pysam/pull/565,Include insertion length along with the MD and CIGAR details in assert error,Include insertion length along with the MD and CIGAR details in assert error,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,565,2017-11-07T19:25:10Z,2017-11-10T09:59:09Z,2017-11-10T09:59:12Z,MERGED,True,3,1,1,https://github.com/ramyala,Improve assert log for mismatched MD tag reads,1,[],https://github.com/pysam-developers/pysam/pull/565,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/565#issuecomment-343429723,Include insertion length along with the MD and CIGAR details in assert error,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,566,2017-11-07T19:37:33Z,2020-08-02T14:05:28Z,2020-08-02T14:05:28Z,CLOSED,False,43,2,2,https://github.com/ramyala,Retry logic on htslib seek failure,1,[],https://github.com/pysam-developers/pysam/pull/566,https://github.com/ramyala,1,https://github.com/pysam-developers/pysam/pull/566,"This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.","This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,566,2017-11-07T19:37:33Z,2020-08-02T14:05:28Z,2020-08-02T14:05:28Z,CLOSED,False,43,2,2,https://github.com/ramyala,Retry logic on htslib seek failure,1,[],https://github.com/pysam-developers/pysam/pull/566,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/566#issuecomment-342621463,"This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.","Nice!  I'll do some testing and see if I can generalize the logic in the HTSFile base class, since other HTSFile types can benefit from the same functionality.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,566,2017-11-07T19:37:33Z,2020-08-02T14:05:28Z,2020-08-02T14:05:28Z,CLOSED,False,43,2,2,https://github.com/ramyala,Retry logic on htslib seek failure,1,[],https://github.com/pysam-developers/pysam/pull/566,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/566#issuecomment-343429876,"This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.","Thanks both. @bioinformed, can you merge when done? Thanks",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,566,2017-11-07T19:37:33Z,2020-08-02T14:05:28Z,2020-08-02T14:05:28Z,CLOSED,False,43,2,2,https://github.com/ramyala,Retry logic on htslib seek failure,1,[],https://github.com/pysam-developers/pysam/pull/566,https://github.com/daviesrob,4,https://github.com/pysam-developers/pysam/pull/566#issuecomment-343513320,"This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.","Note that this depends on some changes in samtools/htslib#606, which is unlikely to be merged as it is.
As far as I can make out, the problem here is that seeking on HTTP(S) streams involves opening a new connection (and dropping the old one) on each seek.  This means you can get rate limited if you try to seek to a lot of locations very quickly.
We have some ongoing work to mitigate this in htslib by improving BGZF block caching, and converting small forward seeks to reads.  It might also be possible to implement some form of retry in hfile_libcurl.
If the above scenario is correct, then I suspect the quickest solution would be download the (parts of) files you want to local storage, and then work on those copies.  It's likely to be much kinder on the upstream server.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,566,2017-11-07T19:37:33Z,2020-08-02T14:05:28Z,2020-08-02T14:05:28Z,CLOSED,False,43,2,2,https://github.com/ramyala,Retry logic on htslib seek failure,1,[],https://github.com/pysam-developers/pysam/pull/566,https://github.com/ramyala,5,https://github.com/pysam-developers/pysam/pull/566#issuecomment-343581441,"This is useful when htslib seek fails due to network resource issues.
The retry logic is hid behind pysam so as to make fetch() calls seemless.","FYI, pysam already has code with the assumption of a -2 return code on errors. From what I can tell htslib doesn't support this return code, but at some point that has to be supported.
I have patches to optimize libcurl seek which I can send out. Downloading to local servers is not always feasible due to the size of the full BAMs and the relatively small intersect regions we care about.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,1,https://github.com/pysam-developers/pysam/pull/570,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,2,https://github.com/pysam-developers/pysam/pull/570#issuecomment-345251778,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Hi,
I also added a patch to fix the behavior mentioned in #571 . In this patch, a VariantRecord's rlen will only be updated upon setting ref/alt alleles if its alternate allele isn't symbolic (angle-bracketed). Additionally, I updated bcf_sync_end so it won't remove END if the alternate allele is symbolic.
I thought about adding an is_symbolic or has_symbolic_allele property to the VariantRecord, but I wasn't sure if it was worth adding. If you'd like me to move that logic to such a property, let me know and I can update.
Matt",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/570#issuecomment-345263035,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Thanks, Matt!  This is a super useful change.  Can you add an inline Cython function to detect symbolic alleles?  I'd feel better with that logic centralized.  Otherwise, I'll do some testing and make sure there are no unforeseen edge cases.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,4,https://github.com/pysam-developers/pysam/pull/570#issuecomment-345287162,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Happy to help! I did find a small bug. The call to bcf_update_alleles_str on line 3196 changes rlen to the value of END. I'm not sure why it's doing that, but the easiest fix was to just cache the rlen for records with symbolic alleles. I fixed that and moved the symbolic allele check to an inline function per your request.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,5,https://github.com/pysam-developers/pysam/pull/570#issuecomment-347231769,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Hey Kevin,
Thanks for the helpful suggestions, I updated the code accordingly. Let me know if there are any other changes you'd like to see.
Matt",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/bioinformed,6,https://github.com/pysam-developers/pysam/pull/570#issuecomment-347319395,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.",Thanks!  Will run more tests and let you know.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/bioinformed,7,https://github.com/pysam-developers/pysam/pull/570#issuecomment-347986201,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","No worries.  I'll take a look at it tonight.
…
On Wed, Nov 29, 2017 at 12:47 PM, Matt Stone ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In pysam/libcbcf.pyx
 <#570 (comment)>
 :

 > @@ -1184,6 +1185,17 @@ cdef inline bcf_sync_end(VariantRecord record):
          bcf_info_set_value(record, b'END', record.ptr.pos + record.ptr.rlen)


 +cdef inline int has_symbolic_allele(VariantRecord record):
 +    """"""Return index of first symbolic allele. 0 if no symbolic alleles.""""""
 +
 +    for i in range(1, record.ptr.n_allele):
 +        alt = record.ptr.d.allele[i]

 Sorry, we're hitting the limits of my Cython here. How do you tell if it
 needs a cdef? I checked the generated C and it looks like Cython added a
 declaration for alt. Is that what you meant?

 static CYTHON_INLINE int __pyx_f_5pysam_7libcbcf_has_symbolic_allele(struct __pyx_obj_5pysam_7libcbcf_VariantRecord *__pyx_v_record) {
   long __pyx_v_i;
   char *__pyx_v_alt;
   int __pyx_r;
   __Pyx_TraceDeclarations
   __Pyx_RefNannyDeclarations
   uint32_t __pyx_t_1;
   long __pyx_t_2;
   int __pyx_t_3;
   int __pyx_t_4;
   size_t __pyx_t_5;

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#570 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/ABM-v3f5BsD9w-MwYisUPSrFx5GDr26iks5s7ZicgaJpZM4Qg5mA>
 .",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,8,https://github.com/pysam-developers/pysam/pull/570#issuecomment-350062898,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.","Hi Kevin,
Were you able to take a look at this?
Thanks!
Matt",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,570,2017-11-16T18:04:49Z,2017-12-08T12:49:13Z,2017-12-08T14:06:57Z,MERGED,True,22,4,1,https://github.com/msto,Provide default alternate allele when constructing a new VariantRecord,5,[],https://github.com/pysam-developers/pysam/pull/570,https://github.com/msto,9,https://github.com/pysam-developers/pysam/pull/570#issuecomment-350271128,"Hi,
I found a bug where it wasn't possible to set the ref of a newly constructed VariantRecord. In the absence of any defined alleles, the ref setter method sets the record's alleles to be the list of only the reference allele. However, the alleles setter method requires at least two alleles to be passed. I fixed this by providing a generic ""NON_REF"" allele along with the ref allele if no others are present.",Thanks for the merge!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,572,2017-11-17T13:23:53Z,2017-11-17T13:24:01Z,2017-11-17T13:24:09Z,MERGED,True,62,48,4,https://github.com/AndreasHeger,"{AH} permit * and . in region strings, fixes #399",1,[],https://github.com/pysam-developers/pysam/pull/572,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/572,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,573,2017-11-17T14:43:40Z,2017-11-17T16:44:19Z,2017-11-17T16:58:51Z,CLOSED,False,24,8,1,https://github.com/dpryan79,Support the equivalent of HTS_IDX_NOCOOR when using fetch() or count(),2,[],https://github.com/pysam-developers/pysam/pull/573,https://github.com/dpryan79,1,https://github.com/pysam-developers/pysam/pull/573,"N.B., this isn't in a finished state yet, this is mostly meant as a starting point for discussion.
It's sometimes needed to be able to either see how many unmapped alignments with no assigned template are in a file and/or to iterate over them. In BAM files, these can at least be counted with idxstats, but since that doesn't work with CRAM files one need to fetch(until_eof=True) or count(until_eof=True). If one is already using multiple threads to process regions (like we do in deepTools) then forcing this step to be single threaded adds a LOT of additional overhead. In HTSLIB, on can use the HTS_IDX_NOCOOR (-2) constant as a tid to jump straight to these entries. That would make things much more convenient for us in deepTools and perhaps for others that want to iterate over these reads in BAM or CRAM files.
The current implementation uses tid = -2, which is obviously a terrible implementation and would need to be changed before merging. However I'm hopeful that at least the concept of supporting HTS_IDX_NOCOOR is acceptable.","N.B., this isn't in a finished state yet, this is mostly meant as a starting point for discussion.
It's sometimes needed to be able to either see how many unmapped alignments with no assigned template are in a file and/or to iterate over them. In BAM files, these can at least be counted with idxstats, but since that doesn't work with CRAM files one need to fetch(until_eof=True) or count(until_eof=True). If one is already using multiple threads to process regions (like we do in deepTools) then forcing this step to be single threaded adds a LOT of additional overhead. In HTSLIB, on can use the HTS_IDX_NOCOOR (-2) constant as a tid to jump straight to these entries. That would make things much more convenient for us in deepTools and perhaps for others that want to iterate over these reads in BAM or CRAM files.
The current implementation uses tid = -2, which is obviously a terrible implementation and would need to be changed before merging. However I'm hopeful that at least the concept of supporting HTS_IDX_NOCOOR is acceptable.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,573,2017-11-17T14:43:40Z,2017-11-17T16:44:19Z,2017-11-17T16:58:51Z,CLOSED,False,24,8,1,https://github.com/dpryan79,Support the equivalent of HTS_IDX_NOCOOR when using fetch() or count(),2,[],https://github.com/pysam-developers/pysam/pull/573,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/573#issuecomment-345263801,"N.B., this isn't in a finished state yet, this is mostly meant as a starting point for discussion.
It's sometimes needed to be able to either see how many unmapped alignments with no assigned template are in a file and/or to iterate over them. In BAM files, these can at least be counted with idxstats, but since that doesn't work with CRAM files one need to fetch(until_eof=True) or count(until_eof=True). If one is already using multiple threads to process regions (like we do in deepTools) then forcing this step to be single threaded adds a LOT of additional overhead. In HTSLIB, on can use the HTS_IDX_NOCOOR (-2) constant as a tid to jump straight to these entries. That would make things much more convenient for us in deepTools and perhaps for others that want to iterate over these reads in BAM or CRAM files.
The current implementation uses tid = -2, which is obviously a terrible implementation and would need to be changed before merging. However I'm hopeful that at least the concept of supporting HTS_IDX_NOCOOR is acceptable.","Hi @dpryan79 , I think we have just worked at cross purposes, I worked on issue #399 and implemented something similar:
#572
Will the solution work for you? Basically, if contig or region is ""*"", only unmapped reads will be returned. This is consistent with the samtools command line.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,573,2017-11-17T14:43:40Z,2017-11-17T16:44:19Z,2017-11-17T16:58:51Z,CLOSED,False,24,8,1,https://github.com/dpryan79,Support the equivalent of HTS_IDX_NOCOOR when using fetch() or count(),2,[],https://github.com/pysam-developers/pysam/pull/573,https://github.com/dpryan79,3,https://github.com/pysam-developers/pysam/pull/573#issuecomment-345296677,"N.B., this isn't in a finished state yet, this is mostly meant as a starting point for discussion.
It's sometimes needed to be able to either see how many unmapped alignments with no assigned template are in a file and/or to iterate over them. In BAM files, these can at least be counted with idxstats, but since that doesn't work with CRAM files one need to fetch(until_eof=True) or count(until_eof=True). If one is already using multiple threads to process regions (like we do in deepTools) then forcing this step to be single threaded adds a LOT of additional overhead. In HTSLIB, on can use the HTS_IDX_NOCOOR (-2) constant as a tid to jump straight to these entries. That would make things much more convenient for us in deepTools and perhaps for others that want to iterate over these reads in BAM or CRAM files.
The current implementation uses tid = -2, which is obviously a terrible implementation and would need to be changed before merging. However I'm hopeful that at least the concept of supporting HTS_IDX_NOCOOR is acceptable.",Great minds think alike? I assume that that'll work. I'll install the master branch and test a CRAM file with it and open a new PR if needed. Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,573,2017-11-17T14:43:40Z,2017-11-17T16:44:19Z,2017-11-17T16:58:51Z,CLOSED,False,24,8,1,https://github.com/dpryan79,Support the equivalent of HTS_IDX_NOCOOR when using fetch() or count(),2,[],https://github.com/pysam-developers/pysam/pull/573,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/573#issuecomment-345301083,"N.B., this isn't in a finished state yet, this is mostly meant as a starting point for discussion.
It's sometimes needed to be able to either see how many unmapped alignments with no assigned template are in a file and/or to iterate over them. In BAM files, these can at least be counted with idxstats, but since that doesn't work with CRAM files one need to fetch(until_eof=True) or count(until_eof=True). If one is already using multiple threads to process regions (like we do in deepTools) then forcing this step to be single threaded adds a LOT of additional overhead. In HTSLIB, on can use the HTS_IDX_NOCOOR (-2) constant as a tid to jump straight to these entries. That would make things much more convenient for us in deepTools and perhaps for others that want to iterate over these reads in BAM or CRAM files.
The current implementation uses tid = -2, which is obviously a terrible implementation and would need to be changed before merging. However I'm hopeful that at least the concept of supporting HTS_IDX_NOCOOR is acceptable.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,574,2017-11-17T15:05:02Z,2017-12-01T15:58:52Z,2017-12-01T15:58:55Z,CLOSED,False,104074,10408,223,https://github.com/AndreasHeger,Ah setup py refactor,7,[],https://github.com/pysam-developers/pysam/pull/574,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/574,"Refactor setup.py to make module dependencies a bit clearer and remove duplication.
Hopefully this will reduce issues with missing symbolic links.","Refactor setup.py to make module dependencies a bit clearer and remove duplication.
Hopefully this will reduce issues with missing symbolic links.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,574,2017-11-17T15:05:02Z,2017-12-01T15:58:52Z,2017-12-01T15:58:55Z,CLOSED,False,104074,10408,223,https://github.com/AndreasHeger,Ah setup py refactor,7,[],https://github.com/pysam-developers/pysam/pull/574,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/574#issuecomment-348532329,"Refactor setup.py to make module dependencies a bit clearer and remove duplication.
Hopefully this will reduce issues with missing symbolic links.",Made a mess out of this branch. Cherry-picked changes into master.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,576,2017-11-17T16:40:43Z,2017-11-18T21:08:00Z,2017-11-18T21:08:06Z,MERGED,True,63,43,3,https://github.com/AndreasHeger,"{AH} reactivate filepath_index, fixes #270",2,[],https://github.com/pysam-developers/pysam/pull/576,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/576,This should resolve #270,This should resolve #270,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,581,2017-11-24T14:12:45Z,2017-11-28T20:24:31Z,2017-11-28T20:24:47Z,MERGED,True,1752,1147,31,https://github.com/AndreasHeger,Ah pileup engine updates,15,[],https://github.com/pysam-developers/pysam/pull/581,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/581,"multiple updates to pileup engine, in particular:

expose most of the filtering functionality from samtools mpileup
provide list accessors that give information per column such as base sequence, base quality, etc without users having to resort to look these up from the reads.

The default ""stepper"" is now samtools to reduce issue where user find discrepancies between samtools and pysam.
This pull-request should deal with most tickets related to pileups, in particular:
fixes #20
fixes #160
fixes #93
fixes #493
fixes #553
fixes #578","multiple updates to pileup engine, in particular:

expose most of the filtering functionality from samtools mpileup
provide list accessors that give information per column such as base sequence, base quality, etc without users having to resort to look these up from the reads.

The default ""stepper"" is now samtools to reduce issue where user find discrepancies between samtools and pysam.
This pull-request should deal with most tickets related to pileups, in particular:
fixes #20
fixes #160
fixes #93
fixes #493
fixes #553
fixes #578",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,586,2017-12-06T15:02:11Z,2017-12-08T10:03:17Z,2017-12-08T10:03:17Z,MERGED,True,25,4,2,https://github.com/mvdbeek,Allow loading index without tbi extension,3,[],https://github.com/pysam-developers/pysam/pull/586,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/586,This seems to be necessary to create TabixFile instances with indexes that don't end in .tbi.,This seems to be necessary to create TabixFile instances with indexes that don't end in .tbi.,True,{'HOORAY': ['https://github.com/jmchilton']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,586,2017-12-06T15:02:11Z,2017-12-08T10:03:17Z,2017-12-08T10:03:17Z,MERGED,True,25,4,2,https://github.com/mvdbeek,Allow loading index without tbi extension,3,[],https://github.com/pysam-developers/pysam/pull/586,https://github.com/bgruening,2,https://github.com/pysam-developers/pysam/pull/586#issuecomment-350045832,This seems to be necessary to create TabixFile instances with indexes that don't end in .tbi.,👍 looks good to me!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,586,2017-12-06T15:02:11Z,2017-12-08T10:03:17Z,2017-12-08T10:03:17Z,MERGED,True,25,4,2,https://github.com/mvdbeek,Allow loading index without tbi extension,3,[],https://github.com/pysam-developers/pysam/pull/586,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/586#issuecomment-350223993,This seems to be necessary to create TabixFile instances with indexes that don't end in .tbi.,"Great, thanks!",True,"{'THUMBS_UP': ['https://github.com/mvdbeek', 'https://github.com/bgruening']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,589,2017-12-13T19:12:04Z,2017-12-15T13:08:34Z,2017-12-15T13:08:34Z,MERGED,True,4,6,1,https://github.com/myrtlecat,Return None from build_alignment_sequence if no MD tag is set,1,[],https://github.com/pysam-developers/pysam/pull/589,https://github.com/myrtlecat,1,https://github.com/pysam-developers/pysam/pull/589,"Closes #588.
Ensures that AlignedSegment.get_reference_sequence raises an exception when no MD tag is set.","Closes #588.
Ensures that AlignedSegment.get_reference_sequence raises an exception when no MD tag is set.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,589,2017-12-13T19:12:04Z,2017-12-15T13:08:34Z,2017-12-15T13:08:34Z,MERGED,True,4,6,1,https://github.com/myrtlecat,Return None from build_alignment_sequence if no MD tag is set,1,[],https://github.com/pysam-developers/pysam/pull/589,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/589#issuecomment-352001700,"Closes #588.
Ensures that AlignedSegment.get_reference_sequence raises an exception when no MD tag is set.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,594,2017-12-22T10:55:55Z,2018-01-31T20:10:26Z,2018-01-31T20:10:32Z,MERGED,True,436,0,4,https://github.com/AndreasHeger,{AH} permit Number=G in INFO records,4,[],https://github.com/pysam-developers/pysam/pull/594,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/594,"Removing the assertion seems to enable the functionality without any side effects as far as I can see.
Would appreciate some comments though as I don't fully understand that part of the htslib API.","Removing the assertion seems to enable the functionality without any side effects as far as I can see.
Would appreciate some comments though as I don't fully understand that part of the htslib API.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,594,2017-12-22T10:55:55Z,2018-01-31T20:10:26Z,2018-01-31T20:10:32Z,MERGED,True,436,0,4,https://github.com/AndreasHeger,{AH} permit Number=G in INFO records,4,[],https://github.com/pysam-developers/pysam/pull/594,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/594#issuecomment-353969802,"Removing the assertion seems to enable the functionality without any side effects as far as I can see.
Would appreciate some comments though as I don't fully understand that part of the htslib API.","I'm pretty sure this issue is about Number=G in INFO fields, not FORMAT.  This was made illegal because FORMAT=G requires knowledge of ploidy.  I've filed an issue in hts specs requesting clarification.  See samtools/hts-specs#272",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,594,2017-12-22T10:55:55Z,2018-01-31T20:10:26Z,2018-01-31T20:10:32Z,MERGED,True,436,0,4,https://github.com/AndreasHeger,{AH} permit Number=G in INFO records,4,[],https://github.com/pysam-developers/pysam/pull/594,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/594#issuecomment-354504788,"Removing the assertion seems to enable the functionality without any side effects as far as I can see.
Would appreciate some comments though as I don't fully understand that part of the htslib API.","Sorry, yes, I meant INFO.
Thanks for raising the issue, looks it is being clarified.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,594,2017-12-22T10:55:55Z,2018-01-31T20:10:26Z,2018-01-31T20:10:32Z,MERGED,True,436,0,4,https://github.com/AndreasHeger,{AH} permit Number=G in INFO records,4,[],https://github.com/pysam-developers/pysam/pull/594,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/594#issuecomment-361718960,"Removing the assertion seems to enable the functionality without any side effects as far as I can see.
Would appreciate some comments though as I don't fully understand that part of the htslib API.","I have reverted the change ensuring that the Gnomad file in its current form with Number=G will fail. Added a test case to ensure that the workaround replacing it with Number=. works.
The PR now only adds the tests but leaves pysam behaviour unchanged.
To be revisited once the specs have been clarified.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,1,https://github.com/pysam-developers/pysam/pull/599,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,2,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355315394,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","I think I need to change the default to [] from None, so in the off-chance that this actually passes testing please don't merge yet! I also made a typo in the last commit, I'll fix that too.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,3,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355317382,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","OK, those are now fixed and tested locally.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,4,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355331480,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","It’s purely convenience, since then one can just iterate over the list. I can change this to handle None easily enough though. I’ll change that later today.
…
Sent from my iPhone
 On 4. Jan 2018, at 17:11, Kevin Jacobs ***@***.***> wrote:

 @bioinformed commented on this pull request.

 In pysam/libcalignmentfile.pyx:

 > @@ -787,7 +791,8 @@ cdef class AlignmentFile(HTSFile):
                referencenames=None,
                referencelengths=None,
                duplicate_filehandle=True,
 -              ignore_truncation=False):
 +              ignore_truncation=False,
 +              format_options=[]):
 Why is it better to use [] than None? It is generally bad practice to use mutable values as default values and I didn't see any problems with using None as before.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,5,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355490178,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).",This PR should be good to go now.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355520814,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","Thanks, brilliant",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,599,2018-01-04T15:23:51Z,2018-01-05T10:21:33Z,2018-01-05T10:34:31Z,MERGED,True,53,2,3,https://github.com/dpryan79,Add a format_options keyword to AlignmentFile,6,[],https://github.com/pysam-developers/pysam/pull/599,https://github.com/dpryan79,7,https://github.com/pysam-developers/pysam/pull/599#issuecomment-355523502,"This implements #579 and additionally allows decoding specific fields in CRAM files (in the same was as --input-fmt-option and --output-fmt-option in samtools view).
Another possible implementation of this would be to use a dict() (I'm not sure what people will find more convenient).
N.B., it's inadvisable to use required_fields=XXX and then to attempt to use one of the unrequired fields (try it, you'll get some ""interesting"" results that I presume are an artefact from htslib).","Cool, thanks!
Relatedly, I just discovered that not requiring the sequence in a CRAM file affects the alignments returned by fetch(). This happens in samtools view too, so it's an htslib issue that I'll report there.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,602,2018-01-12T15:43:15Z,2018-01-30T19:39:08Z,2018-01-30T19:39:13Z,MERGED,True,448,351,5,https://github.com/AndreasHeger,{AH} AlignmentHeader revision,1,[],https://github.com/pysam-developers/pysam/pull/602,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/602,"fix a \0 issue in header, refactor AlignmentHeader
use class method factory methods","fix a \0 issue in header, refactor AlignmentHeader
use class method factory methods",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,609,2018-01-30T19:37:29Z,2018-01-31T20:11:20Z,2018-01-31T20:11:24Z,MERGED,True,9178,1236,103,https://github.com/AndreasHeger,Htslib 1.7,3,[],https://github.com/pysam-developers/pysam/pull/609,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/609,"updated to htslib 1.7 and samtools 1.7
bcftools is still 1.6, as far as I can tell no 1.7 version is yet available.","updated to htslib 1.7 and samtools 1.7
bcftools is still 1.6, as far as I can tell no 1.7 version is yet available.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,615,2018-02-02T15:20:54Z,2018-02-06T09:45:10Z,2018-02-06T09:45:13Z,MERGED,True,90,19,7,https://github.com/AndreasHeger,"{AH} fix long cigar parsing in SAM/BAM/CRAM, fixes #613",3,[],https://github.com/pysam-developers/pysam/pull/615,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/615,"Add tests for checking if long cigar strings are supported
Fix type error limiting the length of CIGAR strings","Add tests for checking if long cigar strings are supported
Fix type error limiting the length of CIGAR strings",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,617,2018-02-06T16:32:55Z,2018-02-07T20:33:29Z,2018-02-07T20:33:38Z,MERGED,True,49,17,4,https://github.com/AndreasHeger,"{AH} each iterator now loads own copy of index, fixes #611 and fixes …",2,[],https://github.com/pysam-developers/pysam/pull/617,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/617,…#293,…#293,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,620,2018-02-09T20:42:12Z,2018-02-09T21:48:28Z,2018-02-09T21:48:33Z,MERGED,True,60,0,2,https://github.com/AndreasHeger,"{AH} add backwards compatibility functions for AlignmentHeader, fixes…",2,[],https://github.com/pysam-developers/pysam/pull/620,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/620,… #618,… #618,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,621,2018-02-12T05:14:04Z,2018-03-17T20:33:50Z,2018-03-17T20:33:50Z,MERGED,True,8,3,1,https://github.com/wckdouglas,Adding a warning to count_coverage when an alignment has an empty QUAL field,12,[],https://github.com/pysam-developers/pysam/pull/621,https://github.com/wckdouglas,1,https://github.com/pysam-developers/pysam/pull/621,"Trying to fix issue #603. In the AlignmentFile.count_coverage() method, if an alignment has an empty QUAL field, it raised a TypeError.
I am fixing this by ignoring the quality threshold and counting every bases when an alignment has empty QUAL field. I am adding a warning for these kind of AlignedSegment, so this issue is not silently passed. However, I am not sure if a warning is the best solution or if it should just raise a more clear error?","Trying to fix issue #603. In the AlignmentFile.count_coverage() method, if an alignment has an empty QUAL field, it raised a TypeError.
I am fixing this by ignoring the quality threshold and counting every bases when an alignment has empty QUAL field. I am adding a warning for these kind of AlignedSegment, so this issue is not silently passed. However, I am not sure if a warning is the best solution or if it should just raise a more clear error?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,621,2018-02-12T05:14:04Z,2018-03-17T20:33:50Z,2018-03-17T20:33:50Z,MERGED,True,8,3,1,https://github.com/wckdouglas,Adding a warning to count_coverage when an alignment has an empty QUAL field,12,[],https://github.com/pysam-developers/pysam/pull/621,https://github.com/bioinformed,2,https://github.com/pysam-developers/pysam/pull/621#issuecomment-364902417,"Trying to fix issue #603. In the AlignmentFile.count_coverage() method, if an alignment has an empty QUAL field, it raised a TypeError.
I am fixing this by ignoring the quality threshold and counting every bases when an alignment has empty QUAL field. I am adding a warning for these kind of AlignedSegment, so this issue is not silently passed. However, I am not sure if a warning is the best solution or if it should just raise a more clear error?",I'd prefer that QUAL=None only pass if the mapq thresholding is disabled (i.e. set to None or 0).  This seems less magical and doesn't require a warning.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,621,2018-02-12T05:14:04Z,2018-03-17T20:33:50Z,2018-03-17T20:33:50Z,MERGED,True,8,3,1,https://github.com/wckdouglas,Adding a warning to count_coverage when an alignment has an empty QUAL field,12,[],https://github.com/pysam-developers/pysam/pull/621,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/621#issuecomment-373950572,"Trying to fix issue #603. In the AlignmentFile.count_coverage() method, if an alignment has an empty QUAL field, it raised a TypeError.
I am fixing this by ignoring the quality threshold and counting every bases when an alignment has empty QUAL field. I am adding a warning for these kind of AlignedSegment, so this issue is not silently passed. However, I am not sure if a warning is the best solution or if it should just raise a more clear error?",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,635,2018-03-02T19:24:34Z,2018-03-17T20:30:44Z,2019-04-17T02:21:18Z,MERGED,True,33,1,1,https://github.com/wckdouglas,Speed up find intron,10,[],https://github.com/pysam-developers/pysam/pull/635,https://github.com/wckdouglas,1,https://github.com/pysam-developers/pysam/pull/635,"The current implementation of AlignmentFile.find_intons turns out to be very inefficient. The current function relies on AlignedSegment.get_aligned_pairs, which can be extremely slow when it encounters long range splice junctionas, since it loops over the every base on the read alignments and every position along the genome.
As AlignedSegment.get_aligned_pairs relies on cigar string,AlignmentFile.find_intons should not need to parse every position again to recalculate the splice junctions. In this pull request, I am fixing this inefficient loop by just parsing the cigar string. A benchmark test is as below:
Python 3.6.4 | packaged by conda-forge | (default, Dec 23 2017, 16:31:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import pysam
   ...: import timeit
   ...: bam = pysam.AlignmentFile('pysam/tests/pysam_data/ex_spliced.bam')
   ...: 
   ...: %timeit bam.find_introns(bam.fetch())
   ...: %timeit bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new = bam.find_introns(bam.fetch())
   ...: old = bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new == old
   ...: 
2.44 ms ± 1.08 ms per loop (mean ± std. dev. of 7 runs, 1000 loops each)
6.26 ms ± 1.82 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
Out[1]: True","The current implementation of AlignmentFile.find_intons turns out to be very inefficient. The current function relies on AlignedSegment.get_aligned_pairs, which can be extremely slow when it encounters long range splice junctionas, since it loops over the every base on the read alignments and every position along the genome.
As AlignedSegment.get_aligned_pairs relies on cigar string,AlignmentFile.find_intons should not need to parse every position again to recalculate the splice junctions. In this pull request, I am fixing this inefficient loop by just parsing the cigar string. A benchmark test is as below:
Python 3.6.4 | packaged by conda-forge | (default, Dec 23 2017, 16:31:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import pysam
   ...: import timeit
   ...: bam = pysam.AlignmentFile('pysam/tests/pysam_data/ex_spliced.bam')
   ...: 
   ...: %timeit bam.find_introns(bam.fetch())
   ...: %timeit bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new = bam.find_introns(bam.fetch())
   ...: old = bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new == old
   ...: 
2.44 ms ± 1.08 ms per loop (mean ± std. dev. of 7 runs, 1000 loops each)
6.26 ms ± 1.82 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
Out[1]: True",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,635,2018-03-02T19:24:34Z,2018-03-17T20:30:44Z,2019-04-17T02:21:18Z,MERGED,True,33,1,1,https://github.com/wckdouglas,Speed up find intron,10,[],https://github.com/pysam-developers/pysam/pull/635,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/635#issuecomment-373950373,"The current implementation of AlignmentFile.find_intons turns out to be very inefficient. The current function relies on AlignedSegment.get_aligned_pairs, which can be extremely slow when it encounters long range splice junctionas, since it loops over the every base on the read alignments and every position along the genome.
As AlignedSegment.get_aligned_pairs relies on cigar string,AlignmentFile.find_intons should not need to parse every position again to recalculate the splice junctions. In this pull request, I am fixing this inefficient loop by just parsing the cigar string. A benchmark test is as below:
Python 3.6.4 | packaged by conda-forge | (default, Dec 23 2017, 16:31:06) 
Type 'copyright', 'credits' or 'license' for more information
IPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import pysam
   ...: import timeit
   ...: bam = pysam.AlignmentFile('pysam/tests/pysam_data/ex_spliced.bam')
   ...: 
   ...: %timeit bam.find_introns(bam.fetch())
   ...: %timeit bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new = bam.find_introns(bam.fetch())
   ...: old = bam.find_introns_slow(bam.fetch())
   ...: 
   ...: new == old
   ...: 
2.44 ms ± 1.08 ms per loop (mean ± std. dev. of 7 runs, 1000 loops each)
6.26 ms ± 1.82 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
Out[1]: True","Great, thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/638,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,2,https://github.com/pysam-developers/pysam/pull/638#issuecomment-370865561,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Just pushing out the new changes to see if things pass on Travis, I'll also add threads to VariantFile and TabixFile",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,3,https://github.com/pysam-developers/pysam/pull/638#issuecomment-371080874,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Alright, I've added hts_set_threads to HTSFile and exposed a threads parameter in VariantFile and TabixFile as well.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/638#issuecomment-373950699,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Thanks, is it ready to be merged?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/bioinformed,5,https://github.com/pysam-developers/pysam/pull/638#issuecomment-373950890,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","I've run some light tests and all appears to work.  I've been working on some CRAM threading issues, so I didn't get to do as much testing as I'd hoped.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,6,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374023242,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","If there's something I can look into or there are scenarios that need more test coverage let me know, I can work on that.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374059358,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Thanks both. I want to make a bugfix release, so might keep this PR out but merge it right afterwards.",True,"{'THUMBS_UP': ['https://github.com/mvdbeek', 'https://github.com/bioinformed']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/bioinformed,8,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374174492,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","p.s. my reason for delay is less about this PR, but about upstream CRAM threading fixes.  This feature will be much safer once those are present in pysam.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/jkbonfield,9,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374175963,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Probably wise!
For what it's worth, I'm fairly confident we nailed them.  I've been through some randomly generated CRAM files with differing numbers of seqs per slice, slices per containers, and allocation of block encoding methods using gcc thread sanitiser, valgrind drd and valgrind helgrind.  It looks OK, but it's still hard to cover every possible scenario.
Edit: I should also add we're hoping for a new release soon.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/bioinformed,10,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374179709,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).",@jkbonfield: Thanks for the update.  Do you have any idea how imminent the htslib release will be?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/bioinformed,11,https://github.com/pysam-developers/pysam/pull/638#issuecomment-374180964,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","@jkbonfield
p.s. the CRAM issues I alluded to above involved testing the recent htslib changes in a large code base utilizing threading and CRAM.  The latest develop branch is passing all tests, though not all steps have threading enabled.  We'd see random intermittent crashes with htslib 1.7, so the current state is looking good!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,12,https://github.com/pysam-developers/pysam/pull/638#issuecomment-388301358,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).",Given that 0.14.1 is out for a while now is there any chance we can merge this ? I guess there'd be a higher chance to catch bugs if this is in some time before the next release is coming up ?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/bioinformed,13,https://github.com/pysam-developers/pysam/pull/638#issuecomment-388335951,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).",@mvdbeek: Thanks for your work on this improvement!,True,{'THUMBS_UP': ['https://github.com/mvdbeek']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,638,2018-03-06T13:11:43Z,2018-05-11T11:18:49Z,2018-05-11T11:25:53Z,MERGED,True,138,11,8,https://github.com/mvdbeek,Allow setting number of threads for htslib,6,[],https://github.com/pysam-developers/pysam/pull/638,https://github.com/mvdbeek,14,https://github.com/pysam-developers/pysam/pull/638#issuecomment-388337143,"Internally this uses hts_set_threads. There is only a minor
speedup for reading files, but writing files can benefit well
from setting n_threads to more than 1:
In [1]: def benchmark_write(threads=1):
   ...:     source = pysam.AlignmentFile('/Users/mvandenb/src/readtagger/tests/h4.bam', threads=threads)
   ...:     out = pysam.AlignmentFile('out.bam', mode='wb', template=source, n_threads=threads)
   ...:     for _ in range(1000000):
   ...:         out.write(next(source))
   ...:

In [2]: %timeit benchmark_write(threads=1)
1 loop, best of 3: 9.21 s per loop

In [3]: %timeit benchmark_write(threads=2)
1 loop, best of 3: 4.68 s per loop

In [4]: %timeit benchmark_write(threads=3)
1 loop, best of 3: 3.17 s per loop

In [5]: %timeit benchmark_write(threads=4)
1 loop, best of 3: 2.66 s per loop

This had been discussed in #579 (comment).","Thanks for maintaining pysam, much appreciated!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/mp15,1,https://github.com/pysam-developers/pysam/pull/647,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/647#issuecomment-379495753,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Isn't this file automatically generated from samtools bam.c?
See, e.g., https://github.com/pysam-developers/pysam/blob/master/import.py#L89
Thus, we might not want to manually edit this?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/647#issuecomment-382765428,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Indeed. This bug is being copied from import.py:_update_pysam_files(), so you Pythonites will probably want to fix it at source. (That doesn't look fragile at all!)",True,{'LAUGH': ['https://github.com/kyleabeauchamp']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/647#issuecomment-382919130,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","If you have easy suggestions on how to streamline the HTSLib <-> pysam integration, I'm all ears ;)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/mp15,5,https://github.com/pysam-developers/pysam/pull/647#issuecomment-383986585,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Try this updated version then, != has higher precedence than && so it should be safe and get rid of the error.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407184820,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Many thanks for bringing this up, @mp15
@kyleabeauchamp is right that this is an upstream issue.
The aim of import.py is to only make changes that are absolutely necessary
to be able to link in samtools/bcftools.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407184865,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.",Closing PR,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/jmarshall,8,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407186697,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","You realise that “upstream” is pysam's own devtools/import.py and that it's still broken, right?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407205800,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Apologies, I misunderstood. Will need to have a closer look.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/kyleabeauchamp,10,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407206837,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Ah, I think some of the confusion here was that the PR originally modified the generated C files directly.  After my comments, the author updated the PR to edit import.py---but pushed over the original commit (obscuring the meaning of my original comments).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/kyleabeauchamp,11,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407207499,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.",Sadly I think you'll have to re-run the HTSLib upgrade after you merge this :(,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/AndreasHeger,12,https://github.com/pysam-developers/pysam/pull/647#issuecomment-407212656,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","thanks, @kyleabeauchamp",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,647,2018-03-27T12:56:47Z,2018-07-26T20:18:58Z,2018-07-26T20:18:58Z,CLOSED,False,2,2,2,https://github.com/mp15,Fix operator precedence error by removing premature optimistion,1,[],https://github.com/pysam-developers/pysam/pull/647,https://github.com/kyleabeauchamp,13,https://github.com/pysam-developers/pysam/pull/647#issuecomment-408222463,"!= has higher precedence than & and will be evaluated first.
Replaced with clearer expression.","Thanks @mp15, we've fixed this using the approach of @jmarshall (#706, #707).  Thanks for the bug report and your patch!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,648,2018-03-27T16:33:36Z,2018-03-27T17:21:00Z,2018-03-27T17:49:23Z,CLOSED,False,2,2,1,https://github.com/niyunyun,Doc demo,2,[],https://github.com/pysam-developers/pysam/pull/648,https://github.com/niyunyun,1,https://github.com/pysam-developers/pysam/pull/648,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,656,2018-04-04T22:17:52Z,2018-07-23T20:06:39Z,2020-03-13T03:47:46Z,MERGED,True,2,2,1,https://github.com/nh13,Support `text` when opening a SAM file for writing,1,[],https://github.com/pysam-developers/pysam/pull/656,https://github.com/nh13,1,https://github.com/pysam-developers/pysam/pull/656,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,656,2018-04-04T22:17:52Z,2018-07-23T20:06:39Z,2020-03-13T03:47:46Z,MERGED,True,2,2,1,https://github.com/nh13,Support `text` when opening a SAM file for writing,1,[],https://github.com/pysam-developers/pysam/pull/656,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/656#issuecomment-407183998,,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/660,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/660#issuecomment-379410792,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","ImportError: dlopen(~/miniconda3/envs/testpysam/lib/python3.6/site-packages/pysam-0.14.1-py3.6-macosx-10.7-x86_64.egg/pysam/libcutils.cpython-36m-darwin.so, 2): Symbol not found: _bam_tview_main
  Referenced from: ~/miniconda3/envs/testpysam/lib/python3.6/site-packages/pysam-0.14.1-py3.6-macosx-10.7-x86_64.egg/pysam/libcsamtools.cpython-36m-darwin.so
  Expected in: flat namespace
 in ~/miniconda3/envs/testpysam/lib/python3.6/site-packages/pysam-0.14.1-py3.6-macosx-10.7-x86_64.egg/pysam/libcsamtools.cpython-36m-darwin.so",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/660#issuecomment-379416190,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","otool -L is not finding anything obviously wrong with my SO files, so I'm at a loss...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/660#issuecomment-379418468,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","I believe I found it: this line is manually commented out:
https://github.com/pysam-developers/pysam/blob/master/samtools/bamtk.c.pysam.c#L42
I've updated this and the import.py instructions.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/660#issuecomment-379420366,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","Still haven't gotten the libdeflate to link to pysam SO files properly---it detects it during the configure, but otool suggests they're not linked in the output SO files...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,6,https://github.com/pysam-developers/pysam/pull/660#issuecomment-379431763,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","Looks like almost all of the tests are passing as well, so I would say this is close.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,7,https://github.com/pysam-developers/pysam/pull/660#issuecomment-383991519,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","If #647 is merged, we will need to re-run the import commands that I used here.  The later commits are still useful for determining the extra fixes needed in the upgrade.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,660,2018-04-06T23:28:57Z,2018-05-11T16:52:15Z,2018-05-11T16:52:15Z,CLOSED,False,49979,822,274,https://github.com/kyleabeauchamp,[WIP] Upgrade to HTSLib 1.8,6,[],https://github.com/pysam-developers/pysam/pull/660,https://github.com/kyleabeauchamp,8,https://github.com/pysam-developers/pysam/pull/660#issuecomment-388421330,"Commands were executed as follows, based on https://github.com/pysam-developers/pysam/blob/master/import.py#L7:
wget https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2

rm -rf htslib
mv htslib-1.8 htslib
git checkout htslib/version.h
# edit version.h manually

wget https://github.com/samtools/samtools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf samtools
python import.py samtools samtools-1.8/
git checkout samtools/version.h
# Manual edit version

wget https://github.com/samtools/bcftools/archive/1.8.tar.gz
tar -zxvf 1.8.tar.gz
rm 1.8.tar.gz

rm -rf bcftools
python import.py bcftools bcftools-1.8
git checkout bcftools/version.h
# Manually edit version.h


conda create -n testpysam python=3.6 cython numpy zlib ipython


source activate testpysam
python setup.py install

Still needs testing, as there's possibly some linker issues etc, but the setup.py install seems to be OK at least.  We could also merge this into a new branch, but I can't create branches.","Given that there have been a number of great features added to samtools recently (CRAM fixes, faster sorting), I would say we might want to skip the samtools 1.8 release and just wait until 1.9 arrives.  I think I'll close this PR with that intention.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,662,2018-04-07T19:57:58Z,2018-07-23T20:04:13Z,2018-07-23T20:04:13Z,MERGED,True,2,2,7,https://github.com/kyleabeauchamp,Move lots of stuff from top-level dir to /devtools,2,[],https://github.com/pysam-developers/pysam/pull/662,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/662,"Renamed /ci as /devtools
Moved lots of ""occasional"" scripts from the top-level dir to /devtools

I think this makes it easier for folks to navigate the source tree and find things, but we can debate whether agree or not.","Renamed /ci as /devtools
Moved lots of ""occasional"" scripts from the top-level dir to /devtools

I think this makes it easier for folks to navigate the source tree and find things, but we can debate whether agree or not.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,662,2018-04-07T19:57:58Z,2018-07-23T20:04:13Z,2018-07-23T20:04:13Z,MERGED,True,2,2,7,https://github.com/kyleabeauchamp,Move lots of stuff from top-level dir to /devtools,2,[],https://github.com/pysam-developers/pysam/pull/662,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/662#issuecomment-406046744,"Renamed /ci as /devtools
Moved lots of ""occasional"" scripts from the top-level dir to /devtools

I think this makes it easier for folks to navigate the source tree and find things, but we can debate whether agree or not.",Anyone have any comments on whether this improves readability?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,662,2018-04-07T19:57:58Z,2018-07-23T20:04:13Z,2018-07-23T20:04:13Z,MERGED,True,2,2,7,https://github.com/kyleabeauchamp,Move lots of stuff from top-level dir to /devtools,2,[],https://github.com/pysam-developers/pysam/pull/662,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/662#issuecomment-406073384,"Renamed /ci as /devtools
Moved lots of ""occasional"" scripts from the top-level dir to /devtools

I think this makes it easier for folks to navigate the source tree and find things, but we can debate whether agree or not.","Good idea, I am in favour of this.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,672,2018-04-22T08:21:13Z,,2021-10-28T21:47:55Z,OPEN,False,217,235,2,https://github.com/multimeric,Implement VariantRecord#calc_number,1,[],https://github.com/pysam-developers/pysam/pull/672,https://github.com/multimeric,1,https://github.com/pysam-developers/pysam/pull/672,"See #669

Expose bcf_get_value_count as VariantRecord#calc_number
Add tests for this
Some extra docstrings","See #669

Expose bcf_get_value_count as VariantRecord#calc_number
Add tests for this
Some extra docstrings",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,672,2018-04-22T08:21:13Z,,2021-10-28T21:47:55Z,OPEN,False,217,235,2,https://github.com/multimeric,Implement VariantRecord#calc_number,1,[],https://github.com/pysam-developers/pysam/pull/672,https://github.com/multimeric,2,https://github.com/pysam-developers/pysam/pull/672#issuecomment-383366663,"See #669

Expose bcf_get_value_count as VariantRecord#calc_number
Add tests for this
Some extra docstrings","Some questions about my implementation:

My editor auto-formatted the code, should I undo that?
I make users specify INFO or FMT as a string to determine the type of field. Should I expose an enum/constant for these values instead? If strings, should I use FORMAT instead of FMT? Do we have a precedent?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,672,2018-04-22T08:21:13Z,,2021-10-28T21:47:55Z,OPEN,False,217,235,2,https://github.com/multimeric,Implement VariantRecord#calc_number,1,[],https://github.com/pysam-developers/pysam/pull/672,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/672#issuecomment-385372291,"See #669

Expose bcf_get_value_count as VariantRecord#calc_number
Add tests for this
Some extra docstrings","Re editor reformatting: Yes-- you'll need to undo all of that for this MR to be considered.
Re API for FMT vs. INFO: I left some suggestions in #669.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,675,2018-05-09T16:52:26Z,2018-07-23T20:03:51Z,2018-07-23T20:03:52Z,CLOSED,False,1,1,1,https://github.com/ajuric,Documentation typo,1,[],https://github.com/pysam-developers/pysam/pull/675,https://github.com/ajuric,1,https://github.com/pysam-developers/pysam/pull/675,Matching the documentation from samtools mpileup and get_query_sequences() method.,Matching the documentation from samtools mpileup and get_query_sequences() method.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,675,2018-05-09T16:52:26Z,2018-07-23T20:03:51Z,2018-07-23T20:03:52Z,CLOSED,False,1,1,1,https://github.com/ajuric,Documentation typo,1,[],https://github.com/pysam-developers/pysam/pull/675,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/675#issuecomment-407183188,Matching the documentation from samtools mpileup and get_query_sequences() method.,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,681,2018-05-22T12:53:23Z,2018-05-22T12:53:36Z,2018-05-22T13:22:14Z,CLOSED,False,160,6,11,https://github.com/congenicajames,Bugfix/undefined symbol samtools unset stderr,12,[],https://github.com/pysam-developers/pysam/pull/681,https://github.com/congenicajames,1,https://github.com/pysam-developers/pysam/pull/681,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,694,2018-07-02T19:18:19Z,2018-07-02T20:52:23Z,2018-07-02T20:52:23Z,MERGED,True,4,4,1,https://github.com/dpryan79,Ensure that = and X CIGAR ops are treated the same as M,1,[],https://github.com/pysam-developers/pysam/pull/694,https://github.com/dpryan79,1,https://github.com/pysam-developers/pysam/pull/694,It turns out that if you try to use the get_blocks() function on a read with CIGAR string 150= you'll get [] returned. This is due to a number of functions not handling the = and X operations. I've fixed that in the current PR.,It turns out that if you try to use the get_blocks() function on a read with CIGAR string 150= you'll get [] returned. This is due to a number of functions not handling the = and X operations. I've fixed that in the current PR.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,694,2018-07-02T19:18:19Z,2018-07-02T20:52:23Z,2018-07-02T20:52:23Z,MERGED,True,4,4,1,https://github.com/dpryan79,Ensure that = and X CIGAR ops are treated the same as M,1,[],https://github.com/pysam-developers/pysam/pull/694,https://github.com/dpryan79,2,https://github.com/pysam-developers/pysam/pull/694#issuecomment-401907760,It turns out that if you try to use the get_blocks() function on a read with CIGAR string 150= you'll get [] returned. This is due to a number of functions not handling the = and X operations. I've fixed that in the current PR.,If you want a test dataset you can see item 5 in this Galaxy history.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,694,2018-07-02T19:18:19Z,2018-07-02T20:52:23Z,2018-07-02T20:52:23Z,MERGED,True,4,4,1,https://github.com/dpryan79,Ensure that = and X CIGAR ops are treated the same as M,1,[],https://github.com/pysam-developers/pysam/pull/694,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/694#issuecomment-401931337,It turns out that if you try to use the get_blocks() function on a read with CIGAR string 150= you'll get [] returned. This is due to a number of functions not handling the = and X operations. I've fixed that in the current PR.,Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,701,2018-07-18T20:34:25Z,2018-07-23T20:01:25Z,2018-07-23T20:02:24Z,MERGED,True,68243,11467,363,https://github.com/kyleabeauchamp,"[WIP]  Upgrade pysam to use htslib, samtools, and bcftools 1.9",2,[],https://github.com/pysam-developers/pysam/pull/701,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/701,"I updated the pysam release with the following commands:
conda create -n testpysam python=3.6 cython numpy zlib ipython curl libcurl
conda activate testpysam

wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2

tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install


I have not yet tried to get the tests running, but at least the files build etc.","I updated the pysam release with the following commands:
conda create -n testpysam python=3.6 cython numpy zlib ipython curl libcurl
conda activate testpysam

wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2

tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install


I have not yet tried to get the tests running, but at least the files build etc.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,701,2018-07-18T20:34:25Z,2018-07-23T20:01:25Z,2018-07-23T20:02:24Z,MERGED,True,68243,11467,363,https://github.com/kyleabeauchamp,"[WIP]  Upgrade pysam to use htslib, samtools, and bcftools 1.9",2,[],https://github.com/pysam-developers/pysam/pull/701,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/701#issuecomment-406073747,"I updated the pysam release with the following commands:
conda create -n testpysam python=3.6 cython numpy zlib ipython curl libcurl
conda activate testpysam

wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2

tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install


I have not yet tried to get the tests running, but at least the files build etc.","Thanks - brilliant.
I will review outstanding issues in the next few days and let us release a new pysam within a week?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,701,2018-07-18T20:34:25Z,2018-07-23T20:01:25Z,2018-07-23T20:02:24Z,MERGED,True,68243,11467,363,https://github.com/kyleabeauchamp,"[WIP]  Upgrade pysam to use htslib, samtools, and bcftools 1.9",2,[],https://github.com/pysam-developers/pysam/pull/701,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/701#issuecomment-406074034,"I updated the pysam release with the following commands:
conda create -n testpysam python=3.6 cython numpy zlib ipython curl libcurl
conda activate testpysam

wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2

tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install


I have not yet tried to get the tests running, but at least the files build etc.",SGTM!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,701,2018-07-18T20:34:25Z,2018-07-23T20:01:25Z,2018-07-23T20:02:24Z,MERGED,True,68243,11467,363,https://github.com/kyleabeauchamp,"[WIP]  Upgrade pysam to use htslib, samtools, and bcftools 1.9",2,[],https://github.com/pysam-developers/pysam/pull/701,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/701#issuecomment-407182767,"I updated the pysam release with the following commands:
conda create -n testpysam python=3.6 cython numpy zlib ipython curl libcurl
conda activate testpysam

wget https://github.com/samtools/htslib/releases/download/1.9/htslib-1.9.tar.bz2

tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

wget https://github.com/samtools/samtools/releases/download/1.9/samtools-1.9.tar.bz2
tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

wget https://github.com/samtools/bcftools/releases/download/1.9/bcftools-1.9.tar.bz2
tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install


I have not yet tried to get the tests running, but at least the files build etc.","One test is failing when setting the reference sequence in a CRAM file.
I get the same issue when using samtools CLI. Will need to investigate further.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,705,2018-07-24T22:21:36Z,2018-07-25T14:59:22Z,2018-07-25T14:59:22Z,CLOSED,False,9,10,5,https://github.com/kyleabeauchamp,[WIP] Re-run import.py with changes from #647,2,[],https://github.com/pysam-developers/pysam/pull/705,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/705,"To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install","To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,705,2018-07-24T22:21:36Z,2018-07-25T14:59:22Z,2018-07-25T14:59:22Z,CLOSED,False,9,10,5,https://github.com/kyleabeauchamp,[WIP] Re-run import.py with changes from #647,2,[],https://github.com/pysam-developers/pysam/pull/705,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/705#issuecomment-407571249,"To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install",I haven't thought carefully about whether we need the extra EOF comparison or not.  Nor have I looked at whether this impacts the tests.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,705,2018-07-24T22:21:36Z,2018-07-25T14:59:22Z,2018-07-25T14:59:22Z,CLOSED,False,9,10,5,https://github.com/kyleabeauchamp,[WIP] Re-run import.py with changes from #647,2,[],https://github.com/pysam-developers/pysam/pull/705,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/705#issuecomment-407571343,"To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install",see also #647,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,705,2018-07-24T22:21:36Z,2018-07-25T14:59:22Z,2018-07-25T14:59:22Z,CLOSED,False,9,10,5,https://github.com/kyleabeauchamp,[WIP] Re-run import.py with changes from #647,2,[],https://github.com/pysam-developers/pysam/pull/705,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/705#issuecomment-407580804,"To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install","OK, looks like Travis passes.  Still need a review.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,705,2018-07-24T22:21:36Z,2018-07-25T14:59:22Z,2018-07-25T14:59:22Z,CLOSED,False,9,10,5,https://github.com/kyleabeauchamp,[WIP] Re-run import.py with changes from #647,2,[],https://github.com/pysam-developers/pysam/pull/705,https://github.com/jmarshall,5,https://github.com/pysam-developers/pysam/pull/705#issuecomment-407701726,"To get the ball rolling, I've made an updated version of #647 that applies the import.py transformation to all of the vendored files in pysam.
I ran the following commands:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c

python setup.py install","I haven't thought carefully about whether we need the extra EOF comparison or not.

You do, but really this shows what a bad idea it is to try to rewrite this stuff to two function calls when you don't know what the surrounding code looks like.
I'd recommend the approach in #706 to fix this tiny problem instead.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,706,2018-07-25T09:54:38Z,2018-07-26T20:04:26Z,2018-07-26T21:23:37Z,MERGED,True,9,3,3,https://github.com/jmarshall,Really fix this import.py fputs != EOF && fputc != EOF madness,1,[],https://github.com/pysam-developers/pysam/pull/706,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/706,"Rather than trying to rewrite a function call as two function calls when we don't really know what the syntax around the call site looks like, rewrite it as a call to our own function.
I haven't actually run this, but assuming the regexp syntax is right you should get the idea. Needs a followup commit to actually run import.py over the freshly imported source code.","Rather than trying to rewrite a function call as two function calls when we don't really know what the syntax around the call site looks like, rewrite it as a call to our own function.
I haven't actually run this, but assuming the regexp syntax is right you should get the idea. Needs a followup commit to actually run import.py over the freshly imported source code.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,706,2018-07-25T09:54:38Z,2018-07-26T20:04:26Z,2018-07-26T21:23:37Z,MERGED,True,9,3,3,https://github.com/jmarshall,Really fix this import.py fputs != EOF && fputc != EOF madness,1,[],https://github.com/pysam-developers/pysam/pull/706,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/706#issuecomment-407702211,"Rather than trying to rewrite a function call as two function calls when we don't really know what the syntax around the call site looks like, rewrite it as a call to our own function.
I haven't actually run this, but assuming the regexp syntax is right you should get the idea. Needs a followup commit to actually run import.py over the freshly imported source code.",Supercedes #647 and the import.py changes in #705.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,706,2018-07-25T09:54:38Z,2018-07-26T20:04:26Z,2018-07-26T21:23:37Z,MERGED,True,9,3,3,https://github.com/jmarshall,Really fix this import.py fputs != EOF && fputc != EOF madness,1,[],https://github.com/pysam-developers/pysam/pull/706,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/706#issuecomment-407812062,"Rather than trying to rewrite a function call as two function calls when we don't really know what the syntax around the call site looks like, rewrite it as a call to our own function.
I haven't actually run this, but assuming the regexp syntax is right you should get the idea. Needs a followup commit to actually run import.py over the freshly imported source code.","Thanks @jmarshall , I applied your patch in #707 and regenerated the wrapper C files.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/707,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c","I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/707#issuecomment-407980864,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c",@AndreasHeger hopefully after this (assuming you agree with the approach) we're pretty close to a release.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/707#issuecomment-408218646,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/707#issuecomment-408220920,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c","@kyleabeauchamp  - may I add you to the pysam-developer group?
This will enable you to merge pull requests. I don't have much time at the moment and your help in getting new pysam releases out and moving it along with htslib is very much appreciated. On the other hand, I am sure you also have already a lot of things on your plate.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/707#issuecomment-408221106,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c","SGTM.  Are you ready for a release?  If so, I'll add the release to github and then build the bioconda packages.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,707,2018-07-25T15:04:33Z,2018-07-26T20:04:25Z,2018-07-26T20:14:57Z,MERGED,True,32,10,11,https://github.com/kyleabeauchamp,"Fix EOF issue, part 3",2,[],https://github.com/pysam-developers/pysam/pull/707,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/707#issuecomment-408221349,"I re-ran the import scripts using the following commands, starting from the branch in #706:
tar -jxvf htslib-1.9.tar.bz2

rm -rf htslib
mv htslib-1.9 htslib
echo '#define HTS_VERSION ""1.9""' > htslib/version.h

tar -jxvf samtools-1.9.tar.bz2


rm -rf samtools
python devtools/import.py samtools samtools-1.9/
echo '#define SAMTOOLS_VERSION ""1.9""' > samtools/version.h

tar -jxvf bcftools-1.9.tar.bz2

rm -rf bcftools
python devtools/import.py bcftools bcftools-1.9
echo '#define BCFTOOLS_VERSION ""1.9""' > bcftools/version.h

# Manually edit pysam/version.py
# Revert a couple of changed files to master
git checkout htslib/htslib.pc.tmp
git checkout bcftools/config.h

# Manually comment out two problematic bam_tview_main lines in samtools/bamtk.c.pysam.c","Great!
Yes, I am fine to release. I had hoped to look at some of the issues that have accumulated, but won't be able to do much and will be away on holidays soon.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,708,2018-07-25T22:15:22Z,2018-07-26T20:03:25Z,2018-07-26T20:03:25Z,MERGED,True,0,1932,7,https://github.com/kyleabeauchamp,Remove save directory,1,[],https://github.com/pysam-developers/pysam/pull/708,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/708,"I was poking around and noticed that the save directory has some code that is unlikely to work with modern HTSLib versions and py3.6.
I propose that we delete it.  If desired, we can move some of the functionality into proper tests and docs.","I was poking around and noticed that the save directory has some code that is unlikely to work with modern HTSLib versions and py3.6.
I propose that we delete it.  If desired, we can move some of the functionality into proper tests and docs.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,709,2018-07-25T22:26:50Z,2018-07-26T20:02:51Z,2018-07-26T20:02:51Z,MERGED,True,0,46,2,https://github.com/kyleabeauchamp,Delete benchmark directory,1,[],https://github.com/pysam-developers/pysam/pull/709,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/709,"This one is more controversial, but I would guess that the contents of the benchmark directory aren't adding much and might as well be deleted.  We'll always have them via the git commit history...","This one is more controversial, but I would guess that the contents of the benchmark directory aren't adding much and might as well be deleted.  We'll always have them via the git commit history...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,710,2018-07-26T03:38:31Z,2018-07-26T03:39:46Z,2018-07-26T03:39:46Z,CLOSED,False,1,1,1,https://github.com/kyleabeauchamp,Update README.rst,1,[],https://github.com/pysam-developers/pysam/pull/710,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/710,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,710,2018-07-26T03:38:31Z,2018-07-26T03:39:46Z,2018-07-26T03:39:46Z,CLOSED,False,1,1,1,https://github.com/kyleabeauchamp,Update README.rst,1,[],https://github.com/pysam-developers/pysam/pull/710,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/710#issuecomment-407966510,,Actually let's close this as I have a couple other edits to make,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,711,2018-07-26T03:40:53Z,2018-07-26T20:02:13Z,2018-07-26T20:02:13Z,MERGED,True,3,2,1,https://github.com/kyleabeauchamp,Clean up README,1,[],https://github.com/pysam-developers/pysam/pull/711,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/711,"Updated the bioconda instructions to match those on https://bioconda.github.io/, also cleaned up doc link","Updated the bioconda instructions to match those on https://bioconda.github.io/, also cleaned up doc link",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,712,2018-07-26T20:27:58Z,2018-09-11T19:28:33Z,2018-09-11T19:28:34Z,MERGED,True,15,15,1,https://github.com/kyleabeauchamp,Update NEWS for 0.15.0 release,2,[],https://github.com/pysam-developers/pysam/pull/712,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/712,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,715,2018-07-29T17:26:57Z,2018-09-11T19:29:19Z,2018-09-11T19:29:19Z,MERGED,True,1,0,1,https://github.com/smoe,pysam_data: cleaning of generated with_md.sam.gz,1,[],https://github.com/pysam-developers/pysam/pull/715,https://github.com/smoe,1,https://github.com/pysam-developers/pysam/pull/715,It is just something one notices when packaging for Debian.,It is just something one notices when packaging for Debian.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,715,2018-07-29T17:26:57Z,2018-09-11T19:29:19Z,2018-09-11T19:29:19Z,MERGED,True,1,0,1,https://github.com/smoe,pysam_data: cleaning of generated with_md.sam.gz,1,[],https://github.com/pysam-developers/pysam/pull/715,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/715#issuecomment-420394401,It is just something one notices when packaging for Debian.,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/SoapZA,1,https://github.com/pysam-developers/pysam/pull/729,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.",True,{'THUMBS_UP': ['https://github.com/standage']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/729#issuecomment-425729793,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","It's good someone has finally figured out what was causing this.
The two htslib/win/*.{c,h} entries should also be removed from MANIFEST.in, as what happened in the HTSlib source is that win/ was renamed to os/.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/SoapZA,3,https://github.com/pysam-developers/pysam/pull/729#issuecomment-425736693,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","Replaced include htslib/win/*.{c,h} by include htslib/os/*.{c,h}",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/SoapZA,4,https://github.com/pysam-developers/pysam/pull/729#issuecomment-442045468,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.",@AndreasHeger any chance of getting this merged? Workflows requiring pysam 0.15 on macOS nowadays are really painful to use.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/729#issuecomment-444650928,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","Thanks, apologies for the delay in getting back.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/729#issuecomment-444651127,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.",I will aim to release a new version on the weekend,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/SoapZA,7,https://github.com/pysam-developers/pysam/pull/729#issuecomment-444857852,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","@AndreasHeger please also don't forget to update the version number in setup.py. The 15.1 tarball includes a setup.py with a version 15.0, which is throwing our setuptools using packages off, because of the pkg_resources entrypoint checks.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/alimanfoo,8,https://github.com/pysam-developers/pysam/pull/729#issuecomment-449436855,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.","Hi @AndreasHeger, just asking if it would be possible to cut a new release of pysam with this fix in, we need it for MacOS users in our team. Many thanks.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,729,2018-09-30T12:47:25Z,2018-12-05T21:14:51Z,2019-01-13T17:51:46Z,MERGED,True,2,2,1,https://github.com/SoapZA,Add missing macOS stub files in `MANIFEST.in`,1,[],https://github.com/pysam-developers/pysam/pull/729,https://github.com/SoapZA,9,https://github.com/pysam-developers/pysam/pull/729#issuecomment-453850862,"This caused the PyPI tarballs to miss the stubs
required for building htslib on macOS. This would
not show up for source-tree builds, as the files
are included in git, just not in MANIFEST.in.

Fixes #645
@AndreasHeger could you maybe issue a 0.15.1.1 release on PyPI after merging this? Without this, installing pysam is really painful on macOS and requires people to use an ancient version without overlong CIGAR support.",@AndreasHeger would it be possible to upload macOS binary wheels if I prepare them for you on an old 10.6 machine?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,737,2018-10-26T23:20:19Z,2019-01-09T22:37:57Z,2019-01-09T22:37:57Z,MERGED,True,2,0,1,https://github.com/bkohrn,Fix bug in get_aligned_pairs,1,[],https://github.com/pysam-developers/pysam/pull/737,https://github.com/bkohrn,1,https://github.com/pysam-developers/pysam/pull/737,"I  noticed that in pysam 0.15.1, there is a bug with the get_aligned_pairs function when matches_only=True and with_seq=True.  Basically, the read position gets advanced, but the reference position does not.  This fixes that bug, and I believe it won't involve changing any other portions of the code.","I  noticed that in pysam 0.15.1, there is a bug with the get_aligned_pairs function when matches_only=True and with_seq=True.  Basically, the read position gets advanced, but the reference position does not.  This fixes that bug, and I believe it won't involve changing any other portions of the code.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,737,2018-10-26T23:20:19Z,2019-01-09T22:37:57Z,2019-01-09T22:37:57Z,MERGED,True,2,0,1,https://github.com/bkohrn,Fix bug in get_aligned_pairs,1,[],https://github.com/pysam-developers/pysam/pull/737,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/737#issuecomment-452453785,"I  noticed that in pysam 0.15.1, there is a bug with the get_aligned_pairs function when matches_only=True and with_seq=True.  Basically, the read position gets advanced, but the reference position does not.  This fixes that bug, and I believe it won't involve changing any other portions of the code.","Thanks, apologies for getting back so late with this PR.
I think r_idx, the pointer to the current position in the reference sequence, is only used if with_seq = True, so does not need to be incremented if there is no reference sequence. Basically, r_idx should be incremented after every time it is referenced:
result.append((None, i, ref_seq[r_idx]))
r_idx += 1

This seems to be true in the method.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,737,2018-10-26T23:20:19Z,2019-01-09T22:37:57Z,2019-01-09T22:37:57Z,MERGED,True,2,0,1,https://github.com/bkohrn,Fix bug in get_aligned_pairs,1,[],https://github.com/pysam-developers/pysam/pull/737,https://github.com/bkohrn,3,https://github.com/pysam-developers/pysam/pull/737#issuecomment-452477024,"I  noticed that in pysam 0.15.1, there is a bug with the get_aligned_pairs function when matches_only=True and with_seq=True.  Basically, the read position gets advanced, but the reference position does not.  This fixes that bug, and I believe it won't involve changing any other portions of the code.","I think you misunderstand the arguments...from the documentation (https://pysam.readthedocs.io/en/latest/api.html):
get_aligned_pairs(self, matches_only=False, with_seq=False)
a list of aligned read (query) and reference positions.
For inserts, deletions, skipping either query or reference position may be None.
Padding is currently not supported and leads to an exception.
Parameters:
matches_only (bool) - If True, only matched bases are returned - no None on either side.
with_seq (bool) – If True, return a third element in the tuple containing the reference sequence. Substitutions are lower-case. This option requires an MD tag to be present.
Returns: aligned_pairs
Return type: list of tuples
I take this to mean that the function will return a list of tuples, with each tuple indicating the following with various conditions:
matches_only=False, with_seq=False: (query_pos, ref_pos), including None for query_pos where query is not present (e.g. a deletion) or for ref_pos where ref is not present (e.g. an insertion)
matches_only=False, with_seq=True: (query_pos, ref_pos, ref_seq), including None for query_pos where query is not present (e.g. a deletion) or for ref_pos where ref is not present (e.g. an insertion), and indicating None for ref_seq if ref is not present; includes ref_seq if query is not present.
matches_only=True, with_seq=False: (query_pos, ref_pos), removing any elements that would have been ""None"" if matches_only were False
matches_only=True, with_seq=True: (query_pos, ref_pos, ref_seq), removing any elements that would have been ""None"" if matches_only were False
I can show this using the following code on the attached file (contains a single read, which has a deletion):
Test.bam.zip
import pysam
inBam = pysam.AlignmentFile(""Test.bam"" ,'rb')
for read in inBam:
    if read.has_tag(""MD""):
        if ""D"" in read.cigarstring:
            readMD1 = read.get_aligned_pairs(matches_only=True, with_seq=True)
            readMD2 = read.get_aligned_pairs(matches_only=False, with_seq=True)
            print(""read.get_aligned_pairs(matches_only=True, with_seq=True)"")
            print(readMD1)
            print()
            print(""read.get_aligned_pairs(matches_only=False, with_seq=True)"")
            print(readMD2)

This excel file has the expanded form of the output, which should be easier to read.  As you can see, although the query positions are filtered correctly, the reference positions (and thus sequence) are not.
pysam_problem.xlsx",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,737,2018-10-26T23:20:19Z,2019-01-09T22:37:57Z,2019-01-09T22:37:57Z,MERGED,True,2,0,1,https://github.com/bkohrn,Fix bug in get_aligned_pairs,1,[],https://github.com/pysam-developers/pysam/pull/737,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/737#issuecomment-452887275,"I  noticed that in pysam 0.15.1, there is a bug with the get_aligned_pairs function when matches_only=True and with_seq=True.  Basically, the read position gets advanced, but the reference position does not.  This fixes that bug, and I believe it won't involve changing any other portions of the code.","Thanks for explaining, I see the issue now. I will build a test case and apply the fix.",True,{'HOORAY': ['https://github.com/golobor']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,743,2018-11-16T03:17:49Z,2022-02-17T19:24:54Z,2022-02-17T19:24:54Z,CLOSED,False,4,1,1,https://github.com/liyao001,Update api.rst,1,[],https://github.com/pysam-developers/pysam/pull/743,https://github.com/liyao001,1,https://github.com/pysam-developers/pysam/pull/743,"When the window is a little bit larger, the original demo may raise error exit code 139 (interrupted by signal 11: SIGSEGV). One assumed reason for this is the garbage collector in python deletes bamfile.pileup (...) while the loop is running and the code goes to empty memory. And to address this problem, the updated demo should be used.
Ref: https://sites.google.com/a/epigenetic.ru/lab-members/kb/it/pysam","When the window is a little bit larger, the original demo may raise error exit code 139 (interrupted by signal 11: SIGSEGV). One assumed reason for this is the garbage collector in python deletes bamfile.pileup (...) while the loop is running and the code goes to empty memory. And to address this problem, the updated demo should be used.
Ref: https://sites.google.com/a/epigenetic.ru/lab-members/kb/it/pysam",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,743,2018-11-16T03:17:49Z,2022-02-17T19:24:54Z,2022-02-17T19:24:54Z,CLOSED,False,4,1,1,https://github.com/liyao001,Update api.rst,1,[],https://github.com/pysam-developers/pysam/pull/743,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/743#issuecomment-440052262,"When the window is a little bit larger, the original demo may raise error exit code 139 (interrupted by signal 11: SIGSEGV). One assumed reason for this is the garbage collector in python deletes bamfile.pileup (...) while the loop is running and the code goes to empty memory. And to address this problem, the updated demo should be used.
Ref: https://sites.google.com/a/epigenetic.ru/lab-members/kb/it/pysam","Thanks @liyao001 - looks like an issue to me. Do have specific numbers (depth, size of window)? I am not sure the garbage collector will delete an object that is still referenced. Given this happens with large data, I am guessing memory is being allocated, but not checked if allocation was successful.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,743,2018-11-16T03:17:49Z,2022-02-17T19:24:54Z,2022-02-17T19:24:54Z,CLOSED,False,4,1,1,https://github.com/liyao001,Update api.rst,1,[],https://github.com/pysam-developers/pysam/pull/743,https://github.com/ExplodingCabbage,3,https://github.com/pysam-developers/pysam/pull/743#issuecomment-520172030,"When the window is a little bit larger, the original demo may raise error exit code 139 (interrupted by signal 11: SIGSEGV). One assumed reason for this is the garbage collector in python deletes bamfile.pileup (...) while the loop is running and the code goes to empty memory. And to address this problem, the updated demo should be used.
Ref: https://sites.google.com/a/epigenetic.ru/lab-members/kb/it/pysam","After a quick glance, I can't make sense of why this change would alter garbage collector behaviour. It is possible for an iterable to be deleted before the end of a for loop that's iterating over it, but only if the iterator its __iter__ returns doesn't hold a reference to the iterable. Example:
class SomeIterable:
    def __del__(self):
        print('Iterable getting deleted')

    def __iter__(self):
        return iter(range(10))

print('Without storing in a variable...')
for el in SomeIterable():
    print(el)

print()

print('With storing in a variable...')
some_iterable = SomeIterable()
for el in some_iterable:
    print(el)
However, it looks to me like pileup() returns either an IteratorColumn or an IteratorColumnRegion (which inherits from IteratorColumn, thus calling IteratorColumn.__cinit__ on construction because superclass __cinit__ constructors are implicitly called in Cython). In IteratorColumn.__cinit__ we have self.samfile = samfile. So there should be a reference to the samfile until the for loop ends. It seems impossible, therefore, for this change to affect garbage collection behaviour (or indeed fix anything in any way).
Am I missing something? @liyao001, are you able to provide a test case demonstrating the error?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,748,2019-01-05T23:11:39Z,2019-01-08T21:09:57Z,2021-11-05T14:56:27Z,MERGED,True,53,30,6,https://github.com/AndreasHeger,Ah increase max pos,4,[],https://github.com/pysam-developers/pysam/pull/748,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/748,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,750,2019-01-09T22:40:08Z,2019-01-09T22:40:18Z,2021-11-05T14:56:26Z,MERGED,True,43,28,3,https://github.com/AndreasHeger,"{AH} fix faixd fetch with region, closes #747",1,[],https://github.com/pysam-developers/pysam/pull/750,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/750,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,751,2019-01-10T13:12:57Z,2019-01-10T22:35:45Z,2019-01-11T08:50:18Z,MERGED,True,0,1,1,https://github.com/nsoranzo,Remove deprecated sudo: false from .travis.yml,1,[],https://github.com/pysam-developers/pysam/pull/751,https://github.com/nsoranzo,1,https://github.com/pysam-developers/pysam/pull/751,See https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,See https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,751,2019-01-10T13:12:57Z,2019-01-10T22:35:45Z,2019-01-11T08:50:18Z,MERGED,True,0,1,1,https://github.com/nsoranzo,Remove deprecated sudo: false from .travis.yml,1,[],https://github.com/pysam-developers/pysam/pull/751,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/751#issuecomment-453281906,See https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,753,2019-01-11T08:53:42Z,2019-02-21T21:27:18Z,2019-02-22T14:46:21Z,MERGED,True,1,1,1,https://github.com/nsoranzo,Fix latest release version,1,[],https://github.com/pysam-developers/pysam/pull/753,https://github.com/nsoranzo,1,https://github.com/pysam-developers/pysam/pull/753,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,753,2019-01-11T08:53:42Z,2019-02-21T21:27:18Z,2019-02-22T14:46:21Z,MERGED,True,1,1,1,https://github.com/nsoranzo,Fix latest release version,1,[],https://github.com/pysam-developers/pysam/pull/753,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/753#issuecomment-466173445,,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,755,2019-01-18T15:33:37Z,2019-02-21T21:28:41Z,2019-02-21T23:53:05Z,MERGED,True,32,3,2,https://github.com/mvdbeek,Allow passing flags and arguments to index methods,1,[],https://github.com/pysam-developers/pysam/pull/755,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/755,,,True,{'THUMBS_UP': ['https://github.com/FredericBGA']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,755,2019-01-18T15:33:37Z,2019-02-21T21:28:41Z,2019-02-21T23:53:05Z,MERGED,True,32,3,2,https://github.com/mvdbeek,Allow passing flags and arguments to index methods,1,[],https://github.com/pysam-developers/pysam/pull/755,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/755#issuecomment-466173896,,"Thanks, I once thought mapping all input arguments to python keyword arguments, but never got to it.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,756,2019-01-26T19:12:48Z,2019-02-13T22:48:26Z,2019-02-13T22:48:27Z,CLOSED,False,147,0,6,https://github.com/mvdbeek,Add AlignedSegment.compare_sort,2,[],https://github.com/pysam-developers/pysam/pull/756,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/756,"This allows users to compare reads via coordinate, queryname or tag
using the samtools rules.
This should be significantly more performant (and easier) than
https://github.com/10XGenomics/supernova/blob/master/tenkit/lib/python/tenkit/bam.py#L975","This allows users to compare reads via coordinate, queryname or tag
using the samtools rules.
This should be significantly more performant (and easier) than
https://github.com/10XGenomics/supernova/blob/master/tenkit/lib/python/tenkit/bam.py#L975",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,756,2019-01-26T19:12:48Z,2019-02-13T22:48:26Z,2019-02-13T22:48:27Z,CLOSED,False,147,0,6,https://github.com/mvdbeek,Add AlignedSegment.compare_sort,2,[],https://github.com/pysam-developers/pysam/pull/756,https://github.com/mvdbeek,2,https://github.com/pysam-developers/pysam/pull/756#issuecomment-463407401,"This allows users to compare reads via coordinate, queryname or tag
using the samtools rules.
This should be significantly more performant (and easier) than
https://github.com/10XGenomics/supernova/blob/master/tenkit/lib/python/tenkit/bam.py#L975","I've implemented this now as https://github.com/mvdbeek/pysam-compare-reads, I guess there's no need to have this in pysam proper, but feel free to merge it anyway if you consider it useful.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,758,2019-01-31T00:48:44Z,2019-02-21T21:31:10Z,2019-02-21T21:31:10Z,MERGED,True,4,4,2,https://github.com/kyleabeauchamp,Fix setup.py out of date info,3,[],https://github.com/pysam-developers/pysam/pull/758,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/758,Fixes #757,Fixes #757,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,758,2019-01-31T00:48:44Z,2019-02-21T21:31:10Z,2019-02-21T21:31:10Z,MERGED,True,4,4,2,https://github.com/kyleabeauchamp,Fix setup.py out of date info,3,[],https://github.com/pysam-developers/pysam/pull/758,https://github.com/mmokrejs,2,https://github.com/pysam-developers/pysam/pull/758#issuecomment-459171042,Fixes #757,"Yeah, and dropping that line wasn't something I wanted to happen. It is annoying to read Changelog to realize what the package really needs. Better keep on the line pysam version number and the version of bundled libs. Then one can easily sport that if the pysam version number is out of date then the real of the line is out of date too.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,758,2019-01-31T00:48:44Z,2019-02-21T21:31:10Z,2019-02-21T21:31:10Z,MERGED,True,4,4,2,https://github.com/kyleabeauchamp,Fix setup.py out of date info,3,[],https://github.com/pysam-developers/pysam/pull/758,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/758#issuecomment-466174760,Fixes #757,"Thanks. Requires some refactoring in the future to remove all the duplicate places (docs, readme's, setup.py) where info needs to be updated.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,764,2019-02-06T11:03:30Z,2019-02-21T21:31:55Z,2019-02-21T21:31:55Z,MERGED,True,7,1,3,https://github.com/mvdbeek,Strip \0 in header check,1,[],https://github.com/pysam-developers/pysam/pull/764,https://github.com/mvdbeek,1,https://github.com/pysam-developers/pysam/pull/764,Fixes #763,Fixes #763,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,764,2019-02-06T11:03:30Z,2019-02-21T21:31:55Z,2019-02-21T21:31:55Z,MERGED,True,7,1,3,https://github.com/mvdbeek,Strip \0 in header check,1,[],https://github.com/pysam-developers/pysam/pull/764,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/764#issuecomment-466174993,Fixes #763,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,768,2019-02-20T10:57:25Z,2019-02-21T21:32:40Z,2019-02-21T21:32:40Z,MERGED,True,15,6,1,https://github.com/mr-c,"Test Tabix index contents, not the compression",1,[],https://github.com/pysam-developers/pysam/pull/768,https://github.com/mr-c,1,https://github.com/pysam-developers/pysam/pull/768,Fixes: #761,Fixes: #761,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,768,2019-02-20T10:57:25Z,2019-02-21T21:32:40Z,2019-02-21T21:32:40Z,MERGED,True,15,6,1,https://github.com/mr-c,"Test Tabix index contents, not the compression",1,[],https://github.com/pysam-developers/pysam/pull/768,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/768#issuecomment-466175245,Fixes: #761,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,775,2019-03-19T11:51:22Z,2019-06-19T20:51:07Z,2019-06-19T20:51:07Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix incorrect error message,1,[],https://github.com/pysam-developers/pysam/pull/775,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/775,There is an extraneous .format parameter,There is an extraneous .format parameter,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,775,2019-03-19T11:51:22Z,2019-06-19T20:51:07Z,2019-06-19T20:51:07Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix incorrect error message,1,[],https://github.com/pysam-developers/pysam/pull/775,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/775#issuecomment-503489822,There is an extraneous .format parameter,I think the Travis failures are spurious. Can someone trigger a new build?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,775,2019-03-19T11:51:22Z,2019-06-19T20:51:07Z,2019-06-19T20:51:07Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix incorrect error message,1,[],https://github.com/pysam-developers/pysam/pull/775,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/775#issuecomment-503724804,There is an extraneous .format parameter,Done,True,{'THUMBS_UP': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,775,2019-03-19T11:51:22Z,2019-06-19T20:51:07Z,2019-06-19T20:51:07Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix incorrect error message,1,[],https://github.com/pysam-developers/pysam/pull/775,https://github.com/marcelm,4,https://github.com/pysam-developers/pysam/pull/775#issuecomment-503741230,There is an extraneous .format parameter,Good to go now,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,775,2019-03-19T11:51:22Z,2019-06-19T20:51:07Z,2019-06-19T20:51:07Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix incorrect error message,1,[],https://github.com/pysam-developers/pysam/pull/775,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/775#issuecomment-503741504,There is an extraneous .format parameter,Thanks for the PR,True,{'THUMBS_UP': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,777,2019-03-23T13:14:02Z,,2021-10-28T21:47:55Z,OPEN,False,53,8,1,https://github.com/y9c,Add `with_ref` and `with_query` args for `get_aligned_pairs`.,1,[],https://github.com/pysam-developers/pysam/pull/777,https://github.com/y9c,1,https://github.com/pysam-developers/pysam/pull/777,"with_seq argument is misleading.
add with_query will make pysam more powerful.","with_seq argument is misleading.
add with_query will make pysam more powerful.",True,"{'THUMBS_UP': ['https://github.com/tmsincomb', 'https://github.com/linhai86']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,777,2019-03-23T13:14:02Z,,2021-10-28T21:47:55Z,OPEN,False,53,8,1,https://github.com/y9c,Add `with_ref` and `with_query` args for `get_aligned_pairs`.,1,[],https://github.com/pysam-developers/pysam/pull/777,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/777#issuecomment-503727589,"with_seq argument is misleading.
add with_query will make pysam more powerful.","Thanks, @yech1990 , I agree that with_seq is not a fortunate name and with_ref is better.
However, leaving the query sequence out was intentional as it is easy obtained using the query sequence stored in the read, while getting the reference base is trickier.",True,{'THUMBS_DOWN': ['https://github.com/tmsincomb']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,780,2019-03-27T14:05:27Z,2019-06-19T20:54:42Z,2019-06-19T20:58:42Z,MERGED,True,58,97,10,https://github.com/jmarshall,_pysam_dispatch: close all files before opening new ones,4,[],https://github.com/pysam-developers/pysam/pull/780,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/780,"Because bcftools_/samtools_stderr and bcftools_/samtools_stdout share the same file descriptors (they call fdopen() on the same fds) and because the underlying samtools/bcftools code will sometimes close its standard output itself (e.g. samtools bam2fq), after repeated invocations the existing @pysam@_set/unset_stdout functions eventually get out of sync and reuse their own file descriptors.
For example, issue #745 is due to samtools_set_stdout()'s previous samtools_stdout referencing a stale fd number that is the same fd number as the newly-mkstemp()ed fd it is being updated to. The stale fd is then closed via fclose() so the fdopen() fails.
Instead of reopening the four FILE pointers to /dev/null interleaved with closing them, close all four in sequence and only once they are all closed (and thus do not reference stale fd numbers) reopen them — on the next _pysam_dispatch() invocation. Fixes #745.","Because bcftools_/samtools_stderr and bcftools_/samtools_stdout share the same file descriptors (they call fdopen() on the same fds) and because the underlying samtools/bcftools code will sometimes close its standard output itself (e.g. samtools bam2fq), after repeated invocations the existing @pysam@_set/unset_stdout functions eventually get out of sync and reuse their own file descriptors.
For example, issue #745 is due to samtools_set_stdout()'s previous samtools_stdout referencing a stale fd number that is the same fd number as the newly-mkstemp()ed fd it is being updated to. The stale fd is then closed via fclose() so the fdopen() fails.
Instead of reopening the four FILE pointers to /dev/null interleaved with closing them, close all four in sequence and only once they are all closed (and thus do not reference stale fd numbers) reopen them — on the next _pysam_dispatch() invocation. Fixes #745.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,780,2019-03-27T14:05:27Z,2019-06-19T20:54:42Z,2019-06-19T20:58:42Z,MERGED,True,58,97,10,https://github.com/jmarshall,_pysam_dispatch: close all files before opening new ones,4,[],https://github.com/pysam-developers/pysam/pull/780,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/780#issuecomment-478931392,"Because bcftools_/samtools_stderr and bcftools_/samtools_stdout share the same file descriptors (they call fdopen() on the same fds) and because the underlying samtools/bcftools code will sometimes close its standard output itself (e.g. samtools bam2fq), after repeated invocations the existing @pysam@_set/unset_stdout functions eventually get out of sync and reuse their own file descriptors.
For example, issue #745 is due to samtools_set_stdout()'s previous samtools_stdout referencing a stale fd number that is the same fd number as the newly-mkstemp()ed fd it is being updated to. The stale fd is then closed via fclose() so the fdopen() fails.
Instead of reopening the four FILE pointers to /dev/null interleaved with closing them, close all four in sequence and only once they are all closed (and thus do not reference stale fd numbers) reopen them — on the next _pysam_dispatch() invocation. Fixes #745.","And, with that fourth commit, simplify matters by only opening and closing two FILE pointers.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,781,2019-03-28T11:20:49Z,2019-06-18T19:48:21Z,2019-06-18T21:18:47Z,MERGED,True,2,1,1,https://github.com/jmarshall,Default to multiple_iterators=False for pileups,1,[],https://github.com/pysam-developers/pysam/pull/781,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/781,"For CRAM files, HTSlib iterators are in fact a stub struct — the real iterator limits are stored within the cram_fd itself, having been set via cram_set_option(CRAM_OPT_RANGE). This means that reopening the CRAM file as a new cram_fd, which happens with multiple_iterators=True, is problematic as the iterator limits don't apply to the separate cram_fd.
Avoiding reopening the CRAM file fixes #725.
I was tempted to do something similar in IteratorColumnAllRefs but that one works as is (though I don't especially see why!). To be honest, it's not clear what multiple_iterators=True is for in general…","For CRAM files, HTSlib iterators are in fact a stub struct — the real iterator limits are stored within the cram_fd itself, having been set via cram_set_option(CRAM_OPT_RANGE). This means that reopening the CRAM file as a new cram_fd, which happens with multiple_iterators=True, is problematic as the iterator limits don't apply to the separate cram_fd.
Avoiding reopening the CRAM file fixes #725.
I was tempted to do something similar in IteratorColumnAllRefs but that one works as is (though I don't especially see why!). To be honest, it's not clear what multiple_iterators=True is for in general…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,781,2019-03-28T11:20:49Z,2019-06-18T19:48:21Z,2019-06-18T21:18:47Z,MERGED,True,2,1,1,https://github.com/jmarshall,Default to multiple_iterators=False for pileups,1,[],https://github.com/pysam-developers/pysam/pull/781,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/781#issuecomment-503284275,"For CRAM files, HTSlib iterators are in fact a stub struct — the real iterator limits are stored within the cram_fd itself, having been set via cram_set_option(CRAM_OPT_RANGE). This means that reopening the CRAM file as a new cram_fd, which happens with multiple_iterators=True, is problematic as the iterator limits don't apply to the separate cram_fd.
Avoiding reopening the CRAM file fixes #725.
I was tempted to do something similar in IteratorColumnAllRefs but that one works as is (though I don't especially see why!). To be honest, it's not clear what multiple_iterators=True is for in general…","Thanks, @jmarshall , the problem has been in the past that not all pysam users were fully familiar with what you can and can't do with files, especially that with a single file pointer you can't interleave multiple fetch() and pileup() calls on the same file. Pysam tried to hide this complexity, but this might not be possible any more or be too painful to initialize complex data structures.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/782,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477674272,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","That's differently broken, which is a form of progress…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477718300,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version",Uh.. I reckon that's worse than before! There's some more experimenting needed here.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477719431,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","OK, do we need to revert this merge?  I think it's clear that the existing CI was broken in that it was combining unsupported versions.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477726121,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","Reverted.  Please take another stab, hopefully with fixed tests :).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/kyleabeauchamp,6,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477729441,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","And also sorry for the chaos, I mis-interpreted your above statement about progress and request for review as suggesting this was good to go as way towards fixing an existing broken CI.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,782,2019-03-28T13:21:52Z,2019-03-28T18:24:41Z,2019-03-28T19:33:33Z,MERGED,True,4,3,2,https://github.com/jmarshall,Fix travis builds,1,[],https://github.com/pysam-developers/pysam/pull/782,https://github.com/jmarshall,7,https://github.com/pysam-developers/pysam/pull/782#issuecomment-477740468,"Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.
At least, that's a theory on how to get around these macOS failures:
dyld: Library not loaded: @rpath/libcrypto.1.0.0.dylib

  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools

  Reason: image not found

./devtools/run_tests_travis.sh: line 48:  2127 Abort trap: 6           samtools --version","In retrospect I can see how the sarcasm dripping from my comment was not obvious 😢 — d'oh!
(The “request for review” was because it appears draft PRs don't get picked up by Travis…)
Actually please do merge your py3.7 PR first as the channel reordering may have an effect on what went wrong with this one.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,784,2019-03-28T18:40:51Z,2019-03-28T23:52:59Z,2019-03-28T23:52:59Z,CLOSED,False,2,4,2,https://github.com/kyleabeauchamp,"Add py37 to travis matrix, remove 34 and 35",3,[],https://github.com/pysam-developers/pysam/pull/784,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/784,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/","Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,785,2019-03-28T18:46:11Z,2019-03-28T18:51:04Z,2021-11-05T14:56:41Z,MERGED,True,3,4,2,https://github.com/kyleabeauchamp,"Revert ""Fix travis builds""",1,[],https://github.com/pysam-developers/pysam/pull/785,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/785,"Reverts #782
cc @jmarshall","Reverts #782
cc @jmarshall",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,785,2019-03-28T18:46:11Z,2019-03-28T18:51:04Z,2021-11-05T14:56:41Z,MERGED,True,3,4,2,https://github.com/kyleabeauchamp,"Revert ""Fix travis builds""",1,[],https://github.com/pysam-developers/pysam/pull/785,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/785#issuecomment-477726171,"Reverts #782
cc @jmarshall","Reverted, sorry for the noise folks.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/786,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477799902,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.",Sorry I erased your commit history @jmarshall...it was faster to copy-paste than to lookup the git manual ;),True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477801998,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","According to the logs, the key question is still the ncurses stuff:
samtools faidx ex1.fa
dyld: Symbol not found: _stdscr
  Referenced from: /Users/travis/miniconda3/envs/testenv/bin/samtools
  Expected in: /Users/travis/miniconda3/envs/testenv/bin/../lib/libncursesw.6.dylib
 in /Users/travis/miniconda3/envs/testenv/bin/samtools
make: *** [ex1.fa.fai] Abort trap: 6",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477807241,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","Yes indeed. This is the external samtools that run_tests_travis.sh conda-installs. It should be getting the conda-forge ncurses package, but appears to be getting the defaults one.
It would be fairly simple to make the bioconda samtools package work with either channel's ncurses package. Or hopefully we can make run_tests_travis.sh select conda-forge's. I, for one, am rapidly losing interest in sorting out conda problems…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,5,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477816645,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","So my latest commit seems to overcome the dyld error, but still doesn't find binary equality of the test files.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/jmarshall,6,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477818510,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","So my latest commit seems to overcome the dyld error

🎉

but still doesn't find binary equality of the test files.

It will be interesting to see whether this is another instance of #761 or whether there are some other trivial differences in the BAM stream between 1.7 and 1.9 to be worked around.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,7,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477849220,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","So it seems like the debug print statements are printing the same text, at least in the Travis output log...I'm officially lost.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/kyleabeauchamp,8,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477855130,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","OK I've reverted the debug print statements in the previous commit.  I think this PR is probably a big improvement to the Travis CI tools, but I don't know how to fix the test failures--which may be unrelated.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/jmarshall,9,https://github.com/pysam-developers/pysam/pull/786#issuecomment-477937963,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.","You can tell that the test failures are related, as most of the configurations used to succeed. I'm pretty sure this is just more #761 and should have time to look at it over the weekend if you don't get there first.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/jmarshall,10,https://github.com/pysam-developers/pysam/pull/786#issuecomment-478065989,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.",Confirmed. I've got a branch that finally passes these tests locally that I'll push soon.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,786,2019-03-28T22:47:48Z,2019-03-31T15:09:43Z,2019-03-31T15:09:43Z,CLOSED,False,7,7,2,https://github.com/kyleabeauchamp,More travis fixes,11,[],https://github.com/pysam-developers/pysam/pull/786,https://github.com/jmarshall,11,https://github.com/pysam-developers/pysam/pull/786#issuecomment-478335031,"Add py37 to Travis matrix
Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge
Clean up conda channel setup to match https://bioconda.github.io/
Fix samtools version used by Travis
Force ncurses to come from conda-forge channel to overcome various known issues.

This PR combines #782 and #784.  I wanted to kick off the CI to see if it uncovers anything.",Superseded by #789.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,789,2019-03-30T18:34:44Z,2019-03-31T15:24:36Z,2019-03-31T15:42:47Z,MERGED,True,40,58,8,https://github.com/jmarshall,Fix Travis samtools etc versions and BAM comparisons,4,[],https://github.com/pysam-developers/pysam/pull/789,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/789,"Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".","Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,789,2019-03-30T18:34:44Z,2019-03-31T15:24:36Z,2019-03-31T15:42:47Z,MERGED,True,40,58,8,https://github.com/jmarshall,Fix Travis samtools etc versions and BAM comparisons,4,[],https://github.com/pysam-developers/pysam/pull/789,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/789#issuecomment-478275516,"Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".",Another attempt at #786 et al. Another commit to come (so don't merge this yet!) — I wanted to observe what travis does at this point as well.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,789,2019-03-30T18:34:44Z,2019-03-31T15:24:36Z,2019-03-31T15:42:47Z,MERGED,True,40,58,8,https://github.com/jmarshall,Fix Travis samtools etc versions and BAM comparisons,4,[],https://github.com/pysam-developers/pysam/pull/789,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/789#issuecomment-478335000,"Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".",All tests passing; I think this is ready to be merged to sort out the Travis baseline.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,789,2019-03-30T18:34:44Z,2019-03-31T15:24:36Z,2019-03-31T15:42:47Z,MERGED,True,40,58,8,https://github.com/jmarshall,Fix Travis samtools etc versions and BAM comparisons,4,[],https://github.com/pysam-developers/pysam/pull/789,https://github.com/kyleabeauchamp,4,https://github.com/pysam-developers/pysam/pull/789#issuecomment-478351419,"Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".","Thanks for bringing this to the finish line.  I'm merging this now rather than waiting for the usual ""release cycle mass merge"" because I think it's important for the Travis tests to be behaving the way we want as people open PRs---and the existing CI script is clearly not doing the right thing.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,789,2019-03-30T18:34:44Z,2019-03-31T15:24:36Z,2019-03-31T15:42:47Z,MERGED,True,40,58,8,https://github.com/jmarshall,Fix Travis samtools etc versions and BAM comparisons,4,[],https://github.com/pysam-developers/pysam/pull/789,https://github.com/jmarshall,5,https://github.com/pysam-developers/pysam/pull/789#issuecomment-478352679,"Use checkGZBinaryEqual to compare BAM files, as the more recent samtools build likely uses libdeflate rather than zlib — which introduces spurious differences in the compressed streams.


Bump the samtools/htslib/bcftools versions used. Pinning 1.7 means Pysam testing is stuck forever at the broken-openssl/libcrypto condapocalypse.


Force ncurses to come from conda-forge channel to overcome various known issues.


Add py37 to Travis matrix


Remove python 3.4 and 3.5 from Travis matrix, as they are no longer supported on Bioconda and conda-forge


Clean up conda channel setup to match https://bioconda.github.io/


Use raw strings for regular expressions to avoid Python 3.7 ""DeprecationWarning: invalid escape sequence"".","Yes, exactly. Now to rebase my other PRs…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,792,2019-04-11T02:12:27Z,2019-06-08T19:47:37Z,2019-06-08T19:47:37Z,MERGED,True,1,1,1,https://github.com/icebert,Fix doc of region example in glossary,1,[],https://github.com/pysam-developers/pysam/pull/792,https://github.com/icebert,1,https://github.com/pysam-developers/pysam/pull/792,"samtools compatible region string should be like  ‘chr1:10000-20000’ rather than ‘chr1:10000:20000’. The example is wrong. The code of parse_region (
  
    
      pysam/pysam/libchtslib.pyx
    
    
         Line 667
      in
      9961beb
    
  
  
    

        
          
           parts = coord.split(""-"") 
        
    
  

) is correct.","samtools compatible region string should be like  ‘chr1:10000-20000’ rather than ‘chr1:10000:20000’. The example is wrong. The code of parse_region (
  
    
      pysam/pysam/libchtslib.pyx
    
    
         Line 667
      in
      9961beb
    
  
  
    

        
          
           parts = coord.split(""-"") 
        
    
  

) is correct.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,803,2019-05-21T19:59:36Z,2019-06-18T19:36:43Z,2019-06-18T19:36:43Z,MERGED,True,2,3,1,https://github.com/kyleabeauchamp,Fix docstring,2,[],https://github.com/pysam-developers/pysam/pull/803,https://github.com/kyleabeauchamp,1,https://github.com/pysam-developers/pysam/pull/803,fixes #802,fixes #802,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,803,2019-05-21T19:59:36Z,2019-06-18T19:36:43Z,2019-06-18T19:36:43Z,MERGED,True,2,3,1,https://github.com/kyleabeauchamp,Fix docstring,2,[],https://github.com/pysam-developers/pysam/pull/803,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/803#issuecomment-494567934,fixes #802,Also the following sentence should talk about reversing qualities rather than reverse complementing reads.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,803,2019-05-21T19:59:36Z,2019-06-18T19:36:43Z,2019-06-18T19:36:43Z,MERGED,True,2,3,1,https://github.com/kyleabeauchamp,Fix docstring,2,[],https://github.com/pysam-developers/pysam/pull/803,https://github.com/kyleabeauchamp,3,https://github.com/pysam-developers/pysam/pull/803#issuecomment-494606987,fixes #802,"Thanks for the review, should be fixed now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,803,2019-05-21T19:59:36Z,2019-06-18T19:36:43Z,2019-06-18T19:36:43Z,MERGED,True,2,3,1,https://github.com/kyleabeauchamp,Fix docstring,2,[],https://github.com/pysam-developers/pysam/pull/803,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/803#issuecomment-503280654,fixes #802,Thanks @kyleabeauchamp and @jmarshall,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,804,2019-05-22T22:01:45Z,2019-06-18T19:36:00Z,2019-06-18T21:18:35Z,MERGED,True,29,57,3,https://github.com/jmarshall,Remove string buffer size limit in get_query_sequences(),1,[],https://github.com/pysam-developers/pysam/pull/804,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/804,"Use HTSlib's kstring_t, which reallocates and enlarges its memory as needed, rather than a fixed-size char buffer. Fixes #717.","Use HTSlib's kstring_t, which reallocates and enlarges its memory as needed, rather than a fixed-size char buffer. Fixes #717.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,804,2019-05-22T22:01:45Z,2019-06-18T19:36:00Z,2019-06-18T21:18:35Z,MERGED,True,29,57,3,https://github.com/jmarshall,Remove string buffer size limit in get_query_sequences(),1,[],https://github.com/pysam-developers/pysam/pull/804,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/804#issuecomment-503280385,"Use HTSlib's kstring_t, which reallocates and enlarges its memory as needed, rather than a fixed-size char buffer. Fixes #717.","Thank you very much, apologies for the delay.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,805,2019-05-23T10:21:37Z,2019-05-31T18:10:18Z,2019-05-31T20:09:39Z,MERGED,True,3,16,2,https://github.com/jmarshall,Trivial .gitignore / repository cleanup,1,[],https://github.com/pysam-developers/pysam/pull/805,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/805,"Remove htslib/htslib.pc.tmp, which is a generated file and shouldn't be under source control (neither should htslib/htslib-uninstalled.pc if it were to get built). Fix typo.","Remove htslib/htslib.pc.tmp, which is a generated file and shouldn't be under source control (neither should htslib/htslib-uninstalled.pc if it were to get built). Fix typo.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,805,2019-05-23T10:21:37Z,2019-05-31T18:10:18Z,2019-05-31T20:09:39Z,MERGED,True,3,16,2,https://github.com/jmarshall,Trivial .gitignore / repository cleanup,1,[],https://github.com/pysam-developers/pysam/pull/805,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/805#issuecomment-497808500,"Remove htslib/htslib.pc.tmp, which is a generated file and shouldn't be under source control (neither should htslib/htslib-uninstalled.pc if it were to get built). Fix typo.","LGTM, gunna merge this because it's trivial and let Andreas handle the PRs with actual substance.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,806,2019-05-31T17:08:44Z,2019-05-31T18:08:38Z,2019-05-31T18:08:38Z,MERGED,True,5,5,2,https://github.com/juliangehring,Fix extra quotes in docstrings,1,[],https://github.com/pysam-developers/pysam/pull/806,https://github.com/juliangehring,1,https://github.com/pysam-developers/pysam/pull/806,"Some docstrings start with 4 quote characters instead of 3 which then shows up as e.g.

“bool indicating the current state of the file object.

in the documentation. This PR remove the extra characters.","Some docstrings start with 4 quote characters instead of 3 which then shows up as e.g.

“bool indicating the current state of the file object.

in the documentation. This PR remove the extra characters.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,806,2019-05-31T17:08:44Z,2019-05-31T18:08:38Z,2019-05-31T18:08:38Z,MERGED,True,5,5,2,https://github.com/juliangehring,Fix extra quotes in docstrings,1,[],https://github.com/pysam-developers/pysam/pull/806,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/806#issuecomment-497788512,"Some docstrings start with 4 quote characters instead of 3 which then shows up as e.g.

“bool indicating the current state of the file object.

in the documentation. This PR remove the extra characters.","LGTM, thanks!  Will merge after tests finish.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,807,2019-06-03T10:25:49Z,2019-06-19T19:58:49Z,2019-06-19T19:58:49Z,MERGED,True,3,1,1,https://github.com/cariaso,do not cache VariantRecord.id to avoid memory leak from pysam-developers#773,2,[],https://github.com/pysam-developers/pysam/pull/807,https://github.com/cariaso,1,https://github.com/pysam-developers/pysam/pull/807,avoids the problem described at #773,avoids the problem described at #773,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,807,2019-06-03T10:25:49Z,2019-06-19T19:58:49Z,2019-06-19T19:58:49Z,MERGED,True,3,1,1,https://github.com/cariaso,do not cache VariantRecord.id to avoid memory leak from pysam-developers#773,2,[],https://github.com/pysam-developers/pysam/pull/807,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/807#issuecomment-503280048,avoids the problem described at #773,"Thanks, @cariaso , not caching seems to be a prudent choice, no matter how the leak arises. @bioinformed , would you agree?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,807,2019-06-03T10:25:49Z,2019-06-19T19:58:49Z,2019-06-19T19:58:49Z,MERGED,True,3,1,1,https://github.com/cariaso,do not cache VariantRecord.id to avoid memory leak from pysam-developers#773,2,[],https://github.com/pysam-developers/pysam/pull/807,https://github.com/bioinformed,3,https://github.com/pysam-developers/pysam/pull/807#issuecomment-503325964,avoids the problem described at #773,"I agree — in retrospect it was a silly mistake to use a caching function in that property.

Sent from my tiny remote device.
…
 On Jun 18, 2019, at 3:34 PM, Andreas Heger ***@***.***> wrote:

 Thanks, @cariaso , not caching seems to be a prudent choice, no matter how the leak arises. @bioinformed , would you agree?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,807,2019-06-03T10:25:49Z,2019-06-19T19:58:49Z,2019-06-19T19:58:49Z,MERGED,True,3,1,1,https://github.com/cariaso,do not cache VariantRecord.id to avoid memory leak from pysam-developers#773,2,[],https://github.com/pysam-developers/pysam/pull/807,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/807#issuecomment-503724242,avoids the problem described at #773,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,811,2019-06-06T15:24:12Z,2019-06-08T19:50:18Z,2019-06-08T19:50:19Z,MERGED,True,1,1,1,https://github.com/JorgWieme,Fix documentation Extending pysam,1,[],https://github.com/pysam-developers/pysam/pull/811,https://github.com/JorgWieme,1,https://github.com/pysam-developers/pysam/pull/811,"This pysam.calignmentfile should be pysam.libcalignmentfile.
In version 0.10.0 and onwards, all pysam extension modules contain a lib-prefix. This facilates linking against pysam extension modules with compilers that require to start with lib. As a consequence, all code using pysam extension modules directly will need to be adapted.
Fount at https://github.com/pysam-developers/pysam/blob/aa27e81b123067427ae08f5345feb891b7efa857/doc/faq.rst#importerror-cannot-import-name-csamtools","This pysam.calignmentfile should be pysam.libcalignmentfile.
In version 0.10.0 and onwards, all pysam extension modules contain a lib-prefix. This facilates linking against pysam extension modules with compilers that require to start with lib. As a consequence, all code using pysam extension modules directly will need to be adapted.
Fount at https://github.com/pysam-developers/pysam/blob/aa27e81b123067427ae08f5345feb891b7efa857/doc/faq.rst#importerror-cannot-import-name-csamtools",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/nsoranzo,1,https://github.com/pysam-developers/pysam/pull/814,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722",True,{'HOORAY': ['https://github.com/mvdbeek']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/814#issuecomment-512582196,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722",Thanks for the PR and also thanks for the instructions - I have just merged and added username and secret.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/nsoranzo,3,https://github.com/pysam-developers/pysam/pull/814#issuecomment-512600288,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","Cool, I look forward to the next (automated) release!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/nsoranzo,4,https://github.com/pysam-developers/pysam/pull/814#issuecomment-515809405,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","@AndreasHeger It looks like there's something wrong with the encryption of TWINE_PASSWORD, the deploy of v0.15.3 failed: https://travis-ci.org/pysam-developers/pysam
In the Travis logs I see a suspicious export MY_SECRET_ENV=[secure] .
Are you sure you ran
travis encrypt 'TWINE_PASSWORD=escaped_PyPI_password'
and not travis encrypt 'MY_SECRET_ENV=escaped_PyPI_password' as in the example at https://docs.travis-ci.com/user/environment-variables/#encrypting-environment-variables ?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/814#issuecomment-516138597,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","That is quite possible..., let me check.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/814#issuecomment-516140738,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","Indeed, that is what I did - sorry! I have pushed a change.
Is there a way to trigger the deployment for a particular build, or do we need to wait for the next release tag change?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/nsoranzo,7,https://github.com/pysam-developers/pysam/pull/814#issuecomment-516151050,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","Thanks for checking, TWINE_PASSWORD is exported now.  Unfortunately you need to tag a commit to enable the deploy, as I have currently implemented it.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/AndreasHeger,8,https://github.com/pysam-developers/pysam/pull/814#issuecomment-516997822,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","Hi @nsoranzo , there seems to be an issue with the wheels. I am trying to debug using the CIBW_TEST_COMMAND env var to see if we can catch issues before deploying. If you have any advice, that would be very much appreciated as I am not familiar with cibuildwheel.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,814,2019-06-22T01:21:05Z,2019-07-17T21:39:18Z,2019-07-31T23:08:45Z,MERGED,True,48,0,1,https://github.com/nsoranzo,Build wheels and upload them to PyPI,1,[],https://github.com/pysam-developers/pysam/pull/814,https://github.com/nsoranzo,9,https://github.com/pysam-developers/pysam/pull/814#issuecomment-517055274,"when tagging a release.
Build Linux and macOS binary wheels using cibuildwheel.
Build sdist with libcurl and s3 support.
Upload sdist and wheels to PyPI using twine.
xref. #722","@AndreasHeger Sorry for the trouble! I think commit abf896a is breaking the TravisCI configuration because tabs cannot be used for indentation.
CIBW_TEST_COMMAND seems the way to go, but I don't have experience on this.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,815,2019-06-24T18:54:03Z,2019-07-17T21:37:46Z,2019-07-17T21:37:47Z,MERGED,True,1,1,1,https://github.com/juliangehring,Fix code block formatting for `tbx.fetch` usage,1,[],https://github.com/pysam-developers/pysam/pull/815,https://github.com/juliangehring,1,https://github.com/pysam-developers/pysam/pull/815,"Tiny fix for the correct formatting of a code block. Turns

into","Tiny fix for the correct formatting of a code block. Turns

into",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,815,2019-06-24T18:54:03Z,2019-07-17T21:37:46Z,2019-07-17T21:37:47Z,MERGED,True,1,1,1,https://github.com/juliangehring,Fix code block formatting for `tbx.fetch` usage,1,[],https://github.com/pysam-developers/pysam/pull/815,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/815#issuecomment-512578570,"Tiny fix for the correct formatting of a code block. Turns

into",Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/tneymanov,1,https://github.com/pysam-developers/pysam/pull/818,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).","This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/kevinjacobs-progenity,2,https://github.com/pysam-developers/pysam/pull/818#issuecomment-509606413,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",This is a good step forward.  I've been meaning to add UTF8 support with percent encoding for some time now.  I'll review and see if any more fixes are needed...,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/818#issuecomment-509788287,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).","Thanks, @tneymanov . I can confirm that all tests pass. Looking forward to your review, @kevinjacobs-progenity . I will put together a test and hopefully we can merge in the next few days.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/818#issuecomment-509808260,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).","Added a test, which passes, but managed to put it into the wrong branch, see:
https://github.com/pysam-developers/pysam/tree/tneymanov-unicode",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/818#issuecomment-512528802,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",Merging this for now.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/tneymanov,6,https://github.com/pysam-developers/pysam/pull/818#issuecomment-512582506,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/tneymanov,7,https://github.com/pysam-developers/pysam/pull/818#issuecomment-513919146,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).","Hi @AndreasHeger ,
Could you tell me what your release schedule looks like? Is there a new release planned any time soon, or would you be open to cherry pick the change to the last release? We would love to a add dependency on pysam, but don't quite want to depend on a git branch in production code.
Thanks,
-Tural.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/tneymanov,8,https://github.com/pysam-developers/pysam/pull/818#issuecomment-516102122,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",@AndreasHeger Friendly Ping.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/818#issuecomment-516141758,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).","Hi @tneymanov , just released 0.15.3 with the unicode changes in. Latest version should already be available on pypi and conda.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,818,2019-07-08T20:51:35Z,2019-07-17T19:09:02Z,2019-07-29T20:19:50Z,MERGED,True,5,5,1,https://github.com/tneymanov,Add basic support for UTF-8 strings in libcbcf.pyx.,1,[],https://github.com/pysam-developers/pysam/pull/818,https://github.com/tneymanov,10,https://github.com/pysam-developers/pysam/pull/818#issuecomment-516146591,"This PR does bare minimum to support unicode literals in VCF files.
Related to #445 .
Ran the unit tests, PR hasn't affected them:
374 failed, 547 passed, 15 skipped, 2 warnings in 73.56 seconds (with and without my changes).",Thank you very much Andreas!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,822,2019-07-17T18:02:27Z,2019-07-17T21:37:18Z,2019-07-17T21:37:18Z,MERGED,True,3,0,1,https://github.com/diekhans,Include AlignmentHeader class in API documention,1,[],https://github.com/pysam-developers/pysam/pull/822,https://github.com/diekhans,1,https://github.com/pysam-developers/pysam/pull/822,Add class AlignmentHeader to the API documentation.,Add class AlignmentHeader to the API documentation.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,822,2019-07-17T18:02:27Z,2019-07-17T21:37:18Z,2019-07-17T21:37:18Z,MERGED,True,3,0,1,https://github.com/diekhans,Include AlignmentHeader class in API documention,1,[],https://github.com/pysam-developers/pysam/pull/822,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/822#issuecomment-512578448,Add class AlignmentHeader to the API documentation.,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,824,2019-07-17T19:09:26Z,2019-07-17T21:48:02Z,2021-11-05T14:56:24Z,MERGED,True,85,0,3,https://github.com/AndreasHeger,{AH} add unicode tests,3,[],https://github.com/pysam-developers/pysam/pull/824,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/824,adds some tests for unicode support.,adds some tests for unicode support.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,825,2019-07-17T21:36:43Z,2019-07-27T19:04:02Z,2019-07-27T19:04:44Z,MERGED,True,218,42,8,https://github.com/AndreasHeger,Ah fix cpy error,6,[],https://github.com/pysam-developers/pysam/pull/825,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/825,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,825,2019-07-17T21:36:43Z,2019-07-27T19:04:02Z,2019-07-27T19:04:44Z,MERGED,True,218,42,8,https://github.com/AndreasHeger,Ah fix cpy error,6,[],https://github.com/pysam-developers/pysam/pull/825,https://github.com/kyleabeauchamp,2,https://github.com/pysam-developers/pysam/pull/825#issuecomment-512661502,,"I'm not super familiar with that part of the code, but it seems reasonable to me.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,825,2019-07-17T21:36:43Z,2019-07-27T19:04:02Z,2019-07-27T19:04:44Z,MERGED,True,218,42,8,https://github.com/AndreasHeger,Ah fix cpy error,6,[],https://github.com/pysam-developers/pysam/pull/825,https://github.com/kevinjacobs-progenity,3,https://github.com/pysam-developers/pysam/pull/825#issuecomment-513197168,,"Testing now.  There may also be an ASCII assumption in the tabix code, if I remember correctly.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,825,2019-07-17T21:36:43Z,2019-07-27T19:04:02Z,2019-07-27T19:04:44Z,MERGED,True,218,42,8,https://github.com/AndreasHeger,Ah fix cpy error,6,[],https://github.com/pysam-developers/pysam/pull/825,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/825#issuecomment-515706323,,"Thanks both. Merging for now, seems to work.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,829,2019-07-28T09:54:52Z,2019-07-28T19:40:16Z,2019-07-28T20:11:44Z,MERGED,True,30,11,4,https://github.com/jmarshall,Run configure with the correct CC/CFLAGS/LDFLAGS env vars,2,[],https://github.com/pysam-developers/pysam/pull/829,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/829,"Prevent build failures by ensuring that configure uses the same compiler and CFLAGS/etc that will be used later when the Cython and C source itself is compiled.
In particular, the sysconfig $CFLAGS (oddly enough) prevents the compiler from searching /usr/local/include (at least on macOS). Without this PR, configure sees (Homebrew/etc's) /usr/local/include/lzma.h so defines HAVE_LZMA_H; later when compiling htslib/cram/cram_io.c that directory is not searched, leading to <lzma.h> not found errors. Ensuring that configure also does not see lzma.h there leaves HAVE_LZMA_H undefined, which activates HTSlib's os/lzma_stub.h workaround for this header being missing and leads to an lzma-enabled pysam using macOS's system liblzma.dylib.
Fixes #495. Fixes #828.
[It appears I didn't submit this PR back in May, likely because there was no response to my other PRs at the time.]","Prevent build failures by ensuring that configure uses the same compiler and CFLAGS/etc that will be used later when the Cython and C source itself is compiled.
In particular, the sysconfig $CFLAGS (oddly enough) prevents the compiler from searching /usr/local/include (at least on macOS). Without this PR, configure sees (Homebrew/etc's) /usr/local/include/lzma.h so defines HAVE_LZMA_H; later when compiling htslib/cram/cram_io.c that directory is not searched, leading to <lzma.h> not found errors. Ensuring that configure also does not see lzma.h there leaves HAVE_LZMA_H undefined, which activates HTSlib's os/lzma_stub.h workaround for this header being missing and leads to an lzma-enabled pysam using macOS's system liblzma.dylib.
Fixes #495. Fixes #828.
[It appears I didn't submit this PR back in May, likely because there was no response to my other PRs at the time.]",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,829,2019-07-28T09:54:52Z,2019-07-28T19:40:16Z,2019-07-28T20:11:44Z,MERGED,True,30,11,4,https://github.com/jmarshall,Run configure with the correct CC/CFLAGS/LDFLAGS env vars,2,[],https://github.com/pysam-developers/pysam/pull/829,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/829#issuecomment-515789214,"Prevent build failures by ensuring that configure uses the same compiler and CFLAGS/etc that will be used later when the Cython and C source itself is compiled.
In particular, the sysconfig $CFLAGS (oddly enough) prevents the compiler from searching /usr/local/include (at least on macOS). Without this PR, configure sees (Homebrew/etc's) /usr/local/include/lzma.h so defines HAVE_LZMA_H; later when compiling htslib/cram/cram_io.c that directory is not searched, leading to <lzma.h> not found errors. Ensuring that configure also does not see lzma.h there leaves HAVE_LZMA_H undefined, which activates HTSlib's os/lzma_stub.h workaround for this header being missing and leads to an lzma-enabled pysam using macOS's system liblzma.dylib.
Fixes #495. Fixes #828.
[It appears I didn't submit this PR back in May, likely because there was no response to my other PRs at the time.]","Thanks, and apologies for the delays.
Your pull requests are highly appreciated!",True,{'HOORAY': ['https://github.com/Amar1729']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,833,2019-08-11T14:29:44Z,2019-11-06T21:46:04Z,2019-11-07T11:34:34Z,MERGED,True,143,147,3,https://github.com/ExplodingCabbage,Fix lots of broken docs formatting,2,[],https://github.com/pysam-developers/pysam/pull/833,https://github.com/ExplodingCabbage,1,https://github.com/pysam-developers/pysam/pull/833,"There are currently lots of bits of garbled documentation at https://pysam.readthedocs.io/en/latest/api.html where Napoleon either rendered a multi-line description wrongly, or chucked in some cruft like the text :param for no obvious reason. I don't really understand Napoleon (or even vanilla Sphinx/RST), but with some random tinkering around, I've managed to come up with this PR that makes all the really broken stuff I could spot go away.","There are currently lots of bits of garbled documentation at https://pysam.readthedocs.io/en/latest/api.html where Napoleon either rendered a multi-line description wrongly, or chucked in some cruft like the text :param for no obvious reason. I don't really understand Napoleon (or even vanilla Sphinx/RST), but with some random tinkering around, I've managed to come up with this PR that makes all the really broken stuff I could spot go away.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,833,2019-08-11T14:29:44Z,2019-11-06T21:46:04Z,2019-11-07T11:34:34Z,MERGED,True,143,147,3,https://github.com/ExplodingCabbage,Fix lots of broken docs formatting,2,[],https://github.com/pysam-developers/pysam/pull/833,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/833#issuecomment-550514767,"There are currently lots of bits of garbled documentation at https://pysam.readthedocs.io/en/latest/api.html where Napoleon either rendered a multi-line description wrongly, or chucked in some cruft like the text :param for no obvious reason. I don't really understand Napoleon (or even vanilla Sphinx/RST), but with some random tinkering around, I've managed to come up with this PR that makes all the really broken stuff I could spot go away.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,841,2019-08-29T06:58:59Z,2019-11-06T21:45:40Z,2019-11-06T21:45:47Z,MERGED,True,7,1,1,https://github.com/jbloom,Fix silent truncation of FASTQ with bad q strings,1,[],https://github.com/pysam-developers/pysam/pull/841,https://github.com/jbloom,1,https://github.com/pysam-developers/pysam/pull/841,"Prior to this commit, pysam silently truncates FASTQ files that have bad quality strings. For instance, consider the following code which attempts to read a FASTQ file where the quality string is invalid because it differs in length from the sequence:
import tempfile
import pysam

with tempfile.NamedTemporaryFile('wt') as f:
    f.write('>name\nACT\n+\n????')
    f.flush()
    nreads = len([r for r in pysam.FastxFile(f.name)])
    print(nreads)

Prior to this commit, the above code would return 0 even though there is in fact 1 invalid entry in the FASTQ. The reason is that in the code, kseq_read returns -1 for end of file but -2 for truncated quality string, but the code for FastxFile assumes end of file for any return < 0.
With this commit, an error is now raised for invalid FASTQ files rather than silently truncating the file.","Prior to this commit, pysam silently truncates FASTQ files that have bad quality strings. For instance, consider the following code which attempts to read a FASTQ file where the quality string is invalid because it differs in length from the sequence:
import tempfile
import pysam

with tempfile.NamedTemporaryFile('wt') as f:
    f.write('>name\nACT\n+\n????')
    f.flush()
    nreads = len([r for r in pysam.FastxFile(f.name)])
    print(nreads)

Prior to this commit, the above code would return 0 even though there is in fact 1 invalid entry in the FASTQ. The reason is that in the code, kseq_read returns -1 for end of file but -2 for truncated quality string, but the code for FastxFile assumes end of file for any return < 0.
With this commit, an error is now raised for invalid FASTQ files rather than silently truncating the file.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,841,2019-08-29T06:58:59Z,2019-11-06T21:45:40Z,2019-11-06T21:45:47Z,MERGED,True,7,1,1,https://github.com/jbloom,Fix silent truncation of FASTQ with bad q strings,1,[],https://github.com/pysam-developers/pysam/pull/841,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/841#issuecomment-550514635,"Prior to this commit, pysam silently truncates FASTQ files that have bad quality strings. For instance, consider the following code which attempts to read a FASTQ file where the quality string is invalid because it differs in length from the sequence:
import tempfile
import pysam

with tempfile.NamedTemporaryFile('wt') as f:
    f.write('>name\nACT\n+\n????')
    f.flush()
    nreads = len([r for r in pysam.FastxFile(f.name)])
    print(nreads)

Prior to this commit, the above code would return 0 even though there is in fact 1 invalid entry in the FASTQ. The reason is that in the code, kseq_read returns -1 for end of file but -2 for truncated quality string, but the code for FastxFile assumes end of file for any return < 0.
With this commit, an error is now raised for invalid FASTQ files rather than silently truncating the file.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,846,2019-09-04T18:15:05Z,2019-11-06T21:44:55Z,2019-11-06T21:44:58Z,MERGED,True,5,3,1,https://github.com/tneymanov,"Prevent segmentation fault on ID, when handling malformed records.",1,[],https://github.com/pysam-developers/pysam/pull/846,https://github.com/tneymanov,1,https://github.com/pysam-developers/pysam/pull/846,"Currently, when a record is malformed and has less than 2 tabs (aside from trailing), referencing *ptr.d.id causes segmentation fault. By checking m_id, we can tell if any memory was allocated, and if not, fail gracefully.
Example malformed line:
#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT
1\t1\t\t

Ran pytest tests, same tests pass/fail, with or without the change.","Currently, when a record is malformed and has less than 2 tabs (aside from trailing), referencing *ptr.d.id causes segmentation fault. By checking m_id, we can tell if any memory was allocated, and if not, fail gracefully.
Example malformed line:
#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT
1\t1\t\t

Ran pytest tests, same tests pass/fail, with or without the change.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,846,2019-09-04T18:15:05Z,2019-11-06T21:44:55Z,2019-11-06T21:44:58Z,MERGED,True,5,3,1,https://github.com/tneymanov,"Prevent segmentation fault on ID, when handling malformed records.",1,[],https://github.com/pysam-developers/pysam/pull/846,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/846#issuecomment-550514368,"Currently, when a record is malformed and has less than 2 tabs (aside from trailing), referencing *ptr.d.id causes segmentation fault. By checking m_id, we can tell if any memory was allocated, and if not, fail gracefully.
Example malformed line:
#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT
1\t1\t\t

Ran pytest tests, same tests pass/fail, with or without the change.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,856,2019-11-04T09:56:29Z,2019-11-06T21:44:03Z,2019-11-11T09:17:26Z,MERGED,True,4,0,1,https://github.com/christianbioinf,Attempt to fix of #799.,1,[],https://github.com/pysam-developers/pysam/pull/856,https://github.com/christianbioinf,1,https://github.com/pysam-developers/pysam/pull/856,"Due to identical return code of -1 for cases where the end of the file is reached (non-error case) from cases where an error during parsing occurred (e.g. due to incorrect type of field), it is now reading out the error code that may be set inside the bcf1_t* record.
In this way, pysam can raise an exception and the user is able to properly handle it instead of having a putatively successful read and the burden to check the stderr for any messages like [E::vcf_parse_format] or to check whether the total number of records has been processed.","Due to identical return code of -1 for cases where the end of the file is reached (non-error case) from cases where an error during parsing occurred (e.g. due to incorrect type of field), it is now reading out the error code that may be set inside the bcf1_t* record.
In this way, pysam can raise an exception and the user is able to properly handle it instead of having a putatively successful read and the burden to check the stderr for any messages like [E::vcf_parse_format] or to check whether the total number of records has been processed.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,856,2019-11-04T09:56:29Z,2019-11-06T21:44:03Z,2019-11-11T09:17:26Z,MERGED,True,4,0,1,https://github.com/christianbioinf,Attempt to fix of #799.,1,[],https://github.com/pysam-developers/pysam/pull/856,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/856#issuecomment-550514082,"Due to identical return code of -1 for cases where the end of the file is reached (non-error case) from cases where an error during parsing occurred (e.g. due to incorrect type of field), it is now reading out the error code that may be set inside the bcf1_t* record.
In this way, pysam can raise an exception and the user is able to properly handle it instead of having a putatively successful read and the burden to check the stderr for any messages like [E::vcf_parse_format] or to check whether the total number of records has been processed.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,863,2019-11-18T07:01:10Z,2020-01-15T21:47:24Z,2020-01-15T21:47:24Z,MERGED,True,1,1,1,https://github.com/codeunsolved,Force arg to bytes to support non-ASCII encoding,1,[],https://github.com/pysam-developers/pysam/pull/863,https://github.com/codeunsolved,1,https://github.com/pysam-developers/pysam/pull/863,Please see #862,Please see #862,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,866,2019-11-25T16:32:38Z,2020-01-15T21:48:13Z,2020-01-15T21:48:18Z,MERGED,True,1,1,1,https://github.com/amblina,Removal of unused import,1,[],https://github.com/pysam-developers/pysam/pull/866,https://github.com/amblina,1,https://github.com/pysam-developers/pysam/pull/866,Import is overwritten in the next line with cy_build,Import is overwritten in the next line with cy_build,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,866,2019-11-25T16:32:38Z,2020-01-15T21:48:13Z,2020-01-15T21:48:18Z,MERGED,True,1,1,1,https://github.com/amblina,Removal of unused import,1,[],https://github.com/pysam-developers/pysam/pull/866,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/866#issuecomment-574871717,Import is overwritten in the next line with cy_build,Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,867,2019-11-26T18:24:59Z,2020-01-15T21:49:15Z,2020-01-15T22:21:06Z,MERGED,True,41,21,1,https://github.com/nsoranzo,Fix wheel building on TravisCI,2,[],https://github.com/pysam-developers/pysam/pull/867,https://github.com/nsoranzo,1,https://github.com/pysam-developers/pysam/pull/867,"Use cibuildwheel>=1.1.0 to allow specifying the -L . option for the auditwheel command. Introduced in pypa/cibuildwheel#211 . Fix #831 .
Split sdist and linux deploy in 3 separate jobs, otherwise the Travis job times out after 50'.","Use cibuildwheel>=1.1.0 to allow specifying the -L . option for the auditwheel command. Introduced in pypa/cibuildwheel#211 . Fix #831 .
Split sdist and linux deploy in 3 separate jobs, otherwise the Travis job times out after 50'.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,867,2019-11-26T18:24:59Z,2020-01-15T21:49:15Z,2020-01-15T22:21:06Z,MERGED,True,41,21,1,https://github.com/nsoranzo,Fix wheel building on TravisCI,2,[],https://github.com/pysam-developers/pysam/pull/867,https://github.com/nsoranzo,2,https://github.com/pysam-developers/pysam/pull/867#issuecomment-559009146,"Use cibuildwheel>=1.1.0 to allow specifying the -L . option for the auditwheel command. Introduced in pypa/cibuildwheel#211 . Fix #831 .
Split sdist and linux deploy in 3 separate jobs, otherwise the Travis job times out after 50'.","@AndreasHeger Now that binary wheels are successfully tested with import pysam, I'd like to re-enable the twine upload on tags. If that's OK with you, I can add such a commit to this PR.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,867,2019-11-26T18:24:59Z,2020-01-15T21:49:15Z,2020-01-15T22:21:06Z,MERGED,True,41,21,1,https://github.com/nsoranzo,Fix wheel building on TravisCI,2,[],https://github.com/pysam-developers/pysam/pull/867,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/867#issuecomment-574872025,"Use cibuildwheel>=1.1.0 to allow specifying the -L . option for the auditwheel command. Introduced in pypa/cibuildwheel#211 . Fix #831 .
Split sdist and linux deploy in 3 separate jobs, otherwise the Travis job times out after 50'.","Thanks, sorry for the delay.
Yes, let us give it another go.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,868,2019-11-28T00:58:32Z,2020-01-15T21:51:06Z,2020-01-15T21:51:06Z,MERGED,True,10,0,2,https://github.com/rjlasko,Prevent segfault on Python 2.7 AlignedSegment.compare(other=None),2,[],https://github.com/pysam-developers/pysam/pull/868,https://github.com/rjlasko,1,https://github.com/pysam-developers/pysam/pull/868,"Comparing an AlignedSegment object to None throws a Segmentation Fault, when running on Python 2.7.  Using Python 3 did not yield the segfault in a one-off test.
The specific condition to throw the segfault is when testing object equality.  Instance equality seems to work fine.
a = pysam.AlignedSegment()
b = None

a is b   # False
a == b # segfault
a.compare(b) # segfault

The submitted PR includes additions to the unit tests to reproduce the segfault, as well as the fix.  The current workaround is for users to use the is operator when None is a potential comparison argument.
As stated before, this issue was reliably reproduced on the following, using Python 2.7.
Docker images

python:2.7.17-slim-buster
python:2.7.17-alpine
centos:7.5.1804

Bare Metal & KVM

CentOS 7

In the case of CentOS 7, I tried installing with pip, conda, and building from source.  None of these approaches seemed to resolve the issue.  I was unable to reproduce the bug on the python:3.7.5-slim-buster Docker image, so I assume that somehow Python 3 is safe.","Comparing an AlignedSegment object to None throws a Segmentation Fault, when running on Python 2.7.  Using Python 3 did not yield the segfault in a one-off test.
The specific condition to throw the segfault is when testing object equality.  Instance equality seems to work fine.
a = pysam.AlignedSegment()
b = None

a is b   # False
a == b # segfault
a.compare(b) # segfault

The submitted PR includes additions to the unit tests to reproduce the segfault, as well as the fix.  The current workaround is for users to use the is operator when None is a potential comparison argument.
As stated before, this issue was reliably reproduced on the following, using Python 2.7.
Docker images

python:2.7.17-slim-buster
python:2.7.17-alpine
centos:7.5.1804

Bare Metal & KVM

CentOS 7

In the case of CentOS 7, I tried installing with pip, conda, and building from source.  None of these approaches seemed to resolve the issue.  I was unable to reproduce the bug on the python:3.7.5-slim-buster Docker image, so I assume that somehow Python 3 is safe.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,868,2019-11-28T00:58:32Z,2020-01-15T21:51:06Z,2020-01-15T21:51:06Z,MERGED,True,10,0,2,https://github.com/rjlasko,Prevent segfault on Python 2.7 AlignedSegment.compare(other=None),2,[],https://github.com/pysam-developers/pysam/pull/868,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/868#issuecomment-574872754,"Comparing an AlignedSegment object to None throws a Segmentation Fault, when running on Python 2.7.  Using Python 3 did not yield the segfault in a one-off test.
The specific condition to throw the segfault is when testing object equality.  Instance equality seems to work fine.
a = pysam.AlignedSegment()
b = None

a is b   # False
a == b # segfault
a.compare(b) # segfault

The submitted PR includes additions to the unit tests to reproduce the segfault, as well as the fix.  The current workaround is for users to use the is operator when None is a potential comparison argument.
As stated before, this issue was reliably reproduced on the following, using Python 2.7.
Docker images

python:2.7.17-slim-buster
python:2.7.17-alpine
centos:7.5.1804

Bare Metal & KVM

CentOS 7

In the case of CentOS 7, I tried installing with pip, conda, and building from source.  None of these approaches seemed to resolve the issue.  I was unable to reproduce the bug on the python:3.7.5-slim-buster Docker image, so I assume that somehow Python 3 is safe.","Thanks, apologies for the delay in merging.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,1,https://github.com/pysam-developers/pysam/pull/870,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,2,https://github.com/pysam-developers/pysam/pull/870#issuecomment-571177951,,"Summary: all tests pass except macOS & CONDA_PY={2.7,3.7} (but macOS + 3.6 is okay!)
The macOS error:
In file included from htslib/hts.c:44:

In file included from /Users/travis/build/pysam-developers/pysam/htslib/cram/cram.h:46:

/Users/travis/build/pysam-developers/pysam/htslib/header.h:227:24: error: must use 'struct' tag to refer to type 'sam_hdr_t'

int sam_hdr_fill_hrecs(sam_hdr_t *bh);

                       ^

                       struct 

https://travis-ci.org/pysam-developers/pysam/jobs/633316895#L2870",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,3,https://github.com/pysam-developers/pysam/pull/870#issuecomment-571194697,,"This PR has been applied to the Debian package of pysam, as we are using htslib 1.10.x now.
Assistance in fixing the mac OS errors on Python 2.7 & Python 3.7 (so that this PR can be merged) would be appreciated!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/870#issuecomment-571204995,,"error: must use 'struct' tag to refer to type 'sam_hdr_t'

This error is what you get when this compilation has picked up a previously installed htslib-1.9 htslib/sam.h rather than the 1.10.x htslib/sam.h bundled within your pysam source tree. This will have come from the htslib=1.9 conda package installed by devtools/run_tests_travis.sh. It isn't immediately clear why this only affects a few platform/conda combinations, but it will come down to the -I compiler options added in each case.
Probably trimming and simplifying the -I options in play will be the way to fix this.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,5,https://github.com/pysam-developers/pysam/pull/870#issuecomment-571572083,,"@jmarshall Thanks for the hint. I don't have access to a macOS system so I can't test it out, though.
If anyone can confirm a fix, then patches or PRs are welcome!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/jmarshall,6,https://github.com/pysam-developers/pysam/pull/870#issuecomment-574192308,,"As mentioned, this is not inherently macOS-specific. Instead it comes from some distutils/setuptools interplay that could in principle be reproduced on Linux.
In any case, I am working up a fix for that. Then an import of upstream 1.10.x should be replayed on top of that fix. Probably by redoing it rather than starting from this PR: samtools & bcftools should be updated too, and this PR has somehow acquired extra copies of all the htslib/*.h headers in other directories etc.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,7,https://github.com/pysam-developers/pysam/pull/870#issuecomment-574194913,,"Thanks @jmarshall !
I used the devtools/import.py script to do the import of htslib 1.10.2
If this PR is to be replaced, you'll likely still need 790fd11",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/mr-c,8,https://github.com/pysam-developers/pysam/pull/870#issuecomment-574195917,,"@jmarshall A previous version of this PR also updated samtools/bcftools, but then a bunch of tests broke due to some extra output in v1.10.x, so I rolled it back to this version",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/870#issuecomment-574875546,,"Thanks, @mr-c for making a start on this, and apologies for being slow out of the block. Thanks @jmarshall  for your assistance. I can give it a go, but will wait for your fix.",True,{'THUMBS_UP': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,870,2020-01-06T14:48:42Z,2020-03-20T13:00:59Z,2020-03-20T13:01:00Z,CLOSED,False,36435,6324,231,https://github.com/mr-c,start htslib1.10,2,[],https://github.com/pysam-developers/pysam/pull/870,https://github.com/jmarshall,10,https://github.com/pysam-developers/pysam/pull/870#issuecomment-601688187,,Superseded by PR #905.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,874,2020-01-14T12:47:49Z,2020-05-23T20:58:12Z,2020-05-23T20:58:13Z,CLOSED,False,0,0,0,https://github.com/ExplodingCabbage,Fix a broken import,2,[],https://github.com/pysam-developers/pysam/pull/874,https://github.com/ExplodingCabbage,1,https://github.com/pysam-developers/pysam/pull/874,"Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)","Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,874,2020-01-14T12:47:49Z,2020-05-23T20:58:12Z,2020-05-23T20:58:13Z,CLOSED,False,0,0,0,https://github.com/ExplodingCabbage,Fix a broken import,2,[],https://github.com/pysam-developers/pysam/pull/874,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/874#issuecomment-574873669,"Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)","Hi @ExplodingCabbage , (Pratchett fan?) the issue could be that the following usually does not work:
python setup.py install
python -c 'import pysam'

The reason being that import pysam in the repo will go down the pysam directory in the repo and not pick up the installed pysam.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,874,2020-01-14T12:47:49Z,2020-05-23T20:58:12Z,2020-05-23T20:58:13Z,CLOSED,False,0,0,0,https://github.com/ExplodingCabbage,Fix a broken import,2,[],https://github.com/pysam-developers/pysam/pull/874,https://github.com/ExplodingCabbage,3,https://github.com/pysam-developers/pysam/pull/874#issuecomment-574919799,"Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)","Nope, this PR is not motivated by that mistake (although I have previously made it so your suspicion was reasonable).
If I install pysam from source on the current master branch and then try to import it from somewhere with no pysam directory in the cwd, I get this:
mark@fractal:/$ python3
Python 3.8.0 (default, Oct 28 2019, 16:14:01) 
[GCC 9.2.1 20191008] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import pysam
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python3.8/dist-packages/pysam/__init__.py"", line 30, in <module>
    from pysam.samtools import *
  File ""/usr/local/lib/python3.8/dist-packages/pysam/samtools.py"", line 1, in <module>
    from utils import PysamDispatcher
ModuleNotFoundError: No module named 'utils'

This seems to be the only import that needs changing to let me do import pysam successfully and I am confused about why this one import is written differently to all others and why you (I guess?) don't have the same problem.

(Pratchett fan?)

Not since I was a teen, and I didn't read enough to know what you're referencing, but perhaps now I will. :)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,874,2020-01-14T12:47:49Z,2020-05-23T20:58:12Z,2020-05-23T20:58:13Z,CLOSED,False,0,0,0,https://github.com/ExplodingCabbage,Fix a broken import,2,[],https://github.com/pysam-developers/pysam/pull/874,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/874#issuecomment-575938994,"Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)","Thanks, I will try changing this to pysam.utils. I found the 'import .' notation did not work always.
In one of Pratchett's book is an Exploding Cabbage Stamp.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,874,2020-01-14T12:47:49Z,2020-05-23T20:58:12Z,2020-05-23T20:58:13Z,CLOSED,False,0,0,0,https://github.com/ExplodingCabbage,Fix a broken import,2,[],https://github.com/pysam-developers/pysam/pull/874,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/874#issuecomment-633139176,"Without this change, installing from the repo (with pip3 install . or python3 setup.py install) produces a broken installation that fails on this import when I try to do import pysam.
(I'm confused about why the version I get by running pip3 install pysam doesn't have the same issue. It seems to already have this change. Is there something in the build pipeline that rewrites this import, that's missing when I install locally? Or, @AndreasHeger, did you make this change locally before pushing to PyPI and not commit it? Sorry if this is a dumb question; I'm inexpert at how setuptools works.)","The import has changed via a separate PR, I am closing this.
Thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,875,2020-01-14T13:42:33Z,2020-01-15T21:55:21Z,2020-01-16T00:11:16Z,MERGED,True,2,2,2,https://github.com/ExplodingCabbage,Bump minimum Cython version,1,[],https://github.com/pysam-developers/pysam/pull/875,https://github.com/ExplodingCabbage,1,https://github.com/pysam-developers/pysam/pull/875,"This is the version @pm67nz indicates is needed for creating a build from source in #860 (comment), so I figure we might as well enforce it everywhere?","This is the version @pm67nz indicates is needed for creating a build from source in #860 (comment), so I figure we might as well enforce it everywhere?",True,{'THUMBS_UP': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,875,2020-01-14T13:42:33Z,2020-01-15T21:55:21Z,2020-01-16T00:11:16Z,MERGED,True,2,2,2,https://github.com/ExplodingCabbage,Bump minimum Cython version,1,[],https://github.com/pysam-developers/pysam/pull/875,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/875#issuecomment-574874374,"This is the version @pm67nz indicates is needed for creating a build from source in #860 (comment), so I figure we might as well enforce it everywhere?","Yes, many thanks.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,878,2020-01-15T22:31:49Z,2020-01-18T21:16:29Z,2020-01-19T22:11:54Z,MERGED,True,3,3,1,https://github.com/nsoranzo,Restore twine upload on tag,1,[],https://github.com/pysam-developers/pysam/pull/878,https://github.com/nsoranzo,1,https://github.com/pysam-developers/pysam/pull/878,Follow-up on #867 .,Follow-up on #867 .,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,878,2020-01-15T22:31:49Z,2020-01-18T21:16:29Z,2020-01-19T22:11:54Z,MERGED,True,3,3,1,https://github.com/nsoranzo,Restore twine upload on tag,1,[],https://github.com/pysam-developers/pysam/pull/878,https://github.com/nsoranzo,2,https://github.com/pysam-developers/pysam/pull/878#issuecomment-576053102,Follow-up on #867 .,"The upload of wheels worked fine and they seem to work correctly, at least in a simple import pysam test.",True,"{'HOORAY': ['https://github.com/mvdbeek'], 'HEART': ['https://github.com/mvdbeek']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,879,2020-01-15T22:48:26Z,2020-01-18T21:17:24Z,2020-05-13T06:06:12Z,MERGED,True,8,1,1,https://github.com/lltw,"(issue #881) Fix add_meta function in libcbcf.pyx, so meta-information lines in he…",1,[],https://github.com/pysam-developers/pysam/pull/879,https://github.com/lltw,1,https://github.com/pysam-developers/pysam/pull/879,…ader added with this function have double-quoting rules in accordance to rules specified in VCF4.2 and VCF4.3 specifications,…ader added with this function have double-quoting rules in accordance to rules specified in VCF4.2 and VCF4.3 specifications,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,879,2020-01-15T22:48:26Z,2020-01-18T21:17:24Z,2020-05-13T06:06:12Z,MERGED,True,8,1,1,https://github.com/lltw,"(issue #881) Fix add_meta function in libcbcf.pyx, so meta-information lines in he…",1,[],https://github.com/pysam-developers/pysam/pull/879,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/879#issuecomment-575939211,…ader added with this function have double-quoting rules in accordance to rules specified in VCF4.2 and VCF4.3 specifications,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,879,2020-01-15T22:48:26Z,2020-01-18T21:17:24Z,2020-05-13T06:06:12Z,MERGED,True,8,1,1,https://github.com/lltw,"(issue #881) Fix add_meta function in libcbcf.pyx, so meta-information lines in he…",1,[],https://github.com/pysam-developers/pysam/pull/879,https://github.com/kishwarshafin,3,https://github.com/pysam-developers/pysam/pull/879#issuecomment-627766400,…ader added with this function have double-quoting rules in accordance to rules specified in VCF4.2 and VCF4.3 specifications,"Hello,
Not sure what happened here, with this code:
sq_id = sq
 n = self.fasta_handler.get_chromosome_sequence_length(sq)
items = [('ID', sq_id), 
         ('length', ln)]
header.add_meta(key='contig', items=items)
I keep getting:
Traceback (most recent call last):
  File ""/home/kishwar/Kishwar/software/pepper/venv/bin/pepper_snp"", line 11, in <module>
    load_entry_point('pepper-polish==0.0.6', 'console_scripts', 'pepper_snp')()
  File ""/home/kishwar/Kishwar/software/pepper/venv/lib/python3.6/site-packages/pepper_polish-0.0.6-py3.6-linux-x86_64.egg/pepper_snp/pepper_snp.py"", line 428, in main
    FLAGS.probability_threshold)
  File ""/home/kishwar/Kishwar/software/pepper/venv/lib/python3.6/site-packages/pepper_polish-0.0.6-py3.6-linux-x86_64.egg/pepper_snp/modules/python/FindSNPCandidates.py"", line 59, in find_candidates
    vcf_file.write_vcf_records(contig, all_candidates, reference_dict, positions)
  File ""/home/kishwar/Kishwar/software/pepper/venv/lib/python3.6/site-packages/pepper_polish-0.0.6-py3.6-linux-x86_64.egg/pepper_snp/modules/python/VcfWriter.py"", line 89, in write_vcf_records
    filter='PASS', alleles=alleles, GT=gt, GQ=60)
  File ""pysam/libcbcf.pyx"", line 4398, in pysam.libcbcf.VariantFile.new_record
  File ""pysam/libcbcf.pyx"", line 2074, in pysam.libcbcf.VariantHeader.new_record
  File ""pysam/libcbcf.pyx"", line 3061, in pysam.libcbcf.VariantRecord.contig.__set__
ValueError: Invalid chromosome/contig
However, works fine on 0.15.2",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,880,2020-01-15T22:50:22Z,2020-02-21T14:03:00Z,2020-02-21T14:03:10Z,CLOSED,False,13,8,3,https://github.com/jmarshall,Various devtools/run_tests_travis.sh tidy ups,2,[],https://github.com/pysam-developers/pysam/pull/880,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/880,A draft to see how travis likes it. Probably more to follow…,A draft to see how travis likes it. Probably more to follow…,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,880,2020-01-15T22:50:22Z,2020-02-21T14:03:00Z,2020-02-21T14:03:10Z,CLOSED,False,13,8,3,https://github.com/jmarshall,Various devtools/run_tests_travis.sh tidy ups,2,[],https://github.com/pysam-developers/pysam/pull/880,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/880#issuecomment-589665541,A draft to see how travis likes it. Probably more to follow…,Now incorporated into PR #890.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,883,2020-01-24T18:15:11Z,2020-03-13T07:43:20Z,2020-03-13T07:44:05Z,MERGED,True,1,1,1,https://github.com/graingert,fix region type,1,[],https://github.com/pysam-developers/pysam/pull/883,https://github.com/graingert,1,https://github.com/pysam-developers/pysam/pull/883,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,883,2020-01-24T18:15:11Z,2020-03-13T07:43:20Z,2020-03-13T07:44:05Z,MERGED,True,1,1,1,https://github.com/graingert,fix region type,1,[],https://github.com/pysam-developers/pysam/pull/883,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/883#issuecomment-598592643,,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,886,2020-01-27T22:45:11Z,2020-05-23T20:54:44Z,2020-05-23T20:55:07Z,MERGED,True,3,0,1,https://github.com/graingert,add test for str(pysam.FastqProxy()) segfault,1,[],https://github.com/pysam-developers/pysam/pull/886,https://github.com/graingert,1,https://github.com/pysam-developers/pysam/pull/886,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,886,2020-01-27T22:45:11Z,2020-05-23T20:54:44Z,2020-05-23T20:55:07Z,MERGED,True,3,0,1,https://github.com/graingert,add test for str(pysam.FastqProxy()) segfault,1,[],https://github.com/pysam-developers/pysam/pull/886,https://github.com/graingert,2,https://github.com/pysam-developers/pysam/pull/886#issuecomment-578992119,,"here's a demo on ubuntu: https://github.com/graingert/pysam-segfault
Step 7/7 : RUN ~/.virtualenvs/pysam/bin/python -c ""str(__import__('pysam').FastqProxy())""
 ---> Running in d8adac336dd5
Segmentation fault (core dumped)
The command '/bin/sh -c ~/.virtualenvs/pysam/bin/python -c ""str(__import__('pysam').FastqProxy())""' returned a non-zero code: 139",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,886,2020-01-27T22:45:11Z,2020-05-23T20:54:44Z,2020-05-23T20:55:07Z,MERGED,True,3,0,1,https://github.com/graingert,add test for str(pysam.FastqProxy()) segfault,1,[],https://github.com/pysam-developers/pysam/pull/886,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/886#issuecomment-633138670,,"Thanks, FastqProxy now raises ValueError if instantiated directly.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/890,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/890#issuecomment-582375386,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","Also most of these almost certainly don't need the antiquated -t ex1.fa.fai option, but it doesn't really matter and this PR makes the minimal change and leaves them as is.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/unode,3,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589094051,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","The additional strictness of samtools 1.10 when parsing the header is also making tests fail on lines starting with @x1, @x2 and @x3.
This happens with:

  
    
      pysam/tests/pysam_data/example_user_header.sam
    
    
         Line 4
      in
      c818db5
    
  
  
    

        
          
           @x1	A:2	B:5",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/unode,4,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589098876,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","To be clear, the SAM specification states:

... TAG is a two-character string that defines the format
and content of VALUE. Thus header lines match
/^@(HD|SQ|RG|PG)(\t[A-Za-z][A-Za-z0-9]:[ -~]+)+$/or/^@CO\t.*/

and therefore @x... tags are rejected. X... tags can still exist but only in alignment fields.
I'm not sure if this defeats the purpose of the test but converting them to comments (@CO) makes samtools happy.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,5,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589108824,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.",You are correct — that's also a very unfortunate test case. I'll add a fix to this PR.,True,"{'THUMBS_UP': ['https://github.com/unode', 'https://github.com/scalavision'], 'HOORAY': ['https://github.com/unode']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/unode,6,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589113898,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/unode,7,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589116944,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","Seems like it doesn't end there:
samtools view -bS rg_with_tab.sam > rg_with_tab.bam
[E::sam_hrecs_error] Malformed key:value pair at line 3: ""@PG   ID:bwa  PN:bwa  VN:0.7.9a-r786  CL:bwa mem -p -t 8 -M -R @RG    ID:None SM:None /mnt/data/hg19.fa       /mnt/analysis/default-0.fastq""
samtools view: failed to add PG line to the header

😢",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jkbonfield,8,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589160139,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","Indeed, that is also an illegal SAM header.
The regexp listed in https://github.com/samtools/hts-specs/blob/master/SAMv1.pdf shows that you can only have tab in your header fields if they're in CO lines.  It doesn't elaborate on how to work around this though.  I guess ""\t"" or something is appropriate.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,9,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589444326,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","I've changed or removed the test cases that were failing due to Samtools 1.10's increased header parsing and hence requirement for headers to be valid, as described in the commit message.
I've also worked around Samtools 1.10's inconvenient behaviour change whereby it now adds @PG headers by default. This can be suppressed with --no-PG but that option is a syntax error with earlier versions of samtools, which pysam still needs to work with. (Compare the related samtools/samtools#1175.) Fortunately the problematic Makefile already uses GNU Make constructs, so we can use a $(shell) kludge to probe for the existence of the option.
Finally ex3.sam contained records with incorrect NM values. Samtools 1.10 preserves these incorrect values when converting to CRAM, while previous versions effectively replaced them with the correct value. This was leading to another 8 test failures with samtools 1.10. We're testing pysam not samtools's format conversion, so I've corrected the values in the input data file and adjusted the SAM/BAM tests accordingly.
This fixes all test failures for me locally; we will see more with https://travis-ci.org/jmarshall/pysam/builds/653424636.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/unode,10,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589591353,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","I guess ""\t"" or something is appropriate

\t is typically used to represent a TAB character. Couldn't tell from your phrasing if this is what you meant.
Also, thanks a lot for all of this!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,11,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589688001,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","Re tab characters, that test case reflects a legacy pysam workaround (#39) for buggy BWA behaviour in simple uses of BWA's monolithic -R option. There was a suggestion for BWA to avoid outputting invalid headers by encoding the string for @PG with two characters '\\', 't' itself, but sadly lh3/bwa#46 was never merged. BWA's answer was that it decodes \t itself, so as long as you can quote your backslashes enough that BWA itself gets to do the expanding, it will be printed as a tab in the @RG header but \t in the @PG header. Unfortunately this is in general infeasible, and I was never able to convince the author to sidestep the entire problem by using separate options like samtools addreplacerg -r ID:foo -r SM:bar does.
But I digress. As noted in the commit message, pysam's PG-CL-with-tabs workaround is no longer feasible to test except in the original SAM text and the workaround is somewhat misguided anyway, so I have just defanged the test case by changing them to spaces (as sufficiently quoting the expected output in AlignmentFile_test.py would be tedious if they were changed to \t — yes, I know about Python raw strings). In future, it might be worth rethinking this pysam extension and removing it and this now badly-named test case.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,890,2020-02-05T11:43:23Z,2020-03-13T08:44:51Z,2020-03-13T08:45:15Z,MERGED,True,34,60,11,https://github.com/jmarshall,Update test suite to work with samtools/etc 1.10.x external commands,5,[],https://github.com/pysam-developers/pysam/pull/890,https://github.com/jmarshall,12,https://github.com/pysam-developers/pysam/pull/890#issuecomment-589692808,"The legacy import command was broken in Samtools 1.10 (hat tip @mr-c and see also samtools/samtools#1183) and has been removed from future Samtools (see samtools/samtools#1185).
Separately from and prior to any updating of the bundled htslib/samtools/etc to 1.10 or later (this fails even now with the bundled samtools 1.9, as an external samtools is used which may be 1.10), the test suite needs to stop using this legacy command. Use the equivalent samtools view command instead.","@AndreasHeger: This PR now passes all tests when used together with external samtools/bcftools/etc provided by samtools/etc 1.9 or by samtools/etc 1.10. I hate to suggest rolling yet another htslib-1.9-using pysam 0.15.x point release so soon after sorting out the Cython/Py3.8 mess, but it might be a good idea…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,896,2020-02-26T04:28:47Z,2020-05-23T20:34:49Z,2020-05-23T20:34:49Z,CLOSED,False,26,1,2,https://github.com/nh13,get_reference_sequence with mismatches after a deletion,2,[],https://github.com/pysam-developers/pysam/pull/896,https://github.com/nh13,1,https://github.com/pysam-developers/pysam/pull/896,"Candidate fix for: #895
Using travis-ci to run unit tests.","Candidate fix for: #895
Using travis-ci to run unit tests.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,896,2020-02-26T04:28:47Z,2020-05-23T20:34:49Z,2020-05-23T20:34:49Z,CLOSED,False,26,1,2,https://github.com/nh13,get_reference_sequence with mismatches after a deletion,2,[],https://github.com/pysam-developers/pysam/pull/896,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/896#issuecomment-633134927,"Candidate fix for: #895
Using travis-ci to run unit tests.","This PR is closed as a spec issue, see #895",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,898,2020-03-06T17:45:20Z,2020-03-12T21:18:35Z,2020-03-12T21:18:35Z,MERGED,True,2,2,1,https://github.com/juliangehring,Fix typos in the FAQ,1,[],https://github.com/pysam-developers/pysam/pull/898,https://github.com/juliangehring,1,https://github.com/pysam-developers/pysam/pull/898,Fixes two small typos in the FAQ documentation.,Fixes two small typos in the FAQ documentation.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,898,2020-03-06T17:45:20Z,2020-03-12T21:18:35Z,2020-03-12T21:18:35Z,MERGED,True,2,2,1,https://github.com/juliangehring,Fix typos in the FAQ,1,[],https://github.com/pysam-developers/pysam/pull/898,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/898#issuecomment-598422688,Fixes two small typos in the FAQ documentation.,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/905,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.","Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.",True,{'HOORAY': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/kevinjacobs-progenity,2,https://github.com/pysam-developers/pysam/pull/905#issuecomment-601693648,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.",@jmarshall: Nice work!  I'll start testing.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/905#issuecomment-629128103,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.",@AndreasHeger @kevinjacobs-progenity @bioinformed @kyleabeauchamp: I appreciate that basically none of us have time for anything under the present circumstances 😟 but is anyone likely to have a chance to look at this?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/kevinjacobs-progenity,4,https://github.com/pysam-developers/pysam/pull/905#issuecomment-629132541,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.",I did a fair amount of testing before I ran into some minor problems and became distracted by work and committee obligations.  I'll set aside some time this weekend and finish up.  Thanks for the gentle prod.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/AndreasHegerGenomics,5,https://github.com/pysam-developers/pysam/pull/905#issuecomment-629474890,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.","Thanks, @kevinjacobs-progenity , and apologies @jmarshall , homeschooling three kids and doing the day-job at night. If you could take it further that would be great.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/905#issuecomment-633130792,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.",I am testing now.,True,{'HOORAY': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,905,2020-03-20T12:59:09Z,2020-05-23T20:28:58Z,2020-12-01T22:58:17Z,MERGED,True,38900,19324,306,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.10.x,6,[],https://github.com/pysam-developers/pysam/pull/905,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/905#issuecomment-633133775,"Import htslib 1.10.2, samtools 1.10, and bcftools 1.10.2. Rearrange how */version.h are imported (now collected by import.py into one pysam/version.h file) and apply the bam_tview_main() fix automatically in import.py.
Further update by:


Backporting samtools/samtools#1208 to prevent crashes in pysam.samtools.depth()
(or however that wrapper is called!)


Adding recent samtools/bcftools subcommands, and removing the outdated samimport
(it would be possible to implement it within pysam in terms of the corresponding view command, but this PR currently follows samtools's lead and just removes it)


Cherry-picking @mr-c's 790fd11 from PR #870 which makes pysam work against an externally supplied libhts.so, which (as of 1.10) no longer allows hidden functions like hts_useek() to be called from outwith the library.","Many thanks, @jmarshall , I will merge.",True,{'HOORAY': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,906,2020-04-01T09:07:15Z,2020-04-01T09:42:52Z,2020-04-01T09:43:02Z,MERGED,True,3,3,1,https://github.com/tmassingham-ont,Fix typos in code examples,1,[],https://github.com/pysam-developers/pysam/pull/906,https://github.com/tmassingham-ont,1,https://github.com/pysam-developers/pysam/pull/906,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,906,2020-04-01T09:07:15Z,2020-04-01T09:42:52Z,2020-04-01T09:43:02Z,MERGED,True,3,3,1,https://github.com/tmassingham-ont,Fix typos in code examples,1,[],https://github.com/pysam-developers/pysam/pull/906,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/906#issuecomment-607147698,,Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,907,2020-04-04T04:41:01Z,2020-04-06T14:43:37Z,2020-04-06T14:43:37Z,MERGED,True,0,5,1,https://github.com/nh13,Remove duplicate adjust_capq_threshold argument in the docstring,1,[],https://github.com/pysam-developers/pysam/pull/907,https://github.com/nh13,1,https://github.com/pysam-developers/pysam/pull/907,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,910,2020-04-15T10:31:07Z,2020-05-28T11:46:10Z,2020-05-28T11:46:10Z,MERGED,True,18,11,2,https://github.com/scanisius,Fix incorrect quoting in VariantFile contig records,1,[],https://github.com/pysam-developers/pysam/pull/910,https://github.com/scanisius,1,https://github.com/pysam-developers/pysam/pull/910,"Fixes #909. This pull request addresses the quoting issue when adding contigs to a VariantFile's header. In addition, I implemented a more generic solution that disables quoting of attribute values by tagging those values with unquoted_str. This may be helpful for addressing similar issues with other types of meta-information.","Fixes #909. This pull request addresses the quoting issue when adding contigs to a VariantFile's header. In addition, I implemented a more generic solution that disables quoting of attribute values by tagging those values with unquoted_str. This may be helpful for addressing similar issues with other types of meta-information.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,910,2020-04-15T10:31:07Z,2020-05-28T11:46:10Z,2020-05-28T11:46:10Z,MERGED,True,18,11,2,https://github.com/scanisius,Fix incorrect quoting in VariantFile contig records,1,[],https://github.com/pysam-developers/pysam/pull/910,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/910#issuecomment-633134525,"Fixes #909. This pull request addresses the quoting issue when adding contigs to a VariantFile's header. In addition, I implemented a more generic solution that disables quoting of attribute values by tagging those values with unquoted_str. This may be helpful for addressing similar issues with other types of meta-information.","Thanks, @scanisius ,@bioinformed , this looks good to me.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,916,2020-05-04T12:30:54Z,2020-05-12T11:19:52Z,2020-05-12T11:20:04Z,MERGED,True,127,13,2,https://github.com/jmarshall,Implement pileup() for unindexed files and/or SAM files,1,[],https://github.com/pysam-developers/pysam/pull/916,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/916,"Reorganise pileup so that it chooses between IteratorColumnRegion/ IteratorColumnAllRefs/ IteratorColumnAll primarily by has_coord (i.e., whether contig+etc/region was specified) and secondarily by has_index.
Add IteratorColumnAll() which iterates as per HTS_IDX_REST, piling up the entire file, which works without an index and for SAM files. (Unfortunately sam_itr_next() does not work for SAM files (even for HTS_IDX_REST) prior to HTSlib 1.10. Instead we follow samtools mpileup's
lead and special case this to use sam_read1() at the bottom level instead of sam_itr_next().)
The common parts of the two _setup_iterator functions could in future be refactored…","Reorganise pileup so that it chooses between IteratorColumnRegion/ IteratorColumnAllRefs/ IteratorColumnAll primarily by has_coord (i.e., whether contig+etc/region was specified) and secondarily by has_index.
Add IteratorColumnAll() which iterates as per HTS_IDX_REST, piling up the entire file, which works without an index and for SAM files. (Unfortunately sam_itr_next() does not work for SAM files (even for HTS_IDX_REST) prior to HTSlib 1.10. Instead we follow samtools mpileup's
lead and special case this to use sam_read1() at the bottom level instead of sam_itr_next().)
The common parts of the two _setup_iterator functions could in future be refactored…",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,925,2020-05-31T19:20:07Z,2020-06-07T20:00:33Z,2020-06-07T20:00:38Z,MERGED,True,25,1,2,https://github.com/AndreasHeger,{AH} bump version to 0.16.0,3,[],https://github.com/pysam-developers/pysam/pull/925,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/925,"Release candidate for v0.16.0 release - apologies for the delay.
Hi @bioinformed  and @jmarshall , is there anything you think I should wait for?
Otherwise I will update the docs and push out the release.","Release candidate for v0.16.0 release - apologies for the delay.
Hi @bioinformed  and @jmarshall , is there anything you think I should wait for?
Otherwise I will update the docs and push out the release.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,925,2020-05-31T19:20:07Z,2020-06-07T20:00:33Z,2020-06-07T20:00:38Z,MERGED,True,25,1,2,https://github.com/AndreasHeger,{AH} bump version to 0.16.0,3,[],https://github.com/pysam-developers/pysam/pull/925,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/925#issuecomment-636857796,"Release candidate for v0.16.0 release - apologies for the delay.
Hi @bioinformed  and @jmarshall , is there anything you think I should wait for?
Otherwise I will update the docs and push out the release.","I added some more release notes entries — please edit or rearrange as you see fit. I haven't done a full check that the list is now complete; in particular, there's a couple of others (e.g. #769) that are fixed too but uninteresting for the release notes.
There's a couple of issues I'm looking at as free time permits, but nothing that should be waited for. The next samtools/etc release is on the horizon but probably still measured in weeks, so shouldn't be waited for. I have some fixes for the bioconda pysam package that I must finish up testing, and if the timing was right that could be deployed at the same time as a new pysam release.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,925,2020-05-31T19:20:07Z,2020-06-07T20:00:33Z,2020-06-07T20:00:38Z,MERGED,True,25,1,2,https://github.com/AndreasHeger,{AH} bump version to 0.16.0,3,[],https://github.com/pysam-developers/pysam/pull/925,https://github.com/kevinjacobs-progenity,3,https://github.com/pysam-developers/pysam/pull/925#issuecomment-638123218,"Release candidate for v0.16.0 release - apologies for the delay.
Hi @bioinformed  and @jmarshall , is there anything you think I should wait for?
Otherwise I will update the docs and push out the release.","I've run some local tests and don't see any issues.  Thanks, @jmarshall!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,925,2020-05-31T19:20:07Z,2020-06-07T20:00:33Z,2020-06-07T20:00:38Z,MERGED,True,25,1,2,https://github.com/AndreasHeger,{AH} bump version to 0.16.0,3,[],https://github.com/pysam-developers/pysam/pull/925,https://github.com/AndreasHegerGenomics,4,https://github.com/pysam-developers/pysam/pull/925#issuecomment-640271569,"Release candidate for v0.16.0 release - apologies for the delay.
Hi @bioinformed  and @jmarshall , is there anything you think I should wait for?
Otherwise I will update the docs and push out the release.","Many thanks for this, @jmarshall , I will release tonight.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,941,2020-06-30T06:52:48Z,2021-02-04T15:14:21Z,2021-02-04T15:14:21Z,CLOSED,False,1,0,1,https://github.com/jvierstra,"Fixed ""idx_test_and_fetch"" to return proper index filename string length",1,[],https://github.com/pysam-developers/pysam/pull/941,https://github.com/jvierstra,1,https://github.com/pysam-developers/pysam/pull/941,This change makes the hts.c consistent with the official htslib codebase and fixes a bug where the locally downloaded index could not be found when accessing remote tabix files.,This change makes the hts.c consistent with the official htslib codebase and fixes a bug where the locally downloaded index could not be found when accessing remote tabix files.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,941,2020-06-30T06:52:48Z,2021-02-04T15:14:21Z,2021-02-04T15:14:21Z,CLOSED,False,1,0,1,https://github.com/jvierstra,"Fixed ""idx_test_and_fetch"" to return proper index filename string length",1,[],https://github.com/pysam-developers/pysam/pull/941,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/941#issuecomment-663426143,This change makes the hts.c consistent with the official htslib codebase and fixes a bug where the locally downloaded index could not be found when accessing remote tabix files.,"Essentially you want to backport part of samtools/htslib#1014, which landed in htslib after the 1.10.2 release.
This will be picked up in due course when pysam is updated after the next htslib/etc release, which is expected to be a matter of weeks from now. Is this something that is causing you significant difficulty and you would hope to have fixed sooner than that?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,941,2020-06-30T06:52:48Z,2021-02-04T15:14:21Z,2021-02-04T15:14:21Z,CLOSED,False,1,0,1,https://github.com/jvierstra,"Fixed ""idx_test_and_fetch"" to return proper index filename string length",1,[],https://github.com/pysam-developers/pysam/pull/941,https://github.com/jvierstra,3,https://github.com/pysam-developers/pysam/pull/941#issuecomment-665286836,This change makes the hts.c consistent with the official htslib codebase and fixes a bug where the locally downloaded index could not be found when accessing remote tabix files.,I fixed it on my fork -- no time pressure.  It's just an annoying bug that causes the filenames of the bam/tabix index files to get mangled when accessing remote files repeatedly.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,941,2020-06-30T06:52:48Z,2021-02-04T15:14:21Z,2021-02-04T15:14:21Z,CLOSED,False,1,0,1,https://github.com/jvierstra,"Fixed ""idx_test_and_fetch"" to return proper index filename string length",1,[],https://github.com/pysam-developers/pysam/pull/941,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/941#issuecomment-773383192,This change makes the hts.c consistent with the official htslib codebase and fixes a bug where the locally downloaded index could not be found when accessing remote tabix files.,"Thanks for proposing this PR. The fix has now been added to pysam by PR #962, which updated the bundled htslib/etc to 1.11 — which, in turn, include this fix.
(Now we just have to get the wheels cranking on a release containing the fix.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,960,2020-10-12T10:03:35Z,2020-11-29T20:25:53Z,2020-11-29T20:25:53Z,CLOSED,False,1,1,1,https://github.com/edwwlui,adding a new line character at the example of pysam.FastxFile to write a valid fastx file,1,[],https://github.com/pysam-developers/pysam/pull/960,https://github.com/edwwlui,1,https://github.com/pysam-developers/pysam/pull/960,otherwise quality line would be mixed up with the header line,otherwise quality line would be mixed up with the header line,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,960,2020-10-12T10:03:35Z,2020-11-29T20:25:53Z,2020-11-29T20:25:53Z,CLOSED,False,1,1,1,https://github.com/edwwlui,adding a new line character at the example of pysam.FastxFile to write a valid fastx file,1,[],https://github.com/pysam-developers/pysam/pull/960,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/960#issuecomment-735448824,otherwise quality line would be mixed up with the header line,"Thanks, I've updated this to use the same + '\n' as in your issue #865 and merged it as daee1a9.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,962,2020-10-20T10:48:10Z,2021-01-12T22:10:44Z,2021-01-12T22:11:20Z,MERGED,True,17634,5295,207,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.11,5,[],https://github.com/pysam-developers/pysam/pull/962,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/962,"Import htslib, samtools, and bcftools 1.11:


First alter tests/pysam_data/ex1.sam.gz (and files built from it) to avoid exercising a htslib-1.11 bug as described in samtools/htslib#1031 (comment); here we are testing the pysam bindings not this particular behaviour, so simply avoiding the problem is legitimate.
(You will need to regenerate these files with git clean -xf tests/pysam_data; make -C tests/pysam_data or similar before running the pysam tests with htslib-1.11.)


Import the 1.11 releases, and add the new ampliconclip and ampliconstats subcommands to pysam/samtools.py.


Backport samtools/htslib#1150 and samtools/htslib#1184 to avoid potential plugin problems.


Bump version numbers in documentation.","Import htslib, samtools, and bcftools 1.11:


First alter tests/pysam_data/ex1.sam.gz (and files built from it) to avoid exercising a htslib-1.11 bug as described in samtools/htslib#1031 (comment); here we are testing the pysam bindings not this particular behaviour, so simply avoiding the problem is legitimate.
(You will need to regenerate these files with git clean -xf tests/pysam_data; make -C tests/pysam_data or similar before running the pysam tests with htslib-1.11.)


Import the 1.11 releases, and add the new ampliconclip and ampliconstats subcommands to pysam/samtools.py.


Backport samtools/htslib#1150 and samtools/htslib#1184 to avoid potential plugin problems.


Bump version numbers in documentation.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,962,2020-10-20T10:48:10Z,2021-01-12T22:10:44Z,2021-01-12T22:11:20Z,MERGED,True,17634,5295,207,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.11,5,[],https://github.com/pysam-developers/pysam/pull/962,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/962#issuecomment-753323978,"Import htslib, samtools, and bcftools 1.11:


First alter tests/pysam_data/ex1.sam.gz (and files built from it) to avoid exercising a htslib-1.11 bug as described in samtools/htslib#1031 (comment); here we are testing the pysam bindings not this particular behaviour, so simply avoiding the problem is legitimate.
(You will need to regenerate these files with git clean -xf tests/pysam_data; make -C tests/pysam_data or similar before running the pysam tests with htslib-1.11.)


Import the 1.11 releases, and add the new ampliconclip and ampliconstats subcommands to pysam/samtools.py.


Backport samtools/htslib#1150 and samtools/htslib#1184 to avoid potential plugin problems.


Bump version numbers in documentation.","Season's greetings to all… @AndreasHeger @kevinjacobs-progenity @bioinformed — does anyone want to review this, or shall I just merge it? The update to 1.11 was straightforward (e.g., compared to the 1.10 one).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,962,2020-10-20T10:48:10Z,2021-01-12T22:10:44Z,2021-01-12T22:11:20Z,MERGED,True,17634,5295,207,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.11,5,[],https://github.com/pysam-developers/pysam/pull/962,https://github.com/kevinjacobs-progenity,3,https://github.com/pysam-developers/pysam/pull/962#issuecomment-753952542,"Import htslib, samtools, and bcftools 1.11:


First alter tests/pysam_data/ex1.sam.gz (and files built from it) to avoid exercising a htslib-1.11 bug as described in samtools/htslib#1031 (comment); here we are testing the pysam bindings not this particular behaviour, so simply avoiding the problem is legitimate.
(You will need to regenerate these files with git clean -xf tests/pysam_data; make -C tests/pysam_data or similar before running the pysam tests with htslib-1.11.)


Import the 1.11 releases, and add the new ampliconclip and ampliconstats subcommands to pysam/samtools.py.


Backport samtools/htslib#1150 and samtools/htslib#1184 to avoid potential plugin problems.


Bump version numbers in documentation.",Apologies for the delay.  This looks sensible and uncontroversial.  My quick tests passed.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,963,2020-10-30T19:31:34Z,2020-10-31T01:29:33Z,2020-10-31T01:47:15Z,MERGED,True,18,0,1,https://github.com/nh13,Expose VCF classes,1,[],https://github.com/pysam-developers/pysam/pull/963,https://github.com/nh13,1,https://github.com/pysam-developers/pysam/pull/963,"This is extremely useful and important when we want to use the typing library.  For example, I have a lot of methods that pass around a VariantRecordSample but I am unable to annotate the type since the class is not able to be referenced.","This is extremely useful and important when we want to use the typing library.  For example, I have a lot of methods that pass around a VariantRecordSample but I am unable to annotate the type since the class is not able to be referenced.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,963,2020-10-30T19:31:34Z,2020-10-31T01:29:33Z,2020-10-31T01:47:15Z,MERGED,True,18,0,1,https://github.com/nh13,Expose VCF classes,1,[],https://github.com/pysam-developers/pysam/pull/963,https://github.com/nh13,2,https://github.com/pysam-developers/pysam/pull/963#issuecomment-719755298,"This is extremely useful and important when we want to use the typing library.  For example, I have a lot of methods that pass around a VariantRecordSample but I am unable to annotate the type since the class is not able to be referenced.","@jmarshall or @AndreasHeger I'd appreciate a review, or a pointer to a maintainer to review.  I am open for reducing the # of exposed classes.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,963,2020-10-30T19:31:34Z,2020-10-31T01:29:33Z,2020-10-31T01:47:15Z,MERGED,True,18,0,1,https://github.com/nh13,Expose VCF classes,1,[],https://github.com/pysam-developers/pysam/pull/963,https://github.com/kevinjacobs-progenity,3,https://github.com/pysam-developers/pysam/pull/963#issuecomment-719758310,"This is extremely useful and important when we want to use the typing library.  For example, I have a lot of methods that pass around a VariantRecordSample but I am unable to annotate the type since the class is not able to be referenced.","I'm the original developer and fully support this change.  I've wanted to add better class documentation and static typing, but spare time is just so limited.  Thanks for your contribution and I'll commit to reviewing any future PRs.",True,{'HOORAY': ['https://github.com/nh13']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,963,2020-10-30T19:31:34Z,2020-10-31T01:29:33Z,2020-10-31T01:47:15Z,MERGED,True,18,0,1,https://github.com/nh13,Expose VCF classes,1,[],https://github.com/pysam-developers/pysam/pull/963,https://github.com/nh13,4,https://github.com/pysam-developers/pysam/pull/963#issuecomment-719866838,"This is extremely useful and important when we want to use the typing library.  For example, I have a lot of methods that pass around a VariantRecordSample but I am unable to annotate the type since the class is not able to be referenced.",Thank you! I’ll make follow on PRs once I start using the types of I see anything. Thank you for the Friday PR review!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,964,2020-11-03T09:57:18Z,,2021-10-28T21:47:55Z,OPEN,False,30,14,2,https://github.com/fo40225,[WIP] build pysam on Windows,1,[],https://github.com/pysam-developers/pysam/pull/964,https://github.com/fo40225,1,https://github.com/pysam-developers/pysam/pull/964,"dirty fix, need improvement.
The attachment wheel can be installed to Anaconda3 2020.02 without other dependencies.
pysam-0.16.0.1-cp37-cp37m-win_amd64.whl.zip
How to build the wheel with this fix:
Windows 10 (assume that the username is User)
Visual Studio 2019 16.7 (with C++ development installed)
Anaconda3 2020.02 (assume that the install path is C:\Users\User\anaconda3)
MSYS2 x86_64 20200903 (assume that the install path is C:\msys64)

edit C:\Users\User\anaconda3\Lib\distutils\cygwinccompiler.py Line 87

        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['msvcr140']
to
        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['vcruntime140']


Open Start > MSYS2 64bit > MSYS2 MSYS
execute pacman -S --needed --noconfirm libraries mingw-w64-x86_64-toolchain


copy C:\msys64\mingw64\bin\mingw32-make.exe to C:\msys64\mingw64\bin\make.exe


Open Start > MSYS2 64bit > MSYS2 MinGW 64-bit


export LIBRARY_PATH=/c/Users/User/anaconda3

export PATH=/c/Users/User/anaconda3:\
/c/Users/User/anaconda3/Library/mingw-w64/bin:\
/c/Users/User/anaconda3/Library/usr/bin:\
/c/Users/User/anaconda3/Library/bin:\
/c/Users/User/anaconda3/Scripts:$PATH

cd pysam
python setup.py bdist_wheel","dirty fix, need improvement.
The attachment wheel can be installed to Anaconda3 2020.02 without other dependencies.
pysam-0.16.0.1-cp37-cp37m-win_amd64.whl.zip
How to build the wheel with this fix:
Windows 10 (assume that the username is User)
Visual Studio 2019 16.7 (with C++ development installed)
Anaconda3 2020.02 (assume that the install path is C:\Users\User\anaconda3)
MSYS2 x86_64 20200903 (assume that the install path is C:\msys64)

edit C:\Users\User\anaconda3\Lib\distutils\cygwinccompiler.py Line 87

        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['msvcr140']
to
        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['vcruntime140']


Open Start > MSYS2 64bit > MSYS2 MSYS
execute pacman -S --needed --noconfirm libraries mingw-w64-x86_64-toolchain


copy C:\msys64\mingw64\bin\mingw32-make.exe to C:\msys64\mingw64\bin\make.exe


Open Start > MSYS2 64bit > MSYS2 MinGW 64-bit


export LIBRARY_PATH=/c/Users/User/anaconda3

export PATH=/c/Users/User/anaconda3:\
/c/Users/User/anaconda3/Library/mingw-w64/bin:\
/c/Users/User/anaconda3/Library/usr/bin:\
/c/Users/User/anaconda3/Library/bin:\
/c/Users/User/anaconda3/Scripts:$PATH

cd pysam
python setup.py bdist_wheel",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,964,2020-11-03T09:57:18Z,,2021-10-28T21:47:55Z,OPEN,False,30,14,2,https://github.com/fo40225,[WIP] build pysam on Windows,1,[],https://github.com/pysam-developers/pysam/pull/964,https://github.com/teepean,2,https://github.com/pysam-developers/pysam/pull/964#issuecomment-726344186,"dirty fix, need improvement.
The attachment wheel can be installed to Anaconda3 2020.02 without other dependencies.
pysam-0.16.0.1-cp37-cp37m-win_amd64.whl.zip
How to build the wheel with this fix:
Windows 10 (assume that the username is User)
Visual Studio 2019 16.7 (with C++ development installed)
Anaconda3 2020.02 (assume that the install path is C:\Users\User\anaconda3)
MSYS2 x86_64 20200903 (assume that the install path is C:\msys64)

edit C:\Users\User\anaconda3\Lib\distutils\cygwinccompiler.py Line 87

        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['msvcr140']
to
        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['vcruntime140']


Open Start > MSYS2 64bit > MSYS2 MSYS
execute pacman -S --needed --noconfirm libraries mingw-w64-x86_64-toolchain


copy C:\msys64\mingw64\bin\mingw32-make.exe to C:\msys64\mingw64\bin\make.exe


Open Start > MSYS2 64bit > MSYS2 MinGW 64-bit


export LIBRARY_PATH=/c/Users/User/anaconda3

export PATH=/c/Users/User/anaconda3:\
/c/Users/User/anaconda3/Library/mingw-w64/bin:\
/c/Users/User/anaconda3/Library/usr/bin:\
/c/Users/User/anaconda3/Library/bin:\
/c/Users/User/anaconda3/Scripts:$PATH

cd pysam
python setup.py bdist_wheel","Couple of problems:
libvcruntime140.a is missing when following above instructions.
Fix:
gendef vcruntime140.dll dlltool -D vcruntime140.dll -d vcruntime140.def -l libvcruntime140.a
libws2_32.a cannot be found unless this line in setup.py:
internal_htslib_libraries.append(""ws2_32"")
is changed to this:
external_htslib_objects.append(""C:/msys64/mingw64/x86_64-w64-mingw32/lib/libws2_32.a"".format(lib))",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,964,2020-11-03T09:57:18Z,,2021-10-28T21:47:55Z,OPEN,False,30,14,2,https://github.com/fo40225,[WIP] build pysam on Windows,1,[],https://github.com/pysam-developers/pysam/pull/964,https://github.com/KhanhLPBao,3,https://github.com/pysam-developers/pysam/pull/964#issuecomment-818565425,"dirty fix, need improvement.
The attachment wheel can be installed to Anaconda3 2020.02 without other dependencies.
pysam-0.16.0.1-cp37-cp37m-win_amd64.whl.zip
How to build the wheel with this fix:
Windows 10 (assume that the username is User)
Visual Studio 2019 16.7 (with C++ development installed)
Anaconda3 2020.02 (assume that the install path is C:\Users\User\anaconda3)
MSYS2 x86_64 20200903 (assume that the install path is C:\msys64)

edit C:\Users\User\anaconda3\Lib\distutils\cygwinccompiler.py Line 87

        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['msvcr140']
to
        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['vcruntime140']


Open Start > MSYS2 64bit > MSYS2 MSYS
execute pacman -S --needed --noconfirm libraries mingw-w64-x86_64-toolchain


copy C:\msys64\mingw64\bin\mingw32-make.exe to C:\msys64\mingw64\bin\make.exe


Open Start > MSYS2 64bit > MSYS2 MinGW 64-bit


export LIBRARY_PATH=/c/Users/User/anaconda3

export PATH=/c/Users/User/anaconda3:\
/c/Users/User/anaconda3/Library/mingw-w64/bin:\
/c/Users/User/anaconda3/Library/usr/bin:\
/c/Users/User/anaconda3/Library/bin:\
/c/Users/User/anaconda3/Scripts:$PATH

cd pysam
python setup.py bdist_wheel","Hi, I just follow your instruction but the final step there is no pysam folder. Also my Anaconda3 folder does not have bin/usr folder too. What should I do?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,964,2020-11-03T09:57:18Z,,2021-10-28T21:47:55Z,OPEN,False,30,14,2,https://github.com/fo40225,[WIP] build pysam on Windows,1,[],https://github.com/pysam-developers/pysam/pull/964,https://github.com/fo40225,4,https://github.com/pysam-developers/pysam/pull/964#issuecomment-818589877,"dirty fix, need improvement.
The attachment wheel can be installed to Anaconda3 2020.02 without other dependencies.
pysam-0.16.0.1-cp37-cp37m-win_amd64.whl.zip
How to build the wheel with this fix:
Windows 10 (assume that the username is User)
Visual Studio 2019 16.7 (with C++ development installed)
Anaconda3 2020.02 (assume that the install path is C:\Users\User\anaconda3)
MSYS2 x86_64 20200903 (assume that the install path is C:\msys64)

edit C:\Users\User\anaconda3\Lib\distutils\cygwinccompiler.py Line 87

        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['msvcr140']
to
        elif int(msc_ver) >= 1900:
            # VS2015 / MSVC 14.0
            return ['vcruntime140']


Open Start > MSYS2 64bit > MSYS2 MSYS
execute pacman -S --needed --noconfirm libraries mingw-w64-x86_64-toolchain


copy C:\msys64\mingw64\bin\mingw32-make.exe to C:\msys64\mingw64\bin\make.exe


Open Start > MSYS2 64bit > MSYS2 MinGW 64-bit


export LIBRARY_PATH=/c/Users/User/anaconda3

export PATH=/c/Users/User/anaconda3:\
/c/Users/User/anaconda3/Library/mingw-w64/bin:\
/c/Users/User/anaconda3/Library/usr/bin:\
/c/Users/User/anaconda3/Library/bin:\
/c/Users/User/anaconda3/Scripts:$PATH

cd pysam
python setup.py bdist_wheel",pysam folder is the source code folder.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,977,2020-12-18T20:23:08Z,2020-12-18T20:56:34Z,2020-12-18T20:56:34Z,CLOSED,False,1,1,1,https://github.com/timgates42,"docs: fix simple typo, requring -> requiring",1,[],https://github.com/pysam-developers/pysam/pull/977,https://github.com/timgates42,1,https://github.com/pysam-developers/pysam/pull/977,"There is a small typo in htslib/cram/mFILE.c.
Should read requiring rather than requring.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in htslib/cram/mFILE.c.
Should read requiring rather than requring.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,977,2020-12-18T20:23:08Z,2020-12-18T20:56:34Z,2020-12-18T20:56:34Z,CLOSED,False,1,1,1,https://github.com/timgates42,"docs: fix simple typo, requring -> requiring",1,[],https://github.com/pysam-developers/pysam/pull/977,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/977#issuecomment-748314971,"There is a small typo in htslib/cram/mFILE.c.
Should read requiring rather than requring.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","Code in htslib/… is imported from htslib, so it's better not to cause the copy here to diverge. This particular typo has already been fixed upstream and will be corrected when PR #962 is merged.
It would be worth correcting spelling in the top-level files and pysam/…, but please batch any corrections up rather than presenting them as individual PRs.",True,{'THUMBS_UP': ['https://github.com/timgates42']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,978,2020-12-31T00:12:34Z,2021-07-30T19:18:11Z,2021-07-30T19:18:11Z,CLOSED,False,1,2,1,https://github.com/homonecloco,Finishes commenting libctabixproxies,1,[],https://github.com/pysam-developers/pysam/pull/978,https://github.com/homonecloco,1,https://github.com/pysam-developers/pysam/pull/978,"I am having issues when running under Python-3.9 installed on MacOS Big Sur using homebrew.  I believe this is related to the issue  #443 . I patched this on my local computer by removing the mentions to libctabixproxies in the init.py that remain.
The error I was getting was the following:
  File ""/usr/local/lib/python3.9/site-packages/pysam/__init__.py"", line 43, in <module>
    libctabixproxies.__all__ +\
NameError: name 'libctabixproxies' is not defined","I am having issues when running under Python-3.9 installed on MacOS Big Sur using homebrew.  I believe this is related to the issue  #443 . I patched this on my local computer by removing the mentions to libctabixproxies in the init.py that remain.
The error I was getting was the following:
  File ""/usr/local/lib/python3.9/site-packages/pysam/__init__.py"", line 43, in <module>
    libctabixproxies.__all__ +\
NameError: name 'libctabixproxies' is not defined",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,978,2020-12-31T00:12:34Z,2021-07-30T19:18:11Z,2021-07-30T19:18:11Z,CLOSED,False,1,2,1,https://github.com/homonecloco,Finishes commenting libctabixproxies,1,[],https://github.com/pysam-developers/pysam/pull/978,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/978#issuecomment-786918916,"I am having issues when running under Python-3.9 installed on MacOS Big Sur using homebrew.  I believe this is related to the issue  #443 . I patched this on my local computer by removing the mentions to libctabixproxies in the init.py that remain.
The error I was getting was the following:
  File ""/usr/local/lib/python3.9/site-packages/pysam/__init__.py"", line 43, in <module>
    libctabixproxies.__all__ +\
NameError: name 'libctabixproxies' is not defined","I can't reproduce this problem (at least, not using a development build). How do you have pysam installed — via a wheel or other package perhaps?
In any case, there were three commits during #443 that affected this:

44ebba4 added the imports and added libctabixproxies.__all__ to __all__
6adb0cd commented out the imports
ba80ddd added __all__ to libctabixproxies.pyx, which did not previously define libctabixproxies.__all__

Thus the combination of __init__.py imports and __all__ defined has not been tried.
So I suspect that, now that libctabixproxies.pyx defines __all__, instead of removing the remaining references, this could also be fixed by uncommenting the imports. Thus:
--- a/pysam/__init__.py
+++ b/pysam/__init__.py
@@ -11,8 +11,8 @@ import pysam.libcfaidx as libcfaidx
 from pysam.libcfaidx import *
 import pysam.libctabix as libctabix
 from pysam.libctabix import *
-# import pysam.libctabixproxies as libctabixproxies
-# from pysam.libctabixproxies import *
+import pysam.libctabixproxies as libctabixproxies
+from pysam.libctabixproxies import *
 import pysam.libcsamfile as libcsamfile
 from pysam.libcsamfile import *
 import pysam.libcalignmentfile as libcalignmentfile
Could you try with that change instead of removing the libctabixproxies.__all__ +\ line? Hopefully that will allow import pysam without any errors too.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,978,2020-12-31T00:12:34Z,2021-07-30T19:18:11Z,2021-07-30T19:18:11Z,CLOSED,False,1,2,1,https://github.com/homonecloco,Finishes commenting libctabixproxies,1,[],https://github.com/pysam-developers/pysam/pull/978,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/978#issuecomment-890102333,"I am having issues when running under Python-3.9 installed on MacOS Big Sur using homebrew.  I believe this is related to the issue  #443 . I patched this on my local computer by removing the mentions to libctabixproxies in the init.py that remain.
The error I was getting was the following:
  File ""/usr/local/lib/python3.9/site-packages/pysam/__init__.py"", line 43, in <module>
    libctabixproxies.__all__ +\
NameError: name 'libctabixproxies' is not defined","I have applied the uncommenting suggested in my previous comment to master. Please try current master in your environment.
Superseded by 247415b.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/arogozhnikov,1,https://github.com/pysam-developers/pysam/pull/981,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.","Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/arogozhnikov,2,https://github.com/pysam-developers/pysam/pull/981#issuecomment-758835834,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.","CI passed
https://travis-ci.org/github/pysam-developers/pysam/builds/754082159",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/arogozhnikov,3,https://github.com/pysam-developers/pysam/pull/981#issuecomment-764905790,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.",ping,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/981#issuecomment-786964780,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.","Have you tried doing this without your patch? I believe the os.fsencode call a few lines below your suggested patch already has the same effect (since PR #392), and e.g. fn = Path(""foo.bam""); f = pysam.AlignmentFile(fn, ""r"") already works for me.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/arogozhnikov,5,https://github.com/pysam-developers/pysam/pull/981#issuecomment-787016665,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.","@jmarshall very good point. I didn't notice fsencode supports that.
For some reason that did not work for me when I wrote this patch, but now it works as it should.
Could be that I used python 3.5 where fsencode did not support Path objects? Unlikely, all my code has f-strings.
I'll have a bit more testing, will close PR if issue won't appear again.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,981,2021-01-12T08:08:33Z,2021-04-08T06:56:22Z,2021-04-08T06:56:22Z,CLOSED,False,7,0,1,https://github.com/arogozhnikov,Add support for pathlib.Path as filename arguments ,2,[],https://github.com/pysam-developers/pysam/pull/981,https://github.com/arogozhnikov,6,https://github.com/pysam-developers/pysam/pull/981#issuecomment-815502242,"Context:

python 3 has two ways to pass paths: str/bytes and pathlib.Path (very convenient BTW)
most functions and libs (e.g. open, pandas) handle pathlib.Path very well, and can use for filenames instead of strs. However that doesn't work for e.g. pysam.AlignmentFile and I keep forgetting this. This small change fixes the problem.","seems problem is solved, thanks again for pointing @jmarshall",True,{'THUMBS_UP': ['https://github.com/jmarshall']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,997,2021-03-15T01:48:53Z,2021-03-15T10:59:09Z,2021-03-15T15:42:42Z,MERGED,True,1,1,1,https://github.com/sampearl,Missing backtick,1,[],https://github.com/pysam-developers/pysam/pull/997,https://github.com/sampearl,1,https://github.com/pysam-developers/pysam/pull/997,"Missing 1 backtick, which means the existing backticks appear in the documentation instead of showing the snippet as code.","Missing 1 backtick, which means the existing backticks appear in the documentation instead of showing the snippet as code.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,997,2021-03-15T01:48:53Z,2021-03-15T10:59:09Z,2021-03-15T15:42:42Z,MERGED,True,1,1,1,https://github.com/sampearl,Missing backtick,1,[],https://github.com/pysam-developers/pysam/pull/997,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/997#issuecomment-799325673,"Missing 1 backtick, which means the existing backticks appear in the documentation instead of showing the snippet as code.",Thanks.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,999,2021-03-24T00:02:21Z,2021-03-24T00:09:42Z,2021-03-24T00:09:42Z,MERGED,True,1,1,1,https://github.com/SHuang-Broad,Fix doc for AlignmentFile.get_reference_length(),1,[],https://github.com/pysam-developers/pysam/pull/999,https://github.com/SHuang-Broad,1,https://github.com/pysam-developers/pysam/pull/999,trivia,trivia,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1001,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-807185748,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","Doing this via a global and getter/setter is a bit limiting.
For example, some might want to open two files simultaneously: a VCFv4.3 file to be read as UTF-8, and a CLC Workbench-written VCFv4.2 file to be read as Latin-1. So there would be some advantage in making this a per-file setting, and propagating the setting down through all the subroutines so it can be specified in each force_str/etc call… Not Fun. (But it might not be too bad if most of the functions that call force_str/etc are member methods of VariantFile and other file classes.)
Implementing it via a single pysam global is a lot simpler. Hopefully it provides 90% of the needed functionality…
Even if in future this is expanded to have a per-file setting, the global will still be useful as a way of controlling the default.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-808171809,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.",Renamed the functions to get/set_encoding_error_handler() as that's clearer and follows the precedent of some existing get/set_encoding() functions.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-808182412,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","My thinking on the eventual flexible API for all this is that file classes like VariantFile (or the base HTSFile, good point @kevinjacobs-progenity) should have optional constructor arguments and/or getter/setters:
encoding=None
encoding_error_handler=None
that, if set, would override the Pysam default set by
pysam.set_encoding(…)
pysam.set_encoding_error_handler(…)
and if you didn't use those either, the default Pysam defaults would be utf-8 and strict.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,5,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-808189122,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","Do we like the encoding_error_handler terminology btw? I guess encoding_errors/ get_encoding_errors/ set_encoding_errors would be closer to the underlying Python encoding + errors arguments to decode(), but outside of that context I think making it clear that this is a handler (not e.g. a list of the actual errors encountered or something) is useful.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/kevinjacobs-progenity,6,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-808229334,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","I am happy with encoding_error_handler, since pysam's API is complex and has trended toward using longer and more explicit attribute and argument names.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,7,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-834364694,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","Thanks for reviewing, @kevinjacobs-progenity. I've finally got back to this, and I think made all the changes we discussed:


Reworked the optional argument handling so as to be ready for settings coming from the HTSFile in future;


Turns out this was failing on Python 2.7 because reusing force_str() wasn't really the right thing to do. Instead I've added another function that always decodes UTF-8, even on Python 2 — which is appropriate for these VCF fields.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/kevinjacobs-progenity,8,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-834373573,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","@jmarshall : Many thanks!  I'll review again over the weekend.
On a related note, I've had several user requests to add automatic URL encoding and decoding to escape characters in INFO and GT string values.  It seems like it would be relatively easy to do this, building on this work.  Does this make sense to do here or should we wait until htslib adds this functionality?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,9,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-834385689,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","Thanks (in advance). I think this is probably ready for merging, so feel free to do so if you agree. Or there might be another round of tweaking needed.

As far as I'm aware, HTSlib hasn't done anything to facilitate percent-encoding/-decoding these fields. IMHO it probably should. It would be good to raise an issue over there to get this on their radar (though I see you somewhat already did in samtools/htslib#333!).
It's probably easier to do in Python than C, so it would also probably make sense to do it here (and thus figure out the desirable pysam interface) and later replace the insides of a Python implementation with a call to an htslib fuction as and when it becomes available.
So I guess either way is good IMHO.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/kevinjacobs-progenity,10,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-834402651,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.",Arg.  I completely forgot I had a working branch for HTSlib with percent escaping of string values.  I was changing jobs and I must be getting a bit senile.  I'll see how much of that original work is still relevant and decide how to proceed.,True,{'LAUGH': ['https://github.com/jmarshall']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/olingerc,11,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-851994121,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.",Sorry to bump this again. Do you have any news about this? I also haven't found any new release since 0.16.0.1. Is master safe to use?,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/kevinjacobs-progenity,12,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-852017117,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","The main branch should be safe to use.  And I've lightly tested this branch.  However, life is currently complicated and I have not made substantive progress on implementing finer-grained control of encoding.  I'll set aside time in the next few days to give this PR a more thorough review so that it can be merged.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/jmarshall,13,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-874782430,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","I think this branch is itself feature-complete and is a good base for future work on finer-grained control of encoding. And it has demonstrated test passes with all Python versions.
There's only so many balls I want to have in the air at once, and this is now holding up other improvements. @kevinjacobs-progenity: I'll aim to merge this at the end of the week if there are no objections (and if nobody else has already merged it by then).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1001,2021-03-25T17:17:28Z,2021-07-06T14:11:16Z,2021-07-06T14:11:22Z,MERGED,True,60,20,3,https://github.com/jmarshall,Add get/set_encoding_error_handler() to control UTF-8 conversion,2,[],https://github.com/pysam-developers/pysam/pull/1001,https://github.com/kevinjacobs-progenity,14,https://github.com/pysam-developers/pysam/pull/1001#issuecomment-874783981,"Python has impressively flexible facilities to control how the decode() function deals with unexpected input.
The easiest way to enable scripts to control pysam's use of the decode() function is to expose this as a global variable via getter/setter methods, similarly to the existing get_verbosity()/set_verbosity().
For convenience, also define an error handler that simply interprets invalid/unexpected UTF-8 bytes as ISO-8859-1 (Latin-1) characters. Make it available via set_encoding_error_handler('pysam.latin1replace').
Issue #998 is about pysam's basic UTF-8 parsing refusing to parse fields containing Latin-1-encoded accented letters. This PR would allow scripts to parse such fields by adding:
pysam.set_encoding_error_handler('pysam.latin1replace')
before calling functions that decode such fields. Other built-in standard error handlers such as 'replace' and 'backslashreplace' may also be of interest.
Parsing as UTF-8 and interpreting invalid input as Latin-1 is problematic because two or more adjacent Latin-1 characters can be misinterpreted as a validly UTF-8-encoded unrelated character. (Probably no such Latin-1 strings are intelligible in French or any other language.) Hence it may be better to also expose the encoding used via global getter/setters so that scripts could instead write
pysam.set_encoding('latin-1')
to specify that their VCF v4.2 files should NOT be interpreted as UTF-8 but purely as Latin-1.
I have not added such functions because force_str() et al's optional arguments are currently buggy — they supply the original value of TEXT_ENCODING (UTF-8), not the current value, so there's little point in adding functions to change the value of TEXT_ENCODING. But I would be happy to rework the optional encoding= arguments and add such a getter/setter (probably IMHO in addition to the error handler one) if other maintainers prefer.","I've done some more light testing, reviewed the code, and am fine with merging.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1007,2021-04-22T16:28:34Z,2021-04-22T19:10:18Z,2021-04-23T14:24:10Z,MERGED,True,0,18,1,https://github.com/marcelm,Remove duplicate cdefs of PileupRead/-Column,1,[],https://github.com/pysam-developers/pysam/pull/1007,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1007,"The definitions in pysam/libcalignedsegment.pxd/.pyx seem to be the ones that are currently used, while these apparently are leftovers from some refactoring.","The definitions in pysam/libcalignedsegment.pxd/.pyx seem to be the ones that are currently used, while these apparently are leftovers from some refactoring.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1007,2021-04-22T16:28:34Z,2021-04-22T19:10:18Z,2021-04-23T14:24:10Z,MERGED,True,0,18,1,https://github.com/marcelm,Remove duplicate cdefs of PileupRead/-Column,1,[],https://github.com/pysam-developers/pysam/pull/1007,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1007#issuecomment-825116151,"The definitions in pysam/libcalignedsegment.pxd/.pyx seem to be the ones that are currently used, while these apparently are leftovers from some refactoring.","Thanks. Yes, looks like they were left behind after 4edcc0a.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1008,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).",True,{'HEART': ['https://github.com/mr-c']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-825682815,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","Having type hints where appropriate would be good.
Is there a particular reason why you have used separate stub files rather than inline type annotations (which I believe can be used in Cython)?
Having these hints in separate files would increase the maintenance burden, as they would easily get out of sync with the definitions in the main .pyx files. So IMHO for something being merged into the main pysam source project, it would be preferable to use type annotations in the main source files instead.
That would of course require dropping Python 2.7 support. That is IMHO long overdue, but it is a decision for the primary pysam maintainers (cc @AndreasHeger @kevinjacobs-progenity).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/kevinjacobs-progenity,3,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-825695103,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","I'm fine with dropping Python 2 support for future releases.  There are many advantages to doing so and many other commonly used bioinformatics libraries have done this.  All of my codebases have migrated to Python 3.7+ and use optional typing extensively, so I have plenty of test cases.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,4,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-825738003,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","Is there a particular reason why you have used separate stub files rather than inline type annotations (which I believe can be used in Cython)?

Using inline type annotations would be awesome, but if I’m not mistaken, it won’t actually work. Mypy can only parse annotations from a .py or .pyi file (see python/mypy#8575 (comment)). See also python/mypy#8631. (But stubgen, on the other hand, does work somewhat – I ran it on pysam to get started with the annotations).
Also, if you define def f(int x): pass in a .pyx file, Cython generates code that checks at runtime whether the passed x object is an int. If you write this as def f(x: int): pass, then this code is not generated. So the runtime behavior would change. I think PEP 484 annotations are most useful (or perhaps only meant to be used) in pure Python mode.
Another problem is that I wouldn’t know how to annotate some items, for example properties.
Separate .pyi files have an upside as well: They allow you to present the API that you want people to use. I omitted all the deprecated functions and parameters in this PR.
Perhaps keeping the .pyx and .pyi files in sync can be solved with some additional tests.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,5,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-869700914,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","I’ve finished what I think I can do before going on vacation soon.
This PR now covers about 80% of the API. I initially wanted to gradually add type hints, as the Mypy authors recommend, but that doesn’t work so well here because all the Cython source code is invisible to Mypy. So whenever you use anything for which no .pyi file exists, you get ""doesn’t have attribute/module xyz"" errors.
Note that the first commit in this PR is the same as PR #1009 (adding a GitHub Actions workflow). My suggestion would be to merge #1009 or some version of it separately because it’s not strictly what this PR is about.
Testing the type hints is currently done by running mypy pysam/. This only checks internal consistency, and should be extended at some point to also cover the tests/ directory.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,6,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-870099427,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).",See also the test results,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,7,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-980806184,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).","I’ve now annotated the remaining files. I added an empty libcvcf.pyi as it appears that libcvcf.pyx is outdated. Or is it?
The only remaining problem that I get now when running mypy pysam/ is this:
pysam/__init__.py:26: error: Incompatible import of ""TabixIterator"" (imported name has type ""Type[pysam.libcbcf.TabixIterator]"", local name has type ""Type[pysam.libctabix.TabixIterator]"")

And this is potentially the first ""bug"" that Mypy has found: There’s indeed a TabixIterator both in libcbcf.pyx and libctabix.pyx. I’m not sure what to do, they cannot both be exposed beneath the pysam. namespace.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/marcelm,8,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-982713180,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).",I took the liberty of publishing a pysam-stubs package to PyPI for those who want to easily test the type annotations.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1008,2021-04-22T16:37:54Z,2022-03-24T19:54:17Z,2022-03-24T20:03:47Z,MERGED,True,1269,20,19,https://github.com/marcelm,Start adding type hints,26,[],https://github.com/pysam-developers/pysam/pull/1008,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/1008#issuecomment-1078078266,"This is an attempt to add a couple of type hints to pysam. I’ve started with libcalignedsegment.pyi. I’m not finished, but need to stop for the moment.
I think these annotations would already be useful in the current state, but for this to be merged, I think we would at least need to adjust the test scripts so that they run mypy (it fails at the moment).",Thanks! I will work on removing python2 next.,True,{'HOORAY': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1009,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-825651961,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)",Results: https://github.com/marcelm/pysam/actions/runs/777795502,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-825675808,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","Travis was deactivated for pysam a few months ago, presumably because it (at least, pysam's existing .org configuration) is basically unusable these days. IMHO GitHub Actions is the right place to re-establish CI for pysam, so thanks for getting this started.
I've pushed a better fix for the --no-PG problem to master, so please rebase your GH Actions commit on top of that.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,4,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-826352388,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)",I have rebased the PR. Results: https://github.com/marcelm/pysam/runs/2432080879,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,5,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-904561288,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)",Just a friendly reminder that this PR is ready for review/merging.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,6,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-923770372,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","The old logs expired, so I’ve rebase this once more. Results are at https://github.com/marcelm/pysam/actions/runs/1256870418",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925009357,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","Many thanks, @marcelm .
I will merge.
Apologies, @jmarshall , for being AWOL for so long. I will push out a release ASAP. Sorry, to ask again, anything I should wait for?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/jmarshall,8,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925010138,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)",Wait a minute! I've got this one in hand,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/AndreasHeger,9,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925011373,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","Typically me, too trigger-happy, sorry!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/jmarshall,10,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925018459,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","It's fine, I'll merge your merge of Marcel's workflow into the ones I've been working on in a slightly different way now. It's my fault for not having commented on this PR for too long.
It's great to have you back on deck, @AndreasHeger. I'll go through my list of things in-progress and see what's important. First off — it would be good to have your comments on #1042.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,11,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925263750,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","Thanks for merging and great to see the project moving forward again.
@jmarshall It’s a bit unfortunate how this was handled. If I understand the Git history correctly, you wrote your version of the CI workflow three days after I had opened this PR back in April. I imagine that especially the time after my comment in August (""friendly reminder"") would have been a good opportunity to comment here and tell me that you were instead working on your own version. You did copy my version into yours just now, but note that git log ci.yaml shows your name only, so the fact that I contributed is lost. (This is ok, please don’t change anything retroactively.) Avoiding this type of situation in the future would be good for keeping morale up in collaboraters!
No hard feelings, I’m grateful for all the work you - and everyone else - does on this project!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/jmarshall,12,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925288813,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","As it happens, I first checked in a version of a GH Actions workflow that I had then been working on for some weeks a few days after yours. As an aside, if you would like to understand the recent Git history more fully, you should look at the CI-related commits with git log --format=fuller so you see all the timestamps.
I take authorship attribution very seriously, and I am sorry that you feel your contribution has been hidden. It is visible with git log .github/workflows. As it happens, I had cherry-picked your version into my branch precisely so that your Author: entry would be preserved in that commit on the eventual final filename — but that version of the work was overtaken by events today.
That's it for my pysam-related morale for now. I have plenty of other projects that have been languishing while I have been focussing my time available for open source volunteer activities on pysam in recent weeks/months.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/marcelm,13,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925305085,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","As it happens, I had cherry-picked your version into my branch precisely so that your Author: entry would be preserved in that commit on the eventual final filename — but that version of the work was overtaken by events today.

Thank you, of course I couldn’t know that.
I’m sorry I made you upset.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1009,2021-04-23T13:16:26Z,2021-09-22T14:55:27Z,2021-09-23T11:44:50Z,MERGED,True,38,0,1,https://github.com/marcelm,Add GitHub Actions workflow,1,[],https://github.com/pysam-developers/pysam/pull/1009,https://github.com/AndreasHeger,14,https://github.com/pysam-developers/pysam/pull/1009#issuecomment-925735235,"I don’t know if there have been discussions on this, but https://travis-ci.org/ is apparently going away (and it doesn’t seem to be setup correctly anyway at the moment because I don’t see tests running on the two PRs I have submitted), so I suggest that it makes sense to switch to GitHub Actions for testing.
This PR adds an initial workflow. I started to move over more checks from run_tests_travis.sh, but then realized that the runtime becomes quite high, and I couldn’t get everything to work, so I thought it’s better to start small.
If there are no objections and if I have time, I would work more on this and move everything into this workflow. Adding deployment (cibuildwheel etc.) should also not be too hard hopefully.
The change in the Makefile was necessary because $(shell samtools view) resulted in an empty string. (samtools view always printed the error message [main_samview] fail to read the header from ""-"".)","Thank you both, @jmarshall and @marcelm, both for your help and many contributions to pysam.
In this specific instance, the blame really lies with me pressing the merge button before understanding all the details.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1010,2021-04-25T14:40:03Z,2021-04-25T16:58:28Z,2021-04-26T19:01:47Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix typo,1,[],https://github.com/pysam-developers/pysam/pull/1010,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1010,"closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?","closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1010,2021-04-25T14:40:03Z,2021-04-25T16:58:28Z,2021-04-26T19:01:47Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix typo,1,[],https://github.com/pysam-developers/pysam/pull/1010,https://github.com/kevinjacobs-progenity,2,https://github.com/pysam-developers/pysam/pull/1010#issuecomment-826355175,"closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?",Small is fine.  Thanks!,True,{'THUMBS_UP': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1010,2021-04-25T14:40:03Z,2021-04-25T16:58:28Z,2021-04-26T19:01:47Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix typo,1,[],https://github.com/pysam-developers/pysam/pull/1010,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1010#issuecomment-826669152,"closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?","[Personally I would prefer minor things like this to be batched up a bit. That reduces the overall effort of reviewing and merging, and there's little point in making two commits for every typo fix.]
However there's at least three problems with this code:

The typo in def __init__(…, closedf=True):, which has now been corrected
However __init__ ignores any value provided anyway, as it always passes True to _open
But _open ignores its closefd parameter anyway

There are no tests, so it's difficult to guess what closefd was intended to mean. Perhaps something about automatically closing the incoming fd in the case that name is an integer? (Or mostly equivalently, not dupping it?)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1010,2021-04-25T14:40:03Z,2021-04-25T16:58:28Z,2021-04-26T19:01:47Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix typo,1,[],https://github.com/pysam-developers/pysam/pull/1010,https://github.com/kevinjacobs-progenity,4,https://github.com/pysam-developers/pysam/pull/1010#issuecomment-826985333,"closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?",Sorry-- I was too quick on the trigger for merging.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1010,2021-04-25T14:40:03Z,2021-04-25T16:58:28Z,2021-04-26T19:01:47Z,MERGED,True,1,1,1,https://github.com/marcelm,Fix typo,1,[],https://github.com/pysam-developers/pysam/pull/1010,https://github.com/marcelm,5,https://github.com/pysam-developers/pysam/pull/1010#issuecomment-827073526,"closedf should be closefd
I’m mainly working on the type annotations. Is it ok to submit tiny PRs like this for anything unrelated that I find along the way? Or would you like bigger PRs?","Sorry, my attention appears to have been only on function headers at the time.
The __init__ function hasn’t changed since the HFile wrapper was added in 4321aeb. @kevinjacobs-progenity perhaps you remember why you added that parameter?
Also, (perhaps for the same underlying reason) I believe this dup call is never executed because self.fp should always be NULL:

  
    
      pysam/pysam/libchtslib.pyx
    
    
        Lines 92 to 93
      in
      15a6277
    
  
  
    

        
          
           if self.fp != NULL: 
        

        
          
               name = dup(name) 
        
    
  




Personally I would prefer minor things like this to be batched up a bit. That reduces the overall effort of reviewing and merging, and there's little point in making two commits for every typo fix.

Since you two answered differently, I now feel free to send in PRs of any size I like! 😄",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1011,2021-04-25T21:43:57Z,2021-04-26T09:36:54Z,2021-04-26T13:37:23Z,MERGED,True,0,16,1,https://github.com/marcelm,Remove unused constant from setup.py,1,[],https://github.com/pysam-developers/pysam/pull/1011,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1011,This now appears to live in devtools/import.py,This now appears to live in devtools/import.py,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1012,2021-04-26T13:49:21Z,2021-09-08T16:49:42Z,2021-09-09T10:21:06Z,MERGED,True,11,3,1,https://github.com/marcelm,"Ensure ""python setup.py sdist"" cythonizes extension modules",1,[],https://github.com/pysam-developers/pysam/pull/1012,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1012,"I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.","I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1012,2021-04-26T13:49:21Z,2021-09-08T16:49:42Z,2021-09-09T10:21:06Z,MERGED,True,11,3,1,https://github.com/marcelm,"Ensure ""python setup.py sdist"" cythonizes extension modules",1,[],https://github.com/pysam-developers/pysam/pull/1012,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1012#issuecomment-826887626,"I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.","Something like this is probably a good idea if it is desired that sdist produces a tarball containing Cython pysam/*.c files.
However I'm not convinced this is the appropriate approach for the basic CI. IMHO the natural CI to run on pushes to master and PRs is a matrix of pythonX.Y setup.py build && pytest jobs.
Producing a tarball and ensuring that that builds well is a different category of CI; one that would naturally run primarily when tags are created.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1012,2021-04-26T13:49:21Z,2021-09-08T16:49:42Z,2021-09-09T10:21:06Z,MERGED,True,11,3,1,https://github.com/marcelm,"Ensure ""python setup.py sdist"" cythonizes extension modules",1,[],https://github.com/pysam-developers/pysam/pull/1012,https://github.com/marcelm,3,https://github.com/pysam-developers/pysam/pull/1012#issuecomment-826904233,"I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.","Sure, let’s discuss what to do in which CI job separately. Even if this is only used in a ""deploy"" job (or just interactively on the command line for that matter), it improves the situation.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1012,2021-04-26T13:49:21Z,2021-09-08T16:49:42Z,2021-09-09T10:21:06Z,MERGED,True,11,3,1,https://github.com/marcelm,"Ensure ""python setup.py sdist"" cythonizes extension modules",1,[],https://github.com/pysam-developers/pysam/pull/1012,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1012#issuecomment-915403831,"I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.","It took me a while to understand what was going on here and why it's good to unconditionally rerun the cythonisation during sdist, but the penny finally dropped. By then I had simplified it to not need the global extensions variable. Thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1012,2021-04-26T13:49:21Z,2021-09-08T16:49:42Z,2021-09-09T10:21:06Z,MERGED,True,11,3,1,https://github.com/marcelm,"Ensure ""python setup.py sdist"" cythonizes extension modules",1,[],https://github.com/pysam-developers/pysam/pull/1012,https://github.com/marcelm,5,https://github.com/pysam-developers/pysam/pull/1012#issuecomment-915958543,"I saw that it is currently necessary to run python setup.py build before sdist to ensure that the generated tarball contains cythonized sources. This means that generating the tarball creates a couple of minutes.
With this PR, python setup.py sdist will cythonize the sources before bundling the tarball. This takes only a couple of seconds.
My intention is to use this in the CI tests: It would be nice to generate the tarball in a separate job (with the development dependencies installed), and then start a new job to install it (without developer dependencies installed). This more closely resembles what happens on a user’s system.
If Cython isn’t installed, python setup.py sdist will raise an ImportError when running python setup.py sdist. IMO the resulting error message (ModuleNotFoundError: No module named 'Cython') is clear enough, but I could add a if HAVE_CYTHON guard if you think this would be better.","Thanks for merging, and avoiding the global is much better :-).",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1025,2021-06-28T12:31:03Z,2021-06-28T14:33:35Z,2021-09-10T11:38:31Z,MERGED,True,0,2,2,https://github.com/marcelm,Remove pysam.py as it doesn’t fulfill its purpose,1,[],https://github.com/pysam-developers/pysam/pull/1025,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1025,"When running python3 -c ""import pysam"" in the repository root, ""pysam.py"" is actually ignored because pysam/__init__.py exists and is used instead.
I think the risk of a regular user trying to use pysam from a Git clone are quite low nowadays. Also, running python3 setup.py build_ext -i actually allows import pysam from the repo root to work.","When running python3 -c ""import pysam"" in the repository root, ""pysam.py"" is actually ignored because pysam/__init__.py exists and is used instead.
I think the risk of a regular user trying to use pysam from a Git clone are quite low nowadays. Also, running python3 setup.py build_ext -i actually allows import pysam from the repo root to work.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1025,2021-06-28T12:31:03Z,2021-06-28T14:33:35Z,2021-09-10T11:38:31Z,MERGED,True,0,2,2,https://github.com/marcelm,Remove pysam.py as it doesn’t fulfill its purpose,1,[],https://github.com/pysam-developers/pysam/pull/1025,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1025#issuecomment-869739001,"When running python3 -c ""import pysam"" in the repository root, ""pysam.py"" is actually ignored because pysam/__init__.py exists and is used instead.
I think the risk of a regular user trying to use pysam from a Git clone are quite low nowadays. Also, running python3 setup.py build_ext -i actually allows import pysam from the repo root to work.","Yes, it doesn't appear to do the trick with any even vaguely pysam-supported version of Python.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1027,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).",True,{'HOORAY': ['https://github.com/PlatonB']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-874813108,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","The next htslib/samtools/etc release is now imminent, and htslib 1.12 has a serious bug with region queries (which is thought to have been fixed in the upcoming release).
This PR has some complexity in the setup.py changes to create the config_vars.h headers, so it would be good for that part to see some review. However it would be good to run the import again to update to the upcoming htslib/samtools/etc releases quickly after (or during!) merging this.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-877277205,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Now updated to htslib/samtools/bcftools 1.13 as released today.
@AndreasHeger @kevinjacobs-progenity: I'd quite like to merge this next week — there's only so many balls I want to have in the air at once, and with this merged it will be simpler to get on with some other improvements that touch the same files. Does anyone want to cast an eye over this?
This has passed testing with the range of Python versions as can be seen here.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/kevinjacobs-progenity,4,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-877285896,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Many thanks!  This is extremely important and timely work.  I'll run some of my own tests this weekend and let you know if I find any problems.  Beyond that, @AndreasHeger is still sole keeper for the release process, as far as I know.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,5,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-877293469,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Re “timely”, it's a shame I did 90% of the 1.12 import in April but only finished it up earlier this week 😄
Thanks for your upcoming testing. Agree re who's in charge of releases; and I have a few more things I want to get in before we get to that stage in any case.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-883364940,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Hi, really sorry I am not able to contribute much at the moment. I am still happy to do the release, but if anybody else would like to take care of it, I am happy to share anything that is necessary to do so.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-883387325,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).",And of course many thanks to @jmarshall for keeping pysam afloat.,True,"{'THUMBS_UP': ['https://github.com/PlatonB'], 'HEART': ['https://github.com/jmarshall']}"
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,8,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-887842736,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","I'll aim to merge this this week, to facilitate carrying on with other things. If any problems eventuate, we will be able to fix them on master.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/kevinjacobs-progenity,9,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-889819696,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","I've run my local test suite and all looks good.  Thanks, @jmarshall.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1027,2021-07-05T23:02:50Z,2021-07-30T17:23:35Z,2021-07-30T17:23:52Z,MERGED,True,37610,11299,256,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.13,10,[],https://github.com/pysam-developers/pysam/pull/1027,https://github.com/jmarshall,10,https://github.com/pysam-developers/pysam/pull/1027#issuecomment-889820229,"Import htslib, samtools, and bcftools 1.12:


Really fix bugs like #928 (when both samtools and bcftools have a command implemented by functions with the same name) by adding import.py infrastructure to rename one of them. Apply it to main_reheader().


Have import.py automatically update the version numbers in the documentation, as this is easily forgotten.


HTSlib and samtools 1.12 have added infrastructure to report the compilation flags used to build them. We add an equivalent of that to setup.py so that it reports the compilation flags used by the Python build processes.


Finally import the 1.12 releases, and add the new version subcommand to pysam/samtools.py.


Updated to import htslib, samtools, and bcftools 1.13:


Disable flagstat test as the output has acquired a few extra lines in samtools-1.13.


A couple of other updates, as noted in the commit messages.


Import the 1.13 releases, and add the new import subcommand to pysam/samtools.py (as fqimport).


Backport samtools/samtools#1465, which fixes a crash when using pysam.samtools.depth(…).","Excellent — thanks, I'll hit the button today.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1030,2021-07-07T07:46:44Z,2021-09-13T08:19:02Z,2021-09-13T08:19:02Z,MERGED,True,17,0,1,https://github.com/odidev,Add aarch64 wheel support,1,[],https://github.com/pysam-developers/pysam/pull/1030,https://github.com/odidev,1,https://github.com/pysam-developers/pysam/pull/1030,"Closes #1029
@jmarshall, can you please take a look into this PR?","Closes #1029
@jmarshall, can you please take a look into this PR?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1030,2021-07-07T07:46:44Z,2021-09-13T08:19:02Z,2021-09-13T08:19:02Z,MERGED,True,17,0,1,https://github.com/odidev,Add aarch64 wheel support,1,[],https://github.com/pysam-developers/pysam/pull/1030,https://github.com/odidev,2,https://github.com/pysam-developers/pysam/pull/1030#issuecomment-915045201,"Closes #1029
@jmarshall, can you please take a look into this PR?","@jmarshall, can you please take a look on this PR?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1030,2021-07-07T07:46:44Z,2021-09-13T08:19:02Z,2021-09-13T08:19:02Z,MERGED,True,17,0,1,https://github.com/odidev,Add aarch64 wheel support,1,[],https://github.com/pysam-developers/pysam/pull/1030,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1030#issuecomment-915089916,"Closes #1029
@jmarshall, can you please take a look into this PR?","Travis has mostly gone away, so this PR is not directly applicable. But we will want AArch64 support, so I'll leave the issue open to track that.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1030,2021-07-07T07:46:44Z,2021-09-13T08:19:02Z,2021-09-13T08:19:02Z,MERGED,True,17,0,1,https://github.com/odidev,Add aarch64 wheel support,1,[],https://github.com/pysam-developers/pysam/pull/1030,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1030#issuecomment-917953056,"Closes #1029
@jmarshall, can you please take a look into this PR?","I was planning to delete .travis.yml soon, but instead let's keep it around for reference purposes for a while even though it won't actually be activated. So I'll just merge this after all. Thanks1",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1031,2021-07-11T11:08:49Z,2021-07-12T07:19:16Z,2021-07-12T07:19:16Z,CLOSED,False,2,2,1,https://github.com/dschwoerer,Fix build with sphinx 4.0.2,1,[],https://github.com/pysam-developers/pysam/pull/1031,https://github.com/dschwoerer,1,https://github.com/pysam-developers/pysam/pull/1031,"Without, I get this error:
+ sphinx-build-3 doc html
Running Sphinx v4.0.2
Configuration error:
There is a syntax error in your configuration file: invalid syntax (conf.py, line 204)","Without, I get this error:
+ sphinx-build-3 doc html
Running Sphinx v4.0.2
Configuration error:
There is a syntax error in your configuration file: invalid syntax (conf.py, line 204)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1031,2021-07-11T11:08:49Z,2021-07-12T07:19:16Z,2021-07-12T07:19:16Z,CLOSED,False,2,2,1,https://github.com/dschwoerer,Fix build with sphinx 4.0.2,1,[],https://github.com/pysam-developers/pysam/pull/1031,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1031#issuecomment-877784916,"Without, I get this error:
+ sphinx-build-3 doc html
Running Sphinx v4.0.2
Configuration error:
There is a syntax error in your configuration file: invalid syntax (conf.py, line 204)","Current master works for me with sphinx 4.0.2, and even after your PR doc/conf.py still contains u'foo' strings elsewhere.
Are you sure your checkout is up to date with pysam-developers/pysam master? I suspect the file you are actually using contained ur'pysam documentation' because it did not contain e340c85 which fixed #1019.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1031,2021-07-11T11:08:49Z,2021-07-12T07:19:16Z,2021-07-12T07:19:16Z,CLOSED,False,2,2,1,https://github.com/dschwoerer,Fix build with sphinx 4.0.2,1,[],https://github.com/pysam-developers/pysam/pull/1031,https://github.com/dschwoerer,3,https://github.com/pysam-developers/pysam/pull/1031#issuecomment-878035038,"Without, I get this error:
+ sphinx-build-3 doc html
Running Sphinx v4.0.2
Configuration error:
There is a syntax error in your configuration file: invalid syntax (conf.py, line 204)","Yes, my bad. I have added e340c85 and pushed, but hadn't rebuild -.-
Would a new release make sense? It's bin over a year since the last ...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1035,2021-07-27T06:17:22Z,2021-09-03T22:15:22Z,2021-09-03T22:17:47Z,MERGED,True,68,5,4,https://github.com/abjonnes,Better handling of file iteration errors,1,[],https://github.com/pysam-developers/pysam/pull/1035,https://github.com/abjonnes,1,https://github.com/pysam-developers/pysam/pull/1035,"For the iteration methods backed internally by sam_read1, all return
codes < -1 signify errors which should raise an exception to the user.

I recently had a BAM file that had been corrupted somehow during download, but when I iterated over it with pysam.Samfile, iteration ended prematurely but silently - that is, no exceptions were thrown when the corrupted region of the BAM was reached, only some warnings were printed to the terminal by htslib. Example output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
335960
>>> 

This PR adds better error handling in the case of BAM files that are corrupted in ways other than truncation. The underlying sam_read1 method uses a number of different return codes less than -1 to indicate error conditions, so the changes here raise IOErrors if such return codes are encountered. Updated output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 1, in <genexpr>
  File ""pysam/libcalignmentfile.pyx"", line 1863, in pysam.libcalignmentfile.AlignmentFile.__next__
OSError: error while reading file: -4
>>> 

I also included a script to generate, through the pysam test data Makefile, a BAM file which is corrupted in such a way to reproduce the issue. I can simply check in the BAM file itself if you prefer to not add the clutter of a script.
Thanks for all your great work on this library!","For the iteration methods backed internally by sam_read1, all return
codes < -1 signify errors which should raise an exception to the user.

I recently had a BAM file that had been corrupted somehow during download, but when I iterated over it with pysam.Samfile, iteration ended prematurely but silently - that is, no exceptions were thrown when the corrupted region of the BAM was reached, only some warnings were printed to the terminal by htslib. Example output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
335960
>>> 

This PR adds better error handling in the case of BAM files that are corrupted in ways other than truncation. The underlying sam_read1 method uses a number of different return codes less than -1 to indicate error conditions, so the changes here raise IOErrors if such return codes are encountered. Updated output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 1, in <genexpr>
  File ""pysam/libcalignmentfile.pyx"", line 1863, in pysam.libcalignmentfile.AlignmentFile.__next__
OSError: error while reading file: -4
>>> 

I also included a script to generate, through the pysam test data Makefile, a BAM file which is corrupted in such a way to reproduce the issue. I can simply check in the BAM file itself if you prefer to not add the clutter of a script.
Thanks for all your great work on this library!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1035,2021-07-27T06:17:22Z,2021-09-03T22:15:22Z,2021-09-03T22:17:47Z,MERGED,True,68,5,4,https://github.com/abjonnes,Better handling of file iteration errors,1,[],https://github.com/pysam-developers/pysam/pull/1035,https://github.com/rjlasko,2,https://github.com/pysam-developers/pysam/pull/1035#issuecomment-888646123,"For the iteration methods backed internally by sam_read1, all return
codes < -1 signify errors which should raise an exception to the user.

I recently had a BAM file that had been corrupted somehow during download, but when I iterated over it with pysam.Samfile, iteration ended prematurely but silently - that is, no exceptions were thrown when the corrupted region of the BAM was reached, only some warnings were printed to the terminal by htslib. Example output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
335960
>>> 

This PR adds better error handling in the case of BAM files that are corrupted in ways other than truncation. The underlying sam_read1 method uses a number of different return codes less than -1 to indicate error conditions, so the changes here raise IOErrors if such return codes are encountered. Updated output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 1, in <genexpr>
  File ""pysam/libcalignmentfile.pyx"", line 1863, in pysam.libcalignmentfile.AlignmentFile.__next__
OSError: error while reading file: -4
>>> 

I also included a script to generate, through the pysam test data Makefile, a BAM file which is corrupted in such a way to reproduce the issue. I can simply check in the BAM file itself if you prefer to not add the clutter of a script.
Thanks for all your great work on this library!","I hope this gets approved soon, as it will improve the reliability of pysam and integrity of the result.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1035,2021-07-27T06:17:22Z,2021-09-03T22:15:22Z,2021-09-03T22:17:47Z,MERGED,True,68,5,4,https://github.com/abjonnes,Better handling of file iteration errors,1,[],https://github.com/pysam-developers/pysam/pull/1035,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1035#issuecomment-890254505,"For the iteration methods backed internally by sam_read1, all return
codes < -1 signify errors which should raise an exception to the user.

I recently had a BAM file that had been corrupted somehow during download, but when I iterated over it with pysam.Samfile, iteration ended prematurely but silently - that is, no exceptions were thrown when the corrupted region of the BAM was reached, only some warnings were printed to the terminal by htslib. Example output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
335960
>>> 

This PR adds better error handling in the case of BAM files that are corrupted in ways other than truncation. The underlying sam_read1 method uses a number of different return codes less than -1 to indicate error conditions, so the changes here raise IOErrors if such return codes are encountered. Updated output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 1, in <genexpr>
  File ""pysam/libcalignmentfile.pyx"", line 1863, in pysam.libcalignmentfile.AlignmentFile.__next__
OSError: error while reading file: -4
>>> 

I also included a script to generate, through the pysam test data Makefile, a BAM file which is corrupted in such a way to reproduce the issue. I can simply check in the BAM file itself if you prefer to not add the clutter of a script.
Thanks for all your great work on this library!","Thanks for pointing out this bug and proposing a fix. You are quite right that this code should only be raising StopIteration for a return code of exactly -1. The basic changes to the Python code are good, though I plan to refactor it a little.
I'd prefer to include the recipe to generate the BAM file as you have done, rather than just check the resulting binary in. It'd be nice if we could build the script out of some more general-purpose components, which I am musing about at the moment.",True,{'THUMBS_UP': ['https://github.com/abjonnes']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1035,2021-07-27T06:17:22Z,2021-09-03T22:15:22Z,2021-09-03T22:17:47Z,MERGED,True,68,5,4,https://github.com/abjonnes,Better handling of file iteration errors,1,[],https://github.com/pysam-developers/pysam/pull/1035,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1035#issuecomment-912840637,"For the iteration methods backed internally by sam_read1, all return
codes < -1 signify errors which should raise an exception to the user.

I recently had a BAM file that had been corrupted somehow during download, but when I iterated over it with pysam.Samfile, iteration ended prematurely but silently - that is, no exceptions were thrown when the corrupted region of the BAM was reached, only some warnings were printed to the terminal by htslib. Example output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
335960
>>> 

This PR adds better error handling in the case of BAM files that are corrupted in ways other than truncation. The underlying sam_read1 method uses a number of different return codes less than -1 to indicate error conditions, so the changes here raise IOErrors if such return codes are encountered. Updated output:
>>> f = pysam.Samfile(""mapped.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped.bam'
37954048
>>> f = pysam.Samfile(""mapped_corrupt.bam"", ""rb"") ; sum(1 for _ in f)
[E::idx_find_and_load] Could not retrieve index file for 'mapped_corrupt.bam'
[E::bgzf_uncompress] CRC32 checksum mismatch
[E::bgzf_read] Read block operation failed with error 33 after 112 of 149 bytes
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 1, in <genexpr>
  File ""pysam/libcalignmentfile.pyx"", line 1863, in pysam.libcalignmentfile.AlignmentFile.__next__
OSError: error while reading file: -4
>>> 

I also included a script to generate, through the pysam test data Makefile, a BAM file which is corrupted in such a way to reproduce the issue. I can simply check in the BAM file itself if you prefer to not add the clutter of a script.
Thanks for all your great work on this library!","Thanks for the improvements.
I simplified the test data file to just append a broken alignment record, which causes a -4 return code similarly to the output from make_corrupt_bam.sh. We may wish to resurrect make_corrupt_bam.sh or an equivalent at some point to test that more complex scenario too, on this or other code paths.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1037,2021-08-26T08:48:32Z,,2021-10-28T21:47:54Z,OPEN,False,9,1,1,https://github.com/Prakash2403,Added support for persisting IndexedReads index to disk,1,[],https://github.com/pysam-developers/pysam/pull/1037,https://github.com/Prakash2403,1,https://github.com/pysam-developers/pysam/pull/1037,"I recently came across a situation where I needed to persist the IndexedReads index to disk. I was successfully able to do it and wanted to contribute this feature to this repository.
Steps on how to store/load the index

How to store the index to the disk

>>> from pysam import AlignmentFile, IndexedReads
>>> bam: AlignmentFile = AlignmentFile('examples/sample.bam')
>>> name_index: IndexedReads = IndexedReads(bam)
>>> name_index.build()
>>> name_index.store('/some/path/to/sample.json')


How to load the index from the disk

>>> from pysam import AlignmentFile, IndexedReads
>>> bam: AlignmentFile = AlignmentFile('examples/sample.bam')
>>> name_index: IndexedReads = IndexedReads(bam)
>>> name_index.load('/some/path/to/sample.json')","I recently came across a situation where I needed to persist the IndexedReads index to disk. I was successfully able to do it and wanted to contribute this feature to this repository.
Steps on how to store/load the index

How to store the index to the disk

>>> from pysam import AlignmentFile, IndexedReads
>>> bam: AlignmentFile = AlignmentFile('examples/sample.bam')
>>> name_index: IndexedReads = IndexedReads(bam)
>>> name_index.build()
>>> name_index.store('/some/path/to/sample.json')


How to load the index from the disk

>>> from pysam import AlignmentFile, IndexedReads
>>> bam: AlignmentFile = AlignmentFile('examples/sample.bam')
>>> name_index: IndexedReads = IndexedReads(bam)
>>> name_index.load('/some/path/to/sample.json')",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1039,2021-09-10T09:38:45Z,2021-09-12T23:08:52Z,2021-09-14T15:33:11Z,MERGED,True,13,15,1,https://github.com/marcelm,"Make ""API"" a top-level heading",2,[],https://github.com/pysam-developers/pysam/pull/1039,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1039,"For me, the pysam API is the most important part of the documentation, and I think the ""API"" section should therefore be at the top level.
I’m suggesting this change because I never seem to be able to find that section on first attempt when browsing the docs, mostly because it is somewhat hidden below the first heading ""pysam - An interface for reading and writing SAM files"".
While writing this, I realized that there is actually a full table of contents on the landing page https://pysam.readthedocs.io/en/latest/, which would allow me to go to the API section with a single click, but the fact that I haven’t seen it at least a dozen times makes me believe that having it also in menu on the left would be an improvement.","For me, the pysam API is the most important part of the documentation, and I think the ""API"" section should therefore be at the top level.
I’m suggesting this change because I never seem to be able to find that section on first attempt when browsing the docs, mostly because it is somewhat hidden below the first heading ""pysam - An interface for reading and writing SAM files"".
While writing this, I realized that there is actually a full table of contents on the landing page https://pysam.readthedocs.io/en/latest/, which would allow me to go to the API section with a single click, but the fact that I haven’t seen it at least a dozen times makes me believe that having it also in menu on the left would be an improvement.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1039,2021-09-10T09:38:45Z,2021-09-12T23:08:52Z,2021-09-14T15:33:11Z,MERGED,True,13,15,1,https://github.com/marcelm,"Make ""API"" a top-level heading",2,[],https://github.com/pysam-developers/pysam/pull/1039,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/1039#issuecomment-916774082,"For me, the pysam API is the most important part of the documentation, and I think the ""API"" section should therefore be at the top level.
I’m suggesting this change because I never seem to be able to find that section on first attempt when browsing the docs, mostly because it is somewhat hidden below the first heading ""pysam - An interface for reading and writing SAM files"".
While writing this, I realized that there is actually a full table of contents on the landing page https://pysam.readthedocs.io/en/latest/, which would allow me to go to the API section with a single click, but the fact that I haven’t seen it at least a dozen times makes me believe that having it also in menu on the left would be an improvement.","The second commit is unrelated, I can revert if desired.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1039,2021-09-10T09:38:45Z,2021-09-12T23:08:52Z,2021-09-14T15:33:11Z,MERGED,True,13,15,1,https://github.com/marcelm,"Make ""API"" a top-level heading",2,[],https://github.com/pysam-developers/pysam/pull/1039,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1039#issuecomment-917727809,"For me, the pysam API is the most important part of the documentation, and I think the ""API"" section should therefore be at the top level.
I’m suggesting this change because I never seem to be able to find that section on first attempt when browsing the docs, mostly because it is somewhat hidden below the first heading ""pysam - An interface for reading and writing SAM files"".
While writing this, I realized that there is actually a full table of contents on the landing page https://pysam.readthedocs.io/en/latest/, which would allow me to go to the API section with a single click, but the fact that I haven’t seen it at least a dozen times makes me believe that having it also in menu on the left would be an improvement.","I totally agree — I don't see it to such an extent that I invariably assume it's not there and go and read the raw docstrings embedded in the .pyx files instead.
I think it's further improved by having the first section stay as “Introduction” rather than “pysam - An interface for reading and writing SAM files”, so I've merged this with that change.",True,{'THUMBS_UP': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1042,2021-09-14T13:29:17Z,2021-09-22T15:32:18Z,2021-09-22T16:29:46Z,MERGED,True,5,5,1,https://github.com/jmarshall,Improve `AlignedSegment.__str__` and `print(read)` field display,1,[],https://github.com/pysam-developers/pysam/pull/1042,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1042,"This patch applies s/query_alignment_length/template_length/ so fixes #1040. While in the neighbourhood, it also proposes altering the display of the RNAME, POS, RNEXT, and PNEXT fields.
The __str__ function (also used when you simply print an AlignedSegment object) is a simplified way of printing an alignment record, and takes some shortcuts because a set of headers might not be available.
For full writing or printing of a SAM record, you would be writing to an AlignmentFile or using rec.to_string(), both of which take advantage of headers to print the chromosome names and use htslib facilities to print the record in proper SAM format.
__str__ prints a half-internal form of this: RNAME/RNEXT are shown as the tid integer (i.e. 0 ≤ tid < nchroms) instead of the actual chromosome name; base qualities and tagged fields are shown as Python arrays; and POS and PNEXT (aka MPOS) are shown as their raw internal values, i.e., 0-based.
Thus __str__ and print() produce a line that mostly (up to the SEQ column anyway) looks a lot like real SAM, but the chromosome ids are numeric and the positions are 0-based.
This PR changes the format output by __str__ and print() by printing RNAME/RNEXT with a # prefix to avoid confusion with 1, 2, etc non-“chr”-prefixed actual chromosome names, and as * for unmapped; and writing POS/PNEXT as 1-based values as is familiar in a textual SAM record context.
for read in samfile:
    print(read)
    print(read.to_string())
    print()
Previously this script would output the following for a simple test SAM file:
one	0	0	99	15	4M	0	199	4	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	1	199	64	4M	1	399	4	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	1	299	40	2M	0	99	2	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	-1	-1	0	4M	-1	-1	4	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
With this PR, the second line for each read is unchanged but the print(read) line differs:
one	0	#0	100	15	4M	#0	200	101	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	#1	200	64	4M	#1	400	201	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	#1	300	40	2M	#0	100	0	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	*	0	0	4M	*	0	0	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
Notice that the various -1s are gone, the numeric chromosome “names” are more distinctive, the positions are as expected from the .to_string() line, and the TLEN field is corrected.
This is an incompatible change in the __str__ output, but as this is a half-internal format being printed it will usually be used just for debugging etc. Any real data interchange would be being done with AlignmentFile or .to_string() and be unchanged. So the claim is that this change will only make debugging output easier to read and won't have adverse effects (despite being officially an incompatible change in output).
@AndreasHeger @kevinjacobs-progenity @marcelm Any issues with applying this change?
The alternative would be to fix the TLEN field and, instead of altering POS/PEXT, add a note to the documentation about them being  0-based:

  
    
      pysam/pysam/libcalignedsegment.pyx
    
    
        Lines 970 to 973
      in
      92f8a51
    
  
  
    

        
          
                   The representation is an approximate :term:`SAM` format, because 
        

        
          
                   an aligned read might not be associated with a :term:`AlignmentFile`. 
        

        
          
                   As a result :term:`tid` is shown instead of the reference name. 
        

        
          
                   Similarly, the tags field is returned in its parsed state.","This patch applies s/query_alignment_length/template_length/ so fixes #1040. While in the neighbourhood, it also proposes altering the display of the RNAME, POS, RNEXT, and PNEXT fields.
The __str__ function (also used when you simply print an AlignedSegment object) is a simplified way of printing an alignment record, and takes some shortcuts because a set of headers might not be available.
For full writing or printing of a SAM record, you would be writing to an AlignmentFile or using rec.to_string(), both of which take advantage of headers to print the chromosome names and use htslib facilities to print the record in proper SAM format.
__str__ prints a half-internal form of this: RNAME/RNEXT are shown as the tid integer (i.e. 0 ≤ tid < nchroms) instead of the actual chromosome name; base qualities and tagged fields are shown as Python arrays; and POS and PNEXT (aka MPOS) are shown as their raw internal values, i.e., 0-based.
Thus __str__ and print() produce a line that mostly (up to the SEQ column anyway) looks a lot like real SAM, but the chromosome ids are numeric and the positions are 0-based.
This PR changes the format output by __str__ and print() by printing RNAME/RNEXT with a # prefix to avoid confusion with 1, 2, etc non-“chr”-prefixed actual chromosome names, and as * for unmapped; and writing POS/PNEXT as 1-based values as is familiar in a textual SAM record context.
for read in samfile:
    print(read)
    print(read.to_string())
    print()
Previously this script would output the following for a simple test SAM file:
one	0	0	99	15	4M	0	199	4	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	1	199	64	4M	1	399	4	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	1	299	40	2M	0	99	2	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	-1	-1	0	4M	-1	-1	4	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
With this PR, the second line for each read is unchanged but the print(read) line differs:
one	0	#0	100	15	4M	#0	200	101	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	#1	200	64	4M	#1	400	201	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	#1	300	40	2M	#0	100	0	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	*	0	0	4M	*	0	0	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
Notice that the various -1s are gone, the numeric chromosome “names” are more distinctive, the positions are as expected from the .to_string() line, and the TLEN field is corrected.
This is an incompatible change in the __str__ output, but as this is a half-internal format being printed it will usually be used just for debugging etc. Any real data interchange would be being done with AlignmentFile or .to_string() and be unchanged. So the claim is that this change will only make debugging output easier to read and won't have adverse effects (despite being officially an incompatible change in output).
@AndreasHeger @kevinjacobs-progenity @marcelm Any issues with applying this change?
The alternative would be to fix the TLEN field and, instead of altering POS/PEXT, add a note to the documentation about them being  0-based:

  
    
      pysam/pysam/libcalignedsegment.pyx
    
    
        Lines 970 to 973
      in
      92f8a51
    
  
  
    

        
          
                   The representation is an approximate :term:`SAM` format, because 
        

        
          
                   an aligned read might not be associated with a :term:`AlignmentFile`. 
        

        
          
                   As a result :term:`tid` is shown instead of the reference name. 
        

        
          
                   Similarly, the tags field is returned in its parsed state.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1042,2021-09-14T13:29:17Z,2021-09-22T15:32:18Z,2021-09-22T16:29:46Z,MERGED,True,5,5,1,https://github.com/jmarshall,Improve `AlignedSegment.__str__` and `print(read)` field display,1,[],https://github.com/pysam-developers/pysam/pull/1042,https://github.com/marcelm,2,https://github.com/pysam-developers/pysam/pull/1042#issuecomment-919292195,"This patch applies s/query_alignment_length/template_length/ so fixes #1040. While in the neighbourhood, it also proposes altering the display of the RNAME, POS, RNEXT, and PNEXT fields.
The __str__ function (also used when you simply print an AlignedSegment object) is a simplified way of printing an alignment record, and takes some shortcuts because a set of headers might not be available.
For full writing or printing of a SAM record, you would be writing to an AlignmentFile or using rec.to_string(), both of which take advantage of headers to print the chromosome names and use htslib facilities to print the record in proper SAM format.
__str__ prints a half-internal form of this: RNAME/RNEXT are shown as the tid integer (i.e. 0 ≤ tid < nchroms) instead of the actual chromosome name; base qualities and tagged fields are shown as Python arrays; and POS and PNEXT (aka MPOS) are shown as their raw internal values, i.e., 0-based.
Thus __str__ and print() produce a line that mostly (up to the SEQ column anyway) looks a lot like real SAM, but the chromosome ids are numeric and the positions are 0-based.
This PR changes the format output by __str__ and print() by printing RNAME/RNEXT with a # prefix to avoid confusion with 1, 2, etc non-“chr”-prefixed actual chromosome names, and as * for unmapped; and writing POS/PNEXT as 1-based values as is familiar in a textual SAM record context.
for read in samfile:
    print(read)
    print(read.to_string())
    print()
Previously this script would output the following for a simple test SAM file:
one	0	0	99	15	4M	0	199	4	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	1	199	64	4M	1	399	4	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	1	299	40	2M	0	99	2	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	-1	-1	0	4M	-1	-1	4	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
With this PR, the second line for each read is unchanged but the print(read) line differs:
one	0	#0	100	15	4M	#0	200	101	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	#1	200	64	4M	#1	400	201	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	#1	300	40	2M	#0	100	0	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	*	0	0	4M	*	0	0	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
Notice that the various -1s are gone, the numeric chromosome “names” are more distinctive, the positions are as expected from the .to_string() line, and the TLEN field is corrected.
This is an incompatible change in the __str__ output, but as this is a half-internal format being printed it will usually be used just for debugging etc. Any real data interchange would be being done with AlignmentFile or .to_string() and be unchanged. So the claim is that this change will only make debugging output easier to read and won't have adverse effects (despite being officially an incompatible change in output).
@AndreasHeger @kevinjacobs-progenity @marcelm Any issues with applying this change?
The alternative would be to fix the TLEN field and, instead of altering POS/PEXT, add a note to the documentation about them being  0-based:

  
    
      pysam/pysam/libcalignedsegment.pyx
    
    
        Lines 970 to 973
      in
      92f8a51
    
  
  
    

        
          
                   The representation is an approximate :term:`SAM` format, because 
        

        
          
                   an aligned read might not be associated with a :term:`AlignmentFile`. 
        

        
          
                   As a result :term:`tid` is shown instead of the reference name. 
        

        
          
                   Similarly, the tags field is returned in its parsed state.","I think this is an improvement, but I also have to admit I rarely use __str__ or print() an AlignedSegment because I don’t find the output very useful (I can never remember the order of columns). For me, in an ideal world

AlignedSegment.__str__ would return the SAM representation, that is, it would be an alias for to_string
AlignedSegment.__repr__ would return something more helpful than __str__ returns now, perhaps more along the lines of AlignedSegment(name=""one"", query_alignment_start=0, query_sequence=""ATGC"", ...) (It’s a bit verbose and it looks like a constructor call, which wouldn’t actually work, but at least it would be clear that coordinates are definitely 0-based.)

But perhaps these suggestions should be a different issue.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1042,2021-09-14T13:29:17Z,2021-09-22T15:32:18Z,2021-09-22T16:29:46Z,MERGED,True,5,5,1,https://github.com/jmarshall,Improve `AlignedSegment.__str__` and `print(read)` field display,1,[],https://github.com/pysam-developers/pysam/pull/1042,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/1042#issuecomment-925042458,"This patch applies s/query_alignment_length/template_length/ so fixes #1040. While in the neighbourhood, it also proposes altering the display of the RNAME, POS, RNEXT, and PNEXT fields.
The __str__ function (also used when you simply print an AlignedSegment object) is a simplified way of printing an alignment record, and takes some shortcuts because a set of headers might not be available.
For full writing or printing of a SAM record, you would be writing to an AlignmentFile or using rec.to_string(), both of which take advantage of headers to print the chromosome names and use htslib facilities to print the record in proper SAM format.
__str__ prints a half-internal form of this: RNAME/RNEXT are shown as the tid integer (i.e. 0 ≤ tid < nchroms) instead of the actual chromosome name; base qualities and tagged fields are shown as Python arrays; and POS and PNEXT (aka MPOS) are shown as their raw internal values, i.e., 0-based.
Thus __str__ and print() produce a line that mostly (up to the SEQ column anyway) looks a lot like real SAM, but the chromosome ids are numeric and the positions are 0-based.
This PR changes the format output by __str__ and print() by printing RNAME/RNEXT with a # prefix to avoid confusion with 1, 2, etc non-“chr”-prefixed actual chromosome names, and as * for unmapped; and writing POS/PNEXT as 1-based values as is familiar in a textual SAM record context.
for read in samfile:
    print(read)
    print(read.to_string())
    print()
Previously this script would output the following for a simple test SAM file:
one	0	0	99	15	4M	0	199	4	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	1	199	64	4M	1	399	4	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	1	299	40	2M	0	99	2	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	-1	-1	0	4M	-1	-1	4	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
With this PR, the second line for each read is unchanged but the print(read) line differs:
one	0	#0	100	15	4M	#0	200	101	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	#1	200	64	4M	#1	400	201	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	#1	300	40	2M	#0	100	0	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	*	0	0	4M	*	0	0	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
Notice that the various -1s are gone, the numeric chromosome “names” are more distinctive, the positions are as expected from the .to_string() line, and the TLEN field is corrected.
This is an incompatible change in the __str__ output, but as this is a half-internal format being printed it will usually be used just for debugging etc. Any real data interchange would be being done with AlignmentFile or .to_string() and be unchanged. So the claim is that this change will only make debugging output easier to read and won't have adverse effects (despite being officially an incompatible change in output).
@AndreasHeger @kevinjacobs-progenity @marcelm Any issues with applying this change?
The alternative would be to fix the TLEN field and, instead of altering POS/PEXT, add a note to the documentation about them being  0-based:

  
    
      pysam/pysam/libcalignedsegment.pyx
    
    
        Lines 970 to 973
      in
      92f8a51
    
  
  
    

        
          
                   The representation is an approximate :term:`SAM` format, because 
        

        
          
                   an aligned read might not be associated with a :term:`AlignmentFile`. 
        

        
          
                   As a result :term:`tid` is shown instead of the reference name. 
        

        
          
                   Similarly, the tags field is returned in its parsed state.","Thanks, @jmarshall , makes the situation better. I am not very worried about the backwards compatibility as indeed the str method's intention was to be only used for debugging.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1042,2021-09-14T13:29:17Z,2021-09-22T15:32:18Z,2021-09-22T16:29:46Z,MERGED,True,5,5,1,https://github.com/jmarshall,Improve `AlignedSegment.__str__` and `print(read)` field display,1,[],https://github.com/pysam-developers/pysam/pull/1042,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1042#issuecomment-925091117,"This patch applies s/query_alignment_length/template_length/ so fixes #1040. While in the neighbourhood, it also proposes altering the display of the RNAME, POS, RNEXT, and PNEXT fields.
The __str__ function (also used when you simply print an AlignedSegment object) is a simplified way of printing an alignment record, and takes some shortcuts because a set of headers might not be available.
For full writing or printing of a SAM record, you would be writing to an AlignmentFile or using rec.to_string(), both of which take advantage of headers to print the chromosome names and use htslib facilities to print the record in proper SAM format.
__str__ prints a half-internal form of this: RNAME/RNEXT are shown as the tid integer (i.e. 0 ≤ tid < nchroms) instead of the actual chromosome name; base qualities and tagged fields are shown as Python arrays; and POS and PNEXT (aka MPOS) are shown as their raw internal values, i.e., 0-based.
Thus __str__ and print() produce a line that mostly (up to the SEQ column anyway) looks a lot like real SAM, but the chromosome ids are numeric and the positions are 0-based.
This PR changes the format output by __str__ and print() by printing RNAME/RNEXT with a # prefix to avoid confusion with 1, 2, etc non-“chr”-prefixed actual chromosome names, and as * for unmapped; and writing POS/PNEXT as 1-based values as is familiar in a textual SAM record context.
for read in samfile:
    print(read)
    print(read.to_string())
    print()
Previously this script would output the following for a simple test SAM file:
one	0	0	99	15	4M	0	199	4	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	1	199	64	4M	1	399	4	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	1	299	40	2M	0	99	2	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	-1	-1	0	4M	-1	-1	4	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
With this PR, the second line for each read is unchanged but the print(read) line differs:
one	0	#0	100	15	4M	#0	200	101	ATGC	array('B', [64, 65, 66, 67])	[('X0', 37)]
one	0	apple	100	15	4M	=	200	101	ATGC	abcd	X0:i:37

two	0	#1	200	64	4M	#1	400	201	CGAT	array('B', [68, 69, 70, 71])	[]
two	0	banana	200	64	4M	=	400	201	CGAT	efgh

three	0	#1	300	40	2M	#0	100	0	AT	array('B', [73, 72])	[]
three	0	banana	300	40	2M	apple	100	0	AT	ji

four	4	*	0	0	4M	*	0	0	TTAG	array('B', [74, 75, 76, 77])	[]
four	4	*	0	0	4M	*	0	0	TTAG	klmn

 
Notice that the various -1s are gone, the numeric chromosome “names” are more distinctive, the positions are as expected from the .to_string() line, and the TLEN field is corrected.
This is an incompatible change in the __str__ output, but as this is a half-internal format being printed it will usually be used just for debugging etc. Any real data interchange would be being done with AlignmentFile or .to_string() and be unchanged. So the claim is that this change will only make debugging output easier to read and won't have adverse effects (despite being officially an incompatible change in output).
@AndreasHeger @kevinjacobs-progenity @marcelm Any issues with applying this change?
The alternative would be to fix the TLEN field and, instead of altering POS/PEXT, add a note to the documentation about them being  0-based:

  
    
      pysam/pysam/libcalignedsegment.pyx
    
    
        Lines 970 to 973
      in
      92f8a51
    
  
  
    

        
          
                   The representation is an approximate :term:`SAM` format, because 
        

        
          
                   an aligned read might not be associated with a :term:`AlignmentFile`. 
        

        
          
                   As a result :term:`tid` is shown instead of the reference name. 
        

        
          
                   Similarly, the tags field is returned in its parsed state.",A good demonstration of why we need to have CI active — there was a test case that needed adjusting. Not sure how I didn't see that previously… 🤣,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1045,2021-09-17T09:18:30Z,2021-11-16T11:38:39Z,2021-11-16T15:09:56Z,MERGED,True,13,0,1,https://github.com/erikbgithub,baseimage for containers,1,[],https://github.com/pysam-developers/pysam/pull/1045,https://github.com/erikbgithub,1,https://github.com/pysam-developers/pysam/pull/1045,"After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.","After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1045,2021-09-17T09:18:30Z,2021-11-16T11:38:39Z,2021-11-16T15:09:56Z,MERGED,True,13,0,1,https://github.com/erikbgithub,baseimage for containers,1,[],https://github.com/pysam-developers/pysam/pull/1045,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1045#issuecomment-970186678,"After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.","Hi @erikbgithub
Thanks. Happy to add it if it makes it easiers for users to install.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1045,2021-09-17T09:18:30Z,2021-11-16T11:38:39Z,2021-11-16T15:09:56Z,MERGED,True,13,0,1,https://github.com/erikbgithub,baseimage for containers,1,[],https://github.com/pysam-developers/pysam/pull/1045,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1045#issuecomment-970205782,"After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.","Apologies for not commenting out loud on this one previously.
The OP's problem was sorted out in #1044, and as @marcelm commented there, the problem is really solved by providing wheels.
The Containerfile suggested appears to be specific to a particular Red Hat ecosystem (“ubi8”) and includes some infelicities: why does it install pigz? symlinking python is probably not a great idea. I'm not sure it'll be particularly helpful to anyone, including the OP.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1045,2021-09-17T09:18:30Z,2021-11-16T11:38:39Z,2021-11-16T15:09:56Z,MERGED,True,13,0,1,https://github.com/erikbgithub,baseimage for containers,1,[],https://github.com/pysam-developers/pysam/pull/1045,https://github.com/erikbgithub,4,https://github.com/pysam-developers/pysam/pull/1045#issuecomment-970361590,"After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.","@AndreasHeger @jmarshall Hi. No problem for the late response.
Usually, I don't post a completely finished PRs, but already an early draft version expecting feedback, questions and strategic alignments. So when I get to finish things up, then I can already include the feedback from other people that I wouldn't have expected otherwise.
In other words: Your criticism is welcome and next time discuss it before clicking the merge button. Otherwise, I'm not satisfied either.
If you consider removing the Containerfile again in its current state, I wouldn't mind.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1045,2021-09-17T09:18:30Z,2021-11-16T11:38:39Z,2021-11-16T15:09:56Z,MERGED,True,13,0,1,https://github.com/erikbgithub,baseimage for containers,1,[],https://github.com/pysam-developers/pysam/pull/1045,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/1045#issuecomment-970366906,"After running into #1044 I've started exploring this path. And here the installation ""just worked"". If we provide a base image with the pysam package then people can build their tooling on top of that baseimage in any OS that runs containers in a similar fashion.
I built and tested it this way:
$ podman build -t pysam -f Containerfile .
$ podman run -it pysam python -c ""import pysam; print('woohoo')""

Let me know what you think.","@erikbgithub and @jmarshall , thanks.
I will clean it out again.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1049,2021-09-28T10:41:27Z,2021-09-28T14:22:51Z,2021-09-28T14:22:57Z,MERGED,True,161,2,5,https://github.com/AndreasHeger,Release 0.17.0,16,[],https://github.com/pysam-developers/pysam/pull/1049,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/1049,"Add CI for wheel building in github actions.
Update release notes for 0.17.0","Add CI for wheel building in github actions.
Update release notes for 0.17.0",True,{'HOORAY': ['https://github.com/jmarshall']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1054,2021-10-24T22:04:32Z,2021-11-01T15:00:13Z,2021-11-01T15:08:51Z,MERGED,True,6577,3121,129,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.14,4,[],https://github.com/pysam-developers/pysam/pull/1054,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1054,"Import htslib, samtools, and bcftools 1.14, and add the new samtools samples command to pysam/samtools.py.
(Fixes #1048, which was caused by an HTSlib bug that is fixed in 1.14.)
HTSlib 1.14 is stricter about parsing the #CHROM header in VCF files, so tidy up the trailing tab characters in a few test VCF files to avoid spurious test failures.","Import htslib, samtools, and bcftools 1.14, and add the new samtools samples command to pysam/samtools.py.
(Fixes #1048, which was caused by an HTSlib bug that is fixed in 1.14.)
HTSlib 1.14 is stricter about parsing the #CHROM header in VCF files, so tidy up the trailing tab characters in a few test VCF files to avoid spurious test failures.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1054,2021-10-24T22:04:32Z,2021-11-01T15:00:13Z,2021-11-01T15:08:51Z,MERGED,True,6577,3121,129,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.14,4,[],https://github.com/pysam-developers/pysam/pull/1054,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1054#issuecomment-950689547,"Import htslib, samtools, and bcftools 1.14, and add the new samtools samples command to pysam/samtools.py.
(Fixes #1048, which was caused by an HTSlib bug that is fixed in 1.14.)
HTSlib 1.14 is stricter about parsing the #CHROM header in VCF files, so tidy up the trailing tab characters in a few test VCF files to avoid spurious test failures.","Hi @jmarshall , many thanks. I could try releasing tonight? Alternatively, I will be off for rest of week (mid-terms) but could otherwise release next weekend.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1054,2021-10-24T22:04:32Z,2021-11-01T15:00:13Z,2021-11-01T15:08:51Z,MERGED,True,6577,3121,129,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.14,4,[],https://github.com/pysam-developers/pysam/pull/1054,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1054#issuecomment-951029930,"Import htslib, samtools, and bcftools 1.14, and add the new samtools samples command to pysam/samtools.py.
(Fixes #1048, which was caused by an HTSlib bug that is fixed in 1.14.)
HTSlib 1.14 is stricter about parsing the #CHROM header in VCF files, so tidy up the trailing tab characters in a few test VCF files to avoid spurious test failures.","I think our main reason for making a release would be to add a 3.10 wheel — unluckily for us, Python 3.10.0 was released a few days after pysam 0.17.0!
I was also working on #1053 over the weekend, and I've taken the liberty of pushing my fix for that straight to master. But there's nothing else imminent in my pipeline.
So I think making a small release that just addresses that, this import, and 3.10 wheels1 would be great. Either tonight or the weekend, whatever works for you.
Footnotes


There's also the question of AArch64 wheels, but I'm guessing that'd be more work and could come later. ↩",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1054,2021-10-24T22:04:32Z,2021-11-01T15:00:13Z,2021-11-01T15:08:51Z,MERGED,True,6577,3121,129,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.14,4,[],https://github.com/pysam-developers/pysam/pull/1054,https://github.com/AndreasHegerGenomics,4,https://github.com/pysam-developers/pysam/pull/1054#issuecomment-951243269,"Import htslib, samtools, and bcftools 1.14, and add the new samtools samples command to pysam/samtools.py.
(Fixes #1048, which was caused by an HTSlib bug that is fixed in 1.14.)
HTSlib 1.14 is stricter about parsing the #CHROM header in VCF files, so tidy up the trailing tab characters in a few test VCF files to avoid spurious test failures.","Thanks, finding the time to release tonight was too optimistic as usual. Will revisit on the weekend.",True,{'LAUGH': ['https://github.com/jmarshall']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/kpalin,1,https://github.com/pysam-developers/pysam/pull/1061,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,True,{'ROCKET': ['https://github.com/a-slide']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/rrazaghi,2,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1011712232,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,"Is there a plan to merge this? or fully support modified bases in pysam?
This would be a huge help for long-read tool development!
Thanks!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1051009894,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,"These API functions were new in HTSlib 1.14. AIUI pysam tries to be compatible with a range of HTSlib versions, so starting to use such recent API functions would require a policy decision.
On the other hand, as pysam imports recent versions of samtools & bcftools and these generally require correspondingly recent versions of htslib, it's possible that pysam as a whole is only compatible with recent htslib after all.
Either way, it would be good to have a ruling from the maintainers on the direction and policy here.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1051047939,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,"Thanks. pysam generally used to be tied to a particular htslib version. It might only recently have been the case that it became compatible with multiple htslib versions, most likely due to lack of new feature-development on pysam's side (for which I apologize). In my view, providing access to new htslib features take precedence over backwards compatibility to older htslib versions.",True,{'THUMBS_UP': ['https://github.com/jmarshall']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1051100894,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,"Many thanks, @kpalin , merging now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1051174842,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,"I merged your changes manually as I wanted to run tests locally, but this seems not get recorded here. You are still credited as author, though, so hope that is all ok.
Many thanks.
I noticed you referenced some test data files (MM-pileup1.sam and MM-pileup2.sam). Did you create these locally?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1061,2021-11-15T07:46:41Z,2022-02-25T20:09:22Z,2022-02-25T20:09:43Z,CLOSED,False,874,463,3,https://github.com/kpalin,Base mods,3,[],https://github.com/pysam-developers/pysam/pull/1061,https://github.com/AndreasHeger,7,https://github.com/pysam-developers/pysam/pull/1061#issuecomment-1051191070,Partial interface to htslib modified base interface. Currently only returns query and reference coordinates of an AlignedSegment. No pileup or point query interaces.,Closing for now.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1062,2021-11-16T11:31:20Z,2021-11-16T11:36:24Z,2021-11-16T11:36:28Z,MERGED,True,23,9,3,https://github.com/AndreasHeger,V0.18.x,19,[],https://github.com/pysam-developers/pysam/pull/1062,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/1062,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1063,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1051212157,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","Thanks, @marcelm , I am very much in favour of pep8 and automatic linting as part of CI.",True,{'THUMBS_UP': ['https://github.com/marcelm']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/marcelm,3,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1051306940,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)",Thanks for the encouragement :-). I pushed a few more commits that fix other things flake8 complains about and also added setup.py and cy_build.py to the list of files to check.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1051343654,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","As a counterpoint: Automatic linting against unfamiliar rules will make contributing to pysam harder for those who are not intimately familiar with these rules. I count myself amongst that category, and I am not in favour of things that make it harder for me to contribute to pysam. 😄
Some of this is reasonable and suitable for automatic linting; a passing familiarity with PEP-8 and typical Python code layout is fair to assume from contributors. Some other rules are arbitrary and prescriptivist, serve mainly to discourage contributors without substantially (or at all in some cases) improving readability, and IMHO pysam would do well to leave them deactivated.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/marcelm,5,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1059219860,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","I’ve backed out the additional changes. I have left in my changes fixing ""F401 '...' imported but unused"" and ""E111 indentation is not a multiple of 4"".
I am also totally fine with removing the CI job if one of you is worried about current or future contributors being annoyed by CI complaints.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/AndreasHeger,6,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1069637619,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","Thanks both. These are all valid points.
We can run the linting CI job as a report initially, but it is good to have the infrastructure in place now.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/marcelm,7,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1072643724,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","Unfortunately, it’s not possible to run a GitHub Actions job and let its result be ignored, so I have removed the ""lint"" job. The benefit of this PR is now a one-time fix of a couple of style issues and unused imports and addition of flake8 configuration settings.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1063,2021-11-26T11:08:03Z,2022-03-22T21:36:58Z,2022-03-22T21:36:58Z,MERGED,True,56,46,17,https://github.com/marcelm,Run flake8 and fix some linting issues,8,[],https://github.com/pysam-developers/pysam/pull/1063,https://github.com/AndreasHeger,8,https://github.com/pysam-developers/pysam/pull/1063#issuecomment-1075667409,"Whenever I open up the pysam source code in PyCharm, I get a lot of warnings from the built-in code style checker: Unused imports, weird indentation, too many blank lines, trailing whitespace etc. ... I have somewhat gotten used to working with code that uses an automatic style checker, mostly flake8, so I wonder if this would be something that could be considered for pysam.
In this PR, I’ve

added a ""lint"" job to the GitHub Action workflow that runs flake8
configured flake8 to ignore all the existing problems it finds
re-enabled a couple of these checks while at the same time fixing them in the source code

The idea is to re-enable the checks one by one. I can do this for some of the checks if there’s interest.
I’m aware that style checking is a matter of personal preference, and perhaps it’s not desirable to have CI fail ""just"" because of style issues, so I’m perfectly ok if this doesn’t get accepted.
(I use Black in other projects, but didn’t want to bring this up, yet, but it’s of course another option.)","Ok, thanks.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1071,2022-01-13T10:45:48Z,2022-03-24T19:37:50Z,2022-03-24T19:37:50Z,MERGED,True,25,7,1,https://github.com/odidev,Add Linux AArch64 wheel build support,1,[],https://github.com/pysam-developers/pysam/pull/1071,https://github.com/odidev,1,https://github.com/pysam-developers/pysam/pull/1071,Closes #1029,Closes #1029,True,{'HOORAY': ['https://github.com/arogozhnikov']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1071,2022-01-13T10:45:48Z,2022-03-24T19:37:50Z,2022-03-24T19:37:50Z,MERGED,True,25,7,1,https://github.com/odidev,Add Linux AArch64 wheel build support,1,[],https://github.com/pysam-developers/pysam/pull/1071,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1071#issuecomment-1078035278,Closes #1029,Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1073,2022-01-16T09:23:07Z,2022-01-17T12:11:41Z,2022-01-17T12:14:50Z,MERGED,True,37,37,3,https://github.com/heavywatal,Replace old print statements in doc examples,1,[],https://github.com/pysam-developers/pysam/pull/1073,https://github.com/heavywatal,1,https://github.com/pysam-developers/pysam/pull/1073,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1073,2022-01-16T09:23:07Z,2022-01-17T12:11:41Z,2022-01-17T12:14:50Z,MERGED,True,37,37,3,https://github.com/heavywatal,Replace old print statements in doc examples,1,[],https://github.com/pysam-developers/pysam/pull/1073,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1073#issuecomment-1014455165,,"Good idea, thanks.",True,{'HOORAY': ['https://github.com/heavywatal']}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1074,2022-01-21T04:51:00Z,2022-02-25T20:10:08Z,2022-02-25T20:10:08Z,MERGED,True,143,134,11,https://github.com/TimD1,Small updates and grammar/typo fixes to FAQ doc,3,[],https://github.com/pysam-developers/pysam/pull/1074,https://github.com/TimD1,1,https://github.com/pysam-developers/pysam/pull/1074,"some grammar corrections, typo fixes: multiple_iterator(s), libc(s)amtools
= changed to ==
qual/seq updated in example to query_qualities/query_sequence
AlignedRead updated to AlignedSegment","some grammar corrections, typo fixes: multiple_iterator(s), libc(s)amtools
= changed to ==
qual/seq updated in example to query_qualities/query_sequence
AlignedRead updated to AlignedSegment",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1074,2022-01-21T04:51:00Z,2022-02-25T20:10:08Z,2022-02-25T20:10:08Z,MERGED,True,143,134,11,https://github.com/TimD1,Small updates and grammar/typo fixes to FAQ doc,3,[],https://github.com/pysam-developers/pysam/pull/1074,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1074#issuecomment-1051179192,"some grammar corrections, typo fixes: multiple_iterator(s), libc(s)amtools
= changed to ==
qual/seq updated in example to query_qualities/query_sequence
AlignedRead updated to AlignedSegment",Thanks,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,1,https://github.com/pysam-developers/pysam/pull/1078,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051130885,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Thanks, @terrycojones , this looks good to me.
I will add some explanation to the documentation.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,3,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051140108,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Hi @AndreasHeger - thanks for the reply. Do you mean you'll add some explanation on how to rebuild & run all tests, etc? Or add to the docs to mention this change in the behavior of the function? I'm happy to help out further in either case.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051183632,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Sorry, I was not very clear, I meant to add some text to the docstring.
The .pxd files are manually created and contain declarations, similar to header files (.h) in C. They need not be re-generated. To rebuild, I usually do this:
rm -rf build/ pysam/*.so pysam/lib*.c
python setup.py develop

This removes all the compiled files, forcing a full re-compilation. I then run tests with:
pytest tests/",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051220895,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","I have also enabled the CI tests.
If you find the time to look at the tests, that would be great, and if you could add an explanation to the docstrings, that would also be good.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,6,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051386306,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","OK, I've made some progress. My reading of the SAM spec (section 3.1) is that when a CIGAR string contains a P we are dealing with a situation in which some tool has inserted (normally) * chars into the reference sequence in order to make it simple to specify insertions to the reference using P in the CIGAR string.  This is different from ""Padded SAM"" (section 3.2) in which the P operation is not used.
In other words, this is just an insertion into the reference, though specified in a different way.  So I have modified the pull request to mirror what is done when there is an insertion to the reference. One can tell the difference (if needed), either by looking at the CIGAR operations or by passing with_seq=True to get_aligned_pairs (in which case a * comes back as the reference character, following the convention suggested by the SAM spec). None could also be returned as the reference character in this case. I don't see any harm in providing this information via * but strictly speaking it's not needed since the caller can always see the P in the CIGAR string if they really care.
BTW, I put a call to free(s) into build_alignment_sequence right before a raise of an AssertionError. It's unlikely, but a caller could write a loop that repeatedly calls build_alignment_sequence and ignores the exception and there would be a memory leak. I can remove the free(s) call if you like.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,7,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051386562,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077",And thanks for the help on rebuilding!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,8,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1051788030,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","In the light of day, I now think it would be more consistent to use None for the reference, not *. Then get_aligned_pairs could treat BAM_CPAD exactly as it already treats BAM_INS and BAM_CSOFT_CLIP because this really is an insertion. Another argument for treating them in the same way is that existing (and future) code calling get_aligned_pairs will just work and be simpler. There may be existing code that currently catches and ignores a NotImplementedError that will now not occur - instead the flow of control will pass through the insertion logic, as it should do. So the change in this pull request could cause existing code to behave differently (e.g., to produce a little more output because a formerly unsupported CIGAR string is now supported). I hope I'm making sense...",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,9,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1057457064,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Any opinion on this? Shall I switch to using None?  This is non-urgent for me, so no rush, just wondering.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/AndreasHeger,10,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1069625845,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Hi @terrycojones , many thanks for this and your great explanations. I agree that using None sounds much simpler and avoids having a user check for *.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,11,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1076867744,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077","Hi @AndreasHeger OK, done. Sorry for the slowness - I redirect GitHub emails to folder I rarely look at...  I hope this works!",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/AndreasHeger,12,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1078031440,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077",Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1078,2022-02-05T15:55:30Z,2022-03-24T19:36:35Z,2022-03-26T12:00:13Z,MERGED,True,48,30,2,https://github.com/terrycojones,Support BAM_CPAD in get_aligned_pairs,4,[],https://github.com/pysam-developers/pysam/pull/1078,https://github.com/terrycojones,13,https://github.com/pysam-developers/pysam/pull/1078#issuecomment-1079671265,"Hi. This isn't ready to be merged, I'm just making the first step towards making handling of BAM_CPAD not throw an exception in get_aligned_pairs so that people who use that function can continue to call it and deal with the result themselves.  But I don't know my way around the pysam codebase at all, so would like a little help, please! :-)
I don't know how to rebuild pysam/libcalignedsegment.pxd in order to run the tests on the new code. I tried python setup.py build_ext --inplace but it built me a pysam/libcalignedsegment.cpython-310-darwin.so and when I run the test the old behavior is still in place. I moved the corresponding .pxd file aside, but that didn't help.
I'm not sure if my tests are correct, but will be happy to fix them if not.
Thanks!  All this is on the assumption that what I suggested in #1077 seems like an ok approach.
Fixes #1077",@AndreasHeger and thanks to you!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1080,2022-02-13T14:32:17Z,2022-02-25T19:22:05Z,2022-02-25T19:22:05Z,MERGED,True,11,11,1,https://github.com/marcelm,No longer refer to deprecated attributes in AlignedSegment attribute descriptions,1,[],https://github.com/pysam-developers/pysam/pull/1080,https://github.com/marcelm,1,https://github.com/pysam-developers/pysam/pull/1080,"Some of the attribute docstrings refer to deprecated attributes. For example, reference_length is described as being equal to aend - pos. This PR fixes those outdated descriptions.","Some of the attribute docstrings refer to deprecated attributes. For example, reference_length is described as being equal to aend - pos. This PR fixes those outdated descriptions.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1080,2022-02-13T14:32:17Z,2022-02-25T19:22:05Z,2022-02-25T19:22:05Z,MERGED,True,11,11,1,https://github.com/marcelm,No longer refer to deprecated attributes in AlignedSegment attribute descriptions,1,[],https://github.com/pysam-developers/pysam/pull/1080,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1080#issuecomment-1051128997,"Some of the attribute docstrings refer to deprecated attributes. For example, reference_length is described as being equal to aend - pos. This PR fixes those outdated descriptions.",Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1083,2022-03-03T00:47:30Z,2022-03-22T21:32:47Z,2022-03-22T22:58:43Z,MERGED,True,9812,5582,141,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.15 and resolve symbol conflicts,8,[],https://github.com/pysam-developers/pysam/pull/1083,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1083,"Instead of rewriting clashing symbols like main_reheader() in devtools/import.py, #define them in import/pysam.h so that the C preprocessor replaces them with distinct per-tool-prefixed symbol names. This is effective in both *.c and *.h files.


Add an extra step to python3 setup.py build that detects any symbol conflicts, causing build failure if there are any. This is really a build error, just as one of the Cython extensions failing to build or link would be.


Do the actual imports of the upstream 1.15 releases.


Add more #define directives to import/pysam.h to resolve all remaining symbol conflicts. (Since VCF/BCF mpileup was removed in samtools 1.15, there are many fewer conflicts than there were in 1.14.) This, together with failing the build if any conflicts reappear in future, fixes #1081 once and for all.


Add 1.15's new subcommands: samtools consensus & head, and bcftools head.","Instead of rewriting clashing symbols like main_reheader() in devtools/import.py, #define them in import/pysam.h so that the C preprocessor replaces them with distinct per-tool-prefixed symbol names. This is effective in both *.c and *.h files.


Add an extra step to python3 setup.py build that detects any symbol conflicts, causing build failure if there are any. This is really a build error, just as one of the Cython extensions failing to build or link would be.


Do the actual imports of the upstream 1.15 releases.


Add more #define directives to import/pysam.h to resolve all remaining symbol conflicts. (Since VCF/BCF mpileup was removed in samtools 1.15, there are many fewer conflicts than there were in 1.14.) This, together with failing the build if any conflicts reappear in future, fixes #1081 once and for all.


Add 1.15's new subcommands: samtools consensus & head, and bcftools head.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1083,2022-03-03T00:47:30Z,2022-03-22T21:32:47Z,2022-03-22T22:58:43Z,MERGED,True,9812,5582,141,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.15 and resolve symbol conflicts,8,[],https://github.com/pysam-developers/pysam/pull/1083,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1083#issuecomment-1069627128,"Instead of rewriting clashing symbols like main_reheader() in devtools/import.py, #define them in import/pysam.h so that the C preprocessor replaces them with distinct per-tool-prefixed symbol names. This is effective in both *.c and *.h files.


Add an extra step to python3 setup.py build that detects any symbol conflicts, causing build failure if there are any. This is really a build error, just as one of the Cython extensions failing to build or link would be.


Do the actual imports of the upstream 1.15 releases.


Add more #define directives to import/pysam.h to resolve all remaining symbol conflicts. (Since VCF/BCF mpileup was removed in samtools 1.15, there are many fewer conflicts than there were in 1.14.) This, together with failing the build if any conflicts reappear in future, fixes #1081 once and for all.


Add 1.15's new subcommands: samtools consensus & head, and bcftools head.","Hi @jmarshall , thank you so much for this. Is the MR ok to be merged?",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1083,2022-03-03T00:47:30Z,2022-03-22T21:32:47Z,2022-03-22T22:58:43Z,MERGED,True,9812,5582,141,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.15 and resolve symbol conflicts,8,[],https://github.com/pysam-developers/pysam/pull/1083,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1083#issuecomment-1069630507,"Instead of rewriting clashing symbols like main_reheader() in devtools/import.py, #define them in import/pysam.h so that the C preprocessor replaces them with distinct per-tool-prefixed symbol names. This is effective in both *.c and *.h files.


Add an extra step to python3 setup.py build that detects any symbol conflicts, causing build failure if there are any. This is really a build error, just as one of the Cython extensions failing to build or link would be.


Do the actual imports of the upstream 1.15 releases.


Add more #define directives to import/pysam.h to resolve all remaining symbol conflicts. (Since VCF/BCF mpileup was removed in samtools 1.15, there are many fewer conflicts than there were in 1.14.) This, together with failing the build if any conflicts reappear in future, fixes #1081 once and for all.


Add 1.15's new subcommands: samtools consensus & head, and bcftools head.","Yes, it's passed my testing and I believe is ready to be merged. You may wish to test it too 😄",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1083,2022-03-03T00:47:30Z,2022-03-22T21:32:47Z,2022-03-22T22:58:43Z,MERGED,True,9812,5582,141,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.15 and resolve symbol conflicts,8,[],https://github.com/pysam-developers/pysam/pull/1083,https://github.com/AndreasHeger,4,https://github.com/pysam-developers/pysam/pull/1083#issuecomment-1069633541,"Instead of rewriting clashing symbols like main_reheader() in devtools/import.py, #define them in import/pysam.h so that the C preprocessor replaces them with distinct per-tool-prefixed symbol names. This is effective in both *.c and *.h files.


Add an extra step to python3 setup.py build that detects any symbol conflicts, causing build failure if there are any. This is really a build error, just as one of the Cython extensions failing to build or link would be.


Do the actual imports of the upstream 1.15 releases.


Add more #define directives to import/pysam.h to resolve all remaining symbol conflicts. (Since VCF/BCF mpileup was removed in samtools 1.15, there are many fewer conflicts than there were in 1.14.) This, together with failing the build if any conflicts reappear in future, fixes #1081 once and for all.


Add 1.15's new subcommands: samtools consensus & head, and bcftools head.","Will do. And again, many thanks, you have again done all the heavy lifting.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1085,2022-03-04T22:42:43Z,2022-03-24T19:37:02Z,2022-03-24T20:04:00Z,MERGED,True,32,68,9,https://github.com/jmarshall,Improve getopt()/getopt_long() resetting when running samtools/bcftools commands,2,[],https://github.com/pysam-developers/pysam/pull/1085,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1085,"The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.","The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1085,2022-03-04T22:42:43Z,2022-03-24T19:37:02Z,2022-03-24T20:04:00Z,MERGED,True,32,68,9,https://github.com/jmarshall,Improve getopt()/getopt_long() resetting when running samtools/bcftools commands,2,[],https://github.com/pysam-developers/pysam/pull/1085,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1085#issuecomment-1069628451,"The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.","Thank you, great stuff, I will apply it after #1083 has been merged.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1085,2022-03-04T22:42:43Z,2022-03-24T19:37:02Z,2022-03-24T20:04:00Z,MERGED,True,32,68,9,https://github.com/jmarshall,Improve getopt()/getopt_long() resetting when running samtools/bcftools commands,2,[],https://github.com/pysam-developers/pysam/pull/1085,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1085#issuecomment-1069632588,"The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.",I'll need to rebase and update it (after #1083 lands) before this one can be merged.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1085,2022-03-04T22:42:43Z,2022-03-24T19:37:02Z,2022-03-24T20:04:00Z,MERGED,True,32,68,9,https://github.com/jmarshall,Improve getopt()/getopt_long() resetting when running samtools/bcftools commands,2,[],https://github.com/pysam-developers/pysam/pull/1085,https://github.com/jmarshall,4,https://github.com/pysam-developers/pysam/pull/1085#issuecomment-1075744495,"The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.",@AndreasHeger: This one is updated and ready for merging now too.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1085,2022-03-04T22:42:43Z,2022-03-24T19:37:02Z,2022-03-24T20:04:00Z,MERGED,True,32,68,9,https://github.com/jmarshall,Improve getopt()/getopt_long() resetting when running samtools/bcftools commands,2,[],https://github.com/pysam-developers/pysam/pull/1085,https://github.com/AndreasHeger,5,https://github.com/pysam-developers/pysam/pull/1085#issuecomment-1078033200,"The getopt() and getopt_long() functions have internal state tracking the option parsing that needs to be reset when user code wants to start processing a different argc/argv pair, i.e., when running a samtools or bcftools command (apart from the first time such a command is run in a Python session).
7954ff1 improved resetting on macOS but broke it on Linux. This PR rewrites it to work on both platforms. Resetting is not standardised by POSIX but varies by C library:

GNU libc defines its own way by setting optind to 0. (This is barely documented, but is described in the getopt.h header.)
BSD-derived systems use an extra optreset variable, which can be detected via a preprocessor symbol: some BSDs define _OPTRESET_DECLARED, while macOS has defined _OPTRESET since 10.4 (Tiger).
Otherwise the best attempt just sets optind to 1.

This PR adds those three variants to @pysam@_dispatch() and reruns devtools/import.py to regenerate the samtools/bcftools files derived from pysam/import.c. Fixes #813 and fixes #1084.
Because this affects the same imported files as PR #1083, the best way to apply it will be to merge #1083 first and then rebase (and re-import) this on top of the 1.15 import. Hence this PR is left as draft until then.",Many thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1088,2022-03-09T17:51:22Z,2022-03-16T21:03:34Z,2022-03-16T21:09:44Z,MERGED,True,66,5,4,https://github.com/jmarshall,Add AlignedSegment is_mapped/mate_is_mapped/is_forward/mate_is_forward properties,2,[],https://github.com/pysam-developers/pysam/pull/1088,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1088,"These are opposites of the existing is_unmapped/mate_is_unmapped/is_reverse/mate_is_reverse properties. The existing properties match the sense of the underlying flag bits; these proposed additions allow more natural conditions to be written in some cases:
if not aln.is_unmapped:
    print('stilted way to say if mapped')

if aln.is_mapped:
    print('more natural')

if aln.is_forward:
    print('handle the forward case first')
else:
    print('then the reverse case')
Inspired by a minor grizzle by Nick Loman.","These are opposites of the existing is_unmapped/mate_is_unmapped/is_reverse/mate_is_reverse properties. The existing properties match the sense of the underlying flag bits; these proposed additions allow more natural conditions to be written in some cases:
if not aln.is_unmapped:
    print('stilted way to say if mapped')

if aln.is_mapped:
    print('more natural')

if aln.is_forward:
    print('handle the forward case first')
else:
    print('then the reverse case')
Inspired by a minor grizzle by Nick Loman.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1088,2022-03-09T17:51:22Z,2022-03-16T21:03:34Z,2022-03-16T21:09:44Z,MERGED,True,66,5,4,https://github.com/jmarshall,Add AlignedSegment is_mapped/mate_is_mapped/is_forward/mate_is_forward properties,2,[],https://github.com/pysam-developers/pysam/pull/1088,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1088#issuecomment-1069629614,"These are opposites of the existing is_unmapped/mate_is_unmapped/is_reverse/mate_is_reverse properties. The existing properties match the sense of the underlying flag bits; these proposed additions allow more natural conditions to be written in some cases:
if not aln.is_unmapped:
    print('stilted way to say if mapped')

if aln.is_mapped:
    print('more natural')

if aln.is_forward:
    print('handle the forward case first')
else:
    print('then the reverse case')
Inspired by a minor grizzle by Nick Loman.","Thanks, it is nice to be nice :=)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1088,2022-03-09T17:51:22Z,2022-03-16T21:03:34Z,2022-03-16T21:09:44Z,MERGED,True,66,5,4,https://github.com/jmarshall,Add AlignedSegment is_mapped/mate_is_mapped/is_forward/mate_is_forward properties,2,[],https://github.com/pysam-developers/pysam/pull/1088,https://github.com/jmarshall,3,https://github.com/pysam-developers/pysam/pull/1088#issuecomment-1069633119,"These are opposites of the existing is_unmapped/mate_is_unmapped/is_reverse/mate_is_reverse properties. The existing properties match the sense of the underlying flag bits; these proposed additions allow more natural conditions to be written in some cases:
if not aln.is_unmapped:
    print('stilted way to say if mapped')

if aln.is_mapped:
    print('more natural')

if aln.is_forward:
    print('handle the forward case first')
else:
    print('then the reverse case')
Inspired by a minor grizzle by Nick Loman.",Thanks!,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1091,2022-03-29T19:10:43Z,2022-03-29T19:10:54Z,2022-03-29T19:10:59Z,MERGED,True,135,2,4,https://github.com/AndreasHeger,V0.19.0.x,3,[],https://github.com/pysam-developers/pysam/pull/1091,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/1091,,,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1092,2022-03-30T16:32:40Z,2022-05-26T18:03:14Z,2022-05-26T18:03:15Z,MERGED,True,50,0,3,https://github.com/ajcr,Add VariantRecord.alleles_variant_types,1,[],https://github.com/pysam-developers/pysam/pull/1092,https://github.com/ajcr,1,https://github.com/pysam-developers/pysam/pull/1092,"This adds a read-only property alleles_variant_types to VaraintRecord.
In the past, I've needed a way to check variant types when processing VCF files (splitting/counting records or samples based on type). The HTSlib function bcf_get_variant_type can be used for this but is not currently exposed via pysam.
This new property returns a tuple containing the type of each variant in VaraintRecord.alleles.
(I couldn't decide on the right name, but wanted to associate it with VariantRecord.alleles as it returns a tuple of the same length but with the type of each allele - happy to change it to something better.)","This adds a read-only property alleles_variant_types to VaraintRecord.
In the past, I've needed a way to check variant types when processing VCF files (splitting/counting records or samples based on type). The HTSlib function bcf_get_variant_type can be used for this but is not currently exposed via pysam.
This new property returns a tuple containing the type of each variant in VaraintRecord.alleles.
(I couldn't decide on the right name, but wanted to associate it with VariantRecord.alleles as it returns a tuple of the same length but with the type of each allele - happy to change it to something better.)",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1092,2022-03-30T16:32:40Z,2022-05-26T18:03:14Z,2022-05-26T18:03:15Z,MERGED,True,50,0,3,https://github.com/ajcr,Add VariantRecord.alleles_variant_types,1,[],https://github.com/pysam-developers/pysam/pull/1092,https://github.com/AndreasHeger,2,https://github.com/pysam-developers/pysam/pull/1092#issuecomment-1108960723,"This adds a read-only property alleles_variant_types to VaraintRecord.
In the past, I've needed a way to check variant types when processing VCF files (splitting/counting records or samples based on type). The HTSlib function bcf_get_variant_type can be used for this but is not currently exposed via pysam.
This new property returns a tuple containing the type of each variant in VaraintRecord.alleles.
(I couldn't decide on the right name, but wanted to associate it with VariantRecord.alleles as it returns a tuple of the same length but with the type of each allele - happy to change it to something better.)","Thanks, very useful. Will merge.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1101,2022-04-07T22:14:02Z,2022-04-25T19:32:12Z,2022-05-23T16:56:23Z,MERGED,True,483,304,35,https://github.com/jmarshall,Update imports to htslib/samtools/bcftools 1.15.1,1,[],https://github.com/pysam-developers/pysam/pull/1101,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1101,"These upstream releases are small bug-fix releases over 1.15, so for once there is nothing to do beyond the basic import.","These upstream releases are small bug-fix releases over 1.15, so for once there is nothing to do beyond the basic import.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1105,2022-05-20T15:28:39Z,2022-05-26T18:02:44Z,2022-05-26T20:06:33Z,MERGED,True,34,14,5,https://github.com/jmarshall,New VariantHeader.add_samples() method to add multiple samples at once,2,[],https://github.com/pysam-developers/pysam/pull/1105,https://github.com/jmarshall,1,https://github.com/pysam-developers/pysam/pull/1105,"Issue #1104 reports that adding hundreds of thousands of samples to a VCF header via the same number of calls to VariantHeader.add_sample() is very slow. I suspect this is because add_sample() does a bcf_hdr_sync() (itself an O(N) operation) for every sample added, leading to O(N2) behaviour.
This PR adds a new add_samples() method that can add an arbitrary number of samples and then call bcf_hdr_sync() once. It also adds an internal wrapper for bcf_hdr_sync that adds error checking.
def add_samples(self, *args):
    """"""Add several new samples to this header.
    This function takes multiple arguments, each of which may
    be either a sample name or an iterable returning sample names
    (e.g., a list of sample names).
    """"""","Issue #1104 reports that adding hundreds of thousands of samples to a VCF header via the same number of calls to VariantHeader.add_sample() is very slow. I suspect this is because add_sample() does a bcf_hdr_sync() (itself an O(N) operation) for every sample added, leading to O(N2) behaviour.
This PR adds a new add_samples() method that can add an arbitrary number of samples and then call bcf_hdr_sync() once. It also adds an internal wrapper for bcf_hdr_sync that adds error checking.
def add_samples(self, *args):
    """"""Add several new samples to this header.
    This function takes multiple arguments, each of which may
    be either a sample name or an iterable returning sample names
    (e.g., a list of sample names).
    """"""",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1105,2022-05-20T15:28:39Z,2022-05-26T18:02:44Z,2022-05-26T20:06:33Z,MERGED,True,34,14,5,https://github.com/jmarshall,New VariantHeader.add_samples() method to add multiple samples at once,2,[],https://github.com/pysam-developers/pysam/pull/1105,https://github.com/jmarshall,2,https://github.com/pysam-developers/pysam/pull/1105#issuecomment-1133086924,"Issue #1104 reports that adding hundreds of thousands of samples to a VCF header via the same number of calls to VariantHeader.add_sample() is very slow. I suspect this is because add_sample() does a bcf_hdr_sync() (itself an O(N) operation) for every sample added, leading to O(N2) behaviour.
This PR adds a new add_samples() method that can add an arbitrary number of samples and then call bcf_hdr_sync() once. It also adds an internal wrapper for bcf_hdr_sync that adds error checking.
def add_samples(self, *args):
    """"""Add several new samples to this header.
    This function takes multiple arguments, each of which may
    be either a sample name or an iterable returning sample names
    (e.g., a list of sample names).
    """"""","Now tested that the new add_samples() function can add 400,000 samples in a second, thus confirming that doing bcf_hdr_sync() only once solves the reported slowness problem.
This could be done compatibly by altering the arguments of add_sample() instead, so that it could take one or many arguments or iterables — existing code using foo.add_sample(""bar"") would still do the same thing. But I considered that there was a difference in emphasis between add-one-sample and add-lots-of-samples that was worth reflecting in the new add_samples() function name.",True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1105,2022-05-20T15:28:39Z,2022-05-26T18:02:44Z,2022-05-26T20:06:33Z,MERGED,True,34,14,5,https://github.com/jmarshall,New VariantHeader.add_samples() method to add multiple samples at once,2,[],https://github.com/pysam-developers/pysam/pull/1105,https://github.com/AndreasHeger,3,https://github.com/pysam-developers/pysam/pull/1105#issuecomment-1138864769,"Issue #1104 reports that adding hundreds of thousands of samples to a VCF header via the same number of calls to VariantHeader.add_sample() is very slow. I suspect this is because add_sample() does a bcf_hdr_sync() (itself an O(N) operation) for every sample added, leading to O(N2) behaviour.
This PR adds a new add_samples() method that can add an arbitrary number of samples and then call bcf_hdr_sync() once. It also adds an internal wrapper for bcf_hdr_sync that adds error checking.
def add_samples(self, *args):
    """"""Add several new samples to this header.
    This function takes multiple arguments, each of which may
    be either a sample name or an iterable returning sample names
    (e.g., a list of sample names).
    """"""",Thanks for this and agree that a separate function makes sense.,True,{}
pysam-developers/pysam,https://github.com/pysam-developers/pysam,1109,2022-05-26T19:14:18Z,2022-05-26T19:14:30Z,2022-05-26T19:14:37Z,MERGED,True,23,4,4,https://github.com/AndreasHeger,V0.19.1.x,9,[],https://github.com/pysam-developers/pysam/pull/1109,https://github.com/AndreasHeger,1,https://github.com/pysam-developers/pysam/pull/1109,,,True,{}
