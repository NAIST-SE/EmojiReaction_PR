AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,690,2016-03-09T21:58:34Z,2016-03-09T22:18:56Z,2016-03-09T22:19:00Z,MERGED,True,52,16,3,https://github.com/JoshEngebretson,"Better directory copy logic, present error message instead of crashing if can't copy project template",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/690,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/690,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,692,2016-03-10T19:24:08Z,2016-03-10T20:53:57Z,2016-03-10T20:54:01Z,MERGED,True,298,4,12,https://github.com/JoshEngebretson,Adding WebView global properties,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/692,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/692,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/honigbeutler123,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/honigbeutler123,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195024115,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,#687,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/AtomicBuildBot,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195024264,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/honigbeutler123,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195063968,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,"Okay i googled and found no real good way for searching if git is in the path, i made my own solution. If git is not there it makes the cmake file without webview. i did not test if that build is working.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/honigbeutler123,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195064550,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,ah i did not read this with the should exit message. Should i change it ? would make the code less ugly because of this ultra if else case,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195091172,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,Thanks :)  How about the FindGit module? https://cmake.org/cmake/help/v3.0/module/FindGit.html,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/honigbeutler123,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195248484,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,"Hmm i wonder how google did not provide this on the front page with ""cmake git find"" ... okay so i obviously use this now and made it Required if cef is not initialising to stop the build in that case.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-195433007,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,"Awesome, I'll give it a test soon, THANKS! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,693,2016-03-10T20:01:25Z,2016-03-15T17:59:04Z,2016-03-15T17:59:08Z,MERGED,True,14,0,1,https://github.com/honigbeutler123,Auto load submodules fix #687,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/693#issuecomment-196949581,Hi just wanted to build this and found this. It works this way. You might want to reconsider the location if you want to add more submodules though.,"Works great, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,694,2016-03-10T22:55:14Z,2016-03-10T23:21:57Z,2016-03-10T23:22:00Z,MERGED,True,30,4,1,https://github.com/JoshEngebretson,Update for loading a String into WebView before browser is created,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/694,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/694,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,695,2016-03-11T00:29:24Z,2016-03-11T00:50:10Z,2016-03-11T00:50:14Z,MERGED,True,1205,22,9,https://github.com/JoshEngebretson,Adding Windows 32 bit build support,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/695,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/695,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,698,2016-03-15T16:52:49Z,2016-03-15T17:19:50Z,2016-03-15T17:19:52Z,MERGED,True,2,1,1,https://github.com/JoshEngebretson,Don't require CoreData for headless builds,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/698,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/698,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,699,2016-03-15T17:25:46Z,2016-03-15T17:55:21Z,2016-03-15T17:55:25Z,MERGED,True,19,2,4,https://github.com/JoshEngebretson,"Adding accessor for IPC other process, terminate for Windows",7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/699,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/699,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,703,2016-03-16T15:19:13Z,2016-03-18T15:26:25Z,2016-04-06T12:55:20Z,MERGED,True,5,0,1,https://github.com/mattbenic,Issue #576 User can no longer enter exclusive fullscreen mode during ‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/703,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/703,"‚Ä¶Editor mode, but can enter fullscreen when in Play Mode.","‚Ä¶Editor mode, but can enter fullscreen when in Play Mode.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,703,2016-03-16T15:19:13Z,2016-03-18T15:26:25Z,2016-04-06T12:55:20Z,MERGED,True,5,0,1,https://github.com/mattbenic,Issue #576 User can no longer enter exclusive fullscreen mode during ‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/703,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/703#issuecomment-198409245,"‚Ä¶Editor mode, but can enter fullscreen when in Play Mode.","LANDED! ‚úàÔ∏è
Closes #576",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,704,2016-03-16T15:36:01Z,2016-03-18T15:30:17Z,2016-04-06T12:55:38Z,MERGED,True,10,0,1,https://github.com/mattbenic,"Issue #577: Added ""Clear Preferences"" to developer menu. Also added I‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/704,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/704,"‚Ä¶F-statement to be used by the clear prefences option. Sets all values in prefs.json to default values, clears recent project list and shuts down the editor.","‚Ä¶F-statement to be used by the clear prefences option. Sets all values in prefs.json to default values, clears recent project list and shuts down the editor.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,704,2016-03-16T15:36:01Z,2016-03-18T15:30:17Z,2016-04-06T12:55:38Z,MERGED,True,10,0,1,https://github.com/mattbenic,"Issue #577: Added ""Clear Preferences"" to developer menu. Also added I‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/704,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/704#issuecomment-198409662,"‚Ä¶F-statement to be used by the clear prefences option. Sets all values in prefs.json to default values, clears recent project list and shuts down the editor.","Looks good!  Thanks!
Closes #577",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,705,2016-03-16T15:58:20Z,2016-08-19T18:38:15Z,2016-08-19T18:38:15Z,CLOSED,False,34,9,6,https://github.com/mattbenic,Issue #437: Can't add a class without a default public constructor to JSBind,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,705,2016-03-16T15:58:20Z,2016-08-19T18:38:15Z,2016-08-19T18:38:15Z,CLOSED,False,34,9,6,https://github.com/mattbenic,Issue #437: Can't add a class without a default public constructor to JSBind,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705#issuecomment-198421188,,"It seems the goal here is a follow up to static member support?  If we don't have a constructor available, the binding generation code will skip it in this PR.  So, getting whatever is needed during traversal/setup for this needs to happen.  This should be a pretty minimal set of changes?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,705,2016-03-16T15:58:20Z,2016-08-19T18:38:15Z,2016-08-19T18:38:15Z,CLOSED,False,34,9,6,https://github.com/mattbenic,Issue #437: Can't add a class without a default public constructor to JSBind,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705#issuecomment-207229929,,"Yes, that's the idea. Currently the bindings that get generated always include a constructor, even if there isn't one on the class. I also thought it would be minimal, but it turned out to be a series of changes to get this information. If you prefer something simple like a ""HasDefaultConstructor"" earlier on, removing the need for these changes then we can do that instead. That just felt like a hacked way to get it done.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,705,2016-03-16T15:58:20Z,2016-08-19T18:38:15Z,2016-08-19T18:38:15Z,CLOSED,False,34,9,6,https://github.com/mattbenic,Issue #437: Can't add a class without a default public constructor to JSBind,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/705#issuecomment-241100085,,"Closing as now pretty out of date, can be reopened/refactored if necessary",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,706,2016-03-16T15:58:37Z,2016-09-17T15:16:24Z,2016-09-17T15:16:24Z,CLOSED,False,87,45,9,https://github.com/mattbenic,Issue #587 : Improve JSBProperty::GetCasePropertyName case generation‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/706,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/706,"‚Ä¶. Currently transforms property names in required format URLEnabled -> urlEnabled, thus  for
eg:     URLEnabled -> urlEnabled
BaseType -> baseType
Type -> type
RGBA16Format -> rgba16Format
Issue #571 - Ensure the editor's player log window is able to handle multiline print/console.log from player process.","‚Ä¶. Currently transforms property names in required format URLEnabled -> urlEnabled, thus  for
eg:     URLEnabled -> urlEnabled
BaseType -> baseType
Type -> type
RGBA16Format -> rgba16Format
Issue #571 - Ensure the editor's player log window is able to handle multiline print/console.log from player process.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,707,2016-03-16T19:05:08Z,2016-03-16T19:26:50Z,2016-03-16T19:26:55Z,MERGED,True,6066,1613,328,https://github.com/JoshEngebretson,Atomic Game Engine MIT License,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/707,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/707,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,712,2016-03-18T19:57:27Z,2016-03-18T22:32:43Z,2016-03-18T22:32:47Z,MERGED,True,8,0,1,https://github.com/ScottDillman,chnages to LinuxBuild.js,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/712,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/712,copy over CEF support files to AtomicEditor directory,copy over CEF support files to AtomicEditor directory,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,712,2016-03-18T19:57:27Z,2016-03-18T22:32:43Z,2016-03-18T22:32:47Z,MERGED,True,8,0,1,https://github.com/ScottDillman,chnages to LinuxBuild.js,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/712,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/712#issuecomment-198566820,copy over CEF support files to AtomicEditor directory,"Great, this will help with first contact üëç  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,718,2016-03-20T04:20:43Z,2016-03-24T22:35:34Z,2016-03-25T02:08:50Z,MERGED,True,2,0,1,https://github.com/buresu,HiDPI support in Atomic Player title bar on Mac OSX,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,https://github.com/buresu,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,"before

after","before

after",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,718,2016-03-20T04:20:43Z,2016-03-24T22:35:34Z,2016-03-25T02:08:50Z,MERGED,True,2,0,1,https://github.com/buresu,HiDPI support in Atomic Player title bar on Mac OSX,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718#issuecomment-198845198,"before

after",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,718,2016-03-20T04:20:43Z,2016-03-24T22:35:34Z,2016-03-25T02:08:50Z,MERGED,True,2,0,1,https://github.com/buresu,HiDPI support in Atomic Player title bar on Mac OSX,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718#issuecomment-201043840,"before

after",@AtomicBuildBot Ok to test,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,718,2016-03-20T04:20:43Z,2016-03-24T22:35:34Z,2016-03-25T02:08:50Z,MERGED,True,2,0,1,https://github.com/buresu,HiDPI support in Atomic Player title bar on Mac OSX,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718#issuecomment-201058306,"before

after","Nice improvement, thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,718,2016-03-20T04:20:43Z,2016-03-24T22:35:34Z,2016-03-25T02:08:50Z,MERGED,True,2,0,1,https://github.com/buresu,HiDPI support in Atomic Player title bar on Mac OSX,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718,https://github.com/buresu,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/718#issuecomment-201108405,"before

after",Thank you : ),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,720,2016-03-22T00:41:51Z,2016-05-26T14:23:16Z,2016-05-26T14:23:16Z,CLOSED,False,36198,2311,323,https://github.com/ScottDillman,tweak the CEF resources files copy bit,238,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,720,2016-03-22T00:41:51Z,2016-05-26T14:23:16Z,2016-05-26T14:23:16Z,CLOSED,False,36198,2311,323,https://github.com/ScottDillman,tweak the CEF resources files copy bit,238,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720#issuecomment-199890589,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,"Interesting, the CEF3 cmake scripts on Windows/OSX set this copy stuff up using CEF3's scripts:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/AtomicEditor/CMakeLists.txt#L130
Can this be done here for Linux  instead?  I'd like to do a little cleanup for where the CEF3 is used in a binary, there's a bit too much fluff, even if most of it is hidden in macros.
The Windows and Mac Jake scripts I don't believe need to do any copying for CEF3 bins/resources: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Build/Scripts/BuildWindows.js#L34",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,720,2016-03-22T00:41:51Z,2016-05-26T14:23:16Z,2016-05-26T14:23:16Z,CLOSED,False,36198,2311,323,https://github.com/ScottDillman,tweak the CEF resources files copy bit,238,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,https://github.com/ScottDillman,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720#issuecomment-200097200,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,"I'll have a look to see what can be done, cleanup is always good.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,720,2016-03-22T00:41:51Z,2016-05-26T14:23:16Z,2016-05-26T14:23:16Z,CLOSED,False,36198,2311,323,https://github.com/ScottDillman,tweak the CEF resources files copy bit,238,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,https://github.com/ScottDillman,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720#issuecomment-221761271,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,"Accidentally added my latest commit to this open PR, let me know if you want me to move it elsewhere or if you just want to cherry pick the commit 2bfc09b",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,720,2016-03-22T00:41:51Z,2016-05-26T14:23:16Z,2016-05-26T14:23:16Z,CLOSED,False,36198,2311,323,https://github.com/ScottDillman,tweak the CEF resources files copy bit,238,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/720#issuecomment-221885478,Trying to remove some noise from the log. CEF was complaining about missing files. This change will pick them up.,"Hey @CTrauma Yeah, I'll close this PR and let's open a new one with the fix.  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,721,2016-03-22T21:49:32Z,2016-03-22T22:17:33Z,2016-03-22T22:17:37Z,MERGED,True,5,1,1,https://github.com/JoshEngebretson,Add getting started to help menu,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/721,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/721,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,724,2016-03-23T12:05:59Z,2016-03-24T21:59:59Z,2016-03-29T04:59:43Z,MERGED,True,314,22,27,https://github.com/mattbenic,"Player pause/resume, FPS counter, Q/E swap, directory asset reimport",7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724,"Added Pause/Resume/Frame step of running player using IPC events
Added FPS counter to debug hud
Swapped Q/E shortcuts to be consistent with modelling software conventions
Added forced asset reimport context menu item for directories","Added Pause/Resume/Frame step of running player using IPC events
Added FPS counter to debug hud
Swapped Q/E shortcuts to be consistent with modelling software conventions
Added forced asset reimport context menu item for directories",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,724,2016-03-23T12:05:59Z,2016-03-24T21:59:59Z,2016-03-29T04:59:43Z,MERGED,True,314,22,27,https://github.com/mattbenic,"Player pause/resume, FPS counter, Q/E swap, directory asset reimport",7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724#issuecomment-200532618,"Added Pause/Resume/Frame step of running player using IPC events
Added FPS counter to debug hud
Swapped Q/E shortcuts to be consistent with modelling software conventions
Added forced asset reimport context menu item for directories","Awesome PR, will check it out soon, choo, choo! üöã",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,724,2016-03-23T12:05:59Z,2016-03-24T21:59:59Z,2016-03-29T04:59:43Z,MERGED,True,314,22,27,https://github.com/mattbenic,"Player pause/resume, FPS counter, Q/E swap, directory asset reimport",7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/724#issuecomment-201043521,"Added Pause/Resume/Frame step of running player using IPC events
Added FPS counter to debug hud
Swapped Q/E shortcuts to be consistent with modelling software conventions
Added forced asset reimport context menu item for directories",Great work on this... landing in time to make the updated build on the site for today! ‚úàÔ∏è THANKS!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,728,2016-03-24T20:33:47Z,2016-03-24T21:24:00Z,2016-03-24T21:24:09Z,MERGED,True,43,28,5,https://github.com/LaraEngebretson,Updated 2D/3D templates with default camera and 2D static sprite component,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/728,https://github.com/LaraEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/728,closes #722,closes #722,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,728,2016-03-24T20:33:47Z,2016-03-24T21:24:00Z,2016-03-24T21:24:09Z,MERGED,True,43,28,5,https://github.com/LaraEngebretson,Updated 2D/3D templates with default camera and 2D static sprite component,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/728,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/728#issuecomment-201028288,closes #722,Great!  LANDING! ‚úàÔ∏è,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,729,2016-03-24T23:10:45Z,2016-03-24T23:30:12Z,2016-03-24T23:30:15Z,MERGED,True,18,1,1,https://github.com/JoshEngebretson,"Better Android deployment error messages, ensure res/values folder exists",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/729,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/729,Closes #719,Closes #719,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,731,2016-03-28T18:38:14Z,2016-03-28T18:58:52Z,2016-03-28T18:58:56Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Fix output path for 32 bit compile,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/731,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/731,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,732,2016-03-28T23:53:33Z,2016-03-29T00:20:01Z,2016-03-29T00:20:05Z,MERGED,True,46,0,2,https://github.com/JoshEngebretson,Handle Popup Requests by sending event on UI thread,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/732,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/732,... avoids top level windows being spawned,... avoids top level windows being spawned,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,734,2016-03-30T12:57:52Z,2016-03-30T23:16:55Z,2016-03-31T05:16:17Z,MERGED,True,255,45,8,https://github.com/raheelx,Issue #195 - Search Bar Functionality,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,"Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel","Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,734,2016-03-30T12:57:52Z,2016-03-30T23:16:55Z,2016-03-31T05:16:17Z,MERGED,True,255,45,8,https://github.com/raheelx,Issue #195 - Search Bar Functionality,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734#issuecomment-203420461,"Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,734,2016-03-30T12:57:52Z,2016-03-30T23:16:55Z,2016-03-31T05:16:17Z,MERGED,True,255,45,8,https://github.com/raheelx,Issue #195 - Search Bar Functionality,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734#issuecomment-203465339,"Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel","@AtomicBuildBot add to whitelist
@AtomicBuildBot ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,734,2016-03-30T12:57:52Z,2016-03-30T23:16:55Z,2016-03-31T05:16:17Z,MERGED,True,255,45,8,https://github.com/raheelx,Issue #195 - Search Bar Functionality,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734#issuecomment-203678191,"Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel","I tried out the search on resource, hierarchy, and resource selection dialog, feels great :)  I also gave the code a good going over too, awesome work, I found not a single nit! :)
Thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,734,2016-03-30T12:57:52Z,2016-03-30T23:16:55Z,2016-03-31T05:16:17Z,MERGED,True,255,45,8,https://github.com/raheelx,Issue #195 - Search Bar Functionality,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734,https://github.com/raheelx,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/734#issuecomment-203755677,"Hi @JoshEngebretson : )
I've implemented the search bar functionality. I didn't end up using the TurboBadger filtering because I don't think it was compatible with the ProjectFrame's list type.
Please let me know if there's anything you need to be adjusted!
-Raheel",cool!! thanks @JoshEngebretson :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,735,2016-03-31T09:20:55Z,2016-04-03T15:00:41Z,2016-04-03T15:00:44Z,MERGED,True,16,2,2,https://github.com/raheelx,Shift drag cloning,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735,"Hi @JoshEngebretson
This PR allows the users to clone objects in the Scene by holding down on Shift and Dragging the object.
Let me know if you'd like anything changed! :)","Hi @JoshEngebretson
This PR allows the users to clone objects in the Scene by holding down on Shift and Dragging the object.
Let me know if you'd like anything changed! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,735,2016-03-31T09:20:55Z,2016-04-03T15:00:41Z,2016-04-03T15:00:44Z,MERGED,True,16,2,2,https://github.com/raheelx,Shift drag cloning,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735#issuecomment-203988836,"Hi @JoshEngebretson
This PR allows the users to clone objects in the Scene by holding down on Shift and Dragging the object.
Let me know if you'd like anything changed! :)","Nice!  Another great feature addition, and good job keeping the code tight.  There are some whitespace issues to address and one nit, otherwise ready to land.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,735,2016-03-31T09:20:55Z,2016-04-03T15:00:41Z,2016-04-03T15:00:44Z,MERGED,True,16,2,2,https://github.com/raheelx,Shift drag cloning,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735,https://github.com/raheelx,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735#issuecomment-204806525,"Hi @JoshEngebretson
This PR allows the users to clone objects in the Scene by holding down on Shift and Dragging the object.
Let me know if you'd like anything changed! :)",@JoshEngebretson : Sorry about the white spaces! I just started working on a new machine and forgot to change the settings :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,735,2016-03-31T09:20:55Z,2016-04-03T15:00:41Z,2016-04-03T15:00:44Z,MERGED,True,16,2,2,https://github.com/raheelx,Shift drag cloning,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/735#issuecomment-204993343,"Hi @JoshEngebretson
This PR allows the users to clone objects in the Scene by holding down on Shift and Dragging the object.
Let me know if you'd like anything changed! :)","No problem, great add, thanks!
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,737,2016-04-02T01:39:13Z,2016-04-02T14:00:31Z,2016-04-04T11:34:28Z,MERGED,True,311,65,16,https://github.com/shaddockh,updated license banners,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/737,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/737,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,737,2016-04-02T01:39:13Z,2016-04-02T14:00:31Z,2016-04-04T11:34:28Z,MERGED,True,311,65,16,https://github.com/shaddockh,updated license banners,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/737,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/737#issuecomment-204721104,,"Awesome, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738#issuecomment-204636885,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","fyi,
I've been attempting to connect to the build server to see what the error is, but it keeps timing out.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738#issuecomment-204722483,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","Yeah, the amount of traffic has increased significantly and the build boxes are on our LAN.  Having the port open for random internet access is now a security hole.  Need to figure out a better way of handling it.  Maybe the build box can post build failures somewhere, so don't need access to  the Jenkins dashboard in the short term.
I can look into it here, this is what the build box is saying:
AtomicDS_BuildAtomicTool_Mac] $ /bin/sh -xe /var/folders/vq/hbh97s8d51z5cjyqsbjx03sw0000gp/T/hudson4657914758244820272.sh

./Build/Mac/node/node ./Build/node_modules/jake/bin/cli.js -f ./Build/CIScripts/Build.js build:atomictool
jake aborted.
SyntaxError: Unexpected token }
at exports.runInThisContext (vm.js:54:16)
at Module._compile (module.js:375:25)
(See full trace by running task with --trace)

Which might be able to be replicated locally doing a:
./Build/Mac/node/node ./Build/node_modules/jake/bin/cli.js -f ./Build/CIScripts/Build.js build:atomictool",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738#issuecomment-204725477,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","bah, Ok, I guess I never did reinstall my javascript linters after rebuilding my box..this would have been caught by that.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738#issuecomment-204730850,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","Great, I'll kick off a build in a bit to make sure the new TS service stuff is making it into full binary builds :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,738,2016-04-02T02:08:34Z,2016-04-02T15:57:00Z,2016-04-04T11:35:01Z,MERGED,True,63,6,1,https://github.com/shaddockh,Issue #736 - Migrate typescript build to CI scripts,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/738#issuecomment-204744061,"should fix #736 causing the CI server to lint the typescript and build the editor correctly.  I have no way to really test this, but I copied over the logic from the normal build process.","Confirmed, binary builds now have TS service :)  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/keithjohnston,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.","Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739#issuecomment-205134014,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.",Can one of the admins verify this patch?,True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739#issuecomment-205336500,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.","@AtomicBuildBot add to whitelist, ok to test
@keithjohnston Great find!!!  SDL 2.0.4 is coming up, I wonder if this fix made it into there.  When patching SDL or other third party sources, marking them as modified helps maintenance when merging in new versions, and is a requirement in some of the third party licenses.  Would you mind adding something like this above the modification?
// ATOMIC: Fixes missing WebView keystrokes on OSX 
// (see https://bugzilla.libsdl.org/show_bug.cgi?id=3107)

Thanks! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/keithjohnston,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739#issuecomment-205414116,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.","Will do!
On Mon, Apr 4, 2016 at 7:58 AM JoshEngebretson notifications@github.com
wrote:

@AtomicBuildBot https://github.com/AtomicBuildBot add to whitelist, ok
to test
@keithjohnston https://github.com/keithjohnston Great find!!! SDL 2.0.4
is coming up, I wonder if this fix made it into there. When patching SDL or
other third party sources, marking them as modified helps maintenance when
merging in new versions, and is a requirement in some of the third party
licenses. Would you mind adding something like this above the modification?
// ATOMIC: Fixes missing WebView keystrokes on OSX (see https://bugzilla.libsdl.org/show_bug.cgi?id=3107)
Thanks! :)
‚Äî
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#739 (comment)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/keithjohnston,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739#issuecomment-207159666,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.",I think this is ready now?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,739,2016-04-04T04:42:05Z,2016-04-08T01:16:49Z,2016-04-10T15:53:15Z,MERGED,True,36,23,1,https://github.com/keithjohnston,Fix for missing keystrokes in the code editor on OSX.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/739#issuecomment-207159876,"Turns out this is a bug when using CEF with SDL: https://bugzilla.libsdl.org/show_bug.cgi?id=3107.
I have tested this fix and it works great for me - no more missing keystrokes in the code editor.","Roger that, LANDING! Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,740,2016-04-04T06:49:52Z,2016-04-04T14:59:21Z,2016-04-07T13:48:01Z,MERGED,True,3,0,1,https://github.com/raheelx,Dragging files into hierarchy,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/740,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/740,"Hi @JoshEngebretson :)
A small fix to prevent the engine from crashing when you drag files into the Hierarchy Frame. I couldn't find a logged issue to reference for this though!
-Raheel","Hi @JoshEngebretson :)
A small fix to prevent the engine from crashing when you drag files into the Hierarchy Frame. I couldn't find a logged issue to reference for this though!
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,740,2016-04-04T06:49:52Z,2016-04-04T14:59:21Z,2016-04-07T13:48:01Z,MERGED,True,3,0,1,https://github.com/raheelx,Dragging files into hierarchy,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/740,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/740#issuecomment-205337347,"Hi @JoshEngebretson :)
A small fix to prevent the engine from crashing when you drag files into the Hierarchy Frame. I couldn't find a logged issue to reference for this though!
-Raheel","Nice catch, landing!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,741,2016-04-04T18:57:25Z,2016-04-08T01:22:24Z,2016-04-08T01:22:28Z,MERGED,True,72,4,6,https://github.com/JoshEngebretson,"IPC Updates for Windows child processes, WeakPtr fixes for WebClient",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/741,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/741,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,742,2016-04-05T03:07:10Z,2016-04-08T01:20:15Z,2016-04-08T11:38:06Z,MERGED,True,11,4,2,https://github.com/shaddockh,Ease of use fixes for some TS Bindings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/742,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/742,"While building some examples, I made some hand modifications to atomic.d.ts.  This incorporates them into the official script bindings as well as fixes some linting issues with the generated bindings.
Currently, getting a strongly typed component from a node requires you to cast the result:
let node = <Atomic.Sprite2D>this.node.getComponent(""Sprite2D"");
This change adds the following signature overload in addition to the current signature:
let node = this.node.getComponent<Atomic.Sprite2D>(""Sprite2D"");
What this does is auto-casts the result to the component and ensures that the generic type being cast in is actually a descendent of Atomic.Component.  The same goes for Node.getJSComponent, Node.createComponent, Node.getOrCreateComponent, and Component.getComponent
Without this check, the TypeScript compiler would not catch such mis-uses as:
let node = <string> this.node.getComponent(""Sprite2D"");","While building some examples, I made some hand modifications to atomic.d.ts.  This incorporates them into the official script bindings as well as fixes some linting issues with the generated bindings.
Currently, getting a strongly typed component from a node requires you to cast the result:
let node = <Atomic.Sprite2D>this.node.getComponent(""Sprite2D"");
This change adds the following signature overload in addition to the current signature:
let node = this.node.getComponent<Atomic.Sprite2D>(""Sprite2D"");
What this does is auto-casts the result to the component and ensures that the generic type being cast in is actually a descendent of Atomic.Component.  The same goes for Node.getJSComponent, Node.createComponent, Node.getOrCreateComponent, and Component.getComponent
Without this check, the TypeScript compiler would not catch such mis-uses as:
let node = <string> this.node.getComponent(""Sprite2D"");",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,742,2016-04-05T03:07:10Z,2016-04-08T01:20:15Z,2016-04-08T11:38:06Z,MERGED,True,11,4,2,https://github.com/shaddockh,Ease of use fixes for some TS Bindings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/742,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/742#issuecomment-207160363,"While building some examples, I made some hand modifications to atomic.d.ts.  This incorporates them into the official script bindings as well as fixes some linting issues with the generated bindings.
Currently, getting a strongly typed component from a node requires you to cast the result:
let node = <Atomic.Sprite2D>this.node.getComponent(""Sprite2D"");
This change adds the following signature overload in addition to the current signature:
let node = this.node.getComponent<Atomic.Sprite2D>(""Sprite2D"");
What this does is auto-casts the result to the component and ensures that the generic type being cast in is actually a descendent of Atomic.Component.  The same goes for Node.getJSComponent, Node.createComponent, Node.getOrCreateComponent, and Component.getComponent
Without this check, the TypeScript compiler would not catch such mis-uses as:
let node = <string> this.node.getComponent(""Sprite2D"");",May all your casts be true... very nice!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)","Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/weinandvv,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746#issuecomment-206343605,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)","Hi Josh.
First part of the profiler included dividing the triangles up into
a few categories.The amount of triangles seem to be multiplied by
the number of lights in the scene. So now the ""All Passes"" is the
original triangles value. ""Single Pass"" excludes the multiplication
of lights as well as the shadowmaps so it should be the actual number
of tri's you currently have in a scene.""Editor"" is the tri's made up by the editor.
Second part was to change the position of the UIElement profiler text.
It was difficult to read when the profiler is toggled. So currently
using the UIWidgets I created a profiler that sets the UIElement text
inside the scene view so it could be easier to read. The profiler I
made can also be toggled with the ""Toggle Profiler"" button when a scene is open.
An issue I had with this which seems a bit hacky was to disable the widget
I placed my UIEditFields on and changing the Disable text opacity to show
the text clearer. I used UIEditField because the UITextFields are quite
limited.
I'm pretty sure there is a more effective way of doing these two changes
so any help and advice would really be appreciated.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/weinandvv,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746#issuecomment-206391513,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)",Seems the check have failed. Problem is on mine side. Sorry for the trouble.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746#issuecomment-206467915,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)","Hello!
The failure is related to the new methods being added solely to the Direct3D9 renderer, on a GL compile:
Source/Atomic/Graphics/Renderer.cpp:707:47: error: no member named 'GetSinglePassPrimitives' in 'Atomic::Graphics'
We need to watch the delta between renderers, this is one reason I really want to look into a bgfx renderer to consolidate the Graphics subsystem.  We also have to be really careful with moving renderer logic around as might have side effects on GL, D3D11, that don't show up on D3D9
I have a really busy couple days here, will get to reviewing this soon.  I like how a better profile display UI sounds üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/weinandvv,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746#issuecomment-206905365,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)","I was able to add the necessary functions to OGL and D3D11 classes, but I wasn't able to test it. How do you do a GL compile or even a D3D11 one to test if my changes worked properly.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,746,2016-04-06T12:10:50Z,2016-09-17T15:16:13Z,2016-09-17T15:16:13Z,CLOSED,False,244,37,21,https://github.com/weinandvv,Issue #691 Profiler should exclude data from profiler output,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/746#issuecomment-207460064,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor"" (D3D9Graphics.cpp & h, DebugHud.cpp & h, Renderer.cpp & h, View.cpp)
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open (DebugHud.cpp & h, ResourceEditor.cpp & h, SceneEditor3D.cpp & h, SceneView.cpp, skin.tb.txt, UI.cpp)","Wow, that is some mighty kung-fu getting D3D11 and GL passing on the CI box :)  We do have a general issue with code duplication in having multiple Graphics subsystems.  I did see some rendering logic moved around too, which can have side effects in other renderer API's and need to be tested independently.
We'll be merging upstream changes in soon too, which will likely lead to some conflicts.  So, it may be better to handle the upstream merge before landing this PR.  In any event, thanks for the PR and I should be able to review it soon.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/raheelx,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747#issuecomment-207442360,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","Please don't land this just yet, we've found an issue.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/raheelx,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747#issuecomment-207445433,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","The issue was solved, so it can be tested now üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747#issuecomment-207446569,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","Cool, having these exposed is great and a good bootstrap to expose the functionality per project.  We do need better per model import settings.  Assimp has some FBX limitations, may have to look into Autodesk's FBX SDK though thinking the license may be an issue there.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747#issuecomment-209127715,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","A nit and a couple questions, otherwise looking good :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,747,2016-04-08T11:48:01Z,2016-04-13T19:06:22Z,2016-04-13T19:06:25Z,MERGED,True,465,159,8,https://github.com/raheelx,Flip infacing normals,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/747#issuecomment-209597630,"Hi @JoshEngebretson :)
This PR adds the ability to add import settings when importing models. It was needed because of the problem when adding planar models to the scene.
How it Works:

Create an Import.json file in the Settings Folder of your project.
The Import.json allows you to set each of the postprocess flags to true or false. This is what it looks like:

{
  ""desktop"": {

    ""aiFlagsDefault"" : {
      ""convertToLeftHanded"" : true,
      ""joinIdenticalVertices"" : true,
      ""triangulate"" : true, 
      ""genSmoothNormals"" : true,
      ""limitBoneWeights"" : true,
      ""improveCacheLocality"" : true,
      ""fixInfacingNormals"" : false,
      ""findInvalidData"" : true,
      ""genUVCoords"" : true,
      ""findInstances"" : true,
      ""optimizeMeshes"" : true
    }
  }

}

NB: If there isn't an Import.json in the Settings folder of the game, the engine will set the flags to its default behaviour (where everything is true).
Is this okay? Please let me know if there is anything you'd like to be different.
-Raheel","Looks good, this will probably get refactored a bit in the future when exposing to UI.  Thanks, LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,748,2016-04-10T22:42:18Z,2016-04-12T22:53:00Z,2016-04-27T12:09:39Z,MERGED,True,121,34,9,https://github.com/shaddockh,Typescript error annotations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/748,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/748,"Fixes #744
This PR hooks in the typescript compiler warnings/errors and allows them to be displayed in the editor.  They will only show up or drop off on save (having it annotate in real-time may be a future PR).
This PR also fixes an issue where saving a file didn't update the background language service with the updated code.  It also fixes an issue where if you have a JSDoc block on a variable or method in your project, it is supposed to display the JSDoc in a tooltip on code completion.","Fixes #744
This PR hooks in the typescript compiler warnings/errors and allows them to be displayed in the editor.  They will only show up or drop off on save (having it annotate in real-time may be a future PR).
This PR also fixes an issue where saving a file didn't update the background language service with the updated code.  It also fixes an issue where if you have a JSDoc block on a variable or method in your project, it is supposed to display the JSDoc in a tooltip on code completion.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,748,2016-04-10T22:42:18Z,2016-04-12T22:53:00Z,2016-04-27T12:09:39Z,MERGED,True,121,34,9,https://github.com/shaddockh,Typescript error annotations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/748,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/748#issuecomment-209135958,"Fixes #744
This PR hooks in the typescript compiler warnings/errors and allows them to be displayed in the editor.  They will only show up or drop off on save (having it annotate in real-time may be a future PR).
This PR also fixes an issue where saving a file didn't update the background language service with the updated code.  It also fixes an issue where if you have a JSDoc block on a variable or method in your project, it is supposed to display the JSDoc in a tooltip on code completion.","Great PR, squeaky clean!  I promptly introduced a compiler error and the editor caught it on save :)
Thanks! LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,749,2016-04-11T08:55:38Z,2016-04-13T12:07:07Z,2016-04-13T12:07:11Z,CLOSED,False,481,164,10,https://github.com/raheelx,Shift drag clone bug fix,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/749,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/749,"Hi @JoshEngebretson
The artists at Luma found a bug with the Shift+Drag cloning feature (it was cloning when you clicked anywhere in the editor) so this is a fix for that issue.
-Raheel","Hi @JoshEngebretson
The artists at Luma found a bug with the Shift+Drag cloning feature (it was cloning when you clicked anywhere in the editor) so this is a fix for that issue.
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,749,2016-04-11T08:55:38Z,2016-04-13T12:07:07Z,2016-04-13T12:07:11Z,CLOSED,False,481,164,10,https://github.com/raheelx,Shift drag clone bug fix,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/749,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/749#issuecomment-209136509,"Hi @JoshEngebretson
The artists at Luma found a bug with the Shift+Drag cloning feature (it was cloning when you clicked anywhere in the editor) so this is a fix for that issue.
-Raheel","@raheelx The drag clone bug fix looks good, however it appears that the other PR commits were dragged in.  You should be able to create a new branch off master and then cherry pick just the clone fix commit into it for a new PR.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208795987,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","@JoshEngebretson this build failure seems to be because of the CI server being down. This is the second time I've seen this recently, is it a new server you're trying out?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208913171,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","@mattbenic : The CI server hasn't been down, it is now behind our firewall for security reasons due to increased traffic.  Need a solution for getting errors reported, other than ctrl-c, ctrl-v :)
The Linux build failed:
[Tue Apr 12 01:27:04 2016] INFO: Loading Module: /var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Script/Packages/WebView/WebView.json
[Tue Apr 12 01:27:04 2016] INFO: Generating JS Bindings
[Tue Apr 12 01:27:04 2016] INFO: Generating C# Bindings
Script/TypeScript/AtomicWork.d.ts(5,1): error TS6053: File 'Script/TypeScript/AtomicNet.d.ts' not found.
jake aborted.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208918121,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","Linux catching a case issue somewhere on the .NET stuff, the file on the file system is: AtomicNET.d.ts",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208921015,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","Ah damn, sorry about that. Fixing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208969011,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","... aaaaand passing on CI, thanks!
This is darned cool, looking forward to checking it out :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-208987759,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","@JoshEngebretson, you can see an example and more information at:  LumaDigital#2 .  Once this lands, an example in AtomicExamples needs to be created.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-209148168,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","This is wonderful stuff, great code architecture.  Very happy to see @shaddockh's new service stuff useful so immediately, great job all.  LANDING!
@shaddockh Does that example usage in LumaDigital#2 exist as a project somewhere that can be brought into AtomicExamples?  We're going to be staring the need for unit tests in the eyes pretty soon here too... insert dramatic string hit",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/shaddockh,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-209154961,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","I understand @mattbenic has been using it to build out an internal plugin.  If he doesn't have anything that he can readily share, I can throw together a simple example some time this week.  The one in  LumaDigital#2 was just something that I modified from what @mattbenic had.  For an example, I'm thinking that something that illustrates how to write an extension in pure javascript and one in typescript would be good.
Unit tests.  shudder .  I know that they need to be done, but it's going to be really interesting to figure out how to do.  I think the purely functional tests for the TypeScript could be done with mocha or jasmine pretty easily, but the ones that need to interact with the runtime might pose a challenge...this is where AtomicCli will probably need brought up to speed.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/mattbenic,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-209255704,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","I can sanitize the part of our plugin that registers itself, adds a plugins menu item and shows a modal dialog with some controls. That's why I was asking about how the .d.ts files are handled after the initial project template is copied :) For now manual update is fine but at some point that needs to be done from a menu option or something (""Upgrade project to latest format"").
Do we need a separate javascript example? The TS compiles out to js and that's what actually gets consumed when the plugin is loaded. So the TS example would necessarily include the ts script and it's compiled form.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/shaddockh,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-209403832,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.","The only reason I was thinking a pure javascript example is for those people that don't want to go down the typescript route.  Also, I think a hand-written JS example wouldn't have all the ceremony that the transpiled TS emits.  What I may try to do is attempt to rewrite the  TS example you provided in simpler JS and see what it looks like and if it looks pretty good, submit a followup PR.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,750,2016-04-12T08:10:43Z,2016-04-12T23:27:28Z,2016-04-14T12:10:25Z,MERGED,True,463,29,18,https://github.com/mattbenic,"Per project extensions, authors update",15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750,https://github.com/mattbenic,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/750#issuecomment-209413522,"This PR provides the ability to have .plugin.js files in the /Resources/EditorData directory that are loaded when the project is opened. These plugins can currently add plugin menu items, respond to widget events and open modal windows.
Thanks to @shaddockh for better encapsulating the plugin loading in a new service.
Also, a long overdue addition of @JohnnyWahib and @Vlamboljant to the authors file.",By all means :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,753,2016-04-13T13:29:19Z,2016-04-13T19:00:23Z,2016-04-13T19:00:27Z,MERGED,True,18,8,2,https://github.com/raheelx,Shift clone,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/753,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/753,"Hi @JoshEngebretson
I hope this is okay now! Sorry about that.
-Raheel","Hi @JoshEngebretson
I hope this is okay now! Sorry about that.
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,753,2016-04-13T13:29:19Z,2016-04-13T19:00:23Z,2016-04-13T19:00:27Z,MERGED,True,18,8,2,https://github.com/raheelx,Shift clone,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/753,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/753#issuecomment-209595903,"Hi @JoshEngebretson
I hope this is okay now! Sorry about that.
-Raheel","Great, LANDING!  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,755,2016-04-13T18:59:20Z,2016-04-13T19:19:48Z,2016-04-13T19:19:52Z,MERGED,True,20,7,4,https://github.com/JoshEngebretson,Enable WebCam on Windows also added ability to suppress D3DCompiler dll dependency,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/755,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/755,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,756,2016-04-14T01:22:43Z,2016-04-14T13:47:55Z,2016-04-27T12:09:46Z,MERGED,True,44,58,7,https://github.com/shaddockh,Refactoring the extension interface names to make more sense,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756,"This PR attempts to make the extension interfaces make more sense.  The concept is that you have ServiceProviders that provide functionality that an extension can request, and ServiceListeners which the extension implements so that it can respond to service events coming from the editor.
The following name changes were made:
ServiceRegistry<T> -> ServicesProvider<T>
ProjectServiceRegistry -> ProjectServicesProvider
ResourceServiceRegistry -> ResourceServicesProvider
UIServiceRegistry -> UIServicesProvider
ProjectService -> ProjectServicesEventListener
ResourceService -> ResourceServicesEventListener
UIService -> UIServicesEventListener

This now changes the way to implement an extension from:
export default class Extension implements Editor.HostExtensions.ResourceService, Editor.HostExtensions.ProjectService

to
export default class Extension implements Editor.HostExtensions.ResourceServicesEventListener, Editor.HostExtensions.ProjectServicesEventListener","This PR attempts to make the extension interfaces make more sense.  The concept is that you have ServiceProviders that provide functionality that an extension can request, and ServiceListeners which the extension implements so that it can respond to service events coming from the editor.
The following name changes were made:
ServiceRegistry<T> -> ServicesProvider<T>
ProjectServiceRegistry -> ProjectServicesProvider
ResourceServiceRegistry -> ResourceServicesProvider
UIServiceRegistry -> UIServicesProvider
ProjectService -> ProjectServicesEventListener
ResourceService -> ResourceServicesEventListener
UIService -> UIServicesEventListener

This now changes the way to implement an extension from:
export default class Extension implements Editor.HostExtensions.ResourceService, Editor.HostExtensions.ProjectService

to
export default class Extension implements Editor.HostExtensions.ResourceServicesEventListener, Editor.HostExtensions.ProjectServicesEventListener",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,756,2016-04-14T01:22:43Z,2016-04-14T13:47:55Z,2016-04-27T12:09:46Z,MERGED,True,44,58,7,https://github.com/shaddockh,Refactoring the extension interface names to make more sense,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756#issuecomment-209772427,"This PR attempts to make the extension interfaces make more sense.  The concept is that you have ServiceProviders that provide functionality that an extension can request, and ServiceListeners which the extension implements so that it can respond to service events coming from the editor.
The following name changes were made:
ServiceRegistry<T> -> ServicesProvider<T>
ProjectServiceRegistry -> ProjectServicesProvider
ResourceServiceRegistry -> ResourceServicesProvider
UIServiceRegistry -> UIServicesProvider
ProjectService -> ProjectServicesEventListener
ResourceService -> ResourceServicesEventListener
UIService -> UIServicesEventListener

This now changes the way to implement an extension from:
export default class Extension implements Editor.HostExtensions.ResourceService, Editor.HostExtensions.ProjectService

to
export default class Extension implements Editor.HostExtensions.ResourceServicesEventListener, Editor.HostExtensions.ProjectServicesEventListener",Yes I think that's much clearer. Use of the EventListener suffix makes the distinction from the shortened field name much more understandable.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,756,2016-04-14T01:22:43Z,2016-04-14T13:47:55Z,2016-04-27T12:09:46Z,MERGED,True,44,58,7,https://github.com/shaddockh,Refactoring the extension interface names to make more sense,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/756#issuecomment-209950936,"This PR attempts to make the extension interfaces make more sense.  The concept is that you have ServiceProviders that provide functionality that an extension can request, and ServiceListeners which the extension implements so that it can respond to service events coming from the editor.
The following name changes were made:
ServiceRegistry<T> -> ServicesProvider<T>
ProjectServiceRegistry -> ProjectServicesProvider
ResourceServiceRegistry -> ResourceServicesProvider
UIServiceRegistry -> UIServicesProvider
ProjectService -> ProjectServicesEventListener
ResourceService -> ResourceServicesEventListener
UIService -> UIServicesEventListener

This now changes the way to implement an extension from:
export default class Extension implements Editor.HostExtensions.ResourceService, Editor.HostExtensions.ProjectService

to
export default class Extension implements Editor.HostExtensions.ResourceServicesEventListener, Editor.HostExtensions.ProjectServicesEventListener","Good changes, listener naming is helpful.  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209911100,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","@JoshEngebretson It's likely the failure is due to building crunch on non-windows platforms. I'm seeing if we can get our mac build node to have a build task on it for Atomic as well, so we can run our builds through that first.
In the meantime, please do your copy-paste magic on the build error :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209919249,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","Ok, we'll be setting up an OSX build tomorrow, so from then on we'll be able to run PRs through that :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209942934,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","We do need a public CI setup, I should be able to forward build information somehow.  That stuff takes chunks of time to figure out is all.
The build error is on Linux, though oddly am not seeing the exact error info in Jenkins log.  I can get it patched up to build on Linux and submit a PR back if it isn't obvious, lemme know.
Error: In file included from /var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Source/ThirdParty/crunch/crnlib/crn_core.h:177:0,
from /var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Source/ThirdParty/crunch/crnlib/crn_qdxt1.cpp:3:
/var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Source/ThirdParty/crunch/crnlib/crn_timer.h:52:40: warning: deprecated conversion from string constant to ‚Äòchar*‚Äô [-Wwrite-strings](See full trace by running task with --trace)
Build step 'Execute shell' marked build as failure
Finished: FAILURE",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209949957,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}",Really great PR!  I have a few notes and let me know if the Linux fix takes you more than 5 minutes and I'll thump it üê∞,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209965361,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","It looks like it's falling over on a deprecation warning? If you could check that out on your linux box (if you have one) and PR, that would let me get the other issues in the PR sorted so long, hopefully get this landed today still :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209966828,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","I don't think the warning should have caused a failed build, will check warning level there.  I'll kick off a build on the Linux box and see if the log was truncated for some reason.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-209988534,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","lzma_Threads.h line 13 HANDLE not defined, pretty sure Linux thinks its Windows on the crunch stuff",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210402653,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","The quality on libsquish seems fine. The processing definitely feels like it takes longer, though I haven't done a side-by-side comparison and this was in debug. You mentioned release being significantly faster and even if it isn't, we can live with that. The network cache tool is currently under development and likely to be completed next week :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210411188,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","And failing again :( I assume this is another issue with multiplatform builds. If you haven't had a chance to check it out by then, when I'm next onsite I'll try it against our mac. Still need to make a plan for a linux build node as well.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210445550,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","Great, thanks for testing it out.  It is one of those cases where debug build takes a lot longer.  I didn't time it either, though in debug I was concerned about speed.  Switching to release, it was a lot faster.
The build failure was on Windows, which looks to be a msbuild flakiness that strikes once in awhile.  Let's try a build again :)
@AtomicBuildBot test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210451244,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}",".... and passed, yay!
Great feature add, thanks!  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210451494,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","NP, sorry about the initial choice of compression lib.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210461370,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","Yeah, crunch is cool and does a bunch of stuff, just a tad gnarly on the dependency side of things for Atomic
libsquish was missing the DDS container stuff which bogged me down, though Image.cpp already had the dds desc structure defined in it!  That was a weird convergence!
For everyone not on the CI Box LAN, needing to guess why a build failed is a problem to solve.  This is probably going to come down to forwarding failed logs somewhere in the short term.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210463491,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}",Would emails of committers not be in the git logs? You could send mails to those?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/JoshEngebretson,16,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210474730,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","It could be an opt in for email notifications possibly, there are jokers like me who put bogus email addresses into their git infos.  I'd like to avoid email and have the build info someplace central.
Microsoft uses Jenkins for all the dotnet foundation repositories: http://dotnet-ci.cloudapp.net/
They just have a security team is all and I don't trust myself to secure it + keep it secured with a close eye on the open port for intrusion.  The nature of CI is a bunch of connected boxes which makes it all that much more of a security concern
Maybe there is a way to mirror the build info to an external Jenkins install, that would be cool.  Also, now that we're MIT we qualify for various CI and other free hosting stuff.  So, should look into options here...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,758,2016-04-14T12:05:24Z,2016-04-15T12:50:52Z,2016-04-26T05:43:12Z,MERGED,True,4655,35,48,https://github.com/mattbenic,#623 windows texture compression,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758,https://github.com/mattbenic,17,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/758#issuecomment-210480496,"This PR introduces DXT compression for windows projects for HUGE savings in runtime memory use. Compression is performed using the newly included crunch library (https://github.com/richgel999/crunch.git).
We needed this in place fairly quickly, so while there really is a need for a better abstraction of the compression process (actually for cache-conversion of all assets) this was added directly to TextureImporter. On non-windows platforms, the compression setting is simply ignored.
Compression is disabled by default, but can be enabled with a setting in Settings\Import.json:
{
    ""desktop"": {

        ""TextureImporter"": {
            ""compressTextures"": true
        }
    }

}","Just one more thing on the plate ;) Have you posted on gitter, facebook, twitter and your forums to see if there isn't someone that would be interested in contributing in that way-by working on the CI? I'm sure it's not just coders that would be keen on helping a project like Atomic",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,760,2016-04-18T10:12:22Z,2016-04-19T21:57:23Z,2016-04-26T07:05:26Z,MERGED,True,19,9,2,https://github.com/GarethNN,A fix for prefab components not refreshing in a scene in the editor w‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760,"‚Ä¶hen they're changed externally (say by pulling down changed files from git).
Fix should be pushed up to Josh.","‚Ä¶hen they're changed externally (say by pulling down changed files from git).
Fix should be pushed up to Josh.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,760,2016-04-18T10:12:22Z,2016-04-19T21:57:23Z,2016-04-26T07:05:26Z,MERGED,True,19,9,2,https://github.com/GarethNN,A fix for prefab components not refreshing in a scene in the editor w‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760#issuecomment-211312145,"‚Ä¶hen they're changed externally (say by pulling down changed files from git).
Fix should be pushed up to Josh.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,760,2016-04-18T10:12:22Z,2016-04-19T21:57:23Z,2016-04-26T07:05:26Z,MERGED,True,19,9,2,https://github.com/GarethNN,A fix for prefab components not refreshing in a scene in the editor w‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760#issuecomment-211373901,"‚Ä¶hen they're changed externally (say by pulling down changed files from git).
Fix should be pushed up to Josh.","@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,760,2016-04-18T10:12:22Z,2016-04-19T21:57:23Z,2016-04-26T07:05:26Z,MERGED,True,19,9,2,https://github.com/GarethNN,A fix for prefab components not refreshing in a scene in the editor w‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/760#issuecomment-212146462,"‚Ä¶hen they're changed externally (say by pulling down changed files from git).
Fix should be pushed up to Josh.","Great, thanks for the PR.  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,761,2016-04-20T12:52:18Z,2016-04-20T14:23:36Z,2016-04-21T04:43:06Z,MERGED,True,141,11,5,https://github.com/mattbenic,Editor plugin context menus,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/761,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/761,Just a quickie to add context menu support to the editor plugins,Just a quickie to add context menu support to the editor plugins,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,761,2016-04-20T12:52:18Z,2016-04-20T14:23:36Z,2016-04-21T04:43:06Z,MERGED,True,141,11,5,https://github.com/mattbenic,Editor plugin context menus,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/761,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/761#issuecomment-212446024,Just a quickie to add context menu support to the editor plugins,Nice work!  LANDING! :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,763,2016-04-23T15:25:52Z,2016-04-25T18:27:21Z,2016-04-26T07:05:01Z,MERGED,True,27,22,4,https://github.com/mattbenic,Simplified context menu API to pass node and asset directly.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/763,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/763,Fixed all plugins processing all menu events even if already processed. Fixed HierarchyFrameMenu passing already processed events to plugins.,Fixed all plugins processing all menu events even if already processed. Fixed HierarchyFrameMenu passing already processed events to plugins.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,763,2016-04-23T15:25:52Z,2016-04-25T18:27:21Z,2016-04-26T07:05:01Z,MERGED,True,27,22,4,https://github.com/mattbenic,Simplified context menu API to pass node and asset directly.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/763,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/763#issuecomment-214470931,Fixed all plugins processing all menu events even if already processed. Fixed HierarchyFrameMenu passing already processed events to plugins.,"Nice cleanups, landing, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,766,2016-04-26T00:54:10Z,2016-04-26T01:31:18Z,2016-04-26T01:31:22Z,MERGED,True,85,7,7,https://github.com/JoshEngebretson,"Adding method to set WebView user agent, product version, and debug port",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/766,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/766,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,767,2016-04-26T07:04:15Z,2016-04-27T03:11:48Z,2016-05-03T05:37:25Z,MERGED,True,37,9,3,https://github.com/mattbenic,Alphabetic ts bindings,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,767,2016-04-26T07:04:15Z,2016-04-27T03:11:48Z,2016-05-03T05:37:25Z,MERGED,True,37,9,3,https://github.com/mattbenic,Alphabetic ts bindings,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767#issuecomment-214764205,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,"Awesome!  Let the *.d.ts improvements begin! :)
I'll look into this bizarro build error on Linux, which has absolutely no bearing on this PR
Error: /var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Source/ThirdParty/kNet/src/unix/UnixEvent.cpp: In member function ‚Äòvoid kNet::Event::Set()‚Äô:
/var/lib/jenkins/jobs/AtomicDS_BuildBinaries_Linux/workspace/Source/ThirdParty/kNet/src/unix/UnixEvent.cpp:157:32: warning: ignoring return value of ‚Äòssize_t read(int, void*, size_t)‚Äô, declared with attribute warn_unused_result [-Wunused-result]
  read(fd[0], &val, sizeof(val));
(See full trace by running task with --trace)
Build step 'Execute shell' marked build as failure
Finished: FAILURE",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,767,2016-04-26T07:04:15Z,2016-04-27T03:11:48Z,2016-05-03T05:37:25Z,MERGED,True,37,9,3,https://github.com/mattbenic,Alphabetic ts bindings,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767#issuecomment-214825048,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,767,2016-04-26T07:04:15Z,2016-04-27T03:11:48Z,2016-05-03T05:37:25Z,MERGED,True,37,9,3,https://github.com/mattbenic,Alphabetic ts bindings,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767#issuecomment-214829397,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,"The linux console was obscuring the clang error, which is being reported on OSX.
/Users/jenkins/Home/workspace/AtomicDS_BuildAtomicTool_Mac/Source/ToolCore/JSBind/JSBTypeScript.cpp:291:21: error: non-const lvalue reference to type 'Vector<[...]>' cannot bind to a temporary of type 'Vector<[...]>'
    Vector<String>& constants = module->GetConstants().Keys();

I'll apply a fix in a local branch and land this later today",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,767,2016-04-26T07:04:15Z,2016-04-27T03:11:48Z,2016-05-03T05:37:25Z,MERGED,True,37,9,3,https://github.com/mattbenic,Alphabetic ts bindings,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/767#issuecomment-214958734,Sorts items in generated .d.ts alphabetically. This is to avoid different machines with different directory sorting default generating different versions which are a pain for source control.,"Thanks for the PR, merged via quick fix in #770",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,768,2016-04-26T20:00:10Z,2016-04-27T00:43:24Z,2016-04-27T00:59:01Z,MERGED,True,49,0,1,https://github.com/Type1J,Adding extra event loop support for per frame events,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/768,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/768,"Adding requestAnimationFrame() and cancelAnimationFrame().
These offer per frame callbacks, and have an API that matches the web browser API exactly, so external tweening libraries (like GSAP) work in Atomic Game Engine without modification.
...To be perfectly honest, GSAP doesn't work out of the box. Here's a frontend script that I use:
require(""AtomicEventLoop"");
(function (globalVar) {
    if (globalVar.window === undefined) {
        globalVar.window = globalVar;
    }
    if (globalVar.global === undefined) {
        globalVar.global = globalVar;
    }
})(new Function('return this')());
require(""GSAP/TweenLite"");

This script assumes that:
1, ""TweenLite.js"" is in ""Modules/GSAP/TweenLite.js"".
2. The version of Atomic Game Engine used has this pull request.
I am going to go through the UI library soon and make another PR for the modifications to make most tweening libraries (Tween.js, GSAP, and others) work without update callback hacks necessary for some values now.
I think you could add TimelineLite/TweenMax/TimelineMax to the GSAP.js script above, but I haven't tried.","Adding requestAnimationFrame() and cancelAnimationFrame().
These offer per frame callbacks, and have an API that matches the web browser API exactly, so external tweening libraries (like GSAP) work in Atomic Game Engine without modification.
...To be perfectly honest, GSAP doesn't work out of the box. Here's a frontend script that I use:
require(""AtomicEventLoop"");
(function (globalVar) {
    if (globalVar.window === undefined) {
        globalVar.window = globalVar;
    }
    if (globalVar.global === undefined) {
        globalVar.global = globalVar;
    }
})(new Function('return this')());
require(""GSAP/TweenLite"");

This script assumes that:
1, ""TweenLite.js"" is in ""Modules/GSAP/TweenLite.js"".
2. The version of Atomic Game Engine used has this pull request.
I am going to go through the UI library soon and make another PR for the modifications to make most tweening libraries (Tween.js, GSAP, and others) work without update callback hacks necessary for some values now.
I think you could add TimelineLite/TweenMax/TimelineMax to the GSAP.js script above, but I haven't tried.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,768,2016-04-26T20:00:10Z,2016-04-27T00:43:24Z,2016-04-27T00:59:01Z,MERGED,True,49,0,1,https://github.com/Type1J,Adding extra event loop support for per frame events,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/768,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/768#issuecomment-214930595,"Adding requestAnimationFrame() and cancelAnimationFrame().
These offer per frame callbacks, and have an API that matches the web browser API exactly, so external tweening libraries (like GSAP) work in Atomic Game Engine without modification.
...To be perfectly honest, GSAP doesn't work out of the box. Here's a frontend script that I use:
require(""AtomicEventLoop"");
(function (globalVar) {
    if (globalVar.window === undefined) {
        globalVar.window = globalVar;
    }
    if (globalVar.global === undefined) {
        globalVar.global = globalVar;
    }
})(new Function('return this')());
require(""GSAP/TweenLite"");

This script assumes that:
1, ""TweenLite.js"" is in ""Modules/GSAP/TweenLite.js"".
2. The version of Atomic Game Engine used has this pull request.
I am going to go through the UI library soon and make another PR for the modifications to make most tweening libraries (Tween.js, GSAP, and others) work without update callback hacks necessary for some values now.
I think you could add TimelineLite/TweenMax/TimelineMax to the GSAP.js script above, but I haven't tried.",Great work!  Thanks!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,769,2016-04-27T00:21:07Z,2016-04-27T00:43:53Z,2016-04-27T00:43:55Z,MERGED,True,30,15,8,https://github.com/JoshEngebretson,"Improved IPC performance for larger messages, WebView now supports transparency",5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/769,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/769,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,770,2016-04-27T00:59:01Z,2016-04-27T03:11:46Z,2016-04-27T03:11:50Z,MERGED,True,38,9,3,https://github.com/JoshEngebretson,Alphabetic ts bindings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770,Quick fix for #767 on clang/gcc,Quick fix for #767 on clang/gcc,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,770,2016-04-27T00:59:01Z,2016-04-27T03:11:46Z,2016-04-27T03:11:50Z,MERGED,True,38,9,3,https://github.com/JoshEngebretson,Alphabetic ts bindings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770#issuecomment-214937718,Quick fix for #767 on clang/gcc,"Oh msbuild.exe, why so flakey loading projects sometimes?
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,770,2016-04-27T00:59:01Z,2016-04-27T03:11:46Z,2016-04-27T03:11:50Z,MERGED,True,38,9,3,https://github.com/JoshEngebretson,Alphabetic ts bindings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/770#issuecomment-214954938,Quick fix for #767 on clang/gcc,"Once more with feeling:
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764","This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-214953408,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764","Neat!  I'll have a closer look at this tomorrow, looking forward to scrolling through the amalgamated Atomic.d.ts üëç
The New BSD license is fine and don't fret about the CI error.  I am having difficulties with the build box,  Winders(tm)!!!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-214958474,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-214961582,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764",Cool. I'm starting to dive back into the TS integrations and this should help clean things up.  üòÄ,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-215205879,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764","Great, checks out here and the amalgamated Atomic.d.ts is freaking wunderbar ‚ù§Ô∏è
One thing that would be good is to have all generated stuff filtered into ./Artifacts instead of in the source tree.  I think there might be a few places to address this and won't hold up this PR for it... LANDING! Thanks! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/shaddockh,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-215228519,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764","It should be easy enough to generate it somewhere else (just change the --out param).  I've got it generating in the source tree and then copied out to a location in Data.  Currently, it copies to:
./Data/AtomicEditor/TypeScriptSupport/Atomic.d.ts . Is this correct?  Or should the process that copies all the files into the app bundle, also copy the generated files into the correct directory structure?
Might be good to start an issue to track build protocol.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,771,2016-04-27T01:38:59Z,2016-04-27T19:43:23Z,2016-04-27T23:26:05Z,MERGED,True,19120,3,111,https://github.com/shaddockh,Combine d.ts files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/771#issuecomment-215262628,"This PR adds an extra build step that will combine all of the generated d.ts files into a single Atomic.d.ts and place it under Script/TypeScript/dist and also placed in the distribution under Data/AtomicEditor/TypeScriptSupport.
A new dependency was brought in to accomplish this: https://github.com/SitePen/dts-generator which is under the New BSD, so if that's not compatible then I'll determine another way to do this.
This closes #764","I think temporary files should definitely be generated under Artifacts, this way when doing a non-Dev Build everything will be built/generated/copied in the Artifacts folder.
Dev Builds run from the resources/data in the source tree, which is really helpful while developing.  This fact complicates keeping the source tree clean, wrt generated files.  We probably do have to copy required files into the source tree for the time being.
I'll paste this into an issue :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215109319,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","By the way, this is GSAP.js, which loads TweenMax and TimelineMax, so all of the features are available:
require(""AtomicEventLoop"");

(function (globalVar) {
    if (globalVar.window === undefined) {
        globalVar.window = globalVar;
    }
    if (globalVar.global === undefined) {
        globalVar.global = globalVar;
    }
    if (globalVar.document === undefined) {
        globalVar.document = {
            createElement: function(type){
                return {
                    style: {}
                }
            }
        };
    }
    if (globalVar.navigator === undefined) {
        globalVar.navigator = {
            userAgent: """"
        };
    }
})(new Function('return this')());

var defineTemp = global.define;
global.define = function() {}
global.define.amd = true;

require(""GSAP/TweenMax"");
require(""GSAP/TimelineMax"");

global.define = defineTemp;
if (defineTemp === undefined) {
    delete global.define;
}

Loading Tween.js or some other tweening library is probably easier, but GSAP is certainly has the most flexibility and control.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215182665,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","Excellent, animating the Atomic UI with tweening, this totally made my morning! Do you have an AtomicExample brewing with it?  I so want to check it out!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215200510,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","The code listed above in the  is all I have for now, which is just a modification of an existing example that's meant to show off something else (3D Particles). An example for this really needs to show off tweening, so I'm guessing something where a lot of images and words fly around would be good.
I really want some text tweening going on, but I'm not sure how to replicate the GSAP SplitText class in Atomic. What it seems to do is fairly straightforward, but I'm not sure if the UI subsystem is where I'd want to do that, though, because there's a good deal of transforms that you'd want to apply to each letter or word. It would probably map better to the 3D nodes.
Do we have a signed distance field implementation in Atomic?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215268873,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","That sounds cool, Text3D (SignedDistanceFieldText) needs to be brought over from Urho3D and possibly refactored a bit as it is in the stock UI module: https://github.com/urho3d/Urho3D/blob/master/Source/Urho3D/UI/Text3D.cpp
I looked over the PR and had just one nit regarding tb namespace usage in a method parameter.  Let me know if the overload selection is at all confusing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215272156,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:",Thanks. I'll look at this later tonight or tomorrow.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215409668,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","I think that we really need access to the font ID even if it's just a hash, so that we can do something like:
var b1 = new Atomic.UIButton();
b1.fontId = ""Vera"";
// ... Later
var b2 = new Atomic.UIButton();
b2.fontIdHash = b1.fontIdHash; // Make b2's font the same as b1's.

The .fontId property is write only.
By the way, right now, write only properties will cause a compile time error in C++ if you attempt to read them (no such symbol ""GetXXX()""), but in JavaScript the property value returns as undefined with no indication that you didn't actually call a non-existent getter, which has a high level of mind blowing potential. Should the script bindings generate a dummy getter (or setter) that throws for write-only (or read-only) properties, or should we just add a getter that throws, or leave it the way it is, and hope that people figure it out? üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215801881,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","Conversion from string to StringHash and TBID can be unwieldy, as we're seeing here.
You're right fontID and fontIDHash being separate properties is going to be confusing as heck, as are write/read only properties not being obvious (at least in vanilla JS).  How about we store a backing string instance variable, which is internally sets TBID on the font description whenever set and use the backing string on a get?  I haven't look in depth on other factors on this... soooo I may be missing something ;)
Another option is to modify TurboBadger to keep the TBID strings in release builds as well as debug, so we can access them.  We'd have to look into side effects on this, though could be really handy.
Good idea on the getter/setter throw for read/write only variables, filed as  #777
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215934326,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","It turns out that we can get the name from the Turbo Badger font manager. The scripts only ever use the string ID, so there's only 1 property: "".fontId"" exposed to the script. It's pretty useful to use from C++ as well.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-215978313,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:",Very cool and thanks for sorting the FontID :)  LANDING!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-216642683,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","@JoshEngebretson and @LaraEngebretson
There are some people asking about Atomic Game Engine on the GreenSock forum. You might be able to give better answers than I can. http://greensock.com/forums/topic/8325-tween-an-array-value/
(Look towards the bottom. It's a long thread.)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-217059230,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","I'm having a bit of trouble integrating Text3D. None of the SystemUI is scriptable right now, so I made a test in UI.cpp:
void UI::LoadTest()
{
    ResourceCache* cache = GetSubsystem<ResourceCache>();

    Scene* scene = new Scene(context_);
    scene->CreateComponent<Octree>();

    Node* planeNode = scene->CreateChild(""Plane"");
    planeNode->SetScale(Vector3(100.0f, 1.0f, 100.0f));
    StaticModel* planeObject = planeNode->CreateComponent<StaticModel>();
    planeObject->SetModel(cache->GetResource<Model>(""Models/Plane.mdl""));
    planeObject->SetMaterial(cache->GetResource<Material>(""Materials/StoneTiled.xml""));

    Node* lightNode = scene->CreateChild(""DirectionalLight"");
    lightNode->SetDirection(Vector3(0.6f, -1.0f, 0.8f)); // The direction vector does not need to be normalized
    Light* light = lightNode->CreateComponent<Light>();
    light->SetLightType(LIGHT_DIRECTIONAL);

    Node* mushroomNode = scene->CreateChild(""Mushroom"");
    mushroomNode->SetPosition(Vector3(0.0f, 0.0f, 0.0f));
    mushroomNode->SetScale(1.0f);
    StaticModel* mushroomObject = mushroomNode->CreateComponent<StaticModel>();
    mushroomObject->SetModel(cache->GetResource<Model>(""Models/Mushroom.mdl""));
    mushroomObject->SetMaterial(cache->GetResource<Material>(""Materials/Mushroom.xml""));

    Node* mushroomTitleNode = mushroomNode->CreateChild(""MushroomTitle"");
    mushroomTitleNode->SetPosition(Vector3(0.0f, 1.2f, 0.0f));
    SystemUI::Text3D* mushroomTitleText = mushroomTitleNode->CreateComponent<SystemUI::Text3D>();
    mushroomTitleText->SetText(""Mushroom Here"");
    mushroomTitleText->SetFont(cache->GetResource<SystemUI::Font>(""Fonts/BlueHighway.sdf""), 24);

    mushroomTitleText->SetColor(Color::GREEN);
    mushroomTitleText->SetTextEffect(SystemUI::TE_SHADOW);
    mushroomTitleText->SetEffectColor(Color(0.5f, 0.5f, 0.5f));

    mushroomTitleText->SetAlignment(SystemUI::HA_CENTER, SystemUI::VA_CENTER);

    Node* cameraNode = scene->CreateChild(""Camera"");
    cameraNode->CreateComponent<Camera>();

    // Set an initial position for the camera scene node above the plane
    cameraNode->SetPosition(Vector3(0.0f, 5.0f, -20.0f));


    Renderer* renderer = GetSubsystem<Renderer>();

    // Set up a viewport to the Renderer subsystem so that the 3D scene can be seen. We need to define the scene and the camera
    // at minimum. Additionally we could configure the viewport screen size and the rendering path (eg. forward / deferred) to
    // use, but now we just use full screen and default render path configured in the engine command line options
    SharedPtr<Viewport> viewport(new Viewport(context_, scene, cameraNode->GetComponent<Camera>()));
    renderer->SetViewport(0, viewport);
}

That's a slight modification of the 35_SignedDistanceFieldText Sample from Urho3D.
The following main.js is used:
Atomic.getUI().loadTest();

I expect to see a mushroom with text over it. Instead I see this:

(A mushroom with no text over it)
The only other things to note are that I had to register the Text3D in SystemUI.cpp:
Text3D::RegisterObject(context);
And I did have to modify Text3D.h and Text3D.cpp:
Text3D.h:
//
// Copyright (c) 2008-2016 the Urho3D project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#pragma once

#include ""../../Graphics/Drawable.h""
#include ""../../Graphics/VertexBuffer.h""
#include ""../../Math/Matrix3x4.h""
#include ""../../UI/SystemUI/Text.h""

namespace Atomic
{

namespace SystemUI
{

class Text;

/// 3D text component.
class ATOMIC_API Text3D : public Drawable
{
    OBJECT(Text3D);

public:
    /// Construct.
    Text3D(Context* context);
    /// Destruct.
    ~Text3D();
    /// Register object factory. Drawable must be registered first.
    static void RegisterObject(Context* context);

    /// Apply attribute changes that can not be applied immediately.
    virtual void ApplyAttributes();
    /// Calculate distance and prepare batches for rendering. May be called from worker thread(s), possibly re-entrantly.
    virtual void UpdateBatches(const FrameInfo& frame);
    /// Prepare geometry for rendering. Called from a worker thread if possible (no GPU update.)
    virtual void UpdateGeometry(const FrameInfo& frame);
    /// Return whether a geometry update is necessary, and if it can happen in a worker thread.
    virtual UpdateGeometryType GetUpdateGeometryType();

    /// Set font and font size and use signed distance field font. Return true if successful.
    bool SetFont(const String& fontName, int size = DEFAULT_FONT_SIZE);
    /// Set font and font size and use signed distance field font. Return true if successful.
    bool SetFont(Font* font, int size = DEFAULT_FONT_SIZE);
    /// Set material.
    void SetMaterial(Material* material);
    /// Set text. Text is assumed to be either ASCII or UTF8-encoded.
    void SetText(const String& text);
    /// Set horizontal and vertical alignment.
    void SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign);
    /// Set horizontal alignment.
    void SetHorizontalAlignment(HorizontalAlignment align);
    /// Set vertical alignment.
    void SetVerticalAlignment(VerticalAlignment align);
    /// Set row alignment.
    void SetTextAlignment(HorizontalAlignment align);
    /// Set row spacing, 1.0 for original font spacing.
    void SetRowSpacing(float spacing);
    /// Set wordwrap. In wordwrap mode the text element will respect its current width. Otherwise it resizes itself freely.
    void SetWordwrap(bool enable);
    /// Set text effect.
    void SetTextEffect(TextEffect textEffect);
    /// Set effect color.
    void SetEffectColor(const Color& effectColor);
    /// Set effect Z bias.
    void SetEffectDepthBias(float bias);
    /// Set text width. Only has effect in word wrap mode.
    void SetWidth(int width);
    /// Set color on all corners.
    void SetColor(const Color& color);
    /// Set color on one corner.
    void SetColor(Corner corner, const Color& color);
    /// Set opacity.
    void SetOpacity(float opacity);
    /// Set how the text should rotate in relation to the camera. Default is to not rotate (FC_NONE.)
    void SetFaceCameraMode(FaceCameraMode mode);

    /// Return font.
    Font* GetFont() const;
    /// Return material.
    Material* GetMaterial() const;
    /// Return font size.
    int GetFontSize() const;
    /// Return text.
    const String& GetText() const;
    /// Return row alignment.
    HorizontalAlignment GetTextAlignment() const;
    /// Return horizontal alignment.
    HorizontalAlignment GetHorizontalAlignment() const;
    /// Return vertical alignment.
    VerticalAlignment GetVerticalAlignment() const;
    /// Return row spacing.
    float GetRowSpacing() const;
    /// Return wordwrap mode.
    bool GetWordwrap() const;
    /// Return text effect.
    TextEffect GetTextEffect() const;
    /// Return effect color.
    const Color& GetEffectColor() const;
    /// Return effect depth bias.
    float GetEffectDepthBias() const;
    /// Return text width.
    int GetWidth() const;
    /// Return row height.
    int GetRowHeight() const;
    /// Return number of rows.
    unsigned GetNumRows() const;
    /// Return number of characters.
    unsigned GetNumChars() const;
    /// Return width of row by index.
    int GetRowWidth(unsigned index) const;
    /// Return position of character by index relative to the text element origin.
    IntVector2 GetCharPosition(unsigned index);
    /// Return size of character by index.
    IntVector2 GetCharSize(unsigned index);
    /// Return corner color.
    const Color& GetColor(Corner corner) const;
    /// Return opacity.
    float GetOpacity() const;

    /// Return how the text rotates in relation to the camera.
    FaceCameraMode GetFaceCameraMode() const { return faceCameraMode_; }

    /// Set font attribute.
    void SetFontAttr(const ResourceRef& value);
    /// Return font attribute.
    ResourceRef GetFontAttr() const;
    /// Set material attribute.
    void SetMaterialAttr(const ResourceRef& value);
    /// Return material attribute.
    ResourceRef GetMaterialAttr() const;

    /// Get color attribute. Uses just the top-left color.
    const Color& GetColorAttr() const { return text_.color_[0]; }

protected:
    /// Handle node being assigned.
    virtual void OnNodeSet(Node* node);
    /// Recalculate the world-space bounding box.
    virtual void OnWorldBoundingBoxUpdate();

private:
    /// Mark text & geometry dirty.
    void MarkTextDirty();
    /// Update text %UI batches.
    void UpdateTextBatches();
    /// Create materials for text rendering. May only be called from the main thread. Text %UI batches must be up-to-date.
    void UpdateTextMaterials(bool forceUpdate = false);

    /// Internally used text element.
    Text text_;
    /// Geometries.
    Vector<SharedPtr<Geometry> > geometries_;
    /// Vertex buffer.
    SharedPtr<VertexBuffer> vertexBuffer_;
    /// Material to use as a base for the text material(s).
    SharedPtr<Material> material_;
    /// Text UI batches.
    PODVector<SystemUIBatch> uiBatches_;
    /// Text vertex data.
    PODVector<float> uiVertexData_;
    /// Custom world transform for facing the camera automatically.
    Matrix3x4 customWorldTransform_;
    /// Text rotation mode in relation to the camera.
    FaceCameraMode faceCameraMode_;
    /// Text needs update flag.
    bool textDirty_;
    /// Geometry dirty flag.
    bool geometryDirty_;
    /// Flag for whether currently using SDF shader defines in the generated material.
    bool usingSDFShader_;
    /// Font texture data lost flag.
    bool fontDataLost_;
};

}

}

Text3D.cpp:
//
// Copyright (c) 2008-2016 the Urho3D project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include ""../../Core/Context.h""
#include ""../../Graphics/Camera.h""
#include ""../../Graphics/Geometry.h""
#include ""../../Graphics/Material.h""
#include ""../../Graphics/Technique.h""
#include ""../../Graphics/VertexBuffer.h""
#include ""../../IO/Log.h""
#include ""../../Resource/ResourceCache.h""
#include ""../../Scene/Node.h""
#include ""../../UI/SystemUI/Font.h""
#include ""../../UI/SystemUI/Text.h""
#include ""../../UI/SystemUI/Text3D.h""

namespace Atomic
{

extern const char* faceCameraModeNames[];
extern const char* GEOMETRY_CATEGORY;

namespace SystemUI
{

extern const char* horizontalAlignments[];
extern const char* verticalAlignments[];
extern const char* textEffects[];

static const float TEXT_SCALING = 1.0f / 128.0f;
static const float DEFAULT_EFFECT_DEPTH_BIAS = 0.1f;

Text3D::Text3D(Context* context) :
    Drawable(context, DRAWABLE_GEOMETRY),
    text_(context),
    vertexBuffer_(new VertexBuffer(context_)),
    customWorldTransform_(Matrix3x4::IDENTITY),
    faceCameraMode_(FC_NONE),
    textDirty_(true),
    geometryDirty_(true),
    usingSDFShader_(false),
    fontDataLost_(false)
{
    text_.SetUsedInText3D(true);
    text_.SetEffectDepthBias(DEFAULT_EFFECT_DEPTH_BIAS);
}

Text3D::~Text3D()
{
}

void Text3D::RegisterObject(Context* context)
{
    context->RegisterFactory<Text3D>(GEOMETRY_CATEGORY);

    ACCESSOR_ATTRIBUTE(""Is Enabled"", IsEnabled, SetEnabled, bool, true, AM_DEFAULT);
    MIXED_ACCESSOR_ATTRIBUTE(""Font"", GetFontAttr, SetFontAttr, ResourceRef, ResourceRef(Font::GetTypeStatic()), AM_DEFAULT);
    MIXED_ACCESSOR_ATTRIBUTE(""Material"", GetMaterialAttr, SetMaterialAttr, ResourceRef, ResourceRef(Material::GetTypeStatic()),
        AM_DEFAULT);
    ATTRIBUTE(""Font Size"", int, text_.fontSize_, DEFAULT_FONT_SIZE, AM_DEFAULT);
    ATTRIBUTE(""Text"", String, text_.text_, String::EMPTY, AM_DEFAULT);
    ENUM_ATTRIBUTE(""Text Alignment"", text_.textAlignment_, horizontalAlignments, HA_LEFT, AM_DEFAULT);
    ATTRIBUTE(""Row Spacing"", float, text_.rowSpacing_, 1.0f, AM_DEFAULT);
    ATTRIBUTE(""Word Wrap"", bool, text_.wordWrap_, false, AM_DEFAULT);
    ACCESSOR_ATTRIBUTE(""Can Be Occluded"", IsOccludee, SetOccludee, bool, true, AM_DEFAULT);
    ENUM_ATTRIBUTE(""Face Camera Mode"", faceCameraMode_, faceCameraModeNames, FC_NONE, AM_DEFAULT);
    ACCESSOR_ATTRIBUTE(""Draw Distance"", GetDrawDistance, SetDrawDistance, float, 0.0f, AM_DEFAULT);
    ACCESSOR_ATTRIBUTE(""Width"", GetWidth, SetWidth, int, 0, AM_DEFAULT);
    ENUM_ACCESSOR_ATTRIBUTE(""Horiz Alignment"", GetHorizontalAlignment, SetHorizontalAlignment, HorizontalAlignment,
        horizontalAlignments, HA_LEFT, AM_DEFAULT);
    ENUM_ACCESSOR_ATTRIBUTE(""Vert Alignment"", GetVerticalAlignment, SetVerticalAlignment, VerticalAlignment, verticalAlignments,
        VA_TOP, AM_DEFAULT);
    ACCESSOR_ATTRIBUTE(""Color"", GetColorAttr, SetColor, Color, Color::WHITE, AM_DEFAULT);
    ATTRIBUTE(""Top Left Color"", Color, text_.color_[0], Color::WHITE, AM_DEFAULT);
    ATTRIBUTE(""Top Right Color"", Color, text_.color_[1], Color::WHITE, AM_DEFAULT);
    ATTRIBUTE(""Bottom Left Color"", Color, text_.color_[2], Color::WHITE, AM_DEFAULT);
    ATTRIBUTE(""Bottom Right Color"", Color, text_.color_[3], Color::WHITE, AM_DEFAULT);
    ENUM_ATTRIBUTE(""Text Effect"", text_.textEffect_, textEffects, TE_NONE, AM_DEFAULT);
    ACCESSOR_ATTRIBUTE(""Effect Color"", GetEffectColor, SetEffectColor, Color, Color::BLACK, AM_DEFAULT);
    ATTRIBUTE(""Effect Depth Bias"", float, text_.effectDepthBias_, DEFAULT_EFFECT_DEPTH_BIAS, AM_DEFAULT);
    COPY_BASE_ATTRIBUTES(Drawable);
}

void Text3D::ApplyAttributes()
{
    text_.ApplyAttributes();
    MarkTextDirty();
    UpdateTextBatches();
    UpdateTextMaterials();
}

void Text3D::UpdateBatches(const FrameInfo& frame)
{
    distance_ = frame.camera_->GetDistance(GetWorldBoundingBox().Center());

    if (faceCameraMode_ != FC_NONE)
    {
        Vector3 worldPosition = node_->GetWorldPosition();
        customWorldTransform_ = Matrix3x4(worldPosition, frame.camera_->GetFaceCameraRotation(
            worldPosition, node_->GetWorldRotation(), faceCameraMode_), node_->GetWorldScale());
        worldBoundingBoxDirty_ = true;
    }

    for (unsigned i = 0; i < batches_.Size(); ++i)
    {
        batches_[i].distance_ = distance_;
        batches_[i].worldTransform_ = faceCameraMode_ != FC_NONE ? &customWorldTransform_ : &node_->GetWorldTransform();
    }

    for (unsigned i = 0; i < uiBatches_.Size(); ++i)
    {
        if (uiBatches_[i].texture_ && uiBatches_[i].texture_->IsDataLost())
        {
            fontDataLost_ = true;
            break;
        }
    }
}

void Text3D::UpdateGeometry(const FrameInfo& frame)
{
    if (fontDataLost_)
    {
        // Re-evaluation of the text triggers the font face to reload itself
        UpdateTextBatches();
        UpdateTextMaterials();
        fontDataLost_ = false;
    }

    if (geometryDirty_)
    {
        for (unsigned i = 0; i < batches_.Size(); ++i)
        {
            Geometry* geometry = geometries_[i];
            geometry->SetDrawRange(TRIANGLE_LIST, 0, 0, uiBatches_[i].vertexStart_,
                (uiBatches_[i].vertexEnd_ - uiBatches_[i].vertexStart_) / UI_VERTEX_SIZE);
        }
    }

    if ((geometryDirty_ || vertexBuffer_->IsDataLost()) && uiVertexData_.Size())
    {
        unsigned vertexCount = uiVertexData_.Size() / UI_VERTEX_SIZE;
        if (vertexBuffer_->GetVertexCount() != vertexCount)
            vertexBuffer_->SetSize(vertexCount, MASK_POSITION | MASK_COLOR | MASK_TEXCOORD1);
        vertexBuffer_->SetData(&uiVertexData_[0]);
    }

    geometryDirty_ = false;
}

UpdateGeometryType Text3D::GetUpdateGeometryType()
{
    if (geometryDirty_ || fontDataLost_ || vertexBuffer_->IsDataLost())
        return UPDATE_MAIN_THREAD;
    else
        return UPDATE_NONE;
}

void Text3D::SetMaterial(Material* material)
{
    material_ = material;

    UpdateTextMaterials(true);
}

bool Text3D::SetFont(const String& fontName, int size)
{
    bool success = text_.SetFont(fontName, size);

    // Changing font requires materials to be re-evaluated. Material evaluation can not be done in worker threads,
    // so UI batches must be brought up-to-date immediately
    MarkTextDirty();
    UpdateTextBatches();
    UpdateTextMaterials();

    return success;
}

bool Text3D::SetFont(Font* font, int size)
{
    bool success = text_.SetFont(font, size);

    MarkTextDirty();
    UpdateTextBatches();
    UpdateTextMaterials();

    return success;
}

void Text3D::SetText(const String& text)
{
    text_.SetText(text);

    // Changing text requires materials to be re-evaluated, in case the font is multi-page
    MarkTextDirty();
    UpdateTextBatches();
    UpdateTextMaterials();
}

void Text3D::SetAlignment(HorizontalAlignment hAlign, VerticalAlignment vAlign)
{
    text_.SetAlignment(hAlign, vAlign);

    MarkTextDirty();
}

void Text3D::SetHorizontalAlignment(HorizontalAlignment align)
{
    text_.SetHorizontalAlignment(align);

    MarkTextDirty();
}

void Text3D::SetVerticalAlignment(VerticalAlignment align)
{
    text_.SetVerticalAlignment(align);

    MarkTextDirty();
}

void Text3D::SetTextAlignment(HorizontalAlignment align)
{
    text_.SetTextAlignment(align);

    MarkTextDirty();
}

void Text3D::SetRowSpacing(float spacing)
{
    text_.SetRowSpacing(spacing);

    MarkTextDirty();
}

void Text3D::SetWordwrap(bool enable)
{
    text_.SetWordwrap(enable);

    MarkTextDirty();
}

void Text3D::SetTextEffect(TextEffect textEffect)
{
    text_.SetTextEffect(textEffect);

    MarkTextDirty();
    UpdateTextMaterials(true);
}

void Text3D::SetEffectColor(const Color& effectColor)
{
    text_.SetEffectColor(effectColor);

    MarkTextDirty();
    UpdateTextMaterials();
}

void Text3D::SetEffectDepthBias(float bias)
{
    text_.SetEffectDepthBias(bias);

    MarkTextDirty();
}

void Text3D::SetWidth(int width)
{
    text_.SetMinWidth(width);
    text_.SetWidth(width);

    MarkTextDirty();
}

void Text3D::SetColor(const Color& color)
{
    text_.SetColor(color);

    MarkTextDirty();
}

void Text3D::SetColor(Corner corner, const Color& color)
{
    text_.SetColor(corner, color);

    MarkTextDirty();
}

void Text3D::SetOpacity(float opacity)
{
    text_.SetOpacity(opacity);

    MarkTextDirty();
}

void Text3D::SetFaceCameraMode(FaceCameraMode mode)
{
    if (mode != faceCameraMode_)
    {
        faceCameraMode_ = mode;

        // Bounding box must be recalculated
        OnMarkedDirty(node_);
    }
}

Material* Text3D::GetMaterial() const
{
    return material_;
}

Font* Text3D::GetFont() const
{
    return text_.GetFont();
}

int Text3D::GetFontSize() const
{
    return text_.GetFontSize();
}

const String& Text3D::GetText() const
{
    return text_.GetText();
}

HorizontalAlignment Text3D::GetHorizontalAlignment() const
{
    return text_.GetHorizontalAlignment();
}

VerticalAlignment Text3D::GetVerticalAlignment() const
{
    return text_.GetVerticalAlignment();
}

HorizontalAlignment Text3D::GetTextAlignment() const
{
    return text_.GetTextAlignment();
}

float Text3D::GetRowSpacing() const
{
    return text_.GetRowSpacing();
}

bool Text3D::GetWordwrap() const
{
    return text_.GetWordwrap();
}

TextEffect Text3D::GetTextEffect() const
{
    return text_.GetTextEffect();
}

const Color& Text3D::GetEffectColor() const
{
    return text_.GetEffectColor();
}

float Text3D::GetEffectDepthBias() const
{
    return text_.GetEffectDepthBias();
}

int Text3D::GetWidth() const
{
    return text_.GetWidth();
}

int Text3D::GetRowHeight() const
{
    return text_.GetRowHeight();
}

unsigned Text3D::GetNumRows() const
{
    return text_.GetNumRows();
}

unsigned Text3D::GetNumChars() const
{
    return text_.GetNumChars();
}

int Text3D::GetRowWidth(unsigned index) const
{
    return text_.GetRowWidth(index);
}

IntVector2 Text3D::GetCharPosition(unsigned index)
{
    return text_.GetCharPosition(index);
}

IntVector2 Text3D::GetCharSize(unsigned index)
{
    return text_.GetCharSize(index);
}

const Color& Text3D::GetColor(Corner corner) const
{
    return text_.GetColor(corner);
}

float Text3D::GetOpacity() const
{
    return text_.GetOpacity();
}

void Text3D::OnNodeSet(Node* node)
{
    Drawable::OnNodeSet(node);

    if (node)
        customWorldTransform_ = node->GetWorldTransform();
}

void Text3D::OnWorldBoundingBoxUpdate()
{
    if (textDirty_)
        UpdateTextBatches();

    // In face camera mode, use the last camera rotation to build the world bounding box
    worldBoundingBox_ = boundingBox_.Transformed(faceCameraMode_ != FC_NONE ? Matrix3x4(node_->GetWorldPosition(),
        customWorldTransform_.Rotation(), node_->GetWorldScale()) : node_->GetWorldTransform());
}

void Text3D::MarkTextDirty()
{
    textDirty_ = true;

    OnMarkedDirty(node_);
    MarkNetworkUpdate();
}

void Text3D::SetMaterialAttr(const ResourceRef& value)
{
    ResourceCache* cache = GetSubsystem<ResourceCache>();
    SetMaterial(cache->GetResource<Material>(value.name_));
}

void Text3D::SetFontAttr(const ResourceRef& value)
{
    ResourceCache* cache = GetSubsystem<ResourceCache>();
    text_.font_ = cache->GetResource<Font>(value.name_);
}

ResourceRef Text3D::GetMaterialAttr() const
{
    return GetResourceRef(material_, Material::GetTypeStatic());
}

ResourceRef Text3D::GetFontAttr() const
{
    return GetResourceRef(text_.font_, Font::GetTypeStatic());
}

void Text3D::UpdateTextBatches()
{
    uiBatches_.Clear();
    uiVertexData_.Clear();

    text_.GetBatches(uiBatches_, uiVertexData_, IntRect::ZERO);

    Vector3 offset(Vector3::ZERO);

    switch (text_.GetHorizontalAlignment())
    {
    case HA_LEFT:
        break;

    case HA_CENTER:
        offset.x_ -= (float)text_.GetWidth() * 0.5f;
        break;

    case HA_RIGHT:
        offset.x_ -= (float)text_.GetWidth();
        break;
    }

    switch (text_.GetVerticalAlignment())
    {
    case VA_TOP:
        break;

    case VA_CENTER:
        offset.y_ -= (float)text_.GetHeight() * 0.5f;
        break;

    case VA_BOTTOM:
        offset.y_ -= (float)text_.GetHeight();
        break;
    }

    boundingBox_.Clear();

    for (unsigned i = 0; i < uiVertexData_.Size(); i += UI_VERTEX_SIZE)
    {
        Vector3& position = *(reinterpret_cast<Vector3*>(&uiVertexData_[i]));
        position += offset;
        position *= TEXT_SCALING;
        position.y_ = -position.y_;
        boundingBox_.Merge(position);
    }

    textDirty_ = false;
    geometryDirty_ = true;
}

void Text3D::UpdateTextMaterials(bool forceUpdate)
{
    Font* font = GetFont();
    bool isSDFFont = font ? font->IsSDFFont() : false;

    batches_.Resize(uiBatches_.Size());
    geometries_.Resize(uiBatches_.Size());

    for (unsigned i = 0; i < batches_.Size(); ++i)
    {
        if (!geometries_[i])
        {
            Geometry* geometry = new Geometry(context_);
            geometry->SetVertexBuffer(0, vertexBuffer_);
            batches_[i].geometry_ = geometries_[i] = geometry;
        }

        if (!batches_[i].material_ || forceUpdate || isSDFFont != usingSDFShader_)
        {
            // If material not defined, create a reasonable default from scratch
            if (!material_)
            {
                Material* material = new Material(context_);
                Technique* tech = new Technique(context_);
                Pass* pass = tech->CreatePass(""alpha"");
                pass->SetVertexShader(""Text"");
                pass->SetPixelShader(""Text"");

                if (isSDFFont)
                {
                    switch (GetTextEffect())
                    {
                    case TE_NONE:
                        pass->SetPixelShaderDefines(""SIGNED_DISTANCE_FIELD"");
                        break;

                    case TE_SHADOW:
                        pass->SetPixelShaderDefines(""SIGNED_DISTANCE_FIELD TEXT_EFFECT_SHADOW"");
                        break;

                    case TE_STROKE:
                        pass->SetPixelShaderDefines(""SIGNED_DISTANCE_FIELD TEXT_EFFECT_STROKE"");
                        break;
                    }
                }

                pass->SetBlendMode(BLEND_ALPHA);
                pass->SetDepthWrite(false);
                material->SetTechnique(0, tech);
                material->SetCullMode(CULL_NONE);
                batches_[i].material_ = material;
            }
            else
                batches_[i].material_ = material_->Clone();

            // Note: custom material is assumed to use the right kind of shader; it is not modified to define SIGNED_DISTANCE_FIELD
            usingSDFShader_ = isSDFFont;
        }

        Material* material = batches_[i].material_;
        Texture* texture = uiBatches_[i].texture_;
        material->SetTexture(TU_DIFFUSE, texture);

        if (isSDFFont)
        {
            switch (GetTextEffect())
            {
            case TE_SHADOW:
                if (texture)
                {
                    Vector2 shadowOffset(0.5f / texture->GetWidth(), 0.5f / texture->GetHeight());
                    material->SetShaderParameter(""ShadowOffset"", shadowOffset);
                }
                material->SetShaderParameter(""ShadowColor"", GetEffectColor());
                break;

            case TE_STROKE:
                material->SetShaderParameter(""StrokeColor"", GetEffectColor());
                break;

            default:
                break;
            }
        }
    }
}

}

}

I've made sure that I have both the .png and .sdf files in the Fonts resource directory, and I basically brought all of CoreData and Data into my project in an attempt to get it to work.
Here's the current log:
[Wed May  4 22:03 : 32 2016] INFO: Initialized system user interface
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource UI / DefaultStyle.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Textures / UI.png
[Wed May  4 22:03 : 32 2016] DEBUG : Loading temporary resource Textures / UI.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Fonts / Anonymous Pro.ttf
[Wed May  4 22:03 : 32 2016] DEBUG : Font face Anonymous Pro(11pt) has 624 glyphs
[Wed May  4 22:03 : 32 2016] INFO : Starting IPCWorker --ipc - client = 2620
[Wed May  4 22:03 : 32 2016] INFO : Starting IPCWorker --ipc - server = 2748
[Wed May  4 22:03 : 32 2016] ERROR : Opened IPC transport fd = 2748
[Wed May  4 22:03 : 32 2016] DEBUG : Reloading shaders
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Models / Plane.mdl
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Materials / StoneTiled.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Techniques / DiffNormalPacked.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Techniques / Diff.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Textures / StoneDiffuse.dds
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Textures / StoneNormal.dds
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Models / Mushroom.mdl
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Materials / Mushroom.xml
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Textures / Mushroom.dds
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Fonts / BlueHighway.sdf
[Wed May  4 22:03 : 32 2016] DEBUG : Bitmap font face BlueHighway has 169 glyphs
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Shaders / HLSL / LitSolid.hlsl
[Wed May  4 22:03 : 32 2016] DEBUG : Loading resource Shaders / HLSL / Text.hlsl
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached vertex shader LitSolid(DIRLIGHTPERPIXEL)
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached pixel shader LitSolid(AMBIENT DIFFMAP DIRLIGHT PERPIXEL SPECULAR)
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached vertex shader LitSolid(DIRLIGHTNORMALMAP PERPIXEL)
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached pixel shader LitSolid(AMBIENT DIFFMAP DIRLIGHT NORMALMAP PACKEDNORMAL PERPIXEL SPECULAR)
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached vertex shader Text()
[Wed May  4 22:03 : 32 2016] DEBUG : Loaded cached pixel shader Text(SIGNED_DISTANCE_FIELD TEXT_EFFECT_SHADOW)
Do you know what might be happening?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/Type1J,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-217059384,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","Sorry, forgot the @JoshEngebretson",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,772,2016-04-27T13:59:49Z,2016-04-30T16:49:52Z,2016-05-05T02:27:43Z,MERGED,True,360,1,4,https://github.com/Type1J,Exposing a few properties that are great for tweening on UIWidget.,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772,https://github.com/JoshEngebretson,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/772#issuecomment-217060275,"I'll have to make an example soon to show how these properties are useful. I do expose opacity here, but not color, which would be useful. It seems that text color might be exposed, but not a filtered (diffuse-style) color that affects the whole widget as opacity does.
Here's my test file, just so you can see how these might be used:
'atomic component';

require(""GSAP"");

var particleEmitter;
var buttons = [];

function createButton(self, peffectName) {
    var button = new Atomic.UIButton();
    button.fontId = ""Vera"";
    button.fontSize = 30;
    button.text = peffectName;
    button.gravity = Atomic.UI_GRAVITY_RIGHT;
    button.layoutWidth = 350;
    button.layoutHeight = 50;
    button.opacity = 0.50;
    button.tl = new TimelineLite();
    button.tl.to(button, 0.25, {fontSize: 40, layoutWidth: 370, opacity: 1.0});
    button.tl.stop();
    buttons.push(button);
    button.onClick = function() {
        particleEmitter.effect = Atomic.cache.getResource(""ParticleEffect"", ""Particles/"" + peffectName + "".peffect"");
        buttons.forEach(function(button) {
            button.tl.reverse();
        });
        button.tl.play();
    }
    var current = particleEmitter.effect.name.match(/^Particles\/(.*)\.peffect$/)[1];
    if (peffectName === current) {
        button.tl.progress(1.0);
    }
    return button;
}

//UI component
exports.component = function(self) {
    var UI = Atomic.getUI();

    particleEmitter = self.getComponent(""ParticleEmitter"");

    self.uiView = new Atomic.UIView();

    var layout = new Atomic.UILayout();
    layout.rect = self.uiView.rect;
    layout.axis = Atomic.UI_AXIS_Y;
    layout.layoutPosition = Atomic.UI_LAYOUT_POSITION_GRAVITY;
    self.uiView.addChild(layout);

    layout.addChild(createButton(self, ""Disco""));
    layout.addChild(createButton(self, ""Fire""));
    layout.addChild(createButton(self, ""Smoke""));
    layout.addChild(createButton(self, ""SmokeStack""));
    layout.addChild(createButton(self, ""SnowExplosion""));
};

It's based on the ParticleEmitter3D example. I'm not doing anything special with the particles; I'm only tweening the button properties. Each button is given a timeline, and it tweens the font size, width (layout based width, since it's in a layout), and opacity when it's selected, so unselected buttons are translucent, have a smaller font size, and a smaller width, while the selected button is fully opaque, has a slightly larger font size, and a slightly larger width. Those 3 properties are tweened on a button press.
Here's a (unfortunately unanimated) screenshot:","I don't see anything eyeballing it, definitely a job for a debugger.  Though, Text3D should be refactored out of SystemUI which is for internal editor/debug use only.  I am not sure how involved it would be to port to the TB UI, it isn't a ton of code though",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,774,2016-04-27T23:46:58Z,2016-04-28T03:03:56Z,2016-04-28T03:03:58Z,MERGED,True,12,1,3,https://github.com/JoshEngebretson,Add ability to set zoom level on webview + less sleep for IPC on Windows,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/774,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/774,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,775,2016-04-28T11:30:10Z,2016-04-29T16:47:10Z,2016-12-05T13:20:39Z,MERGED,True,135,28,5,https://github.com/JohnnyWahib,-Added Scene service provider for Editor plugins,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,-Added UI service functions,-Added UI service functions,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,775,2016-04-28T11:30:10Z,2016-04-29T16:47:10Z,2016-12-05T13:20:39Z,MERGED,True,135,28,5,https://github.com/JohnnyWahib,-Added Scene service provider for Editor plugins,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775#issuecomment-215796722,-Added UI service functions,"Thanks @JohnnyWahib, looks solid!  Hey @shaddockh would you mind having a once over on this PR with any TS/Plugin thoughts?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,775,2016-04-28T11:30:10Z,2016-04-29T16:47:10Z,2016-12-05T13:20:39Z,MERGED,True,135,28,5,https://github.com/JohnnyWahib,-Added Scene service provider for Editor plugins,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775#issuecomment-215797064,-Added UI service functions,"Sure thing, I'll look it over.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,775,2016-04-28T11:30:10Z,2016-04-29T16:47:10Z,2016-12-05T13:20:39Z,MERGED,True,135,28,5,https://github.com/JohnnyWahib,-Added Scene service provider for Editor plugins,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775#issuecomment-215801947,-Added UI service functions,"This all looks pretty good.  It does open up a thought I was just having last night about the need to expose standard editor dialogs to the extensions.  In addition to the error dialog, I could also see having access to an information dialog as well as some kind of progress bar.  Not for this PR, but something to think about.
Good job!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,775,2016-04-28T11:30:10Z,2016-04-29T16:47:10Z,2016-12-05T13:20:39Z,MERGED,True,135,28,5,https://github.com/JohnnyWahib,-Added Scene service provider for Editor plugins,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/775#issuecomment-215803114,-Added UI service functions,"Excellent, thanks guys!  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,776,2016-04-29T12:07:24Z,2016-04-29T16:45:58Z,2016-05-06T01:29:04Z,MERGED,True,70,0,3,https://github.com/shaddockh,Turbo badger editor settings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776,"added new language handler for turbobadger files in the webview editor.  Turns off soft tabs and shows whitespace as well as using the ""properties"" language highlighter.  This works for files with *.tb.txt and *.tb file extensions.","added new language handler for turbobadger files in the webview editor.  Turns off soft tabs and shows whitespace as well as using the ""properties"" language highlighter.  This works for files with *.tb.txt and *.tb file extensions.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,776,2016-04-29T12:07:24Z,2016-04-29T16:45:58Z,2016-05-06T01:29:04Z,MERGED,True,70,0,3,https://github.com/shaddockh,Turbo badger editor settings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776#issuecomment-215802588,"added new language handler for turbobadger files in the webview editor.  Turns off soft tabs and shows whitespace as well as using the ""properties"" language highlighter.  This works for files with *.tb.txt and *.tb file extensions.",Hot damn!  :)  I really want to get the mixed mode space/tab indents working with tb ui files now!  LANDING!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,776,2016-04-29T12:07:24Z,2016-04-29T16:45:58Z,2016-05-06T01:29:04Z,MERGED,True,70,0,3,https://github.com/shaddockh,Turbo badger editor settings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/776#issuecomment-215803821,"added new language handler for turbobadger files in the webview editor.  Turns off soft tabs and shows whitespace as well as using the ""properties"" language highlighter.  This works for files with *.tb.txt and *.tb file extensions.","Got bit by that last night and just had enough.
Hopefully this will at least help save a few grey hairs until that happens! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216076043,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","I reviewed the PR and have a few notes.
On the pref file question, I think we need global and project prefs, snap settings are probably a global editor setting.
I like the idea of handling prefs in the TS scripts instead of native code.  It looks really clean and is good to sort now, as we don't have many prefs hooked up yet!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216078477,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","added a few line comments.  If there is a way to move away from having the native event, I'd definitely vote for that.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216079800,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.",I'll branch the PR and have a go at converting to a script event sometime tomorrow and we'll see what happens :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216697528,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Really, looking over JSResourceEditor and seeing as the UI & TS bindings have leveled up so much since I initially wrote the control, there isn't much reason this is native at all.  That's a good thing!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216723310,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.",I'm definitely on board with moving those events out of the native and into the typescript.  Should that happen in this PR or another PR?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216740074,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Maybe we should just get the native event removed and moved over to be handled solely in script.  Land early, land often? :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216743327,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Sorry, upon reflection that probably isn't entirely clear as I thought you were asking about the native editor source for some reason.  Let's get the native event moved over to script for this PR if possible.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216832314,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Sounds good.
E_USERPREFERENCESCHANGEDNOTIFICAITON has already been removed and is being handled in the TypeScript for the most part other than the lines in JSResourceEditor.cpp I commented on above.  I'll look this weekend to see how I can remove that part as well as try to migrate the other native events (ResourceRenamed, ResourceDeleted, and ProjectUnloaded) to the Typescript.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216934614,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","I missed the commit with the move from native to script for the event, much nicer.  We can circle back on the load complete bit.  Do you have the events you need for that? The PR looks great, landing :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216941273,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","I may need to create a native event for when the web client is fully loaded, but once I have that, then I can move all of the other events that I was hooking into in the native side to the TypeScript and it should make it much cleaner.  The issue is that the web client loads up the page and all of the additional javascript asynchronously, so the native doesn't know when it's all loaded until the web client tells it.  At that point, the native should be able to broadcast a web client loaded event to the typescript and then the typescript can handle the post-load processes such as telling the client to load the source, give the client the user preferences, etc.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216942372,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Ok, if this event isn't cutting it, I can look into one that will, so no need to spend time on it:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/AtomicWebView/WebViewEvents.h#L47
Hopefully, that's the one!  Never can be too sure in async-land though!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216943940,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.",Hmm.  That looks promising.  I'll see if that gets fired after everything is loaded or only once the main window is created.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216946176,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","Nevermind, I don't think that will work with async.  That's why I added the event from the client in the first place.
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/AtomicEditor/Editors/JSResourceEditor.cpp#L140-L144",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-216953208,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","It looks like there needs to be an event for DOM Ready.  I found some information here:
http://magpcss.org/ceforum/viewtopic.php?f=6&t=10277",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/JoshEngebretson,16,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-217333642,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.",Do you think you could file an issue referencing that CEF thread with what is needed for the DOM Ready event for our usage? Lara and I are on vacation next week and will try and get it landed before leaving.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,17,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-217338711,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","I've been experimenting with some things and have some ideas for a solution that might work. I need to try some things out this weekend, but if it doesn't work then I'll file an issue.  From what I'm reading, onLoadEnd should work, but the system.js used in the client may be causing some problems because it's streaming additional content in after the page is loaded.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,778,2016-04-30T21:50:38Z,2016-05-04T17:10:12Z,2016-05-06T12:24:45Z,MERGED,True,433,50,22,https://github.com/shaddockh,User preferences system for extensions,11,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778,https://github.com/shaddockh,18,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/778#issuecomment-217426170,"This PR adds the ability for host extensions to store and retrieve preferences from the project user preferences file.  These preferences are also propagated to the web client so that editor extensions can retrieve the settings.  Additionally, whenever preferences are changed from the host, a preference change event is sent to the web client so the web client can respond appropriately.
The other changes here are some lint whitespace changes and also refactoring of the webview client extension names and structure to more closely match the changes made the host extension naming done in a previous PR.
I did have a question on the user preference file.  I'm using:
ToolCore.toolSystem.project.userPrefsFullPath 

to store the preferences in and this points to a file called projectname.userpreferences.  It appears that the Snap Settings dialog stores settings in a different file called UserPrefs.json .  Should't those also be stored in the projectname.userpreferences file?
I updated the routine that saves the Snap Settings to not overwrite the file, but to retain any extraneous settings that may also be in there and just update with the known settings, so switching over to the projectname.userpreferences file should be seamless if that's the way you would like to go.  Either that or have ToolCore.toolsSystem.project.userPrefsFullPath point to the UserPrefs.json file.
I'm going to be using this to coordinate some settings in the TypeScript extension, but thought I would break out just the user settings piece into it's own PR so it's easier to digest.","fyi, the idea I had will work.  I'll clean things up and hopefully have a PR for you by the end of the weekend.  If not, you can take a look at it when you guys get back and have a good trip! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,781,2016-05-07T14:45:48Z,2016-05-07T17:30:40Z,2016-05-07T17:33:27Z,MERGED,True,469,154,22,https://github.com/shaddockh,Work on migrating native editor events to Typescript + ResourceEditor instantiation refactor,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781,"This PR migrates some of the events that were on the native side into the typescript side.  Namely ProjectUnloaded and DeleteResource.  Unfortunately, the HandleWebMessage event can't be migrated yet because there is no way for the Typescript to handle the E_WEBVIEWMESSAGE.HANDLER->Success() message, so the engine throws an error that the message has been unhandled.
This also refactors the way editors are instantiated by having an Editor Builder service that editor builders can register with.  The ResourceFrame then passes a path to this service and is returned a builder for that type of editor.  Each builder is also in charge of hooking in and responding to the appropriate events for that editor.  This could probably be expanded in the future to allow user provided editors and also migrate more out of the ResourceFrame.ts, but it's a start.","This PR migrates some of the events that were on the native side into the typescript side.  Namely ProjectUnloaded and DeleteResource.  Unfortunately, the HandleWebMessage event can't be migrated yet because there is no way for the Typescript to handle the E_WEBVIEWMESSAGE.HANDLER->Success() message, so the engine throws an error that the message has been unhandled.
This also refactors the way editors are instantiated by having an Editor Builder service that editor builders can register with.  The ResourceFrame then passes a path to this service and is returned a builder for that type of editor.  Each builder is also in charge of hooking in and responding to the appropriate events for that editor.  This could probably be expanded in the future to allow user provided editors and also migrate more out of the ResourceFrame.ts, but it's a start.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,781,2016-05-07T14:45:48Z,2016-05-07T17:30:40Z,2016-05-07T17:33:27Z,MERGED,True,469,154,22,https://github.com/shaddockh,Work on migrating native editor events to Typescript + ResourceEditor instantiation refactor,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781#issuecomment-217651279,"This PR migrates some of the events that were on the native side into the typescript side.  Namely ProjectUnloaded and DeleteResource.  Unfortunately, the HandleWebMessage event can't be migrated yet because there is no way for the Typescript to handle the E_WEBVIEWMESSAGE.HANDLER->Success() message, so the engine throws an error that the message has been unhandled.
This also refactors the way editors are instantiated by having an Editor Builder service that editor builders can register with.  The ResourceFrame then passes a path to this service and is returned a builder for that type of editor.  Each builder is also in charge of hooking in and responding to the appropriate events for that editor.  This could probably be expanded in the future to allow user provided editors and also migrate more out of the ResourceFrame.ts, but it's a start.","Great, leveraging the service system to provide various editor instances is excellent and a much needed improvement, solid :)
I have a couple minor notes and can land",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,781,2016-05-07T14:45:48Z,2016-05-07T17:30:40Z,2016-05-07T17:33:27Z,MERGED,True,469,154,22,https://github.com/shaddockh,Work on migrating native editor events to Typescript + ResourceEditor instantiation refactor,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/781#issuecomment-217653785,"This PR migrates some of the events that were on the native side into the typescript side.  Namely ProjectUnloaded and DeleteResource.  Unfortunately, the HandleWebMessage event can't be migrated yet because there is no way for the Typescript to handle the E_WEBVIEWMESSAGE.HANDLER->Success() message, so the engine throws an error that the message has been unhandled.
This also refactors the way editors are instantiated by having an Editor Builder service that editor builders can register with.  The ResourceFrame then passes a path to this service and is returned a builder for that type of editor.  Each builder is also in charge of hooking in and responding to the appropriate events for that editor.  This could probably be expanded in the future to allow user provided editors and also migrate more out of the ResourceFrame.ts, but it's a start.","Great, thanks!  LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,782,2016-05-09T12:42:12Z,2016-05-10T04:17:36Z,2016-05-10T07:30:11Z,MERGED,True,62,1,3,https://github.com/mattbenic,Added SetSubimage to copy contents of an image to a rect in another image,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/782,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/782,"Added this as part of the lightmapping work, but someone on gitter was looking for this functionality specifically so decided to PR separately.","Added this as part of the lightmapping work, but someone on gitter was looking for this functionality specifically so decided to PR separately.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,782,2016-05-09T12:42:12Z,2016-05-10T04:17:36Z,2016-05-10T07:30:11Z,MERGED,True,62,1,3,https://github.com/mattbenic,Added SetSubimage to copy contents of an image to a rect in another image,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/782,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/782#issuecomment-218055320,"Added this as part of the lightmapping work, but someone on gitter was looking for this functionality specifically so decided to PR separately.","Great, landing :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,784,2016-05-10T01:29:41Z,2016-05-10T04:26:27Z,2016-05-13T22:23:56Z,MERGED,True,196,11,12,https://github.com/shaddockh,Generate API documentation with TypeDoc,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/784,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/784,"This PR should resolve #668
This generates a multi-page API site from the d.ts files.  It also updates the comment parser to be able to handle multi-line formal comment extraction in case there is a need for more verbose documentation of API methods.
/**
This is a formal comment
*/

I'm unsure if this will work correctly with the CI builds, so I'm going to need some help with that.","This PR should resolve #668
This generates a multi-page API site from the d.ts files.  It also updates the comment parser to be able to handle multi-line formal comment extraction in case there is a need for more verbose documentation of API methods.
/**
This is a formal comment
*/

I'm unsure if this will work correctly with the CI builds, so I'm going to need some help with that.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,784,2016-05-10T01:29:41Z,2016-05-10T04:26:27Z,2016-05-13T22:23:56Z,MERGED,True,196,11,12,https://github.com/shaddockh,Generate API documentation with TypeDoc,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/784,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/784#issuecomment-218056146,"This PR should resolve #668
This generates a multi-page API site from the d.ts files.  It also updates the comment parser to be able to handle multi-line formal comment extraction in case there is a need for more verbose documentation of API methods.
/**
This is a formal comment
*/

I'm unsure if this will work correctly with the CI builds, so I'm going to need some help with that.","Hey!  I am in the Sierra Nevada's with the saddest of internet connections (which is perfect!)
The CI boxes are down while we are out of town.  I'll land this and we can address the CI build in post, with notes!
The multiline comments will be good, I was thinking about this last week!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,786,2016-05-11T11:40:42Z,2016-05-11T11:45:32Z,2016-12-05T13:38:45Z,CLOSED,False,17,36,3,https://github.com/JohnnyWahib,Referenced missing typescript dependencies,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/786,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/786,"Generated .d.ts files were missing references to dependencies, causing compile errors in ts that uses them.","Generated .d.ts files were missing references to dependencies, causing compile errors in ts that uses them.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.","Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787#issuecomment-218438570,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.",This highlighted a more general issue that the .d.ts files aren't tested in CI. Perhaps an inclusion test script that gets built and compiled as part of the AtomicTool bind command would sort that out?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787#issuecomment-218450998,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.","Actually, if @shaddockh's combined .d.ts includes all the editor defines as well as the atomic ones it should sort things out.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787#issuecomment-219782417,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.","I'll investigate whether the combined .d.ts includes everything, this could still be a useful addition with some factoring, if we do split up dependencies.   They would just need to be marked in the package (ie. not core or something so not in Atomic.d.ts)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/shaddockh,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787#issuecomment-219808007,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.","FYI, The combined d.ts includes everything in the d.ts files in the TypeScript directory, including the editor and work definitions.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,787,2016-05-11T11:51:40Z,2016-05-17T18:35:06Z,2017-03-27T08:33:43Z,CLOSED,False,10,0,3,https://github.com/JohnnyWahib,Referenced typescript dependencies in generated definition files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/787#issuecomment-219811939,"Generated .d.ts files were missing references to dependencies, causing ts files that used them to fail to compile.","Excellent, I will close this for now.  @JohnnyWahib If we still need this, let me know and can reopen",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788#issuecomment-218643197,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,"Had to change things around.  Windows and OSX builds work from what I can tell, just need some verification.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788#issuecomment-218735250,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,"Confirmed on windows, a lovely single ts distribution file üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788#issuecomment-218735830,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,"Ok. @JoshEngebretson, since this is breaking the build, I'm going to go ahead and land it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788#issuecomment-218849641,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,"Thanks!  It was Lara's birthday in San Francisco yesterday and we're on a train back up to the Sierra Nevada's right now.  So, a tad out of position atm :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,788,2016-05-12T02:18:48Z,2016-05-12T11:56:38Z,2016-05-17T18:52:36Z,MERGED,True,22,2,4,https://github.com/shaddockh,Fixes for combined d.ts generation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788,https://github.com/Type1J,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/788#issuecomment-219817149,This PR fixes the issue with generating the combined Atomic.d.ts file under windows.  Tested on OSX as well to ensure that it didn't break anything.,Happy Birthday @LaraEngebretson!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/keithjohnston,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-219859467,,@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-219893452,,"The Android build is failing, though Linux/Emscripten/OSX/iOS pass, any thoughts?
[ 80%] Building CXX object Source/Atomic/CMakeFiles/Atomic.dir/Network/MasterServerClient.cpp.o
/Users/jenkins/Home/workspace/AtomicDS_BuildBinaries_AndroidPlayer/Source/Atomic/Network/MasterServerClient.cpp: In member function 'void Atomic::MasterServerClient::CheckForMessageFromMaster()':
/Users/jenkins/Home/workspace/AtomicDS_BuildBinaries_AndroidPlayer/Source/Atomic/Network/MasterServerClient.cpp:222:66: error: expected ')' before 'SCNd32'
                     sscanf(masterMessageLengthStr.CString(), ""%"" SCNd32, &bytesRemainingInMasterServerMessage_);",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/keithjohnston,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-219906436,,OK I think I fixed it. Can you see if that builds now?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-220208806,,"Builds on all platforms, awesome!  I've scrolled through the code and it looks really solid.  I am going to go over it a little closer tomorrow for any possible comments.  Great work!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-220469670,,"Great PR!  I have some notes from looking it over.  The main thing is that I think it would be good to factor the master server stuff out of the Network subsystem and make sure it is optional for network connections, thoughts?",True,{'THUMBS_UP': ['https://github.com/keithjohnston']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/keithjohnston,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-220509172,,Thanks for the extensive comments! I will work on these and update the PR accordingly!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-220858938,,"@AtomicBuildBot add to whitelist, retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-221034837,,"@AtomicBuildBot retest this please
Hopefully VS15 Update 2 fixes intermittent build issue with msbuild",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,790,2016-05-15T01:44:51Z,2016-06-11T16:14:16Z,2016-06-11T16:14:16Z,CLOSED,False,1391,12,16,https://github.com/keithjohnston,Multiplayer support for Atomic,35,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/790#issuecomment-225372318,,"Working on this over yonder: https://github.com/AtomicGameEngine/AtomicGameEngine/tree/JME-ATOMIC-MULTIPLAYER
Should have it landed today üöä  Choo! Choo!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.","Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793#issuecomment-219703773,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.","Looks good, @JohnnyWahib . Just had a few code comments.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/JohnnyWahib,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793#issuecomment-219720518,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.","Thanks @shaddockh, I have made the requested changes. I added a seperate XML resource editor, and a shader resource editor which will read in .hlsl and .glsl extensions for now. (could seperate these out as well if necessary)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793#issuecomment-219748576,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.","Looks good to me. @JoshEngebretson, mind taking a look?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793#issuecomment-219852272,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.",@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,793,2016-05-16T15:33:06Z,2016-05-17T21:26:38Z,2016-05-18T07:20:12Z,MERGED,True,208,41,6,https://github.com/JohnnyWahib,Project techniques and shaders,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/793#issuecomment-219859263,"Added ability to reference custom shaders and techniques from inside atomic projects.

Requires a root 'Techniques' folder within the Resource folder of a project.
Shaders must be kept inside a 'Shaders/HLSL' or 'Shaders/GLSL' folder within the project.
Project specific techniques will appear in the techniques select list of the Material Inspector under a drop down called 'Project' if they exist.","Great work @JohnnyWahib nice addition :)  Thanks for the review @shaddockh
Passes CI (See #796), LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,Fixes #792,Fixes #792,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219782696,Fixes #792,@AtomicBuildBot Test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219784067,Fixes #792,@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219793839,Fixes #792,"Updating CI to Jenkins 2.5, please hold :)
@AtomicBuildBot test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219799106,Fixes #792,@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219804989,Fixes #792,"Once more with feeling,
@AtomicBuildBot test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219821641,Fixes #792,@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,794,2016-05-17T01:11:24Z,2016-05-17T20:58:21Z,2016-05-17T21:03:28Z,MERGED,True,12,11,2,https://github.com/shaddockh,Fix issue with scene files getting renamed when another file is renamed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/794#issuecomment-219851771,Fixes #792,"This is passing CI, though the new GitHub plugin for Jenkins requires web hooks which is bit of setup and filed as #796
LANDING! Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220608305,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","Hi @JoshEngebretson, do you need any changes to this before it can be landed?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220614131,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","@mattbenic @raheelx Yes, commented above about member variable naming convention",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/mattbenic,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220621213,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","Oh bloody hell, missed that one sorry.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220786139,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","No problem, I usually try and do a little summary post at the end of a PR mentioning if there is an issue, easy to miss!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220856727,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220858432,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/raheelx,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-220888839,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel",Hi @JoshEngebretson :) sorry this took so long! I just pushed up the changes you wanted,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,795,2016-05-17T09:00:28Z,2016-05-24T00:08:53Z,2016-12-05T13:32:16Z,MERGED,True,36,17,2,https://github.com/raheelx,Shift multi select,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/795#issuecomment-221131722,"Hi @JoshEngebretson :)
This commit fixes the issue we spoke about on Issue #376 - does not select children objects if parent is not expanded. I also changed the way shift selecting happened to make it select around a pivot instead.
Please let me know if there is anything else you'd like changed or added.
-Raheel","@raheelx Awesome, thanks for the updates, 9 successful checks!  LANDING! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,797,2016-05-18T06:59:04Z,2016-05-23T06:14:33Z,2016-05-23T06:32:45Z,CLOSED,False,192,0,3,https://github.com/weinandvv,Texture inspector,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797,Hi @JoshEngebretson. Created a texture inspector that if you click on an image file in atomic it will show it in the inspector window.,Hi @JoshEngebretson. Created a texture inspector that if you click on an image file in atomic it will show it in the inspector window.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,797,2016-05-18T06:59:04Z,2016-05-23T06:14:33Z,2016-05-23T06:32:45Z,CLOSED,False,192,0,3,https://github.com/weinandvv,Texture inspector,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797#issuecomment-220856710,Hi @JoshEngebretson. Created a texture inspector that if you click on an image file in atomic it will show it in the inspector window.,"@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,797,2016-05-18T06:59:04Z,2016-05-23T06:14:33Z,2016-05-23T06:32:45Z,CLOSED,False,192,0,3,https://github.com/weinandvv,Texture inspector,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797,https://github.com/weinandvv,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/797#issuecomment-220895321,Hi @JoshEngebretson. Created a texture inspector that if you click on an image file in atomic it will show it in the inspector window.,Closing this PR we realized there were some files that shouldn't be there. We'll open another.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,799,2016-05-21T16:49:26Z,2016-05-21T18:13:42Z,2016-05-22T19:11:59Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/799,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/799,Working on update for #796,Working on update for #796,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,799,2016-05-21T16:49:26Z,2016-05-21T18:13:42Z,2016-05-22T19:11:59Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/799,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/799#issuecomment-220792251,Working on update for #796,@AtomicBuildBot test this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,800,2016-05-21T18:14:58Z,2016-05-21T18:37:36Z,2016-05-21T18:37:38Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/800,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/800,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,801,2016-05-21T18:38:38Z,2016-05-21T18:42:37Z,2016-05-21T18:42:38Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/801,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/801,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,802,2016-05-21T18:43:30Z,2016-05-21T18:48:55Z,2016-05-21T18:48:56Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/802,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/802,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,803,2016-05-21T18:50:05Z,2016-05-21T18:52:47Z,2016-05-21T18:52:48Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/803,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/803,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,804,2016-05-21T18:53:46Z,2016-05-21T18:58:51Z,2016-05-21T18:58:53Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/804,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/804,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,805,2016-05-21T18:59:51Z,2016-05-21T19:36:09Z,2016-05-21T19:36:12Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/805,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/805,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,806,2016-05-21T19:37:17Z,2016-05-21T20:03:37Z,2016-05-21T20:03:39Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/806,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/806,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,807,2016-05-21T20:04:36Z,2016-05-22T17:51:38Z,2016-05-22T19:11:56Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/807,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/807,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)","This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-220808262,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/AtomicBuildBot,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-220842948,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-220843011,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)","Working on the build bot, big trouble in little china... please ignore messages :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-220854831,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)","@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-221132378,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)","Excellent, landing, ‚úàÔ∏è
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,808,2016-05-22T00:49:08Z,2016-05-24T00:13:08Z,2016-06-11T03:17:35Z,MERGED,True,70,28,7,https://github.com/shaddockh,Project based custom editors,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/808#issuecomment-221243265,"This PR opens up the ability to create custom editors inside the projects, opening up the door to creating web based code generators (ie, create a visual editor for conversation trees that saves out as javascript).  Some fixes are also included in this

fixes an issue where if you close a project, the editors weren't closing so if you opened another project the editors would show up
fixes an issue where the web view was not able to successfully send up a block of code and a filename to save it as (this will be critical to the TypeScript compilation ability)","FYI @JoshEngebretson, There is an update in AtomicExamples that goes along with this just in case it slipped under your radar.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,809,2016-05-22T17:54:06Z,2016-05-22T19:11:44Z,2016-05-22T19:11:46Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/809,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/809,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,810,2016-05-22T19:10:36Z,2016-05-22T20:39:49Z,2016-05-22T20:39:51Z,CLOSED,False,3,1,1,https://github.com/JoshEngebretson,Testing Build Bot,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/810,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/810,Here's hoping this works,Here's hoping this works,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,811,2016-05-23T06:34:08Z,2016-05-24T00:16:26Z,2016-05-24T07:21:14Z,MERGED,True,192,0,3,https://github.com/weinandvv,Created a texture inspector for Atomic.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811,New PR for the texture inspector.,New PR for the texture inspector.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,811,2016-05-23T06:34:08Z,2016-05-24T00:16:26Z,2016-05-24T07:21:14Z,MERGED,True,192,0,3,https://github.com/weinandvv,Created a texture inspector for Atomic.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811#issuecomment-221119695,New PR for the texture inspector.,"This looks pretty good to me, the only main question I had was what actually generates the thumbnails?  Is it Atomic or something external?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,811,2016-05-23T06:34:08Z,2016-05-24T00:16:26Z,2016-05-24T07:21:14Z,MERGED,True,192,0,3,https://github.com/weinandvv,Created a texture inspector for Atomic.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/811#issuecomment-221132901,New PR for the texture inspector.,"@Vlamboljant Great work, thanks for the PR, landing!
@shaddockh Confirmed, I wrote some (horrible) thumbnail code which doesn't even respect aspect ratio: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/ToolCore/Assets/TextureImporter.cpp#L77",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,812,2016-05-23T18:06:02Z,2016-05-24T00:07:41Z,2016-05-24T00:07:41Z,CLOSED,False,0,0,0,https://github.com/taohuadao,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/812,https://github.com/taohuadao,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/812,update from origin,update from origin,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,812,2016-05-23T18:06:02Z,2016-05-24T00:07:41Z,2016-05-24T00:07:41Z,CLOSED,False,0,0,0,https://github.com/taohuadao,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/812,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/812#issuecomment-221049066,update from origin,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,813,2016-05-24T19:45:33Z,2016-05-24T20:11:36Z,2016-05-24T20:11:38Z,MERGED,True,132,11,8,https://github.com/JoshEngebretson,WebView Updates,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/813,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/813,"Various updates to the Atomic WebView, including cookie caching and clearing.  Less sleep for IPC messages to better handle time sensitive messages.","Various updates to the Atomic WebView, including cookie caching and clearing.  Less sleep for IPC messages to better handle time sensitive messages.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,814,2016-05-27T19:09:00Z,2016-05-28T03:18:31Z,2016-05-28T03:18:31Z,MERGED,True,2,2,1,https://github.com/ScottDillman,fix for editor crash on start in Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814,changed the array size to '2' to reflect actual size,changed the array size to '2' to reflect actual size,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,814,2016-05-27T19:09:00Z,2016-05-28T03:18:31Z,2016-05-28T03:18:31Z,MERGED,True,2,2,1,https://github.com/ScottDillman,fix for editor crash on start in Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814#issuecomment-222230324,changed the array size to '2' to reflect actual size,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,814,2016-05-27T19:09:00Z,2016-05-28T03:18:31Z,2016-05-28T03:18:31Z,MERGED,True,2,2,1,https://github.com/ScottDillman,fix for editor crash on start in Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/814#issuecomment-222286388,changed the array size to '2' to reflect actual size,"@CTrauma Good catch, thanks!
@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-223489820,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","Groovy! I should be able to look over this tomorrow. I like this too: +668 -49062, that kind of code diff is always the right direction :)
It looks like Linux hiccuped, let's try this again!
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-223758916,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","Some updates

If there is a tsconfig.json file in the root of the project with custom compiler settings, then it will pull them in.  This allows for advanced compile settings if you wish such as some of the new es7 features.
removed the Atomic*.d.ts and tsconfig.json from the TypeScript project templates since if they don't exist in a project, then the extension will use an internal default tsconfig.json and pull in the editor version of Atomic.d.ts.  This closes off the ability to use the project in an external editor without manually adding a tsconfig and d.ts files, but everything in the editor will work and stay up to date.

Regarding that, what do you think of having a menu:
Typescript->Advanced->Generate Files for External Compilation
which could generate a tsconfig.json and copy over the latest Atomic.d.ts?
Other changes that are needed are to modify the component/script creation window to have a dropdown for TypeScript",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-223789267,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","More updates:

Updated the create component / create script dialogs to add a template selection dropdown that is populated from a json file in the templates directory.  This json file currently holds templates for basic JavaScript and basic TypeScript components/scripts so that it is now possible to create typescript in the editor and compile it. :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-224005627,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","Wow!  This is an fantastic PR!!!
I am going to build it out now and give it some testing.  I think it would be good to get a new Dev Snapshot binary up to be hammered on a bit too.  I might have some Jenkins work to do here based on the 2.5 update.  Great work, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/shaddockh,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-224011743,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","Thanks!  Responded to a couple notes, but other than needing to be tested on windows, I think this looks pretty good.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,835,2016-06-03T02:47:27Z,2016-06-06T18:13:00Z,2016-06-06T18:13:07Z,MERGED,True,198679,271995,47,https://github.com/shaddockh,in-editor TypeScript compilation,24,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/835#issuecomment-224041279,"I'm going to go ahead and open up this PR since the in-editor typescript compilation appears to be functional...just needs a good testing.   Also testing in Windows (and Linux when the webviews work) since I've pretty much been doing this in OSX land.
Changes

New menu item Developer->Plugins->TypeScript->Compile on Save: on/off
Clicking on this will toggle compile on save on or off which will compile the currently edited file when you save.  This value is persisted in your project preferences file.
New menu item Developer->Plugins->TypeScript->Compile
Clicking on this will compile all of the TypeScript in your project directory and display the results
Updated the Web View command: EDITOR_SAVE_FILE to allow the web view to pass up a fully qualified path/filename and file contents and it will get saved to the filesystem.  I added in protections that will ignore the request if the filename/path does not reside within the project directory, or the filename/path contains "".."" which could allow saving a file outside the directory.  Since theoretically, the web view could be pointed to an editor on the internet, it just adds a little safety
The TypeScript compiler will first look for an Atomic.d.ts in the project directory and if it doesn't find one, will use the one in the app data folder.  This opens up the ability to have projects that are always up to date with the Atomic.d.ts.  However, if you want to use an external editor, you will still need to copy the Atomic.d.ts in
If there is a tsconfig.json file in the root of the project, the extension will pull it in and add any additional files within the [files] section that the editor isn't aware of.

Open issues

Currently the Compile menu will only work if a web view editor is open since the TypeScript language service lives inside a web worker attached to the web views.  I experimented around with dynamically instantiating a web view from the editor script, but it doesn't appear the AtomicQuery is available from those dynamic web views.  The idea would be that if there isn't a web view open, an off-screen one could be loaded and used to compile
For compiler errors, there isn't a way to click on the error and open and jump to that line...maybe as an enhancement in a later PR
Currently you will need to compile your typescript prior to building/running.  It should be pretty easy to hook into the Project Start Player event to do that, but it would be nice to have the off-screen compiler working first
A nice to have would be a menu that allows you to update your in-project copy of Atomic.d.ts with the latest from the app.

Phew!","Worked first try on Windows, as I mentioned in chat, this much development on OSX ""just working"" when passed over to Windows is awesome!  We're almost certainly onto something here ;)
Thanks, LANDING!  ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,837,2016-06-07T00:35:32Z,2016-06-07T01:54:56Z,2016-06-07T01:54:57Z,MERGED,True,6,5,4,https://github.com/shaddockh,Fixed to get TypeDoc to run,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837,"Fixes for getting TypeDoc to run

Backed down the TypeDoc to v0.3.12
removed a TS 1.8.x feature from the .d.ts that the old version of TypeDoc didn't like","Fixes for getting TypeDoc to run

Backed down the TypeDoc to v0.3.12
removed a TS 1.8.x feature from the .d.ts that the old version of TypeDoc didn't like",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,837,2016-06-07T00:35:32Z,2016-06-07T01:54:56Z,2016-06-07T01:54:57Z,MERGED,True,6,5,4,https://github.com/shaddockh,Fixed to get TypeDoc to run,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837#issuecomment-224134680,"Fixes for getting TypeDoc to run

Backed down the TypeDoc to v0.3.12
removed a TS 1.8.x feature from the .d.ts that the old version of TypeDoc didn't like",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,837,2016-06-07T00:35:32Z,2016-06-07T01:54:56Z,2016-06-07T01:54:57Z,MERGED,True,6,5,4,https://github.com/shaddockh,Fixed to get TypeDoc to run,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/837#issuecomment-224141218,"Fixes for getting TypeDoc to run

Backed down the TypeDoc to v0.3.12
removed a TS 1.8.x feature from the .d.ts that the old version of TypeDoc didn't like","Great, thanks for the fix!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,839,2016-06-07T11:26:32Z,2016-06-07T14:06:45Z,2016-06-07T14:06:46Z,MERGED,True,21,0,4,https://github.com/shaddockh,pre-set compile on save for new TypeScript projects,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/839,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/839,"To make things more seamless for new TypeScript projects, auto set the Compile on Save setting.  This is so that when you get a new project, you can just edit and run without needing to toggle any settings.","To make things more seamless for new TypeScript projects, auto set the Compile on Save setting.  This is so that when you get a new project, you can just edit and run without needing to toggle any settings.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,839,2016-06-07T11:26:32Z,2016-06-07T14:06:45Z,2016-06-07T14:06:46Z,MERGED,True,21,0,4,https://github.com/shaddockh,pre-set compile on save for new TypeScript projects,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/839,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/839#issuecomment-224291083,"To make things more seamless for new TypeScript projects, auto set the Compile on Save setting.  This is so that when you get a new project, you can just edit and run without needing to toggle any settings.","Nice add, thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,840,2016-06-07T15:26:49Z,2016-06-08T13:51:58Z,2016-06-12T14:09:59Z,MERGED,True,164,9,9,https://github.com/JimMarlowe,Jm linux editor,22,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,"Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.","Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,840,2016-06-07T15:26:49Z,2016-06-08T13:51:58Z,2016-06-12T14:09:59Z,MERGED,True,164,9,9,https://github.com/JimMarlowe,Jm linux editor,22,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840#issuecomment-224317069,"Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,840,2016-06-07T15:26:49Z,2016-06-08T13:51:58Z,2016-06-12T14:09:59Z,MERGED,True,164,9,9,https://github.com/JimMarlowe,Jm linux editor,22,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840#issuecomment-224323036,"Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.","@JimMarlowe Awesome, I'll add ya to the CI whitelist :)
@AtomicBuildBot add to whitelist, test this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,840,2016-06-07T15:26:49Z,2016-06-08T13:51:58Z,2016-06-12T14:09:59Z,MERGED,True,164,9,9,https://github.com/JimMarlowe,Jm linux editor,22,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840#issuecomment-224428610,"Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.","Excellent PR and very glad to see the WebView embedded in the editor on Linux, Android deployment from the platform is also fantastic.
A few simple white space issues (4 space tabs being the convention), otherwise this is good to go!  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,840,2016-06-07T15:26:49Z,2016-06-08T13:51:58Z,2016-06-12T14:09:59Z,MERGED,True,164,9,9,https://github.com/JimMarlowe,Jm linux editor,22,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/840#issuecomment-224595131,"Builds a linux editor that will execute without adding or changing any other files.
Ace text editor window is docked into tab.
Ace editing is minimalistic, missing are backspace, delete, tab, arrow keys.
Added missing linux directory finder, absent mostly in the build dialog.
Fix android processing for linux, with SDK path set, it will produce debug apk.
Filled out some error handlers for linux.","Awesome, thanks for the PR!  Landing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,842,2016-06-08T01:27:03Z,2016-06-08T13:53:10Z,2016-06-11T03:18:12Z,MERGED,True,11,2,2,https://github.com/shaddockh,Fix for Material and Scene dialogs ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/842,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/842,This fixes the issue where the new scene and the new material dialogs were re-using the new component dialog which has been changed.,This fixes the issue where the new scene and the new material dialogs were re-using the new component dialog which has been changed.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,842,2016-06-08T01:27:03Z,2016-06-08T13:53:10Z,2016-06-11T03:18:12Z,MERGED,True,11,2,2,https://github.com/shaddockh,Fix for Material and Scene dialogs ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/842,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/842#issuecomment-224595642,This fixes the issue where the new scene and the new material dialogs were re-using the new component dialog which has been changed.,Good catch :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,847,2016-06-09T07:50:03Z,2016-06-10T02:07:09Z,2016-06-10T06:45:40Z,CLOSED,False,215,1,5,https://github.com/weinandvv,Copy paste tool for components,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847,"Hi @JoshEngebretson
Made it possible to let you copy and paste the settings of one component on a node to a similar component on a different node.
Can not copy and paste to different components as expected.
If nothing is copied nothing will paste as also expected","Hi @JoshEngebretson
Made it possible to let you copy and paste the settings of one component on a node to a similar component on a different node.
Can not copy and paste to different components as expected.
If nothing is copied nothing will paste as also expected",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,847,2016-06-09T07:50:03Z,2016-06-10T02:07:09Z,2016-06-10T06:45:40Z,CLOSED,False,215,1,5,https://github.com/weinandvv,Copy paste tool for components,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847#issuecomment-224906872,"Hi @JoshEngebretson
Made it possible to let you copy and paste the settings of one component on a node to a similar component on a different node.
Can not copy and paste to different components as expected.
If nothing is copied nothing will paste as also expected","Awesome, here's the compilation error which is the same on Linux and Mac:
/Users/jenkins/Home/workspace/AtomicDS_BuildBinaries_MacEditor/Source/AtomicEditor/Editors/SceneEditor3D/SceneSelection.cpp:440:77: error: cannot pass object of non-trivial type 'Atomic::String' through variadic function; call will abort at runtime [-Wnon-pod-varargs]
LOGERRORF(""Component Copy: Unable to copy component from node: %s"", component->GetAttribute(""type"").ToString());",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,847,2016-06-09T07:50:03Z,2016-06-10T02:07:09Z,2016-06-10T06:45:40Z,CLOSED,False,215,1,5,https://github.com/weinandvv,Copy paste tool for components,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/847#issuecomment-225076870,"Hi @JoshEngebretson
Made it possible to let you copy and paste the settings of one component on a node to a similar component on a different node.
Can not copy and paste to different components as expected.
If nothing is copied nothing will paste as also expected","Great work! One improvement for the UI would be to have copy/paste next to each other using a layout, instead of full button for each which increases vertical space usage
Excellent code, small fix over in #853 which will land from there, THANKS! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,848,2016-06-09T08:21:15Z,2016-06-10T03:08:25Z,2016-06-10T06:57:56Z,CLOSED,False,153,1,2,https://github.com/weinandvv,Orthographic views,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848,"Hi @JoshEngebretson
Added switching from perspective- to orthographic views.
Added snapping to a specific view if an object is selected. If no object is selected the camera wil snap to the view relative to its position.
Things you are able to do:

Switch between perspective and orthographic using ""O"" key.
Snap to an orthographic view using keys 1-6.
(I was very unsure as to which keys I should assign this to)
1-Top
2-Bottom
3-Left
4-Right
5-Front
6-Back
You can switch back to perspective by pressing the letter ""O"" key even after pressing keys 1-6.
It will remember the perspective position you were in before switching to orthographic. You can revert to that position by pressing the letter ""P"" key.
Can zoom while in orthographic using the mouse wheel","Hi @JoshEngebretson
Added switching from perspective- to orthographic views.
Added snapping to a specific view if an object is selected. If no object is selected the camera wil snap to the view relative to its position.
Things you are able to do:

Switch between perspective and orthographic using ""O"" key.
Snap to an orthographic view using keys 1-6.
(I was very unsure as to which keys I should assign this to)
1-Top
2-Bottom
3-Left
4-Right
5-Front
6-Back
You can switch back to perspective by pressing the letter ""O"" key even after pressing keys 1-6.
It will remember the perspective position you were in before switching to orthographic. You can revert to that position by pressing the letter ""P"" key.
Can zoom while in orthographic using the mouse wheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,848,2016-06-09T08:21:15Z,2016-06-10T03:08:25Z,2016-06-10T06:57:56Z,CLOSED,False,153,1,2,https://github.com/weinandvv,Orthographic views,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848#issuecomment-225083263,"Hi @JoshEngebretson
Added switching from perspective- to orthographic views.
Added snapping to a specific view if an object is selected. If no object is selected the camera wil snap to the view relative to its position.
Things you are able to do:

Switch between perspective and orthographic using ""O"" key.
Snap to an orthographic view using keys 1-6.
(I was very unsure as to which keys I should assign this to)
1-Top
2-Bottom
3-Left
4-Right
5-Front
6-Back
You can switch back to perspective by pressing the letter ""O"" key even after pressing keys 1-6.
It will remember the perspective position you were in before switching to orthographic. You can revert to that position by pressing the letter ""P"" key.
Can zoom while in orthographic using the mouse wheel","Great, we definitely need multiple viewports.  I am not sure how intuitive the P key is, though if there are editing packages that use that convention, cool.  We'll want viewport controls in the UI, though 1-6 for selection works now.
One thing that would be good in the future would be to squash commits, I have to get better about this myself.  It makes it quite a bit more difficult to rebase when there are conflicts.
There were conflicts with the other PR's so I rebased and will land from here: #854
Thanks! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,848,2016-06-09T08:21:15Z,2016-06-10T03:08:25Z,2016-06-10T06:57:56Z,CLOSED,False,153,1,2,https://github.com/weinandvv,Orthographic views,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/848#issuecomment-225107712,"Hi @JoshEngebretson
Added switching from perspective- to orthographic views.
Added snapping to a specific view if an object is selected. If no object is selected the camera wil snap to the view relative to its position.
Things you are able to do:

Switch between perspective and orthographic using ""O"" key.
Snap to an orthographic view using keys 1-6.
(I was very unsure as to which keys I should assign this to)
1-Top
2-Bottom
3-Left
4-Right
5-Front
6-Back
You can switch back to perspective by pressing the letter ""O"" key even after pressing keys 1-6.
It will remember the perspective position you were in before switching to orthographic. You can revert to that position by pressing the letter ""P"" key.
Can zoom while in orthographic using the mouse wheel","Next step on this would definitely be to get some kind of axis widget in place like in other editors, but the shortcuts met our needs for the time being and we thought it better to PR as is rather than hold off (we don't know if/when we'll get to a widget), since it is useful :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,849,2016-06-09T08:56:32Z,2016-06-10T01:51:03Z,2016-06-10T06:45:33Z,CLOSED,False,95,2,4,https://github.com/weinandvv,Grid implementation,9,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/849,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/849,"Hi @JoshEngebretson
Added a grid to the sceneview.
Can be toggled using the letter ""G"" key.
Currently only have a set number of grid lines.","Hi @JoshEngebretson
Added a grid to the sceneview.
Can be toggled using the letter ""G"" key.
Currently only have a set number of grid lines.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,849,2016-06-09T08:56:32Z,2016-06-10T01:51:03Z,2016-06-10T06:45:33Z,CLOSED,False,95,2,4,https://github.com/weinandvv,Grid implementation,9,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/849,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/849#issuecomment-225075017,"Hi @JoshEngebretson
Added a grid to the sceneview.
Can be toggled using the letter ""G"" key.
Currently only have a set number of grid lines.","Great, love the grid :)
The mouse wheel speed, grid, and orthographic PR's do conflict with each other, so I rebased this on the mouse wheel one here and will land from there, THANKS!: #851
For repo watchers:

üëç üëç üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,850,2016-06-09T09:27:44Z,2016-06-10T01:08:05Z,2016-06-10T06:45:25Z,CLOSED,False,56,19,2,https://github.com/weinandvv,New navigation,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/850,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/850,"Hi @JoshEngebretson
Changed how to increase and decrease camera speeds. You no longer use shift key. You can simply hold down the right mouse button and adjust the speed using the mouse wheel.
No longer have to use alt to zoom in and out. Adjust the zoom using only the mouse wheel. It will zoom in on where the mouse pointer is or the object selected.","Hi @JoshEngebretson
Changed how to increase and decrease camera speeds. You no longer use shift key. You can simply hold down the right mouse button and adjust the speed using the mouse wheel.
No longer have to use alt to zoom in and out. Adjust the zoom using only the mouse wheel. It will zoom in on where the mouse pointer is or the object selected.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,850,2016-06-09T09:27:44Z,2016-06-10T01:08:05Z,2016-06-10T06:45:25Z,CLOSED,False,56,19,2,https://github.com/weinandvv,New navigation,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/850,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/850#issuecomment-225069956,"Hi @JoshEngebretson
Changed how to increase and decrease camera speeds. You no longer use shift key. You can simply hold down the right mouse button and adjust the speed using the mouse wheel.
No longer have to use alt to zoom in and out. Adjust the zoom using only the mouse wheel. It will zoom in on where the mouse pointer is or the object selected.","This feels great!  Very nice usability improvements, one small issue with OSX mouse wheel being backwards, fixed in #851 and will land from there
Thank you!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,851,2016-06-10T01:06:56Z,2016-06-10T01:30:40Z,2016-06-10T01:30:42Z,MERGED,True,61,19,2,https://github.com/JoshEngebretson,Mouse wheel adjustment for Scene editor camera speed,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/851,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/851,Fixes OSX mouse wheel from #850,Fixes OSX mouse wheel from #850,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,852,2016-06-10T01:47:39Z,2016-06-10T02:12:07Z,2016-06-10T02:12:08Z,MERGED,True,96,2,4,https://github.com/JoshEngebretson,Grid functionality rebased onto mouse speed change branch,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/852,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/852,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,853,2016-06-10T02:04:59Z,2016-06-10T03:02:10Z,2016-06-10T03:02:12Z,MERGED,True,215,1,5,https://github.com/JoshEngebretson,Component Copy Paste (with POD string format fix),3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/853,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/853,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,853,2016-06-10T02:04:59Z,2016-06-10T03:02:10Z,2016-06-10T03:02:12Z,MERGED,True,215,1,5,https://github.com/JoshEngebretson,Component Copy Paste (with POD string format fix),3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/853,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/853#issuecomment-225080345,,"Grrr VS2015 multicore compile issue..
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,854,2016-06-10T03:04:07Z,2016-06-10T04:19:49Z,2016-06-10T04:19:51Z,MERGED,True,152,1,2,https://github.com/JoshEngebretson,Orthographic View (rebase),7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/854,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/854,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,854,2016-06-10T03:04:07Z,2016-06-10T04:19:49Z,2016-06-10T04:19:51Z,MERGED,True,152,1,2,https://github.com/JoshEngebretson,Orthographic View (rebase),7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/854,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/854#issuecomment-225087332,,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,856,2016-06-10T22:31:25Z,2016-06-11T02:36:34Z,2016-06-11T02:36:36Z,MERGED,True,153,62,10,https://github.com/shaddockh,Expose ACE options in the userprefs.json file,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/856,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/856,"This PR addresses the ability to configure the Ace editor from the application settings file.  Until there is a dedicated extensible user settings dialog, this is going to need to be hand-edited for now (I'll add an issue for creating a settings dialog)
Currently the following settings are exposed in userprefs.json
  ""codeEditorSettings"": {
    ""theme"": ""ace/theme/monokai"",
    ""keyboardHandler"": ""ace/keyboard/textinput"",
    ""fontSize"": 12,
    ""showInvisibles"": false,
    ""useSoftTabs"": true,
    ""tabSize"": 2
  }
I reworked the way settings are exposed to the web view and instead of having the web view request the settings through an AJAX call, the settings are placed onto the WebHost global properties.  This allows them to be available as soon as possible so that when the editor configures itself, it can get the settings.  I also modified the notification for preferences changes and just send a simple notification message that the values in the WebHost global have been updated.  This is a lot less chatty and actually feels like a cleaner implementation.
@JimMarlowe - this should give you the ACE configuration part of the skin updates you are looking at.
I contemplated having editor settings for each file type, but I think until there is dedicated UI for it, it could get too complex.","This PR addresses the ability to configure the Ace editor from the application settings file.  Until there is a dedicated extensible user settings dialog, this is going to need to be hand-edited for now (I'll add an issue for creating a settings dialog)
Currently the following settings are exposed in userprefs.json
  ""codeEditorSettings"": {
    ""theme"": ""ace/theme/monokai"",
    ""keyboardHandler"": ""ace/keyboard/textinput"",
    ""fontSize"": 12,
    ""showInvisibles"": false,
    ""useSoftTabs"": true,
    ""tabSize"": 2
  }
I reworked the way settings are exposed to the web view and instead of having the web view request the settings through an AJAX call, the settings are placed onto the WebHost global properties.  This allows them to be available as soon as possible so that when the editor configures itself, it can get the settings.  I also modified the notification for preferences changes and just send a simple notification message that the values in the WebHost global have been updated.  This is a lot less chatty and actually feels like a cleaner implementation.
@JimMarlowe - this should give you the ACE configuration part of the skin updates you are looking at.
I contemplated having editor settings for each file type, but I think until there is dedicated UI for it, it could get too complex.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,856,2016-06-10T22:31:25Z,2016-06-11T02:36:34Z,2016-06-11T02:36:36Z,MERGED,True,153,62,10,https://github.com/shaddockh,Expose ACE options in the userprefs.json file,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/856,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/856#issuecomment-225332263,"This PR addresses the ability to configure the Ace editor from the application settings file.  Until there is a dedicated extensible user settings dialog, this is going to need to be hand-edited for now (I'll add an issue for creating a settings dialog)
Currently the following settings are exposed in userprefs.json
  ""codeEditorSettings"": {
    ""theme"": ""ace/theme/monokai"",
    ""keyboardHandler"": ""ace/keyboard/textinput"",
    ""fontSize"": 12,
    ""showInvisibles"": false,
    ""useSoftTabs"": true,
    ""tabSize"": 2
  }
I reworked the way settings are exposed to the web view and instead of having the web view request the settings through an AJAX call, the settings are placed onto the WebHost global properties.  This allows them to be available as soon as possible so that when the editor configures itself, it can get the settings.  I also modified the notification for preferences changes and just send a simple notification message that the values in the WebHost global have been updated.  This is a lot less chatty and actually feels like a cleaner implementation.
@JimMarlowe - this should give you the ACE configuration part of the skin updates you are looking at.
I contemplated having editor settings for each file type, but I think until there is dedicated UI for it, it could get too complex.","Solid PR, thanks!  LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,858,2016-06-11T13:52:11Z,2016-06-12T13:49:12Z,2016-06-12T14:09:54Z,CLOSED,False,81,7,8,None,Uwt textinput,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858,None,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858,"Hello!
Do you remember this forum?
http://atomicgameengine.com/forum/#/discussion/82/non-english-text-support-and-internationalisation
I solved this problem, but only as to Japanese on Windows.
This code needs more tests, so there is no need for merging at once.
Then what to do?
In my idea, when this pull request passed compile tests, I will post my repository url  to a forum of the website.
Is it ok?
Thanks!","Hello!
Do you remember this forum?
http://atomicgameengine.com/forum/#/discussion/82/non-english-text-support-and-internationalisation
I solved this problem, but only as to Japanese on Windows.
This code needs more tests, so there is no need for merging at once.
Then what to do?
In my idea, when this pull request passed compile tests, I will post my repository url  to a forum of the website.
Is it ok?
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,858,2016-06-11T13:52:11Z,2016-06-12T13:49:12Z,2016-06-12T14:09:54Z,CLOSED,False,81,7,8,None,Uwt textinput,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858#issuecomment-225363233,"Hello!
Do you remember this forum?
http://atomicgameengine.com/forum/#/discussion/82/non-english-text-support-and-internationalisation
I solved this problem, but only as to Japanese on Windows.
This code needs more tests, so there is no need for merging at once.
Then what to do?
In my idea, when this pull request passed compile tests, I will post my repository url  to a forum of the website.
Is it ok?
Thanks!",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,858,2016-06-11T13:52:11Z,2016-06-12T13:49:12Z,2016-06-12T14:09:54Z,CLOSED,False,81,7,8,None,Uwt textinput,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858,None,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858#issuecomment-225429149,"Hello!
Do you remember this forum?
http://atomicgameengine.com/forum/#/discussion/82/non-english-text-support-and-internationalisation
I solved this problem, but only as to Japanese on Windows.
This code needs more tests, so there is no need for merging at once.
Then what to do?
In my idea, when this pull request passed compile tests, I will post my repository url  to a forum of the website.
Is it ok?
Thanks!","Hi.
I didn't know you were not interested in localization of the engine.
My English is very bad, and may be very difficult to understand indeed.
But you must have read the source code, if you are a programmer.
Well, then you would have noticed the mistake on handling UTF-32 characters.
Anyway, are you going to ignore someone who tried to help you?
It's a bad manner. Everyone knows it.
You are disqualified as a leader of a project. Lack of common sense.
Even a robot who replied to me is much more kind than you are.
Do you understand that?
SHINE KONO BUTA YAROU.
Cheers!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,858,2016-06-11T13:52:11Z,2016-06-12T13:49:12Z,2016-06-12T14:09:54Z,CLOSED,False,81,7,8,None,Uwt textinput,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/858#issuecomment-225435847,"Hello!
Do you remember this forum?
http://atomicgameengine.com/forum/#/discussion/82/non-english-text-support-and-internationalisation
I solved this problem, but only as to Japanese on Windows.
This code needs more tests, so there is no need for merging at once.
Then what to do?
In my idea, when this pull request passed compile tests, I will post my repository url  to a forum of the website.
Is it ok?
Thanks!","It has been less than a day and is the weekend.  There are a number of pull requests and features being worked on.  The bot was setup to let you know the PR has been received and for the CI system.  Thanks for the PR, though this attitude and calling contributors pigs, even in Japanese, is not a match for the project.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,859,2016-06-11T18:15:49Z,2016-06-11T22:49:11Z,2016-06-11T22:49:37Z,MERGED,True,1371,14,18,https://github.com/JoshEngebretson,Master Server and Network updates (refactored),4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,859,2016-06-11T18:15:49Z,2016-06-11T22:49:11Z,2016-06-11T22:49:37Z,MERGED,True,1371,14,18,https://github.com/JoshEngebretson,Master Server and Network updates (refactored),4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859,https://github.com/keithjohnston,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859#issuecomment-225398476,,üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,859,2016-06-11T18:15:49Z,2016-06-11T22:49:11Z,2016-06-11T22:49:37Z,MERGED,True,1371,14,18,https://github.com/JoshEngebretson,Master Server and Network updates (refactored),4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/859#issuecomment-225398738,,"Great, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""","This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225391057,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""","Thanks for the PR, one comment about possibly using UserInterfaceData for populating prefs to TB",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225391864,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""","I have the lite skin at https://github.com/JimMarlowe/AtomicLiteSkin
CC0 license :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225398917,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""",Should we add the light skin alongside the default for this PR?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/shaddockh,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225399689,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""",@JimMarlowe I added a couple line comments.  I think this looks good too!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225404379,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""","@shaddockh I was going to fill out the defaults settings, but since none of the other modules do that,  I dont want uiData to behave differently, that's really annoying.  And for a set once item, overkill.
@JoshEngebretson I removed the getApplicationPreference API, since were coding to the interface. I'll look into adding the light skin and get it somewhere in the deployables.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,860,2016-06-11T19:30:42Z,2016-06-12T13:55:07Z,2016-06-12T14:10:04Z,MERGED,True,787,7,160,https://github.com/JimMarlowe,UI Skin preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/860#issuecomment-225436110,"This PR will allow the user to change the editor's skin and default font. The process is done by editing the prefs.json file.  Editable fields and default values are :
""skinPath"": ""AtomicEditor/editor/skin/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin/""
""fontFile"": ""AtomicEditor/resources/vera.ttf""
""fontName"": ""Vera""
""fontSize"": 12
To change to the editor's look to the light skin, modify these values in the prefs.json file.
""skinPath"": ""AtomicEditor/editor/skin_light/""
""defaultSkinPath"": ""AtomicEditor/resources/default_skin_light/""","Great, may need to borrow some of the tweaks over in dark theme land, I am not a huge fan of the checkbox checkmark for example :)  Thanks, LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,861,2016-06-11T22:01:15Z,2016-06-11T22:49:22Z,2016-06-11T22:49:24Z,MERGED,True,57,4,2,https://github.com/JoshEngebretson,Support both tabbed and space indents for TB ui files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/861,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/861,"(Though not mixed in same file)
Closes #67","(Though not mixed in same file)
Closes #67",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,862,2016-06-13T04:37:13Z,2016-06-13T06:12:36Z,2016-06-13T06:12:38Z,MERGED,True,181,483,17,https://github.com/JoshEngebretson,Updating CEF3 to Chromium 51,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/862,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/862,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,865,2016-06-14T18:54:38Z,2016-06-14T19:29:08Z,2016-06-14T19:29:08Z,MERGED,True,2,0,1,https://github.com/ScottDillman,fix for compiling with gcc 6.1.1 on Arch Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/865,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/865,Tested with Ubuntu  GCC 5.3 and has no effect in older compilers,Tested with Ubuntu  GCC 5.3 and has no effect in older compilers,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,865,2016-06-14T18:54:38Z,2016-06-14T19:29:08Z,2016-06-14T19:29:08Z,MERGED,True,2,0,1,https://github.com/ScottDillman,fix for compiling with gcc 6.1.1 on Arch Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/865,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/865#issuecomment-225990249,Tested with Ubuntu  GCC 5.3 and has no effect in older compilers,Thanks!  I filed #866 to deal with the crusty local copy of stb_image and stb_truetype in TurboBadger,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,869,2016-06-15T23:12:44Z,2016-06-15T23:47:59Z,2016-06-16T14:58:20Z,MERGED,True,147,14,2,https://github.com/JimMarlowe,Basic editing key bindings for Linux,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/869,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/869,"Add the arrow, backspace, delete to the Linux Ace editor, making for an enjoyable editing experience.
To say CEF support for linux is a little weak would not be an understatement. After trying to find the right combinations of key events, states, values, I found, by looking at the CEF browser unit tests for GTK, that they were translating GTK key scancodes to Windows scancodes, then using the methodology that windows uses to talk to the embedded browser. Now if that had been documented, it would have been done faster.
There will need to be still more follow on work to handle translation for the function and keypad keys, and making sure the full set of ace key bindings work.","Add the arrow, backspace, delete to the Linux Ace editor, making for an enjoyable editing experience.
To say CEF support for linux is a little weak would not be an understatement. After trying to find the right combinations of key events, states, values, I found, by looking at the CEF browser unit tests for GTK, that they were translating GTK key scancodes to Windows scancodes, then using the methodology that windows uses to talk to the embedded browser. Now if that had been documented, it would have been done faster.
There will need to be still more follow on work to handle translation for the function and keypad keys, and making sure the full set of ace key bindings work.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,869,2016-06-15T23:12:44Z,2016-06-15T23:47:59Z,2016-06-16T14:58:20Z,MERGED,True,147,14,2,https://github.com/JimMarlowe,Basic editing key bindings for Linux,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/869,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/869#issuecomment-226352327,"Add the arrow, backspace, delete to the Linux Ace editor, making for an enjoyable editing experience.
To say CEF support for linux is a little weak would not be an understatement. After trying to find the right combinations of key events, states, values, I found, by looking at the CEF browser unit tests for GTK, that they were translating GTK key scancodes to Windows scancodes, then using the methodology that windows uses to talk to the embedded browser. Now if that had been documented, it would have been done faster.
There will need to be still more follow on work to handle translation for the function and keypad keys, and making sure the full set of ace key bindings work.","by looking at the CEF browser unit tests for GTK, that they were translating GTK key scancodes to Windows scancodes, then using the methodology that windows uses to talk to the embedded browser.

Wow, that is nuts, thanks for the hard work, I know how futzy this particular key mapping can be and it looks like you hit the mother load!  LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,871,2016-06-16T03:34:31Z,2016-06-16T15:19:28Z,2016-06-16T15:19:28Z,MERGED,True,2,1,1,https://github.com/ScottDillman,remove unused dependency on ATL,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/871,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/871,This should make building with VC++ Build Tools and mingw easier.,This should make building with VC++ Build Tools and mingw easier.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,871,2016-06-16T03:34:31Z,2016-06-16T15:19:28Z,2016-06-16T15:19:28Z,MERGED,True,2,1,1,https://github.com/ScottDillman,remove unused dependency on ATL,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/871,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/871#issuecomment-226518196,This should make building with VC++ Build Tools and mingw easier.,"Awesome, thanks for digging!  LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,876,2016-06-16T23:43:36Z,2016-06-17T00:32:24Z,2016-06-17T00:32:26Z,MERGED,True,388,613,32,https://github.com/JoshEngebretson,"Adding Git SHA system, new build window, removing cruft",6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/876,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/876,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,877,2016-06-17T01:05:25Z,2016-06-17T17:25:36Z,2016-06-22T20:37:22Z,MERGED,True,54,20,9,https://github.com/shaddockh,TypeScript enhancements,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877,"This PR adds some additional overloads to make some APIs work better as generics so that the resulting return value is auto-cast to the right type.  Namely:
ResourceCache.getResource<T>
ResourceCache.getTempResource<T>
ResourceCache.getExistingResource<T>
UI.getWidgetAt<T>
UIWidget.getWidget<T>

The other thing this PR does is allow for export default <classname> which is used in ES6 and TypeScript which closes #845.  The project templates have been updated to use export default for the TypeScript projects as this is a cleaner and more preferable way of doing things.
@JoshEngebretson can you double check the C++ changes?  They work, but I'm still getting my bearings in C++ and there could be a better way of handling that.","This PR adds some additional overloads to make some APIs work better as generics so that the resulting return value is auto-cast to the right type.  Namely:
ResourceCache.getResource<T>
ResourceCache.getTempResource<T>
ResourceCache.getExistingResource<T>
UI.getWidgetAt<T>
UIWidget.getWidget<T>

The other thing this PR does is allow for export default <classname> which is used in ES6 and TypeScript which closes #845.  The project templates have been updated to use export default for the TypeScript projects as this is a cleaner and more preferable way of doing things.
@JoshEngebretson can you double check the C++ changes?  They work, but I'm still getting my bearings in C++ and there could be a better way of handling that.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,877,2016-06-17T01:05:25Z,2016-06-17T17:25:36Z,2016-06-22T20:37:22Z,MERGED,True,54,20,9,https://github.com/shaddockh,TypeScript enhancements,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877#issuecomment-226830150,"This PR adds some additional overloads to make some APIs work better as generics so that the resulting return value is auto-cast to the right type.  Namely:
ResourceCache.getResource<T>
ResourceCache.getTempResource<T>
ResourceCache.getExistingResource<T>
UI.getWidgetAt<T>
UIWidget.getWidget<T>

The other thing this PR does is allow for export default <classname> which is used in ES6 and TypeScript which closes #845.  The project templates have been updated to use export default for the TypeScript projects as this is a cleaner and more preferable way of doing things.
@JoshEngebretson can you double check the C++ changes?  They work, but I'm still getting my bearings in C++ and there could be a better way of handling that.","Awesome, and congrats on pulling around some Duktape :)  Thanks, LANDING! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,877,2016-06-17T01:05:25Z,2016-06-17T17:25:36Z,2016-06-22T20:37:22Z,MERGED,True,54,20,9,https://github.com/shaddockh,TypeScript enhancements,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877,https://github.com/Type1J,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/877#issuecomment-227868879,"This PR adds some additional overloads to make some APIs work better as generics so that the resulting return value is auto-cast to the right type.  Namely:
ResourceCache.getResource<T>
ResourceCache.getTempResource<T>
ResourceCache.getExistingResource<T>
UI.getWidgetAt<T>
UIWidget.getWidget<T>

The other thing this PR does is allow for export default <classname> which is used in ES6 and TypeScript which closes #845.  The project templates have been updated to use export default for the TypeScript projects as this is a cleaner and more preferable way of doing things.
@JoshEngebretson can you double check the C++ changes?  They work, but I'm still getting my bearings in C++ and there could be a better way of handling that.",Thanks @shaddockh! That's a great add.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,880,2016-06-18T15:34:16Z,2016-06-18T17:04:39Z,2016-06-18T17:04:40Z,MERGED,True,2,2,1,https://github.com/shaddockh,"Fix for user provided modules starting with ""Atomic""",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/880,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/880,"This fixes the issue where a module starting with ""Atomic"" pulls from the wrong location if it is not a built-in file.","This fixes the issue where a module starting with ""Atomic"" pulls from the wrong location if it is not a built-in file.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,880,2016-06-18T15:34:16Z,2016-06-18T17:04:39Z,2016-06-18T17:04:40Z,MERGED,True,2,2,1,https://github.com/shaddockh,"Fix for user provided modules starting with ""Atomic""",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/880,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/880#issuecomment-226953272,"This fixes the issue where a module starting with ""Atomic"" pulls from the wrong location if it is not a built-in file.","Good fix, need to evaluate this moving forward, an early convenience hack whose time has maybe come and gone.  Thanks!  Landing",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,882,2016-06-18T18:57:17Z,2016-06-18T19:18:43Z,2016-06-18T19:18:45Z,MERGED,True,11,339,126,https://github.com/JoshEngebretson,Factoring AtomicNET Prototype 2 out of sources,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/882,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/882,... for a clean run,... for a clean run,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,885,2016-06-24T00:26:47Z,2016-06-24T00:53:26Z,2016-06-24T00:53:28Z,MERGED,True,195,103,11,https://github.com/JoshEngebretson,Updates build to automatically generate script bindings with single cmake invocation,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/885,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/885,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,886,2016-06-24T17:37:24Z,2016-06-24T18:20:06Z,2016-06-24T18:20:08Z,MERGED,True,23,9,3,https://github.com/JoshEngebretson,"Updating README.md with Q&A site information, adding BACKERS.md",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/886,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/886,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,890,2016-06-26T21:33:59Z,2016-06-26T22:35:36Z,2016-06-26T22:35:38Z,MERGED,True,12,12,10,https://github.com/JoshEngebretson,Addressing Linting issues,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/890,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/890,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,891,2016-06-26T23:11:16Z,2016-06-27T03:46:59Z,2016-06-27T03:46:59Z,CLOSED,False,65,19,2,https://github.com/JimMarlowe,[Linux] keyboard mapping issues in script editor ,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/891,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/891,This fixes #884 and #872 by mapping most of the keys on the keyboard to the windows standard.,This fixes #884 and #872 by mapping most of the keys on the keyboard to the windows standard.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,891,2016-06-26T23:11:16Z,2016-06-27T03:46:59Z,2016-06-27T03:46:59Z,CLOSED,False,65,19,2,https://github.com/JimMarlowe,[Linux] keyboard mapping issues in script editor ,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/891,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/891#issuecomment-228648537,This fixes #884 and #872 by mapping most of the keys on the keyboard to the windows standard.,"I dont know how to remove that Subproject commit thing, I'll close this PR and start over.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,892,2016-06-27T14:38:18Z,2016-06-27T15:03:41Z,2016-06-27T16:53:33Z,MERGED,True,64,18,1,https://github.com/JimMarlowe,Linux keyboard mapping for 884,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/892,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/892,"This fixes the most of the keys for Linux cef3 usage, by translating SDL keycodes into Windows keycodes, as that is what cef3 requires. It fixes #884 and #872.","This fixes the most of the keys for Linux cef3 usage, by translating SDL keycodes into Windows keycodes, as that is what cef3 requires. It fixes #884 and #872.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,892,2016-06-27T14:38:18Z,2016-06-27T15:03:41Z,2016-06-27T16:53:33Z,MERGED,True,64,18,1,https://github.com/JimMarlowe,Linux keyboard mapping for 884,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/892,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/892#issuecomment-228772892,"This fixes the most of the keys for Linux cef3 usage, by translating SDL keycodes into Windows keycodes, as that is what cef3 requires. It fixes #884 and #872.","Great work, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229514868,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","Excellent, release APKs!!! I breezed through the code and looking good, will have a closer look soon.
We can have @LaraEngebretson do some Android deployment testing on Windows/Mac :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229519477,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","""9 successful checks"" - Congrats on compiling on all platforms in one go :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229528536,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","Some notes from looking over the wiki, which can help with the testing.
Note the minimum Android API level is 12, anything below this will not compile successfully.  ( from anecdotal testing, you need API level 15 to make the Galaxy S4 not act weird ).
An android app has a set of icons, and may use different ones depending on the situation. These are the folder names and the sizes of the icons that are expected to be present.
drawable-ldpi/con.png  size = 36x36 pixel
drawable-mdpi/icon.png  size = 48√ó48 pixels
drawable-hdpi/icon.png  size = 72√ó72 pixels
drawable/logo_large.png  size =  512x512 pixels  (Google Play store)
You can create your own set of icons, and set the icon path to the directory containing these directories and files as shown above. If the selected path is correct, the icon in the finder button will change to the drawable-ldpi icon.  If no selection is made, the default Atomic icons are used for the app.
Release Apps.
In order to create a release app, you will need a certificate to apply to the app as it is being built. Certificates may be purchased, or they can be self-signed. They are put in a keystore, with passwords for the store and alias. This information can be put in the ant.properties to make the authorization process automatic. When the Release Path checkbutton is set, you must enter the directory that contains the  ant.properties or the build will fail.  (This is as short as I could make it, it needs to be expanded. It has enough keywords that you can google your way thru this maze, or you make a debug apk. )",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229757563,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","This is really solid, I have one note about collapsing FileUtil dialogs creation into a single method.  @LaraEngebretson is doing some testing with a packages build of the editor and will have some followups.  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229770001,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","I understand about the FileUtils concerns. If you want the two new methods compressed, there is no reason why most of the others methods dealing with paths couldn't be compressed in the same way. It would involve adding two new string args, and move the strings from FileUtils.cpp to wherever in the ts code they may be called. And it would make a better generic service for future needs in the editor. Give the command, and I'll make this change.  I'd like to mention that the defaultpath strings for these methods doesn't make it down from ts to c++ code, but I wasn't ready to tilt that windmill in this PR. That would make those path finders even friendlier.
I'll look at the default icon button in a released setting, I suspected that it was wrong putting it in the tb.txt file, I'll see if I can move it into the BuildSettings windows constructor.
I'd be interested to hear the testing results, and what could be made better, like if the tooltips helped or hindered or could be platform specific, and if errors were encountered and it was obvious what to do about them.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/LaraEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229793791,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","Wow, this is a huge level up on Android deploy! üòÑ  Here are my notes from Windows/Mac testing:

Unable to deploy from Mac, cannot select API level and the Refresh button doesn't populate the dropdown menu
The project has to be deployed at least once in order for the drawable folder to exist and for the icons to show up in the Build Settings dialog.

Opening the Build Settings dialog, after restarting the editor, resizes the window and cuts off some of the right-hand side

Input fields lose the current path name if you click the Choose button and then select Cancel
Using Search to browse folders opens multiple finder windows (OSX only), to replicate:

Click ""choose""
Enter text in the Search field
Select a folder
Hit Ok to confirm, twice


On tooltips: first word of tooltip should be capitalized and no periods are necessary",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229800216,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","I'll look into 1) at first opportunity, thanks for testing!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229823694,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","@JimMarlowe Anything that can be done to make FileUtils more friendly, please feel free :)  I can also look into 5) if the issue isn't obvious",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JimMarlowe,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-229828191,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","For 1, This sounds like an android installation issue, I looked in the file that the code lives and saw that it doesn't fall under the build processing, so no errors would show up anyway to tell you what's wrong.
I added a generic FindPath and FindFile functions to FileUtils, and they seem to work fine. I'll switch everything over that makes sense.
5. is not obvious, The linux file finder does not have any editable fields, and the windows one does, but does not have that behavior. Did the OSX finder work correctly before my changes?
For the rest, I should be able to finish them off.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JimMarlowe,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-230078375,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","These are the things I fixed: If no iconpath  is set, show the icon in the deployment relative location. Tooltips fixed. Locked down icon buttonTBImageWidget size, it mostly works. Fix cancel in finder wiping out existing paths. Added generic FindPath and FindFile to FileUtils class, dog-fooded most methods. Added BuildCopyDir() to BuildBase, and dog-fooded the BuildPlatform files, friends and all.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-230105128,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","@JimMarlowe Great work and thanks for the general BuildBase cleanups üëç
It looks like we have some merge conflicts now, I'll rebase/squash the branch and fix whatever this is and test out/address anything I run into with OSX deploy to Android.  @LaraEngebretson already tested Windows side and it worked great...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,893,2016-06-29T22:46:12Z,2016-07-02T16:23:19Z,2016-07-03T00:50:01Z,CLOSED,False,439,207,20,https://github.com/JimMarlowe,Andriod toolchain for debug and release apks from #844,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893,https://github.com/JoshEngebretson,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/893#issuecomment-230109894,"This is the result of the proposal in #844. Everything in #844 was implemented, in addition to the OK and Cancel buttons on the Build Settings dialog perform their assigned functions. This gives a fairly wide path for users to deploy both debug and release APKs from the editor. The build processing changed very little, and the error messages have been enhanced to tell what the problem is and to give possible fixes, in some cases. The release APKs are done by the user modifying ant.properties to include the keystore location and the passwords, so the build process does not need to be stopped to enter these, and since the directory where the user keeps this file is set into ToolPrefs, they only needs to do it once.
I need help testing it on windows and OSX, I can not build on these platforms.
And when it lands, the wiki page can be updated to reflect the new capabilities.","I rebased to current master, applied a couple minor cleanups, and tested on OSX...  will land from PR #899
Thanks! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,894,2016-06-30T18:32:59Z,2016-06-30T22:59:53Z,2016-06-30T22:59:53Z,CLOSED,False,46,31,10,https://github.com/JoshEngebretson,Improvements to CMake generation bash and bat scripts,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/894,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/894,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,894,2016-06-30T18:32:59Z,2016-06-30T22:59:53Z,2016-06-30T22:59:53Z,CLOSED,False,46,31,10,https://github.com/JoshEngebretson,Improvements to CMake generation bash and bat scripts,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/894,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/894#issuecomment-229784050,,"Closing, will reopen once target build order is screwing up on Linux",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,896,2016-06-30T23:33:47Z,2016-07-01T02:02:41Z,2016-07-01T02:02:43Z,MERGED,True,53,70,17,https://github.com/JoshEngebretson,Build Improvements,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/896,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/896,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,897,2016-07-01T08:22:03Z,2016-07-01T17:43:58Z,2016-11-28T10:25:30Z,MERGED,True,48,7,6,https://github.com/mattbenic,Added Import Materials option to ModelImporter and Inspector,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897,"Added a config flag to ""ImportMaterials""  in Settings\Import.json to disable/enable auto generating materials on model import. (Enabled by default)
Also added a check box to the model inspector allowing the user to enable/disable whether that model should generate or regenerate materials on apply or import.","Added a config flag to ""ImportMaterials""  in Settings\Import.json to disable/enable auto generating materials on model import. (Enabled by default)
Also added a check box to the model inspector allowing the user to enable/disable whether that model should generate or regenerate materials on apply or import.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,897,2016-07-01T08:22:03Z,2016-07-01T17:43:58Z,2016-11-28T10:25:30Z,MERGED,True,48,7,6,https://github.com/mattbenic,Added Import Materials option to ModelImporter and Inspector,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897#issuecomment-229886469,"Added a config flag to ""ImportMaterials""  in Settings\Import.json to disable/enable auto generating materials on model import. (Enabled by default)
Also added a check box to the model inspector allowing the user to enable/disable whether that model should generate or regenerate materials on apply or import.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,897,2016-07-01T08:22:03Z,2016-07-01T17:43:58Z,2016-11-28T10:25:30Z,MERGED,True,48,7,6,https://github.com/mattbenic,Added Import Materials option to ModelImporter and Inspector,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897#issuecomment-229984547,"Added a config flag to ""ImportMaterials""  in Settings\Import.json to disable/enable auto generating materials on model import. (Enabled by default)
Also added a check box to the model inspector allowing the user to enable/disable whether that model should generate or regenerate materials on apply or import.","@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,897,2016-07-01T08:22:03Z,2016-07-01T17:43:58Z,2016-11-28T10:25:30Z,MERGED,True,48,7,6,https://github.com/mattbenic,Added Import Materials option to ModelImporter and Inspector,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/897#issuecomment-230007179,"Added a config flag to ""ImportMaterials""  in Settings\Import.json to disable/enable auto generating materials on model import. (Enabled by default)
Also added a check box to the model inspector allowing the user to enable/disable whether that model should generate or regenerate materials on apply or import.","Very cool, will remove the commented out method in post, LANDING! Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,899,2016-07-02T16:22:06Z,2016-07-02T19:56:20Z,2016-07-02T19:56:22Z,MERGED,True,428,200,22,https://github.com/JoshEngebretson,Release and Debug APK's,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/899,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/899,"This PR implements everything in and closes #844. It has been tested for Android deployment on Windows, OSX, and Linux.  Thanks to @JimMarlowe for the quality work üëç","This PR implements everything in and closes #844. It has been tested for Android deployment on Windows, OSX, and Linux.  Thanks to @JimMarlowe for the quality work üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230210599,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","Hey, so the CI is failing on this:
[Sun Jul  3 22:23:49 2016] INFO: Loading Module: /Users/jenkins/Home/workspace/AtomicDS_BuildBinaries_MacPlayer/Script/Packages/WebView/WebView.json
[Sun Jul  3 22:23:49 2016] INFO: Generating JS Bindings
[Sun Jul  3 22:23:49 2016] INFO: Generating C# Bindings
error TS6053: File 'Script/TypeScript/AtomicNET.d.ts' not found.
error TS6053: File 'Script/TypeScript/WebViewWork.d.ts' not found.

I am not sure why it is only failing on MacPlayer and Linux, though others are passing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230211000,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","Oh,  I cleaned the CI workspaces too, I can look into this tomorrow if it doesn't add up... looking forward to having a gander at the code too :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230291859,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","That's really strange.  I thought maybe it was a filename casing issue, but everything looks correct.  Is there a way to get a trace to determine where exactly it's failing?  It's odd that the mac builds, but the mac player does not.  Is either something getting purged between builds or is the current working directory getting changed somehow so relative paths to line up?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230333196,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","No worries, looking into it and will report.  I know AtomicNET shouldn't be a thing on master, WebViewWork.d.ts a crumb reference as well?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230335097,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","They are being added to the tsconfig by the merge, here:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/TSH-ATOMIC-MONACOEDITOR/Script/tsconfig.json#L106
and here:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/TSH-ATOMIC-MONACOEDITOR/Script/tsconfig.json#L114
Not entirely sure why only these 2 platforms are barfing, though good some are as should be removed... yay? :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230343215,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size",Probably should be removed. I'm away from my computer but can look at it tomorrow.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230343516,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","I removed them, somehow references being added to main.ts on these builds: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/TSH-ATOMIC-MONACOEDITOR/Script/AtomicEditor/main.ts  bizarre",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230353485,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","Something about how the CI is checking out the PR, which is causing a problem with the Mac and Linux CI, though not others... I can see wrong files in the checkout.  I don't think there is anything for you to do here, though I won't be able to build test editor builds until I figure it out.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/shaddockh,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230366296,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","FYI, I think those files will need to be specifically set to not be included within the filesglob section. Otherwise Atom will keep adding them back in on edit.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230366504,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","They are gone and should not come back, unless they explicitly make a return.  I just built out editor distro binaries to test, so far so good!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230369364,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","Ok, testing on OSX and the editor view is white and it can't be edited.  Can be reproduced with a ./Build_AtomicEditor.sh editor artifact here.  No rush, lemme know if it reproduces for you...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/shaddockh,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230373703,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","ok, this had to do with the old Ace editor settings getting set in your application preferences file and Monaco trying to load an invalid theme.  The latest commit fixes this, but you may need to remove the ""codeEditorSettings"" block from you application settings file ( it won't be looked at, but for cleanup you'll want to remove it).  The settings now look at the ""codeEditor"" block.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230529199,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","Awesome, the mighty @LaraEngebretson is testing this morning :)",True,{'THUMBS_UP': ['https://github.com/shaddockh']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,904,2016-07-04T03:21:37Z,2016-07-05T17:18:09Z,2016-07-05T17:18:10Z,MERGED,True,7097,934,468,https://github.com/shaddockh,Replace the Ace editor with the Monaco editor,25,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904,https://github.com/JoshEngebretson,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/904#issuecomment-230542696,"This PR replaces the Ace editor with the Monaco editor from Microsoft.
Major changes:

Replaces the Ace editor with the Monaco editor
Adds live syntax checking for TypeScript and JavaScript
adds live semantic syntax checking for TypeScript
adds completions for JavaScript and TypeScript based upon code in project and d.ts files
adds hovers for variables/methods in TypeScript and JavaScript
adds parameter help for functions in TypeScript and JavaScript
replaces the TurboBadger editor with Monaco editor with whitespace displayed (syntax highlighting, however, is not available.  A new grammar would need to be created, but if done could provide completions as well.)
Supports application prefs for font size, themes ( vs or vs-dark supported), display whitespace, soft tabs, and tab size","This is fantastic!  Monaco is really nice looking and super snappy, more responsive than Ace.  Intellisense is also really solid.  Great work, going to make a gif for tweet-age :)  LANDING! Thanks! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,905,2016-07-05T12:49:17Z,2016-07-05T16:25:35Z,2016-12-05T13:22:32Z,MERGED,True,2,2,1,https://github.com/mattbenic,Refine .gitignore for Script/TpeScript to only exclude non-Work d.ts,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/905,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/905,One of our branches ended up missing tsconfig.json after a git clean -xdf because of this,One of our branches ended up missing tsconfig.json after a git clean -xdf because of this,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,905,2016-07-05T12:49:17Z,2016-07-05T16:25:35Z,2016-12-05T13:22:32Z,MERGED,True,2,2,1,https://github.com/mattbenic,Refine .gitignore for Script/TpeScript to only exclude non-Work d.ts,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/905,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/905#issuecomment-230528978,One of our branches ended up missing tsconfig.json after a git clean -xdf because of this,Great üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,906,2016-07-05T16:41:22Z,2016-07-05T17:03:30Z,2016-07-05T17:03:32Z,MERGED,True,13,2,1,https://github.com/JoshEngebretson,Copy AtomicTool to artifacts post build if only building that target,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/906,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/906,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,909,2016-07-06T00:04:42Z,2016-07-06T01:23:01Z,2016-07-06T01:23:04Z,MERGED,True,8,3,4,https://github.com/shaddockh,Expose fontFamily to the monaco editor prefs,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/909,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/909,"@JoshEngebretson , I've quickly exposed fontFamily to the monaco prefs.  Also, the AtomicNET.d.ts automatically gets added back in by the Atom editor if it exists, so I added a negative glob so this doesn't happen anymore.","@JoshEngebretson , I've quickly exposed fontFamily to the monaco prefs.  Also, the AtomicNET.d.ts automatically gets added back in by the Atom editor if it exists, so I added a negative glob so this doesn't happen anymore.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,909,2016-07-06T00:04:42Z,2016-07-06T01:23:01Z,2016-07-06T01:23:04Z,MERGED,True,8,3,4,https://github.com/shaddockh,Expose fontFamily to the monaco editor prefs,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/909,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/909#issuecomment-230648254,"@JoshEngebretson , I've quickly exposed fontFamily to the monaco prefs.  Also, the AtomicNET.d.ts automatically gets added back in by the Atom editor if it exists, so I added a negative glob so this doesn't happen anymore.","Ok, cool.  I don't think we'll be scripting C# from TS, though definitely the reverse will be possible.  Landing  :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,910,2016-07-06T19:27:41Z,2016-07-06T22:46:37Z,2016-07-06T22:50:58Z,CLOSED,False,112,3,6,https://github.com/JimMarlowe,Linux only ForceGL2 based in gfxlib version,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,"This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.","This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,910,2016-07-06T19:27:41Z,2016-07-06T22:46:37Z,2016-07-06T22:50:58Z,CLOSED,False,112,3,6,https://github.com/JimMarlowe,Linux only ForceGL2 based in gfxlib version,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910#issuecomment-230897176,"This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.","I'd like to see if can avoid having to touch preferences and multiple configuration spots, I think we might be able to get the driver version and change gl2/3 before the screen is opened, which would also solve the initial run issue and work with the deployed player... needed a reason to reinstall Linux VM :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,910,2016-07-06T19:27:41Z,2016-07-06T22:46:37Z,2016-07-06T22:50:58Z,CLOSED,False,112,3,6,https://github.com/JimMarlowe,Linux only ForceGL2 based in gfxlib version,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910#issuecomment-230912205,"This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.","Yes, this definitely falls into the barnacle code category.  Let me see if I can get the check operating in void Graphics::Restore() and make it fallback from GL3 to GL2, which it looks like it does for other reasons.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,910,2016-07-06T19:27:41Z,2016-07-06T22:46:37Z,2016-07-06T22:50:58Z,CLOSED,False,112,3,6,https://github.com/JimMarlowe,Linux only ForceGL2 based in gfxlib version,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910#issuecomment-230915997,"This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.","Thanks, I put this into chat, What do you think of: ""we can probably default to GL3 initially, detect old mesa and recreate a GL2 with warning instructing to run with forcegl2 to avoid this warning""?
This would work first run and in the deployed player, I don't think releasing/recreating context should have a huge hit... though, that remains to be seen :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,910,2016-07-06T19:27:41Z,2016-07-06T22:46:37Z,2016-07-06T22:50:58Z,CLOSED,False,112,3,6,https://github.com/JimMarlowe,Linux only ForceGL2 based in gfxlib version,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/910#issuecomment-230930366,"This PR fixes a common problem with the Linux Editor and player. Depending on a specific Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed.  Urho3D has the same issue.  As a first impression, it's bad, real bad. The solution is to detect and compare mesa lib versions, and if the linux distro is afflicted, set a value in tool.prefs, to account for this problem.  There are complications, the detection code only runs after the graphics are initialized, and the flag you need to set to make the flashing stop can only be set before the graphics are initialized. So there is a one execution lag to starting the fix in the editor, this is reported in the log. The editor player is passed the flag thru the command line, so that is transparent to the user.
For the linux standalone player, the user will have to change the Settings/Engine.json file manually to set the ForceGL2 flag, there is no way to do that automatically, since the user has to know that they need the Settings directory.
This processing is automatic, so the user does not have to do anything, whether they have the problem or not. If they upgrade their Mesa Libs to a version that does not have the problem, it will fix itself, with the one execution lag.","Closing this branch, most of these files are unneeded.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,911,2016-07-07T00:08:58Z,2016-07-07T16:58:39Z,2016-07-07T19:36:31Z,CLOSED,False,32,0,1,https://github.com/JimMarlowe,Jm linux 863,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/911,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/911,"This PR fixes a common problem with the Linux Editor and player. Depending on the Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed. Urho3D has the same issue. As a first impression, it's bad. The solution is to detect and compare mesa lib versions, and if it meets the error criteria, force the graphics to revert to GL2 mode.","This PR fixes a common problem with the Linux Editor and player. Depending on the Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed. Urho3D has the same issue. As a first impression, it's bad. The solution is to detect and compare mesa lib versions, and if it meets the error criteria, force the graphics to revert to GL2 mode.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,911,2016-07-07T00:08:58Z,2016-07-07T16:58:39Z,2016-07-07T19:36:31Z,CLOSED,False,32,0,1,https://github.com/JimMarlowe,Jm linux 863,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/911,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/911#issuecomment-231141170,"This PR fixes a common problem with the Linux Editor and player. Depending on the Mesa library version, a 3d scene, like ToonTown, becomes a flashing mess when viewed. Urho3D has the same issue. As a first impression, it's bad. The solution is to detect and compare mesa lib versions, and if it meets the error criteria, force the graphics to revert to GL2 mode.","Excellent :)  I squashed the commits and tweaked the log message a bit over in #912, will land from there.  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,912,2016-07-07T16:57:39Z,2016-07-07T17:36:28Z,2016-07-07T17:36:30Z,MERGED,True,30,0,1,https://github.com/JoshEngebretson,Force GL2 context creation on older Mesa drivers,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/912,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/912,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,912,2016-07-07T16:57:39Z,2016-07-07T17:36:28Z,2016-07-07T17:36:30Z,MERGED,True,30,0,1,https://github.com/JoshEngebretson,Force GL2 context creation on older Mesa drivers,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/912,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/912#issuecomment-231151529,,Closes #863,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,913,2016-07-08T21:04:41Z,2016-07-08T21:33:13Z,2016-07-10T17:19:51Z,MERGED,True,1,0,1,https://github.com/JimMarlowe,Add TAB scancode for Monaco on Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/913,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/913,"This adds the TAB scancode for Monaco on linux. The former editor, Ace, did not need this.","This adds the TAB scancode for Monaco on linux. The former editor, Ace, did not need this.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,913,2016-07-08T21:04:41Z,2016-07-08T21:33:13Z,2016-07-10T17:19:51Z,MERGED,True,1,0,1,https://github.com/JimMarlowe,Add TAB scancode for Monaco on Linux,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/913,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/913#issuecomment-231478166,"This adds the TAB scancode for Monaco on linux. The former editor, Ace, did not need this.",Thanks!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,917,2016-07-14T01:24:08Z,2016-07-14T05:24:53Z,2016-07-14T05:24:55Z,MERGED,True,17124,885,145,https://github.com/JoshEngebretson,Atomic C# Work In Progress,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/917,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/917,"This PR adds build, runtime, and tooling support for AtomicNET.  It also cleans up Application code with the addition of AtomicApp module.   C# support is a work in progress and not ready for previewing, however it is at a good point to land on master to avoid a large running code delta.","This PR adds build, runtime, and tooling support for AtomicNET.  It also cleans up Application code with the addition of AtomicApp module.   C# support is a work in progress and not ready for previewing, however it is at a good point to land on master to avoid a large running code delta.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,918,2016-07-19T12:44:44Z,2016-07-19T16:50:30Z,2016-07-19T16:50:30Z,MERGED,True,5,3,2,https://github.com/mattbenic,Add a parameter to genvs2015 task to enable/disable ATOMIC_DEV_BUILD,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/918,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/918,This allows building the VS2015 solution without it having ATOMIC_DEV_BUILD set to 1. In our case this is useful for generating the solution for custom non-dev builds for artists. Will still default to 1.,This allows building the VS2015 solution without it having ATOMIC_DEV_BUILD set to 1. In our case this is useful for generating the solution for custom non-dev builds for artists. Will still default to 1.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,918,2016-07-19T12:44:44Z,2016-07-19T16:50:30Z,2016-07-19T16:50:30Z,MERGED,True,5,3,2,https://github.com/mattbenic,Add a parameter to genvs2015 task to enable/disable ATOMIC_DEV_BUILD,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/918,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/918#issuecomment-233695323,This allows building the VS2015 solution without it having ATOMIC_DEV_BUILD set to 1. In our case this is useful for generating the solution for custom non-dev builds for artists. Will still default to 1.,"Great, thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234416300,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","Really great work, I went over the entire pull and looks good.  Nice job figuring out some of the more esoteric UI stuff, especially things like event blocking for changed notifications (so you don't end up filling up a ton of undo levels) and getting new widgets written and others wrapped üëç
My only comment is wondering if the dark theme should avoid using a bright-ish blue for checkboxes and sliders, I know there was some legacy usage of this from the original TB theme.  We can live in it for a bit and see what people think.  I like the changes to the close X :)
I'll build out the branch here once I have a couple more things done for today, then land it.  THANKS!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234422352,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","A couple notes from testing:
I opened up a color chooser on global light color setting and chose red:

When I hit ok, the inline select fields of  the light color did update however the light component itself was not updated, this is probably due to blocking change events or an edit complete not getting caught, not sure.

When a color chooser is open, clicking the '...' button will open additional choosers, it should maybe be disabled until the associated chooser closes.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234423133,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","I'll make it so you cant bring up more than one color chooser at a time.
I was wondering if I should send an edit complete event, it looks like yes, I'll do that too.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234748570,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","I still have to make it only bring up only one color chooser at a time, but I finally got the color to apply. Though it only took 4 additional lines, the path to get there was interesting to say the least. And I added HSL text, by request.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234785162,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","Great, I'll have a quick stab this morning to see if can get the edit event down to one, otherwise will be 4 levels of undo I believe.  It would also be good to get the '...' button justified to the right for consistency and to save vertical space",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JimMarlowe,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234828775,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","These are skin changes for the checkbutton, radiobutton, and slider thumb. No more blue.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-234829367,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","Very cool, if you merge JimMarlowe#1 those changes will show up here too",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,919,2016-07-21T22:52:55Z,2016-07-25T17:49:10Z,2016-07-25T20:25:28Z,CLOSED,False,1171,13,71,https://github.com/JimMarlowe,UI enhancements and color picker,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/919#issuecomment-235028889,"UI enhancements for #379 and #914
Added AccentColors elements to the light/dark skins, and used them to replace hex code colors in editor tb.txt files.
Replaced stock TB checkboxes in both skins with a blue square check box, fixed some instances when the UI files were referencing the grayed checkbox instead of the normal checkbox.
Replaced window and tab closer X in both skins with something better looking.
Added tooltips to the top editor icons for Translate, Rotate, Scale, and the Local/World button.
Created TBColorWidget and TBColorWheel widgets for use in the color picker
Added UISlider, UIColorWidget and UIColorWheel Atomic widgets, to make them scriptable.
Added a simple color picker to the color inspector.","Great work, made a PR with combined updates, will land from there ‚úàÔ∏è  : #920
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,920,2016-07-25T17:47:58Z,2016-07-25T18:21:47Z,2016-07-25T18:21:50Z,MERGED,True,1311,16,72,https://github.com/JoshEngebretson,Color Picker and skin enhancements,9,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/920,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/920,"Combined updates for PR, notes here: #919","Combined updates for PR, notes here: #919",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,921,2016-07-26T12:25:05Z,2016-07-27T13:49:40Z,2016-07-28T14:44:55Z,CLOSED,False,510,72,15,https://github.com/mattbenic,Introduces selective build configuration,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921,"Allows a file called AssetBuildConfig.json to be added to settings, and tags within it used to specify what content to include when building. As an example:
{
""AssetBuildConfig"": [
{
""Tag"": ""FOO"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Foo""
]
},
{
""Tag"": ""BAR"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Bar""
]
}
]
}
This allows a build to be generated in three ways:

AtomicTool.exe build WINDOWS will generate a build as before, including all resources.
AtomicTool.exe build WINDOWS FOO will generate a build that includes only the sprites in Sprites/Foo.
AtomicTool.exe build WINDOWS BAR will generate a build that includes only the sprites in Sprites/BAR.

Any number of configurations can be described like this, and both complete filenames and directories are supported (both relative to /Resources","Allows a file called AssetBuildConfig.json to be added to settings, and tags within it used to specify what content to include when building. As an example:
{
""AssetBuildConfig"": [
{
""Tag"": ""FOO"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Foo""
]
},
{
""Tag"": ""BAR"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Bar""
]
}
]
}
This allows a build to be generated in three ways:

AtomicTool.exe build WINDOWS will generate a build as before, including all resources.
AtomicTool.exe build WINDOWS FOO will generate a build that includes only the sprites in Sprites/Foo.
AtomicTool.exe build WINDOWS BAR will generate a build that includes only the sprites in Sprites/BAR.

Any number of configurations can be described like this, and both complete filenames and directories are supported (both relative to /Resources",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,921,2016-07-26T12:25:05Z,2016-07-27T13:49:40Z,2016-07-28T14:44:55Z,CLOSED,False,510,72,15,https://github.com/mattbenic,Introduces selective build configuration,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921#issuecomment-235255932,"Allows a file called AssetBuildConfig.json to be added to settings, and tags within it used to specify what content to include when building. As an example:
{
""AssetBuildConfig"": [
{
""Tag"": ""FOO"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Foo""
]
},
{
""Tag"": ""BAR"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Bar""
]
}
]
}
This allows a build to be generated in three ways:

AtomicTool.exe build WINDOWS will generate a build as before, including all resources.
AtomicTool.exe build WINDOWS FOO will generate a build that includes only the sprites in Sprites/Foo.
AtomicTool.exe build WINDOWS BAR will generate a build that includes only the sprites in Sprites/BAR.

Any number of configurations can be described like this, and both complete filenames and directories are supported (both relative to /Resources",@JoshEngebretson  Please let me know what the Mac/Linux fails are so we can sort them out.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,921,2016-07-26T12:25:05Z,2016-07-27T13:49:40Z,2016-07-28T14:44:55Z,CLOSED,False,510,72,15,https://github.com/mattbenic,Introduces selective build configuration,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921#issuecomment-235322955,"Allows a file called AssetBuildConfig.json to be added to settings, and tags within it used to specify what content to include when building. As an example:
{
""AssetBuildConfig"": [
{
""Tag"": ""FOO"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Foo""
]
},
{
""Tag"": ""BAR"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Bar""
]
}
]
}
This allows a build to be generated in three ways:

AtomicTool.exe build WINDOWS will generate a build as before, including all resources.
AtomicTool.exe build WINDOWS FOO will generate a build that includes only the sprites in Sprites/Foo.
AtomicTool.exe build WINDOWS BAR will generate a build that includes only the sprites in Sprites/BAR.

Any number of configurations can be described like this, and both complete filenames and directories are supported (both relative to /Resources","It isn't getting to other platforms as the AtomicTool task is failing.  This task initially builds the tool so it doesn't have to be rebuilt for other platforms which use OSX to build (android, ios, webgl)
OSX and Linux are the same error:
Users/jenkins/Home/workspace/AtomicDS_BuildAtomicTool_Mac/Source/ToolCore/Build/BuildBase.cpp:518:21: error: non-const lvalue reference to type 'Atomic::String' cannot bind to a temporary of type 'Atomic::String'
            String &filename = GetFileName(filesInCacheFolder[j]);

This is easy to replicate and test locally if you have a Linux VM
On Linux, the PR task just builds the editor, so could use the root shell script or:
./Build/Linux/node/node ./Build/node_modules/jake/bin/cli.js -f ./Build/Scripts/Bootstrap.js build:atomiceditor --trace
on Mac.
./Build/Mac/node/node ./Build/node_modules/jake/bin/cli.js -f ./Build/CIScripts/Build.js build:atomictool",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,921,2016-07-26T12:25:05Z,2016-07-27T13:49:40Z,2016-07-28T14:44:55Z,CLOSED,False,510,72,15,https://github.com/mattbenic,Introduces selective build configuration,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/921#issuecomment-235590574,"Allows a file called AssetBuildConfig.json to be added to settings, and tags within it used to specify what content to include when building. As an example:
{
""AssetBuildConfig"": [
{
""Tag"": ""FOO"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Foo""
]
},
{
""Tag"": ""BAR"",
""Resources"": [
""Components"",
""Scripts"",
""Scenes"",
""Sprites/Bar""
]
}
]
}
This allows a build to be generated in three ways:

AtomicTool.exe build WINDOWS will generate a build as before, including all resources.
AtomicTool.exe build WINDOWS FOO will generate a build that includes only the sprites in Sprites/Foo.
AtomicTool.exe build WINDOWS BAR will generate a build that includes only the sprites in Sprites/BAR.

Any number of configurations can be described like this, and both complete filenames and directories are supported (both relative to /Resources","Great work gents, will land in #922",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,922,2016-07-27T13:48:56Z,2016-07-27T15:12:48Z,2016-07-27T15:12:50Z,MERGED,True,508,72,15,https://github.com/JoshEngebretson,Selective deployment configuration,15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/922,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/922,"This PR just fixes a compile error on clang and cleans up a configuration method, more info in the Original PR: #921","This PR just fixes a compile error on clang and cleans up a configuration method, more info in the Original PR: #921",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,923,2016-07-27T22:12:23Z,2016-07-27T23:06:34Z,2016-07-27T23:06:34Z,MERGED,True,18,5,2,https://github.com/Tarik-B,Fixed issue #588: stop button now changes back to play after stopping project (Linux),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923,https://github.com/Tarik-B,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923,"Replaced ""kill"" by ""waitpid"" call (see http://linux.die.net/man/2/waitpid).","Replaced ""kill"" by ""waitpid"" call (see http://linux.die.net/man/2/waitpid).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,923,2016-07-27T22:12:23Z,2016-07-27T23:06:34Z,2016-07-27T23:06:34Z,MERGED,True,18,5,2,https://github.com/Tarik-B,Fixed issue #588: stop button now changes back to play after stopping project (Linux),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923#issuecomment-235738855,"Replaced ""kill"" by ""waitpid"" call (see http://linux.die.net/man/2/waitpid).",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,923,2016-07-27T22:12:23Z,2016-07-27T23:06:34Z,2016-07-27T23:06:34Z,MERGED,True,18,5,2,https://github.com/Tarik-B,Fixed issue #588: stop button now changes back to play after stopping project (Linux),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/923#issuecomment-235742838,"Replaced ""kill"" by ""waitpid"" call (see http://linux.die.net/man/2/waitpid).","Looks good, thanks
@AtomicBuildBot ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,925,2016-07-28T23:23:42Z,2016-07-28T23:50:53Z,2016-07-28T23:50:57Z,MERGED,True,8,2,3,https://github.com/JoshEngebretson,Updating Atomic WebView to Chrome 52,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/925,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/925,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,926,2016-07-29T03:10:53Z,2016-07-29T03:34:13Z,2016-07-29T03:34:15Z,MERGED,True,2519,619,71,https://github.com/JoshEngebretson,Core C# and Workflow Progress (+20 squashed commits),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/926,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/926,"Squashed commits:
[a8adeb4] Working on C#
[e718ac3] Working on C#
[a76e6a0] C# Work
[50d89d7] For AtomicProject assembly copy on compile to resources
[d5a02dd] Add support for Main entry point with command line args for project assembly, fix crash for CS SharedPtr return values
[287712d] C# Work
[0aadeae] Expire event receivers
[b02e6a3] Adding generic version of ResourceCache query
[e6315f3] C# Work
[e5043a3] Fix bool marshaling
[c16e251] Allow multiple CSComponents on node, only call update if CS component is enabled
[13acad0] Adding C# component template
[19b54ed] Adding CSharpLanguageExtension also initial hook for playing managed player from editor
[ce26115] Compile AtomicProject.dll to Bin folder and copy resulting assembly to resources
[69a8573] Only run nuget restore before msbuild if necessary
[bfcf75f] Updating CS inpector fields on the fly
[087d4b5] NETBuildSystem able to build project assembly, from within the Atomic Editor
[9e1ec85] NETBuildSystem can now handle solution JSON configuration files
[f241a7e] CSharp Importer
[cc62b79] Adding NETBuildSystem, C# resource editor and importer, 2hz ToolSystem update event, cleanups","Squashed commits:
[a8adeb4] Working on C#
[e718ac3] Working on C#
[a76e6a0] C# Work
[50d89d7] For AtomicProject assembly copy on compile to resources
[d5a02dd] Add support for Main entry point with command line args for project assembly, fix crash for CS SharedPtr return values
[287712d] C# Work
[0aadeae] Expire event receivers
[b02e6a3] Adding generic version of ResourceCache query
[e6315f3] C# Work
[e5043a3] Fix bool marshaling
[c16e251] Allow multiple CSComponents on node, only call update if CS component is enabled
[13acad0] Adding C# component template
[19b54ed] Adding CSharpLanguageExtension also initial hook for playing managed player from editor
[ce26115] Compile AtomicProject.dll to Bin folder and copy resulting assembly to resources
[69a8573] Only run nuget restore before msbuild if necessary
[bfcf75f] Updating CS inpector fields on the fly
[087d4b5] NETBuildSystem able to build project assembly, from within the Atomic Editor
[9e1ec85] NETBuildSystem can now handle solution JSON configuration files
[f241a7e] CSharp Importer
[cc62b79] Adding NETBuildSystem, C# resource editor and importer, 2hz ToolSystem update event, cleanups",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,928,2016-07-29T13:18:39Z,2016-07-30T16:30:53Z,2016-11-28T10:25:45Z,MERGED,True,131,8,5,https://github.com/mattbenic,Added Max Size setting to Texture Importer,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,"This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.","This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,928,2016-07-29T13:18:39Z,2016-07-30T16:30:53Z,2016-11-28T10:25:45Z,MERGED,True,131,8,5,https://github.com/mattbenic,Added Max Size setting to Texture Importer,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928#issuecomment-236374843,"This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.","Looks good, some of the code appears to have tab indents, I wonder if there is a CI plugin that will fail on mixed tabs/spaces in a source file :)  Until then, if it is the only issue in a PR, think landing trumps the turnaround unless it is a lot of code or a reoccurring theme.
Thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,928,2016-07-29T13:18:39Z,2016-07-30T16:30:53Z,2016-11-28T10:25:45Z,MERGED,True,131,8,5,https://github.com/mattbenic,Added Max Size setting to Texture Importer,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928#issuecomment-236377271,"This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.","I'll refactor the ddr stuff in another PR, it bugs me having it spread out
like that as well, but that same change is in the other PR's code.
Will recheck whitespace settings as well on all devs, I think Johnny
recently had to reinstall. I see there's a VS plugin that supports that
project.js I pointed out earlier. Did you end up going for it?
On Sat, 30 Jul 2016 at 18:31 JoshEngebretson notifications@github.com
wrote:

Merged #928
#928.
‚Äî
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#928 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AARBV2TARYMfq7Wj82f9_HsQueKMJk5Kks5qa3xCgaJpZM4JYLql
.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,928,2016-07-29T13:18:39Z,2016-07-30T16:30:53Z,2016-11-28T10:25:45Z,MERGED,True,131,8,5,https://github.com/mattbenic,Added Max Size setting to Texture Importer,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928#issuecomment-236379612,"This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.","Do you mean project.json?  NETCore is deprecating that in favor of cross platform msbuild solutions/projects, which is a good decision I think.  The AtomicEditor/ToolCore can also generate and build sln/csproj's now.
I could add a simple Jake task to check the sources in Source/ for mixed tabs/spaces, though no biggie, we've got bigger fish to fry :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,928,2016-07-29T13:18:39Z,2016-07-30T16:30:53Z,2016-11-28T10:25:45Z,MERGED,True,131,8,5,https://github.com/mattbenic,Added Max Size setting to Texture Importer,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/928#issuecomment-236509288,"This setting imposes the specified maximum dimensions on the compressed version of the texture in the cache.
Also fixes a case where the uncompressed file would have been loaded instead of the compressed version.","Nope, I was referring to editorconfig. It has whitespace and EOL control
with plugins for all the major editors and IDEs:

http://editorconfig.org/",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,929,2016-07-30T17:21:34Z,2016-07-30T17:50:53Z,2016-07-30T17:50:55Z,MERGED,True,2,0,1,https://github.com/JoshEngebretson,Add AtomicNETScript and AtomicApp to CI editor build,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/929,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/929,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,930,2016-07-30T20:16:42Z,2016-07-30T20:38:56Z,2016-07-30T20:38:57Z,MERGED,True,109,26,6,https://github.com/JoshEngebretson,Pass at cleaning up JS package registration,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/930,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/930,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,931,2016-07-30T22:30:45Z,2016-07-30T23:00:45Z,2016-07-30T23:00:46Z,MERGED,True,7,0,2,https://github.com/JoshEngebretson,"When closing project, clear hierarchy pane",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/931,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/931,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,932,2016-07-31T18:39:31Z,2016-07-31T19:06:44Z,2016-07-31T19:06:46Z,MERGED,True,52,4,3,https://github.com/JoshEngebretson,"Fix for Filewatcher hanging on non-writeable folder, CEF logging",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/932,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/932,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,934,2016-08-01T03:47:49Z,2016-08-01T04:14:29Z,2016-08-01T04:14:29Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934,https://github.com/cyecp,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934,up,up,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,934,2016-08-01T03:47:49Z,2016-08-01T04:14:29Z,2016-08-01T04:14:29Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934,https://github.com/cyecp,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934#issuecomment-236483613,up,please ignore.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,934,2016-08-01T03:47:49Z,2016-08-01T04:14:29Z,2016-08-01T04:14:29Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934,https://github.com/AtomicBuildBot,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/934#issuecomment-236483912,up,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,935,2016-08-01T19:18:07Z,2016-08-01T20:11:59Z,2016-08-01T20:12:02Z,MERGED,True,815,3498,56,https://github.com/JoshEngebretson,NET Project Improvements (WIP),10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/935,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/935,"This pull adds new project templates for pure C# applications, creates a default .user file for generated AtomicProject solution which allows immediately running project from VS, and some early NETProjectSystem hooks.  It also will open a C# file in project in VS if it is available on system","This pull adds new project templates for pure C# applications, creates a default .user file for generated AtomicProject solution which allows immediately running project from VS, and some early NETProjectSystem hooks.  It also will open a C# file in project in VS if it is available on system",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,935,2016-08-01T19:18:07Z,2016-08-01T20:11:59Z,2016-08-01T20:12:02Z,MERGED,True,815,3498,56,https://github.com/JoshEngebretson,NET Project Improvements (WIP),10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/935,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/935#issuecomment-236679273,"This pull adds new project templates for pure C# applications, creates a default .user file for generated AtomicProject solution which allows immediately running project from VS, and some early NETProjectSystem hooks.  It also will open a C# file in project in VS if it is available on system","Oh, it also removes legacy JS editor stuff which has been replaced by Monaco",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,936,2016-08-02T00:17:16Z,2016-08-02T00:49:39Z,2016-08-02T00:49:41Z,MERGED,True,227,49,11,https://github.com/JoshEngebretson,Standalone Atomic Editor can handle C# projects with VS2015 installed,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/936,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/936,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,937,2016-08-02T02:53:04Z,2016-08-02T03:35:15Z,2016-08-02T03:35:16Z,MERGED,True,470,109,17,https://github.com/JoshEngebretson,Adding support for deploying managed applications,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/937,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/937,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,938,2016-08-02T05:14:13Z,2016-08-02T05:40:40Z,2016-08-02T05:40:42Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Fix for AtomicNETService path,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/938,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/938,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,941,2016-08-04T19:37:05Z,2016-08-06T19:50:11Z,2016-08-06T19:50:13Z,MERGED,True,4,0,1,https://github.com/LaraEngebretson,Added July's contributors to backers.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941,https://github.com/LaraEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,941,2016-08-04T19:37:05Z,2016-08-06T19:50:11Z,2016-08-06T19:50:13Z,MERGED,True,4,0,1,https://github.com/LaraEngebretson,Added July's contributors to backers.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941#issuecomment-237660260,,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,941,2016-08-04T19:37:05Z,2016-08-06T19:50:11Z,2016-08-06T19:50:13Z,MERGED,True,4,0,1,https://github.com/LaraEngebretson,Added July's contributors to backers.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/941#issuecomment-237666260,,"@AtomicBuildBot Add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,943,2016-08-06T18:53:36Z,2016-08-06T19:50:28Z,2016-08-09T10:13:57Z,MERGED,True,219011,141254,2850,https://github.com/JoshEngebretson,Urho3D 1.6 Update,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/943,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/943,"This PR updates Atomic's core and Third Party dependencies to Urho3D 1.6 (and some 1.5 updates which happened between the last pull in September and 1.5's release in November)
It also cleans up Atomic modifications (with few exceptions) to be placed between // ATOMIC BEGIN and // ATOMIC END code blocks, while adapting to the new macros and other features.
This is a pretty massive code delta between core and third party source updates, so likely some issues will crop up to handle in post :)
Relevant updates from Urho3D 1.6

Physically based rendering shaders, techniques, renderpaths and example materials / demo scene.
JSON load/save option for scenes, nodes and materials.
Tags added to nodes & UI elements.
EventProfiler subsystem.
Improved mouse mode handling on Emscripten.
Texture2DArray class added.
RibbonTrail class added.
Variance shadow mapping option.
Normal offset option as an alternative to reducing self-shadowing artifacts.
Arbitrary (freeform) vertex declarations. Legacy bitmask based vertex declarations emulated using them.
API-independent graphics class headers. Should ensure Urho library ABI compatibility between builds made on different APIs.
PackageFile support also on Android from within the .apk.
Optional additive animation blending mode. Based on calculating difference from the bind pose on the fly.
Directional billboard mode.
Fixed screen size option for billboards
Context-wide global variable implementation. Replaces the previous script-only global variables mechanism.
Aggregate initializers for containers.
C++11 binding to Urho events using std::bind.
C++11 variadic template version of SendEvent().
64-bit integer support in Serializer / Deserializer.
String + number operators.
Template versions of math functions.
Container class API improvements.
SharedPtr / WeakPtr implicit upcasting support.
Matrix2 class.
Rename escape key name to KEY_ESCAPE for consistency with SDL.
Make keycodes lowercase for consistency with SDL.
API to get joysticks by name.
Detect number of CPU cores on Emscripten if possible.
Utilize SDLActivity's get arguments feature.
Configurable minidump write location.
Engine parameter for enabling/disabling high DPI window mode.
Skip using the engine frame limiter on iOS when targeting 60 fps or above, to prevent erratic frame rate from sleep calls.
TmxFile2D & SpriteSheet2D improvements.
Sprite2D edge offset parameter for removing bleeding artifacts.
Drawable2D distance sorting.
Interpolation mode IM_NONE (no interpolation) added to ValueAnimation.
Segmented PhysicsWorld ray query for performance optimization.
Hit fraction added to physics cast results.
Allow custom collision shape subclasses & custom Bullet collision configuration.
Expanded data returned from NavigationMesh path queries.
Clone() added to Technique, ParticleEffect & ParticleEffect2D classes.
IntRect / IntVector2 setters & getters added to XMLElement.
TryAcquire() added to Mutex class.
Vector2 Angle() function added.
StringUtils ToInt() & ToUInt() take an optional base parameter.
Convenience function Context::CreateObject.
Convenience template version of ReleaseResource().
Allow Vector4 to substitute for Color in Variant::GetColor().
Additional Variant types can function as parameters for AngelScript function / method calls.
Improve FixedUpdate event to allow it to originate from either PhysicsWorld or PhysicsWorld2D.
Particle effect, animation playback & sound playback finish events.
CrowdAgent emits events also from its node.
Event sent after cloning a Node or Component is done.
b2Contact pointer added to PhysicsWorld2D collision events.
Allow updating AnimatedModel's bone bounding box manually.
Texture SetData() functions modified to use raw Image ptr for consistency and script bindings simplicity.
Graphics::SetDither() for controlling backbuffer dithering, relevant on mobiles with 16bit backbuffer.
Graphics::Draw() & DrawInstanced() overload with base vertex index.
Use glReadPixels() to get pixel data from rendertargets on GLES.
Highp precision used for GLES shadows.
Change deferred shaders to use proper world space to be easier to understand.
Send ElapsedTime uniform to UI rendering.
Allow overriding culling mode in a pass.
SendEvent renderpath command that can be used to interleave custom low-level rendering.
TRANSLUCENT lighting option in shaders, which takes absolute value of N dot L.
NOUV shader option added for D3D11 compatibility when model data does not contain UVs.
Buffer variants supported as shader parameters; will be interpreted as an array of floats.
View & inverse view uniforms supplied to shaders. Obsolete camera rotation uniform removed.
Skydome shader & technique added.
Optional object index vertex attribute that can be used by custom instancing schemes.
Optional additional per-instance Vector4 data, supplied to the shaders as extra texcoords.
Logging of D3D9 / D3D11 HRESULTs and proper failure check discipline for D3D object creation.
Improved occluder sorting.
Optimize to not render invisible View3Ds.
Optimized Image::Clear() for RGBA case.
Optimized SinCos() function added to speed up e.g. billboard calculations.
Optimized IsPowerOfTwo() function.
Optimization to amount of Frustum::UpdatePlanes() calls in rendering.
Update to Civetweb 1.7.
Update to GLEW 1.13.0.
Update to libcpuid 0.2.2.
Update to LuaJIT 2.1.0.
Update to LZ4 r131.
Update to nanodbc 2.12.4.
Update to pugixml 1.7.
Update to SDL 2.0.4.
Update to SQLite 3.13.0.
Update to stb_image 2.12, stb_image_write 1.02, stb_rect_pack 0.08 & stb_vorbis 1.09.
Generic ARM on Linux platform support.
Android NDK r11 & r12 support.
Reduce exposure to SDL headers from Urho's headers.
Fix various uninitialized variables.
Fix DirExists() on Android.
Fix potential crash when using MessageBox from C++.
Fix erroneous fog shader uniform being set in some rendering cases.
Fix use of deprecated usleep() function in favor of nanosleep().
Fix toggling mouse visibility right at application start.
Fix instancing in HLSL water shader.
Fix Android / iOS reporting mouse as grabbed.
Fix update event subscription in Material class.
Fix window getting maximized after fullscreen -> windowed change on Windows + SDL 2.0.4.
Fix bogus SDL joystick registration on Android.
Fix insertion of further drawable updates during threaded drawable update.
Fix Emscripten performance loss due to enabling SSE mode incorrectly.
Fix incorrect terrain index data generation.
Fix incorrect 2D drawable culling optimization.
Fix transform applying order for parented 2D rigidbodies.
Fix incorrect rendering caused by not updating shader parameter has when a material is cloned.
Fix FileWatcher getting in stuck on read() on Linux.
Fix WorldToHeightMap() in Terrain.
Fix 2D particle emitter potentially causing memory overwrite by emitting more particles than allocated.
Fix culling issues when non-master AnimatedModels are larger than the master.
Fix potentially incorrect viewport update order.
Fix D3D11 dynamic textures to use only 1 mip level, as more does not work.
Fix SDL Windows-specific mouse move internals not working in some cases (e.g. without Aero) leading to wrong relative mouse input.
Fix initial position of kinematic rigidbodies after being loaded.
Fix temporary AnimatedModel's bones to be temporary as well.
Fix SSE / ABI incompatibility related crashes with Bullet.
Fix HasSubscribedToEvent() missing from scripting.
Fix UI scrollbar snap epsilon attribute default value.
Fix String::DecodeUTF16().
Fix CustomGeometry bounding box update when committing new data.
Fix sprite textures to use clamp addressing by default instead of wrap.
Fix depth test potentially disabled in OpenGL by third party programs such as MSI Afterburner (re-enable every frame.)
Fix writing rendertarget inverse size uniforms incorrectly (Vector2 instead of Vector4.)
Fix off by one error in mipmap data size counting.
Fix PhysicsWorld::GetRigidBodies() to use immediate contact test for static bodies.
Fix sampling of depth buffer in read-only mode on D3D11.
Fix ForwardDepth renderpath potentially missing depth clear on OpenGL.
Fix possible crash issue when exiting engine with background loaded resources still in queue.
Fix issues with parented rigidbodies when moving them from code.
Fix math class equality operator in SSE builds on specific Visual Studio versions.
Fix ScreenToWorldPoint() to return the specified Z distance.
Fix vegetation shadow shader on D3D11.
Fix Application.h to be usable without other include files.
Fix lighting interpolator order in D3D11 shaders.
Fix node's Z coordinate not retained in 2D physics movement.
Fix potential crash and performance issues in Octree raycasts by making them non-threaded; in practice the spin-up time for work items could override any threading benefits.
Fix point fill mode on D3D11.
Fix input focus loss when using an external window handle.
Fix ABI incompatibility in BoundingBox class depending on URHO3D_SSE flag.","This PR updates Atomic's core and Third Party dependencies to Urho3D 1.6 (and some 1.5 updates which happened between the last pull in September and 1.5's release in November)
It also cleans up Atomic modifications (with few exceptions) to be placed between // ATOMIC BEGIN and // ATOMIC END code blocks, while adapting to the new macros and other features.
This is a pretty massive code delta between core and third party source updates, so likely some issues will crop up to handle in post :)
Relevant updates from Urho3D 1.6

Physically based rendering shaders, techniques, renderpaths and example materials / demo scene.
JSON load/save option for scenes, nodes and materials.
Tags added to nodes & UI elements.
EventProfiler subsystem.
Improved mouse mode handling on Emscripten.
Texture2DArray class added.
RibbonTrail class added.
Variance shadow mapping option.
Normal offset option as an alternative to reducing self-shadowing artifacts.
Arbitrary (freeform) vertex declarations. Legacy bitmask based vertex declarations emulated using them.
API-independent graphics class headers. Should ensure Urho library ABI compatibility between builds made on different APIs.
PackageFile support also on Android from within the .apk.
Optional additive animation blending mode. Based on calculating difference from the bind pose on the fly.
Directional billboard mode.
Fixed screen size option for billboards
Context-wide global variable implementation. Replaces the previous script-only global variables mechanism.
Aggregate initializers for containers.
C++11 binding to Urho events using std::bind.
C++11 variadic template version of SendEvent().
64-bit integer support in Serializer / Deserializer.
String + number operators.
Template versions of math functions.
Container class API improvements.
SharedPtr / WeakPtr implicit upcasting support.
Matrix2 class.
Rename escape key name to KEY_ESCAPE for consistency with SDL.
Make keycodes lowercase for consistency with SDL.
API to get joysticks by name.
Detect number of CPU cores on Emscripten if possible.
Utilize SDLActivity's get arguments feature.
Configurable minidump write location.
Engine parameter for enabling/disabling high DPI window mode.
Skip using the engine frame limiter on iOS when targeting 60 fps or above, to prevent erratic frame rate from sleep calls.
TmxFile2D & SpriteSheet2D improvements.
Sprite2D edge offset parameter for removing bleeding artifacts.
Drawable2D distance sorting.
Interpolation mode IM_NONE (no interpolation) added to ValueAnimation.
Segmented PhysicsWorld ray query for performance optimization.
Hit fraction added to physics cast results.
Allow custom collision shape subclasses & custom Bullet collision configuration.
Expanded data returned from NavigationMesh path queries.
Clone() added to Technique, ParticleEffect & ParticleEffect2D classes.
IntRect / IntVector2 setters & getters added to XMLElement.
TryAcquire() added to Mutex class.
Vector2 Angle() function added.
StringUtils ToInt() & ToUInt() take an optional base parameter.
Convenience function Context::CreateObject.
Convenience template version of ReleaseResource().
Allow Vector4 to substitute for Color in Variant::GetColor().
Additional Variant types can function as parameters for AngelScript function / method calls.
Improve FixedUpdate event to allow it to originate from either PhysicsWorld or PhysicsWorld2D.
Particle effect, animation playback & sound playback finish events.
CrowdAgent emits events also from its node.
Event sent after cloning a Node or Component is done.
b2Contact pointer added to PhysicsWorld2D collision events.
Allow updating AnimatedModel's bone bounding box manually.
Texture SetData() functions modified to use raw Image ptr for consistency and script bindings simplicity.
Graphics::SetDither() for controlling backbuffer dithering, relevant on mobiles with 16bit backbuffer.
Graphics::Draw() & DrawInstanced() overload with base vertex index.
Use glReadPixels() to get pixel data from rendertargets on GLES.
Highp precision used for GLES shadows.
Change deferred shaders to use proper world space to be easier to understand.
Send ElapsedTime uniform to UI rendering.
Allow overriding culling mode in a pass.
SendEvent renderpath command that can be used to interleave custom low-level rendering.
TRANSLUCENT lighting option in shaders, which takes absolute value of N dot L.
NOUV shader option added for D3D11 compatibility when model data does not contain UVs.
Buffer variants supported as shader parameters; will be interpreted as an array of floats.
View & inverse view uniforms supplied to shaders. Obsolete camera rotation uniform removed.
Skydome shader & technique added.
Optional object index vertex attribute that can be used by custom instancing schemes.
Optional additional per-instance Vector4 data, supplied to the shaders as extra texcoords.
Logging of D3D9 / D3D11 HRESULTs and proper failure check discipline for D3D object creation.
Improved occluder sorting.
Optimize to not render invisible View3Ds.
Optimized Image::Clear() for RGBA case.
Optimized SinCos() function added to speed up e.g. billboard calculations.
Optimized IsPowerOfTwo() function.
Optimization to amount of Frustum::UpdatePlanes() calls in rendering.
Update to Civetweb 1.7.
Update to GLEW 1.13.0.
Update to libcpuid 0.2.2.
Update to LuaJIT 2.1.0.
Update to LZ4 r131.
Update to nanodbc 2.12.4.
Update to pugixml 1.7.
Update to SDL 2.0.4.
Update to SQLite 3.13.0.
Update to stb_image 2.12, stb_image_write 1.02, stb_rect_pack 0.08 & stb_vorbis 1.09.
Generic ARM on Linux platform support.
Android NDK r11 & r12 support.
Reduce exposure to SDL headers from Urho's headers.
Fix various uninitialized variables.
Fix DirExists() on Android.
Fix potential crash when using MessageBox from C++.
Fix erroneous fog shader uniform being set in some rendering cases.
Fix use of deprecated usleep() function in favor of nanosleep().
Fix toggling mouse visibility right at application start.
Fix instancing in HLSL water shader.
Fix Android / iOS reporting mouse as grabbed.
Fix update event subscription in Material class.
Fix window getting maximized after fullscreen -> windowed change on Windows + SDL 2.0.4.
Fix bogus SDL joystick registration on Android.
Fix insertion of further drawable updates during threaded drawable update.
Fix Emscripten performance loss due to enabling SSE mode incorrectly.
Fix incorrect terrain index data generation.
Fix incorrect 2D drawable culling optimization.
Fix transform applying order for parented 2D rigidbodies.
Fix incorrect rendering caused by not updating shader parameter has when a material is cloned.
Fix FileWatcher getting in stuck on read() on Linux.
Fix WorldToHeightMap() in Terrain.
Fix 2D particle emitter potentially causing memory overwrite by emitting more particles than allocated.
Fix culling issues when non-master AnimatedModels are larger than the master.
Fix potentially incorrect viewport update order.
Fix D3D11 dynamic textures to use only 1 mip level, as more does not work.
Fix SDL Windows-specific mouse move internals not working in some cases (e.g. without Aero) leading to wrong relative mouse input.
Fix initial position of kinematic rigidbodies after being loaded.
Fix temporary AnimatedModel's bones to be temporary as well.
Fix SSE / ABI incompatibility related crashes with Bullet.
Fix HasSubscribedToEvent() missing from scripting.
Fix UI scrollbar snap epsilon attribute default value.
Fix String::DecodeUTF16().
Fix CustomGeometry bounding box update when committing new data.
Fix sprite textures to use clamp addressing by default instead of wrap.
Fix depth test potentially disabled in OpenGL by third party programs such as MSI Afterburner (re-enable every frame.)
Fix writing rendertarget inverse size uniforms incorrectly (Vector2 instead of Vector4.)
Fix off by one error in mipmap data size counting.
Fix PhysicsWorld::GetRigidBodies() to use immediate contact test for static bodies.
Fix sampling of depth buffer in read-only mode on D3D11.
Fix ForwardDepth renderpath potentially missing depth clear on OpenGL.
Fix possible crash issue when exiting engine with background loaded resources still in queue.
Fix issues with parented rigidbodies when moving them from code.
Fix math class equality operator in SSE builds on specific Visual Studio versions.
Fix ScreenToWorldPoint() to return the specified Z distance.
Fix vegetation shadow shader on D3D11.
Fix Application.h to be usable without other include files.
Fix lighting interpolator order in D3D11 shaders.
Fix node's Z coordinate not retained in 2D physics movement.
Fix potential crash and performance issues in Octree raycasts by making them non-threaded; in practice the spin-up time for work items could override any threading benefits.
Fix point fill mode on D3D11.
Fix input focus loss when using an external window handle.
Fix ABI incompatibility in BoundingBox class depending on URHO3D_SSE flag.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,945,2016-08-06T20:02:22Z,2016-08-06T20:02:52Z,2016-08-06T20:03:01Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Updating submodule,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/945,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/945,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,947,2016-08-08T18:09:29Z,2016-08-08T19:16:37Z,2016-08-08T19:16:39Z,MERGED,True,17,86,7,https://github.com/JoshEngebretson,Backing out string concat API,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/947,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/947,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,948,2016-08-10T07:42:12Z,2016-08-11T16:07:38Z,2016-08-11T16:07:38Z,MERGED,True,1,1,1,https://github.com/EternalXY,fix setting PostUpdate event mask in JSComponent,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948,https://github.com/EternalXY,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948,"Fix setting PostUpdate event mask in JSComponent
Without this patch, disabling the PostUpdate event does not seem to work for JS components, and (according to the Chrome profiler for the Web version) this can add up to a significant % when there are a lot of nodes.","Fix setting PostUpdate event mask in JSComponent
Without this patch, disabling the PostUpdate event does not seem to work for JS components, and (according to the Chrome profiler for the Web version) this can add up to a significant % when there are a lot of nodes.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,948,2016-08-10T07:42:12Z,2016-08-11T16:07:38Z,2016-08-11T16:07:38Z,MERGED,True,1,1,1,https://github.com/EternalXY,fix setting PostUpdate event mask in JSComponent,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948#issuecomment-238790141,"Fix setting PostUpdate event mask in JSComponent
Without this patch, disabling the PostUpdate event does not seem to work for JS components, and (according to the Chrome profiler for the Web version) this can add up to a significant % when there are a lot of nodes.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,948,2016-08-10T07:42:12Z,2016-08-11T16:07:38Z,2016-08-11T16:07:38Z,MERGED,True,1,1,1,https://github.com/EternalXY,fix setting PostUpdate event mask in JSComponent,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948#issuecomment-238904730,"Fix setting PostUpdate event mask in JSComponent
Without this patch, disabling the PostUpdate event does not seem to work for JS components, and (according to the Chrome profiler for the Web version) this can add up to a significant % when there are a lot of nodes.","Thanks for the fix, can you add yourself to AUTHORS.md?
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/AUTHORS.md
@AtomicBuildBot Ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,948,2016-08-10T07:42:12Z,2016-08-11T16:07:38Z,2016-08-11T16:07:38Z,MERGED,True,1,1,1,https://github.com/EternalXY,fix setting PostUpdate event mask in JSComponent,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/948#issuecomment-239208680,"Fix setting PostUpdate event mask in JSComponent
Without this patch, disabling the PostUpdate event does not seem to work for JS components, and (according to the Chrome profiler for the Web version) this can add up to a significant % when there are a lot of nodes.","Ok, see you added to authors in the other PR, I'll land this one. Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,949,2016-08-10T15:38:28Z,2016-08-10T16:52:41Z,2016-08-10T16:52:43Z,MERGED,True,25,0,1,https://github.com/JoshEngebretson,Adding missing CONTRIBUTION_LICENSE.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/949,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/949,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,950,2016-08-10T19:46:19Z,2016-08-10T20:14:01Z,2016-08-10T20:14:03Z,MERGED,True,4,0,1,https://github.com/JoshEngebretson,Add -Xlinker -no_deduplicate to linker settings for OSX makefiles build,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/950,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/950,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,951,2016-08-10T21:37:33Z,2016-08-11T02:37:42Z,2016-08-11T13:28:31Z,MERGED,True,228,55,14,https://github.com/JimMarlowe,Color History and issue 914 fixes,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951,"This PR is for the remaining #914 items, and adding color history (with preferences persistence) to the ColorChooser.","This PR is for the remaining #914 items, and adding color history (with preferences persistence) to the ColorChooser.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,951,2016-08-10T21:37:33Z,2016-08-11T02:37:42Z,2016-08-11T13:28:31Z,MERGED,True,228,55,14,https://github.com/JimMarlowe,Color History and issue 914 fixes,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951#issuecomment-239020301,"This PR is for the remaining #914 items, and adding color history (with preferences persistence) to the ColorChooser.","Good stuff, I have a couple notes on the PR when you have time for a gander üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,951,2016-08-10T21:37:33Z,2016-08-11T02:37:42Z,2016-08-11T13:28:31Z,MERGED,True,228,55,14,https://github.com/JimMarlowe,Color History and issue 914 fixes,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/951#issuecomment-239059853,"This PR is for the remaining #914 items, and adding color history (with preferences persistence) to the ColorChooser.","Excellent, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,953,2016-08-11T10:21:26Z,2016-08-12T06:54:31Z,2016-08-12T06:54:31Z,CLOSED,False,49,0,2,https://github.com/EternalXY,provide some basic CEF cursor types in WebView; updated AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953,https://github.com/EternalXY,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953,"Provide some mappings between SDL and CEF cursors over a WebView, so that the WebView feels more interactive/real.
Update AUTHORS.md","Provide some mappings between SDL and CEF cursors over a WebView, so that the WebView feels more interactive/real.
Update AUTHORS.md",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,953,2016-08-11T10:21:26Z,2016-08-12T06:54:31Z,2016-08-12T06:54:31Z,CLOSED,False,49,0,2,https://github.com/EternalXY,provide some basic CEF cursor types in WebView; updated AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953#issuecomment-239123919,"Provide some mappings between SDL and CEF cursors over a WebView, so that the WebView feels more interactive/real.
Update AUTHORS.md",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,953,2016-08-11T10:21:26Z,2016-08-12T06:54:31Z,2016-08-12T06:54:31Z,CLOSED,False,49,0,2,https://github.com/EternalXY,provide some basic CEF cursor types in WebView; updated AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953,https://github.com/EternalXY,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/953#issuecomment-239359773,"Provide some mappings between SDL and CEF cursors over a WebView, so that the WebView feels more interactive/real.
Update AUTHORS.md","You are right, system cursors need to be freed in SDL, that would make this change a lot more intrustive than I had hoped.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,955,2016-08-12T02:11:06Z,2016-08-12T15:23:01Z,2016-08-12T15:23:05Z,MERGED,True,62,11,9,https://github.com/shaddockh,UIEditFields auto-select contents on enter,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955,"Fixes #700 and #356
This PR provides the following enhancements to the UIEditField

If you tab into it from another field, the contents get auto selected so you can quickly type a new value
If you click-select the field, the contents get auto selected so you can quickly type a new value
If a field is already focused and auto selected and you click into it again, the auto-selection will disappear and the caret will appear where you clicked

Some issues I ran across:
It appears that the OnFocusedChange event in the UIEditField does not get called when the widget is getting created and when the autofocus:1 value is specified in the tb.txt field.  The OnFocusedChange event is getting fired by the underlying TB widget, but may be getting triggered too early and the UIEditField doesn't capture it.
To get around this, I made a modification to the new project dialog to remove the autofocus tag and programmatically set focus to the field in the code on creation.  This behaves as expected.  Let me know if this is an acceptable solution and I can look at other places where the auto-focus is being used or if there needs to be some low level research into why that event isn't getting bubbled up.","Fixes #700 and #356
This PR provides the following enhancements to the UIEditField

If you tab into it from another field, the contents get auto selected so you can quickly type a new value
If you click-select the field, the contents get auto selected so you can quickly type a new value
If a field is already focused and auto selected and you click into it again, the auto-selection will disappear and the caret will appear where you clicked

Some issues I ran across:
It appears that the OnFocusedChange event in the UIEditField does not get called when the widget is getting created and when the autofocus:1 value is specified in the tb.txt field.  The OnFocusedChange event is getting fired by the underlying TB widget, but may be getting triggered too early and the UIEditField doesn't capture it.
To get around this, I made a modification to the new project dialog to remove the autofocus tag and programmatically set focus to the field in the code on creation.  This behaves as expected.  Let me know if this is an acceptable solution and I can look at other places where the auto-focus is being used or if there needs to be some low level research into why that event isn't getting bubbled up.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,955,2016-08-12T02:11:06Z,2016-08-12T15:23:01Z,2016-08-12T15:23:05Z,MERGED,True,62,11,9,https://github.com/shaddockh,UIEditFields auto-select contents on enter,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955#issuecomment-239347786,"Fixes #700 and #356
This PR provides the following enhancements to the UIEditField

If you tab into it from another field, the contents get auto selected so you can quickly type a new value
If you click-select the field, the contents get auto selected so you can quickly type a new value
If a field is already focused and auto selected and you click into it again, the auto-selection will disappear and the caret will appear where you clicked

Some issues I ran across:
It appears that the OnFocusedChange event in the UIEditField does not get called when the widget is getting created and when the autofocus:1 value is specified in the tb.txt field.  The OnFocusedChange event is getting fired by the underlying TB widget, but may be getting triggered too early and the UIEditField doesn't capture it.
To get around this, I made a modification to the new project dialog to remove the autofocus tag and programmatically set focus to the field in the code on creation.  This behaves as expected.  Let me know if this is an acceptable solution and I can look at other places where the auto-focus is being used or if there needs to be some low level research into why that event isn't getting bubbled up.","Looks good!  I commented about the new member variable firstFocusFlag_ which needs to be initialized and can probably be private.  I think the focus change event workaround is ok, maybe file an issue for this though since TB is firing the event and our widget wrapper isn't catching it?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,955,2016-08-12T02:11:06Z,2016-08-12T15:23:01Z,2016-08-12T15:23:05Z,MERGED,True,62,11,9,https://github.com/shaddockh,UIEditFields auto-select contents on enter,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/955#issuecomment-239476246,"Fixes #700 and #356
This PR provides the following enhancements to the UIEditField

If you tab into it from another field, the contents get auto selected so you can quickly type a new value
If you click-select the field, the contents get auto selected so you can quickly type a new value
If a field is already focused and auto selected and you click into it again, the auto-selection will disappear and the caret will appear where you clicked

Some issues I ran across:
It appears that the OnFocusedChange event in the UIEditField does not get called when the widget is getting created and when the autofocus:1 value is specified in the tb.txt field.  The OnFocusedChange event is getting fired by the underlying TB widget, but may be getting triggered too early and the UIEditField doesn't capture it.
To get around this, I made a modification to the new project dialog to remove the autofocus tag and programmatically set focus to the field in the code on creation.  This behaves as expected.  Let me know if this is an acceptable solution and I can look at other places where the auto-focus is being used or if there needs to be some low level research into why that event isn't getting bubbled up.","Awesome, thanks!  landing: ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/Kobusvdwalt,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-239893005,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/AtomicBuildBot,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-239902966,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-239907166,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","Thanks! This looks pretty good.
I just scanned it over and left a few comments in the source.  In addition, one of the things that the TypeScriptLanguageExtension does when it loads up is it will look for a tsconfig.json file in the root of the project and use that instead of creating an in-memory one.  You will want to verify that the in-editor TypeScript completion and compilation still works when you add the new tsconfig.json file.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-239925395,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/Kobusvdwalt,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240024550,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","Im not sure how to fix the refernces that were deleted. I cloned the original repo and it seems to be exactly the same.
Edit
Never mind its fixed now :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240077399,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","Thanks, this looks good. üëç  I'll run it through a couple tests this evening and then it should be good to go.
@JoshEngebretson I'll create an issue to track and verify that all of the file calls can support native forward slashes on all platforms w/o the need for Atomic.addTrailingSlash.  That would definitely clean up some code.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240142232,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","@Kobusvdwalt Good work, I would like to figure out a way to handle the tsconfig.json better, it is a source of shenanigans as editors like to change it, even if the contents are just reordered.  It can be a problem too if a script package isn't compiled on a specific platform, etc.
@shaddockh Thanks for reviewing and testing üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240282339,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","I tried this out with Atom and made sure that Atom with the TypeStrong TypeScript extension works as well as the built-in compiler.
In order for this to work, I made a note above about nesting the compilerOptions node under the root.
The other change that needs to be done to make this work is at the top of the file in the defaultCompilerOptions, the property: noLib: true needs to be set to noLib: false.
Doing this didn't affect the Atomic Game Engine, but w/o it, Atom complained about missing libraries.
The other note that I had was the location of the Atomic.d.ts.  I'm seeing some movement in the TypeScript community to place these under a typings folder at the root of your project.  This is the location that https://github.com/typings/typings uses to store type definitions from various projects.
So maybe drop the Atomic.d.ts into typings/main/ambient/atomicgameengine/Atomic.d.ts?
This way the Atomic.d.ts file is in the right place and if you end up using the typings tool to bring in other libraries, they will all fall under the same folder structure.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/Kobusvdwalt,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240388296,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","@shaddockh Cool thanks !!
To do :
I will nest the compiler options under its own node.
I will change the noLib: true to noLib: false.
I will move the Atomic.d.ts into TypeScript/typings.
Its interesting that Atom complained. I also used TypeStrong and it works perfectly. I tested with VS Code too fwiw.
PS : Atom is so slow compared to VS Code but the overall functionality is much better.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240395631,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","@Kobusvdwalt just a slight correction, I would suggest moving the Atomic.d.ts just under <project root>/typings to align with how standard TypeScript projects are structured.",True,{'THUMBS_UP': ['https://github.com/Kobusvdwalt']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-240470287,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)",<project root>/typings will make a nice sibling to <project root>/AtomicNET üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-241139770,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","Just a couple final cosmetic things that need to be fixed and this is ready to land.

lint error
pretty print the output of the JSON

I was able to load this up directly into Atom and compile w/o issue.  For VSCode, there is a little more setup required.  I needed to set up a VSCode task in order to do this.  That's all documented on other sites so that may just be an exercise for the user (or an entry in the Q&A site)
Good work!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/Kobusvdwalt,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-241247442,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","@shaddockh I am not sure what you meant by lint error. Could you elaborate ?
I am done with the pretty print.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-241258719,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","We use a linter to catch a handful of errors before you start running the code as well as to retain consistency in the format of the code.  You can see: https://palantir.github.io/tslint/ for the tool that is used during the build process.
The lint error I was referencing is on line 344/345 in reference to the curly brace not being on the same line as the function.  If you scroll up in this conversation, you'll see where I called it out in one of the code line comments.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,960,2016-08-15T18:50:42Z,2016-08-22T11:03:50Z,2016-08-22T11:03:50Z,MERGED,True,28,0,2,https://github.com/Kobusvdwalt,Generate TypeScript project files for external editors,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960,https://github.com/shaddockh,16,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/960#issuecomment-241380592,"If you create a TypeScript project and you go to Developer>>Plugins>>TypeScript>>Generate External Editor Project the editor will create a tsconfig.json file in the root of the project and copy its Atomic.d.ts file into a folder ""TypeScript"" in the root of the project. This means that if you open the project in VS Code or Atom it will have autocomplete.
I am new to working on open source stuff so feel free to criticize as much as you want :)","Excellent!  Looks good.
Landing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,962,2016-08-15T23:25:54Z,2016-08-15T23:53:54Z,2016-08-15T23:53:57Z,MERGED,True,266,14,11,https://github.com/JoshEngebretson,Addressing Visual Studio C# integration issues in 952,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/962,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/962,"Squashed commit:
[5b710af] Adding asset scan begin/end events, new asset event, regenerate C# solution before opening generated C# script/component
[2d90270] Switch C# project generator to use relative paths for source files and post build assembly copy
[16f244c] Binary assemblies in Resources will now be added to generated project assembly, project binary assemblies can be in any path and will be resolved at runtime","Squashed commit:
[5b710af] Adding asset scan begin/end events, new asset event, regenerate C# solution before opening generated C# script/component
[2d90270] Switch C# project generator to use relative paths for source files and post build assembly copy
[16f244c] Binary assemblies in Resources will now be added to generated project assembly, project binary assemblies can be in any path and will be resolved at runtime",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,963,2016-08-16T01:20:17Z,2016-08-16T01:49:23Z,2016-08-16T01:49:26Z,MERGED,True,48,0,4,https://github.com/JoshEngebretson,"When JSEventHelper is GC'd clear the event handlers, added method to remove event subscriptions by receiver",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/963,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/963,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,965,2016-08-16T18:57:00Z,2016-08-17T00:51:21Z,2016-08-17T00:51:21Z,MERGED,True,137,4,6,https://github.com/JimMarlowe,Joystick Rumble support 954,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/965,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/965,"This PR adds rumble support for joysticks and game controllers. It also enables user configuration of unhandled game controllers to make them behave in a standardized way.
The rumble support is self initializing, the user does not have to make any calls to use the rumble. There is one convenience call to ask if rumble is supported on the joystick/controller. The main call is :
void JoystickRumble(unsigned int id, float strength, unsigned int length); /// produce rumble
The id argument is what gets passed into the event handlers as the JoystickId, not the index, though they are often the same.
The strength argument is a float from 0.0 to 1.0 and is the magnitude of the rumble event.
The length argument is the number of milliseconds to play the rumble event.
The test program and example usage are delayed until the joystick event handlers stabilize.","This PR adds rumble support for joysticks and game controllers. It also enables user configuration of unhandled game controllers to make them behave in a standardized way.
The rumble support is self initializing, the user does not have to make any calls to use the rumble. There is one convenience call to ask if rumble is supported on the joystick/controller. The main call is :
void JoystickRumble(unsigned int id, float strength, unsigned int length); /// produce rumble
The id argument is what gets passed into the event handlers as the JoystickId, not the index, though they are often the same.
The strength argument is a float from 0.0 to 1.0 and is the magnitude of the rumble event.
The length argument is the number of milliseconds to play the rumble event.
The test program and example usage are delayed until the joystick event handlers stabilize.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,965,2016-08-16T18:57:00Z,2016-08-17T00:51:21Z,2016-08-17T00:51:21Z,MERGED,True,137,4,6,https://github.com/JimMarlowe,Joystick Rumble support 954,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/965,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/965#issuecomment-240283565,"This PR adds rumble support for joysticks and game controllers. It also enables user configuration of unhandled game controllers to make them behave in a standardized way.
The rumble support is self initializing, the user does not have to make any calls to use the rumble. There is one convenience call to ask if rumble is supported on the joystick/controller. The main call is :
void JoystickRumble(unsigned int id, float strength, unsigned int length); /// produce rumble
The id argument is what gets passed into the event handlers as the JoystickId, not the index, though they are often the same.
The strength argument is a float from 0.0 to 1.0 and is the magnitude of the rumble event.
The length argument is the number of milliseconds to play the rumble event.
The test program and example usage are delayed until the joystick event handlers stabilize.","Great work, very clean üëç
I have a note about a possible follow up, though LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,966,2016-08-17T00:45:05Z,2016-08-17T01:13:51Z,2016-08-17T01:13:53Z,MERGED,True,400,269,26,https://github.com/JoshEngebretson,"Script lifetime improvements, fixes for recent update",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/966,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/966,"This is a pretty major update to JS object lifetime, which cleans up a number of systems most notably UI widgets and Nodes  I have tested with existing projects and examined lifetime using the new JSVM:: DumpJavascriptObjects() method.  Though, script lifetimes are tricky and there are likely bugs which will need fixing.
There are a number of bugs also addressed with the recent Urho 1.6 update.","This is a pretty major update to JS object lifetime, which cleans up a number of systems most notably UI widgets and Nodes  I have tested with existing projects and examined lifetime using the new JSVM:: DumpJavascriptObjects() method.  Though, script lifetimes are tricky and there are likely bugs which will need fixing.
There are a number of bugs also addressed with the recent Urho 1.6 update.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,968,2016-08-18T02:30:04Z,2016-08-18T03:03:09Z,2016-08-18T03:03:11Z,MERGED,True,5,5,3,https://github.com/JoshEngebretson,Update JSComponent to used SharedPtr,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/968,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/968,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,969,2016-08-18T02:53:55Z,2016-08-18T03:44:15Z,2016-08-18T03:44:19Z,MERGED,True,61,1,2,https://github.com/shaddockh,Atomic.d.ts updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/969,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/969,"Some updates to the Atomic.d.ts

fixed node.getComponent definition to match the actual signature of node.getComponent
exposed node.getParentComponent
added Type definition for Ray
added Type definition for RayQueryResult
exposed Camera.getScreenRay
exposed Octree.rayCastSingle
exposed Octree.rayCast","Some updates to the Atomic.d.ts

fixed node.getComponent definition to match the actual signature of node.getComponent
exposed node.getParentComponent
added Type definition for Ray
added Type definition for RayQueryResult
exposed Camera.getScreenRay
exposed Octree.rayCastSingle
exposed Octree.rayCast",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,969,2016-08-18T02:53:55Z,2016-08-18T03:44:15Z,2016-08-18T03:44:19Z,MERGED,True,61,1,2,https://github.com/shaddockh,Atomic.d.ts updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/969,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/969#issuecomment-240616397,"Some updates to the Atomic.d.ts

fixed node.getComponent definition to match the actual signature of node.getComponent
exposed node.getParentComponent
added Type definition for Ray
added Type definition for RayQueryResult
exposed Camera.getScreenRay
exposed Octree.rayCastSingle
exposed Octree.rayCast","Great, thanks, landing üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,970,2016-08-18T18:43:34Z,2016-08-19T18:43:56Z,2016-08-19T20:56:38Z,MERGED,True,15,0,2,https://github.com/JimMarlowe,Add joystick cursor control,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/970,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/970,"This PR adds 2 functions which will allow the joystick/game controller the ability to move the mouse cursor and do a mouse button click. With these, you can operate most of the UI controls, and operate the game completely from the joystick.
I'll ""fix"" space game with this ability, in addition to playing the game.","This PR adds 2 functions which will allow the joystick/game controller the ability to move the mouse cursor and do a mouse button click. With these, you can operate most of the UI controls, and operate the game completely from the joystick.
I'll ""fix"" space game with this ability, in addition to playing the game.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,970,2016-08-18T18:43:34Z,2016-08-19T18:43:56Z,2016-08-19T20:56:38Z,MERGED,True,15,0,2,https://github.com/JimMarlowe,Add joystick cursor control,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/970,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/970#issuecomment-241101600,"This PR adds 2 functions which will allow the joystick/game controller the ability to move the mouse cursor and do a mouse button click. With these, you can operate most of the UI controls, and operate the game completely from the joystick.
I'll ""fix"" space game with this ability, in addition to playing the game.",Nice add üëç  LANDING,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,971,2016-08-19T01:45:34Z,2016-08-19T18:46:28Z,2016-08-19T18:46:30Z,MERGED,True,10,2,2,https://github.com/shaddockh,Update to latest version of TypeDoc,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/971,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/971,"The issue that wasn't allowing the TypeDoc documentation to be generated with a custom theme has been resolved ( TypeStrong/typedoc#227 )
This change does the following

Allows for the latest TypeDoc to be pulled which uses the latest TypeScript
adds a fix for the latest NPM so that the node_modules get put in the right place","The issue that wasn't allowing the TypeDoc documentation to be generated with a custom theme has been resolved ( TypeStrong/typedoc#227 )
This change does the following

Allows for the latest TypeDoc to be pulled which uses the latest TypeScript
adds a fix for the latest NPM so that the node_modules get put in the right place",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,971,2016-08-19T01:45:34Z,2016-08-19T18:46:28Z,2016-08-19T18:46:30Z,MERGED,True,10,2,2,https://github.com/shaddockh,Update to latest version of TypeDoc,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/971,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/971#issuecomment-241102283,"The issue that wasn't allowing the TypeDoc documentation to be generated with a custom theme has been resolved ( TypeStrong/typedoc#227 )
This change does the following

Allows for the latest TypeDoc to be pulled which uses the latest TypeScript
adds a fix for the latest NPM so that the node_modules get put in the right place","Great, would be good to have master docs available too for perusal online.  Just filing that in consciousness for now, LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,973,2016-08-19T21:15:17Z,2016-08-19T21:46:01Z,2016-08-19T21:46:03Z,MERGED,True,6,2,1,https://github.com/JoshEngebretson,"Disable call to set DPI awareness, which isn't stock in SDL and has issues",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/973,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/973,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,974,2016-08-20T01:43:07Z,2016-08-24T02:25:21Z,2016-08-24T02:25:21Z,MERGED,True,5,5,2,https://github.com/benwolf,Fix issue #907,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974,https://github.com/benwolf,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974,Deals with issue #907 also changed it in the help menu.,Deals with issue #907 also changed it in the help menu.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,974,2016-08-20T01:43:07Z,2016-08-24T02:25:21Z,2016-08-24T02:25:21Z,MERGED,True,5,5,2,https://github.com/benwolf,Fix issue #907,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974#issuecomment-241171040,Deals with issue #907 also changed it in the help menu.,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,974,2016-08-20T01:43:07Z,2016-08-24T02:25:21Z,2016-08-24T02:25:21Z,MERGED,True,5,5,2,https://github.com/benwolf,Fix issue #907,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974#issuecomment-241171631,Deals with issue #907 also changed it in the help menu.,@AtomicBuildBot ok to test.  add to whitelist.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,974,2016-08-20T01:43:07Z,2016-08-24T02:25:21Z,2016-08-24T02:25:21Z,MERGED,True,5,5,2,https://github.com/benwolf,Fix issue #907,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/974#issuecomment-241939954,Deals with issue #907 also changed it in the help menu.,"Great, thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,977,2016-08-21T20:04:28Z,2016-08-21T21:09:44Z,2016-08-21T21:09:46Z,MERGED,True,314,108,26,https://github.com/JoshEngebretson,AtomicNET support for OSX/Linux including Xamarin Studio integration,9,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/977,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/977,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,978,2016-08-22T00:07:53Z,2016-08-22T01:57:15Z,2016-08-22T04:05:38Z,MERGED,True,2,3,2,https://github.com/JimMarlowe,Add ribbontrail component,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/978,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/978,This PR ads the RibbonTrail component from Urho3D 1.6 into the Atomic Editor,This PR ads the RibbonTrail component from Urho3D 1.6 into the Atomic Editor,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,978,2016-08-22T00:07:53Z,2016-08-22T01:57:15Z,2016-08-22T04:05:38Z,MERGED,True,2,3,2,https://github.com/JimMarlowe,Add ribbontrail component,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/978,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/978#issuecomment-241299064,This PR ads the RibbonTrail component from Urho3D 1.6 into the Atomic Editor,"Great, landing ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,981,2016-08-24T01:18:46Z,2016-08-24T02:24:54Z,2016-08-24T02:24:55Z,MERGED,True,963,162,38,https://github.com/JoshEngebretson,"C# support for Vector/PODVector of RefCounted return and parameter values, C# support for method overloading",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/981,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/981,This PR also introduces specific skip methods for different language bindings,This PR also introduces specific skip methods for different language bindings,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,982,2016-08-24T19:12:39Z,2016-08-24T19:59:29Z,2016-08-24T20:40:46Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,Fix linux crash on player exit,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/982,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/982,"This pr fixes the editor crash when the player is exited. It was tracked down to an optimization issue with g++ -O3 and VectorBuffer::Write() in a particular situation. This call was changed to VectorBuffer::SetData(), which will perform the same action for filling a new VectorBuffer, and does not incur the -O3 optimization problem.","This pr fixes the editor crash when the player is exited. It was tracked down to an optimization issue with g++ -O3 and VectorBuffer::Write() in a particular situation. This call was changed to VectorBuffer::SetData(), which will perform the same action for filling a new VectorBuffer, and does not incur the -O3 optimization problem.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,982,2016-08-24T19:12:39Z,2016-08-24T19:59:29Z,2016-08-24T20:40:46Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,Fix linux crash on player exit,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/982,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/982#issuecomment-242189070,"This pr fixes the editor crash when the player is exited. It was tracked down to an optimization issue with g++ -O3 and VectorBuffer::Write() in a particular situation. This call was changed to VectorBuffer::SetData(), which will perform the same action for filling a new VectorBuffer, and does not incur the -O3 optimization problem.","Awesome, thanks for digging into this!  Closes #944, #713",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,983,2016-08-24T21:53:18Z,2016-08-24T22:46:21Z,2016-08-24T22:46:22Z,MERGED,True,227,5,7,https://github.com/JoshEngebretson,"Adding C# component FixedUpdate and PostUpdate, ScriptPhysics for NodeCollision and contacts",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/983,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/983,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,985,2016-08-31T05:52:23Z,2016-08-31T05:53:23Z,2016-08-31T05:53:23Z,CLOSED,False,1195,172,45,https://github.com/benwolf,Test,12,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/985,https://github.com/benwolf,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/985,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,985,2016-08-31T05:52:23Z,2016-08-31T05:53:23Z,2016-08-31T05:53:23Z,CLOSED,False,1195,172,45,https://github.com/benwolf,Test,12,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/985,https://github.com/benwolf,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/985#issuecomment-243665574,,"Wrong place for a pull request, sorry hit the wrong button.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,986,2016-08-31T07:52:23Z,2016-09-01T14:18:05Z,2016-09-01T14:19:20Z,MERGED,True,1145,887,24,https://github.com/mattbenic,CSComponent work and sender specific events,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,986,2016-08-31T07:52:23Z,2016-09-01T14:18:05Z,2016-09-01T14:19:20Z,MERGED,True,1145,887,24,https://github.com/mattbenic,CSComponent work and sender specific events,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986#issuecomment-243776830,,"This is great üëç   There are a couple nits and a question, don't sweat the tweaks, I can get them quick after landing :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,986,2016-08-31T07:52:23Z,2016-09-01T14:18:05Z,2016-09-01T14:19:20Z,MERGED,True,1145,887,24,https://github.com/mattbenic,CSComponent work and sender specific events,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/986#issuecomment-244093038,,Great work üëç LANDING! ‚úàÔ∏è,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,987,2016-09-01T09:57:30Z,2016-09-01T14:21:29Z,2016-09-01T14:21:29Z,MERGED,True,7,0,2,https://github.com/benwolf,Fix issue #480 Allow the camera to rotate in the scene view infinitely,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/987,https://github.com/benwolf,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/987,Right click on viewport will hide the cursor and allow the camera to continue to rotate. Fix issue #480,Right click on viewport will hide the cursor and allow the camera to continue to rotate. Fix issue #480,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,987,2016-09-01T09:57:30Z,2016-09-01T14:21:29Z,2016-09-01T14:21:29Z,MERGED,True,7,0,2,https://github.com/benwolf,Fix issue #480 Allow the camera to rotate in the scene view infinitely,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/987,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/987#issuecomment-244094073,Right click on viewport will hide the cursor and allow the camera to continue to rotate. Fix issue #480,"Easy peasy :)  This works for now as the scene view is always centered, though once we have multiple scene views and can position them, we'll have to change it up.  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,992,2016-09-02T16:08:04Z,2016-09-06T15:33:11Z,2016-09-06T15:33:11Z,MERGED,True,9,0,4,https://github.com/mahadevan-k,Issue #991 getJSComponent fails if called immediately after createChildPrefab,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992,https://github.com/mahadevan-k,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992,"added an JSComponent::IsInstanceInitialized to return if an instance is initialized
added code in JSScene::Node_getJSComponent to check if JSComponent is initialized and if not, call JSComponent::InitInstance","added an JSComponent::IsInstanceInitialized to return if an instance is initialized
added code in JSScene::Node_getJSComponent to check if JSComponent is initialized and if not, call JSComponent::InitInstance",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,992,2016-09-02T16:08:04Z,2016-09-06T15:33:11Z,2016-09-06T15:33:11Z,MERGED,True,9,0,4,https://github.com/mahadevan-k,Issue #991 getJSComponent fails if called immediately after createChildPrefab,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992#issuecomment-244419152,"added an JSComponent::IsInstanceInitialized to return if an instance is initialized
added code in JSScene::Node_getJSComponent to check if JSComponent is initialized and if not, call JSComponent::InitInstance",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,992,2016-09-02T16:08:04Z,2016-09-06T15:33:11Z,2016-09-06T15:33:11Z,MERGED,True,9,0,4,https://github.com/mahadevan-k,Issue #991 getJSComponent fails if called immediately after createChildPrefab,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992#issuecomment-244438457,"added an JSComponent::IsInstanceInitialized to return if an instance is initialized
added code in JSScene::Node_getJSComponent to check if JSComponent is initialized and if not, call JSComponent::InitInstance","@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,992,2016-09-02T16:08:04Z,2016-09-06T15:33:11Z,2016-09-06T15:33:11Z,MERGED,True,9,0,4,https://github.com/mahadevan-k,Issue #991 getJSComponent fails if called immediately after createChildPrefab,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/992#issuecomment-244990326,"added an JSComponent::IsInstanceInitialized to return if an instance is initialized
added code in JSScene::Node_getJSComponent to check if JSComponent is initialized and if not, call JSComponent::InitInstance","Thanks for the pull request, landing üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,996,2016-09-05T19:04:56Z,2016-09-06T15:48:00Z,2016-09-06T15:48:02Z,MERGED,True,558,3525,111,https://github.com/shaddockh,Monaco editor v.0.6,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/996,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/996,This updates the monaco editor to v0.6.  It doesn't appear to have any major enhancements other than bugfixes.  The change log for Monaco is at:  https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#060,This updates the monaco editor to v0.6.  It doesn't appear to have any major enhancements other than bugfixes.  The change log for Monaco is at:  https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#060,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,996,2016-09-05T19:04:56Z,2016-09-06T15:48:00Z,2016-09-06T15:48:02Z,MERGED,True,558,3525,111,https://github.com/shaddockh,Monaco editor v.0.6,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/996,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/996#issuecomment-244995290,This updates the monaco editor to v0.6.  It doesn't appear to have any major enhancements other than bugfixes.  The change log for Monaco is at:  https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#060,"Monaco 0.6 significantly improves typing performance here on Windows, awesome work, thanks!
LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,998,2016-09-07T20:43:26Z,2016-09-07T21:13:44Z,2016-09-07T21:13:46Z,MERGED,True,4,0,1,https://github.com/LaraEngebretson,Updated backers.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/998,https://github.com/LaraEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/998,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1000,2016-09-08T09:57:57Z,2016-09-08T15:21:39Z,2016-09-08T15:21:40Z,MERGED,True,2479,2186,10,https://github.com/mattbenic,"Some CSComponent improvements, additions to math classes",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1000,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1000,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1000,2016-09-08T09:57:57Z,2016-09-08T15:21:39Z,2016-09-08T15:21:40Z,MERGED,True,2479,2186,10,https://github.com/mattbenic,"Some CSComponent improvements, additions to math classes",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1000,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1000#issuecomment-245633716,,"Great PR, LANDING ‚úàÔ∏è
Thanks :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1002,2016-09-08T23:07:45Z,2016-09-09T00:07:54Z,2016-09-09T00:07:56Z,MERGED,True,5753,1774,136,https://github.com/JoshEngebretson,Atomic C# Updates,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1002,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1002,"Major updates to C# project creation supporting PCL, Desktop, and Android projects
ATOMIC_DEV_BUILD's now have full AtomicNET sources included in solution to make it easier to work on AtomicNET itself, including debugging native and managed code
Unified script binding sources (all platforms now use the same C++/C# generated source files!)
Atomic C# project JSON improvements, including persistent project GUID
Settings/Project.json with support for specifying plaforms (and name of solution/compiled binaries)
.. and much more","Major updates to C# project creation supporting PCL, Desktop, and Android projects
ATOMIC_DEV_BUILD's now have full AtomicNET sources included in solution to make it easier to work on AtomicNET itself, including debugging native and managed code
Unified script binding sources (all platforms now use the same C++/C# generated source files!)
Atomic C# project JSON improvements, including persistent project GUID
Settings/Project.json with support for specifying plaforms (and name of solution/compiled binaries)
.. and much more",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1006,2016-09-10T00:25:59Z,2016-09-10T00:54:33Z,2016-09-10T00:54:35Z,MERGED,True,350,183,13,https://github.com/JoshEngebretson,Android C# support for redistributable Atomic Editor binary builds,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1006,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1006,"Ensure ANDROID_NDK environment variable is set to your installation of the Android NDK

Windows: Build_AtomicEditor.bat --with-android
OSX: ./Build_AtomicEditor.sh --with-android
Linux: I haven't installed or looked into the Xamarin Android C# stuff for Linux yet


Make sure the Xamarin Android tooling is installed in your VS2015 or Xamarin Studio installation


Add ""android"" to your project's Settings/Project.json platforms property, for example:


{
    ""name"" : ""AtomicBlaster"",
    ""platforms"": [""desktop"", ""android""]
}","Ensure ANDROID_NDK environment variable is set to your installation of the Android NDK

Windows: Build_AtomicEditor.bat --with-android
OSX: ./Build_AtomicEditor.sh --with-android
Linux: I haven't installed or looked into the Xamarin Android C# stuff for Linux yet


Make sure the Xamarin Android tooling is installed in your VS2015 or Xamarin Studio installation


Add ""android"" to your project's Settings/Project.json platforms property, for example:


{
    ""name"" : ""AtomicBlaster"",
    ""platforms"": [""desktop"", ""android""]
}",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1007,2016-09-13T08:02:32Z,2016-09-13T14:20:00Z,2016-09-13T14:20:01Z,MERGED,True,46,16,3,https://github.com/mattbenic,Fix components in separate dlls being available,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1007,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1007,Also exposed skeleton nodes as previously discussed,Also exposed skeleton nodes as previously discussed,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1007,2016-09-13T08:02:32Z,2016-09-13T14:20:00Z,2016-09-13T14:20:01Z,MERGED,True,46,16,3,https://github.com/mattbenic,Fix components in separate dlls being available,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1007,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1007#issuecomment-246696612,Also exposed skeleton nodes as previously discussed,"Looks good, landing üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1009,2016-09-14T01:29:39Z,2016-09-14T04:42:57Z,2016-09-14T04:42:57Z,CLOSED,False,9307,8321,100,https://github.com/JoshEngebretson,Atomic C# iOS Support and build improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1009,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1009,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1009,2016-09-14T01:29:39Z,2016-09-14T04:42:57Z,2016-09-14T04:42:57Z,CLOSED,False,9307,8321,100,https://github.com/JoshEngebretson,Atomic C# iOS Support and build improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1009,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1009#issuecomment-246886891,,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1011,2016-09-14T09:33:48Z,2016-09-14T10:08:22Z,2016-09-14T10:08:25Z,MERGED,True,9318,8323,100,https://github.com/JoshEngebretson,Atomic C# iOS Support and build improvements,10,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1011,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1011,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1012,2016-09-14T18:08:59Z,2016-09-14T18:48:10Z,2016-09-14T18:48:13Z,MERGED,True,15,3,3,https://github.com/JoshEngebretson,Add a simple build check for common error of not having submodules initialized,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1012,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1012,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1014,2016-09-15T19:07:57Z,2016-09-15T22:47:53Z,2016-09-15T22:47:54Z,MERGED,True,360,115,23,https://github.com/JoshEngebretson,"XCode 8 and SDK updates, AtomicBuildInfo (date, time, git hash, build name)",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1014,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1014,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,"Add --with-docs, --with-examples to build, all three platforms","Add --with-docs, --with-examples to build, all three platforms",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247492110,"Add --with-docs, --with-examples to build, all three platforms","Nice and clean PR :)
Needs some tweaks for windows, though that is ok for now.  The main thing is introducing npm as a dependency, which would only be for generating docs.  I think this is better than introducing typedoc to node_modules... we can see what kind of mileage we get out of it.
I'll land when green!  Thanks! üê´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247658037,"Add --with-docs, --with-examples to build, all three platforms","I've backed out the --with-doc option for now, I believe its possible to get typedoc into node_modules, but it will take more investigation on how to do it without npm.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247659894,"Add --with-docs, --with-examples to build, all three platforms","I think having a npm dependency for docs generation is fine for now, iterative :)
I want to generate some site binaries soonish which include docs, CI boxes have npm... so will reintroduce --with-docs using npm anyway and probably better than adding more to node_modules, unless typedoc (and whatever dependencies it has) is pretty small.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247743376,"Add --with-docs, --with-examples to build, all three platforms","The --with-docs is back in, and the --with examples is fixed.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247749110,"Add --with-docs, --with-examples to build, all three platforms","The CI failure is due to a code signing issue on the build box.
Thanks!  LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JimMarlowe,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247787103,"Add --with-docs, --with-examples to build, all three platforms","Is good. What I found with typedoc, is that when npm installs it, it is 25Meg, although 18Meg of it is a copy of typescript. I downloaded typedoc master, and it is only 1Meg+, to move it into node_modules may require a couple more packages like handlebars, but the big item, typescript, is already in there. For someone who know what they are doing, like @shaddockh it's probably an ""easy"" task to move typedoc in to node_modules, but for me it'll take a little longer.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1015,2016-09-16T00:22:52Z,2016-09-17T04:53:06Z,2016-09-17T16:41:56Z,MERGED,True,108,7,5,https://github.com/JimMarlowe,"Add --with-docs, --with-examples to build",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1015#issuecomment-247787286,"Add --with-docs, --with-examples to build, all three platforms","Great, thanks for R&D'ing it :)
npm is a sane thing to require on box to support generation of documentation, for C#/C++ docs we will have other requirements, which likely won't be included in repo either.  So, let's stick with requiring npm I'd say",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1017,2016-09-16T19:09:47Z,2016-09-16T20:20:10Z,2016-09-16T20:20:13Z,MERGED,True,5,0,1,https://github.com/JoshEngebretson,Override CSComponent GetTypeName to return the managed type name,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1017,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1017,"Otherwise, it returns ""CSComponent"" instead of the managed class name, which is misleading","Otherwise, it returns ""CSComponent"" instead of the managed class name, which is misleading",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1018,2016-09-18T02:55:28Z,2016-09-18T03:35:31Z,2016-09-18T03:35:34Z,MERGED,True,278,298,15,https://github.com/JoshEngebretson,Build cleanups in prep of new binary build,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1018,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1018,"Squashed commits:
[5dbc137] Getting doc generation working on Linux, build updates
[a3d9776] Note about tsdoc issue on Windows
[97a7834] Build updates, make doc generation work on Windows
[ec96775] Add option to run a specified build task
[1b28bb5] More build updates
[5395dc1] Build cleanups (WIP)","Squashed commits:
[5dbc137] Getting doc generation working on Linux, build updates
[a3d9776] Note about tsdoc issue on Windows
[97a7834] Build updates, make doc generation work on Windows
[ec96775] Add option to run a specified build task
[1b28bb5] More build updates
[5395dc1] Build cleanups (WIP)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1018,2016-09-18T02:55:28Z,2016-09-18T03:35:31Z,2016-09-18T03:35:34Z,MERGED,True,278,298,15,https://github.com/JoshEngebretson,Build cleanups in prep of new binary build,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1018,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1018#issuecomment-247823057,"Squashed commits:
[5dbc137] Getting doc generation working on Linux, build updates
[a3d9776] Note about tsdoc issue on Windows
[97a7834] Build updates, make doc generation work on Windows
[ec96775] Add option to run a specified build task
[1b28bb5] More build updates
[5395dc1] Build cleanups (WIP)","codesign on CI fail, fixing that tomorrow",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1019,2016-09-18T09:13:14Z,2016-09-18T14:44:01Z,2016-09-18T14:44:01Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1019,https://github.com/cyecp,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1019,up,up,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1019,2016-09-18T09:13:14Z,2016-09-18T14:44:01Z,2016-09-18T14:44:01Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1019,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1019#issuecomment-247836679,up,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1020,2016-09-18T17:01:25Z,2016-09-18T20:28:04Z,2016-09-18T20:28:06Z,MERGED,True,19,17,1,https://github.com/JoshEngebretson,Another attempt at civetweb Xcode 8 fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1020,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1020,Fix From: civetweb/civetweb#358,Fix From: civetweb/civetweb#358,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1020,2016-09-18T17:01:25Z,2016-09-18T20:28:04Z,2016-09-18T20:28:06Z,MERGED,True,19,17,1,https://github.com/JoshEngebretson,Another attempt at civetweb Xcode 8 fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1020,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1020#issuecomment-247871071,Fix From: civetweb/civetweb#358,"Updated to XCode 8
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.","Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022#issuecomment-248080273,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.","Nice!  That is just enough lensflare and thanks for reintroducing  the pause/step functionality I clobbered :)
One thing on the examples, some of these should be hidden from the example browser as they are tests or outdated, probably a good idea to move them around in the repo itself so that is clear.  Also, need to make sure the length of desc's isn't causing a formatting issue.
This reminds me, I want to get this into NFD in hopes it fixes the dialog focus issue once and for all: mlabbe/nativefiledialog@6527087
I have never personally seen it :/",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022#issuecomment-248081294,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.","BTW, I'll comb through the example json, also need to detect if C# is supported on system and not show those if it isn't.  This comes down to having Visual Studio/Xamarin Studio installed, I think we're just going to require those for C#... it is possible to compile C# with vanilla mono and the integrated Monaco code editor, though that is just getting to be too many paths for us to maintain (and you really do want an IDE for C#)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022#issuecomment-248108966,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.","Push to C# - Does that mean the Atomic editor wouldn't/shouldn't play a c# project? Then now is the time for a web page to explain the Atomic C# tool chain, how to setup, install, code, run and deploy.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022#issuecomment-248116279,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.","Yes, VS/XS are required for C#, in a future build we can probably include the necessary compilation bits, as long as NET framework/Mono on system.  In general though, really want to be using VS/XS when working with C# anyway for IDE, Debugging, and both are required for deployment to Android/iOS and when the C# WebAssembly stuff comes together, the web.
The editor does need to detect this and we can pop up a help/info window, a Q & A link would be good too, and we need to address docs in general.
Pushing for a ""release"", we need to have a couple smoke tests first :)  I still have a couple loops to close on the C# side for new projects/examples, wrt mobile support mostly",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1022,2016-09-19T18:13:54Z,2016-09-20T00:08:32Z,2016-09-24T18:27:10Z,MERGED,True,361,56,35,https://github.com/JimMarlowe,Basket of Unamables,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1022#issuecomment-248165236,"Sorry, but I removed ""Early Access"", it was time, unless you are under a contractual agreement to show it? I can add a banner into the generic image, if you like.
I had a pile of other details, cosmetic and code-wise that would be good to do before a release.",... aaaand LANDING! Thanks! ‚úàÔ∏è,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1024,2016-09-20T00:35:09Z,2016-09-20T01:39:53Z,2016-09-20T01:39:56Z,MERGED,True,151,45162,356,https://github.com/JoshEngebretson,Adds --package build task which packages codesigned AtomicEditor on Windows and Mac,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1024,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1024,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1025,2016-09-20T17:49:00Z,2016-09-20T18:24:05Z,2016-09-20T18:24:08Z,MERGED,True,28,1,2,https://github.com/JoshEngebretson,A couple minor updates for #1023,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1025,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1025,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1026,2016-09-20T22:43:10Z,2016-09-20T23:17:03Z,2016-09-20T23:17:05Z,MERGED,True,1887,998,141,https://github.com/JoshEngebretson,Updating to Urho master,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1026,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1026,"1901271 Expose mouse position manipulation api in Input class
d4039d5 Add functions for mipmap manipulation to Image.
90efa3b Specify high precision for water shader varyings on GLES to fix shaky reflection/refraction texture sampling. Closes #1593.
5b67d28 Let Box2D world stay at default values for continuous (true) & substepping (false), since substepping enabled leads to erratic behavior under load. Closes #1592.
97eba58 Fix implicit conversion in normal offset shadow calculations. Closes #1586.
9c6e607 Fix memory leak in Dictionary.
00f0a87 Stop existing weight fade when AnimationController::SetWeight() is called, to ensure the set weight is not overridden one frame later. Closes #1583.
7c72c36 Fix LookAt Mixed rotation mode.
b227682 Possibility to enable alpha-to-coverage in either pass or material (all passes). Requires D3D11 or OpenGL and hardware multisampling enabled. Seems to look slightly different on D3D / OpenGL. Fixed depth bias not being copied in Material::Clone(). Closes #1578.
90d7d22 Do not make a value copy of the VariantVector inside the attribute in SceneResolver. Closes #1576.
32ef767 Make a value copy of the node IDs when resolving. Potential solution for #1576.
9114141 Add missing enum string name for serialization.
83acf5b Optional per-texture specifiable max. anisotropy level. Closes #1563.
6323aed Add NavigationPushiness::NAVIGATIONPUSHINESS_NONE
5f7ef27 fix skydome glsl error
19300a3 Add note that ResetTarget() doesn't stop automatically. Do not debug draw a ""velocity"" target for CrowdAgent. Closes #1572.
6895a51 Pass-level mechanism for eliminating unnecessary shader compilation defines. Closes #1567. Use this mechanism to eliminate PACKEDNORMAL define from depth & shadow pass in normalmapped techniques.
4e5f83a Make it safe to remove CrowdAgent during the reposition event. Closes #1570.
6be0d71 Fix keeping track of RigidBody2D constraints. Closes #1569.
02fae13 Update face camera mode name and add script bindings.
d344cae Add new face camera mode to BillboardSet and Text3D.
2b2f12f Added porting note related to light max extrusion parameter.
2fe4cb0 Add max extrusion parameter for directional lights. Default to 1000. This prevents large far clip causing poor shadow map depth resolution and too strong effect of depth bias parameters, but can be increased if very tall shadows are needed.
623639c Add note of example use of render order.
695f750 Remove specific AlphaMask & NormalPacked techniques, in favor of adding the necessary shader defines in the material instead.
dc90a2d Remove ambiguous weak ptr constructor call.
48f779e Add possibility for materials to define vertex & pixel shader compilation defines, like techniques & passes. Related to #1566. As a consequence, removed the ""alphamask"" hint from techniques (render order can be used instead) and automatic determination if material should occlude. Fixed bugs in Material JSON save. Allow JSONValue::Size() to also work in object mode. Added porting notes as necessary.
3dfb4a4 Find navigation mesh from the scene in a delayed manner. Plus other codepath consistency fixes for CrowdManager. Closes #1565.
1dbb990 Convert double to float when assigning a shader parameter (possible danger when setting material parameters from Lua)
0201718 Add missing assert to PODVector.
2d59e72 Guard against self-assignment clearing the containers.
7a600be Refactor Vector and PODVector implementation.
000b1af Check for obstacle node moving and update navigation mesh appropriately. Needs a hack to skip this during scene deletion to avoid crash. Closes #1558.
b7c7568 Add to/from string conversions for JSONValueType & JSONNumberType. Minor code cleanup and missing JSONValue script bindings. Closes #1546.
ab40958 Detect Push / Insert to Vector or PODVector from inside itself and make a value copy in that case. Closes #1556.
8bef941 Fix slowed down navigation crowd agent when node dirtied in E_CROWD_AGENT_NODE_REPOSITION. Send the event only after position has been updated. Check for only rotation changing when node dirtied, and do not update position / reset state in that case. Closes #1548.
d72de15 Add note that GetNextLevel() will keep returning 1x1x1 image if necessary. Closes #1554.
5b70c5d Restore earlier method of defining camera frustum when a custom projection matrix is not in use, to improve deferred depth reconstruction accuracy. Related to #1551.
b3964e2 Demonstrate Z fighting elimination by depth bias in 10_RenderToTexture sample. Closes #1543.
79f1a1b added a check for invalid boneIndex caused by geometry key animation
a1aa049 fixed geometry having animation key problem
489f759 Fix slope-scale depth bias potentially not creating new rasterizer state on D3D11 due to poor hashing. Remove mistaken adjustment of slope-scale bias on OpenGL. Now behavior should be uniform between D3D9/D3D11/OpenGL. Closes #1547.
9d5380b Remove extraneous f from GLSL code to satisfy the compiler.
6a72b70 Fix copypaste error in attribute accessor.
273a3ac Add support of free functions as attribute accessors.
6c4a112 Add note on camera projection matrix API change.
d9c0ce7 Send also node-specific 2D collision events. Closes #1535.
341f2d9 Normalize slash / backslash when AnimationController queries for existence of an animation state. Closes #1537.
bc8074a Added SetProjection() to camera, which sets custom projection matrix. This is reset by modifying any of the standard projection parameters (farClip, FOV etc.) Make sure camera's actual far & near clip are based on the projection matrix.
871e52f Base frustum calculation on the projection matrix.
3af3c2b fixed channelIndices[] indexing in ExpandAnimatedChannelKeys() func.
48cd15b Store camera projection matrix as API-independent and convert as necessary (preparation for allowing the user to define a custom projection matrix.) Camera GetProjection() API changed; GetGPUProjection() is now used to get the API-specific projection for use as a shader parameter.
bef8df2 Support defining neighbor terrains to avoid LOD level discontinuities at the edges.
d3cc011 Handle flipping of normals in collision event sending if body pointers were swapped. Do not discard contact results from the ""other"" manifold, rather concatenate them into the same collision event. Thanks to Enhex for highlighting the issue.
ecfa732 Workaround GCC issue producing shared lib containing undefined symbol. Close #1519.
9bbec4b Explain why normal offset is not saved for materials. Closes #1518.
7b5da66 Skip adding a deferred light volume batch when the light has low 8 bits of lightmask cleared; it would not have effect due to the stencil test. Skip shadow map render when there are no forward & deferred batches using it.
2c8ed38 Capitalize CrowdAgent enum attributes for consistency with other components. Loading is case-insensitive so this does not break existing scenes.
3fe5024 Remove deprecated autoRemove bool from SoundSource. Replace with a more generic AutoRemoveMode enum which is now used by both SoundSource & ParticleEmitter.
a2d86f1 Get screenshot as RGBA on OpenGL ES to fix Android black screenshot.
a76fc0a Undefine GetObject in TileMapLayer2D.h to prevent it getting confused with Win32 API function define. To help, the header should be included after Windows.h is included. Related to #1512.
0991c8e Ensure node's components are properly marked for network update in case node is late added to the scene. Make it impossible for a NetworkState to exist without properly allocated currentValues & previousValues. Fix erroneous comment in C++ version of SceneReplication sample. Code cleanup & minor optimization. Closes #1511.
2f25c3b Add note to discourage use of AddComponent(). Prevent attempting to assign model resource on StaticModel / AnimatedModel when no node set. Closes #1510.","1901271 Expose mouse position manipulation api in Input class
d4039d5 Add functions for mipmap manipulation to Image.
90efa3b Specify high precision for water shader varyings on GLES to fix shaky reflection/refraction texture sampling. Closes #1593.
5b67d28 Let Box2D world stay at default values for continuous (true) & substepping (false), since substepping enabled leads to erratic behavior under load. Closes #1592.
97eba58 Fix implicit conversion in normal offset shadow calculations. Closes #1586.
9c6e607 Fix memory leak in Dictionary.
00f0a87 Stop existing weight fade when AnimationController::SetWeight() is called, to ensure the set weight is not overridden one frame later. Closes #1583.
7c72c36 Fix LookAt Mixed rotation mode.
b227682 Possibility to enable alpha-to-coverage in either pass or material (all passes). Requires D3D11 or OpenGL and hardware multisampling enabled. Seems to look slightly different on D3D / OpenGL. Fixed depth bias not being copied in Material::Clone(). Closes #1578.
90d7d22 Do not make a value copy of the VariantVector inside the attribute in SceneResolver. Closes #1576.
32ef767 Make a value copy of the node IDs when resolving. Potential solution for #1576.
9114141 Add missing enum string name for serialization.
83acf5b Optional per-texture specifiable max. anisotropy level. Closes #1563.
6323aed Add NavigationPushiness::NAVIGATIONPUSHINESS_NONE
5f7ef27 fix skydome glsl error
19300a3 Add note that ResetTarget() doesn't stop automatically. Do not debug draw a ""velocity"" target for CrowdAgent. Closes #1572.
6895a51 Pass-level mechanism for eliminating unnecessary shader compilation defines. Closes #1567. Use this mechanism to eliminate PACKEDNORMAL define from depth & shadow pass in normalmapped techniques.
4e5f83a Make it safe to remove CrowdAgent during the reposition event. Closes #1570.
6be0d71 Fix keeping track of RigidBody2D constraints. Closes #1569.
02fae13 Update face camera mode name and add script bindings.
d344cae Add new face camera mode to BillboardSet and Text3D.
2b2f12f Added porting note related to light max extrusion parameter.
2fe4cb0 Add max extrusion parameter for directional lights. Default to 1000. This prevents large far clip causing poor shadow map depth resolution and too strong effect of depth bias parameters, but can be increased if very tall shadows are needed.
623639c Add note of example use of render order.
695f750 Remove specific AlphaMask & NormalPacked techniques, in favor of adding the necessary shader defines in the material instead.
dc90a2d Remove ambiguous weak ptr constructor call.
48f779e Add possibility for materials to define vertex & pixel shader compilation defines, like techniques & passes. Related to #1566. As a consequence, removed the ""alphamask"" hint from techniques (render order can be used instead) and automatic determination if material should occlude. Fixed bugs in Material JSON save. Allow JSONValue::Size() to also work in object mode. Added porting notes as necessary.
3dfb4a4 Find navigation mesh from the scene in a delayed manner. Plus other codepath consistency fixes for CrowdManager. Closes #1565.
1dbb990 Convert double to float when assigning a shader parameter (possible danger when setting material parameters from Lua)
0201718 Add missing assert to PODVector.
2d59e72 Guard against self-assignment clearing the containers.
7a600be Refactor Vector and PODVector implementation.
000b1af Check for obstacle node moving and update navigation mesh appropriately. Needs a hack to skip this during scene deletion to avoid crash. Closes #1558.
b7c7568 Add to/from string conversions for JSONValueType & JSONNumberType. Minor code cleanup and missing JSONValue script bindings. Closes #1546.
ab40958 Detect Push / Insert to Vector or PODVector from inside itself and make a value copy in that case. Closes #1556.
8bef941 Fix slowed down navigation crowd agent when node dirtied in E_CROWD_AGENT_NODE_REPOSITION. Send the event only after position has been updated. Check for only rotation changing when node dirtied, and do not update position / reset state in that case. Closes #1548.
d72de15 Add note that GetNextLevel() will keep returning 1x1x1 image if necessary. Closes #1554.
5b70c5d Restore earlier method of defining camera frustum when a custom projection matrix is not in use, to improve deferred depth reconstruction accuracy. Related to #1551.
b3964e2 Demonstrate Z fighting elimination by depth bias in 10_RenderToTexture sample. Closes #1543.
79f1a1b added a check for invalid boneIndex caused by geometry key animation
a1aa049 fixed geometry having animation key problem
489f759 Fix slope-scale depth bias potentially not creating new rasterizer state on D3D11 due to poor hashing. Remove mistaken adjustment of slope-scale bias on OpenGL. Now behavior should be uniform between D3D9/D3D11/OpenGL. Closes #1547.
9d5380b Remove extraneous f from GLSL code to satisfy the compiler.
6a72b70 Fix copypaste error in attribute accessor.
273a3ac Add support of free functions as attribute accessors.
6c4a112 Add note on camera projection matrix API change.
d9c0ce7 Send also node-specific 2D collision events. Closes #1535.
341f2d9 Normalize slash / backslash when AnimationController queries for existence of an animation state. Closes #1537.
bc8074a Added SetProjection() to camera, which sets custom projection matrix. This is reset by modifying any of the standard projection parameters (farClip, FOV etc.) Make sure camera's actual far & near clip are based on the projection matrix.
871e52f Base frustum calculation on the projection matrix.
3af3c2b fixed channelIndices[] indexing in ExpandAnimatedChannelKeys() func.
48cd15b Store camera projection matrix as API-independent and convert as necessary (preparation for allowing the user to define a custom projection matrix.) Camera GetProjection() API changed; GetGPUProjection() is now used to get the API-specific projection for use as a shader parameter.
bef8df2 Support defining neighbor terrains to avoid LOD level discontinuities at the edges.
d3cc011 Handle flipping of normals in collision event sending if body pointers were swapped. Do not discard contact results from the ""other"" manifold, rather concatenate them into the same collision event. Thanks to Enhex for highlighting the issue.
ecfa732 Workaround GCC issue producing shared lib containing undefined symbol. Close #1519.
9bbec4b Explain why normal offset is not saved for materials. Closes #1518.
7b5da66 Skip adding a deferred light volume batch when the light has low 8 bits of lightmask cleared; it would not have effect due to the stencil test. Skip shadow map render when there are no forward & deferred batches using it.
2c8ed38 Capitalize CrowdAgent enum attributes for consistency with other components. Loading is case-insensitive so this does not break existing scenes.
3fe5024 Remove deprecated autoRemove bool from SoundSource. Replace with a more generic AutoRemoveMode enum which is now used by both SoundSource & ParticleEmitter.
a2d86f1 Get screenshot as RGBA on OpenGL ES to fix Android black screenshot.
a76fc0a Undefine GetObject in TileMapLayer2D.h to prevent it getting confused with Win32 API function define. To help, the header should be included after Windows.h is included. Related to #1512.
0991c8e Ensure node's components are properly marked for network update in case node is late added to the scene. Make it impossible for a NetworkState to exist without properly allocated currentValues & previousValues. Fix erroneous comment in C++ version of SceneReplication sample. Code cleanup & minor optimization. Closes #1511.
2f25c3b Add note to discourage use of AddComponent(). Prevent attempting to assign model resource on StaticModel / AnimatedModel when no node set. Closes #1510.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1027,2016-09-21T15:18:03Z,2016-09-21T15:19:03Z,2016-09-21T15:19:03Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1027,https://github.com/cyecp,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1027,up,up,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1027,2016-09-21T15:18:03Z,2016-09-21T15:19:03Z,2016-09-21T15:19:03Z,CLOSED,False,0,0,0,https://github.com/cyecp,Merge pull request #1 from AtomicGameEngine/master,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1027,https://github.com/cyecp,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1027#issuecomment-248644827,up,up,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1028,2016-09-22T17:06:33Z,2016-09-22T17:51:14Z,2016-09-22T17:51:20Z,MERGED,True,6,2,1,https://github.com/JoshEngebretson,"Fixing shadow issue on NVIDIA Shield via https://github.com/urho3d/Urho3D/issues/1607, thanks @cadaver!",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1028,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1028,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1029,2016-09-22T22:35:22Z,2016-09-22T23:38:09Z,2016-09-22T23:38:12Z,MERGED,True,192,28,16,https://github.com/JoshEngebretson,Atomic new build prep work,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1029,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1029,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1031,2016-09-24T03:02:23Z,2016-09-24T03:50:08Z,2016-09-24T03:50:10Z,MERGED,True,155203,86555,50,https://github.com/shaddockh,Update Typescript to 2.0.3,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1031,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1031,"Fixes #1030
This updates the editor to be compiled with TypeScript 2.0.3
Other changes:

Built-in web view intellisense now uses TS 2.0.3
Built-in TS project compiler uses TS 2.0.3
Modified TS Projects to look for *.d.ts files anywhere in the active project structure, not just under Resources
Modified TS Projects to enforce consistent filename casing when importing (requiring) other modules

Open issue:
dts-generator complains about an unmet peer dependency on an old version of typescript but it doesn't appear to break anything.  Once dts-generator gets updated, this should go away.","Fixes #1030
This updates the editor to be compiled with TypeScript 2.0.3
Other changes:

Built-in web view intellisense now uses TS 2.0.3
Built-in TS project compiler uses TS 2.0.3
Modified TS Projects to look for *.d.ts files anywhere in the active project structure, not just under Resources
Modified TS Projects to enforce consistent filename casing when importing (requiring) other modules

Open issue:
dts-generator complains about an unmet peer dependency on an old version of typescript but it doesn't appear to break anything.  Once dts-generator gets updated, this should go away.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1031,2016-09-24T03:02:23Z,2016-09-24T03:50:08Z,2016-09-24T03:50:10Z,MERGED,True,155203,86555,50,https://github.com/shaddockh,Update Typescript to 2.0.3,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1031,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1031#issuecomment-249343129,"Fixes #1030
This updates the editor to be compiled with TypeScript 2.0.3
Other changes:

Built-in web view intellisense now uses TS 2.0.3
Built-in TS project compiler uses TS 2.0.3
Modified TS Projects to look for *.d.ts files anywhere in the active project structure, not just under Resources
Modified TS Projects to enforce consistent filename casing when importing (requiring) other modules

Open issue:
dts-generator complains about an unmet peer dependency on an old version of typescript but it doesn't appear to break anything.  Once dts-generator gets updated, this should go away.","Awesome, LANDING! Thanks :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1035,2016-09-24T16:59:24Z,2016-09-24T17:33:12Z,2016-09-24T17:33:13Z,MERGED,True,1,0,1,https://github.com/JoshEngebretson,Fix uninitialized alphaToCoverage variable in Material,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1035,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1035,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1036,2016-09-25T03:03:35Z,2016-09-25T15:50:04Z,2016-09-25T15:50:06Z,MERGED,True,742,75,28,https://github.com/JoshEngebretson,AtomicNET New Project support,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1036,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1036,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1038,2016-09-25T18:27:03Z,2016-09-25T19:24:08Z,2016-09-25T19:24:09Z,MERGED,True,171,54,12,https://github.com/JoshEngebretson,CSComponent resource improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1038,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1038,"This PR removes the dependency on CSComponentAssembly resources from CSComponent, which made it really easy for components to drop out based on the resources being renamed, inaccessible, etc.  It also reintroduces changing classes on the fly in the inspector and having the attributes refresh properly.
Components are currently looked up by classname, we will support looking up by qualified namespace + classname in the future
IMPORTANT: Component assemblies are now preloaded for desktop (we will need a unified solution for mobile and desktop), this shouldn't break projects which contain components in multiple project assemblies, though beware","This PR removes the dependency on CSComponentAssembly resources from CSComponent, which made it really easy for components to drop out based on the resources being renamed, inaccessible, etc.  It also reintroduces changing classes on the fly in the inspector and having the attributes refresh properly.
Components are currently looked up by classname, we will support looking up by qualified namespace + classname in the future
IMPORTANT: Component assemblies are now preloaded for desktop (we will need a unified solution for mobile and desktop), this shouldn't break projects which contain components in multiple project assemblies, though beware",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1039,2016-09-26T19:55:43Z,2016-09-26T20:31:09Z,2016-09-26T20:31:11Z,MERGED,True,323,622,13,https://github.com/JoshEngebretson,Work on Atomic Examples and Project Templates,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1039,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1039,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1040,2016-09-26T20:57:38Z,2016-09-26T21:28:35Z,2016-09-26T21:28:37Z,MERGED,True,3,3,4,https://github.com/JoshEngebretson,Updates for packaging,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1040,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1040,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1044,2016-09-27T14:36:18Z,2016-09-27T15:11:03Z,2016-09-27T15:11:04Z,MERGED,True,35,7,5,https://github.com/JoshEngebretson,"Installer fixes, better default player window position/size",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1044,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1044,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1046,2016-09-27T17:08:30Z,2016-09-27T17:45:06Z,2016-09-27T17:45:10Z,MERGED,True,32,18,1,https://github.com/JoshEngebretson,Disable Assimp OpenGEX due to buggy OpenDDL version which crashes on ‚Ä¶,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1046,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1046,‚Ä¶some systems at init (possibly fixed in newer version of Assimp #1045),‚Ä¶some systems at init (possibly fixed in newer version of Assimp #1045),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1047,2016-09-27T19:01:31Z,2016-09-27T19:34:57Z,2016-09-27T19:34:59Z,MERGED,True,2,2,2,https://github.com/JoshEngebretson,"Use default accepting, non-exception throwing, version of Environment::get",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1047,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1047,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1048,2016-09-27T20:19:22Z,2016-09-27T20:56:29Z,2016-09-27T20:56:32Z,MERGED,True,2,2,1,https://github.com/JoshEngebretson,Update VS download link,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1048,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1048,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1052,2016-09-28T16:45:52Z,2016-09-28T17:19:44Z,2016-09-28T17:19:46Z,MERGED,True,12,4,1,https://github.com/JoshEngebretson,"Fixes #1051, better JSON to rapid json logic (set value before adding to array/object)",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1052,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1052,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1053,2016-09-28T17:27:08Z,2016-09-28T17:58:56Z,2016-09-28T17:58:58Z,MERGED,True,45,0,2,https://github.com/JoshEngebretson,Temporarily disabling shader caching for non-dev builds,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1053,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1053,"Can enable and configure once we can pull in:
urho3d/Urho3D@a1e2bc9","Can enable and configure once we can pull in:
urho3d/Urho3D@a1e2bc9",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1054,2016-09-28T18:47:40Z,2016-09-30T14:29:46Z,2016-09-30T14:29:46Z,MERGED,True,96,0,3,https://github.com/Type1J,Sound.setData in JavaScript,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054,First off: Sorry! I know that I fell off the face of the planet. I'm hoping to start working more on Atomic soon. Here's something that I needed for one of my projects. I have an example for it that I'll PR once this goes through.,First off: Sorry! I know that I fell off the face of the planet. I'm hoping to start working more on Atomic soon. Here's something that I needed for one of my projects. I have an example for it that I'll PR once this goes through.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1054,2016-09-28T18:47:40Z,2016-09-30T14:29:46Z,2016-09-30T14:29:46Z,MERGED,True,96,0,3,https://github.com/Type1J,Sound.setData in JavaScript,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054#issuecomment-250262262,First off: Sorry! I know that I fell off the face of the planet. I'm hoping to start working more on Atomic soon. Here's something that I needed for one of my projects. I have an example for it that I'll PR once this goes through.,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1054,2016-09-28T18:47:40Z,2016-09-30T14:29:46Z,2016-09-30T14:29:46Z,MERGED,True,96,0,3,https://github.com/Type1J,Sound.setData in JavaScript,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054#issuecomment-250268082,First off: Sorry! I know that I fell off the face of the planet. I'm hoping to start working more on Atomic soon. Here's something that I needed for one of my projects. I have an example for it that I'll PR once this goes through.,"No problem, welcome back :)
@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1054,2016-09-28T18:47:40Z,2016-09-30T14:29:46Z,2016-09-30T14:29:46Z,MERGED,True,96,0,3,https://github.com/Type1J,Sound.setData in JavaScript,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1054#issuecomment-250499094,First off: Sorry! I know that I fell off the face of the planet. I'm hoping to start working more on Atomic soon. Here's something that I needed for one of my projects. I have an example for it that I'll PR once this goes through.,"Great, one thing that helps when adding custom native JS methods is to add a TypeScript decl for the method, this way it will show up in the tsdocs (which are useful for vanilla JS as well), for example: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Script/Packages/Atomic/Graphics.json#L40
The decl would go in Audio.json in this case",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1056,2016-09-29T13:27:26Z,2016-09-29T13:59:54Z,2016-09-29T13:59:56Z,MERGED,True,7,2,1,https://github.com/JoshEngebretson,"We're doubling loading assemblies in some cases, don't do that",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1056,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1056,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1059,2016-09-29T15:13:16Z,2016-09-29T15:50:58Z,2016-09-29T15:51:00Z,MERGED,True,6,1,1,https://github.com/JoshEngebretson,Pick overload for NavigationMesh::Build,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1059,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1059,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1061,2016-09-29T21:26:07Z,2016-09-29T23:48:22Z,2016-09-29T23:48:25Z,MERGED,True,134,28,8,https://github.com/JoshEngebretson,Adds a prompt for breaking prefabs so changes aren't unintentionally lost,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1061,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1061,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062#issuecomment-250796908,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,"The intention is to allow you to provide a .deb on the download page in the place of the grayed out Linux Editor, in addition to users making their own packages.
To install via command line:
sudo dpkg -i AtomicGameEngine_0.0.8_amd64.deb
sudo apt-get -f install",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062#issuecomment-250829627,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,"That's cool, we'll stick the deb install command docs alongside the download, I might have to update the linux build box, I guess we'll see... is code signing a deb a common practice?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062#issuecomment-250838827,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,"I don't think this will need any additional software to be installed on the linux build box, if anything, it would be 'dpkg', it's installed on all my linux boxes, and I don't remember putting it there. Do a 'which dpkg-deb' on the linux box, if its there, it's all good.
There are a couple of ways to install the atomicXXX.deb, the command line way, or most distros will bring a a gui installer when you double-click on it in a file browser, which guides you along and prompts for your password.
There is no code signing for linux packages or executables.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062#issuecomment-250867718,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,"I added the AtomicEditor lib dependencies, so if someone loads this on a system without graphics drivers installed, it will bark.
I also changed the Category to Programming, @CTrauma is right, those other IDEs are gonna be our new best friends. Better to be boring than forgotten, or something.
Pincushion didn't need any more emails, so I changed the maintainer to info.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1062,2016-09-30T01:14:05Z,2016-10-01T14:40:03Z,2016-10-01T18:19:03Z,MERGED,True,251,1,9,https://github.com/JimMarlowe,Linux package generation,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1062#issuecomment-250915801,This will create a linux debian package from the ./Build_AtomicEditor.sh  --package command.,"Excellent!
Maybe we can find some kind of deb wrapper which will make an installer (basically wraps the command line dpkg stuff), so it can be installed simply?
In the meantime, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1063,2016-10-01T15:24:09Z,2016-10-01T16:00:53Z,2016-10-01T16:00:55Z,MERGED,True,13,7,4,https://github.com/JoshEngebretson,"Make the AtomicNET requirement buttons more clear, always cleanly create the editor target folder regardless of noclean option",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1063,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1063,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1065,2016-10-02T04:06:39Z,2016-10-02T15:31:23Z,2016-10-04T13:28:00Z,MERGED,True,6,2,1,https://github.com/Type1J,Adding TypeScript decl.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1065,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1065,Continuation of #1054.,Continuation of #1054.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1065,2016-10-02T04:06:39Z,2016-10-02T15:31:23Z,2016-10-04T13:28:00Z,MERGED,True,6,2,1,https://github.com/Type1J,Adding TypeScript decl.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1065,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1065#issuecomment-250977078,Continuation of #1054.,Great thanks :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1066,2016-10-02T14:58:12Z,2016-10-02T17:37:06Z,2016-10-05T23:02:56Z,MERGED,True,28,49,5,https://github.com/JimMarlowe,linux package cleanup,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1066,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1066,"The initial package was good, but was not detecting if a version was already installed, which was an annoyance.  In tracking down more lintian errors, I found the I wasn't following enough rules to make the package manager happy. With these changes, now it is, and the number of remaining lintian errors, though valid, is small and manageable.
Change the package install directory name to (all lowercase) atomicgameengine.
All files do not have the execute bit set, except for AtomicEditor and AtomicPlayer, which are also stripped.
Remove all embedded .gitignore files.
Removed Depend package version number checks, they were not needed.
Fixed warning about using /tmp directory usage during installation.
Change the deb package filename to match the naming format of the other platform packages.","The initial package was good, but was not detecting if a version was already installed, which was an annoyance.  In tracking down more lintian errors, I found the I wasn't following enough rules to make the package manager happy. With these changes, now it is, and the number of remaining lintian errors, though valid, is small and manageable.
Change the package install directory name to (all lowercase) atomicgameengine.
All files do not have the execute bit set, except for AtomicEditor and AtomicPlayer, which are also stripped.
Remove all embedded .gitignore files.
Removed Depend package version number checks, they were not needed.
Fixed warning about using /tmp directory usage during installation.
Change the deb package filename to match the naming format of the other platform packages.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1066,2016-10-02T14:58:12Z,2016-10-02T17:37:06Z,2016-10-05T23:02:56Z,MERGED,True,28,49,5,https://github.com/JimMarlowe,linux package cleanup,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1066,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1066#issuecomment-250981567,"The initial package was good, but was not detecting if a version was already installed, which was an annoyance.  In tracking down more lintian errors, I found the I wasn't following enough rules to make the package manager happy. With these changes, now it is, and the number of remaining lintian errors, though valid, is small and manageable.
Change the package install directory name to (all lowercase) atomicgameengine.
All files do not have the execute bit set, except for AtomicEditor and AtomicPlayer, which are also stripped.
Remove all embedded .gitignore files.
Removed Depend package version number checks, they were not needed.
Fixed warning about using /tmp directory usage during installation.
Change the deb package filename to match the naming format of the other platform packages.","ok, NOW it's perfect.",True,{'HOORAY': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1067,2016-10-02T17:36:21Z,2016-10-02T18:43:41Z,2016-10-02T18:43:44Z,MERGED,True,7,2,1,https://github.com/JoshEngebretson,Use VSMSBuildCmd.bat instead of vcvars64.bat for editor C# builds (the later requires C++ tooling to be installed),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1067,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1067,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1068,2016-10-02T19:16:34Z,2016-10-02T19:51:43Z,2016-10-02T19:51:45Z,MERGED,True,6,5,4,https://github.com/JoshEngebretson,Possible fix for OS X resource prefix issue (specify absolute path based on executable in app bundle),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1068,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1068,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1069,2016-10-04T00:43:53Z,2016-10-05T19:22:17Z,2016-10-05T23:02:56Z,MERGED,True,536,11,21,https://github.com/JimMarlowe,Deployment for linux platform,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069,"This PR adds Linux to the list of platform deployables. This is a deployment is in the same vein as the legacy deployments, using the linux built AtomicPlayer and adding the AtomicResource.pak to make a complete program. It does not do linux C# programs (yet).
Note: There is a small issue with execution bits on the AtomicPlayer program, when deployed, the AtomicPlayer is copied from one file to another, which removes the linux execution bits, because a new file is created. I fixed this linux on linux, but if a linux program deployed on windows or osx, and the program is moved back to linux, it will not execute. The user can restore the execute function, but it's still a little disconcerting, and no cross-platform solution (other than doing an actual os copy).","This PR adds Linux to the list of platform deployables. This is a deployment is in the same vein as the legacy deployments, using the linux built AtomicPlayer and adding the AtomicResource.pak to make a complete program. It does not do linux C# programs (yet).
Note: There is a small issue with execution bits on the AtomicPlayer program, when deployed, the AtomicPlayer is copied from one file to another, which removes the linux execution bits, because a new file is created. I fixed this linux on linux, but if a linux program deployed on windows or osx, and the program is moved back to linux, it will not execute. The user can restore the execute function, but it's still a little disconcerting, and no cross-platform solution (other than doing an actual os copy).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1069,2016-10-04T00:43:53Z,2016-10-05T19:22:17Z,2016-10-05T23:02:56Z,MERGED,True,536,11,21,https://github.com/JimMarlowe,Deployment for linux platform,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069#issuecomment-251749025,"This PR adds Linux to the list of platform deployables. This is a deployment is in the same vein as the legacy deployments, using the linux built AtomicPlayer and adding the AtomicResource.pak to make a complete program. It does not do linux C# programs (yet).
Note: There is a small issue with execution bits on the AtomicPlayer program, when deployed, the AtomicPlayer is copied from one file to another, which removes the linux execution bits, because a new file is created. I fixed this linux on linux, but if a linux program deployed on windows or osx, and the program is moved back to linux, it will not execute. The user can restore the execute function, but it's still a little disconcerting, and no cross-platform solution (other than doing an actual os copy).","I changed the execution bit setting to the Poco methodology, it is much more cross platform, so Linux and OSX will work. Deploying on windows will most likely still not set the execution bits, according to the Poco documentation, so it may have to be a documentation issue.
On my Mint system, when I double click on an AtomicEditor without execute permissions, it brings up a dialog box and one of the 3 options I have is to make it executable and run it without needing a password to do it.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1069,2016-10-04T00:43:53Z,2016-10-05T19:22:17Z,2016-10-05T23:02:56Z,MERGED,True,536,11,21,https://github.com/JimMarlowe,Deployment for linux platform,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1069#issuecomment-251772764,"This PR adds Linux to the list of platform deployables. This is a deployment is in the same vein as the legacy deployments, using the linux built AtomicPlayer and adding the AtomicResource.pak to make a complete program. It does not do linux C# programs (yet).
Note: There is a small issue with execution bits on the AtomicPlayer program, when deployed, the AtomicPlayer is copied from one file to another, which removes the linux execution bits, because a new file is created. I fixed this linux on linux, but if a linux program deployed on windows or osx, and the program is moved back to linux, it will not execute. The user can restore the execute function, but it's still a little disconcerting, and no cross-platform solution (other than doing an actual os copy).","Thanks for all the great work into the Linux build and deployment, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1070,2016-10-04T11:52:11Z,2016-10-04T14:48:19Z,2016-10-04T14:48:19Z,MERGED,True,62,14,4,https://github.com/mattbenic,Minor enhancements and a try/catch to prevent dll parsing from failing,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1070,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1070,"The first three commits are harmless/simple
The last one (wrap InlineField handling..) is related to the issue I was having last week. The parser is stumbling on components that have no constructor, and no explicit inline assigned values. This is a complete showstopper, so until a better solution can be found I'm wrapping the source of the exception in a try/catch.
The loadedValues still gets cleared, so parsing of the rest of the component (and other components in the assembly) still succeeds. Should .ctor processing perhaps just be skipped entirely?","The first three commits are harmless/simple
The last one (wrap InlineField handling..) is related to the issue I was having last week. The parser is stumbling on components that have no constructor, and no explicit inline assigned values. This is a complete showstopper, so until a better solution can be found I'm wrapping the source of the exception in a try/catch.
The loadedValues still gets cleared, so parsing of the rest of the component (and other components in the assembly) still succeeds. Should .ctor processing perhaps just be skipped entirely?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1070,2016-10-04T11:52:11Z,2016-10-04T14:48:19Z,2016-10-04T14:48:19Z,MERGED,True,62,14,4,https://github.com/mattbenic,Minor enhancements and a try/catch to prevent dll parsing from failing,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1070,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1070#issuecomment-251410404,"The first three commits are harmless/simple
The last one (wrap InlineField handling..) is related to the issue I was having last week. The parser is stumbling on components that have no constructor, and no explicit inline assigned values. This is a complete showstopper, so until a better solution can be found I'm wrapping the source of the exception in a try/catch.
The loadedValues still gets cleared, so parsing of the rest of the component (and other components in the assembly) still succeeds. Should .ctor processing perhaps just be skipped entirely?","I don't think .ctor processing can be skipped, as there is generated ctor IL code which handles the assigning of initial values (which is where we pull defaults from), etc.
Looks good, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1075,2016-10-08T17:25:04Z,2016-10-09T15:49:50Z,2016-10-09T17:51:57Z,MERGED,True,469,863,104,https://github.com/shaddockh,Upgrade Monaco to 0.7,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075,"Monaco 0.7 just released and this updates to that version.
Monaco changes can be found at https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#070
Additionally, the following were fixed in Atomic:

changed the whitespace setting to match the new whitespace setting in Monaco (""none"",""all"",""border"") instead of true/false.  An adapter was put in so that existing true/false entries still work.
discovered that the monaco web workers weren't being utilized, so fixed that so that monaco can run some stuff in a background thread
discovered that comments weren't being displayed in hovers/intellisense correctly, so that was also added","Monaco 0.7 just released and this updates to that version.
Monaco changes can be found at https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#070
Additionally, the following were fixed in Atomic:

changed the whitespace setting to match the new whitespace setting in Monaco (""none"",""all"",""border"") instead of true/false.  An adapter was put in so that existing true/false entries still work.
discovered that the monaco web workers weren't being utilized, so fixed that so that monaco can run some stuff in a background thread
discovered that comments weren't being displayed in hovers/intellisense correctly, so that was also added",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1075,2016-10-08T17:25:04Z,2016-10-09T15:49:50Z,2016-10-09T17:51:57Z,MERGED,True,469,863,104,https://github.com/shaddockh,Upgrade Monaco to 0.7,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075#issuecomment-252494195,"Monaco 0.7 just released and this updates to that version.
Monaco changes can be found at https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#070
Additionally, the following were fixed in Atomic:

changed the whitespace setting to match the new whitespace setting in Monaco (""none"",""all"",""border"") instead of true/false.  An adapter was put in so that existing true/false entries still work.
discovered that the monaco web workers weren't being utilized, so fixed that so that monaco can run some stuff in a background thread
discovered that comments weren't being displayed in hovers/intellisense correctly, so that was also added","Excellent! Does enabling monaco web workers result in any noticeable speed improvements?
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1075,2016-10-08T17:25:04Z,2016-10-09T15:49:50Z,2016-10-09T17:51:57Z,MERGED,True,469,863,104,https://github.com/shaddockh,Upgrade Monaco to 0.7,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1075#issuecomment-252501210,"Monaco 0.7 just released and this updates to that version.
Monaco changes can be found at https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#070
Additionally, the following were fixed in Atomic:

changed the whitespace setting to match the new whitespace setting in Monaco (""none"",""all"",""border"") instead of true/false.  An adapter was put in so that existing true/false entries still work.
discovered that the monaco web workers weren't being utilized, so fixed that so that monaco can run some stuff in a background thread
discovered that comments weren't being displayed in hovers/intellisense correctly, so that was also added","I didn't notice anything significant.  The typescript completions were already using a custom web worker, so it would be anything else the editor might be using web workers for.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1076,2016-10-10T03:58:43Z,2016-10-10T04:48:50Z,2016-10-10T04:48:50Z,MERGED,True,1,1,1,https://github.com/Type1J,Fixes #1074,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1076,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1076,I kept running into this one since I've been on the move lately. It was simpler to fix than I thought it might be.,I kept running into this one since I've been on the move lately. It was simpler to fix than I thought it might be.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1076,2016-10-10T03:58:43Z,2016-10-10T04:48:50Z,2016-10-10T04:48:50Z,MERGED,True,1,1,1,https://github.com/Type1J,Fixes #1074,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1076,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1076#issuecomment-252537671,I kept running into this one since I've been on the move lately. It was simpler to fix than I thought it might be.,"Great, thanks for the quick fix! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1077,2016-10-10T08:59:07Z,2016-10-10T10:14:01Z,2016-10-10T10:14:05Z,MERGED,True,3753,576,104,https://github.com/JoshEngebretson,"Native Events (typesafe), Object lifetime work, Scene/Component improvements, additional native bindings, fixes, and more",6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1077,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1077,"This PR adds typesafe Native Event generation to the script binding tool.  Work has been done on object lifetimes with a multi-Features Example which can load and unload scenes from memory, component updates are now properly tied to the scene they are in (instead of globally), more native bindings, bug fixes, overall a hearty PR","This PR adds typesafe Native Event generation to the script binding tool.  Work has been done on object lifetimes with a multi-Features Example which can load and unload scenes from memory, component updates are now properly tied to the scene they are in (instead of globally), more native bindings, bug fixes, overall a hearty PR",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1079,2016-10-10T12:26:35Z,2016-10-10T18:32:50Z,2016-12-05T13:10:29Z,CLOSED,False,0,1,1,https://github.com/GarethNN,Animation Transition Fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079,"Resetting the skeleton of a mesh each frame causes animation blending to not work as hoped/expected when transitioning from one animation to another, involving a regression toward the base/T pose. This reset doesn't seem to really be necessary, and it looks like it would be fine to simply lerp from the last position of the skeleton into the new animation frames.
This change removes the skeleton reset, and appears to work well for the cases tested of blending between animations.","Resetting the skeleton of a mesh each frame causes animation blending to not work as hoped/expected when transitioning from one animation to another, involving a regression toward the base/T pose. This reset doesn't seem to really be necessary, and it looks like it would be fine to simply lerp from the last position of the skeleton into the new animation frames.
This change removes the skeleton reset, and appears to work well for the cases tested of blending between animations.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1079,2016-10-10T12:26:35Z,2016-10-10T18:32:50Z,2016-12-05T13:10:29Z,CLOSED,False,0,1,1,https://github.com/GarethNN,Animation Transition Fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079#issuecomment-252604378,"Resetting the skeleton of a mesh each frame causes animation blending to not work as hoped/expected when transitioning from one animation to another, involving a regression toward the base/T pose. This reset doesn't seem to really be necessary, and it looks like it would be fine to simply lerp from the last position of the skeleton into the new animation frames.
This change removes the skeleton reset, and appears to work well for the cases tested of blending between animations.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1079,2016-10-10T12:26:35Z,2016-10-10T18:32:50Z,2016-12-05T13:10:29Z,CLOSED,False,0,1,1,https://github.com/GarethNN,Animation Transition Fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079#issuecomment-252608060,"Resetting the skeleton of a mesh each frame causes animation blending to not work as hoped/expected when transitioning from one animation to another, involving a regression toward the base/T pose. This reset doesn't seem to really be necessary, and it looks like it would be fine to simply lerp from the last position of the skeleton into the new animation frames.
This change removes the skeleton reset, and appears to work well for the cases tested of blending between animations.","@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1079,2016-10-10T12:26:35Z,2016-10-10T18:32:50Z,2016-12-05T13:10:29Z,CLOSED,False,0,1,1,https://github.com/GarethNN,Animation Transition Fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1079#issuecomment-252702684,"Resetting the skeleton of a mesh each frame causes animation blending to not work as hoped/expected when transitioning from one animation to another, involving a regression toward the base/T pose. This reset doesn't seem to really be necessary, and it looks like it would be fine to simply lerp from the last position of the skeleton into the new animation frames.
This change removes the skeleton reset, and appears to work well for the cases tested of blending between animations.","I have not noticed this, it would be good to have a reproduction case.  It seems like it is an issue which could be related to a bad FBX import, bone animation, or something else, not sure of the side effects on not reseting the master skeleton, which there may be some...
In the meantime, let's get the change up will land in #1089",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1080,2016-10-10T13:37:21Z,2016-10-10T18:20:13Z,2016-10-10T18:20:18Z,MERGED,True,40,10,1,https://github.com/GarethNN,Reparent multiple nodes,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1080,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1080,If you have multiple nodes selected you can drag all of them and reparent them to a single parent,If you have multiple nodes selected you can drag all of them and reparent them to a single parent,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1080,2016-10-10T13:37:21Z,2016-10-10T18:20:13Z,2016-10-10T18:20:18Z,MERGED,True,40,10,1,https://github.com/GarethNN,Reparent multiple nodes,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1080,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1080#issuecomment-252699629,If you have multiple nodes selected you can drag all of them and reparent them to a single parent,Very nice! Thanks :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1082,2016-10-10T15:14:00Z,2016-10-10T18:20:58Z,2016-12-05T13:11:12Z,MERGED,True,35,34,3,https://github.com/GarethNN,Search Bar Update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1082,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1082,Moved the search implementation to where the other widget events are eing handled.,Moved the search implementation to where the other widget events are eing handled.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1082,2016-10-10T15:14:00Z,2016-10-10T18:20:58Z,2016-12-05T13:11:12Z,MERGED,True,35,34,3,https://github.com/GarethNN,Search Bar Update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1082,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1082#issuecomment-252699803,Moved the search implementation to where the other widget events are eing handled.,"Thanks @raheelx , nice improvements :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1083,2016-10-10T16:08:52Z,2016-10-10T18:26:14Z,2016-12-05T13:10:16Z,CLOSED,False,7,0,1,https://github.com/GarethNN,AnimationController - Bug fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083,Added a null check to the AnimationController's animations array.,Added a null check to the AnimationController's animations array.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1083,2016-10-10T16:08:52Z,2016-10-10T18:26:14Z,2016-12-05T13:10:16Z,CLOSED,False,7,0,1,https://github.com/GarethNN,AnimationController - Bug fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083#issuecomment-252681137,Added a null check to the AnimationController's animations array.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1083,2016-10-10T16:08:52Z,2016-10-10T18:26:14Z,2016-12-05T13:10:16Z,CLOSED,False,7,0,1,https://github.com/GarethNN,AnimationController - Bug fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083#issuecomment-252681412,Added a null check to the AnimationController's animations array.,"In debug builds, should this maybe be a warning?  This would mean an animation resource failed to load, right?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1083,2016-10-10T16:08:52Z,2016-10-10T18:26:14Z,2016-12-05T13:10:16Z,CLOSED,False,7,0,1,https://github.com/GarethNN,AnimationController - Bug fix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1083#issuecomment-252701021,Added a null check to the AnimationController's animations array.,"The logging would probably get spammy, this is probably something to handle further up the chain... there shouldn't be null resources (this is an error condition), however guarding against crashes is good :)
Will land in #1088",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1084,2016-10-10T16:09:34Z,2016-10-10T18:19:11Z,2016-12-05T13:10:44Z,CLOSED,False,10,0,1,https://github.com/GarethNN,Clamped Lerp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1084,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1084,Added a Clamped Lerp to Vector3,Added a Clamped Lerp to Vector3,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1084,2016-10-10T16:09:34Z,2016-10-10T18:19:11Z,2016-12-05T13:10:44Z,CLOSED,False,10,0,1,https://github.com/GarethNN,Clamped Lerp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1084,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1084#issuecomment-252699375,Added a Clamped Lerp to Vector3,"Great thanks, will land in #1087",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1085,2016-10-10T16:33:57Z,2016-10-10T18:12:23Z,2016-12-05T13:10:57Z,CLOSED,False,20,1,1,https://github.com/GarethNN,DDS Bugfix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085,https://github.com/GarethNN,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085,Making sure DDS files are loaded properly from GetTempResource.,Making sure DDS files are loaded properly from GetTempResource.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1085,2016-10-10T16:33:57Z,2016-10-10T18:12:23Z,2016-12-05T13:10:57Z,CLOSED,False,20,1,1,https://github.com/GarethNN,DDS Bugfix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085#issuecomment-252680695,Making sure DDS files are loaded properly from GetTempResource.,"The build failure is:
C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Resource\ResourceCache.cpp(726): error C3861: 'LOGDEBUG': identifier not found
ATOMIC_LOGDEBUG is the new macro, I can fix this up today ‚öΩÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1085,2016-10-10T16:33:57Z,2016-10-10T18:12:23Z,2016-12-05T13:10:57Z,CLOSED,False,20,1,1,https://github.com/GarethNN,DDS Bugfix,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1085#issuecomment-252697799,Making sure DDS files are loaded properly from GetTempResource.,"Ok, will land in #1086 when green",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1086,2016-10-10T18:11:46Z,2016-10-10T18:47:17Z,2016-10-10T18:47:19Z,MERGED,True,24,1,1,https://github.com/JoshEngebretson,(DDS Resource Loading) Updates for PR #1085 ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1086,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1086,"Adding ATOMIC_BEGIN/ATOMIC_END around changed block, fixes logging macro","Adding ATOMIC_BEGIN/ATOMIC_END around changed block, fixes logging macro",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1087,2016-10-10T18:18:47Z,2016-10-10T19:18:31Z,2016-10-10T19:18:33Z,MERGED,True,12,0,1,https://github.com/JoshEngebretson,Vector3 ClampedLerp (Update to PR #1084),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1087,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1087,Applying Atomic Begin/Atomic End to change block,Applying Atomic Begin/Atomic End to change block,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1088,2016-10-10T18:24:59Z,2016-10-10T19:54:07Z,2016-10-10T19:54:10Z,MERGED,True,14,2,1,https://github.com/JoshEngebretson,AnimationController resource null check  (Update for PR #1083),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1088,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1088,"Adding comments, this should maybe be a warning on debug builds, though could get spammy","Adding comments, this should maybe be a warning on debug builds, though could get spammy",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1088,2016-10-10T18:24:59Z,2016-10-10T19:54:07Z,2016-10-10T19:54:10Z,MERGED,True,14,2,1,https://github.com/JoshEngebretson,AnimationController resource null check  (Update for PR #1083),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1088,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1088#issuecomment-252719736,"Adding comments, this should maybe be a warning on debug builds, though could get spammy",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1089,2016-10-10T18:30:45Z,2016-10-10T20:27:09Z,2016-10-10T20:27:12Z,MERGED,True,7,1,1,https://github.com/JoshEngebretson,Update for PR #1079,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1089,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1089,Adding Atomic Begin/Atomic End and a comment about the change,Adding Atomic Begin/Atomic End and a comment about the change,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1089,2016-10-10T18:30:45Z,2016-10-10T20:27:09Z,2016-10-10T20:27:12Z,MERGED,True,7,1,1,https://github.com/JoshEngebretson,Update for PR #1079,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1089,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1089#issuecomment-252729195,Adding Atomic Begin/Atomic End and a comment about the change,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1090,2016-10-11T00:29:35Z,2016-10-11T00:59:50Z,2016-10-11T00:59:53Z,MERGED,True,1,3,1,https://github.com/JoshEngebretson,Fix exit crash on UIWidget cleanup,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1090,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1090,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1091,2016-10-11T20:38:53Z,2016-10-11T21:36:43Z,2016-10-11T21:36:52Z,MERGED,True,424,2,6,https://github.com/JoshEngebretson,Adding documentation control to NET project generator and AtomicNET mono doc task,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1091,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1091,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1092,2016-10-11T21:46:53Z,2016-10-11T22:38:58Z,2016-10-11T22:39:00Z,MERGED,True,3,0,1,https://github.com/JoshEngebretson,Add overload for File::ReadText which returns string,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1092,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1092,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1093,2016-10-12T14:27:23Z,2016-10-12T14:56:21Z,2016-10-12T14:56:24Z,MERGED,True,1,2,1,https://github.com/JohnnyWahib,- Material inspector now removes references to textures correctly,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093,Stopped the project frame from referencing the texture being assigned from the resource select menu.,Stopped the project frame from referencing the texture being assigned from the resource select menu.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1093,2016-10-12T14:27:23Z,2016-10-12T14:56:21Z,2016-10-12T14:56:24Z,MERGED,True,1,2,1,https://github.com/JohnnyWahib,- Material inspector now removes references to textures correctly,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093#issuecomment-253229010,Stopped the project frame from referencing the texture being assigned from the resource select menu.,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1093,2016-10-12T14:27:23Z,2016-10-12T14:56:21Z,2016-10-12T14:56:24Z,MERGED,True,1,2,1,https://github.com/JohnnyWahib,- Material inspector now removes references to textures correctly,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1093#issuecomment-253229789,Stopped the project frame from referencing the texture being assigned from the resource select menu.,"@JohnnyWahib Hola!  Thanks for the PR üëç
@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1095,2016-10-12T17:33:21Z,2016-10-12T18:08:58Z,2016-10-12T18:09:00Z,MERGED,True,87,56,3,https://github.com/JoshEngebretson,Parse class doc strings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1095,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1095,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1096,2016-10-12T22:54:35Z,2016-10-13T13:28:13Z,2016-10-13T17:44:58Z,MERGED,True,10,0,1,https://github.com/Type1J,Adding the Web subsystem back to Engine.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1096,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1096,"Merging the current Urho3D was really good, but it did have some casualties. The Web subsystem was giving a null because it was never registered. This PR fixes that problem.","Merging the current Urho3D was really good, but it did have some casualties. The Web subsystem was giving a null because it was never registered. This PR fixes that problem.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1096,2016-10-12T22:54:35Z,2016-10-13T13:28:13Z,2016-10-13T17:44:58Z,MERGED,True,10,0,1,https://github.com/Type1J,Adding the Web subsystem back to Engine.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1096,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1096#issuecomment-253512737,"Merging the current Urho3D was really good, but it did have some casualties. The Web subsystem was giving a null because it was never registered. This PR fixes that problem.","Great thanks, Engine.cpp had a few dropouts",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097#issuecomment-253511876,,It looks like #1098 was pushed to LumaDigital:vse as well,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097#issuecomment-253514462,,"I guess Renderer2D was the unknown component :)  Renderer2D is an internal class (self creates when needed and has no useful user API), thinking should use this as an opportunity to improve the error handling to report the unexposed class and not throw.  We should filter in this case, as we don't want to require all native components be registered with script bindings.
I'll work on this today.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/mattbenic,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097#issuecomment-253517964,,"Doh, yeah sorry should have had the Renderer2D one in a separate feature branch. I'll get those into separate feature branches for you tomorrow.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097#issuecomment-253556956,,"That's ok, see my note on Renderer2D above, I'll address this today.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1097,2016-10-13T07:22:24Z,2016-10-13T13:35:13Z,2016-10-14T08:37:51Z,CLOSED,False,216,35,18,https://github.com/mattbenic,Expose Renderer2D to script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097,https://github.com/mattbenic,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1097#issuecomment-253741714,,"Saw that, thanks. I'll replace our band-aid with the proper fix",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1098,2016-10-13T12:38:02Z,2016-10-19T13:45:29Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/weinandvv,Profiler Update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1098,2016-10-13T12:38:02Z,2016-10-19T13:45:29Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/weinandvv,Profiler Update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098#issuecomment-253501141,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1098,2016-10-13T12:38:02Z,2016-10-19T13:45:29Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/weinandvv,Profiler Update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1098#issuecomment-254816856,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Thanks, I'll go over the new improved PR soon, closing this PR.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1100,2016-10-13T18:36:37Z,2016-10-13T19:03:20Z,2016-10-13T19:03:22Z,MERGED,True,26,8,3,https://github.com/JoshEngebretson,Remove exception from native type wrapping,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1100,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1100,"Attempting to wrap a native of unknown type no longer throws an exception, instead returns null with optional logging, these cases are quite rare and as C# is strongly typed, mostly happen when querying event data.
For example, Renderer2D is an internal native class which generates a component added event, the event data will now have a null for the component parameter, instead of throwing an exception when accessed","Attempting to wrap a native of unknown type no longer throws an exception, instead returns null with optional logging, these cases are quite rare and as C# is strongly typed, mostly happen when querying event data.
For example, Renderer2D is an internal native class which generates a component added event, the event data will now have a null for the component parameter, instead of throwing an exception when accessed",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1101,2016-10-13T21:41:16Z,2016-10-14T13:20:06Z,2016-10-14T19:45:25Z,MERGED,True,21,4,1,https://github.com/JimMarlowe,linux xbuild config test,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1101,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1101,"Test for the existence of xbuild by looking for it as an installed program, instead of using a node command.
I didn't know if you wanted the OSX to do the same thing, so I left it as is, since it was working.","Test for the existence of xbuild by looking for it as an installed program, instead of using a node command.
I didn't know if you wanted the OSX to do the same thing, so I left it as is, since it was working.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1101,2016-10-13T21:41:16Z,2016-10-14T13:20:06Z,2016-10-14T19:45:25Z,MERGED,True,21,4,1,https://github.com/JimMarlowe,linux xbuild config test,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1101,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1101#issuecomment-253796937,"Test for the existence of xbuild by looking for it as an installed program, instead of using a node command.
I didn't know if you wanted the OSX to do the same thing, so I left it as is, since it was working.","Great, landing ‚úàÔ∏è
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1102,2016-10-14T09:43:44Z,2016-10-19T13:37:13Z,2017-03-27T08:33:00Z,CLOSED,False,214,34,17,https://github.com/mattbenic,Profiler improvements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1102,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1102,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1102,2016-10-14T09:43:44Z,2016-10-19T13:37:13Z,2017-03-27T08:33:00Z,CLOSED,False,214,34,17,https://github.com/mattbenic,Profiler improvements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1102,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1102#issuecomment-254814531,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Closing, alternate incoming with review corrections rebased",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1103,2016-10-15T11:21:00Z,2016-10-15T11:50:46Z,2016-10-15T11:50:48Z,MERGED,True,183,42,16,https://github.com/JoshEngebretson,Adding interface support to C# scripting,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1103,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1103,This PR picks up native API related to Serializer/Deserializer interfaces,This PR picks up native API related to Serializer/Deserializer interfaces,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1104,2016-10-16T19:12:13Z,2016-10-16T20:10:42Z,2016-10-16T20:10:43Z,MERGED,True,373,18,14,https://github.com/JoshEngebretson,"Resource to Cache mapping at runtime, consistent StringHash C# mapping",3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1104,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1104,"This PR introduces runtime resource -> cache mapping with support for overloaded resource types.  Given a FBX in the project at Resources/Models/Robo_01.fbx, the following code could be used to access it and setup animations/materials from script:
var roboNode = scene.CreateChild(""Roboman"");
var roboModel = roboNode.CreateComponent<AnimatedModel>();
roboModel.Model = cache.Get<Model>(""Models/Robo_01.fbx"");
roboModel.SetMaterial(cache.Get<Material>(""Materials/Robot_01.material""));

var animCtrl = roboNode.CreateComponent<AnimationController>();

animCtrl.PlayExclusive(""walk@Models/Robo_01.fbx"", 0, true);
Additionally, and a significant change, StringHash's are now mapped consistently across C++/C#, the marshaling is via unsigned/uint, there is a need to profile in case implicit string -> StringHash conversion is being hit hard.","This PR introduces runtime resource -> cache mapping with support for overloaded resource types.  Given a FBX in the project at Resources/Models/Robo_01.fbx, the following code could be used to access it and setup animations/materials from script:
var roboNode = scene.CreateChild(""Roboman"");
var roboModel = roboNode.CreateComponent<AnimatedModel>();
roboModel.Model = cache.Get<Model>(""Models/Robo_01.fbx"");
roboModel.SetMaterial(cache.Get<Material>(""Materials/Robot_01.material""));

var animCtrl = roboNode.CreateComponent<AnimationController>();

animCtrl.PlayExclusive(""walk@Models/Robo_01.fbx"", 0, true);
Additionally, and a significant change, StringHash's are now mapped consistently across C++/C#, the marshaling is via unsigned/uint, there is a need to profile in case implicit string -> StringHash conversion is being hit hard.",True,{'THUMBS_UP': ['https://github.com/christoffersch']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1105,2016-10-17T15:38:35Z,2016-10-17T16:06:08Z,2016-10-17T16:06:23Z,MERGED,True,7,4,1,https://github.com/JohnnyWahib,Allow animation generation for skeleton hierarchies without skinned meshes,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1105,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1105,This change allows users to import animations into the engine without having to include a model's skinned mesh in each export. Facilitates a common work flow used in other game engines.,This change allows users to import animations into the engine without having to include a model's skinned mesh in each export. Facilitates a common work flow used in other game engines.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1105,2016-10-17T15:38:35Z,2016-10-17T16:06:08Z,2016-10-17T16:06:23Z,MERGED,True,7,4,1,https://github.com/JohnnyWahib,Allow animation generation for skeleton hierarchies without skinned meshes,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1105,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1105#issuecomment-254252541,This change allows users to import animations into the engine without having to include a model's skinned mesh in each export. Facilitates a common work flow used in other game engines.,"Great, thanks for the PR",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1106,2016-10-17T21:14:42Z,2016-10-17T21:44:16Z,2016-10-17T21:44:18Z,MERGED,True,278,65,13,https://github.com/JoshEngebretson,Atomic C# interface mixins,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1106,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1106,"Serializer/Deserializer interfaces now properly specified with generated members for both the interface and implementation classes, including overloads
Adds custom File Read/Write for arrays of bytes","Serializer/Deserializer interfaces now properly specified with generated members for both the interface and implementation classes, including overloads
Adds custom File Read/Write for arrays of bytes",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1107,2016-10-18T00:23:59Z,2016-10-18T00:48:47Z,2016-10-18T00:48:50Z,MERGED,True,47,55,5,https://github.com/JoshEngebretson,Adding/updating --with-web for Build_AtomicEditor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1107,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1107,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1110,2016-10-18T19:11:27Z,2016-10-18T19:54:26Z,2016-10-18T19:54:29Z,MERGED,True,291,279,36,https://github.com/JoshEngebretson,Restoring ability to load examples directly from AtomicExamples repo,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1110,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1110,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1111,2016-10-18T23:22:48Z,2016-10-18T23:45:02Z,2016-10-18T23:45:04Z,MERGED,True,85,8,8,https://github.com/JoshEngebretson,Project handling improvements,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1111,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1111,"Only build PCL + Desktop when refreshing project assembly from Atomic Editor
Fix for issue with Graphics::RaiseWindow on Windows (fixed in SDL)
Protect against launching more than one player processes
Additional clarification messages for builds","Only build PCL + Desktop when refreshing project assembly from Atomic Editor
Fix for issue with Graphics::RaiseWindow on Windows (fixed in SDL)
Protect against launching more than one player processes
Additional clarification messages for builds",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1112,2016-10-19T13:38:15Z,2016-10-19T13:56:37Z,2016-10-19T13:56:37Z,CLOSED,False,240,34,16,https://github.com/weinandvv,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1112,2016-10-19T13:38:15Z,2016-10-19T13:56:37Z,2016-10-19T13:56:37Z,CLOSED,False,240,34,16,https://github.com/weinandvv,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112#issuecomment-254814880,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1112,2016-10-19T13:38:15Z,2016-10-19T13:56:37Z,2016-10-19T13:56:37Z,CLOSED,False,240,34,16,https://github.com/weinandvv,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112#issuecomment-254816495,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Great, thanks for the updated PR, I'll have a look soon, was the intent to make this PR from LumaDigital:vse btw and not a feature branch?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1112,2016-10-19T13:38:15Z,2016-10-19T13:56:37Z,2016-10-19T13:56:37Z,CLOSED,False,240,34,16,https://github.com/weinandvv,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,https://github.com/mattbenic,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112#issuecomment-254818425,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",vse and the feature branch are currently on the same commit,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1112,2016-10-19T13:38:15Z,2016-10-19T13:56:37Z,2016-10-19T13:56:37Z,CLOSED,False,240,34,16,https://github.com/weinandvv,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1112#issuecomment-254818516,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",let me replace it,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1113,2016-10-19T13:52:30Z,2016-11-04T18:54:34Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/mattbenic,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1113,2016-10-19T13:52:30Z,2016-11-04T18:54:34Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/mattbenic,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113#issuecomment-256040970,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","Thanks for the updated PR, will go over this as soon as I can üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1113,2016-10-19T13:52:30Z,2016-11-04T18:54:34Z,2017-03-27T08:33:17Z,CLOSED,False,240,34,16,https://github.com/mattbenic,"Divided the triangles into categories ""All pass"", ""Single pass"" and ""‚Ä¶",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1113#issuecomment-258518364,"‚Ä¶Editor""
Created a profiler widget to be added to the scene that lets you view the information easier when a scene is open
Added that a widgets disabled opacity be set without changing it in skin","I tweaked this in #1136, the per frame update was quite expensive and reduced performance by 4-6 frames a second.  I also reduced some complexity and maintained the system ui usage for the debug hud",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1114,2016-10-19T17:14:51Z,2016-10-19T18:03:20Z,2016-10-19T18:03:24Z,MERGED,True,71,3,3,https://github.com/JoshEngebretson,Handle partial AtomicEditor C# builds on macOS/Linux using xbuild,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1114,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1114,Bonus: handle missing/multiple .atomic project files,Bonus: handle missing/multiple .atomic project files,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1115,2016-10-19T18:49:12Z,2016-10-19T19:17:59Z,2016-10-19T19:18:01Z,MERGED,True,4,0,2,https://github.com/JoshEngebretson,Adding support for unsigned short to C# bindings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1115,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1115,Closes #1073,Closes #1073,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1117,2016-10-19T22:57:18Z,2016-10-20T19:52:47Z,2016-10-21T13:52:59Z,MERGED,True,336,76,21,https://github.com/JimMarlowe,webgl upgrade,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117,"This allows for a more refined WebGL experience, with some different themes for the web page, an icon and the ability to change the game frame size. I was trying to make the game iframe responsive, but ran into possible cross domain complications, so fell back to setting the width and height.
I also whacked the splash screen icons, since they are not implemented.","This allows for a more refined WebGL experience, with some different themes for the web page, an icon and the ability to change the game frame size. I was trying to make the game iframe responsive, but ran into possible cross domain complications, so fell back to setting the width and height.
I also whacked the splash screen icons, since they are not implemented.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1117,2016-10-19T22:57:18Z,2016-10-20T19:52:47Z,2016-10-21T13:52:59Z,MERGED,True,336,76,21,https://github.com/JimMarlowe,webgl upgrade,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117#issuecomment-255178858,"This allows for a more refined WebGL experience, with some different themes for the web page, an icon and the ability to change the game frame size. I was trying to make the game iframe responsive, but ran into possible cross domain complications, so fell back to setting the width and height.
I also whacked the splash screen icons, since they are not implemented.","I'll fix the initialization for the theme and game width, height.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1117,2016-10-19T22:57:18Z,2016-10-20T19:52:47Z,2016-10-21T13:52:59Z,MERGED,True,336,76,21,https://github.com/JimMarlowe,webgl upgrade,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1117#issuecomment-255210131,"This allows for a more refined WebGL experience, with some different themes for the web page, an icon and the ability to change the game frame size. I was trying to make the game iframe responsive, but ran into possible cross domain complications, so fell back to setting the width and height.
I also whacked the splash screen icons, since they are not implemented.","Great, thanks! üëç
I like the photography btw üì∑
LANDING",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1120,2016-10-20T19:44:50Z,2016-10-20T21:54:33Z,2016-10-20T21:54:36Z,MERGED,True,53,21,5,https://github.com/JoshEngebretson,"Fix for space in argument, when argument is already quoted",3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1120,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1120,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1121,2016-10-20T22:21:20Z,2016-10-20T23:32:26Z,2016-10-20T23:32:28Z,MERGED,True,29,15,2,https://github.com/JoshEngebretson,Handle debugging of deployed managed apps,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1121,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1121,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1123,2016-10-21T15:15:13Z,2016-10-25T13:06:42Z,2016-10-25T13:06:42Z,MERGED,True,304,5,13,https://github.com/mattbenic,"Build command autologging, file stream wrapper, ResourceCache.Scan",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1123,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1123,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1123,2016-10-21T15:15:13Z,2016-10-25T13:06:42Z,2016-10-25T13:06:42Z,MERGED,True,304,5,13,https://github.com/mattbenic,"Build command autologging, file stream wrapper, ResourceCache.Scan",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1123,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1123#issuecomment-256029007,,"Great work, landing!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1124,2016-10-21T21:58:40Z,2016-10-21T22:35:35Z,2016-10-21T22:35:38Z,MERGED,True,33,44,5,https://github.com/JoshEngebretson,AtomicNET Subsystem cleanups,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1124,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1124,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1126,2016-10-24T22:16:53Z,2016-10-25T13:27:26Z,2016-11-03T22:42:58Z,CLOSED,False,13,0,1,https://github.com/JimMarlowe,fix linux child processes not dying,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,"This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.","This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1126,2016-10-24T22:16:53Z,2016-10-25T13:27:26Z,2016-11-03T22:42:58Z,CLOSED,False,13,0,1,https://github.com/JimMarlowe,fix linux child processes not dying,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126#issuecomment-255883662,"This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.","Does this logic need to be in the parent application or the child, both?  If the child, maybe a better place would be in the IPCClientApp: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/AtomicApp/IPCClientApp.cpp
I'd also like to look into why the managed player exits with the editor fine, while the managed service doesn't",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1126,2016-10-24T22:16:53Z,2016-10-25T13:27:26Z,2016-11-03T22:42:58Z,CLOSED,False,13,0,1,https://github.com/JimMarlowe,fix linux child processes not dying,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126#issuecomment-256034020,"This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.","Thanks for the leg work :)
I am looking into this, need to see why the managed player doesn't have the issue. If possible would like a clean exit from the NET service (and other processes) as well.
From what I am reading prctl(PR_SET_PDEATHSIG, SIGHUP); is called in the child process so if necessary will move to the IPC subsystem.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1126,2016-10-24T22:16:53Z,2016-10-25T13:27:26Z,2016-11-03T22:42:58Z,CLOSED,False,13,0,1,https://github.com/JimMarlowe,fix linux child processes not dying,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126#issuecomment-256063738,"This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.","Sorry I had to fight with windows last night.
prctl is a kernel service, and it appears to save the child pids when the parent forks off a new sub process. When the parent dies the kernel then takes the list of child pids and issues whatever signal you specified to be issued to them. This would enforce the policy that any process would clean up it's children, which appears to be the case with OSX and Windows, and avoid zombie processes that the user must hunt down and kill, re #1125.
If you intend to have a linux child process stay running after the parent exits, you do a double fork. I'm guessing OSX and windows have the same behaviour and launching VS/XS/MD is using Poco::Process::launch()  achieves this in a platform independent way.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1126,2016-10-24T22:16:53Z,2016-10-25T13:27:26Z,2016-11-03T22:42:58Z,CLOSED,False,13,0,1,https://github.com/JimMarlowe,fix linux child processes not dying,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1126#issuecomment-256073007,"This is to fix the AtomicNETService.exe not stopping when the AtomicEditor is closed #1125
Using the StackOverflow most popular answer, it appears to work without (bad) side effects.","np, I filed #1128 as a follow up",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1127,2016-10-25T15:21:32Z,2016-10-25T20:29:08Z,2016-10-25T20:29:10Z,MERGED,True,24,2,4,https://github.com/JoshEngebretson,Adding IPC::Shutdown for cleaning up and closing child processes,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1127,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1127,Closes #1125,Closes #1125,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1129,2016-10-26T19:17:36Z,2016-10-26T21:01:31Z,2016-10-26T21:01:33Z,MERGED,True,63,31,12,https://github.com/JoshEngebretson,"Adding AtomicExamples as a submodule, improved handling of not having submodules initialized",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1129,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1129,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1131,2016-10-29T14:41:33Z,2016-10-29T16:36:35Z,2016-10-29T16:36:36Z,MERGED,True,15,2,3,https://github.com/JoshEngebretson,Hooking in C++ feature examples,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1131,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1131,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1132,2016-10-31T23:00:02Z,2016-11-01T14:37:40Z,2016-11-03T22:42:55Z,CLOSED,False,51,5,5,https://github.com/JimMarlowe,graphics FPS api,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1132,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1132,"This pr adds a graphics frames per second api to Atomic.
The api is:   float Graphics::GetGraphicsFps() for C++,
Atomic.graphics.getGraphicsFps()  for JS","This pr adds a graphics frames per second api to Atomic.
The api is:   float Graphics::GetGraphicsFps() for C++,
Atomic.graphics.getGraphicsFps()  for JS",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1132,2016-10-31T23:00:02Z,2016-11-01T14:37:40Z,2016-11-03T22:42:55Z,CLOSED,False,51,5,5,https://github.com/JimMarlowe,graphics FPS api,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1132,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1132#issuecomment-257582784,"This pr adds a graphics frames per second api to Atomic.
The api is:   float Graphics::GetGraphicsFps() for C++,
Atomic.graphics.getGraphicsFps()  for JS","Cool, I tweaked this in #1133 to add the current fps to the engine subsystem (which is consistent with the other fps functionality (get/set min/max fps, etc).  It also avoids needing to touch multiple graphics subsystems as they (unfortunately) don't have a common base constructor.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1133,2016-11-01T14:33:40Z,2016-11-01T14:56:04Z,2016-12-06T02:58:20Z,MERGED,True,30,4,2,https://github.com/JoshEngebretson,Adding current fps to engine subsystem,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1133,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1133,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1134,2016-11-03T22:55:16Z,2016-11-04T15:27:53Z,2016-11-08T21:38:53Z,MERGED,True,4,0,1,https://github.com/JimMarlowe,Copy libAtomicPlayer.so to build dir,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1134,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1134,"The --with-android task correctly builds the libAtomicPlayer.so, and it copies it into AtomicEditor.app/Contents/Resources/ToolData/Deployment/Android/libs/armeabi-v7a, for managed C# deployment. This leaves the in-editor Build Android option unable to create an apk, as Dirk found in a Q&A entry.  This additional copy will restore the editor Build android functionality.","The --with-android task correctly builds the libAtomicPlayer.so, and it copies it into AtomicEditor.app/Contents/Resources/ToolData/Deployment/Android/libs/armeabi-v7a, for managed C# deployment. This leaves the in-editor Build Android option unable to create an apk, as Dirk found in a Q&A entry.  This additional copy will restore the editor Build android functionality.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1134,2016-11-03T22:55:16Z,2016-11-04T15:27:53Z,2016-11-08T21:38:53Z,MERGED,True,4,0,1,https://github.com/JimMarlowe,Copy libAtomicPlayer.so to build dir,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1134,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1134#issuecomment-258462432,"The --with-android task correctly builds the libAtomicPlayer.so, and it copies it into AtomicEditor.app/Contents/Resources/ToolData/Deployment/Android/libs/armeabi-v7a, for managed C# deployment. This leaves the in-editor Build Android option unable to create an apk, as Dirk found in a Q&A entry.  This additional copy will restore the editor Build android functionality.","Thanks for the PR, good catch üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1135,2016-11-04T16:02:00Z,2016-11-04T16:26:16Z,2016-11-04T16:26:18Z,MERGED,True,62,171,12,https://github.com/JoshEngebretson,"Get AtomicTool (net compile) running outside of the build tree, for example on a CI box",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1135,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1135,This PR cleans up ToolEnvironment initialization and makes it possible to running AtomicTool (including the net compile command) outside of the build tree,This PR cleans up ToolEnvironment initialization and makes it possible to running AtomicTool (including the net compile command) outside of the build tree,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1136,2016-11-04T18:30:15Z,2016-11-04T18:55:28Z,2016-11-04T18:55:30Z,MERGED,True,154,11,11,https://github.com/JoshEngebretson,Num pass/single pass primitive metrics for Direct3D9,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1136,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1136,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1137,2016-11-04T19:27:56Z,2016-11-04T19:59:02Z,2016-11-04T19:59:03Z,MERGED,True,5,3,1,https://github.com/JoshEngebretson,Fix metrics,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1137,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1137,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1147,2016-11-12T16:26:31Z,2016-11-12T16:50:14Z,2016-11-12T16:50:16Z,MERGED,True,12,5,2,https://github.com/JoshEngebretson,"Adding Tools -> Logs folder for opening log file location, making tools folder available when no project loaded",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1147,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1147,"This PR adds a logs subitem to the Tools menu which opens the folder containing the editor or player log files

Closes #1144","This PR adds a logs subitem to the Tools menu which opens the folder containing the editor or player log files

Closes #1144",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1148,2016-11-12T19:09:05Z,2016-11-12T20:12:04Z,2016-11-12T20:12:07Z,MERGED,True,6,2,2,https://github.com/JoshEngebretson,Only widgets should receive drag end events,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1148,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1148,Closes #1145,Closes #1145,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1150,2016-11-14T13:42:04Z,2016-11-18T20:28:11Z,2016-12-05T12:00:09Z,CLOSED,False,66,29,9,https://github.com/mattbenic,A number of small issue fixes,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1150,2016-11-14T13:42:04Z,2016-11-18T20:28:11Z,2016-12-05T12:00:09Z,CLOSED,False,66,29,9,https://github.com/mattbenic,A number of small issue fixes,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150#issuecomment-260668732,,"Thanks for the PR, just the one issue and can land üëç",True,{'THUMBS_UP': ['https://github.com/mattbenic']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1150,2016-11-14T13:42:04Z,2016-11-18T20:28:11Z,2016-12-05T12:00:09Z,CLOSED,False,66,29,9,https://github.com/mattbenic,A number of small issue fixes,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1150#issuecomment-261633704,,"Ok, I fixed this up in #1179 and will land from there, I also added #1166 to the Build 1 milestone for tracking purposes, and filed #1178, whew :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1151,2016-11-14T19:30:00Z,2016-11-14T20:23:08Z,2016-11-14T20:23:10Z,MERGED,True,2,1,1,https://github.com/JoshEngebretson,Fixing uninitialized tooltip variable,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1151,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1151,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1156,2016-11-15T18:49:31Z,2016-11-15T19:27:49Z,2016-11-15T19:27:54Z,MERGED,True,17,13,1,https://github.com/JoshEngebretson,Updating README.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1156,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1156,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1158,2016-11-16T01:26:47Z,2016-11-16T03:13:15Z,2016-11-16T03:16:37Z,MERGED,True,9,1,1,https://github.com/shaddockh,Fixes #177 - Display name of JS file in inspector when a JS component is selected,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1158,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1158,"I opted for just displaying the bare .js filename with the .js file extension here.
So,
Components/Spinner.js would be titled Spinner.js.  That should give enough information to know that it is a JSComponent and that it resides in Spinner.js and doesn't take up extra screen real-estate on the title bar.
I didn't touch the way the C# components display (the class name).","I opted for just displaying the bare .js filename with the .js file extension here.
So,
Components/Spinner.js would be titled Spinner.js.  That should give enough information to know that it is a JSComponent and that it resides in Spinner.js and doesn't take up extra screen real-estate on the title bar.
I didn't touch the way the C# components display (the class name).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1158,2016-11-16T01:26:47Z,2016-11-16T03:13:15Z,2016-11-16T03:16:37Z,MERGED,True,9,1,1,https://github.com/shaddockh,Fixes #177 - Display name of JS file in inspector when a JS component is selected,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1158,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1158#issuecomment-260841884,"I opted for just displaying the bare .js filename with the .js file extension here.
So,
Components/Spinner.js would be titled Spinner.js.  That should give enough information to know that it is a JSComponent and that it resides in Spinner.js and doesn't take up extra screen real-estate on the title bar.
I didn't touch the way the C# components display (the class name).","Great!  For posterity, this is the very first issue closed for an Atomic Build.  Congrats and sorry if this makes more than one thrill for the day ;)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1163,2016-11-16T22:46:20Z,2016-11-16T23:42:21Z,2016-12-06T02:58:18Z,MERGED,True,196,73,7,https://github.com/JoshEngebretson,Consistent AtomicNET.dll referencing regardless of build,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1163,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1163,"This PR introduces an AtomicNET/Lib folder to C# projects which contains the AtomicNET native and managed libraries, including desktop and mobile.  This facilitates a consistent assembly referencing between custom external solutions and generated ones.  It also is a consistent assembly reference for both projects opened by a development build of the editor, as well as a redistributable one.
It also cleans up absolute paths being used in csproj, which should make solutions portable across machines.  Note*: There may still be some cases of absolute paths to flag, I did not test moving the solution across machines.
This is a pretty core change, Windows, OSX, Android, iOS, have been tested.  Linux should also work once past CI.
One issue introduced by the change to binary references + dependencies instead of project references where they were possible, is that source navigation between the dependent and the project no longer works and instead, since it is now a binary reference, navigation brings you to the binary assembly explorer and not the source.   It is still however possible to trace and setup breakpoints in the development build AtomicNET sources.
The external solution test was changed to reference the AtomicNET binary and works both when AtomicNET is available (with debugging) in a development build and when opened from a binary editor installation.  AtomicTool is also able to build the external solution project.
Closes #1142","This PR introduces an AtomicNET/Lib folder to C# projects which contains the AtomicNET native and managed libraries, including desktop and mobile.  This facilitates a consistent assembly referencing between custom external solutions and generated ones.  It also is a consistent assembly reference for both projects opened by a development build of the editor, as well as a redistributable one.
It also cleans up absolute paths being used in csproj, which should make solutions portable across machines.  Note*: There may still be some cases of absolute paths to flag, I did not test moving the solution across machines.
This is a pretty core change, Windows, OSX, Android, iOS, have been tested.  Linux should also work once past CI.
One issue introduced by the change to binary references + dependencies instead of project references where they were possible, is that source navigation between the dependent and the project no longer works and instead, since it is now a binary reference, navigation brings you to the binary assembly explorer and not the source.   It is still however possible to trace and setup breakpoints in the development build AtomicNET sources.
The external solution test was changed to reference the AtomicNET binary and works both when AtomicNET is available (with debugging) in a development build and when opened from a binary editor installation.  AtomicTool is also able to build the external solution project.
Closes #1142",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1164,2016-11-17T01:19:36Z,2016-11-17T14:36:13Z,2016-11-20T15:35:01Z,MERGED,True,0,0,2,https://github.com/JimMarlowe,improve dark skin checkbox,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1164,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1164,"This improves the the outline coverage of the image, and smooths the check outline, as mush as possile with so few pixels. From #1153","This improves the the outline coverage of the image, and smooths the check outline, as mush as possile with so few pixels. From #1153",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1164,2016-11-17T01:19:36Z,2016-11-17T14:36:13Z,2016-11-20T15:35:01Z,MERGED,True,0,0,2,https://github.com/JimMarlowe,improve dark skin checkbox,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1164,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1164#issuecomment-261262243,"This improves the the outline coverage of the image, and smooths the check outline, as mush as possile with so few pixels. From #1153","The check looks fantastic :)  Thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261163742,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","I can't see the details on that build: http://atomicbuilds.mooo.com:9765/job/AtomicPR_MacEditor_iOS_Android/132/
I don't have DNS info for that domain. Is there another way to see the log for that build?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261253827,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","Windows decided to update and so the build timed out as the machine wasn't available.
The build errors used to forward from mooo.com to our dynamic IP, though this meant keeping a port open and the jenkins + that box live on the internet, which isn't really a great plan these days :)
So, need to come up with better system for reporting build errors, maybe moving CI from build boxes into the cloud (only thing there is full platform coverage and possible hosting expenses)
I'll kick off the build again if it is jammed, now that Windows build box is back up.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261254460,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.",Awesome. Thanks! :-),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261272232,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261288761,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","I'll go over the PR in more detail soon, going to be awesome to have 3D UI widgets :)
We can probably update the 3D WebView example to use it and provide additional use/test coverage: https://github.com/AtomicGameEngine/AtomicExamples/blob/master/WebView3D/JavaScript/Resources/Components/WebTexture.js
There's a build error with super being a keyword in TypeScript, maybe superDown would be better, this is an inherited API issue as super really should just be coded into qualifiers.
invokeRightPointerDown(x: number, y: number, click_count: number, qualifiers: number, super?: boolean): void;",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261308017,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.",Did the Linux build fail?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261308249,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.",... or did the machine timeout?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261311021,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","I think the build workspace was dirty as failed building script bindings where other host platforms passed, will retest",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261328511,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","Compile update the Linux build box doesn't like:
UIOffscreenView.h:41:12: error: ‚ÄòUI‚Äô does not name a type
friend UI;",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/Type1J,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261427437,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","I think I hit all of your points except for 1:
HashSet<UIOffscreenView*>* GetOffscreenViews()
was not changed to
const HashSet<UIOffscreenView*>& GetOffscreenViews()
, and instead was changed to
HashSet<UIOffscreenView*>& GetOffscreenViews() (no const)
because its primary use is for the UIOffscreenView constructor and destructor to register and unregister with the UI subsystem by modifying that HashSet. I could just make it a friend, and hide that process, or add public functions for registration and deregistration, but they would have no practical use except for the UIOffscreenView constructor and destructor.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-261556872,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","Thanks! üëç
I am going to spend a little time with the changes before landing, great work :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1165,2016-11-17T05:50:33Z,2017-06-27T00:46:15Z,2017-06-27T00:46:15Z,CLOSED,False,609,167,7,https://github.com/Type1J,Adding UIOffscreenView,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165,https://github.com/JoshEngebretson,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1165#issuecomment-311220910,"I need UI as part of the 3D scene. This allows Turbo Badger to render additional root widgets to offscreen render targets.
Input mapping is also included, and must be opted-in, and can be disabled and re-enabled at will.","Whew, think we set a record here üèÖ  :)
Refactored and landed in #1582",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1168,2016-11-17T12:27:21Z,2016-11-17T15:06:24Z,2016-11-17T15:06:26Z,MERGED,True,365,337,7,https://github.com/shaddockh,Fixes #1034 . Upgrade dts-generator,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168,This upgrades dts-generator to the version that supports TS 2.0.,This upgrades dts-generator to the version that supports TS 2.0.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1168,2016-11-17T12:27:21Z,2016-11-17T15:06:24Z,2016-11-17T15:06:26Z,MERGED,True,365,337,7,https://github.com/shaddockh,Fixes #1034 . Upgrade dts-generator,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168#issuecomment-261264063,This upgrades dts-generator to the version that supports TS 2.0.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1168,2016-11-17T12:27:21Z,2016-11-17T15:06:24Z,2016-11-17T15:06:26Z,MERGED,True,365,337,7,https://github.com/shaddockh,Fixes #1034 . Upgrade dts-generator,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1168#issuecomment-261270749,This upgrades dts-generator to the version that supports TS 2.0.,"Excellent, thanks! üê´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1170,2016-11-17T20:58:39Z,2016-11-17T21:20:02Z,2016-11-17T21:20:03Z,MERGED,True,23,17,2,https://github.com/JoshEngebretson,Better handling for closing scene editor resource (closes #1167),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1170,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1170,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1171,2016-11-18T00:34:46Z,2016-11-18T01:08:27Z,2016-11-18T01:08:29Z,MERGED,True,7,3,1,https://github.com/JoshEngebretson,"Add property getters for Is* style accessors (for example, Node::IsEnabled) ",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1171,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1171,closes #1003,closes #1003,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.","CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.",True,"{'HEART': ['https://github.com/JoshEngebretson', 'https://github.com/Type1J', 'https://github.com/JoshuaBehrens']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261551792,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261552920,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.","@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261553546,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.","Thanks for the PR, this is fantastic and would have thought it required loads more changes :)
We'll get CI churning on it and I'll give it a good looking over.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261723202,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.","Ok, this checks out in testing here",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/Type1J,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261789398,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.",This will be awesome! It will simplify our repo management after a refactor. Wide  ease of use benefits here.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/rokups,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261879203,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.",I added requested changes. Sorry for being a bit late - emails of this issue got lost in sea of other emails from AtomicGameEngine org :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1172,2016-11-18T14:57:30Z,2016-11-21T15:55:19Z,2017-04-07T13:36:01Z,MERGED,True,200,155,29,https://github.com/rokups,[C++] Support for using Atomic from source in external projects  ( CMake `add_subdirectory()` ),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1172#issuecomment-261977995,"CMAKE_SOURCE_DIR variable replaced with ATOMIC_SOURCE_DIR (which is alias to Atomic_SOURCE_DIR provided by cmake). ATOMIC_SOURCE_DIR points to root directory of Atomic project just like CMAKE_SOURCE_DIR does.
Introduced three internal cache variables that provide information to c++ projects that use engine through add_subdirectory():

ATOMIC_INCLUDE_DIRS - list of Atomic include directories.
ATOMIC_DEFINITIONS - list of Atomic build definitions.
ATOMIC_LINK_LIBRARIES - list of Atomic link libraries.

Introduced three macros:

include_directories_exported() - behaves like include_directories(), also appends included directories to ATOMIC_INCLUDE_DIRS cache variable.
add_definitions_exported() - behaves like add_definitions(), also appends added definitions to ATOMIC_DEFINITIONS cache variable.
add_link_libraries_exported() - appends libraries to ATOMIC_LINK_LIBRARIES cache variable. Targets still have to manually link to libraries specified in ATOMIC_LINK_LIBRARIES variable.

Macros are to be used when includes/definitions/libraries should be exposed to game projects linking to engine.
Sample CMakeLists.txt of project that embeds engine through add_subdirectory():
cmake_minimum_required(VERSION 3.6)
project(AtomicTest)

add_subdirectory(AtomicGameEngine)
include_directories(${ATOMIC_INCLUDE_DIRS})
add_definitions(${ATOMIC_DEFINITIONS})

set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11"")

set(SOURCE_FILES main.cpp)
add_executable(AtomicTest ${SOURCE_FILES})
target_link_libraries (AtomicTest ${ATOMIC_LINK_LIBRARIES})

P.S. Turns out i slipped in silencing find_package() warnings because they were annoying to me. I think these changes are worth having because some of packages are mutually exclusive and project would generate projects no matter configuration. If you think these changes have no place in this PR then let me know and i will fix this commit.","This is really fantastic and far less sweeping changes than I would have expected.  We can continue to tweak, though this PR is well along the path.  Thanks! LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1179,2016-11-18T20:26:02Z,2016-11-18T20:56:00Z,2016-11-18T20:56:26Z,MERGED,True,70,29,9,https://github.com/JoshEngebretson,Misc enhancements including fix for focusing skeletal models,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1179,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1179,Please see #1150,Please see #1150,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1179,2016-11-18T20:26:02Z,2016-11-18T20:56:00Z,2016-11-18T20:56:26Z,MERGED,True,70,29,9,https://github.com/JoshEngebretson,Misc enhancements including fix for focusing skeletal models,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1179,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1179#issuecomment-261639695,Please see #1150,Closes #1166,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1183,2016-11-19T22:07:06Z,2016-11-19T22:36:03Z,2016-11-20T15:35:00Z,MERGED,True,32,4,3,https://github.com/JimMarlowe,Add audio strings into bindings for 1152,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1183,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1183,"This will allow const String constants in general to be bound into both JS and C#.  I thought that this might match other instances in the Atomic source code, but the Audio strings were the only ones.
I freely admit to repurposing the char primitive type to represent a string for the module constants, for two reasons, only numeric constants were being registered, and changing the primitives type enum could have compatibility issues.","This will allow const String constants in general to be bound into both JS and C#.  I thought that this might match other instances in the Atomic source code, but the Audio strings were the only ones.
I freely admit to repurposing the char primitive type to represent a string for the module constants, for two reasons, only numeric constants were being registered, and changing the primitives type enum could have compatibility issues.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1184,2016-11-20T18:46:36Z,2016-11-20T19:52:16Z,2016-11-20T19:52:16Z,MERGED,True,4,0,1,https://github.com/flyover,allow node.createJSComponent without extension,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184,https://github.com/flyover,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184,#175,#175,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1184,2016-11-20T18:46:36Z,2016-11-20T19:52:16Z,2016-11-20T19:52:16Z,MERGED,True,4,0,1,https://github.com/flyover,allow node.createJSComponent without extension,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184#issuecomment-261796718,#175,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1184,2016-11-20T18:46:36Z,2016-11-20T19:52:16Z,2016-11-20T19:52:16Z,MERGED,True,4,0,1,https://github.com/flyover,allow node.createJSComponent without extension,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184#issuecomment-261798429,#175,"Thanks for the PR üëç   If you accept invitation for organization, can assign the issue for build tracking: https://github.com/AtomicGameEngine
@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1184,2016-11-20T18:46:36Z,2016-11-20T19:52:16Z,2016-11-20T19:52:16Z,MERGED,True,4,0,1,https://github.com/flyover,allow node.createJSComponent without extension,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1184#issuecomment-261800733,#175,"Great, will land with the AUTHORS update next",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1185,2016-11-20T18:48:03Z,2016-11-20T21:57:59Z,2016-11-20T21:58:00Z,MERGED,True,2,0,1,https://github.com/flyover,Update AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185,https://github.com/flyover,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1185,2016-11-20T18:48:03Z,2016-11-20T21:57:59Z,2016-11-20T21:58:00Z,MERGED,True,2,0,1,https://github.com/flyover,Update AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185#issuecomment-261796715,,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1185,2016-11-20T18:48:03Z,2016-11-20T21:57:59Z,2016-11-20T21:58:00Z,MERGED,True,2,0,1,https://github.com/flyover,Update AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1185#issuecomment-261800673,,@AtomicBuildBot ok to test,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261814380,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Compiles fine on linux, it does not fix linux issue with the menu shortcuts (nor did it claim it had).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261814406,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","I tested on Windows and Linux, everything works other than Edit->Undo,  Edit->Redo on Windows",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261814433,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","@JimMarlowe I tested on Linux and it does fix the issues here, sure you were on the branch?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261814676,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Oh, I think you mean the accelerators, I only asked about branch because I had just ""tested"" on the wrong one :)
On Linux, invoking the main frame Edit menu ""Cut, Copy, Paste"" is working here, I didn't test accelerators.  Though, reminds me #1154 should be bumped to Build 1 to at least look into for it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261814728,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","I believe I am, I spot checked some of the files and the look the same.
yes the menu accelerator keys, pressing Control+S does not do a save.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261815628,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","for edit redo and undo on the mac,  I needed to spend some time in the chrome debug tools to ensure that the key events were actually getting passed in correctly.  This probably needs to be done in windows too.  Do the keyboard shortcuts work in windows?  Or are both the menus and key accelerators broken?
I believe I should be able to get my windows environment working this week if necessary to try to debug.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261815970,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","CEF doesn't have a keyboard abstraction which means you are left fiddling/mapping/simulating ""native key events"".  It doesn't surprise me that Undo/Redo might need special handling on a platform.
The issue addressed by this PR is 100% working here, minus Undo/Redo from main frame menu items on Windows.  #1154 is a separate issue, solely affecting Linux accelerator keys.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261820753,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","@shaddockh Ok,  here's the super complicated instructions for getting running under VS2015 ;)
https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Building-the-Atomic-Editor-using-Visual-Studio-2015
Going to need to spend a few hours getting build setup for VS2017 now that it is in RC and from all indications is a significant improvement over 2015 (including the install process).  Filed as #1188",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/ScottDillman,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261843558,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.",Building on a few distros and notice that the shortcut keys all seem to work but the menu items for undo/redo have no effect,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-261845103,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","@CTrauma thanks, I rechecked, Undo/Redo on Windows/Linux from edit menu not working here, I'll update #1154 with the keyboard testing since that is getting confusing here",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262411997,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Does that last commit have anything to do with the Undo/Redo issue, or something else?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/shaddockh,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262428139,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","So, the exact same key events were getting registered by the web view either by sending the key events through the menu item or pressing the shortcut keys, but the menu item one wasn't working.  It appears that by sending a focus event, this has been fixed under windows.  Can someone else try this out under Windows as well as Linux?  I'm calling the SendFocusEvent in both of these platforms now.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262431097,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","I wrote a cheesy build:lint task which scans the C++/C# code and is capable of fixing tab issues if ""configured"", which involves changing this line:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Build/Scripts/BuildLint.js#L7
Testing Windows/Linux, will land if they check out.. thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/shaddockh,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262431433,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Sorry, just saw the comment on the commit prior to this last one... no, it wasn't the undo/redo issue, but it was a fine tuning of the format code menu shortcut.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,16,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262432143,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Glorious victory, undo/redo working from menu here ‚öî
One issue I ran into on Linux only, Ctrl-I to format code causes the below error, while the menu item works great, this could be a follow up issue if it isn't obvious
Linux:
[Tue Nov 22 20:16:54 2016] INFO: WebViewJS: TypeError: Cannot read property 'apply' of null (atomic:///home/jenge/Dev/atomic/PullRequests/AtomicGameEngine/Artifacts/AtomicEditor/Resources/ToolData/CodeEditor/source/monaco/vs/editor/editor.main.js:66)
[1122/201654:INFO:CONSOLE(66)] ""TypeError: Cannot read property 'apply' of null"", source: atomic:///home/jenge/Dev/atomic/PullRequests/AtomicGameEngine/Artifacts/AtomicEditor/Resources/ToolData/CodeEditor/source/monaco/vs/editor/editor.main.js (66)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/shaddockh,17,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262433483,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","yeah, it looks like that was happening on other platforms too.  This should fix it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1186,2016-11-20T19:53:01Z,2016-11-23T05:04:06Z,2016-11-23T05:04:08Z,MERGED,True,185,17,12,https://github.com/shaddockh,Shortcut fixes for #697,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186,https://github.com/JoshEngebretson,18,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1186#issuecomment-262434579,"This hooks up the editor menu shortcuts properly and fixes #697
Edit->Undo
Edit->Redo
Edit->Cut
Edit->Copy
Edit->Paste
Edit->Select All
Edit->Format Code
Testing was done on OSX, but this needs to also be tested in Linux and Windows since the shortcut keys are different (CMD becomes CTRL in Windows and Linux).
This also fixes some linter errors in the TS.","Awesome, will land when green, thanks! ‚úîÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-261806593,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"""by not issuing Update events once the application has started to exit"", this doesn't seem quite accurate as we're early exiting from void Engine::Update() and void Engine::Render() instead of not issuing the event
Can we detect this earlier and avoid these (and other) events instead, what does a callstack look like when a null object is encountered, is it easy to reproduce and get one?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-261807570,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"exiting_ gets asserted sometime between frames 10 & 11...
2258    duk_hobject_props.c: No such file or directory.
(gdb) where
#0  duk_hobject_getprop (thr=0x32fc320, tv_obj=0x7fffffffcda0, tv_key=0x7fffffffcdb0) at duk_hobject_props.c:2258
#1  0x00000000017efcae in duk__js_execute_bytecode_inner (entry_thread=0x32fc320, entry_callstack_top=1) at duk_js_executor.c:3040
#2  0x00000000017edfee in duk_js_execute_bytecode (exec_thr=0x32fc320) at duk_js_executor.c:2068
#3  0x00000000017e03a3 in duk__handle_call_inner (thr=0x32fc320, num_stack_args=1, call_flags=0, idx_func=3) at duk_js_call.c:1580
#4  0x00000000017dfac1 in duk_handle_call_protected (thr=0x32fc320, num_stack_args=1, call_flags=0) at duk_js_call.c:1062
#5  0x00000000017b17f1 in duk_pcall (ctx=0x32fc320, nargs=1) at duk_api_call.c:134
#6  0x000000000122a15d in Atomic::JSEventHelper::HandleEvent (this=0x3588930, eventType=..., eventData=...)
    at /home/val/AGE/AtomicGameEngine/Source/AtomicJS/Javascript/JSEventHelper.cpp:190
#7  0x000000000122b836 in Atomic::EventHandlerImplAtomic::JSEventHelper::Invoke (this=0x3589470, eventData=...)
    at /home/val/AGE/AtomicGameEngine/Source/Atomic/UI/../Core/Object.h:341
#8  0x0000000001393ca9 in Atomic::Object::OnEvent (this=0x3582d80, sender=0x2ef0c60, eventType=..., eventData=...)
    at /home/val/AGE/AtomicGameEngine/Source/Atomic/Core/Object.cpp:121
#9  0x0000000001394a3a in Atomic::Object::SendEvent (this=0x2ef0c60, eventType=..., eventData=...)
    at /home/val/AGE/AtomicGameEngine/Source/Atomic/Core/Object.cpp:363
#10 0x00000000013a9762 in Atomic::Engine::Update (this=0x2ef0c60) at /home/AGE/AtomicGameEngine/Source/Atomic/Engine/Engine.cpp:730
#11 0x00000000013a90f8 in Atomic::Engine::RunFrame (this=0x2ef0c60) at /home/AGE/AtomicGameEngine/Source/Atomic/Engine/Engine.cpp:519
#12 0x00000000013ae966 in Atomic::Application::Run (this=0x2ef0610) at /home/AGE/AtomicGameEngine/Source/Atomic/Engine/Application.cpp:89
#13 0x000000000116e162 in RunPlayerApplication () at /home/AGE/AtomicGameEngine/Source/AtomicEditor/Application/Main.cpp:56
#14 0x000000000116e22b in main (argc=14, argv=0x7fffffffdec8) at /home/AGE/AtomicGameEngine/Source/AtomicEditor/Application/Main.cpp:180",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-261807848,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Thanks for the callstack and I didn't see your notes in #248 before commenting :)  Ok, cool that it is easy to reproduce, I'll have a look too and see if anything pops out",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-261808312,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Yeah, I put in my notes into #248 after I did the PR, it was more typing. This must have been causing ""mysteries in coding"" for some people.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262416045,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Can exiting_ change between line 476 and the new check, something in BeginFrame? https://github.com/JimMarlowe/AtomicGameEngine/blob/967d4eccd2031fd6c57086167fb2821dddb33197/Source/Atomic/Engine/Engine.cpp#L476",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262418839,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"The exiting_ gets asserted from within line 494, so the exit check at line 476 would only be hit if the line before it is triggered.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262420934,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Sorry, I am confoozled.  How can exiting_ change between line 476 and 498 (which is the new check)?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262422382,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Since Engine::DoExit() is the only place that sets the exiting_ flag, then I'm going to hazard a guess that it is being changed by the HandleExitRequested event handler being fired off, and the event gets processed when it goes into time->BeginFrame(timeStep_);. The only other path is, someone called Engine::Exit(), and this doesn't seem likely because of when the value changes.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262424370,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"The HandleExitRequested is being called, so events (and probably threads) are the answer.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262424673,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Excellent, thanks for verifying, would you mind adding a bit of commenting about this at 498, when reading the code it kind of induces a ""Huh? Wha? Didn't we just check exiting_?"" :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JimMarlowe,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262427454,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,I've added some more comments. Why do I always get the bizarre issues?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1187,2016-11-20T21:16:09Z,2016-11-23T04:23:05Z,2016-11-27T01:16:50Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,Stop crash from null objects at exit 248,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187,https://github.com/JoshEngebretson,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1187#issuecomment-262428125,This pr will stop crashes from accessing null objects in user event handlers by not issuing Update events once the application has started to exit.,"Heh, because you're good at 'em üê´
Will land when green, thanks! ‚úîÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1193,2016-11-22T20:30:10Z,2016-11-23T17:37:20Z,2016-11-23T17:38:51Z,MERGED,True,98,11,9,https://github.com/darrylryan,[Windows] Support Direct3D 9/11 and OpenGL build configurations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193,https://github.com/darrylryan,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193,"The ""--d3d11"" or ""--opengl"" flags can now be specified on the command line to both Build_AtomicEditor.bat and GenerateVS2015.bat to switch graphics libraries.
DirectX 9 remains the default if no flags are specified.
resolves #1155","The ""--d3d11"" or ""--opengl"" flags can now be specified on the command line to both Build_AtomicEditor.bat and GenerateVS2015.bat to switch graphics libraries.
DirectX 9 remains the default if no flags are specified.
resolves #1155",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1193,2016-11-22T20:30:10Z,2016-11-23T17:37:20Z,2016-11-23T17:38:51Z,MERGED,True,98,11,9,https://github.com/darrylryan,[Windows] Support Direct3D 9/11 and OpenGL build configurations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193#issuecomment-262357792,"The ""--d3d11"" or ""--opengl"" flags can now be specified on the command line to both Build_AtomicEditor.bat and GenerateVS2015.bat to switch graphics libraries.
DirectX 9 remains the default if no flags are specified.
resolves #1155",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1193,2016-11-22T20:30:10Z,2016-11-23T17:37:20Z,2016-11-23T17:38:51Z,MERGED,True,98,11,9,https://github.com/darrylryan,[Windows] Support Direct3D 9/11 and OpenGL build configurations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193#issuecomment-262357937,"The ""--d3d11"" or ""--opengl"" flags can now be specified on the command line to both Build_AtomicEditor.bat and GenerateVS2015.bat to switch graphics libraries.
DirectX 9 remains the default if no flags are specified.
resolves #1155","@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1193,2016-11-22T20:30:10Z,2016-11-23T17:37:20Z,2016-11-23T17:38:51Z,MERGED,True,98,11,9,https://github.com/darrylryan,[Windows] Support Direct3D 9/11 and OpenGL build configurations,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1193#issuecomment-262582503,"The ""--d3d11"" or ""--opengl"" flags can now be specified on the command line to both Build_AtomicEditor.bat and GenerateVS2015.bat to switch graphics libraries.
DirectX 9 remains the default if no flags are specified.
resolves #1155","Thanks for the PR, awesome work, LANDING! ‚úîÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1196,2016-11-23T18:05:50Z,2016-11-23T19:09:42Z,2016-11-24T14:30:26Z,MERGED,True,36,36,2,https://github.com/rokups,[Build] Support excluding C++ examples from parent builds,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1196,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1196,"Allow to exclude examples from build by setting ATOMIC_CPLUSPLUS_EXAMPLES in parent project.
Export ATOMIC_CXX11, ATOMIC_64BIT, ATOMIC_BUILD_DIST (allows parent projects to use Atomic's c++11 support).","Allow to exclude examples from build by setting ATOMIC_CPLUSPLUS_EXAMPLES in parent project.
Export ATOMIC_CXX11, ATOMIC_64BIT, ATOMIC_BUILD_DIST (allows parent projects to use Atomic's c++11 support).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1196,2016-11-23T18:05:50Z,2016-11-23T19:09:42Z,2016-11-24T14:30:26Z,MERGED,True,36,36,2,https://github.com/rokups,[Build] Support excluding C++ examples from parent builds,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1196,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1196#issuecomment-262605018,"Allow to exclude examples from build by setting ATOMIC_CPLUSPLUS_EXAMPLES in parent project.
Export ATOMIC_CXX11, ATOMIC_64BIT, ATOMIC_BUILD_DIST (allows parent projects to use Atomic's c++11 support).","Great, thanks, LANDING",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1198,2016-11-24T01:12:28Z,2016-11-24T02:08:37Z,2016-11-27T01:16:50Z,MERGED,True,3,3,1,https://github.com/JimMarlowe,Enable linux accelerator keys,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1198,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1198,"The way the control/Command key was being handled wrong for linux. It was falling into the OSX behavior with a Command key, when it actually follows the Windows Control key behavior.","The way the control/Command key was being handled wrong for linux. It was falling into the OSX behavior with a Command key, when it actually follows the Windows Control key behavior.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1198,2016-11-24T01:12:28Z,2016-11-24T02:08:37Z,2016-11-27T01:16:50Z,MERGED,True,3,3,1,https://github.com/JimMarlowe,Enable linux accelerator keys,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1198,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1198#issuecomment-262674038,"The way the control/Command key was being handled wrong for linux. It was falling into the OSX behavior with a Command key, when it actually follows the Windows Control key behavior.","Fantastic, great catch! ‚öæÔ∏è
LANDING ‚úîÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1200,2016-11-24T11:52:57Z,2016-11-25T15:58:16Z,2016-11-25T15:58:21Z,MERGED,True,213,2,5,https://github.com/mattbenic,Add an AtomicTool Project command,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1200,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1200,"Currently includes a cache task, with an option to clean the cache first
usage: AtomicTool project ""path\to\project"" [cache (-clean)]
Addresses #1199","Currently includes a cache task, with an option to clean the cache first
usage: AtomicTool project ""path\to\project"" [cache (-clean)]
Addresses #1199",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1201,2016-11-24T15:05:06Z,2016-11-25T16:03:53Z,2016-11-29T21:27:24Z,MERGED,True,410,4,14,https://github.com/JohnnyWahib,Added animation preview tool bar,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1201,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1201,"Created an animation preview toolbar to test out animations at custom playback speeds. It also allows the user to blend between 2 specified animations using custom blend speeds.
Open the window by clicking on the Preview Animation Button that now appears in the inspector when the user has a model selected.","Created an animation preview toolbar to test out animations at custom playback speeds. It also allows the user to blend between 2 specified animations using custom blend speeds.
Open the window by clicking on the Preview Animation Button that now appears in the inspector when the user has a model selected.",True,"{'THUMBS_UP': ['https://github.com/JoshEngebretson', 'https://github.com/Type1J'], 'HEART': ['https://github.com/JoshEngebretson', 'https://github.com/christoffersch']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1201,2016-11-24T15:05:06Z,2016-11-25T16:03:53Z,2016-11-29T21:27:24Z,MERGED,True,410,4,14,https://github.com/JohnnyWahib,Added animation preview tool bar,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1201,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1201#issuecomment-262813604,"Created an animation preview toolbar to test out animations at custom playback speeds. It also allows the user to blend between 2 specified animations using custom blend speeds.
Open the window by clicking on the Preview Animation Button that now appears in the inspector when the user has a model selected.","Woah, cool, will look over in detail though at first glance excellent work on a tough (though temporary) editor limitation üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1207,2016-11-27T00:00:36Z,2016-11-27T15:40:20Z,2016-11-29T21:48:52Z,MERGED,True,57,6,4,https://github.com/JimMarlowe,Close Player Output window when player quits #215,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1207,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1207,"Added a checkbox that controls whether to close at stop (default is on), added a pref to make setting persistent, added a note to output UI about logs available in the main frame menu, auto close old window if you hit play again.","Added a checkbox that controls whether to close at stop (default is on), added a pref to make setting persistent, added a note to output UI about logs available in the main frame menu, auto close old window if you hit play again.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1208,2016-11-27T06:50:25Z,2016-11-27T15:35:28Z,2016-11-27T17:30:32Z,MERGED,True,1,1,1,https://github.com/Type1J,Updating examples commit for usage of Atomic through add_subdirectory().,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1208,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1208,Since #1196 the AtomicExamples sub module has not been advanced to see AtomicGameEngine/AtomicExamples#95.,Since #1196 the AtomicExamples sub module has not been advanced to see AtomicGameEngine/AtomicExamples#95.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1208,2016-11-27T06:50:25Z,2016-11-27T15:35:28Z,2016-11-27T17:30:32Z,MERGED,True,1,1,1,https://github.com/Type1J,Updating examples commit for usage of Atomic through add_subdirectory().,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1208,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1208#issuecomment-263128627,Since #1196 the AtomicExamples sub module has not been advanced to see AtomicGameEngine/AtomicExamples#95.,Thanks for the PR üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1213,2016-11-28T14:42:39Z,2016-11-29T03:40:24Z,2016-11-29T08:02:50Z,CLOSED,False,187,1,3,https://github.com/mattbenic,Add compression command to AtomicTool,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213,"This PR introduces a command to AtomicTool that allows a directory of images to be compressed for later use by the engine (eg by adding it as a Resource directory)
usage: AtomicTool compress ""Path/To/Directory""
@JoshEngebretson I'm in two minds on this. We definitely need it for external resource directories as I've mentioned before. However given that it also generates a cache directory (useful for the same reason), just calling it ""compress"" seems incorrect. It could just be part of the project command, but it doesn't actually require a project to be loaded. It kind of feels like something we should just keep to our side, then we don't need to worry about issues like that. I PR'd it for your ease of comparison.","This PR introduces a command to AtomicTool that allows a directory of images to be compressed for later use by the engine (eg by adding it as a Resource directory)
usage: AtomicTool compress ""Path/To/Directory""
@JoshEngebretson I'm in two minds on this. We definitely need it for external resource directories as I've mentioned before. However given that it also generates a cache directory (useful for the same reason), just calling it ""compress"" seems incorrect. It could just be part of the project command, but it doesn't actually require a project to be loaded. It kind of feels like something we should just keep to our side, then we don't need to worry about issues like that. I PR'd it for your ease of comparison.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1213,2016-11-28T14:42:39Z,2016-11-29T03:40:24Z,2016-11-29T08:02:50Z,CLOSED,False,187,1,3,https://github.com/mattbenic,Add compression command to AtomicTool,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213#issuecomment-263293466,"This PR introduces a command to AtomicTool that allows a directory of images to be compressed for later use by the engine (eg by adding it as a Resource directory)
usage: AtomicTool compress ""Path/To/Directory""
@JoshEngebretson I'm in two minds on this. We definitely need it for external resource directories as I've mentioned before. However given that it also generates a cache directory (useful for the same reason), just calling it ""compress"" seems incorrect. It could just be part of the project command, but it doesn't actually require a project to be loaded. It kind of feels like something we should just keep to our side, then we don't need to worry about issues like that. I PR'd it for your ease of comparison.","And it looks like the entire command needs to be guarded for non-windows platforms. Before doing that though, let's establish if it's something you want to include :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1213,2016-11-28T14:42:39Z,2016-11-29T03:40:24Z,2016-11-29T08:02:50Z,CLOSED,False,187,1,3,https://github.com/mattbenic,Add compression command to AtomicTool,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1213#issuecomment-263467799,"This PR introduces a command to AtomicTool that allows a directory of images to be compressed for later use by the engine (eg by adding it as a Resource directory)
usage: AtomicTool compress ""Path/To/Directory""
@JoshEngebretson I'm in two minds on this. We definitely need it for external resource directories as I've mentioned before. However given that it also generates a cache directory (useful for the same reason), just calling it ""compress"" seems incorrect. It could just be part of the project command, but it doesn't actually require a project to be loaded. It kind of feels like something we should just keep to our side, then we don't need to worry about issues like that. I PR'd it for your ease of comparison.","This looks solid, though I think we can hold back for now from including in stock AtomicTool.  So, I'll close the issue and we can revisit.
On mobile side want other compressors, etc.  It is possible we will want to bundle some image utils, or maybe an AtomicImage to keep AtomicTool somewhat lean (for example, AtomicGlow will have it's own executable I am thinking, so we're not linking embree in AtomicTool)",True,{'THUMBS_UP': ['https://github.com/mattbenic']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1214,2016-11-28T22:35:12Z,2016-11-29T03:33:05Z,2016-11-29T21:49:44Z,MERGED,True,66,8,5,https://github.com/JimMarlowe,"Project template language and messaging #1190, #1118",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1214,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1214,"Made JavaScript the default language used for new projects and examples ( if they support it )
Examples will use the user selected default language, and otherwise the language precedence is JS, CS, TS.
Upon successfully installing a new project or example, the language used will become the default language.
The default language is saved in a preference.
When CSharp is not installed on a platform, the dialog box that comes up will now include instructions for Linux+monodevelop.
The Linux install operation will be directed to the Wiki page for building linux, which includes the install instructions for monodevelop.
Added API to get item strings out of a UISelectItemSource
Did not fix the closing of the New Project Dialog if it brings up the CSharp Download dialog, because both are modal, and you can not have 2 modal dialogs up at a time.","Made JavaScript the default language used for new projects and examples ( if they support it )
Examples will use the user selected default language, and otherwise the language precedence is JS, CS, TS.
Upon successfully installing a new project or example, the language used will become the default language.
The default language is saved in a preference.
When CSharp is not installed on a platform, the dialog box that comes up will now include instructions for Linux+monodevelop.
The Linux install operation will be directed to the Wiki page for building linux, which includes the install instructions for monodevelop.
Added API to get item strings out of a UISelectItemSource
Did not fix the closing of the New Project Dialog if it brings up the CSharp Download dialog, because both are modal, and you can not have 2 modal dialogs up at a time.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1214,2016-11-28T22:35:12Z,2016-11-29T03:33:05Z,2016-11-29T21:49:44Z,MERGED,True,66,8,5,https://github.com/JimMarlowe,"Project template language and messaging #1190, #1118",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1214,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1214#issuecomment-263467017,"Made JavaScript the default language used for new projects and examples ( if they support it )
Examples will use the user selected default language, and otherwise the language precedence is JS, CS, TS.
Upon successfully installing a new project or example, the language used will become the default language.
The default language is saved in a preference.
When CSharp is not installed on a platform, the dialog box that comes up will now include instructions for Linux+monodevelop.
The Linux install operation will be directed to the Wiki page for building linux, which includes the install instructions for monodevelop.
Added API to get item strings out of a UISelectItemSource
Did not fix the closing of the New Project Dialog if it brings up the CSharp Download dialog, because both are modal, and you can not have 2 modal dialogs up at a time.","Awesome! Major usability upgrade, and 2x issues closed, thanks! üëç
Closes #1190
Closes #1118",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1215,2016-11-29T04:03:41Z,2016-11-29T07:24:57Z,2016-11-29T07:25:03Z,MERGED,True,1183,121,23,https://github.com/JoshEngebretson,Visual Studio 2017 and Visual Studio Mac support,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1215,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1215,"This PR adds support for Visual Studio 2017 and Visual Studio Mac
Closes #1188","This PR adds support for Visual Studio 2017 and Visual Studio Mac
Closes #1188",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1215,2016-11-29T04:03:41Z,2016-11-29T07:24:57Z,2016-11-29T07:25:03Z,MERGED,True,1183,121,23,https://github.com/JoshEngebretson,Visual Studio 2017 and Visual Studio Mac support,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1215,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1215#issuecomment-263473955,"This PR adds support for Visual Studio 2017 and Visual Studio Mac
Closes #1188",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1217,2016-11-29T20:45:10Z,2016-11-29T21:15:18Z,2016-11-29T21:15:22Z,MERGED,True,16,5,4,https://github.com/JoshEngebretson,"Disable program directory on macOS, updating plists",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1217,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1217,Closes #1209 (hopefully),Closes #1209 (hopefully),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1218,2016-11-29T21:24:49Z,2016-11-29T22:00:15Z,2016-11-29T22:00:18Z,MERGED,True,25,4,2,https://github.com/JoshEngebretson,Fixing crash with animation preview,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1218,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1218,"Return handled when animation button is clicked as the button is deleted in the callback
Updating widget remove child guard to ensure proper parent
Guarding captured widget for multitouch

Closes #1216","Return handled when animation button is clicked as the button is deleted in the callback
Updating widget remove child guard to ensure proper parent
Guarding captured widget for multitouch

Closes #1216",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1220,2016-11-30T10:33:53Z,2016-11-30T14:00:13Z,2016-11-30T14:00:31Z,MERGED,True,43,15,2,https://github.com/mattbenic,AtomicTool improvements,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1220,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1220,"General AtomicTool improvements:
-Support for project paths being specified either as the project directory or the full .atomic file path
-Support for specifying log level with -loglevel argument
Project command specifically
-Fixed project cache -clean reporting an error when the cache directory doesn't yet exist","General AtomicTool improvements:
-Support for project paths being specified either as the project directory or the full .atomic file path
-Support for specifying log level with -loglevel argument
Project command specifically
-Fixed project cache -clean reporting an error when the cache directory doesn't yet exist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1220,2016-11-30T10:33:53Z,2016-11-30T14:00:13Z,2016-11-30T14:00:31Z,MERGED,True,43,15,2,https://github.com/mattbenic,AtomicTool improvements,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1220,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1220#issuecomment-263879886,"General AtomicTool improvements:
-Support for project paths being specified either as the project directory or the full .atomic file path
-Support for specifying log level with -loglevel argument
Project command specifically
-Fixed project cache -clean reporting an error when the cache directory doesn't yet exist","""Support for project paths being specified either as the project directory or the full .atomic file path"", good one, this has been a source of head scratching on the command line üëç
Thanks, landing!",True,{'THUMBS_UP': ['https://github.com/mattbenic']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1221,2016-12-01T00:20:13Z,2016-12-01T00:53:11Z,2016-12-01T00:53:13Z,MERGED,True,20,5,1,https://github.com/JoshEngebretson,Adding WebGL player copy for CI editor build task,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1221,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1221,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1222,2016-12-01T01:07:11Z,2016-12-01T01:31:25Z,2016-12-01T01:31:28Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,VS2017 fix for when VS2015 isn't installed,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1222,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1222,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1228,2016-12-01T15:06:02Z,2016-12-01T15:34:39Z,2016-12-01T15:34:41Z,MERGED,True,5,3,1,https://github.com/JoshEngebretson,Fix WebGL CI issue,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1228,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1228,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1229,2016-12-01T16:17:29Z,2016-12-01T17:13:51Z,2016-12-01T17:13:53Z,MERGED,True,2,1,2,https://github.com/Alan-FGR,Added Racer2D,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,https://github.com/Alan-FGR,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1229,2016-12-01T16:17:29Z,2016-12-01T17:13:51Z,2016-12-01T17:13:53Z,MERGED,True,2,1,2,https://github.com/Alan-FGR,Added Racer2D,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229#issuecomment-264217948,,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1229,2016-12-01T16:17:29Z,2016-12-01T17:13:51Z,2016-12-01T17:13:53Z,MERGED,True,2,1,2,https://github.com/Alan-FGR,Added Racer2D,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229#issuecomment-264219327,,"If you can add yourself to AUTHORS.md, can add you to build bot
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/AUTHORS.md",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1229,2016-12-01T16:17:29Z,2016-12-01T17:13:51Z,2016-12-01T17:13:53Z,MERGED,True,2,1,2,https://github.com/Alan-FGR,Added Racer2D,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229#issuecomment-264223131,,"@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1229,2016-12-01T16:17:29Z,2016-12-01T17:13:51Z,2016-12-01T17:13:53Z,MERGED,True,2,1,2,https://github.com/Alan-FGR,Added Racer2D,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1229#issuecomment-264233655,,"Racer2D is a fantastic addition, thanks for the PR! üëç üëç üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1231,2016-12-01T16:23:40Z,2016-12-01T16:56:27Z,2016-12-02T00:48:21Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,Add Time to script bindings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1231,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1231,Adds Time to the script bindings.,Adds Time to the script bindings.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1231,2016-12-01T16:23:40Z,2016-12-01T16:56:27Z,2016-12-02T00:48:21Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,Add Time to script bindings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1231,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1231#issuecomment-264228566,Adds Time to the script bindings.,"Excellent, thanks for the PR! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1232,2016-12-01T16:33:39Z,2016-12-01T16:33:50Z,2016-12-06T02:58:12Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Updating submodule commit,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1232,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1232,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1233,2016-12-01T16:41:32Z,2016-12-01T17:36:35Z,2016-12-06T02:58:31Z,MERGED,True,2,0,1,https://github.com/Alan-FGR,Update AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1233,https://github.com/Alan-FGR,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1233,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1233,2016-12-01T16:41:32Z,2016-12-01T17:36:35Z,2016-12-06T02:58:31Z,MERGED,True,2,0,1,https://github.com/Alan-FGR,Update AUTHORS.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1233,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1233#issuecomment-264235500,,Welcome to the camel caravan! üê´ üê´ üê´ üê´ üê´ üê´ üê´ üê´ üê´ ‚òÄÔ∏è üòÑ,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1238,2016-12-04T16:16:57Z,2016-12-05T13:44:38Z,2016-12-06T02:58:30Z,MERGED,True,1,1,1,https://github.com/darrylryan,[WINDOWS] Fix for blurred text in editor under OpenGL on Windows.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1238,https://github.com/darrylryan,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1238,This was due to scaling logic in TurboBadger/renderers/tb_renderer_batcher.cpp not accounting for the OpenGL case.,This was due to scaling logic in TurboBadger/renderers/tb_renderer_batcher.cpp not accounting for the OpenGL case.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1238,2016-12-04T16:16:57Z,2016-12-05T13:44:38Z,2016-12-06T02:58:30Z,MERGED,True,1,1,1,https://github.com/darrylryan,[WINDOWS] Fix for blurred text in editor under OpenGL on Windows.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1238,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1238#issuecomment-264857197,This was due to scaling logic in TurboBadger/renderers/tb_renderer_batcher.cpp not accounting for the OpenGL case.,"Great, thanks for the PR üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1239,2016-12-05T10:23:37Z,2016-12-05T13:50:01Z,2016-12-08T14:08:39Z,MERGED,True,12,0,5,https://github.com/mattbenic,Add a flag to set whether non-skinned bones should be included,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1239,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1239,"In some cases it's necessary to import non-skinned bones on a skinned model. OpenAssetImporter ignores them by default,","In some cases it's necessary to import non-skinned bones on a skinned model. OpenAssetImporter ignores them by default,",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1239,2016-12-05T10:23:37Z,2016-12-05T13:50:01Z,2016-12-08T14:08:39Z,MERGED,True,12,0,5,https://github.com/mattbenic,Add a flag to set whether non-skinned bones should be included,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1239,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1239#issuecomment-264858419,"In some cases it's necessary to import non-skinned bones on a skinned model. OpenAssetImporter ignores them by default,","Thanks for the PR, for tags and things this seems like something we may want to default on and then have option to turn off per model in its import settings?  If so, can file an issue for the change.  In the meantime, this looks great, landing",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,"Just a quick fix, dunno if acceptable","Just a quick fix, dunno if acceptable",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-265134135,"Just a quick fix, dunno if acceptable","I guess this isn't the most efficient way to do that, maybe the check could happen here:

  
    
      AtomicGameEngine/Source/Atomic/Atomic2D/ParticleEmitter2D.cpp
    
    
         Line 310
      in
      d3b5069
    
  
  
    

        
          
           if (emissionTime_ >= 0.0f)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-265322733,"Just a quick fix, dunno if acceptable","Ok, just update from master first, as I believe that line was updated recently: https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/ParticleEmitter2D.cpp#L300",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-265327237,"Just a quick fix, dunno if acceptable","Yes, it was updated to fix a bug :). I'm not 100% sure we could place the logic in that line because I can't test it extensively right now and my brain doesn't have the 32kb of RAM necessary to run that code :P.
BTW, didn't know we should wrap the changes in ATOMIC BEGIN/END comments.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-265328446,"Just a quick fix, dunno if acceptable","On a more detailed analysis, by skipping that code block emitParticleTime_ won't be increased (I think this is no biggie)... but there's something strange in that code, how it comes that emissionTime_ is tested again on 316 if it's not modified in between the tests? (both EmitParticle and UpdateParticle don't seem to change that)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-266289008,"Just a quick fix, dunno if acceptable","This is looking good, can we get the modifications between ATOMIC BEGIN/END blocks?  The new API, local variable, and implementation additions should be localized within these blocks.  There have been problems with changes being lost when pulling in updates and this helps mitigate that, thanks!
For examples please see:
New API Example
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/RigidBody2D.h#L158
New Variable Example
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/RigidBody2D.h#L188
New Variable Initialization Example
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/RigidBody2D.cpp#L54
Localized New API Implementation Example
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/TileMapDefs2D.cpp#L242",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-275565027,"Just a quick fix, dunno if acceptable","OK, I gotta pull an updated version with the Atomic safeguards... however, any ideas on the emissionTime_ check on line 316 on the current master? Its inside a code block that performs the same check and there's nothing in there that modifies that var unless I'm missing something... I mean, in which situation will that be false?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/JimMarlowe,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-275697745,"Just a quick fix, dunno if acceptable","With the ATOMIC code guards, please remember to initialize the boolean that is being added, on different platforms, the initial value is not always set.
The emmisionTime_ check came in with PR I added, in order to support the duration spec in the pex file. The additional check may be of limited value, removing it would be more maintenance, and a change for change sake.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-275745371,"Just a quick fix, dunno if acceptable","Thanks guys! :)
I had a look as well and everything looks good,  am pretty sure that check is extraneous, so it could be removed.  I'm a fan of deleting lines when possible, red on a PR is nearly as good as green, and sometimes better :)
C++ doesn't automatically initialize default member variable values, so it should be initialized in the constructor, in an ATOMIC BEGIN/END block:  https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Source/Atomic/Atomic2D/ParticleEmitter2D.cpp#L51",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/Alan-FGR,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-275880241,"Just a quick fix, dunno if acceptable","OK, as discussed with @JimMarlowe we decided it's better to use SetEmitting() and IsEmitting() to keep it consistent with the 3D counterpart. I think GetEmitting() could be implemented so the binding parser will parse into properties and stuff like that. That being said I'm having minor difficulties on technical lands, for some reason after rebasing and adding the guards the bindings aren't 100% yet, I'm trying to figure what's the problem but I'm going to update the PR if I can't find it out tomorrow since the code is simple enough. I've made some mistakes and forgot to rebranch after cp so it's not a matter of running a command üòù... noobs these days ü§£",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1241,2016-12-05T17:43:08Z,2017-02-03T12:52:19Z,2017-02-03T13:01:34Z,MERGED,True,42,7,2,https://github.com/Alan-FGR,Added 2D particle emission control,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1241#issuecomment-277239890,"Just a quick fix, dunno if acceptable","Awesome :)  Great add @Alan-FGR and thanks for the assist @JimMarlowe , LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1243,2016-12-05T21:51:53Z,2016-12-05T23:16:38Z,2017-01-20T15:54:10Z,MERGED,True,13,4,2,https://github.com/JimMarlowe,Potential array out of bounds access #993,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1243,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1243,"This PR plugs a hole for a potential crash from calling ParticleEffect2D API, and fixes the ability for a ParticleEmitter2D to use the Duration setting in a pex file.","This PR plugs a hole for a potential crash from calling ParticleEffect2D API, and fixes the ability for a ParticleEmitter2D to use the Duration setting in a pex file.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1243,2016-12-05T21:51:53Z,2016-12-05T23:16:38Z,2017-01-20T15:54:10Z,MERGED,True,13,4,2,https://github.com/JimMarlowe,Potential array out of bounds access #993,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1243,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1243#issuecomment-265009687,"This PR plugs a hole for a potential crash from calling ParticleEffect2D API, and fixes the ability for a ParticleEmitter2D to use the Duration setting in a pex file.",Thanks for the PR and getting Build 2 brewing :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-265322267,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","Excellent, lots of good stuff pulled over üëç I'll give this a once over and do some UI testing tomorrow on it too before landing. Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-265882145,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","Oh, oh trouble in the üêî  coop!
It seems this is introducing a problem with using the F key to frame the selection in the scene editor, other keys like G for grid seem to be having difficulty working too.  I tried the branch, master (which worked), and back to branch to verify.  Lemme know if you can reproduce",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/Type1J,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-265929945,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","Touch is good for some laptops (Windows/Linux) as well. I wonder if a GeoSynth-like example with a dynamically generated saw, square or sine wave would be easy with Atomic after this PR.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-265935405,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","I can reproduce it, will fix.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-266018199,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.",@Type1J The new touch stuff needs to be wrapped in the UI subsystem and I think there are some TB cleanups (removals) that need to happen from some initial multitouch support added to Atomic back in 2015,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/Type1J,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-266022079,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","I assumed that we'd go through a clean up period. It's unfortunate that Atomic has some duplicated work, but it's good to see it on a path to consolidation. üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JimMarlowe,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-266242310,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","I found the problem, I inserted the new touch events into the middle of the TB event enum, since that's where TB put them. Not knowing there is a parallel array for the UI, which is initialized with numbers, not the TB enum values, and this caused some odd behaviors, more would have popped up. I moved the new enums to the end of both lists, and all is well.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-266242728,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","I had to switch from the tb enums to use raw numbers for C# constants binding purposes, definitely preferred the matching enum values.  Probably worth a big WARNING comment in the TB enum, that it must be synced with the enum in UI subsystem... and  I think I have used up my allocated use of the keyword enum in this comment :)   I'll do some further testing before landing, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1246,2016-12-06T17:34:31Z,2016-12-11T15:33:11Z,2016-12-22T18:10:02Z,MERGED,True,208,28,8,https://github.com/JimMarlowe,Capture TurboBadger hashtable fix and more #1205,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1246#issuecomment-266288561,"Upgraded turbobadger some, it includes commits/prs:
ee05368  API for multitouch
898cc72  Added some unit tests & fixed bug in TBHashTable.
TBWindow should have a virtual destructor #102
Fix TBImage::IsEmpty #93
I had to do some additional fixes for ee05368, I saw during compile that InvokePointerDown() and InvokePointerUp() were expecting to return bool, but they were still returning void, so I fixed them to the spirit in which they were intended.
Tested on Android as best as I could, see #1205 for details.","Awesome, tests out, landing ‚úàÔ∏è , thanks! üê´ ‚òÄÔ∏è üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1248,2016-12-07T02:03:52Z,2016-12-07T18:08:16Z,2017-01-20T15:54:07Z,CLOSED,False,2359,0,3,https://github.com/JimMarlowe,Generate C++ API documentation #1247,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1248,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1248,"This PR adds a task to generate C++ documentation.
It can be run with ./Build_AtomicEditor.sh --task=build:gendoxygen I can add a top level task if wanted.
Sadly, Windows is a little iffy as to where to find an installed doxygen.
I stuffed the README.md on the main page, and put in the Thunderbeast & Urho3d footer.","This PR adds a task to generate C++ documentation.
It can be run with ./Build_AtomicEditor.sh --task=build:gendoxygen I can add a top level task if wanted.
Sadly, Windows is a little iffy as to where to find an installed doxygen.
I stuffed the README.md on the main page, and put in the Thunderbeast & Urho3d footer.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1248,2016-12-07T02:03:52Z,2016-12-07T18:08:16Z,2017-01-20T15:54:07Z,CLOSED,False,2359,0,3,https://github.com/JimMarlowe,Generate C++ API documentation #1247,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1248,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1248#issuecomment-265524506,"This PR adds a task to generate C++ documentation.
It can be run with ./Build_AtomicEditor.sh --task=build:gendoxygen I can add a top level task if wanted.
Sadly, Windows is a little iffy as to where to find an installed doxygen.
I stuffed the README.md on the main page, and put in the Thunderbeast & Urho3d footer.","Awesome work, this far better than I would have thought for a baseline doxygen effort, thanks for taking the initiative on it üëç  :)
I made some tweaks and will land from #1251",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1250,2016-12-07T12:56:45Z,2016-12-08T01:12:10Z,2016-12-08T01:12:14Z,MERGED,True,55,2,4,https://github.com/JohnnyWahib,JS- inspector plugin support,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1250,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1250,"This will now allow the user to pass customized inspectors through the TS plugin system ( I will PR an example of how it gets used in the existing Atomic plugin example project shortly)
It comes with a change to recognize files with unknown extensions as .assets by using the default AssetImporter types.( I have left this change in a separate commit to be safe)
What this will allow us to do is fire up custom inspectors for currently unsupported file formats by checking the file's extension.","This will now allow the user to pass customized inspectors through the TS plugin system ( I will PR an example of how it gets used in the existing Atomic plugin example project shortly)
It comes with a change to recognize files with unknown extensions as .assets by using the default AssetImporter types.( I have left this change in a separate commit to be safe)
What this will allow us to do is fire up custom inspectors for currently unsupported file formats by checking the file's extension.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1250,2016-12-07T12:56:45Z,2016-12-08T01:12:10Z,2016-12-08T01:12:14Z,MERGED,True,55,2,4,https://github.com/JohnnyWahib,JS- inspector plugin support,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1250,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1250#issuecomment-265624079,"This will now allow the user to pass customized inspectors through the TS plugin system ( I will PR an example of how it gets used in the existing Atomic plugin example project shortly)
It comes with a change to recognize files with unknown extensions as .assets by using the default AssetImporter types.( I have left this change in a separate commit to be safe)
What this will allow us to do is fire up custom inspectors for currently unsupported file formats by checking the file's extension.","Looks great and only 55 lines of TypeScript!  Thanks, landing! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1251,2016-12-07T18:05:33Z,2016-12-07T18:34:45Z,2016-12-07T18:34:49Z,MERGED,True,2412,1,6,https://github.com/JoshEngebretson,[C++] Doxygen doc generation task,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1251,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1251,Closes #1247,Closes #1247,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1255,2016-12-07T19:32:56Z,2016-12-07T20:35:54Z,2016-12-07T20:35:56Z,MERGED,True,388,2,4,https://github.com/JoshEngebretson,Adding C# mdoc API reference task,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1255,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1255,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1256,2016-12-07T20:04:00Z,2016-12-07T20:39:10Z,2017-01-20T15:54:05Z,MERGED,True,9,0,2,https://github.com/JimMarlowe,Virtual DPad JS script is throwing exception,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1256,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1256,"Tracked it down to Input::BindButton() being evaporated from the source, this restores it.
Tested successfully on Android and on Desktop with Atomic.input.touchEmulation = true;","Tracked it down to Input::BindButton() being evaporated from the source, this restores it.
Tested successfully on Android and on Desktop with Atomic.input.touchEmulation = true;",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1256,2016-12-07T20:04:00Z,2016-12-07T20:39:10Z,2017-01-20T15:54:05Z,MERGED,True,9,0,2,https://github.com/JimMarlowe,Virtual DPad JS script is throwing exception,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1256,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1256#issuecomment-265558683,"Tracked it down to Input::BindButton() being evaporated from the source, this restores it.
Tested successfully on Android and on Desktop with Atomic.input.touchEmulation = true;","Awesome, thanks for tracking this down, will update site download with hotfix once clear and can build",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1258,2016-12-07T21:19:58Z,2016-12-07T21:47:20Z,2016-12-09T02:01:20Z,MERGED,True,14,4,2,https://github.com/JoshEngebretson,[C#] Fix potential issue with VS2017 detection when VS2015 was previously installed,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1258,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1258,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,,,True,"{'THUMBS_UP': ['https://github.com/JoshEngebretson'], 'HEART': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259#issuecomment-265596369,,"Great, thanks for the PR, landing!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/rosshadden,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259#issuecomment-269938878,,"I wasn't sure if it made sense to say this here, or in a new issue, but I found a minimally-reproducible issue when using TS 2.1.  This issue prevents Atomic games from working, including the base 3d boilerplate project.

If you create a brand new 3d Typescript project, it runs as expected.
If, with typescript@2.1.1 or later (the current version at time of this writing is v2.1.4), you run tsc to compile the project, it no longer runs.  This includes the absolute latest version, typescript@next.
If, with typescript@2.0.10 or earlier, you run tsc to compile the project, it runs as expected.

I believe through code diffs that the code Atomic's base 3d project has generated on creation was done with typescript v2.0.x, which would explain why it works.
Speaking of diffs, this is the diff between the Spinner.js file generated with v2.0.10 (or in this case the one that came directly from creating the base 3d project) (left) and v2.1.1 (right):

As you can see, there are four changes.  Of those, the bottom one (Object.defineProperty) is insignificant.  The other three changes, where it messes with references to this and super(), cause the game to fail.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259#issuecomment-270150374,,"@rosshadden Thanks for the report, I believe this fixes the issue though I have not updated the site binaries quite yet with it: #1303",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/rosshadden,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259#issuecomment-270153642,,"Ah, yeah it looks like that should do the trick.  Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1259,2016-12-07T21:50:25Z,2016-12-07T22:39:15Z,2017-01-04T02:28:12Z,MERGED,True,299382,206830,45,https://github.com/shaddockh,[TypeScript] Update to version 2.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259,https://github.com/rosshadden,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1259#issuecomment-270280774,,"Just for some closure, I built the latest version of Atomic from source, and this is indeed fixed.  Thanks again to you and @shaddockh.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1263,2016-12-08T10:49:20Z,2016-12-08T14:03:54Z,2016-12-08T14:03:57Z,MERGED,True,7,8,11,https://github.com/mattbenic,Default AssetImporter.requiresCacheFile to false,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263,"Following @JohnnyWahib's change to allow non-recognized assets to be imported, we ran into an issue with our modified (async) cache code. RequiresCache defaults to true, which is inappropriate for these unrecognized assets, which hits an assert when we collect the details of expected cache files per asset.
The fix for this (defaulting requiresCacheFile to false and setting it to true in appropriate cases) isn't strictly necessary for default Atomic, but it does seem to be the correct approach, so PRing it as well.","Following @JohnnyWahib's change to allow non-recognized assets to be imported, we ran into an issue with our modified (async) cache code. RequiresCache defaults to true, which is inappropriate for these unrecognized assets, which hits an assert when we collect the details of expected cache files per asset.
The fix for this (defaulting requiresCacheFile to false and setting it to true in appropriate cases) isn't strictly necessary for default Atomic, but it does seem to be the correct approach, so PRing it as well.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1263,2016-12-08T10:49:20Z,2016-12-08T14:03:54Z,2016-12-08T14:03:57Z,MERGED,True,7,8,11,https://github.com/mattbenic,Default AssetImporter.requiresCacheFile to false,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263#issuecomment-265741019,"Following @JohnnyWahib's change to allow non-recognized assets to be imported, we ran into an issue with our modified (async) cache code. RequiresCache defaults to true, which is inappropriate for these unrecognized assets, which hits an assert when we collect the details of expected cache files per asset.
The fix for this (defaulting requiresCacheFile to false and setting it to true in appropriate cases) isn't strictly necessary for default Atomic, but it does seem to be the correct approach, so PRing it as well.","Great, it looks like nuget had an outage on the CI, so will kick it off again The remote name could not be resolved: 'api.nuget.org'
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1263,2016-12-08T10:49:20Z,2016-12-08T14:03:54Z,2016-12-08T14:03:57Z,MERGED,True,7,8,11,https://github.com/mattbenic,Default AssetImporter.requiresCacheFile to false,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1263#issuecomment-265746850,"Following @JohnnyWahib's change to allow non-recognized assets to be imported, we ran into an issue with our modified (async) cache code. RequiresCache defaults to true, which is inappropriate for these unrecognized assets, which hits an assert when we collect the details of expected cache files per asset.
The fix for this (defaulting requiresCacheFile to false and setting it to true in appropriate cases) isn't strictly necessary for default Atomic, but it does seem to be the correct approach, so PRing it as well.","üí£ Boom! Landing, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1266,2016-12-08T17:34:51Z,2016-12-08T18:59:35Z,2016-12-08T18:59:35Z,MERGED,True,32,8,5,https://github.com/Type1J,Support for constructors in the Web subsystem,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1266,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1266,"This patch adds support for constructors instead of forcing use of the ""make"" functions of the Web subsystem. When the Web subsystem was initially added constructors were not yet bound automatically. Now that they are, it would be surprising if using the WebRequest and WebSocket didn't work, if they were directly constructed. They probably should have had private constructors, but this patch removes the need for private constructors.","This patch adds support for constructors instead of forcing use of the ""make"" functions of the Web subsystem. When the Web subsystem was initially added constructors were not yet bound automatically. Now that they are, it would be surprising if using the WebRequest and WebSocket didn't work, if they were directly constructed. They probably should have had private constructors, but this patch removes the need for private constructors.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1266,2016-12-08T17:34:51Z,2016-12-08T18:59:35Z,2016-12-08T18:59:35Z,MERGED,True,32,8,5,https://github.com/Type1J,Support for constructors in the Web subsystem,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1266,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1266#issuecomment-265823886,"This patch adds support for constructors instead of forcing use of the ""make"" functions of the Web subsystem. When the Web subsystem was initially added constructors were not yet bound automatically. Now that they are, it would be surprising if using the WebRequest and WebSocket didn't work, if they were directly constructed. They probably should have had private constructors, but this patch removes the need for private constructors.","Great, thanks for the PR, landing! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1272,2016-12-09T20:18:50Z,2016-12-09T22:39:50Z,2017-01-20T15:53:57Z,MERGED,True,121,0,6,https://github.com/JimMarlowe,[Network] Resurrect additions for master server/client #1269,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272,"Restored functionality, all wrapped in // ATOMIC guards
Tested on linux with the multiplayer spacegame example.
A note about the master server, the list of included servers is getting pretty large, it needs some aging or unregistering functions.","Restored functionality, all wrapped in // ATOMIC guards
Tested on linux with the multiplayer spacegame example.
A note about the master server, the list of included servers is getting pretty large, it needs some aging or unregistering functions.",True,"{'THUMBS_UP': ['https://github.com/JoshEngebretson'], 'HEART': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1272,2016-12-09T20:18:50Z,2016-12-09T22:39:50Z,2017-01-20T15:53:57Z,MERGED,True,121,0,6,https://github.com/JimMarlowe,[Network] Resurrect additions for master server/client #1269,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272#issuecomment-266127566,"Restored functionality, all wrapped in // ATOMIC guards
Tested on linux with the multiplayer spacegame example.
A note about the master server, the list of included servers is getting pretty large, it needs some aging or unregistering functions.","I also tried having a (built) MP Spacegame server on linux, and a Android client, and was able to connect the two! Sadly, the spacegame has no mobile controls, but very nice to see the nat punchthru in action.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1272,2016-12-09T20:18:50Z,2016-12-09T22:39:50Z,2017-01-20T15:53:57Z,MERGED,True,121,0,6,https://github.com/JimMarlowe,[Network] Resurrect additions for master server/client #1269,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1272#issuecomment-266142949,"Restored functionality, all wrapped in // ATOMIC guards
Tested on linux with the multiplayer spacegame example.
A note about the master server, the list of included servers is getting pretty large, it needs some aging or unregistering functions.","Excellent work, it will help having the code blocks marked moving forward, I thought I had gone back and reapplied these.  I was wrong, thanks for the pick up and nat testing!  üëç LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1274,2016-12-10T18:44:46Z,2016-12-10T21:49:24Z,2016-12-10T22:48:03Z,MERGED,True,26,2,3,https://github.com/ScottDillman,Ct vcolor import,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1274,https://github.com/ScottDillman,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1274,A way to set the correct technique for a imported model with vertex colors.,A way to set the correct technique for a imported model with vertex colors.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1274,2016-12-10T18:44:46Z,2016-12-10T21:49:24Z,2016-12-10T22:48:03Z,MERGED,True,26,2,3,https://github.com/ScottDillman,Ct vcolor import,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1274,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1274#issuecomment-266242423,A way to set the correct technique for a imported model with vertex colors.,"Thanks for the squeaky clean PR, vertex colors are a great add üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1275,2016-12-11T20:17:48Z,2016-12-11T20:45:13Z,2016-12-11T20:45:16Z,MERGED,True,268,71,12,https://github.com/JoshEngebretson,"[C#] Misc Issues, see notes",2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1275,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1275,"Output dev build assemblies from project to Lib, so when modifying AtomicNET sources, changes are used properly by binary assembly reference
CSComponent cleanups for instantiation from script/serialized from scene (also cleans up nativeOverride hack)
Fix for exception when instantiating any RefCounted derived instance during a CSComponent default constructor
Better error reporting for CSComponent load issues
Adds Material.SetShaderParameter API
Adds Vector4/String to ScriptVariant
Fixed issue with shared project items where there would be red x's in IDE for folder (breaking some tooling like Resharper)
Fix issue with xbuild not copying mdb files (debugging dev builds AtomicNET in VSMac/MonoDevelop should work again)","Output dev build assemblies from project to Lib, so when modifying AtomicNET sources, changes are used properly by binary assembly reference
CSComponent cleanups for instantiation from script/serialized from scene (also cleans up nativeOverride hack)
Fix for exception when instantiating any RefCounted derived instance during a CSComponent default constructor
Better error reporting for CSComponent load issues
Adds Material.SetShaderParameter API
Adds Vector4/String to ScriptVariant
Fixed issue with shared project items where there would be red x's in IDE for folder (breaking some tooling like Resharper)
Fix issue with xbuild not copying mdb files (debugging dev builds AtomicNET in VSMac/MonoDevelop should work again)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1280,2016-12-14T22:05:56Z,2016-12-14T22:46:29Z,2016-12-16T23:29:01Z,MERGED,True,189,75,8,https://github.com/JoshEngebretson,Updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280,"Web subsystem typed events, web request post data setter and convenience response getter (which also caches the response, otherwise you would get one shot at reading the BufferQueue, oops), some misc cleanups as well (also adjusted the AtomicExamples for the new event names)
Adds Contributors and Vendor information to About window in editor","Web subsystem typed events, web request post data setter and convenience response getter (which also caches the response, otherwise you would get one shot at reading the BufferQueue, oops), some misc cleanups as well (also adjusted the AtomicExamples for the new event names)
Adds Contributors and Vendor information to About window in editor",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1280,2016-12-14T22:05:56Z,2016-12-14T22:46:29Z,2016-12-16T23:29:01Z,MERGED,True,189,75,8,https://github.com/JoshEngebretson,Updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280#issuecomment-267181111,"Web subsystem typed events, web request post data setter and convenience response getter (which also caches the response, otherwise you would get one shot at reading the BufferQueue, oops), some misc cleanups as well (also adjusted the AtomicExamples for the new event names)
Adds Contributors and Vendor information to About window in editor","@Type1J I added info for WebRequest events, which changes the string hash used for the event in JS code (having events like ""completed"" are ambiguous and will confuse the event system).  Just a heads up if you need to adjust the string for subscribers in JS code, in C++ the E_EVENTNAME from the event declaration is used.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1280,2016-12-14T22:05:56Z,2016-12-14T22:46:29Z,2016-12-16T23:29:01Z,MERGED,True,189,75,8,https://github.com/JoshEngebretson,Updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280,https://github.com/Type1J,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280#issuecomment-267404556,"Web subsystem typed events, web request post data setter and convenience response getter (which also caches the response, otherwise you would get one shot at reading the BufferQueue, oops), some misc cleanups as well (also adjusted the AtomicExamples for the new event names)
Adds Contributors and Vendor information to About window in editor",Looks good. Should something similar be done to WebSocket?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1280,2016-12-14T22:05:56Z,2016-12-14T22:46:29Z,2016-12-16T23:29:01Z,MERGED,True,189,75,8,https://github.com/JoshEngebretson,Updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1280#issuecomment-267721085,"Web subsystem typed events, web request post data setter and convenience response getter (which also caches the response, otherwise you would get one shot at reading the BufferQueue, oops), some misc cleanups as well (also adjusted the AtomicExamples for the new event names)
Adds Contributors and Vendor information to About window in editor","Currently on day 2.5 of no power, 15,000 households still without, so not looking good.  Everything is on electric, so no heat, hot water, etc :/

Yes, websocket events should be updated.

The shared ptr in the internal rep had lifetime issues and was a bit funky, internally it was just adding ref and this is clearer.

We could hold inflight requests in the web subsystem which would provide better querying and lifetime control...

Sending from phone will see if it comes through in issue
‚Ä¶
 On Dec 15, 2016, at 11:29 AM, Jay Sistar ***@***.***> wrote:

 @Type1J commented on this pull request.

 In Source/Atomic/Web/WebRequest.cpp:

 > @@ -401,11 +411,15 @@ void WebRequest::Send()
  {
      if (!is_->isAddedToMulti && !is_->isAborted)
      {
 -        is_->es_hold = this;
 +        // Add a reference to ourselves during the Send, this is released
 +        // in notifyInternal,  if we're leaking WebRequests check that
 +        // this is being called
 +        AddRef();
 +
 @JoshEngebretson Is there a reason to count manually? I'm just curious.

 ‚Äî
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267442358,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.",All issues fixed.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/Alan-FGR,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267469104,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.",Isn't this a dupe of another (possibly 2) issue? We should link the duplicates imho.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/Alan-FGR,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267470022,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","#1236 ü§¶ Holy geez... please forgive me, I really confused some stuff here.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267721585,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","Thanks, looking forward to having a look (and power, heat, lights, hot water) soon :)
‚Ä¶
 On Dec 15, 2016, at 12:59 PM, JimMarlowe ***@***.***> wrote:

 All issues fixed.

 ‚Äî
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267970437,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.",@AtomicBuildBot Retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-267992803,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-268020308,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","I've been doing some testing and it is working great, especially like that we get to see C# compile errors in the editor now.  I'll verify that VS also has similar error text to truncate all the build spam üëç
One note, when there is a build required, the play button switches state 2x. Here's a gif of what I am seeing:

Do you think this is easy to fix?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JimMarlowe,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-268025705,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","I dont know, I'll look.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JimMarlowe,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-268090195,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","Well, I can't reproduce the double greying on Linux. There is only one place that sends the E_NETBUILDBEGIN event and that is in NETBuildSystem::HandleToolUpdate(), so that means it's going thru here twice on OSX, Win.  My computer must be good (or poor) at finishing a build and bails out of the next HandleToolUpdate() before emitting another E_NETBUILDBEGIN.  If the timing of your gif is accurate, then OSX and Win may start another build, but decides down the line it is up to date and finishes without recompiling.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1281,2016-12-14T22:23:54Z,2016-12-20T13:24:41Z,2016-12-22T18:09:59Z,CLOSED,False,142,20,7,https://github.com/JimMarlowe,C# code changes require manual recompilation in AtomicEditor #1236,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281,https://github.com/JoshEngebretson,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1281#issuecomment-268241984,"This PR fixes the Play button for a C# project to always be up to date with the latest saved source files.  There is a check added to the play event handler, which looks to see if the current project is c#, then does a check for out of date sources. If the sources are ok, then no further action is needed, it simply plays the project. If the sources are out of date, then the BuildAndPlay processing starts and it returns out of the play event handler.  The BuildAndPlay function then compiles the project, and in the compile completed event handler, if successful, issues a Play event and the project is played after a short pause. If the compilation fails, only an error is put in the console, and the project is not played. Because of the fine work someone did when c# is compiling, the play button greys out while this compile happens also, giving the user an indication something is happening.","Ok, building locally and tracking it down, I'll land in a new PR once sorted, thanks for the leads üîç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1282,2016-12-14T23:39:11Z,2016-12-15T00:02:53Z,2016-12-15T00:02:54Z,MERGED,True,6,921,10,https://github.com/JoshEngebretson,Remove CurlManager and cleanups for old licensing system,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1282,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1282,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1284,2016-12-17T05:15:51Z,2016-12-19T17:54:02Z,2016-12-22T18:09:55Z,MERGED,True,14,1,3,https://github.com/JimMarlowe,Add TmxFile2D resource type for inspector fields #1279,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284,Adds the TmxFile2D resource type.,Adds the TmxFile2D resource type.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1284,2016-12-17T05:15:51Z,2016-12-19T17:54:02Z,2016-12-22T18:09:55Z,MERGED,True,14,1,3,https://github.com/JimMarlowe,Add TmxFile2D resource type for inspector fields #1279,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284#issuecomment-268000062,Adds the TmxFile2D resource type.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1284,2016-12-17T05:15:51Z,2016-12-19T17:54:02Z,2016-12-22T18:09:55Z,MERGED,True,14,1,3,https://github.com/JimMarlowe,Add TmxFile2D resource type for inspector fields #1279,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1284#issuecomment-268031419,Adds the TmxFile2D resource type.,"Awesome, works great, thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1285,2016-12-18T04:24:37Z,2016-12-19T17:56:41Z,2016-12-22T18:09:49Z,MERGED,True,41,50,16,https://github.com/JimMarlowe,Lint ts and fix ATOMIC_PARAMs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285,"Fixes the Typescript lint warnings, so the genscripts works better. Also fixes ATOMIC_PARAM syntax, since the js binding generator actually parses the comment after the definition for the arg type, otherwise it emits an odd warning.","Fixes the Typescript lint warnings, so the genscripts works better. Also fixes ATOMIC_PARAM syntax, since the js binding generator actually parses the comment after the definition for the arg type, otherwise it emits an odd warning.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1285,2016-12-18T04:24:37Z,2016-12-19T17:56:41Z,2016-12-22T18:09:49Z,MERGED,True,41,50,16,https://github.com/JimMarlowe,Lint ts and fix ATOMIC_PARAMs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285#issuecomment-268006862,"Fixes the Typescript lint warnings, so the genscripts works better. Also fixes ATOMIC_PARAM syntax, since the js binding generator actually parses the comment after the definition for the arg type, otherwise it emits an odd warning.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1285,2016-12-18T04:24:37Z,2016-12-19T17:56:41Z,2016-12-22T18:09:49Z,MERGED,True,41,50,16,https://github.com/JimMarlowe,Lint ts and fix ATOMIC_PARAMs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1285#issuecomment-268032061,"Fixes the Typescript lint warnings, so the genscripts works better. Also fixes ATOMIC_PARAM syntax, since the js binding generator actually parses the comment after the definition for the arg type, otherwise it emits an odd warning.",Thanks for sweeping up around the place :)  LANDING!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1287,2016-12-19T20:20:34Z,2016-12-19T20:44:06Z,2016-12-19T20:44:11Z,MERGED,True,73,9,7,https://github.com/JoshEngebretson,Adds C# inspector tooltips for editable attributes,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1287,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1287,"This PR makes it possible to define editor tooltips for C# component inspector fields, for example:
public class Spinner : CSComponent
{
    [Inspector(Tooltip = ""Sets the yaw rotation speed for the node"")]
    float Speed = 1.0f;    

    void Update(float timeStep)
    {
        Node.Yaw(Speed * timeStep * 75.0f);
    }
}

Closes #1194","This PR makes it possible to define editor tooltips for C# component inspector fields, for example:
public class Spinner : CSComponent
{
    [Inspector(Tooltip = ""Sets the yaw rotation speed for the node"")]
    float Speed = 1.0f;    

    void Update(float timeStep)
    {
        Node.Yaw(Speed * timeStep * 75.0f);
    }
}

Closes #1194",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1288,2016-12-20T16:43:44Z,2016-12-20T17:39:23Z,2016-12-20T20:13:45Z,MERGED,True,209,43,14,https://github.com/JoshEngebretson,"[C#] On demand editor solution compilation, including play mode",3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1288,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1288,"Closes #1236
@JimMarlowe I ended up refactoring this a bit, one thing to watch is that the ToolCore module doesn't become dependent on the AtomicEditor.  It is core tool functionality shared by AtomicTool, AtomicEditor, etc.  I missed this on the initial review, easy to do :)
Another note, If you find yourself adding UI stuff, like events, into ToolCore, that is also a sign that they need to be hooked up in the editor instead.
Whew, we have way more solid C# project workflow, so sayeth the wise üê´  üòÑ","Closes #1236
@JimMarlowe I ended up refactoring this a bit, one thing to watch is that the ToolCore module doesn't become dependent on the AtomicEditor.  It is core tool functionality shared by AtomicTool, AtomicEditor, etc.  I missed this on the initial review, easy to do :)
Another note, If you find yourself adding UI stuff, like events, into ToolCore, that is also a sign that they need to be hooked up in the editor instead.
Whew, we have way more solid C# project workflow, so sayeth the wise üê´  üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1288,2016-12-20T16:43:44Z,2016-12-20T17:39:23Z,2016-12-20T20:13:45Z,MERGED,True,209,43,14,https://github.com/JoshEngebretson,"[C#] On demand editor solution compilation, including play mode",3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1288,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1288#issuecomment-268346400,"Closes #1236
@JimMarlowe I ended up refactoring this a bit, one thing to watch is that the ToolCore module doesn't become dependent on the AtomicEditor.  It is core tool functionality shared by AtomicTool, AtomicEditor, etc.  I missed this on the initial review, easy to do :)
Another note, If you find yourself adding UI stuff, like events, into ToolCore, that is also a sign that they need to be hooked up in the editor instead.
Whew, we have way more solid C# project workflow, so sayeth the wise üê´  üòÑ","Is good, I will make notes.  I attempted to keep like things together... but there are times when the architecture is not obvious and then you've got this üî® and an error message.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1290,2016-12-20T23:09:59Z,2016-12-21T00:19:44Z,2016-12-21T00:19:47Z,MERGED,True,244,305,14,https://github.com/JoshEngebretson,[TypeScript] - Add strongly type events (native and script),6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1290,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1290,Closes #1203,Closes #1203,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1291,2016-12-21T14:48:26Z,2016-12-21T23:08:25Z,2016-12-22T18:09:49Z,CLOSED,False,27,5,2,https://github.com/JimMarlowe,EngineConfig issues with deployed applications #1276,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291,"There are TWO versions of ReadEngineConfig()
Version 1 is simple, it looks only in /Settings/Engine.json, the classes that use this are : AtomicPlayerApp, NETAtomicPlayer
Version 2 of ReadEngineConfig() searches the engineConfigSearchPaths looking for an existing directory, then looks to see if it has an existing Engine.json if no existing Engine.json it returns!  Classes that will use this are  : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp, IPCPlayerApp, AEPlayerApplication, NETIPCPlayerApp
IPCPlayerApp is the only class that fills the engineConfigSearchPaths , so it and AEPlayerApplication, NETIPCPlayerApp will seach somewhere.
These classes dont have any paths to search : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp.
Fixed Version 2 of ReadEngineConfig() to search ALL paths and take the 1st found Engine.json, and in AppBase, seed a default path (the same path as version 1) so all the classes that aren't searching will search for Engine.json
Also added copying Settings/Engine.json for OSX, but I am unable to test this.","There are TWO versions of ReadEngineConfig()
Version 1 is simple, it looks only in /Settings/Engine.json, the classes that use this are : AtomicPlayerApp, NETAtomicPlayer
Version 2 of ReadEngineConfig() searches the engineConfigSearchPaths looking for an existing directory, then looks to see if it has an existing Engine.json if no existing Engine.json it returns!  Classes that will use this are  : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp, IPCPlayerApp, AEPlayerApplication, NETIPCPlayerApp
IPCPlayerApp is the only class that fills the engineConfigSearchPaths , so it and AEPlayerApplication, NETIPCPlayerApp will seach somewhere.
These classes dont have any paths to search : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp.
Fixed Version 2 of ReadEngineConfig() to search ALL paths and take the 1st found Engine.json, and in AppBase, seed a default path (the same path as version 1) so all the classes that aren't searching will search for Engine.json
Also added copying Settings/Engine.json for OSX, but I am unable to test this.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1291,2016-12-21T14:48:26Z,2016-12-21T23:08:25Z,2016-12-22T18:09:49Z,CLOSED,False,27,5,2,https://github.com/JimMarlowe,EngineConfig issues with deployed applications #1276,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291#issuecomment-268543291,"There are TWO versions of ReadEngineConfig()
Version 1 is simple, it looks only in /Settings/Engine.json, the classes that use this are : AtomicPlayerApp, NETAtomicPlayer
Version 2 of ReadEngineConfig() searches the engineConfigSearchPaths looking for an existing directory, then looks to see if it has an existing Engine.json if no existing Engine.json it returns!  Classes that will use this are  : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp, IPCPlayerApp, AEPlayerApplication, NETIPCPlayerApp
IPCPlayerApp is the only class that fills the engineConfigSearchPaths , so it and AEPlayerApplication, NETIPCPlayerApp will seach somewhere.
These classes dont have any paths to search : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp.
Fixed Version 2 of ReadEngineConfig() to search ALL paths and take the 1st found Engine.json, and in AppBase, seed a default path (the same path as version 1) so all the classes that aren't searching will search for Engine.json
Also added copying Settings/Engine.json for OSX, but I am unable to test this.","This is looking great, I'll test and tweak for macOS as the settings json will go in the bundle's Resource folder there, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1291,2016-12-21T14:48:26Z,2016-12-21T23:08:25Z,2016-12-22T18:09:49Z,CLOSED,False,27,5,2,https://github.com/JimMarlowe,EngineConfig issues with deployed applications #1276,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1291#issuecomment-268667994,"There are TWO versions of ReadEngineConfig()
Version 1 is simple, it looks only in /Settings/Engine.json, the classes that use this are : AtomicPlayerApp, NETAtomicPlayer
Version 2 of ReadEngineConfig() searches the engineConfigSearchPaths looking for an existing directory, then looks to see if it has an existing Engine.json if no existing Engine.json it returns!  Classes that will use this are  : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp, IPCPlayerApp, AEPlayerApplication, NETIPCPlayerApp
IPCPlayerApp is the only class that fills the engineConfigSearchPaths , so it and AEPlayerApplication, NETIPCPlayerApp will seach somewhere.
These classes dont have any paths to search : AppBase, AEEditorApp, IPCClientApp, NETServiceApplication, PlayerApp.
Fixed Version 2 of ReadEngineConfig() to search ALL paths and take the 1st found Engine.json, and in AppBase, seed a default path (the same path as version 1) so all the classes that aren't searching will search for Engine.json
Also added copying Settings/Engine.json for OSX, but I am unable to test this.","Ok, thanks for the PR, I adjusted the mac side of things and will land in  #1295",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1293,2016-12-21T17:16:07Z,2016-12-21T17:40:05Z,2016-12-21T21:05:04Z,MERGED,True,3,0,1,https://github.com/shaddockh,Fix for #1277 - Set the base URL for typescript files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1293,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1293,"to be the Resources directory so that you can import non-relative modules.
Should be able to import Foo from ‚ÄúScripts/Foo‚Äù in addition to using import Foo from ""./Foo""","to be the Resources directory so that you can import non-relative modules.
Should be able to import Foo from ‚ÄúScripts/Foo‚Äù in addition to using import Foo from ""./Foo""",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1293,2016-12-21T17:16:07Z,2016-12-21T17:40:05Z,2016-12-21T21:05:04Z,MERGED,True,3,0,1,https://github.com/shaddockh,Fix for #1277 - Set the base URL for typescript files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1293,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1293#issuecomment-268588656,"to be the Resources directory so that you can import non-relative modules.
Should be able to import Foo from ‚ÄúScripts/Foo‚Äù in addition to using import Foo from ""./Foo""",Gotta love the one liners :) Thanks! üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1294,2016-12-21T20:42:48Z,2016-12-21T21:41:54Z,2016-12-21T21:41:57Z,MERGED,True,24,6,1,https://github.com/shaddockh,Fixes #1219 - improvements for working with vscode + some cleanup,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1294,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1294,"This PR does the following:

remove the deprecated allowNonTsExtensions
When copying the Atomic.d.ts file into the project, put it under typings/ambient/atomicgameengine instead of typings/main/ambient/atomicgameengine
Auto-generate a tasks.json file in the .vscode directory so that VSCode can compile the TS w/o any additional setup
Updated the tsconfig file with the rootUrl properly so non-relative paths work
clean up some var vs const issues","This PR does the following:

remove the deprecated allowNonTsExtensions
When copying the Atomic.d.ts file into the project, put it under typings/ambient/atomicgameengine instead of typings/main/ambient/atomicgameengine
Auto-generate a tasks.json file in the .vscode directory so that VSCode can compile the TS w/o any additional setup
Updated the tsconfig file with the rootUrl properly so non-relative paths work
clean up some var vs const issues",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1294,2016-12-21T20:42:48Z,2016-12-21T21:41:54Z,2016-12-21T21:41:57Z,MERGED,True,24,6,1,https://github.com/shaddockh,Fixes #1219 - improvements for working with vscode + some cleanup,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1294,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1294#issuecomment-268648178,"This PR does the following:

remove the deprecated allowNonTsExtensions
When copying the Atomic.d.ts file into the project, put it under typings/ambient/atomicgameengine instead of typings/main/ambient/atomicgameengine
Auto-generate a tasks.json file in the .vscode directory so that VSCode can compile the TS w/o any additional setup
Updated the tsconfig file with the rootUrl properly so non-relative paths work
clean up some var vs const issues",Thanks for the awesome PR üëç  :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1295,2016-12-21T23:07:56Z,2016-12-21T23:34:00Z,2016-12-21T23:34:02Z,MERGED,True,42,6,4,https://github.com/JoshEngebretson,Engine config fixes for deployed applications,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1295,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1295,Closes #1276,Closes #1276,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1296,2016-12-22T12:58:49Z,2016-12-22T13:24:16Z,2016-12-22T13:24:19Z,MERGED,True,2,0,1,https://github.com/JoshEngebretson,Add NSHighResolutionCapable flag to Atomic Editor info plist,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1296,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1296,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1300,2016-12-23T04:15:44Z,2016-12-23T13:31:03Z,2016-12-23T13:31:05Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Fixes #1299 - fix for Typedoc URL,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1300,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1300,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1303,2016-12-27T17:11:55Z,2016-12-28T16:17:02Z,2016-12-28T16:17:04Z,MERGED,True,5,0,1,https://github.com/shaddockh,Quick fix for #1301 - TS generated inspector fields blocks,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1303,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1303,TS now generates the inspector field blocks as _this.inspectorFields instead of this.inspectorFields.  This looks for this additional pattern when trying to find inspector fields.,TS now generates the inspector field blocks as _this.inspectorFields instead of this.inspectorFields.  This looks for this additional pattern when trying to find inspector fields.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1303,2016-12-27T17:11:55Z,2016-12-28T16:17:02Z,2016-12-28T16:17:04Z,MERGED,True,5,0,1,https://github.com/shaddockh,Quick fix for #1301 - TS generated inspector fields blocks,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1303,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1303#issuecomment-269499605,TS now generates the inspector field blocks as _this.inspectorFields instead of this.inspectorFields.  This looks for this additional pattern when trying to find inspector fields.,"Good catch, we'll release a hot fix with this update üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269501048,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","The legacy JS enums are good to keep for compatibility with current JS examples.  Do you think we should deprecate the legacy enums (I guess saying they are ""legacy"" implies we should) and move the JS examples over to the new enum naming, so consistent between TS/JS, or is the ""legacy"" style a better fit for JS code?  I lean towards the consistency being preferable...
Excellent, thanks for the PR, LANDING :) ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269502473,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","Unfortunately, the TS style enums are not usable in JS, so the JS examples are going to need to stay as they are.  The TS transpiler, when it sees a TS style enum, will actually replace it with the numeric constant associated with that enum in the generated JS.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269506241,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","Can we declare native enums as ambient so they are computed instead of using the numerical constant value provided by the compiler.  This is a win with native enum values as they may not be initialized by numeric symbols in C++ headers (something the C# bindings have to deal with)
If we can do this, then we can generate objects/properties for consistent JS/TS resolution, right?  For example: Atomic.FileMode would be an object with a FILE_WRITE property in JS:
Atomic.FileMode.FILE_WRITE
I am hopeful that ambient enum declarations are what we need: https://www.typescriptlang.org/docs/handbook/enums.html",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/shaddockh,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269508204,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","Yes, I think that would be possible, so instead of defining them as const enum, they would just be defined as declare enum.  Then on the C++ side, there would need to be a mapping between the JS object literal property and the internal C++ enum as you described.
How is the best way to convert all those enums to object literals on the native side instead of just constants hanging off Atomic?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269634521,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","We need to populate module enum objects with properties from native code, a nice thing is that we can use the native symbolic values and will be kept in sync, so the transpiled source isn't tied quite so closely to the binary.
I think this is the right move, though it is a breaking change, so we should leave the existing enum values in JS in place finding some way to deprecate them.  There is a similar issue in C# with the Constants.* needing to be broken up into discrete enums
I filed #1305 for JS enum objects, do you have any thoughts on how to deprecate JS API, has to be at runtime right? Hmmmmm :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1304,2016-12-27T17:14:07Z,2016-12-28T16:26:52Z,2017-01-20T19:33:52Z,MERGED,True,380,356,56,https://github.com/shaddockh,Convert to TS style enums,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304,https://github.com/shaddockh,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1304#issuecomment-269637815,"This adds in TS style enums for all of the enumerated types.  It also retains the original JS style constants, but comments them to indicate that they should only be used with vanilla JS.  The Editor code has been updated to take advantage of the TS style enums everywhere.","TS doesn't have any kind of way to deprecate something currently - see: microsoft/TypeScript#390
I think the best bet at this point is to just emit /** @deprecated */ as the comment above these items so they come out in the docs and the intellisense.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1306,2016-12-29T14:59:09Z,2016-12-29T16:32:24Z,2016-12-29T16:32:26Z,MERGED,True,184,55,13,https://github.com/JoshEngebretson,"Button URL‚Äôs, updates to help menu/welcome/new build, TurboBadger font calculation tweaks",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1306,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1306,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1309,2017-01-02T04:26:27Z,2017-01-02T19:48:12Z,2017-01-04T02:49:16Z,MERGED,True,2,1,1,https://github.com/rosshadden,Added `include` block to tsconfig.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309,"This makes typescript only scan the relevant directories, which should make it faster to build.","This makes typescript only scan the relevant directories, which should make it faster to build.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1309,2017-01-02T04:26:27Z,2017-01-02T19:48:12Z,2017-01-04T02:49:16Z,MERGED,True,2,1,1,https://github.com/rosshadden,Added `include` block to tsconfig.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309#issuecomment-269933536,"This makes typescript only scan the relevant directories, which should make it faster to build.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1309,2017-01-02T04:26:27Z,2017-01-02T19:48:12Z,2017-01-04T02:49:16Z,MERGED,True,2,1,1,https://github.com/rosshadden,Added `include` block to tsconfig.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309#issuecomment-270000482,"This makes typescript only scan the relevant directories, which should make it faster to build.","Thanks for the PR üëç
@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1309,2017-01-02T04:26:27Z,2017-01-02T19:48:12Z,2017-01-04T02:49:16Z,MERGED,True,2,1,1,https://github.com/rosshadden,Added `include` block to tsconfig.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309,https://github.com/rosshadden,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1309#issuecomment-270283241,"This makes typescript only scan the relevant directories, which should make it faster to build.","In retrospect, I am going to remove this.  I just set up a project such that the typescript source files were in a different directory than Resources, and it took me a bit to realize the reason it wasn't working was the include block not whitelisting my new directory...  Due to the lack of helpful errors or output when trying to debug something like that, it should remain a power-user feature that we add ourselves.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1311,2017-01-02T23:09:38Z,2017-01-02T23:37:07Z,2017-01-02T23:37:09Z,MERGED,True,918,111,39,https://github.com/JoshEngebretson,Object Metrics/Tracking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1311,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1311,"This PR adds a new Metrics subsystem capable of (deep) tracking engine and user RefCounted/Object instances including whether they were instantiated C++, C#, or JavaScript/TypeScript.  The metrics system will be expanded to track resource and other memory usage in the future.
More information on the new object tracking the wiki page: https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Profiling
The PR adds lightweight RTTI to RefCounted (const String& GetTypeName())  and punches up the Player subsystem with additional methods for loading, setting, unloading scenes.","This PR adds a new Metrics subsystem capable of (deep) tracking engine and user RefCounted/Object instances including whether they were instantiated C++, C#, or JavaScript/TypeScript.  The metrics system will be expanded to track resource and other memory usage in the future.
More information on the new object tracking the wiki page: https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Profiling
The PR adds lightweight RTTI to RefCounted (const String& GetTypeName())  and punches up the Player subsystem with additional methods for loading, setting, unloading scenes.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1312,2017-01-03T15:15:36Z,2017-01-03T17:51:00Z,2017-01-17T18:09:38Z,MERGED,True,25,3,4,https://github.com/JimMarlowe,Expose PackageFile to scripting,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1312,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1312,"This PR exposes the PackageFile object so the scripting languages can load and unload them, and examine the contents.
I had to create a new accessor, PackageFile::GetEntryName(unsigned) because the existing PackageFile::GetEntryNames() did not want to be bound.","This PR exposes the PackageFile object so the scripting languages can load and unload them, and examine the contents.
I had to create a new accessor, PackageFile::GetEntryName(unsigned) because the existing PackageFile::GetEntryNames() did not want to be bound.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1312,2017-01-03T15:15:36Z,2017-01-03T17:51:00Z,2017-01-17T18:09:38Z,MERGED,True,25,3,4,https://github.com/JimMarlowe,Expose PackageFile to scripting,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1312,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1312#issuecomment-270176490,"This PR exposes the PackageFile object so the scripting languages can load and unload them, and examine the contents.
I had to create a new accessor, PackageFile::GetEntryName(unsigned) because the existing PackageFile::GetEntryNames() did not want to be bound.","Ok great, thanks for the updates, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1315,2017-01-03T23:17:15Z,2017-01-04T00:00:26Z,2017-01-20T19:33:13Z,MERGED,True,4,1,1,https://github.com/JoshEngebretson,Restore Player.GetCurrentScene,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1315,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1315,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1316,2017-01-04T03:14:42Z,2017-01-04T03:54:27Z,2017-01-20T19:33:13Z,MERGED,True,7,8,5,https://github.com/rosshadden,"Fixed all occurrences of `typscript` typo, and reverted #1309.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1316,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1316,"Reverted #1309 for the reasons explained here.  Also fixed all of the places typescript was incorrectly spelled typscript, including in the filename of the language extension file.","Reverted #1309 for the reasons explained here.  Also fixed all of the places typescript was incorrectly spelled typscript, including in the filename of the language extension file.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1316,2017-01-04T03:14:42Z,2017-01-04T03:54:27Z,2017-01-20T19:33:13Z,MERGED,True,7,8,5,https://github.com/rosshadden,"Fixed all occurrences of `typscript` typo, and reverted #1309.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1316,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1316#issuecomment-270289667,"Reverted #1309 for the reasons explained here.  Also fixed all of the places typescript was incorrectly spelled typscript, including in the filename of the language extension file.","Great and thanks for the typo cleanup, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1318,2017-01-04T20:58:38Z,2017-01-05T00:22:21Z,2017-01-20T19:33:13Z,MERGED,True,29,6,2,https://github.com/JoshEngebretson,Subject Name support for EV code signing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1318,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1318,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1319,2017-01-05T08:01:14Z,2017-01-06T20:46:09Z,2017-01-06T23:54:29Z,CLOSED,False,35,0,2,https://github.com/balmacefa,Scene view 3 d middle mouse move,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,https://github.com/balmacefa,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,"use the same funcionality as the Q,E,A,D Keys to move the camera.","use the same funcionality as the Q,E,A,D Keys to move the camera.",True,{'THUMBS_UP': ['https://github.com/christoffersch']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1319,2017-01-05T08:01:14Z,2017-01-06T20:46:09Z,2017-01-06T23:54:29Z,CLOSED,False,35,0,2,https://github.com/balmacefa,Scene view 3 d middle mouse move,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319#issuecomment-270585475,"use the same funcionality as the Q,E,A,D Keys to move the camera.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1319,2017-01-05T08:01:14Z,2017-01-06T20:46:09Z,2017-01-06T23:54:29Z,CLOSED,False,35,0,2,https://github.com/balmacefa,Scene view 3 d middle mouse move,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,https://github.com/balmacefa,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319#issuecomment-270817867,"use the same funcionality as the Q,E,A,D Keys to move the camera.","I want to improve the speed of the camera, base on the distance of the selected object or the scene",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1319,2017-01-05T08:01:14Z,2017-01-06T20:46:09Z,2017-01-06T23:54:29Z,CLOSED,False,35,0,2,https://github.com/balmacefa,Scene view 3 d middle mouse move,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319#issuecomment-270993251,"use the same funcionality as the Q,E,A,D Keys to move the camera.","Thanks for the PR, please let me know when you are ready to have it reviewed.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1319,2017-01-05T08:01:14Z,2017-01-06T20:46:09Z,2017-01-06T23:54:29Z,CLOSED,False,35,0,2,https://github.com/balmacefa,Scene view 3 d middle mouse move,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319,https://github.com/rosshadden,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1319#issuecomment-271001653,"use the same funcionality as the Q,E,A,D Keys to move the camera.","To avoid confusion I'd like to close this until then.  Just reopen when ready, so all the ""open"" PRs have the intent to be merged. üò∏",True,{'THUMBS_UP': ['https://github.com/balmacefa']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1325,2017-01-06T16:50:28Z,2017-01-06T17:14:13Z,2017-01-20T19:33:14Z,MERGED,True,20,20,2,https://github.com/rosshadden,Feature/default path preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1325,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1325,"Closes #1324.
I might refactor this to pass a filesystem to PreferencesFormat from Preferences rather than obtaining a new reference.  But this certainly works.","Closes #1324.
I might refactor this to pass a filesystem to PreferencesFormat from Preferences rather than obtaining a new reference.  But this certainly works.",True,{'HOORAY': ['https://github.com/christoffersch']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1325,2017-01-06T16:50:28Z,2017-01-06T17:14:13Z,2017-01-20T19:33:14Z,MERGED,True,20,20,2,https://github.com/rosshadden,Feature/default path preference,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1325,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1325#issuecomment-270953005,"Closes #1324.
I might refactor this to pass a filesystem to PreferencesFormat from Preferences rather than obtaining a new reference.  But this certainly works.","Thanks for the PR, this is a really nice feature addition üëç
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1326,2017-01-06T18:39:22Z,2017-01-06T19:47:34Z,2017-01-20T19:33:14Z,MERGED,True,11,5,1,https://github.com/rosshadden,Updated defaultPath to the most recently used path.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326,This feature was requested by @shaddockh in #1324.,This feature was requested by @shaddockh in #1324.,True,"{'HEART': ['https://github.com/AxDSan'], 'THUMBS_UP': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1326,2017-01-06T18:39:22Z,2017-01-06T19:47:34Z,2017-01-20T19:33:14Z,MERGED,True,11,5,1,https://github.com/rosshadden,Updated defaultPath to the most recently used path.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326#issuecomment-270988809,This feature was requested by @shaddockh in #1324.,Great! Thanks :) üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1326,2017-01-06T18:39:22Z,2017-01-06T19:47:34Z,2017-01-20T19:33:14Z,MERGED,True,11,5,1,https://github.com/rosshadden,Updated defaultPath to the most recently used path.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326,https://github.com/AxDSan,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1326#issuecomment-270995903,This feature was requested by @shaddockh in #1324.,Appreciated!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/balmacefa,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-271046611,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/balmacefa,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-273675179,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","@JoshEngebretson,The lines are indented",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-273758929,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","@balmacefa I'll give this a try a bit later and see if we can sneak it in for Build 3, looks cool",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-273759067,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-275766273,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","The functionality for this PR is ok. The only problem I encountered in it's use, was from the camera speed.  It has no visible setting to show the user what it is, and is set by the right mouse button + mousewheel, according to https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Scene-Editor-Hotkeys. With no feedback that it is mouse speed is changing, you can do so, and then moving with camera with the middle mouse button can change dramatically, with no obvious way to recover the old setting.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1327,2017-01-07T00:27:50Z,2017-06-10T14:10:06Z,2017-06-10T14:10:06Z,CLOSED,False,36,0,2,https://github.com/balmacefa,Scene view 3d move camera with the middle mouse move,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327,https://github.com/balmacefa,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1327#issuecomment-275767205,"use the same funcionality as the Q,E,A,D Keys to move the camera. @JoshEngebretson @rosshadden","I propose a UI indicator of the status of the view #1330 , maybe we can include a speed indicator",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1328,2017-01-07T01:04:17Z,2017-01-07T02:30:38Z,2017-01-20T19:33:14Z,MERGED,True,2,0,1,https://github.com/rosshadden,Added myself to AUTHORS file.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1328,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1328,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1328,2017-01-07T01:04:17Z,2017-01-07T02:30:38Z,2017-01-20T19:33:14Z,MERGED,True,2,0,1,https://github.com/rosshadden,Added myself to AUTHORS file.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1328,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1328#issuecomment-271056675,,Welcome to the Atomic Camel Caravan! üê´üê´üê´‚òÄÔ∏è üòÑ,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/balmacefa,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271061804,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271088326,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","Thanks for the pull requests, will have a look at them soon",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/Alan-FGR,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271113731,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","@JoshEngebretson may need some refactor for capitalization and also the pesky tabs :P. Not too sure on naming too, maybe could be more descriptive. Also, I don't see the need to maintain a bool separately for the camera @balmacefa. Isn't it better to just check if the editor camera is being used every time since you have actualCameraNode_? Just some random thoughts, otherwise good work!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/Alan-FGR,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271114146,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","I also don't see the need for the lookCamera_... can't we just check that in L297? I mean, just check if the actualCameraNode_ is the defaultCameraNode_ and you don't need those bools at all... btw, I'd recommend changing those var names to something like 'activeCameraNode' or 'currentCameraNode' and 'sceneCameraNode' or something else more descriptive. I really couldn't tell right away what those are for.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/Alan-FGR,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271114215,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","Also, we got hardcoded keys all over the place :P.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/balmacefa,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271116466,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","Sorry for the naming of the variables, my English is bad :(, the reason I use the lockcamera boolean is if you want to move the camera (user once) for better framing, but I think is usedful to move it just we you wanna to. The actualCamera var is a dirty solution, to avoid saving the pos rot of the user's camera, if you change the cameraNode_ and save the scene in a user camera, it take like is the default camera",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/balmacefa,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271116582,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","Maybe if you received a event went the scene is saved, we can change the cameraNode_ ref to the default",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/Alan-FGR,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-271116934,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked",@balmacefa No need to apologize man! It's just constructive criticism :). Let's wait for further input from @JoshEngebretson then.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-272071806,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","@balmacefa This looks like really interesting functionality, I hadn't thought of using the scene camera like this, is this inspired by an existing 3D package?
Before reviewing in earnest, would you mind having a look over the C++ code conventions and make sure that the contributions follow the brief guidelines.  For example, one thing I notice is that it looks like the code has soft tabs (this is a common issue if you haven't run into it before).
Thanks.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/balmacefa,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-272074072,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","Sure I can change that and amend to the last commit,  I suggest you add a link of c++ convention to CONTRIBUTING. This functionality is present in blender and in deferent way in unity, they use another tab.",True,"{'THUMBS_UP': ['https://github.com/JoshEngebretson', 'https://github.com/mattbenic']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-272164273,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","@balmacefa Thanks, I just posted the C++ conventions yesterday and that is a very good suggestion on the CONTRIBUTING doc. I'll move the information to the wiki and then link that in the CONTRIBUTING file, as it is easy to forget to update that one.
Maybe someone will solve whitespace in our time? :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/balmacefa,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-273688232,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","@JoshEngebretson The lines are indented, i make cleared implementation https://github.com/balmacefa/AtomicGameEngine/commit/022bfc961b541b3e47308889f951e686d6f959c4, but i do not know what you think, maybe insted of change the method to virtual (https://github.com/balmacefa/AtomicGameEngine/commit/022bfc961b541b3e47308889f951e686d6f959c4#diff-5b9c5e06c291aa111d6451d1fe3f2386R93), we can change the ptr to the defaultCamera in 
  
    
      AtomicGameEngine/Source/AtomicEditor/Editors/SceneEditor3D/SceneEditor3D.cpp
    
    
         Line 256
      in
      c15b882
    
  
  
    

        
          
           sceneImporter_->SetSceneCamPosition(sceneView_->GetCameraNode()->GetWorldPosition()); 
        
    
  

, this is to avoid save the user camera data(pos, rot)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/JoshEngebretson,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-273757239,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","@balmacefa It is looking better üëç ,  we're currently getting the Build 3 binary release prepared (I still have one major issue in the works for it, finishing it up today).  I'd like to get the camera functionality factored in soon after the build ships.
BTW, good suggestion on updating CONTRIBUTING.md, I  added a link to developer info, including  C++ code convention page: https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Coding-Conventions-(CPlusPlus)
I noticed that GitHub smartly links the document when making new PR's, issues, etc, the developer info is a start and can be spruced up üå≤
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1329,2017-01-07T04:19:27Z,2017-06-10T14:10:22Z,2017-06-10T14:10:22Z,CLOSED,False,99,22,2,https://github.com/balmacefa,Toggle to Play camera,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329,https://github.com/JimMarlowe,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1329#issuecomment-275877672,"press C key to change between the __atomic_sceneview3d_camera and scene camera. Select a camera and press C to chage to that camera, if you dont select a camere, we change to the first camera compoment in the scene, if there is no camera switch to default (__atomic_sceneview3d_camera), lock the camera pos, rot with L key. Every time it is passed to a user's camera, it is blocked","This is an interesting feature, but it must have some UI feedback. Once the 'L' gets triggered, the camera is frozen. This can be done by pressing the 'L' and when you press 'C' to switch cameras the first time. With no locked indicator, you think the editor is broken.  It could really stand reporting which camera you are using also. Only supporting the 1st camera is hardcoded, is there no value in having more than one camera? If there is none, then this is fine. There is a oddity, when you have a camera selected and then you select the camera in the hierarchy view, you sometimes get a blue square, I've seen a big one and a smaller one, then it can disappear.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1334,2017-01-09T11:30:52Z,2017-01-09T18:05:30Z,2017-01-09T18:05:44Z,MERGED,True,13,0,2,https://github.com/mattbenic,Expose CycleDebugHudMode in UI,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1334,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1334,"This is just a quick add. I'm cycling these modes in our app, and it seemed like a generally useful one to push upstream.","This is just a quick add. I'm cycling these modes in our app, and it seemed like a generally useful one to push upstream.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1334,2017-01-09T11:30:52Z,2017-01-09T18:05:30Z,2017-01-09T18:05:44Z,MERGED,True,13,0,2,https://github.com/mattbenic,Expose CycleDebugHudMode in UI,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1334,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1334#issuecomment-271358125,"This is just a quick add. I'm cycling these modes in our app, and it seemed like a generally useful one to push upstream.",Thanks for the PR üê™  üëç  Landing! üõ©,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1342,2017-01-10T16:50:43Z,2017-01-10T21:24:27Z,2017-01-20T19:33:14Z,MERGED,True,132,1,2,https://github.com/rosshadden,Added all keys and scancodes that are supported by SDL but not mapped,3,['type: feature'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342,https://github.com/rosshadden,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342,"You'll notice the KEY_UNKNOWN on line 269 is not in atomic begin/end blocks.  This is because Urho actually has this mapped in the latest version, so I didn't see a reason to add it in the blocks.
I will at some point make a PR adding these to Urho itself, and if/when they merge we can replace ours from upstream.
Fixes #1337.","You'll notice the KEY_UNKNOWN on line 269 is not in atomic begin/end blocks.  This is because Urho actually has this mapped in the latest version, so I didn't see a reason to add it in the blocks.
I will at some point make a PR adding these to Urho itself, and if/when they merge we can replace ours from upstream.
Fixes #1337.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1342,2017-01-10T16:50:43Z,2017-01-10T21:24:27Z,2017-01-20T19:33:14Z,MERGED,True,132,1,2,https://github.com/rosshadden,Added all keys and scancodes that are supported by SDL but not mapped,3,['type: feature'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342,https://github.com/rosshadden,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342#issuecomment-271662826,"You'll notice the KEY_UNKNOWN on line 269 is not in atomic begin/end blocks.  This is because Urho actually has this mapped in the latest version, so I didn't see a reason to add it in the blocks.
I will at some point make a PR adding these to Urho itself, and if/when they merge we can replace ours from upstream.
Fixes #1337.","The atomicbuilds.moo.com pages are not working, so I don't know why two of the checks are failing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1342,2017-01-10T16:50:43Z,2017-01-10T21:24:27Z,2017-01-20T19:33:14Z,MERGED,True,132,1,2,https://github.com/rosshadden,Added all keys and scancodes that are supported by SDL but not mapped,3,['type: feature'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342#issuecomment-271665216,"You'll notice the KEY_UNKNOWN on line 269 is not in atomic begin/end blocks.  This is because Urho actually has this mapped in the latest version, so I didn't see a reason to add it in the blocks.
I will at some point make a PR adding these to Urho itself, and if/when they merge we can replace ours from upstream.
Fixes #1337.","Thanks for the PR (and updating the submodule commit)
atomicbuild.moo.com  used to point at our LAN (where the build box currently is) and I have disabled that for security reasons.  We do plan on moving the build box to the ""cloud"" thing I keep hearing about...
... in the meantime, Windows doesn't like constant keyword here:
 c:\jenkins\workspace\atomicpr_windows\source\atomic\input\../Input/InputEvents.h(423): error C2059: syntax error: 'constant'",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1342,2017-01-10T16:50:43Z,2017-01-10T21:24:27Z,2017-01-20T19:33:14Z,MERGED,True,132,1,2,https://github.com/rosshadden,Added all keys and scancodes that are supported by SDL but not mapped,3,['type: feature'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1342#issuecomment-271702360,"You'll notice the KEY_UNKNOWN on line 269 is not in atomic begin/end blocks.  This is because Urho actually has this mapped in the latest version, so I didn't see a reason to add it in the blocks.
I will at some point make a PR adding these to Urho itself, and if/when they merge we can replace ours from upstream.
Fixes #1337.","Awesome, thanks for the PR, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1347,2017-01-11T02:25:15Z,2017-01-11T03:08:28Z,2017-01-20T19:33:14Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,emcc snprintf missing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1347,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1347,"I fixed this only for ATOMIC_PLATFORM_WEB (emcc), the other platform's compilers were able to find these include files.","I fixed this only for ATOMIC_PLATFORM_WEB (emcc), the other platform's compilers were able to find these include files.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1347,2017-01-11T02:25:15Z,2017-01-11T03:08:28Z,2017-01-20T19:33:14Z,MERGED,True,5,0,1,https://github.com/JimMarlowe,emcc snprintf missing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1347,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1347#issuecomment-271765949,"I fixed this only for ATOMIC_PLATFORM_WEB (emcc), the other platform's compilers were able to find these include files.","This PR is the üí£, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1349,2017-01-11T10:48:42Z,2017-01-11T15:28:50Z,2017-01-20T19:33:14Z,MERGED,True,17,9,1,https://github.com/mattbenic,Fixes CSComponents on reparented nodes not being re-added to the scene for updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1349,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1349,"CSComponents on reparented nodes not being re-added to the scene for updates
Fixes #290","CSComponents on reparented nodes not being re-added to the scene for updates
Fixes #290",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1349,2017-01-11T10:48:42Z,2017-01-11T15:28:50Z,2017-01-20T19:33:14Z,MERGED,True,17,9,1,https://github.com/mattbenic,Fixes CSComponents on reparented nodes not being re-added to the scene for updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1349,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1349#issuecomment-271898331,"CSComponents on reparented nodes not being re-added to the scene for updates
Fixes #290","This looks great, the comment was primarily as I was thinking this was a corner case (ie. removing the node from the scene and then deciding to add it for some reason, wasn't thinking of reparent case).
I think we may need a specialized managed reparent method, which could save up some significant bookkeeping... maybe throw an exception when attempting to add a removed node with use ""Reparent"" method instead info in exception, we can wait for more data on adding this though :)
There are individual gotchas with various components being removed and added to a scene, and some that just shouldn't be (like Terrain), though in general this operation (especially when changing parents) should be well supported and quick
Thanks for the PR! LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1350,2017-01-11T11:13:53Z,2017-01-12T07:54:09Z,2017-03-27T08:34:49Z,CLOSED,False,7,4,2,https://github.com/mattbenic,Adds windowed setting to player window in default prefs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350,"Our artists were looking for windowed functionality and when I showed them how to do it they suggested the key should be there by default, but disabled.","Our artists were looking for windowed functionality and when I showed them how to do it they suggested the key should be there by default, but disabled.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1350,2017-01-11T11:13:53Z,2017-01-12T07:54:09Z,2017-03-27T08:34:49Z,CLOSED,False,7,4,2,https://github.com/mattbenic,Adds windowed setting to player window in default prefs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350#issuecomment-272099303,"Our artists were looking for windowed functionality and when I showed them how to do it they suggested the key should be there by default, but disabled.","This is an idiotic PR. My ""testing"" was clearly insufficient because the effect I was seeing was simply the reset of the config causing the window to move to the middle of the screen so the window frame is exposed. I tried ""windowed"" as an off chance (I thought I'd seen it previously) and that half-assed test indicated it worked. I am supremely embarrassed and annoyed with myself for this. Sorry :(
The real issue is that When a Height/Width is set, but no x/y, the window displays in such a way that the window title is hidden. But if no Height/Width/x/y is set, the window is centered.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1350,2017-01-11T11:13:53Z,2017-01-12T07:54:09Z,2017-03-27T08:34:49Z,CLOSED,False,7,4,2,https://github.com/mattbenic,Adds windowed setting to player window in default prefs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350#issuecomment-272156957,"Our artists were looking for windowed functionality and when I showed them how to do it they suggested the key should be there by default, but disabled.","No problem, I thought something might be up with this one, and it was really quick to look over.  Major context switches, many times a day on massive projects can be rough, am I right?  :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1350,2017-01-11T11:13:53Z,2017-01-12T07:54:09Z,2017-03-27T08:34:49Z,CLOSED,False,7,4,2,https://github.com/mattbenic,Adds windowed setting to player window in default prefs,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350,https://github.com/mattbenic,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1350#issuecomment-272157176,"Our artists were looking for windowed functionality and when I showed them how to do it they suggested the key should be there by default, but disabled.",Sure.. I'll take that excuse >.>,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1351,2017-01-11T12:32:43Z,2017-01-12T04:43:56Z,2017-01-18T07:53:33Z,CLOSED,False,13,0,2,https://github.com/JohnnyWahib,"Tagged Bone nodes as ""Atomic_Temporary"" ",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1351,https://github.com/JohnnyWahib,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1351,Prevents tagged bone nodes from being serialized with the scene.,Prevents tagged bone nodes from being serialized with the scene.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1351,2017-01-11T12:32:43Z,2017-01-12T04:43:56Z,2017-01-18T07:53:33Z,CLOSED,False,13,0,2,https://github.com/JohnnyWahib,"Tagged Bone nodes as ""Atomic_Temporary"" ",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1351,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1351#issuecomment-272074878,Prevents tagged bone nodes from being serialized with the scene.,"Thanks for the report and fix PR, glad the changes were minimal üëç
I put up the C++ coding conventions today (we've needed a guide for awhile, cough).
I adjusted the code a bit, you can see the changes here: 0b66d81
For example, I dropped the // ATOMIC END down to encapsulate the last change of that block, if it had gone much further down would probably have made two change blocks.  In practice, there aren't a ton of these... and some of them are temporary changes, this these.
I'll land from here: #1359
Cheers! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1359,2017-01-12T04:35:24Z,2017-01-12T05:01:54Z,2017-01-12T05:01:57Z,MERGED,True,21,1,2,https://github.com/JoshEngebretson,Fix for animated model bone issue,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1359,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1359,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1382,2017-01-14T20:02:16Z,2017-01-14T20:55:50Z,2017-01-20T19:33:14Z,MERGED,True,5,1,1,https://github.com/JoshEngebretson,Add a check for null native event (in the case of a script event),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1382,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1382,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1384,2017-01-16T17:29:37Z,2017-01-16T18:28:30Z,2017-01-20T19:33:14Z,MERGED,True,11,2,1,https://github.com/JimMarlowe,Fix linux high cpu usage #940,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1384,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1384,"@EternalXY had it right (thanks), it is the ALSA SDL implementation that is coded poorly. SDL had half the solution in a comment! (now it is in their latest 2.0.6?) and the other half they are now aware of apparently. It took a while of trudging thru the SDL repo to see the intent behind these changes, and for the last change, SDL does not know, so it must be because @EternalXY is so smart. It is gated specifically for Linux, because SDL is a cross platform library, and other platforms have support for ALSA sound drivers, which may not incur these issues.","@EternalXY had it right (thanks), it is the ALSA SDL implementation that is coded poorly. SDL had half the solution in a comment! (now it is in their latest 2.0.6?) and the other half they are now aware of apparently. It took a while of trudging thru the SDL repo to see the intent behind these changes, and for the last change, SDL does not know, so it must be because @EternalXY is so smart. It is gated specifically for Linux, because SDL is a cross platform library, and other platforms have support for ALSA sound drivers, which may not incur these issues.",True,"{'HOORAY': ['https://github.com/JoshEngebretson'], 'THUMBS_UP': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1384,2017-01-16T17:29:37Z,2017-01-16T18:28:30Z,2017-01-20T19:33:14Z,MERGED,True,11,2,1,https://github.com/JimMarlowe,Fix linux high cpu usage #940,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1384,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1384#issuecomment-272929209,"@EternalXY had it right (thanks), it is the ALSA SDL implementation that is coded poorly. SDL had half the solution in a comment! (now it is in their latest 2.0.6?) and the other half they are now aware of apparently. It took a while of trudging thru the SDL repo to see the intent behind these changes, and for the last change, SDL does not know, so it must be because @EternalXY is so smart. It is gated specifically for Linux, because SDL is a cross platform library, and other platforms have support for ALSA sound drivers, which may not incur these issues.","Fantastic! Wow, this has been a problem, well, forever!
This is sure to be popular with Linux users, especially ones greeted by a black screen at startup, a very üê´ thank you @JimMarlowe !!!
PS: The Windows CI box decided to reboot for updates, will kick it and the PR should go through, will land when green! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1385,2017-01-17T00:43:34Z,2017-01-17T16:17:45Z,2017-01-20T19:33:14Z,MERGED,True,20,19,11,https://github.com/JimMarlowe,JSONFile GetRoot fixes #1383,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385,"Fixes for JSONFile->GetRoot() returning a JSONValue&. I started out fixing the original #1383 issue, but though, if this mistake was made once, how many more times as it made? And here is your answer. It's too bad cppcheck couldn't find it.","Fixes for JSONFile->GetRoot() returning a JSONValue&. I started out fixing the original #1383 issue, but though, if this mistake was made once, how many more times as it made? And here is your answer. It's too bad cppcheck couldn't find it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1385,2017-01-17T00:43:34Z,2017-01-17T16:17:45Z,2017-01-20T19:33:14Z,MERGED,True,20,19,11,https://github.com/JimMarlowe,JSONFile GetRoot fixes #1383,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385#issuecomment-273216485,"Fixes for JSONFile->GetRoot() returning a JSONValue&. I started out fixing the original #1383 issue, but though, if this mistake was made once, how many more times as it made? And here is your answer. It's too bad cppcheck couldn't find it.","Great catch, thanks for addressing it, hmmmm, I wonder if there is some way to enforce this, maybe by making the copy constructor private?  If this doesn't send a depth charge through the code, would be good to consider.
In the meantime, LANDING! ‚úàÔ∏è üëç  Closes #1383",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1385,2017-01-17T00:43:34Z,2017-01-17T16:17:45Z,2017-01-20T19:33:14Z,MERGED,True,20,19,11,https://github.com/JimMarlowe,JSONFile GetRoot fixes #1383,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1385#issuecomment-273259100,"Fixes for JSONFile->GetRoot() returning a JSONValue&. I started out fixing the original #1383 issue, but though, if this mistake was made once, how many more times as it made? And here is your answer. It's too bad cppcheck couldn't find it.","Doing a pass of the Source tree with cppcheck http://cppcheck.sourceforge.net/ could be helpful. Not too much pain for some gain, though sometimes it's just fixing things to be correct, and does not change use or performance.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1386,2017-01-17T18:20:49Z,2017-01-18T00:55:22Z,2017-01-20T19:31:54Z,MERGED,True,72,3,75,https://github.com/JimMarlowe,Toggle button contrast #1267 and psd files #1292,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1386,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1386,"This pr makes a new skin element specifically for buttons in toggle mode. It adds a pressed image that is higher contrast than the button pressed image. Attempting to change the button pressed to be higher contrast was visible and distracting. This way the down state image can be adjusted separately.
I also removed the psd files in the turbobadger skin directories, as per reasoning in #1292","This pr makes a new skin element specifically for buttons in toggle mode. It adds a pressed image that is higher contrast than the button pressed image. Attempting to change the button pressed to be higher contrast was visible and distracting. This way the down state image can be adjusted separately.
I also removed the psd files in the turbobadger skin directories, as per reasoning in #1292",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1386,2017-01-17T18:20:49Z,2017-01-18T00:55:22Z,2017-01-20T19:31:54Z,MERGED,True,72,3,75,https://github.com/JimMarlowe,Toggle button contrast #1267 and psd files #1292,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1386,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1386#issuecomment-273349835,"This pr makes a new skin element specifically for buttons in toggle mode. It adds a pressed image that is higher contrast than the button pressed image. Attempting to change the button pressed to be higher contrast was visible and distracting. This way the down state image can be adjusted separately.
I also removed the psd files in the turbobadger skin directories, as per reasoning in #1292","This looks great, maybe we should switch toggles in the inspector over to use the new better contrasting skin downstate?  Thanks for the cleanup too, landing üëç  Closes #1292 and #1267",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/bparvanov,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed","‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387#issuecomment-273288296,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387#issuecomment-273349403,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed","@bparvanov Thanks for the PR, would you mind adding yourself to AUTHORS.md and I'll have a look?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/bparvanov,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387#issuecomment-273453962,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed",Done :),True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387#issuecomment-273758394,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed","Thanks, I'll test this out and get it in for the imminent next binary release
@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1387,2017-01-17T20:21:11Z,2017-01-20T19:23:07Z,2017-01-20T19:35:16Z,MERGED,True,20,0,3,https://github.com/bparvanov,Incorrect tab selection when resource editor is closed and then a new‚Ä¶,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1387#issuecomment-274156918,"‚Ä¶ one is opened
Steps to reproduce:

open a resource in Atomic Editor
open another one (after this step we have two tabs)
close the first tab without selecting it (just press the X)
open another resource

Result: Both tabs are selected and we can see the contents of the tab
created in step 2 instead of the one created in step 4
This happens only when we close tabs that reside on the left hand side
of the currently selected tab.
Reason: TBTabContainer::m_current_page is not updated when tabs are
closed","Awesome, thanks for the bug fix! üêõ
LANDING: ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1388,2017-01-18T01:01:11Z,2017-01-18T02:31:32Z,2017-01-18T02:31:35Z,MERGED,True,311,10,8,https://github.com/JoshEngebretson,Adding Frustum to bindings,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1388,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1388,"C# primarily as JS/TS need stack marshaling helpers also wraps managed application running in a try/catch block (for handling inner exceptions)
There's also a test in the AtomicTests repo: https://github.com/AtomicGameEngine/AtomicTests/blob/master/CSharpTests/FrustumTest","C# primarily as JS/TS need stack marshaling helpers also wraps managed application running in a try/catch block (for handling inner exceptions)
There's also a test in the AtomicTests repo: https://github.com/AtomicGameEngine/AtomicTests/blob/master/CSharpTests/FrustumTest",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.","This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273412808,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.","I think this is a good point to discuss how obsolescence should be handled going forward. C# supports an [Obsolete] attribute, I assume there's nothing like that in JS, but there might be in TS? Besides doing this in code, it can be handled in a predictable way and announced in build release notes.
Perhaps something like the following would work:

Create a ""Remove build 3 obsolete objects"" task that references this PR, and is scheduled for build 4.
In Build 3's release notes mention the APIs that will become be removed in Build 4.
As one of the first things in build 4, actually kill those off

@JoshEngebretson just pulling you into this convo :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273473548,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.","I searched for some kind of [Obsolete] annotation for TypeScript as that's really handy in C#, but unfortunately there is nothing really available yet.  There has been talk about how to handle it though.  In the mean time, I've just added comments on those elements that will get picked up by TypeDoc.
I like the idea of creating followup tasks to remove deprecated items.  That would be much better than scouring the code for TODO comments or just trying to make sure you remember that something has to be done.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/mattbenic,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273473795,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.",Yeah I think we all know how often those actually lead to things being done >.>,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/rosshadden,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273525345,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.",There is some talk about handling deprecations and obsolutions in TypeScript here.  But not currently a thing.,True,{'THUMBS_UP': ['https://github.com/mattbenic']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273583339,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.","@shaddockh Thanks for the PR, I'll check it out a bit later, looks good from a quick glance.
Yeah, C# compiler/IDE's have good support for deprecation... on TS, would be nice, though I think we can survive for a bit, for now good to have the comments in place for future TS deprecation language feature.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1389,2017-01-18T04:47:12Z,2017-01-19T11:37:00Z,2017-01-20T19:31:40Z,MERGED,True,22,27,3,https://github.com/shaddockh,Fixes #1305 - Convert constants to enums,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1389#issuecomment-273753846,"This PR adds new JS object literals to the Atomic namespace that allows for more proper enums instead of having to use constants.  Now, in both TS and JS, instead of using:
Atomic.BT_STATIC

you can use
Atomic.BodyType2D.BT_STATIC

The original constants are still present in the Atomic namespace so existing code doesn't break, but it is flagged to be removed.  I also left the existing constants in the d.ts, but am contemplating removing it.  The repercussions would be that existing TS that uses the constants would have transpilation errors and would have to be converted to use the enums, but the JS would work fine.  Also, it would clean up the auto-generated documentations and not have all those extra constants.  Thoughts?
Each of the existing legacy constants has a comment stating that it is deprecated and points to the corresponding enum.","@shaddockh Hey, some neurons misfired on that string format, which uses the variable name, I have no idea what I was thinking :)
I'll keep an eye out for any compiler warnings, though I don't think the cast to double was necessary, so in the end a few characters less code, and less code is always better üëç
Thanks! LANDING for Build 3! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1394,2017-01-19T19:15:34Z,2017-01-19T20:00:55Z,2017-01-20T19:31:26Z,MERGED,True,7,7,2,https://github.com/LaraEngebretson,Updated welcome screen and help menu with atomic community support,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1394,https://github.com/LaraEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1394,Closes #1344,Closes #1344,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1394,2017-01-19T19:15:34Z,2017-01-19T20:00:55Z,2017-01-20T19:31:26Z,MERGED,True,7,7,2,https://github.com/LaraEngebretson,Updated welcome screen and help menu with atomic community support,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1394,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1394#issuecomment-273882180,Closes #1344,"Awesome, thanks! üê´ LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1396,2017-01-20T00:55:45Z,2017-01-20T01:19:58Z,2017-01-20T01:20:00Z,MERGED,True,1827,1001,37,https://github.com/JoshEngebretson,Inspector array/vector support for dynamic defined arrays,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1396,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1396,"This is hooked up for primitives and math types currently for C#, can be hooked up for JS/TS (most of the plumbing is now in place)
There are some improvements to make in the near future, filed as #1395 (support resource type and node arrays, ability to specify a fixed size array in Inspector attr which is auto allocated)
There is a C# Inspector Vector test in the AtomicTests repo to sanity check: https://github.com/AtomicGameEngine/AtomicTests/tree/master/CSharpTests/InspectorVector
Closes #606
[Inspector]
bool[] MyBoolArray;

[Inspector]
int[] MyIntArray;

[Inspector]
float[] MyFloatArray;

[Inspector]
string[] MyStringArray;

[Inspector]
Color[] MyColorArray;

[Inspector]
Vector2[] MyVector2Array;

[Inspector]
Vector3[] MyVector3Array;
Yields:","This is hooked up for primitives and math types currently for C#, can be hooked up for JS/TS (most of the plumbing is now in place)
There are some improvements to make in the near future, filed as #1395 (support resource type and node arrays, ability to specify a fixed size array in Inspector attr which is auto allocated)
There is a C# Inspector Vector test in the AtomicTests repo to sanity check: https://github.com/AtomicGameEngine/AtomicTests/tree/master/CSharpTests/InspectorVector
Closes #606
[Inspector]
bool[] MyBoolArray;

[Inspector]
int[] MyIntArray;

[Inspector]
float[] MyFloatArray;

[Inspector]
string[] MyStringArray;

[Inspector]
Color[] MyColorArray;

[Inspector]
Vector2[] MyVector2Array;

[Inspector]
Vector3[] MyVector3Array;
Yields:",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1397,2017-01-20T18:54:40Z,2017-01-20T19:23:16Z,2017-01-20T19:31:16Z,MERGED,True,298,90,20,https://github.com/JoshEngebretson,Adding support for resource arrays and fixed array sizes to vector inspector,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1397,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1397,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1398,2017-01-20T20:42:53Z,2017-01-20T21:14:13Z,2017-06-27T03:48:53Z,MERGED,True,21,36,2,https://github.com/JoshEngebretson,Update build notes and add new contributors for Build 3,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1398,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1398,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1403,2017-01-21T20:35:18Z,2017-01-24T16:27:12Z,2017-02-07T15:31:26Z,MERGED,True,12,6,2,https://github.com/JimMarlowe,Fix preview animations crash #1402,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1403,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1403,"This was caused by an assumption that you would only press the Preview Animation button on an animated model, and was blindly using objects to that effect. You can press the button any time you are looking at at model, and it becomes a fair model browser (some models don‚Äôt get textures applied). And now you can press any of the animation settings on a static model and it wont crash.
There were some Turbobadger errors coming out, only when I compiled with debug, so I fixed those too.  I left the last line in, but commented out, the token blendcontainer is not used anywhere, maybe for future use?
AtomicEditor/editor/ui/animationtoolbar.tb.txt(6):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(13):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(19):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(25):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(32):Parse error: Include ""definitions>menubutton"" was not found!","This was caused by an assumption that you would only press the Preview Animation button on an animated model, and was blindly using objects to that effect. You can press the button any time you are looking at at model, and it becomes a fair model browser (some models don‚Äôt get textures applied). And now you can press any of the animation settings on a static model and it wont crash.
There were some Turbobadger errors coming out, only when I compiled with debug, so I fixed those too.  I left the last line in, but commented out, the token blendcontainer is not used anywhere, maybe for future use?
AtomicEditor/editor/ui/animationtoolbar.tb.txt(6):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(13):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(19):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(25):Parse error: Include ""definitions>menubutton"" was not found!
AtomicEditor/editor/ui/animationtoolbar.tb.txt(32):Parse error: Include ""definitions>menubutton"" was not found!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1404,2017-01-22T16:03:28Z,2017-01-27T23:28:54Z,2017-02-07T15:31:26Z,MERGED,True,241,7,6,https://github.com/JimMarlowe,Add UI Bargraph widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,"This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16","This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1404,2017-01-22T16:03:28Z,2017-01-27T23:28:54Z,2017-02-07T15:31:26Z,MERGED,True,241,7,6,https://github.com/JimMarlowe,Add UI Bargraph widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404#issuecomment-274640416,"This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16","Fixed the Y axis drawing, it was going from the top, down, now it draws from the bottom, up.
Fixed the requirement that you need to specify a skin, now the background_solid skin is defaulted in the widget.
Added a margin setting, which will shrink the bar width by the value given. This will be useful if you add a skin that has graphing lines, so you can see the background some.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1404,2017-01-22T16:03:28Z,2017-01-27T23:28:54Z,2017-02-07T15:31:26Z,MERGED,True,241,7,6,https://github.com/JimMarlowe,Add UI Bargraph widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404#issuecomment-274855586,"This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16","Awesome, I'll give this a whirl a little later üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1404,2017-01-22T16:03:28Z,2017-01-27T23:28:54Z,2017-02-07T15:31:26Z,MERGED,True,241,7,6,https://github.com/JimMarlowe,Add UI Bargraph widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404#issuecomment-275797407,"This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16","tabs.
I need more HUD accoutrements, so I guess I'll have to write them.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1404,2017-01-22T16:03:28Z,2017-01-27T23:28:54Z,2017-02-07T15:31:26Z,MERGED,True,241,7,6,https://github.com/JimMarlowe,Add UI Bargraph widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1404#issuecomment-275802338,"This PR adds a Atomic UI Bargraph widget, it is also be used from script as a UIBargraph.
It graphs values from 0.0-100.0, which can accessed with SetValueDouble(double), GetValueDouble(), SetValue(int), GetValue()
The axis command can change the drawing orientation to x, y
The bar color can be set with either hex or RGB values.
Setting a skin is needed, the default should be ""background_solid""
A ""live"" demo of a slider changing the bargraph in a layout file is:
         TBSlider: min: 0, max: 100, value: 0, connection: graphit
               lp: width: 50, height: 16
         TBBarGraph: value: 0, skin: background_solid, color: #00AF34, axis: x, connection: graphit
                lp: width: 50, height: 16","Great add, progress bars everywhere thank you! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1416,2017-01-25T01:59:45Z,2017-01-25T22:31:56Z,2017-01-25T23:25:28Z,CLOSED,False,276,0,4,https://github.com/Nyt0x,[Windows] Change graphics backend to use Direct3D 11 by default,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416,https://github.com/Nyt0x,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416,"[Windows] Change graphics backend to use Direct3D 11 by default  issue
#1415
I think that would be a first step to have d3d11 as the default on windows.","[Windows] Change graphics backend to use Direct3D 11 by default  issue
#1415
I think that would be a first step to have d3d11 as the default on windows.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1416,2017-01-25T01:59:45Z,2017-01-25T22:31:56Z,2017-01-25T23:25:28Z,CLOSED,False,276,0,4,https://github.com/Nyt0x,[Windows] Change graphics backend to use Direct3D 11 by default,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416#issuecomment-274998661,"[Windows] Change graphics backend to use Direct3D 11 by default  issue
#1415
I think that would be a first step to have d3d11 as the default on windows.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1416,2017-01-25T01:59:45Z,2017-01-25T22:31:56Z,2017-01-25T23:25:28Z,CLOSED,False,276,0,4,https://github.com/Nyt0x,[Windows] Change graphics backend to use Direct3D 11 by default,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416#issuecomment-275254025,"[Windows] Change graphics backend to use Direct3D 11 by default  issue
#1415
I think that would be a first step to have d3d11 as the default on windows.","This is great and should be a quick switch, once we're ready to do it.  We do need a bit more feedback on making the switch, so I made a thread: https://discourse.atomicgameengine.com/t/switching-default-windows-renderer-to-direct3d11/125
I am really stoked about the Water HQ improvement too! Let's keep that in a separate PR from the D3D switch, I'll close this, though let's keep it for reference for once we're ready to make the switch.
Thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1416,2017-01-25T01:59:45Z,2017-01-25T22:31:56Z,2017-01-25T23:25:28Z,CLOSED,False,276,0,4,https://github.com/Nyt0x,[Windows] Change graphics backend to use Direct3D 11 by default,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416,https://github.com/Nyt0x,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1416#issuecomment-275265047,"[Windows] Change graphics backend to use Direct3D 11 by default  issue
#1415
I think that would be a first step to have d3d11 as the default on windows.","Wait how did the water shader ended up in there? My god I'm bad with git..
No pb, I should not have send a request just for that anyway when I just did test desktop.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1417,2017-01-25T15:47:08Z,2017-01-25T22:25:05Z,2017-04-09T19:06:56Z,MERGED,True,1,0,1,https://github.com/JoshEngebretson,Fix for Skybox material assignment,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1417,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1417,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1418,2017-01-25T16:40:52Z,2017-01-25T22:03:02Z,2017-02-01T09:42:18Z,MERGED,True,11,0,1,https://github.com/mattbenic,Close wrapped file when disposing a File.Stream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1418,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1418,"Like it says on the label, fixes (my own damned) rookie mistake","Like it says on the label, fixes (my own damned) rookie mistake",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1418,2017-01-25T16:40:52Z,2017-01-25T22:03:02Z,2017-02-01T09:42:18Z,MERGED,True,11,0,1,https://github.com/mattbenic,Close wrapped file when disposing a File.Stream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1418,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1418#issuecomment-275246976,"Like it says on the label, fixes (my own damned) rookie mistake","Nice catch, thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1420,2017-01-26T14:52:17Z,2017-01-26T16:00:58Z,2017-01-26T16:54:15Z,MERGED,True,12,10,1,https://github.com/JoshEngebretson,Fix ScriptEvent for 1302,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1420,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1420,"This is a fix for the in progress #1302 branch
The parameter count for the native method was incorrect, so the method was never getting called.
It is possible to debug this with the AtomicEditor by passing the --player option, specifying a project, and placing a break point in the method.
AtomicEditor --player --project /Users/josh/Documents/AtomicProjects/MyProject
If you want variable arguments to a native function btw, specify DUK_VARARGS (then you need to check the stack top for how many args are passed in).
I also removed the push of the current function at the top of the method.
The code paste now runs! üëç  üòÑ","This is a fix for the in progress #1302 branch
The parameter count for the native method was incorrect, so the method was never getting called.
It is possible to debug this with the AtomicEditor by passing the --player option, specifying a project, and placing a break point in the method.
AtomicEditor --player --project /Users/josh/Documents/AtomicProjects/MyProject
If you want variable arguments to a native function btw, specify DUK_VARARGS (then you need to check the stack top for how many args are passed in).
I also removed the push of the current function at the top of the method.
The code paste now runs! üëç  üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1420,2017-01-26T14:52:17Z,2017-01-26T16:00:58Z,2017-01-26T16:54:15Z,MERGED,True,12,10,1,https://github.com/JoshEngebretson,Fix ScriptEvent for 1302,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1420,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1420#issuecomment-275442871,"This is a fix for the in progress #1302 branch
The parameter count for the native method was incorrect, so the method was never getting called.
It is possible to debug this with the AtomicEditor by passing the --player option, specifying a project, and placing a break point in the method.
AtomicEditor --player --project /Users/josh/Documents/AtomicProjects/MyProject
If you want variable arguments to a native function btw, specify DUK_VARARGS (then you need to check the stack top for how many args are passed in).
I also removed the push of the current function at the top of the method.
The code paste now runs! üëç  üòÑ",Thanks!  üëç   It didn't even occur to me that I was passing the incorrect number of params...thanks for the lookover.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1422,2017-01-27T02:59:18Z,2017-01-27T14:22:11Z,2017-01-27T14:22:15Z,MERGED,True,28,8,2,https://github.com/shaddockh,Atomic Script Events,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1422,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1422,This PR resolved #1302 allowing for a more standard way of defining script events to align with the Native events.  Thanks for the assistance @JoshEngebretson!,This PR resolved #1302 allowing for a more standard way of defining script events to align with the Native events.  Thanks for the assistance @JoshEngebretson!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1422,2017-01-27T02:59:18Z,2017-01-27T14:22:11Z,2017-01-27T14:22:15Z,MERGED,True,28,8,2,https://github.com/shaddockh,Atomic Script Events,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1422,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1422#issuecomment-275675796,This PR resolved #1302 allowing for a more standard way of defining script events to align with the Native events.  Thanks for the assistance @JoshEngebretson!,"Holy üê´ !  When it is right, it is right, I believe we've nailed it :)  +28/-6 lines to add ScriptEvent to JS/TS, sure why not!  Hot dammmnnnn! üî•
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1426,2017-01-28T23:01:34Z,2017-01-30T13:07:57Z,2017-01-30T21:39:19Z,MERGED,True,1,0,1,https://github.com/shaddockh,Fix for #1425,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1426,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1426,"@JoshEngebretson, This fixes the issue with the Atom editor displaying the ""js outdated"" error described on the forums.","@JoshEngebretson, This fixes the issue with the Atom editor displaying the ""js outdated"" error described on the forums.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1426,2017-01-28T23:01:34Z,2017-01-30T13:07:57Z,2017-01-30T21:39:19Z,MERGED,True,1,0,1,https://github.com/shaddockh,Fix for #1425,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1426,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1426#issuecomment-276058141,"@JoshEngebretson, This fixes the issue with the Atom editor displaying the ""js outdated"" error described on the forums.","Great, thanks üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1430,2017-02-02T08:52:57Z,2017-02-03T12:49:54Z,2017-02-09T15:07:21Z,MERGED,True,4,0,1,https://github.com/raheelx,Created a case for UInt types when setting values on CSComponents,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1430,https://github.com/raheelx,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1430,"Hi @JoshEngebretson
i added a case for uints when setting values to fields on a CSComponent.

Raheel","Hi @JoshEngebretson
i added a case for uints when setting values to fields on a CSComponent.

Raheel",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1430,2017-02-02T08:52:57Z,2017-02-03T12:49:54Z,2017-02-09T15:07:21Z,MERGED,True,4,0,1,https://github.com/raheelx,Created a case for UInt types when setting values on CSComponents,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1430,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1430#issuecomment-277239478,"Hi @JoshEngebretson
i added a case for uints when setting values to fields on a CSComponent.

Raheel","Hi @raheelx, awesome, thanks!  LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1432,2017-02-03T21:22:25Z,2017-02-06T17:44:07Z,2017-02-06T18:44:33Z,MERGED,True,881,930,83,https://github.com/shaddockh,1393 - Update editor to use new event signatures,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1432,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1432,"This PR ended up being quite a bit larger than I anticipated, but I think it really cleans things up.
fixes #1424
fixes #1393
The following were changed:

All of the calls to subscribeToEvent were updated to use the new signature:

subscribeToEvent(Atomic.UIWidgetEvent((e)=>{ ... }));
unsubscribeFromEvent(Atomic.UIWidgetEventType);


sendEvent was updated to accept a meta data object like subscribeToEvent and updated to use the new signature:

sendEvent(Atomic.UIWidgetEventData({ data object }));



New method Atomic.scriptEventData was created for user defined events


All editor events defined in EditorEvents.ts were migrated to native code so that they could be manipulated with the new declarative event handling.


Identified events that were not being referenced anywhere and removed them

E_FINDTEXT
E_FINDTEXTCLOSE
E_FINDTEXTOPEN
E_JAVASCRIPTSAVED
E_EDITORPLAYSTOP (E_EDITORPLAYERSTOPPED is used insted)
E_PLAYERERROR
E_CONSOLEMESSAGE
E_PLATFORMCHANGE
E_CURLCOMPLETE
E_EDITORSHUTDOWN
E_RESOURCEEDITORCHANGED



Modified the JS parsing to extract out comments from ATOMIC_EVENT and ATOMIC_PARM calls so that they can be emitted into the .d.ts file and picked up by TSDoc

comment needs to be a single line comment on the line above the ATOMIC_EVENT or after the param type on the ATOMIC_PARM



Added some documentation to the events...more needed though.


Cleaned up events that were not sending the right params or were sending params when there were none identified for that event


Removed the old style ENUMS from the d.ts.  They are still in the engine so existing JS doesn't break, but TS will display errors until the usage is mapped to the new enums


Updated all enum references in the editor to use the new style enums","This PR ended up being quite a bit larger than I anticipated, but I think it really cleans things up.
fixes #1424
fixes #1393
The following were changed:

All of the calls to subscribeToEvent were updated to use the new signature:

subscribeToEvent(Atomic.UIWidgetEvent((e)=>{ ... }));
unsubscribeFromEvent(Atomic.UIWidgetEventType);


sendEvent was updated to accept a meta data object like subscribeToEvent and updated to use the new signature:

sendEvent(Atomic.UIWidgetEventData({ data object }));



New method Atomic.scriptEventData was created for user defined events


All editor events defined in EditorEvents.ts were migrated to native code so that they could be manipulated with the new declarative event handling.


Identified events that were not being referenced anywhere and removed them

E_FINDTEXT
E_FINDTEXTCLOSE
E_FINDTEXTOPEN
E_JAVASCRIPTSAVED
E_EDITORPLAYSTOP (E_EDITORPLAYERSTOPPED is used insted)
E_PLAYERERROR
E_CONSOLEMESSAGE
E_PLATFORMCHANGE
E_CURLCOMPLETE
E_EDITORSHUTDOWN
E_RESOURCEEDITORCHANGED



Modified the JS parsing to extract out comments from ATOMIC_EVENT and ATOMIC_PARM calls so that they can be emitted into the .d.ts file and picked up by TSDoc

comment needs to be a single line comment on the line above the ATOMIC_EVENT or after the param type on the ATOMIC_PARM



Added some documentation to the events...more needed though.


Cleaned up events that were not sending the right params or were sending params when there were none identified for that event


Removed the old style ENUMS from the d.ts.  They are still in the engine so existing JS doesn't break, but TS will display errors until the usage is mapped to the new enums


Updated all enum references in the editor to use the new style enums",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1432,2017-02-03T21:22:25Z,2017-02-06T17:44:07Z,2017-02-06T18:44:33Z,MERGED,True,881,930,83,https://github.com/shaddockh,1393 - Update editor to use new event signatures,13,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1432,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1432#issuecomment-277756792,"This PR ended up being quite a bit larger than I anticipated, but I think it really cleans things up.
fixes #1424
fixes #1393
The following were changed:

All of the calls to subscribeToEvent were updated to use the new signature:

subscribeToEvent(Atomic.UIWidgetEvent((e)=>{ ... }));
unsubscribeFromEvent(Atomic.UIWidgetEventType);


sendEvent was updated to accept a meta data object like subscribeToEvent and updated to use the new signature:

sendEvent(Atomic.UIWidgetEventData({ data object }));



New method Atomic.scriptEventData was created for user defined events


All editor events defined in EditorEvents.ts were migrated to native code so that they could be manipulated with the new declarative event handling.


Identified events that were not being referenced anywhere and removed them

E_FINDTEXT
E_FINDTEXTCLOSE
E_FINDTEXTOPEN
E_JAVASCRIPTSAVED
E_EDITORPLAYSTOP (E_EDITORPLAYERSTOPPED is used insted)
E_PLAYERERROR
E_CONSOLEMESSAGE
E_PLATFORMCHANGE
E_CURLCOMPLETE
E_EDITORSHUTDOWN
E_RESOURCEEDITORCHANGED



Modified the JS parsing to extract out comments from ATOMIC_EVENT and ATOMIC_PARM calls so that they can be emitted into the .d.ts file and picked up by TSDoc

comment needs to be a single line comment on the line above the ATOMIC_EVENT or after the param type on the ATOMIC_PARM



Added some documentation to the events...more needed though.


Cleaned up events that were not sending the right params or were sending params when there were none identified for that event


Removed the old style ENUMS from the d.ts.  They are still in the engine so existing JS doesn't break, but TS will display errors until the usage is mapped to the new enums


Updated all enum references in the editor to use the new style enums","Ok, all checks out, great work again, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.","Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-277418385,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.",@JimMarlowe I started looking at what would be required to send the change theme message to the code editor and I have it all working except I ran into some kind of race condition where the webclient pulls a stale version of the settings.  If you submit the value a second time it picks it up though making me think that the settings are getting propagated after the menu event completes.  Still looking into it and if I find a solution I'll PR.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-277424271,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.","Ok, I've got the plumbing in place in my branch at TSH-ATOMIC-DYNAMIC-WEBVIEW-SETTINGS
Basically, if you pull this in and set the app setting: ""CodeEditor"",""Theme"",""vs or vs-dark"", then it will get sent to any active web views and they will automatically update.
I'll go ahead and PR this so you can pull it in.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-277764746,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.","@JimMarlowe Awesome!  This will certainly help get the light theme in circulation :)  I've landed @shaddockh's related PR's including the event signature TypeScript update, would you mind checking the JM-LIVE-THEME branch (might be good to rebase to master) and seeing if anything needs tweaking?
I am excited to see the light theme switch, also switching out monaco theme, so cool guys, thanks! üê´ üç∞ (Hm, camel cake, maybe camels don't go with everything üòâ )",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-277789466,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.","I'm workin it, had to double dip the rebase, and I'll add in the editor theme change too.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-278034667,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.",ack! this appears to have gone horribly wrong. I think its time to close this and start over.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1433,2017-02-04T00:05:38Z,2017-02-07T15:29:32Z,2017-07-13T15:16:55Z,CLOSED,False,2421,1898,151,https://github.com/JimMarlowe,Toggle editor themes,32,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1433#issuecomment-278050961,"Allows switching of light and dark editor themes, using an entry in the Developer menu, Toggle Theme.
This change happens in real time, and is saved in the preferences to the last setting you've selected, so it will come back in that theme.
It handles 99% of the user interface, there are some minor artifacts when switching between the themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.
The codeEditor theme is not changed, and needs some work in order to also change it on the fly.","No worries, git can really go sideways sometimes :)  I'd like to start squashing PR commits down when possible, definitely helps when rebasing to be working with one changeset",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1434,2017-02-04T05:35:20Z,2017-02-06T17:55:20Z,2017-02-06T18:12:00Z,MERGED,True,1216,910,57,https://github.com/shaddockh,Update to Monaco Editor 0.8.1.  Fixes #1392,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1434,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1434,,,True,{'THUMBS_UP': ['https://github.com/Alan-FGR']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1434,2017-02-04T05:35:20Z,2017-02-06T17:55:20Z,2017-02-06T18:12:00Z,MERGED,True,1216,910,57,https://github.com/shaddockh,Update to Monaco Editor 0.8.1.  Fixes #1392,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1434,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1434#issuecomment-277760050,,"Great, tested on Windows as well, thanks aaaand LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1435,2017-02-04T06:57:48Z,2017-02-06T18:05:07Z,2017-02-06T18:44:00Z,MERGED,True,163,25,5,https://github.com/shaddockh,User and Application settings improvements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435,"This PR enhances the way settings are handled

Editor level settings can be retrieved and set from editor extensions
When settings are updated, any open web views will auto-reconfigure the code editor window with any updates.  This allows for changing the code theme on the fly","This PR enhances the way settings are handled

Editor level settings can be retrieved and set from editor extensions
When settings are updated, any open web views will auto-reconfigure the code editor window with any updates.  This allows for changing the code theme on the fly",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1435,2017-02-04T06:57:48Z,2017-02-06T18:05:07Z,2017-02-06T18:44:00Z,MERGED,True,163,25,5,https://github.com/shaddockh,User and Application settings improvements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435#issuecomment-277773133,"This PR enhances the way settings are handled

Editor level settings can be retrieved and set from editor extensions
When settings are updated, any open web views will auto-reconfigure the code editor window with any updates.  This allows for changing the code theme on the fly","Hey, so master has an issue with the combination of changes from the PR's
Get this after cleaning with git clean -dxf
AtomicEditor/editor/Editor.ts(194,39): error TS2305: Module '""c:/Dev/atomic/AtomicGameEngine/Script/AtomicEditor/editor/EditorEvents""' has no exported member 'UserPreferencesChangedEvent'.
AtomicEditor/editor/Editor.ts(199,37): error TS2339: Property 'UserPreferencesChangedNotification' does not exist on type 'typeof ""c:/Dev/atomic/AtomicGameEngine/Script/AtomicEditor/editor/EditorEvents""'.
Any thoughts?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1435,2017-02-04T06:57:48Z,2017-02-06T18:05:07Z,2017-02-06T18:44:00Z,MERGED,True,163,25,5,https://github.com/shaddockh,User and Application settings improvements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1435#issuecomment-277773721,"This PR enhances the way settings are handled

Editor level settings can be retrieved and set from editor extensions
When settings are updated, any open web views will auto-reconfigure the code editor window with any updates.  This allows for changing the code theme on the fly","Yep, just noticed that... fix is incoming.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1437,2017-02-06T16:54:44Z,2017-02-06T18:11:40Z,2017-02-06T18:11:42Z,MERGED,True,121,34,9,https://github.com/JoshEngebretson,"Add a significant string registry for StringHash, use string instead of hash for variant map XML keys when possible",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1437,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1437,"This PR makes script component field values more pleasant in XML, uses field name instead of hash value, resave scene to switch to field names, names and hashes are supported for backwards compatibility.
Closes #1431","This PR makes script component field values more pleasant in XML, uses field name instead of hash value, resave scene to switch to field names, names and hashes are supported for backwards compatibility.
Closes #1431",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1438,2017-02-06T18:44:41Z,2017-02-06T19:20:17Z,2017-02-06T19:20:19Z,MERGED,True,2,2,1,https://github.com/shaddockh,Fix event handler to use the native wrapper.  ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1438,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1438,The merge pulled out the EditorEvents file that this relied on.,The merge pulled out the EditorEvents file that this relied on.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1438,2017-02-06T18:44:41Z,2017-02-06T19:20:17Z,2017-02-06T19:20:19Z,MERGED,True,2,2,1,https://github.com/shaddockh,Fix event handler to use the native wrapper.  ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1438,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1438#issuecomment-277775835,The merge pulled out the EditorEvents file that this relied on.,"Easy peasy, will land when green, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1439,2017-02-06T19:26:52Z,2017-02-06T20:23:38Z,2017-02-06T20:23:40Z,MERGED,True,8,1,1,https://github.com/JoshEngebretson,Register variant map xml name as significant at load time,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1439,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1439,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1440,2017-02-06T19:52:15Z,2017-02-06T20:23:55Z,2017-02-06T20:23:57Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Updating examples submodule,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1440,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1440,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1441,2017-02-07T00:31:40Z,2017-02-07T16:38:22Z,2017-02-07T16:38:29Z,MERGED,True,150,27,17,https://github.com/shaddockh,Programmatically jump to line in editor,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1441,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1441,"This PR wires up the JSResourceEditor::JumpToLineNumber and JumpToToken methods so that the editor can programmatically jump to a line number.  It additionally does the following:

Can request to load an editor tab passing a file path and also a line number and it will either load up a new editor and jump to the line or switch to it if it was previously loaded and jump to the line
work on the TypeScript compiler so that the compile results window that pops up is non-modal and magnifying glass icons appear next to each error.  Clicking the magnifying glass will load that file and jump to the line number

@JoshEngebretson At one point, wasn't there an ""Errors"" or ""Issues"" tab in the editor?  Do you think it would be a good idea to bring something like that back and then expose an API to be able to populate it with bookmarks to editor locations?  Bookmarks could be user set bookmarks, or a TODO parser that populates it, or the TS Compiler errors, or even a log scanner that scans the player log for errors?  If so, maybe that could be a followup issue?","This PR wires up the JSResourceEditor::JumpToLineNumber and JumpToToken methods so that the editor can programmatically jump to a line number.  It additionally does the following:

Can request to load an editor tab passing a file path and also a line number and it will either load up a new editor and jump to the line or switch to it if it was previously loaded and jump to the line
work on the TypeScript compiler so that the compile results window that pops up is non-modal and magnifying glass icons appear next to each error.  Clicking the magnifying glass will load that file and jump to the line number

@JoshEngebretson At one point, wasn't there an ""Errors"" or ""Issues"" tab in the editor?  Do you think it would be a good idea to bring something like that back and then expose an API to be able to populate it with bookmarks to editor locations?  Bookmarks could be user set bookmarks, or a TODO parser that populates it, or the TS Compiler errors, or even a log scanner that scans the player log for errors?  If so, maybe that could be a followup issue?",True,{'THUMBS_UP': ['https://github.com/Alan-FGR']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1443,2017-02-07T17:47:43Z,2017-02-07T22:51:56Z,2017-04-07T14:10:21Z,MERGED,True,36,0,2,https://github.com/JimMarlowe,Real time theme switching in editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443,"Allows switching of light and dark editor and code editor themes using an entries in the Developer menu, Toggle Theme and Toggle Code Editor Theme.
This changes happen in real time, and are saved in the preferences to the last setting you've selected, so it will come back in that theme.
There are some minor artifacts when switching between the editor themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.","Allows switching of light and dark editor and code editor themes using an entries in the Developer menu, Toggle Theme and Toggle Code Editor Theme.
This changes happen in real time, and are saved in the preferences to the last setting you've selected, so it will come back in that theme.
There are some minor artifacts when switching between the editor themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1443,2017-02-07T17:47:43Z,2017-02-07T22:51:56Z,2017-04-07T14:10:21Z,MERGED,True,36,0,2,https://github.com/JimMarlowe,Real time theme switching in editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443#issuecomment-278153358,"Allows switching of light and dark editor and code editor themes using an entries in the Developer menu, Toggle Theme and Toggle Code Editor Theme.
This changes happen in real time, and are saved in the preferences to the last setting you've selected, so it will come back in that theme.
There are some minor artifacts when switching between the editor themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.","Awesome, theme switching in 36 lines of TypeScript?!?!?! I know, lots more under the hood, still fun to say üëç  , going to give this a whirl in a moment here :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1443,2017-02-07T17:47:43Z,2017-02-07T22:51:56Z,2017-04-07T14:10:21Z,MERGED,True,36,0,2,https://github.com/JimMarlowe,Real time theme switching in editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443#issuecomment-278170292,"Allows switching of light and dark editor and code editor themes using an entries in the Developer menu, Toggle Theme and Toggle Code Editor Theme.
This changes happen in real time, and are saved in the preferences to the last setting you've selected, so it will come back in that theme.
There are some minor artifacts when switching between the editor themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.","@JimMarlowe This is really cool, I can now say I have switched Atomic Editor themes in realtime

Whoa! :)
Great job and happy to have the light theme on the Developer menu and prefs üëç , thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1443,2017-02-07T17:47:43Z,2017-02-07T22:51:56Z,2017-04-07T14:10:21Z,MERGED,True,36,0,2,https://github.com/JimMarlowe,Real time theme switching in editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1443#issuecomment-278187810,"Allows switching of light and dark editor and code editor themes using an entries in the Developer menu, Toggle Theme and Toggle Code Editor Theme.
This changes happen in real time, and are saved in the preferences to the last setting you've selected, so it will come back in that theme.
There are some minor artifacts when switching between the editor themes, a couple of borders and hilights are not changed for Turbobadger reasons and these return to normal on the next editor invocation. Since swapping themes is probably going to be a infrequent operation, it is tolerable.","Hay, 36 lines is better than 151 files in #1433 :) Plus, I had help from @shaddockh",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1444,2017-02-10T01:24:03Z,2017-02-13T16:56:47Z,2017-04-07T14:10:25Z,MERGED,True,37,0,1,https://github.com/JimMarlowe,Add Spin control to Animation Toolbar,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1444,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1444,"This PR adds a control in the Animation Toolbar to spin the previewed model. Though you can use the Inspector to rotate the model, who's got time for that? The control is a Slider, the leftmost position is off, there are 10 steps, the further right the slider is pushed, the faster the spin. Bonus, This feature also works while animations are playing.","This PR adds a control in the Animation Toolbar to spin the previewed model. Though you can use the Inspector to rotate the model, who's got time for that? The control is a Slider, the leftmost position is off, there are 10 steps, the further right the slider is pushed, the faster the spin. Bonus, This feature also works while animations are playing.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1444,2017-02-10T01:24:03Z,2017-02-13T16:56:47Z,2017-04-07T14:10:25Z,MERGED,True,37,0,1,https://github.com/JimMarlowe,Add Spin control to Animation Toolbar,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1444,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1444#issuecomment-279452092,"This PR adds a control in the Animation Toolbar to spin the previewed model. Though you can use the Inspector to rotate the model, who's got time for that? The control is a Slider, the leftmost position is off, there are 10 steps, the further right the slider is pushed, the faster the spin. Bonus, This feature also works while animations are playing.","Works great and really handy for viewing model in 360 at measured steps, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1446,2017-02-12T00:53:52Z,2017-02-13T17:18:15Z,2017-03-13T03:43:55Z,MERGED,True,35,4,3,https://github.com/JimMarlowe,Add statusbar to AtomicEditor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446,"This PR adds a status bar to the AtomicEditor. It displays text at the bottom of the tool, and uses a timer to remove the text after 10 seconds to avoid having stale text being displayed. The feature can be accessed from inside the editor code with the API  EditorUI.showEditorStatus( ""I am a status message"" );
or by using an event like : this.sendEvent(Editor.EditorModalEventData({ type: Editor.EDITOR_MODALINFO, title: """", message: ""I am a status message"" }));","This PR adds a status bar to the AtomicEditor. It displays text at the bottom of the tool, and uses a timer to remove the text after 10 seconds to avoid having stale text being displayed. The feature can be accessed from inside the editor code with the API  EditorUI.showEditorStatus( ""I am a status message"" );
or by using an event like : this.sendEvent(Editor.EditorModalEventData({ type: Editor.EDITOR_MODALINFO, title: """", message: ""I am a status message"" }));",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1446,2017-02-12T00:53:52Z,2017-02-13T17:18:15Z,2017-03-13T03:43:55Z,MERGED,True,35,4,3,https://github.com/JimMarlowe,Add statusbar to AtomicEditor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446#issuecomment-279253626,"This PR adds a status bar to the AtomicEditor. It displays text at the bottom of the tool, and uses a timer to remove the text after 10 seconds to avoid having stale text being displayed. The feature can be accessed from inside the editor code with the API  EditorUI.showEditorStatus( ""I am a status message"" );
or by using an event like : this.sendEvent(Editor.EditorModalEventData({ type: Editor.EDITOR_MODALINFO, title: """", message: ""I am a status message"" }));",Very cool!  I didn't even cross my mind that the editor would have access to the Atomic.UpdateEvent.  That opens up some doors to hook in some kind of promises system and handle some situations where one area of the editor is waiting on the results of something in the future.  Nice!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1446,2017-02-12T00:53:52Z,2017-02-13T17:18:15Z,2017-03-13T03:43:55Z,MERGED,True,35,4,3,https://github.com/JimMarlowe,Add statusbar to AtomicEditor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1446#issuecomment-279458480,"This PR adds a status bar to the AtomicEditor. It displays text at the bottom of the tool, and uses a timer to remove the text after 10 seconds to avoid having stale text being displayed. The feature can be accessed from inside the editor code with the API  EditorUI.showEditorStatus( ""I am a status message"" );
or by using an event like : this.sendEvent(Editor.EditorModalEventData({ type: Editor.EDITOR_MODALINFO, title: """", message: ""I am a status message"" }));","The status bar is really nice, love it, and another great add in +35 lines, thanks! ‚ù§Ô∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1447,2017-02-14T19:08:37Z,2017-02-16T11:40:33Z,2017-02-16T11:40:37Z,MERGED,True,55,22,1,https://github.com/JoshEngebretson,Support for Chromium WebView on Direct3D11,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1447,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1447,Adds support for WebView under Direct3D 11,Adds support for WebView under Direct3D 11,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1447,2017-02-14T19:08:37Z,2017-02-16T11:40:33Z,2017-02-16T11:40:37Z,MERGED,True,55,22,1,https://github.com/JoshEngebretson,Support for Chromium WebView on Direct3D11,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1447,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1447#issuecomment-279820858,Adds support for WebView under Direct3D 11,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1448,2017-02-14T21:14:54Z,2017-02-15T20:56:51Z,2017-03-13T03:43:48Z,CLOSED,False,35,2,2,https://github.com/JimMarlowe,Add thumbnail tooltip,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448,"This PR adds a thumbnail (image) tooltip. It will automagically provide the thumbnail tooltip for .png, .jpg assets in a project's Texture directory.  There is also support for using thumbnails for .prefab, .mdl and .fbx assets.   To add a thumbnail for an asset is ""easy"". The user can create a new directory in the project root directory (where Resources and Cache are) called Support.   A (png) thumbnail for an asset is named assetname.ext.png, where assetname.ext is what you would see in the Project browser. Then, when you hover over assetname.ext, the thumbnail tooltip will appear. If no thumbnail is created for the asset, then nothing will appear.
Normal text tooltips are unaffected, for a thumbail tooltip, the 1st character in the string is a  ""#"" character, followed by a pathname to the image to display. The Texture based images in the project will show the actual image files, as defined by the asset. The other type assets are redirected to the Support directory to look for custom thumbnail images.
The reason the Project/Support directory is selected to hold the thumbnails, is so they don‚Äôt effect the asset system, they are not needed for deploying the game, but they are relevant to the project.
OH NO 35 lines again!","This PR adds a thumbnail (image) tooltip. It will automagically provide the thumbnail tooltip for .png, .jpg assets in a project's Texture directory.  There is also support for using thumbnails for .prefab, .mdl and .fbx assets.   To add a thumbnail for an asset is ""easy"". The user can create a new directory in the project root directory (where Resources and Cache are) called Support.   A (png) thumbnail for an asset is named assetname.ext.png, where assetname.ext is what you would see in the Project browser. Then, when you hover over assetname.ext, the thumbnail tooltip will appear. If no thumbnail is created for the asset, then nothing will appear.
Normal text tooltips are unaffected, for a thumbail tooltip, the 1st character in the string is a  ""#"" character, followed by a pathname to the image to display. The Texture based images in the project will show the actual image files, as defined by the asset. The other type assets are redirected to the Support directory to look for custom thumbnail images.
The reason the Project/Support directory is selected to hold the thumbnails, is so they don‚Äôt effect the asset system, they are not needed for deploying the game, but they are relevant to the project.
OH NO 35 lines again!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1448,2017-02-14T21:14:54Z,2017-02-15T20:56:51Z,2017-03-13T03:43:48Z,CLOSED,False,35,2,2,https://github.com/JimMarlowe,Add thumbnail tooltip,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448#issuecomment-280098597,"This PR adds a thumbnail (image) tooltip. It will automagically provide the thumbnail tooltip for .png, .jpg assets in a project's Texture directory.  There is also support for using thumbnails for .prefab, .mdl and .fbx assets.   To add a thumbnail for an asset is ""easy"". The user can create a new directory in the project root directory (where Resources and Cache are) called Support.   A (png) thumbnail for an asset is named assetname.ext.png, where assetname.ext is what you would see in the Project browser. Then, when you hover over assetname.ext, the thumbnail tooltip will appear. If no thumbnail is created for the asset, then nothing will appear.
Normal text tooltips are unaffected, for a thumbail tooltip, the 1st character in the string is a  ""#"" character, followed by a pathname to the image to display. The Texture based images in the project will show the actual image files, as defined by the asset. The other type assets are redirected to the Support directory to look for custom thumbnail images.
The reason the Project/Support directory is selected to hold the thumbnails, is so they don‚Äôt effect the asset system, they are not needed for deploying the game, but they are relevant to the project.
OH NO 35 lines again!","Cool, I wonder if it would make sense to put the custom preview images next to the .asset files in the Resources folder instead of in a new Support folder?  So like, Camel.png would have a Camel.preview.png or  Camel.preview.jpg, these can be filtered at build time, and will be easy to add to repo as you would want to commit any custom previews I would think?
We need a better asset content UI, which supports previews, at that point probably won't need the preview in the tooptip.  We'll also want automatic generation of texture and fbx/prefab assets (can render the later to texture), custom preview items would override any automated preview.
Can cross that creek when we get to it... üõ∂ üòÑ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1448,2017-02-14T21:14:54Z,2017-02-15T20:56:51Z,2017-03-13T03:43:48Z,CLOSED,False,35,2,2,https://github.com/JimMarlowe,Add thumbnail tooltip,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448#issuecomment-280136202,"This PR adds a thumbnail (image) tooltip. It will automagically provide the thumbnail tooltip for .png, .jpg assets in a project's Texture directory.  There is also support for using thumbnails for .prefab, .mdl and .fbx assets.   To add a thumbnail for an asset is ""easy"". The user can create a new directory in the project root directory (where Resources and Cache are) called Support.   A (png) thumbnail for an asset is named assetname.ext.png, where assetname.ext is what you would see in the Project browser. Then, when you hover over assetname.ext, the thumbnail tooltip will appear. If no thumbnail is created for the asset, then nothing will appear.
Normal text tooltips are unaffected, for a thumbail tooltip, the 1st character in the string is a  ""#"" character, followed by a pathname to the image to display. The Texture based images in the project will show the actual image files, as defined by the asset. The other type assets are redirected to the Support directory to look for custom thumbnail images.
The reason the Project/Support directory is selected to hold the thumbnails, is so they don‚Äôt effect the asset system, they are not needed for deploying the game, but they are relevant to the project.
OH NO 35 lines again!",Down the spillway it goes.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1448,2017-02-14T21:14:54Z,2017-02-15T20:56:51Z,2017-03-13T03:43:48Z,CLOSED,False,35,2,2,https://github.com/JimMarlowe,Add thumbnail tooltip,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1448#issuecomment-280140277,"This PR adds a thumbnail (image) tooltip. It will automagically provide the thumbnail tooltip for .png, .jpg assets in a project's Texture directory.  There is also support for using thumbnails for .prefab, .mdl and .fbx assets.   To add a thumbnail for an asset is ""easy"". The user can create a new directory in the project root directory (where Resources and Cache are) called Support.   A (png) thumbnail for an asset is named assetname.ext.png, where assetname.ext is what you would see in the Project browser. Then, when you hover over assetname.ext, the thumbnail tooltip will appear. If no thumbnail is created for the asset, then nothing will appear.
Normal text tooltips are unaffected, for a thumbail tooltip, the 1st character in the string is a  ""#"" character, followed by a pathname to the image to display. The Texture based images in the project will show the actual image files, as defined by the asset. The other type assets are redirected to the Support directory to look for custom thumbnail images.
The reason the Project/Support directory is selected to hold the thumbnails, is so they don‚Äôt effect the asset system, they are not needed for deploying the game, but they are relevant to the project.
OH NO 35 lines again!","Ok, though let's make sure not to break the 35 line streak, üê´ üí®
üòÉ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1450,2017-02-17T03:58:22Z,2017-02-21T11:43:17Z,2017-03-13T03:43:41Z,MERGED,True,67,6,4,https://github.com/JimMarlowe,Add screenshot function,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,"This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...","This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1450,2017-02-17T03:58:22Z,2017-02-21T11:43:17Z,2017-03-13T03:43:41Z,MERGED,True,67,6,4,https://github.com/JimMarlowe,Add screenshot function,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450#issuecomment-280691660,"This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...","Changed filename format from Screenshot_dd_mm_yyyy_HH_MM_SS.ext to Screenshot_yyyy_mm_dd_HH_MM_SS.ext so they sort better, what was I thinking?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1450,2017-02-17T03:58:22Z,2017-02-21T11:43:17Z,2017-03-13T03:43:41Z,MERGED,True,67,6,4,https://github.com/JimMarlowe,Add screenshot function,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450#issuecomment-280773077,"This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...","Thanks for the PR, will look soon, love the pitchfork btw! :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1450,2017-02-17T03:58:22Z,2017-02-21T11:43:17Z,2017-03-13T03:43:41Z,MERGED,True,67,6,4,https://github.com/JimMarlowe,Add screenshot function,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450#issuecomment-281233769,"This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...","I submitted an Issue to get the AtomicEventLoop to AtomicEditor to get access to setTimeout(), in the mean time, I made the eventhandler only get registered when the menu is used to take a screenshot, then unregisters it, until it in needed again.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1450,2017-02-17T03:58:22Z,2017-02-21T11:43:17Z,2017-03-13T03:43:41Z,MERGED,True,67,6,4,https://github.com/JimMarlowe,Add screenshot function,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1450#issuecomment-281319840,"This PR add the function to save screenshots of the editor.
There is a preference for the screenshot path.
There is a preference for the save format : png, jpg, bmp, tga, dds
The image is saved with an autogenerated name : Screenshot_dd_mm_yyy_HH_MM_SS.ext
The screenshot is invoked with either the menu entry in Developer->Screenshot, or the key combo, Ctrl+9
Sorry, but this breaks the 35 additions chain... so talk to these ladies...","@JimMarlowe Good solution on the subscribe/unsubscribe pattern, I bet we could generalize this for single shot events which auto-unsubscribe, delayed events and single shot would be two good adds for event system I am thinking, and would also work in C#/C++
I'll go ahead and land this, if you want to adjust it once setTimeout is available that is fine too, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1451,2017-02-18T20:41:06Z,2017-02-20T14:49:36Z,2017-02-20T16:01:52Z,MERGED,True,124,32,10,https://github.com/shaddockh,TypeScript and Extension fixes,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1451,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1451,"This is just a combination of small changes that I discovered while trying to put together a tutorial for creating a menu extension.

Updated the service locator sendEvent method signature to use the new event system
Changed the extensions to all descend from Atomic.ScriptObject so that they can be event listeners/senders (which effectively deprecates the sendEvent method in the service locator)
Modified the extension loader to clear any previously loaded extensions from the require cache when closing and re-opening a project.  Otherwise it was not loading the changes and required you to exit the editor entirely.
fix for not trying to compile previously transpiled js files.  JS files will only be put into the TS transpiler if they are true js files and not transpiled from ts.
Send notifications to the status bar when transpiling typescript. Thanks @JimMarlowe! üëç
modified the output of the TS transpiler so that it looks good in both dark theme and light theme.
fixed an issue where clicking an error in the transpiled output wouldn't always navigate to the line in the editor
fixed an issue where the file extension was not automatically being appended to a new file if the filename had dots in it.","This is just a combination of small changes that I discovered while trying to put together a tutorial for creating a menu extension.

Updated the service locator sendEvent method signature to use the new event system
Changed the extensions to all descend from Atomic.ScriptObject so that they can be event listeners/senders (which effectively deprecates the sendEvent method in the service locator)
Modified the extension loader to clear any previously loaded extensions from the require cache when closing and re-opening a project.  Otherwise it was not loading the changes and required you to exit the editor entirely.
fix for not trying to compile previously transpiled js files.  JS files will only be put into the TS transpiler if they are true js files and not transpiled from ts.
Send notifications to the status bar when transpiling typescript. Thanks @JimMarlowe! üëç
modified the output of the TS transpiler so that it looks good in both dark theme and light theme.
fixed an issue where clicking an error in the transpiled output wouldn't always navigate to the line in the editor
fixed an issue where the file extension was not automatically being appended to a new file if the filename had dots in it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1453,2017-02-18T22:57:55Z,2017-02-20T14:42:06Z,2017-03-13T03:43:44Z,MERGED,True,10,0,1,https://github.com/JimMarlowe,Add missing DiffAlphaMask.xml,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1453,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1453,"This has been showing up as an error when running a project for a while, it was indeed missing, this PR adds it in.","This has been showing up as an error when running a project for a while, it was indeed missing, this PR adds it in.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1453,2017-02-18T22:57:55Z,2017-02-20T14:42:06Z,2017-03-13T03:43:44Z,MERGED,True,10,0,1,https://github.com/JimMarlowe,Add missing DiffAlphaMask.xml,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1453,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1453#issuecomment-281096404,"This has been showing up as an error when running a project for a while, it was indeed missing, this PR adds it in.","Excellent, thanks, LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1455,2017-02-21T14:07:57Z,2017-03-03T15:04:27Z,2017-03-03T15:04:31Z,MERGED,True,61,0,2,https://github.com/shaddockh,Enable timer api in the editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1455,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1455,The opens up the editor to use the timer api and also adds definitions to the timer api to duktape.d.ts.  Fixes #1454,The opens up the editor to use the timer api and also adds definitions to the timer api to duktape.d.ts.  Fixes #1454,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1455,2017-02-21T14:07:57Z,2017-03-03T15:04:27Z,2017-03-03T15:04:31Z,MERGED,True,61,0,2,https://github.com/shaddockh,Enable timer api in the editor,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1455,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1455#issuecomment-283977132,The opens up the editor to use the timer api and also adds definitions to the timer api to duktape.d.ts.  Fixes #1454,"Greetings from San Francisco! üåâ , great, thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1459,2017-03-03T19:56:57Z,2017-04-09T18:22:31Z,2017-04-09T19:06:41Z,CLOSED,False,15,9,1,https://github.com/darrylryan,[WINDOWS OPENGL] Fix for WebView on OpenGL on Windows,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1459,https://github.com/darrylryan,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1459,Fix for WebView on OpenGL on Windows (also fixes Monaco text editor on Windows WebGL which uses WebView).,Fix for WebView on OpenGL on Windows (also fixes Monaco text editor on Windows WebGL which uses WebView).,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1459,2017-03-03T19:56:57Z,2017-04-09T18:22:31Z,2017-04-09T19:06:41Z,CLOSED,False,15,9,1,https://github.com/darrylryan,[WINDOWS OPENGL] Fix for WebView on OpenGL on Windows,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1459,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1459#issuecomment-292802817,Fix for WebView on OpenGL on Windows (also fixes Monaco text editor on Windows WebGL which uses WebView).,"This turned out to be the D3D9 pixel adjustment I mentioned in the code review being applied in OpenGL.
Adding 1 to the width/height of the WebView texture compensated for the pixel adjustment, though made the text blurry in the process, also not fixing the underlying issue affecting both TurboBadger controls and the WebView see the ""Spinner.js"" text in screenshot.
I rebased to master and applied the pixel adjustment fix, will land from here:  #1517
Please let me know if it is indeed fixed on your setup, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1463,2017-03-08T18:59:27Z,2017-03-10T18:02:04Z,2017-03-10T18:02:04Z,MERGED,True,3,1,2,https://github.com/ombre5733,Fixed index out-of-bounds bug.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,Fixed bug #1462 in SceneSelection::GetSelectedNode().,Fixed bug #1462 in SceneSelection::GetSelectedNode().,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1463,2017-03-08T18:59:27Z,2017-03-10T18:02:04Z,2017-03-10T18:02:04Z,MERGED,True,3,1,2,https://github.com/ombre5733,Fixed index out-of-bounds bug.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463#issuecomment-285143029,Fixed bug #1462 in SceneSelection::GetSelectedNode().,Thank you for your contribution. You should also add yourself to AUTHORS.md,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1463,2017-03-08T18:59:27Z,2017-03-10T18:02:04Z,2017-03-10T18:02:04Z,MERGED,True,3,1,2,https://github.com/ombre5733,Fixed index out-of-bounds bug.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,https://github.com/ombre5733,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463#issuecomment-285162021,Fixed bug #1462 in SceneSelection::GetSelectedNode().,Updated the authors list too.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1463,2017-03-08T18:59:27Z,2017-03-10T18:02:04Z,2017-03-10T18:02:04Z,MERGED,True,3,1,2,https://github.com/ombre5733,Fixed index out-of-bounds bug.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,https://github.com/AtomicBuildBot,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463#issuecomment-285683062,Fixed bug #1462 in SceneSelection::GetSelectedNode().,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1463,2017-03-08T18:59:27Z,2017-03-10T18:02:04Z,2017-03-10T18:02:04Z,MERGED,True,3,1,2,https://github.com/ombre5733,Fixed index out-of-bounds bug.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1463#issuecomment-285729771,Fixed bug #1462 in SceneSelection::GetSelectedNode().,"@ombre5733 Thanks for the PR, and welcome to the authors list :)
@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1466,2017-03-09T22:02:52Z,2017-03-13T15:47:39Z,2017-03-13T18:23:08Z,MERGED,True,14573,3039,42,https://github.com/ombre5733,Update rapidjson to fix #710,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,"Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.","Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1466,2017-03-09T22:02:52Z,2017-03-13T15:47:39Z,2017-03-13T18:23:08Z,MERGED,True,14573,3039,42,https://github.com/ombre5733,Update rapidjson to fix #710,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466#issuecomment-285683055,"Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1466,2017-03-09T22:02:52Z,2017-03-13T15:47:39Z,2017-03-13T18:23:08Z,MERGED,True,14573,3039,42,https://github.com/ombre5733,Update rapidjson to fix #710,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466#issuecomment-285731131,"Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.","Thanks for the PR, I perused it briefly and looking good.  I'll review more closely and do some testing soon üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1466,2017-03-09T22:02:52Z,2017-03-13T15:47:39Z,2017-03-13T18:23:08Z,MERGED,True,14573,3039,42,https://github.com/ombre5733,Update rapidjson to fix #710,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466#issuecomment-286124405,"Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1466,2017-03-09T22:02:52Z,2017-03-13T15:47:39Z,2017-03-13T18:23:08Z,MERGED,True,14573,3039,42,https://github.com/ombre5733,Update rapidjson to fix #710,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1466#issuecomment-286148671,"Update rapidjson to v1.1.0. This library version always uses '.' as decimal
separator instead of the separator selected by the current locale. This
should fix #710.","Awesome, thanks for the rapidjson update and associated cleanups!  LANDING! ‚úàÔ∏è
Closes #710",True,"{'HEART': ['https://github.com/JoshuaBehrens'], 'THUMBS_UP': ['https://github.com/JoshuaBehrens']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1467,2017-03-11T19:01:13Z,2017-03-13T15:30:20Z,2017-03-13T18:23:15Z,MERGED,True,12,7,1,https://github.com/ombre5733,Small improvements in Thread class.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1467,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1467,"Make the helper functions to run the threaded function in the new thread static. This avoids
exposing the symbol for the helper functions.
Thread::GetCurrentThreadID() should not use pthread if ATOMIC_THREADING is undefined.","Make the helper functions to run the threaded function in the new thread static. This avoids
exposing the symbol for the helper functions.
Thread::GetCurrentThreadID() should not use pthread if ATOMIC_THREADING is undefined.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1467,2017-03-11T19:01:13Z,2017-03-13T15:30:20Z,2017-03-13T18:23:15Z,MERGED,True,12,7,1,https://github.com/ombre5733,Small improvements in Thread class.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1467,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1467#issuecomment-286142926,"Make the helper functions to run the threaded function in the new thread static. This avoids
exposing the symbol for the helper functions.
Thread::GetCurrentThreadID() should not use pthread if ATOMIC_THREADING is undefined.","Great, thanks for the PR, landing! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1468,2017-03-13T04:08:18Z,2017-03-13T15:33:56Z,2017-04-07T14:09:47Z,MERGED,True,50,1,1,https://github.com/JimMarlowe,Add error scraper to Player Output window,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1468,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1468,"This PR adds a Javascript error scraper to the Player Output window, which puts the magnifying glass next to an error filename + line number, and when clicked, brings the file up in the editor at the problem line.  The implementation is a little different than the TS version, the JS errors can repeat the same file+line, so only unique errors are captured. The same reference link is used by the magnifying glass widget for shared errors.","This PR adds a Javascript error scraper to the Player Output window, which puts the magnifying glass next to an error filename + line number, and when clicked, brings the file up in the editor at the problem line.  The implementation is a little different than the TS version, the JS errors can repeat the same file+line, so only unique errors are captured. The same reference link is used by the magnifying glass widget for shared errors.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1468,2017-03-13T04:08:18Z,2017-03-13T15:33:56Z,2017-04-07T14:09:47Z,MERGED,True,50,1,1,https://github.com/JimMarlowe,Add error scraper to Player Output window,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1468,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1468#issuecomment-286144132,"This PR adds a Javascript error scraper to the Player Output window, which puts the magnifying glass next to an error filename + line number, and when clicked, brings the file up in the editor at the problem line.  The implementation is a little different than the TS version, the JS errors can repeat the same file+line, so only unique errors are captured. The same reference link is used by the magnifying glass widget for shared errors.","Very cool, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286261135,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","Here's the error from the macOS build box:
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/Atomic/Atomic.build/Release/Atomic.build/Objects-normal/x86_64/StringUtils.o
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:40:1: error: unknown type name 'locale_t'
locale_t get_c_locale()
^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:42:12: error: unknown type name 'locale_t'
    static locale_t loc = newlocale(LC_ALL_MASK, ""C"", NULL);
           ^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:42:37: error: use of undeclared identifier 'LC_ALL_MASK'
    static locale_t loc = newlocale(LC_ALL_MASK, ""C"", NULL);
                                    ^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:52:12: error: use of undeclared identifier 'strtod_l'
    return strtod_l(nptr, endptr, get_c_locale());
           ^
4 errors generated.

and Windows:
C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(40): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(40): error C2146: syntax error: missing ';' before identifier 'get_c_locale' [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(41): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(42): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(42): error C2146: syntax error: missing ';' before identifier 'loc' [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(42): error C2065: 'loc': undeclared identifier [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(42): error C2065: 'LC_ALL_MASK': undeclared identifier [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(42): error C3861: 'newlocale': identifier not found [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(43): error C2065: 'loc': undeclared identifier [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]
         C:\Jenkins\workspace\AtomicPR_Windows\Source\Atomic\Core\StringUtils.cpp(50): error C2664: 'double _strtod_l(const char *,char **,_locale_t)': cannot convert argument 3 from 'int' to '_locale_t' [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\Build\Windows\Source\Atomic\Atomic.vcxproj]

The CI boxes are local and for security reasons don't have a port open to Jenkins install",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/ombre5733,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286268188,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","@JoshEngebretson Can you post the new build logs again, please?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/ombre5733,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286272594,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","Linux and Windows builds are fixed. However, I would need some help with the macOS build, please. I guess that <xlocale.h> should be included there.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286272721,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","This is the error on the macOS build box:
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:61:1: error: unknown type name 'locale_t'
locale_t get_c_locale()
^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:63:12: error: unknown type name 'locale_t'
    static locale_t loc = newlocale(LC_ALL_MASK, ""C"", NULL);
           ^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:63:37: error: use of undeclared identifier 'LC_ALL_MASK'
    static locale_t loc = newlocale(LC_ALL_MASK, ""C"", NULL);
                                    ^
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/Core/StringUtils.cpp:70:12: error: use of undeclared identifier 'strtod_l'
    return strtod_l(nptr, endptr, get_c_locale());
           ^
4 errors generated.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/ombre5733,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286273075,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","@JoshEngebretson Hm, I guess that its missing <xlocale.h>. Since I do not have a mac, I cannot easily fix the miscompilation.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286273315,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","I can look into this on macOS soon, thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286511863,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","This now compiles locally on macOS, I am updating the macOS build box to Sierra + latest Xcode, which should resolve the compilation error on macOS/iOS",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1470,2017-03-13T21:41:08Z,2017-03-14T22:21:10Z,2017-03-15T08:15:55Z,CLOSED,False,114,67,1,https://github.com/ombre5733,Make string to floating-point conversion independent from locale.,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1470#issuecomment-286579626,"Instead of using strtod() for converting strings to doubles, use strtod_l()
with an explicit ""C"" locale. The problem of strtod() is that the decimal
separator changes with the locale. So an XML written on an English system
cannot be read on a German system, for example.
Using strtod_l() + ""C"" locale uses a dot as separator all the time (locale-independent).
This finally fixes #1465 and #1469 for me (linux + German locale).
Could somebody test this on other platforms (Win, MacOS, ...) please?","Thanks again, longstanding Linux issue, will land in #1472",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1472,2017-03-14T22:20:28Z,2017-03-15T00:15:57Z,2017-03-15T00:15:59Z,MERGED,True,154,67,1,https://github.com/JoshEngebretson,Floating-point conversion independent from locale in StringUtils.cpp,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1472,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1472,"This is PR #1470 with some squashed commits and ATOMIC BEGIN/END modification blocks
Closes #710 (finally!)","This is PR #1470 with some squashed commits and ATOMIC BEGIN/END modification blocks
Closes #710 (finally!)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1472,2017-03-14T22:20:28Z,2017-03-15T00:15:57Z,2017-03-15T00:15:59Z,MERGED,True,154,67,1,https://github.com/JoshEngebretson,Floating-point conversion independent from locale in StringUtils.cpp,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1472,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1472#issuecomment-286587262,"This is PR #1470 with some squashed commits and ATOMIC BEGIN/END modification blocks
Closes #710 (finally!)","... and Android NDK doesn't support locales: http://stackoverflow.com/questions/23427230/does-the-android-ndk-support-locales, gadzooks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1473,2017-03-14T22:22:52Z,2017-03-14T23:12:02Z,2017-03-15T00:16:15Z,MERGED,True,3,29,2,https://github.com/JoshEngebretson,Remove WeakPtr's from object metrics container,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1473,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1473,"Use raw RefCounted pointers in metrics as WeakPtr can keep some instances ""alive"" for example in the ResourceCache
Closes #1471","Use raw RefCounted pointers in metrics as WeakPtr can keep some instances ""alive"" for example in the ResourceCache
Closes #1471",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1474,2017-03-15T09:29:51Z,2017-03-15T21:35:22Z,2017-03-15T21:35:24Z,MERGED,True,8,2,1,https://github.com/mattbenic,Make PackageFile.Scan case-insensitive on Windows,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1474,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1474,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1474,2017-03-15T09:29:51Z,2017-03-15T21:35:22Z,2017-03-15T21:35:24Z,MERGED,True,8,2,1,https://github.com/mattbenic,Make PackageFile.Scan case-insensitive on Windows,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1474,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1474#issuecomment-286886959,,"I had a closer look and this appears to only be at runtime, not during build, so should be a-ok! üëç
Thanks, LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1475,2017-03-15T09:33:54Z,2017-03-15T16:32:13Z,2017-03-15T16:32:16Z,MERGED,True,12,0,1,https://github.com/mattbenic,Added a function to calculate acceleration to the MathHelper class,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1475,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1475,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1475,2017-03-15T09:33:54Z,2017-03-15T16:32:13Z,2017-03-15T16:32:16Z,MERGED,True,12,0,1,https://github.com/mattbenic,Added a function to calculate acceleration to the MathHelper class,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1475,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1475#issuecomment-286799496,,"Great, thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1476,2017-03-15T09:44:11Z,2017-03-15T17:09:16Z,2017-03-15T17:09:19Z,MERGED,True,2,2,1,https://github.com/mattbenic,Fix the animation controller's animations names not showing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476,‚Ä¶cting them.,‚Ä¶cting them.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1476,2017-03-15T09:44:11Z,2017-03-15T17:09:16Z,2017-03-15T17:09:19Z,MERGED,True,2,2,1,https://github.com/mattbenic,Fix the animation controller's animations names not showing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476#issuecomment-286799336,‚Ä¶cting them.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1476,2017-03-15T09:44:11Z,2017-03-15T17:09:16Z,2017-03-15T17:09:19Z,MERGED,True,2,2,1,https://github.com/mattbenic,Fix the animation controller's animations names not showing,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1476#issuecomment-286811999,‚Ä¶cting them.,"Excellent, thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/ombre5733,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477#issuecomment-286762311,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","@JoshEngebretson Please have a look at the OSX build again. Once this PR is merged, it should really fix #710 as well as #1465 and #1469.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477#issuecomment-286791542,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","I haven't run into this in other projects, instead of modifying C functions, can we set a env variable for the process, or globally set the locale at startup?  This is a problem only on Linux correct?  Android/iOS don't have locale support.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477#issuecomment-286880679,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","Can we use setlocale at program start to specifically control the decimal point in string formatting functions?  If not, maybe something in SDL or elsewhere is setting the local to use env and need to set it back?  This seems preferable if it will work.
http://www.cplusplus.com/reference/clocale/setlocale/
 setlocale (LC_NUMERIC,""C"");",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/ombre5733,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477#issuecomment-286968614,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","Using setlocale() was actually my first try but I could not get it to work. One problem of setlocale() is that the locale is set globally. If one library modifies the global, the whole application will be affected (in the worst case, we run into race conditions, if one thread is sprintf-ing while another thread modifies the global).
According to the documentation link above, the locale should start in C mode, which is definitely not the case on my system (also export LC_NUMERIC=C would not work then).
One mitigation could be to use uselocale() instead of setlocale(), which modifies the locale only for the current thread...
I'll do some more investigations and return back if I have an answer.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1477,2017-03-15T13:38:06Z,2017-03-16T13:31:19Z,2017-03-16T13:34:27Z,CLOSED,False,329,133,14,https://github.com/ombre5733,Floating point values should be written with a dot as separator.,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477,https://github.com/ombre5733,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1477#issuecomment-287058016,"Floating point values should always use a '.' as decimal separator and not the separator
determined by the user's locale. Otherwise, XML files written on one system with an
English locale cannot be parsed back correctly on a system with e.g. a German locale.
Replacements for strtod() and sprintf() have been collected in Core/Io.{h,cpp}. Since
sprintf() has a variadic parameter list, the replacement Atomic_sprintf() is implemented
as a macro for simplicity.","Forget what I have written above. I was partially wrong (the app starts correctly with the C locale as required by the standard). However, CEF initialization changes the locale. I have a much better (and smaller) fix in PR #1479.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1478,2017-03-15T20:23:33Z,2017-03-15T20:51:51Z,2017-03-15T20:51:53Z,MERGED,True,25,1,5,https://github.com/JoshEngebretson,[C#] Better scene resource management,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1478,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1478,"When unloading a scene in C#, run GC and ExpireNatives, exposing DebugHud update interval through UI subsystem, enable metrics immediately when mode set so doesn't miss instances created before next Update
See https://github.com/AtomicGameEngine/AtomicTests/tree/master/CSharpTests/SceneResourcesTest for test case","When unloading a scene in C#, run GC and ExpireNatives, exposing DebugHud update interval through UI subsystem, enable metrics immediately when mode set so doesn't miss instances created before next Update
See https://github.com/AtomicGameEngine/AtomicTests/tree/master/CSharpTests/SceneResourcesTest for test case",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1479,2017-03-16T13:33:04Z,2017-03-16T14:00:47Z,2017-03-16T14:01:46Z,MERGED,True,79,154,2,https://github.com/ombre5733,Keep the locale when initializing the CEF.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1479,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1479,"On Linux, the Chromium Embedded Framework chooses the locale based on the environment
variables of the system. Calling CefInitialize() causes the locale to change, potentially
changing the decimal separator of floating point numbers.
The solution is to cache the locale and restore it once CEF has been initialized.
I also reverted the workarounds in StringUtils.cpp, which are not needed any longer.
This fixes #710, #1465 and #1469.","On Linux, the Chromium Embedded Framework chooses the locale based on the environment
variables of the system. Calling CefInitialize() causes the locale to change, potentially
changing the decimal separator of floating point numbers.
The solution is to cache the locale and restore it once CEF has been initialized.
I also reverted the workarounds in StringUtils.cpp, which are not needed any longer.
This fixes #710, #1465 and #1469.",True,"{'HOORAY': ['https://github.com/JoshEngebretson'], 'THUMBS_UP': ['https://github.com/JoshEngebretson', 'https://github.com/benwolf']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1479,2017-03-16T13:33:04Z,2017-03-16T14:00:47Z,2017-03-16T14:01:46Z,MERGED,True,79,154,2,https://github.com/ombre5733,Keep the locale when initializing the CEF.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1479,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1479#issuecomment-287065144,"On Linux, the Chromium Embedded Framework chooses the locale based on the environment
variables of the system. Calling CefInitialize() causes the locale to change, potentially
changing the decimal separator of floating point numbers.
The solution is to cache the locale and restore it once CEF has been initialized.
I also reverted the workarounds in StringUtils.cpp, which are not needed any longer.
This fixes #710, #1465 and #1469.","Awesome! This has been a long standing issue, thanks for the R&D and fix! üëç
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1480,2017-03-16T16:33:54Z,2017-03-16T17:50:04Z,2017-03-16T17:50:07Z,MERGED,True,26,4,3,https://github.com/JoshEngebretson,"[C#] Fixing unwanted reference being added on SharedPtr returns, adding RefCounted::ReleaseRefSilent",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1480,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1480,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.","The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482#issuecomment-287366818,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.","This is a great update, very cool.  Were you able to do much testing with the editor and examples with the update?  I'll do some today before landing as well.
The AtomicPlugin for JS is something from a fair ways back.  It is really powerful in that you can drive the engine's VM using the duktape API from a shared library, without needing to link to the engine.  Though, I do not believe anyone has used it since it was originally written.
The build error is on Android, where I have had to fix the duk_config.h before, see: 36ead3d
AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Duktape/duk_config.h:1778:2: error: #error cannot determine intptr type
 #error cannot determine intptr type",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482#issuecomment-287418489,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.","I added the ANDROID check and opened a new PR #1483, will do some testing now, and will land from there is no issues found.
If you want to update the plugin stuff, that's great, though I would only do that if you plan on using it (otherwise, just having it compiling is fine).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/ombre5733,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482#issuecomment-287454151,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.","Thanks for fixing the Android build. Also thanks for explaining AtomicPlugin. Now I understand what it is supposed for.
I do not depend on it and do not want to spend time for fixing it. When it is fixed, I think we should duplicate the duktape headers in the plugin's directory and include them from AtomicPlugin.h rather than copying the content into AtomicPlugin.h. The additional files do not matter for the user because including AtomicPlugin.h will include the duktape headers as well.
However, right now the state of the plugin is somewhat dangerous, because it works most of the time except if you call the wrong function (some functions have a different signature now and some functions have been changed to macros, so the function pointer in JSVMImports is null). Wouldn't it be better if we comment the content of jsplugin_bind_jsvmexports() so that all function pointers are null? Using the plugin would result in a crash immediately upon the first call which is easier to debug than failing in a rarely used function.
Also I would like to take the opportunity and remove duk_push_string_file_raw from AtomicPlugin. This is the only reason why I had to include duktape's V1 compatibility layer. There is not much use of having an additional dependency for a functionality that is not usable (i.e. the plugin).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482#issuecomment-287460058,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.","If the plugin duktape wrapper duk_push_string_file_raw  is the only reason we need the V1 compatibility layer, I am all for removing it üî™
I also filed an issue to remove the AtomicPlugin functionality entirely: #1485",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1482,2017-03-17T09:44:18Z,2017-03-17T17:24:24Z,2017-03-17T20:27:02Z,CLOSED,False,29674,26516,13,https://github.com/ombre5733,[WIP] Update to Duktape 2.0.1,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482,https://github.com/ombre5733,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1482#issuecomment-287462397,"The update of AtomicPlugin.h is missing. I haven't figured out yet, which files need to be changed exactly.",@JoshEngebretson Duktape V1 is gone with #1486.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1483,2017-03-17T17:22:07Z,2017-03-17T17:45:19Z,2017-03-17T17:45:22Z,MERGED,True,29673,26515,13,https://github.com/JoshEngebretson,Update Duktape to 2.0.1,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1483,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1483,"Continued from #1482
Closes #1338","Continued from #1482
Closes #1338",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1483,2017-03-17T17:22:07Z,2017-03-17T17:45:19Z,2017-03-17T17:45:22Z,MERGED,True,29673,26515,13,https://github.com/JoshEngebretson,Update Duktape to 2.0.1,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1483,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1483#issuecomment-287424136,"Continued from #1482
Closes #1338","Checks out, thanks! @ombre5733",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1484,2017-03-17T18:20:10Z,2017-03-17T18:46:18Z,2017-03-17T18:46:20Z,MERGED,True,49,6,5,https://github.com/JoshEngebretson,[C#] Adding managed version of ResourceCache::ReleaseAllResources ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1484,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1484,Also adds public NativeCore.RunGC method which can be run to force a GC collection + native expire,Also adds public NativeCore.RunGC method which can be run to force a GC collection + native expire,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1486,2017-03-17T20:25:10Z,2017-03-18T14:57:32Z,2017-03-18T14:58:09Z,MERGED,True,5,172,5,https://github.com/ombre5733,Remove Duktape V1 compatibility module,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1486,https://github.com/ombre5733,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1486,"This module was only needed for the AtomicJS plugin, which is not in a good state anyway.
Rather than pulling in a dependency for a defunct feature, crop the feature a bit more
and remove the dependency.","This module was only needed for the AtomicJS plugin, which is not in a good state anyway.
Rather than pulling in a dependency for a defunct feature, crop the feature a bit more
and remove the dependency.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1486,2017-03-17T20:25:10Z,2017-03-18T14:57:32Z,2017-03-18T14:58:09Z,MERGED,True,5,172,5,https://github.com/ombre5733,Remove Duktape V1 compatibility module,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1486,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1486#issuecomment-287551423,"This module was only needed for the AtomicJS plugin, which is not in a good state anyway.
Rather than pulling in a dependency for a defunct feature, crop the feature a bit more
and remove the dependency.","Excellent, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1488,2017-03-20T17:46:53Z,2017-03-20T18:19:40Z,2017-03-20T18:19:44Z,MERGED,True,75,4,5,https://github.com/JoshEngebretson,"Adding development support for project frame (resources/hierarchy) resizing via Developer->UI menu, CTRL+Click now expands node and all children",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1488,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1488,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1489,2017-03-20T22:13:32Z,2017-03-20T22:42:11Z,2017-03-20T22:42:15Z,MERGED,True,45,2,7,https://github.com/JoshEngebretson,Adding player mode identification (and attached debugger query for Windows),2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1489,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1489,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288174062,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Wow, cool! I'll check out debugging on Windows and Mac via VSCode.  I'll also have a look at pulling the duktape C raw socket API out of the IPCPlayer sources, either placing that in the third party sources or in the JavaScript library.  Looking sweet! üç¨
I think focusing on external coding is a really good idea.  We can get basic in editor debugging working later and the embeded Monaco editor really isn't intended so much for heavy lifting, as quickly opening up and tweaking scripts... a debugger would be useful there, though a lot more powerful when leveraging VSCode proper with packages, etc",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288177397,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","It looks like the windows build failed.  I'm not currently set up to build on windows, but I suspect it might have something to do with the socket stuff since that is different between MacOS and Windows.  Pulling that all out into it's own files would definitely be an improvement and clean things up.
I've been really impressed with vscode lately and having this debugger which can allow you to work against raw .js as well as .ts is pretty nice.  One thing that could happen is that the ""generate external project"" could make things easier and auto populate the various task and launch json files for you so all you need to do is launch vscode and go.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288596714,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","@JoshEngebretson ok, this looks good.  I added in some logic to shutdown the socket since I noticed it was causing me to have to force quit the player even after closing the window.  Once this lands, I'll start putting together a wiki entry on how to use it. üê´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288739169,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","bf588c5
This doesn't do anything other than set the raw static instance pointer, it doesn't release anything or close any sockets.  If the socket is keeping the process from exiting, the subsystem needs to close it upon shutdown/destruction.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288743118,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Ok, so basically what was happening is that when the window was being closed, the socket was automatically disconnecting as it should, but the logic in the JSDebugger subsystem was wired up to automatically start listening for a connection again whenever the socket disconnects.  This was causing the window to never actually close.
What I can do is have that Shutdown method set a flag that tells the socket to not try and reconnect.  The other option I can do is have the subsystem directly listen for a player close event, but wasn't sure if it was appropriate for the subsystem to be listening to player events.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288746909,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Ok, yeah in do_reconnect() checking the instance for reconnect, so JSDebugger::Shutdown clearing that could ""fix"" it, though still could probably hit it wrong on exit and freeze thread.  (It would be nice to have a debugging thread, instead of freezing main thread for a future version).
Let's have shutdown clear the auto connect (and close any open sockets?), though not clear the static instance ptr and leave that to the destructor.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288750761,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Oh, and we may want to use this outside of player apps, so good thinking on not coupling the Player subsystem.  A note being that it is possible the PlayerApp, which uses the Player subsystem, may want to subscribe to player close and do cleanup, something to consider when in there :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288753132,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup",üëç  I'll take a look at this tonight.  üê´,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288911273,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Thanks for the feedback, still getting up to speed on best practices under the c++ side of things. :)",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/shaddockh,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288920232,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","Ok, I believe I've got it cleaned up.  Unfortunately you still need to call shutdown from the IPC Player due to how the socket is automatically reconnecting.  The destructor never fires because the socket immediately spins back up listening for a connection and blocks the app once you try to close the window.
The only other thing I can think of is maybe listening for the E_EXITREQUESTED event inside the JSDebugger.  If we want to go that route, I will need a little guidance.  I wasn't able to get it to compile when I tried.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1490,2017-03-21T01:07:33Z,2017-03-24T04:59:58Z,2017-03-24T05:00:01Z,MERGED,True,967,9,6,https://github.com/shaddockh,Add code to allow hooking up vscode debugger,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1490#issuecomment-288933821,"@JoshEngebretson , @JimMarlowe
This PR contains code extracted from the more involved branch that I'm working on to enable in-editor debugging.  This just includes the minimal amount of code required to use the recently released version of the VSCode Duktape debugger from: https://marketplace.visualstudio.com/items?itemName=HaroldBrenes.duk-debug
I have been working on a PR for that extension to ensure that it works with the way we are utilizing the duktape 1.5 require system and those changes have just been pulled in and he also released a version that works with Duktape 2.
With this PR, you can now kick off the player and attach to it from vscode.  The extension also properly handles sourcemaps.

Point vscode to your project root
Install the VSCode duktape debugger extension in vscode
Then set up a task in vscode: tasks.json (You will need to point command to your editor location)

{
    ""version"": ""0.1.0"",
    ""tasks"": [
        {
            ""taskName"": ""Run Player"",
            ""command"": ""${env.HOME}/Development/Atomic/AtomicMaster/AtomicGameEngine/Artifacts/AtomicEditor/AtomicEditor.app/Contents/MacOS/AtomicEditor"",
            ""args"": [
                ""--player"",
                ""--debug"",
                ""--project"",
                ""${workspaceRoot}""
            ],
            ""isBackground"": true
        }
    ]
}
Then set up a debugger configuration:
launch.json
note: set sourceMaps to true if using TS and make sure you turn on sourcemaps in the tsconfig
{
    ""version"": ""0.2.0"",
    ""configurations"": [
        {
            ""name"": ""Attach"",
            ""type"": ""duk"",
            ""request"": ""attach"",
            ""address"": ""localhost"",
            ""port"": 9091,
            ""localRoot"": ""${workspaceRoot}/Resources"",
            ""sourceMaps"": true,
            ""outDir"": ""${workspaceRoot}/Resources"",
            ""stopOnEntry"": false,
            ""debugLog"": true
        }
    ]
}

Launch the editor task ( ctrl/cmd+shift+p > Tasks: Run Task) then select the ""Run Player"" task
go to debug in vscode and attach (the player will be paused waiting until you attach)
now you can pause, set breakpoints, view variables, etc.

@JoshEngebretson
The idea behind this is to get this functionality out there while work continues on trying to embed a debugging interface into the editor itself.  The functionality in the editor may not be as advanced, but will be available w/o any third party software needed.  The question I have at this point is would having the debugger built into the Atomic Editor even be necessary anymore?  We could follow the lead of how the C# debugging story is working and just require a 3rd party piece.
Changes:

Configure duktape 2.x to enable debugging
Migrate debug socket hooks from @JimMarlowe in IPCPlayerApp.cpp/h
Updates to jsrequire to set the module filename correctly
cleanup","I thought about the event subscription too, that's a little inflexible and couples the code via an event rather than the classes. Needing to startup/shutdown the debugger subsystem is just fine and dandy and the rest looks great, landing, thanks! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1492,2017-03-22T17:32:22Z,2017-03-22T20:48:14Z,2017-04-07T14:09:40Z,MERGED,True,9,7,1,https://github.com/JimMarlowe,fix JS error scraper for DukTape v2,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1492,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1492,"DukTape 2.0.1 changed the formatting of error messages! So the old JS error scraper is now crash code, because it leaves in a paren in the error filename, and things downstream crash when an invalid filename is presented to them.  The new error syntax also reduces false positives, I'd seen it put an icon in dates at times.","DukTape 2.0.1 changed the formatting of error messages! So the old JS error scraper is now crash code, because it leaves in a paren in the error filename, and things downstream crash when an invalid filename is presented to them.  The new error syntax also reduces false positives, I'd seen it put an icon in dates at times.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1492,2017-03-22T17:32:22Z,2017-03-22T20:48:14Z,2017-04-07T14:09:40Z,MERGED,True,9,7,1,https://github.com/JimMarlowe,fix JS error scraper for DukTape v2,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1492,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1492#issuecomment-288534291,"DukTape 2.0.1 changed the formatting of error messages! So the old JS error scraper is now crash code, because it leaves in a paren in the error filename, and things downstream crash when an invalid filename is presented to them.  The new error syntax also reduces false positives, I'd seen it put an icon in dates at times.","Good catch! ‚öæÔ∏è
Thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1493,2017-03-22T21:00:05Z,2017-03-23T00:30:01Z,2017-03-23T00:30:09Z,MERGED,True,918,832,4,https://github.com/JoshEngebretson,JSDebugger subsystem,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1493,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1493,"Here's a refactor to the new JS/TypeScript debugger support which breaks it out to a new JSDebugger subsystem üêõ, we can also expose some of this to script now if desired.
Includes some compilation fixes on Windows, I also ran it on Windows and verified it works... it does, and that is awwweeessssoooommmmmeee!!! ‚ö°Ô∏è
@shaddockh Please have a look, if ok go ahead and land and it will update your PR branch üê´üí®","Here's a refactor to the new JS/TypeScript debugger support which breaks it out to a new JSDebugger subsystem üêõ, we can also expose some of this to script now if desired.
Includes some compilation fixes on Windows, I also ran it on Windows and verified it works... it does, and that is awwweeessssoooommmmmeee!!! ‚ö°Ô∏è
@shaddockh Please have a look, if ok go ahead and land and it will update your PR branch üê´üí®",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1493,2017-03-22T21:00:05Z,2017-03-23T00:30:01Z,2017-03-23T00:30:09Z,MERGED,True,918,832,4,https://github.com/JoshEngebretson,JSDebugger subsystem,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1493,https://github.com/shaddockh,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1493#issuecomment-288581311,"Here's a refactor to the new JS/TypeScript debugger support which breaks it out to a new JSDebugger subsystem üêõ, we can also expose some of this to script now if desired.
Includes some compilation fixes on Windows, I also ran it on Windows and verified it works... it does, and that is awwweeessssoooommmmmeee!!! ‚ö°Ô∏è
@shaddockh Please have a look, if ok go ahead and land and it will update your PR branch üê´üí®",Cool!  I'll pull this in and test it out.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1494,2017-03-23T06:04:04Z,2017-03-24T14:41:24Z,2017-03-24T14:41:26Z,MERGED,True,18,0,1,https://github.com/weinandvv,Add the GetResourceDirs function into C# ResourceCache,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494,https://github.com/weinandvv,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494,Added this function since Vector of Strings isn't implemented for general bindings and thus couldn't be exposed to C# from C++.,Added this function since Vector of Strings isn't implemented for general bindings and thus couldn't be exposed to C# from C++.,True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1494,2017-03-23T06:04:04Z,2017-03-24T14:41:24Z,2017-03-24T14:41:26Z,MERGED,True,18,0,1,https://github.com/weinandvv,Add the GetResourceDirs function into C# ResourceCache,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494#issuecomment-288625997,Added this function since Vector of Strings isn't implemented for general bindings and thus couldn't be exposed to C# from C++.,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1494,2017-03-23T06:04:04Z,2017-03-24T14:41:24Z,2017-03-24T14:41:26Z,MERGED,True,18,0,1,https://github.com/weinandvv,Add the GetResourceDirs function into C# ResourceCache,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1494#issuecomment-289032018,Added this function since Vector of Strings isn't implemented for general bindings and thus couldn't be exposed to C# from C++.,"@weinandvv Awesome, thanks for the changes, looks great üëç
@AtomicBuildBot add to whitelist, ok to test",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1496,2017-03-23T23:48:26Z,2017-03-24T02:35:20Z,2017-03-24T02:35:26Z,MERGED,True,414,86,24,https://github.com/JoshEngebretson,"[ToolCore] Adding project cache clean/generate command, some refactoring",4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1496,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1496,Closes #1199,Closes #1199,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1499,2017-03-25T00:06:50Z,2017-03-25T04:22:17Z,2017-04-07T14:09:39Z,MERGED,True,32,0,1,https://github.com/JimMarlowe,Add access to Node vars from scripting languages,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1499,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1499,"This PR adds access to the Node c++ class vars_ VariantMap from scripting languages.
The access is done completely by strings, but will handle a large subset of Variant types, those being  Int, Bool, Float, Vector2, Vector3, Vector4, Quaternion, String, Buffer, ResourceRef, ResourceRefList, IntRect, IntVector2, Matrix3,Matrix3x4, Matrix4, Double, Color. It is the users responsibility to convert to and from Variant type strings. The added methods are:
void setUserData (const String& name, const String& vartype, const String& value);  // set data
String getUserData (const String& name) const;  // get data
bool isUserData (const String& name) const;   // data exist?
String getUserDataType (const String& name) const;  //what kind of data is it","This PR adds access to the Node c++ class vars_ VariantMap from scripting languages.
The access is done completely by strings, but will handle a large subset of Variant types, those being  Int, Bool, Float, Vector2, Vector3, Vector4, Quaternion, String, Buffer, ResourceRef, ResourceRefList, IntRect, IntVector2, Matrix3,Matrix3x4, Matrix4, Double, Color. It is the users responsibility to convert to and from Variant type strings. The added methods are:
void setUserData (const String& name, const String& vartype, const String& value);  // set data
String getUserData (const String& name) const;  // get data
bool isUserData (const String& name) const;   // data exist?
String getUserDataType (const String& name) const;  //what kind of data is it",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1499,2017-03-25T00:06:50Z,2017-03-25T04:22:17Z,2017-04-07T14:09:39Z,MERGED,True,32,0,1,https://github.com/JimMarlowe,Add access to Node vars from scripting languages,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1499,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1499#issuecomment-289187825,"This PR adds access to the Node c++ class vars_ VariantMap from scripting languages.
The access is done completely by strings, but will handle a large subset of Variant types, those being  Int, Bool, Float, Vector2, Vector3, Vector4, Quaternion, String, Buffer, ResourceRef, ResourceRefList, IntRect, IntVector2, Matrix3,Matrix3x4, Matrix4, Double, Color. It is the users responsibility to convert to and from Variant type strings. The added methods are:
void setUserData (const String& name, const String& vartype, const String& value);  // set data
String getUserData (const String& name) const;  // get data
bool isUserData (const String& name) const;   // data exist?
String getUserDataType (const String& name) const;  //what kind of data is it","Thanks, looks great, landing! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1500,2017-03-28T03:05:29Z,2017-03-28T17:21:27Z,2017-03-29T01:29:50Z,MERGED,True,2,2,2,https://github.com/shaddockh,Expose the webView WebMessageHandler to script and fix an event signature,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1500,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1500,Simple bindings update to expose the WebMessageHandler to script,Simple bindings update to expose the WebMessageHandler to script,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1500,2017-03-28T03:05:29Z,2017-03-28T17:21:27Z,2017-03-29T01:29:50Z,MERGED,True,2,2,2,https://github.com/shaddockh,Expose the webView WebMessageHandler to script and fix an event signature,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1500,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1500#issuecomment-289842037,Simple bindings update to expose the WebMessageHandler to script,"Nice one, short and sweet! LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290489758,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","@rokups The CI boxes are local and I don't have the port open to the Jenkins install (ensuring Jenkins is and stays secure isn't on my todo list, and there are also code signing setup considerations), there must be a way to publish the build logs somewhere though.. in the meantime:
Linux:
Linking CXX executable AtomicTool
../Atomic/libAtomic.a(Image.cpp.o): In function `Atomic::Image::SaveDDS(Atomic::String const&) const':
Image.cpp:(.text+0x15515): undefined reference to `squish::GetStorageRequirements(int, int, int)'
Image.cpp:(.text+0x1555a): undefined reference to `squish::CompressImage(unsigned char const*, int, int, void*, int, float*)'
../Atomic/libAtomic.a(OGLVertexBuffer.cpp.o): In function `Atomic::VertexBuffer::SetData(void const*)':
OGLVertexBuffer.cpp:(.text+0x99): undefined reference to `__glewBufferData'
../Atomic/libAtomic.a(OGLVertexBuffer.cpp.o): In function `Atomic::VertexBuffer::SetDataRange(void const*, unsigned int, unsigned int, bool)':
OGLVertexBuffer.cpp:(.text+0x4a9): undefined reference to `__glewBufferData'
OGLVertexBuffer.cpp:(.text+0x7fa): undefined reference to `__glewBufferSubData'
../Atomic/libAtomic.a(OGLVertexBuffer.cpp.o): In function `Atomic::VertexBuffer::Release()':
OGLVertexBuffer.cpp:(.text+0xcfc): undefined reference to `__glewDeleteBuffers'
../Atomic/libAtomic.a(OGLVertexBuffer.cpp.o): In function `Atomic::VertexBuffer::Create()':
OGLVertexBuffer.cpp:(.text+0xdfa): undefined reference to `__glewBufferData'
OGLVertexBuffer.cpp:(.text+0xf23): undefined reference to `__glewGenBuffers'
../Atomic/libAtomic.a(OGLIndexBuffer.cpp.o): In function `Atomic::IndexBuffer::SetData(void const*)':
OGLIndexBuffer.cpp:(.text+0x99): undefined reference to `__glewBufferData

Mac:
/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ThirdParty/Assimp/Release/libAssimp.a -Xlinker -dependency_info -Xlinker /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/AtomicTool/Atomic.build/Release/AtomicTool.build/Objects-normal/x86_64/AtomicTool_dependency_info.dat -o /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/AtomicTool/Release/AtomicTool
Undefined symbols for architecture x86_64:
  ""_LZ4_compressBound"", referenced from:
      ToolCore::ResourcePackager::WritePackageFile(Atomic::String const&) in libToolCore.a(ResourcePackager.o)
  ""_LZ4_compressHC"", referenced from:
      ToolCore::ResourcePackager::WritePackageFile(Atomic::String const&) in libToolCore.a(ResourcePackager.o)
  ""pugi::xml_document::load(char const*, unsigned int)"", referenced from:
      ToolCore::PlatformIOS::ParseProvisionAppIdentifierPrefix(Atomic::String const&) in libToolCore.a(PlatformIOS.o)
  ""pugi::xml_document::xml_document()"", referenced from:
      ToolCore::PlatformIOS::ParseProvisionAppIdentifierPrefix(Atomic::String const&) in libToolCore.a(PlatformIOS.o)
  ""pugi::xml_document::~xml_document()"", referenced from:
      ToolCore::PlatformIOS::ParseProvisionAppIdentifierPrefix(Atomic::String const&) in libToolCore.a(PlatformIOS.o)
  ""Atomic::FileSystem::CreateDirs(Atomic::String const&, Atomic::String const&)"", referenced from:
      ToolCore::NETCSProject::CreateCompileItemGroup(Atomic::XMLElement&) in libToolCore.a(NETProjectGen.o)
      ToolCore::NETCSProject::CreateMainPropertyGroup(Atomic::XMLElement&) in libToolCore.a(NETProjectGen.o)
      ToolCore::JSBind::GenerateCSharpBindings() in libToolCore.a(JSBind.o)
      ToolCore::JSBind::GenerateJavaScriptBindings() in libToolCore.a(JSBind.o)
      ToolCore::TextureImporter::Import() in libToolCore.a(TextureImporter.o)
  ""Atomic::FileSystem::CreateDirsRecursive(Atomic::String const&)"", referenced from:
      ToolCore::NETCSProject::CreateProjectFolder(Atomic::String const&) in libToolCore.a(NETProjectGen.o)
      ToolCore::NETSolution::Load(Atomic::JSONValue const&) in libToolCore.a(NETProjectGen.o)
      ToolCore::AndroidProjectGenerator::GenerateStringXML() in libToolCore.a(AndroidProjectGenerator.o)
      ToolCore::AtomicNETCopyAssemblies(Atomic::Context*, Atomic::String const&) in libToolCore.a(NETProjectSystem.o)
  ""Atomic::FileSystem::SetLastModifiedTime(Atomic::String const&, unsigned int)"", referenced from:
      ToolCore::AtomicNETCopyAssemblies(Atomic::Context*, Atomic::String const&) in libToolCore.a(NETProjectSystem.o)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290517008,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","Doing some CI work, need to get build errors reporting
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290572847,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290677813,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","Just so noone freaks out seeing this mess im leaving a note on what is going. Scouting cmake 2.8.12 docs i noticed - surprise surprise - it has target_compile_definitions, target_compile_options and target_include_directories along with target_link_libraries saying:

Library dependencies are transitive by default. When this target is linked into another target then the libraries linked to this target will appear on the link line for the other target too.

Well damn, why noone used this in the past? I have no idea. But all this means there is no need for _exported macros and bunch of stuff in per-platform cmake scripts. So i am moving things that belong to the target into CMakeLists.txt of that target. Hopefully when im done build scripts will be way cleaner and simpler. While work is ongoing ill be abusing this PR and build system a lot. Please ignore bad commit messages and stupid commit content - when PR is done commits will be cleaned and squashed and final result will be perfectly clean PR.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290710624,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","@rokups Ok, thanks for the heads up, looking forward to seeing what you come up with... not needing the exported stuff from the last round would be great üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-290739520,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?",@rokups Congrats on first green build of CMake cleanup and refactor! ‚úîÔ∏è üê´,True,{'HOORAY': ['https://github.com/Type1J']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/rokups,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291132466,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","@JoshEngebretson please review these. Maybe it is ok to merge?
Edit:
Actually please clarify wth is going on there with last commit.
Android fails to build when AtomicJS/AtomicPlayerJS targets are missing. Thing is these targets depend on AtomicToolCheckScripts which is part of AtomicTool and you told me in chat that AtomicTool is not supposed to be built on android. So how should this be sorted out?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291195429,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","If ATOMIC_JAVASCRIPT or ATOMIC_DOTNET are turned on, script binding code needs to be generated, this is done by ToolCore (through the AtomicTool executable).  These targets should only build on desktop, and will not ever run on Android.
We need to make it possible to build Android solely using project C++ with JavaScript turned off, which will work with a single invocation of CMake.  For JS/C#, AtomicTool needs to be built for whatever the host desktop OS is and this can be handled in a number of ways.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/rokups,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291414077,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","The only script formatting i did was changing anything to 4 spaces. No tabs, never ever üê´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/rokups,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291479545,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","Changed license back in AtomicCommon.cmake because we must retain copyright after all. This brings me to the next thing i noticed - source files have Urho3D copyright removed. As per license it should be added back. It is perfectly fine to have multiple copyrights. I only added copyrights attributed to Atomic team to files that were either fully rewritten or newly created. It should appease license gods. Looked at the wrong file, i stand corrected, no copyrights were removed. üê´
Also added # ATOMIC BEGIN|END around modifications in third party lib scripts and undone some MSVC mistakenly replaced with WIN32.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291522800,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","@rokups Urho3D copyright information should all be intact, if there is a file that is indeed under that copyright and it has been removed or modified incorrectly, that is an error that needs to be corrected.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1503,2017-03-30T17:25:42Z,2017-04-04T23:04:39Z,2017-04-05T06:51:07Z,CLOSED,False,974,935,71,https://github.com/rokups,Some CMake improvements for add_subdirectory() support,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503,https://github.com/JoshEngebretson,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1503#issuecomment-291666348,"Fixes sdl build when dlopen() is available but dlerror() is not. Regardless of missing dlerror() application builds and works.
Added multiple cmake options for specifying build configuration. This exposes options to cmake GUI on windows.
Moved some libAtomic-specific things into CMakeLists.txt file of that lib.
Other misc fixes that make engine more add_subdirectory() friendly in general and for android builds.
Also added few new cmake options that allow to opt out of:

ATOMIC_JAVASCRIPT
ATOMIC_DOTNET
ATOMIC_EDITOR

Lets see if this breaks anything (hopefully not).
Edit: builds failing. Any way i could get access to build logs so i can fix the issues?","Great work on the CMake improvements, I did a couple hours of testing and everything seems in order üëç   I squashed and will land from here: #1507
Thanks! üöÄ üê´ üöÄ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1504,2017-03-30T23:14:25Z,2017-03-30T23:23:06Z,2017-04-09T19:06:44Z,CLOSED,False,4,0,2,https://github.com/JoshEngebretson,Testing CI,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1504,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1504,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1507,2017-04-04T23:01:59Z,2017-04-04T23:27:36Z,2017-04-04T23:27:38Z,MERGED,True,975,936,72,https://github.com/JoshEngebretson,CMake Improvements,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1507,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1507,"Squashed version of #1503 by @rokups
I also updated the Examples submodule commit to latest master, which has a fix for the C++ FeatureExamples with new (awesome) CMake improvements.","Squashed version of #1503 by @rokups
I also updated the Examples submodule commit to latest master, which has a fix for the C++ FeatureExamples with new (awesome) CMake improvements.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1508,2017-04-05T07:26:59Z,2017-04-05T20:18:04Z,2017-04-06T08:04:37Z,MERGED,True,15288,7868,20,https://github.com/rokups,Database subsystem,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508,"Database subsystem changes:

Synced with upstream
Namespaces/macros converted to atomic names
Added to build system
SQLite updated to v3.18.0

I also smuggled in tiny android fix that gets rid of build error and changes log tag from Urho3D to Atomic. I hope it is acceptable.","Database subsystem changes:

Synced with upstream
Namespaces/macros converted to atomic names
Added to build system
SQLite updated to v3.18.0

I also smuggled in tiny android fix that gets rid of build error and changes log tag from Urho3D to Atomic. I hope it is acceptable.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1508,2017-04-05T07:26:59Z,2017-04-05T20:18:04Z,2017-04-06T08:04:37Z,MERGED,True,15288,7868,20,https://github.com/rokups,Database subsystem,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508#issuecomment-291973319,"Database subsystem changes:

Synced with upstream
Namespaces/macros converted to atomic names
Added to build system
SQLite updated to v3.18.0

I also smuggled in tiny android fix that gets rid of build error and changes log tag from Urho3D to Atomic. I hope it is acceptable.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1508,2017-04-05T07:26:59Z,2017-04-05T20:18:04Z,2017-04-06T08:04:37Z,MERGED,True,15288,7868,20,https://github.com/rokups,Database subsystem,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508#issuecomment-291977351,"Database subsystem changes:

Synced with upstream
Namespaces/macros converted to atomic names
Added to build system
SQLite updated to v3.18.0

I also smuggled in tiny android fix that gets rid of build error and changes log tag from Urho3D to Atomic. I hope it is acceptable.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1508,2017-04-05T07:26:59Z,2017-04-05T20:18:04Z,2017-04-06T08:04:37Z,MERGED,True,15288,7868,20,https://github.com/rokups,Database subsystem,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1508#issuecomment-291984180,"Database subsystem changes:

Synced with upstream
Namespaces/macros converted to atomic names
Added to build system
SQLite updated to v3.18.0

I also smuggled in tiny android fix that gets rid of build error and changes log tag from Urho3D to Atomic. I hope it is acceptable.","Another great PR, noted a possible follow up, thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1509,2017-04-05T14:54:22Z,2017-04-05T17:24:13Z,2017-04-07T07:24:21Z,MERGED,True,1,1,1,https://github.com/rokups,Do not build AtomicPlayer when javascript support is disabled.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1509,2017-04-05T14:54:22Z,2017-04-05T17:24:13Z,2017-04-07T07:24:21Z,MERGED,True,1,1,1,https://github.com/rokups,Do not build AtomicPlayer when javascript support is disabled.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509#issuecomment-291934366,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,"Great!, maybe we can get this into the AtomicExamples repo as example of how to include Atomic in a external C++ project without JS/C#? https://github.com/rokups/ShaderSketch
Landing ‚úàÔ∏è, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1509,2017-04-05T14:54:22Z,2017-04-05T17:24:13Z,2017-04-07T07:24:21Z,MERGED,True,1,1,1,https://github.com/rokups,Do not build AtomicPlayer when javascript support is disabled.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,https://github.com/rokups,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509#issuecomment-292085480,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,I am not sure how to go about this. Whole point of such example would be having an engine as a submodule. Thing is AtomicExamples is a submodule of engine. This would create a weird loop. So maybe better idea would be a separate repo?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1509,2017-04-05T14:54:22Z,2017-04-05T17:24:13Z,2017-04-07T07:24:21Z,MERGED,True,1,1,1,https://github.com/rokups,Do not build AtomicPlayer when javascript support is disabled.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509#issuecomment-292274386,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,"AtomicExamples is checked out as a submodule, solely to easily have it available for development and for packaging examples with editor, it can also be checked out top level.
Would be good to have it in example repo instead of a new one, maybe the CMake for the example could detect if it is in the engine source tree and error, how are you setting up Atomic in your project for add_subdirectory()?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1509,2017-04-05T14:54:22Z,2017-04-05T17:24:13Z,2017-04-07T07:24:21Z,MERGED,True,1,1,1,https://github.com/rokups,Do not build AtomicPlayer when javascript support is disabled.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1509#issuecomment-292462108,Overlooked this one somehow. Should be all of it now as my project happily builds with engine in a subdir.,"AtomicExamples is checked out as a submodule, solely to easily have it available for development and for packaging examples with editor, it can also be checked out top level.

Would it not create a dependency loop of sorts if both repositories include each other in a submodule? For example if someone thinks of running git submodule checkout with --recursive.

how are you setting up Atomic in your project for add_subdirectory()?

I updated ShaderSketch with latest engine code, take a look at CMakeLists.txt. Basically it boils down to:

Configure engine with set(ATOMIC_<...> 0 CACHE BOOL """" FORCE)
add_subdirectory(path/to/AtomicGameEngine)
target_link_libraries(TargetName Atomic)

And that is it. Includes, defines and dependencies automatically pulled in thanks to CMake ;)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292732554,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","Cool, will look at this soon! We lost power again and it just came back this morning, backlogged :) ‚ö°Ô∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292746708,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","Some testing on Windows 10, I was able to create an external project and load it into VSCode, both for JS/TS, very cool!
It did get me thinking about folder layout, like maybe we want to support code outside of Resources, though that means transpiling/amalgamating so the script can be loaded from packaged resources on device, etc.  Might not be a big deal, and this is kind of a JS norm (ie. your scripts end up processed into an output folder)
In new 3D TypeScript project, I seem unable to set breakpoints in TS, this.node.yaw(timeStep * 75 * this.speed); TS not hit in the Spinner component, though can set in the transpiled js.
In testing an external JavaScript, I was able to hit the breakpoint.  I am wondering what is the best way to kick off intellisense using the ambient typings in a JS project under VSCode?
Get this warning using Launch/Debug Atomic Player in VSCode console:
[0408/140133:ERROR:tcp_socket_win.cc(338)] bind() returned an error: Only one usage of each socket address (protocol/network address/port) is normally permitted. (0x2740)
[0408/140133:ERROR:devtools_http_handler.cc(228)] Cannot start http server for devtools. Stop devtools.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/shaddockh,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292751927,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","In new 3D TypeScript project, I seem unable to set breakpoints in TS, this.node.yaw(timeStep * 75 * this.speed); TS not hit in the Spinner component, though can set in the transpiled js.

You need to make sure you have source maps turned on in your tsconfig.json and also source maps turned on in your duktape debugger launch config.  Do you think this should be something turned on by default when generating external TS projects?

I am wondering what is the best way to kick off intellisense using the ambient typings in a JS project under VSCode?

It looks like there needs to be a jsconfig.json file in the root for intellisense to start working.  I'll go ahead and add that.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/shaddockh,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292752263,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","Get this warning using Launch/Debug Atomic Player in VSCode console:


[0408/140133:ERROR:tcp_socket_win.cc(338)] bind() returned an error: Only one usage of each socket address (protocol/network address/port) is normally permitted. (0x2740)
[0408/140133:ERROR:devtools_http_handler.cc(228)] Cannot start http server for devtools. Stop

I think this has been happening for a while.  It's the CEF listening on the debug port in both the editor and the player and causing a conflict.  If you launch the player from VSCode and don't have the editor running, this error doesn't appear.  It might be a good idea to make the CEF debug port configurable from the command line.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/shaddockh,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292792415,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","I was thinking about it last night, and if you are editing TS in an external project more likely than not you will want to debug the TS and not the generated JS.  Thinking that, I went ahead and put in the sourcemap configuration for TS and the duktape debugger when generating the external project....just seems to make more sense to turn it on from the outset and then turn it off if you need to later.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1513,2017-04-08T02:55:20Z,2017-04-09T17:18:05Z,2017-04-09T17:18:11Z,MERGED,True,186,86,2,https://github.com/shaddockh,Changes to integrate better with VSCode,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1513#issuecomment-292799064,"generate vscode tasks file for launching the player in debug mode or non-debug mode
generate vscode for utilizing the duktape debugger vscode extension
added a menu item to allow pure JavaScript projects to build out the vscode project for editing under vscode.  Latest vscode actually reads d.ts files for completions, even for JavaScript projects
modify the project based extension loader to not try to load .map files as extensions [bug]
modify the project based extension loader to handle loading files that have the source map line on the last line of the file w/o an extra line feed","Glorious!  I tested it out and was able to hit TS/JS breakpoints and intellisense is working great in JavaScript code, those typings are such a boon :)  I agree on the source maps on by default for TS, seemed like expected behavior in testing it.
Thanks! This seriously levels up the VSCode integration, making for some darned pleasant Atomic scripting! ‚õ∑Ô∏èüí®",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1514,2017-04-08T22:48:16Z,2017-04-09T17:30:26Z,2017-07-13T15:16:53Z,MERGED,True,107,14,8,https://github.com/JimMarlowe,enable android source debug,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1514,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1514,"This PR will allow users to insert gdbserver or libgdbserver.so into their APK so it may be debugged with GDB on an external host. Some versions of Android can not copy an executable into the lib directory of an APK, so the work around is to rename it lib*.so, and then execute it anyway, so both options are given.
I fixed the android player to not load anything that has the string ""gdbserver"" as a shared library, as this borks the resulting application.
And I fixed the push action to the android device to install Atomic-debug.apk instead of Atomic-debug-unaligned.apk, which is an intermediate file.
The Android wiki page needs to be updated to explain the new options.","This PR will allow users to insert gdbserver or libgdbserver.so into their APK so it may be debugged with GDB on an external host. Some versions of Android can not copy an executable into the lib directory of an APK, so the work around is to rename it lib*.so, and then execute it anyway, so both options are given.
I fixed the android player to not load anything that has the string ""gdbserver"" as a shared library, as this borks the resulting application.
And I fixed the push action to the android device to install Atomic-debug.apk instead of Atomic-debug-unaligned.apk, which is an intermediate file.
The Android wiki page needs to be updated to explain the new options.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1514,2017-04-08T22:48:16Z,2017-04-09T17:30:26Z,2017-07-13T15:16:53Z,MERGED,True,107,14,8,https://github.com/JimMarlowe,enable android source debug,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1514,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1514#issuecomment-292799802,"This PR will allow users to insert gdbserver or libgdbserver.so into their APK so it may be debugged with GDB on an external host. Some versions of Android can not copy an executable into the lib directory of an APK, so the work around is to rename it lib*.so, and then execute it anyway, so both options are given.
I fixed the android player to not load anything that has the string ""gdbserver"" as a shared library, as this borks the resulting application.
And I fixed the push action to the android device to install Atomic-debug.apk instead of Atomic-debug-unaligned.apk, which is an intermediate file.
The Android wiki page needs to be updated to explain the new options.","Excellent!  Nice tidy delta, looking forward to trying it out, and will really help debug native code on the platform, thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1517,2017-04-09T18:12:38Z,2017-04-09T19:06:02Z,2017-04-09T19:06:05Z,MERGED,True,12,10,3,https://github.com/JoshEngebretson,Fix for OpenGL + Windows incorrect pixel adjustment,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1517,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1517,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1518,2017-04-11T00:10:56Z,2017-04-11T00:44:13Z,2017-04-11T00:44:15Z,MERGED,True,1096,223,32,https://github.com/JoshEngebretson,[C#] Object lifetime and other improvements,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1518,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1518,"Adds bool AtomicNET.IsMainThread(); for telling if currently on main engine thread
Adds AtomicNET.RunGC(); method which runs a system GC cycle, waits for finalizers, and disposes of native instances
Adds support for throwing managed exceptions from native code
Improves managed RefCounted caching with support for strong and weak references
Managed RefCounted now implements the IDisposable interface, SafeHandles are used to avoid needing cleanup code in C# finalizers themselves (finalizers unfortunately look like C++ destructors, though are not, and can be run in any thread)
Adds support for C# native bindings to specify managed interfaces for classes (for example, IDisposable)
Fix for PhysicsRayCast result when RigidBody is null
Scenes are automatically Disposed when unloaded from Player submodule
Fix for RenderSurface when parent texture has been deleted
Optimizations to Metrics profiler also JS/C# components will use their component type name, so can track specific components
Added support for printing active node names through Metrics, helps track down node leaks
Metrics must now be enabled with Metrics.Enable();, this avoids inadvertently enabling them, which impacts performance
Added method for printing loaded resources to ResourceCache
Fixed issue with binding generation when source root or package folder didn't end with a trailing slash
Optimization for Vector return values from generated binding code, lazy init upon method call instead of at Object instantiation
Updated C# FeatureExamples to dispose of scenes and resources when cycling examples","Adds bool AtomicNET.IsMainThread(); for telling if currently on main engine thread
Adds AtomicNET.RunGC(); method which runs a system GC cycle, waits for finalizers, and disposes of native instances
Adds support for throwing managed exceptions from native code
Improves managed RefCounted caching with support for strong and weak references
Managed RefCounted now implements the IDisposable interface, SafeHandles are used to avoid needing cleanup code in C# finalizers themselves (finalizers unfortunately look like C++ destructors, though are not, and can be run in any thread)
Adds support for C# native bindings to specify managed interfaces for classes (for example, IDisposable)
Fix for PhysicsRayCast result when RigidBody is null
Scenes are automatically Disposed when unloaded from Player submodule
Fix for RenderSurface when parent texture has been deleted
Optimizations to Metrics profiler also JS/C# components will use their component type name, so can track specific components
Added support for printing active node names through Metrics, helps track down node leaks
Metrics must now be enabled with Metrics.Enable();, this avoids inadvertently enabling them, which impacts performance
Added method for printing loaded resources to ResourceCache
Fixed issue with binding generation when source root or package folder didn't end with a trailing slash
Optimization for Vector return values from generated binding code, lazy init upon method call instead of at Object instantiation
Updated C# FeatureExamples to dispose of scenes and resources when cycling examples",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/rokups,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293319499,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","@JoshEngebretson requesting assistence regarding windows build error:
C:\Jenkins\workspace\AtomicPR_Windows\Script\AtomicNET\AtomicNET\IO\File.cs(7,42): error CS0535: 'File' does not implement interface member 'Deserializer.Eof' [C:\Jenkins\workspace\AtomicPR_Windows\Artifacts\AtomicNET\Build\AtomicNET\AtomicNET.csproj]

This most likely happens because of new base class for File. Now File inherits AbstractFile which is simply inherits Serializer and Deserializer. I tried to make that reflect in Script\AtomicNET\AtomicNET\IO but looks like it does not work. Please advice.
EDIT: Also mac/android log does not appear. Could you investigate? I wonder why that one failed.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293353103,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","The log is 24 megs, which may have something to do with it, could be something spamming, or additional platform build issues, as Windows log is 1.5 megs.  If log fails to upload next build error will look into what is going on there.
In order to troubleshoot the C# error, which I think is the same failure on the Windows/Mac CI, I need to pull branch and have a look at what is going on, which I can do in a bit.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293415514,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","If you pull this into the branch, should build on Windows, I haven't tested Mac/Android/iOS yet: https://github.com/AtomicGameEngine/AtomicGameEngine/tree/JME-ATOMIC-SYNCUPSTREAM
I was able to create a new JS/C# basic 3D project and run them, the C# mutant example (which uses physics crashed).  I didn't run through the FeatureExamples yet.

This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.

The two ""this"" links go to a bunch of diff, wondering on the rapidjson, have a better link?  The createNode issue should be sorted.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293499312,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","Thank you!
I went through FeatureExamples - they all work. One problem was due to changes from upstream pressing escape quit application instead of resuming to menu. Long story short - on escape press sample initiated menu, menu subscribed to escape key event and newly subscribed handler was invoked for currently executing event. I added a workaround, please verify if it is ok.
Something odd is going on with c# - for me it crashes due to  csb_AtomicNETNative_NETCore_GetContext_5090 being missing. I could find said function in CSModuleAtomicNETNative.cpp and i cant quite tell what is going on. I will have to ask for your assistance again as you i know next to nothing on how bindings work.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293736057,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","Ok, https://github.com/AtomicGameEngine/AtomicGameEngine/tree/JME-ATOMIC-UPDATESDL updates SDL to 2.0.5
I have tested on Windows and Mac, I plan on getting Android and iOS updated and tested tomorrow.  If you could try building on Linux that would be great, ./Build_AtomicEditor.sh is a good test too, making sure the editor binary runs
I'd like to address the event issue another way, probably in the examples, would be good to be consistent with upstream on event handling... and on the C# binding issue, it means that the binary that was loaded was likely out of date.  The native methods are consumed by C FFI, so all functions are assigned an ordinal, to support overloaded methods and help guard against accidentally using incompatible native and managed assembly.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/rokups,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293918830,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","@JoshEngebretson that c# issue indeed was resolved by updating .so with latest compiled one. Turns out editor copies .so into game dir and that got out of date quick.
As you can see linux builds but android still fails. Cant get log - please take a peek there.
Also i know why mutant demo crashes, but do not know how to fix it. On this line it calls StaticModel::SetModel() instead of AnimatedModel::SetModel(). Because of that GetChild() returns null and application crashes. I cant quite tell why that is. Please advice.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293924859,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","I'll be looking over the entire delta, squashing, etc.  Don't worry about the mutant and event issue, I'll look into them.
Android is building, I believe iOS AtomicNET native needs to link with an additional framework, need to look into which:
iphoneos/AtomicNETNative.build/Objects-normal/arm64/AtomicNETNative
Undefined symbols for architecture arm64:
  ""_OBJC_CLASS_$_AVAudioSession"", referenced from:
      objc-class-ref in libSDL.a(SDL_coreaudio.o)
  ""_AVAudioSessionCategoryRecord"", referenced from:
      _update_audio_session in libSDL.a(SDL_coreaudio.o)
  ""_AVAudioSessionInterruptionTypeKey"", referenced from:
      -[SDLInterruptionListener audioSessionInterruption:] in libSDL.a(SDL_coreaudio.o)
  ""_AVAudioSessionCategoryAmbient"", referenced from:
      _update_audio_session in libSDL.a(SDL_coreaudio.o)
  ""_AVAudioSessionCategoryPlayAndRecord"", referenced from:
      _update_audio_session in libSDL.a(SDL_coreaudio.o)
  ""_AVAudioSessionInterruptionNotification"", referenced from:
      _update_audio_session in libSDL.a(SDL_coreaudio.o)
ld: symbol(s) not found for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

The log is huge due to every compile for Mac/iOS file is spamming console, need to see if possible for less verbosity:
CompileC Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/Objects-normal/x86_64/SymbolVisitor.o Source/ToolCore/JSBind/cplusplus/SymbolVisitor.cpp normal x86_64 c++ com.apple.compilers.llvm.clang.1_0.compiler
    cd /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android
    export LANG=en_US.US-ASCII
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x c++ -arch x86_64 -fmessage-length=0 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -Wno-trigraphs -fpascal-strings -O3 -Wno-missing-field-initializers -Wno-missing-prototypes -Wno-return-type -Wno-non-virtual-dtor -Wno-overloaded-virtual -Wno-exit-time-destructors -Wno-missing-braces -Wparentheses -Wswitch -Wno-unused-function -Wno-unused-label -Wno-unused-parameter -Wno-unused-variable -Wunused-value -Wno-empty-body -Wno-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wno-constant-conversion -Wno-int-conversion -Wno-bool-conversion -Wno-enum-conversion -Wno-shorten-64-to-32 -Wno-newline-eof -Wno-c++11-extensions -DCMAKE_INTDIR=\""Release\"" -DATOMIC_XCODE -DATOMIC_ROOT_SOURCE_DIR=\""/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android\"" -DATOMIC_ROOT_BUILD_DIR=\""/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac\"" -DATOMIC_WEBVIEW -DCPLUSPLUS_WITHOUT_QT -DPOCO_NO_AUTOMATIC_LIBS=1 -DPOCO_STATIC=1 -DATOMIC_CXX11=1 -DATOMIC_64BIT=1 -DATOMIC_PLATFORM_OSX=1 -DATOMIC_OPENGL=1 -DATOMIC_PLATFORM_DESKTOP=1 -DATOMIC_FILEWATCHER=1 -DATOMIC_THREADING=1 -DATOMIC_NETWORK=1 -DATOMIC_WEB=1 -DATOMIC_PROFILING=1 -DATOMIC_LOGGING=1 -DATOMIC_3D -DATOMIC_ATOMIC2D=1 -DATOMIC_PHYSICS=1 -DATOMIC_NAVIGATION=1 -DATOMIC_STATIC_DEFINE=1 -DATOMIC_API= -DATOMIC_IK=1 -DCURL_STATICLIB=1 -DKNET_UNIX -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -fasm-blocks -fstrict-aliasing -Wdeprecated-declarations -Winvalid-offsetof -mmacosx-version-min=10.7 -Wno-sign-conversion -Wno-infinite-recursion -Wno-move -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Release/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Submodules/CEF/MacOSX -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Assimp/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Poco/Foundation/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/Atomic/.. -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Box2D -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/TurboBadger -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/FreeType/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/JO -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/LZ4 -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/PugiXml/src -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/STB -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/STB/../.. -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ThirdParty/SDL/include/generated -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/SDL/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/ASIO/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/rapidjson/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/WebSocketPP/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/GLEW -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/LibCpuId/src -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/libcurl/lib/../include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/zlib -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Civetweb/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/kNet/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Bullet/src -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/StanHull -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Recast/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/Detour/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/DetourCrowd/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/DetourCrowd/../Detour/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/DetourTileCache/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/DetourTileCache/../Detour/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ThirdParty/ik/include/generated -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ThirdParty/ik/include -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/DerivedSources/x86_64 -I/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/DerivedSources -Wmost -Wno-four-char-constants -Wno-unknown-pragmas -F/Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Release -Wno-invalid-offsetof -std=gnu++11 -stdlib=libc++ -DNDEBUG -MMD -MT dependencies -MF /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/Objects-normal/x86_64/SymbolVisitor.d --serialize-diagnostics /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/Objects-normal/x86_64/SymbolVisitor.dia -c /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Source/ToolCore/JSBind/cplusplus/SymbolVisitor.cpp -o /Users/jenkins/Home/workspace/AtomicPR_MacEditor_iOS_Android/Artifacts/Build/Mac/Source/ToolCore/Atomic.build/Release/ToolCore.build/Objects-normal/x86_64/SymbolVisitor.o",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/rokups,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-293971520,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","Urho3D has this for warnings:
# When performing Xcode CI build suppress all the warnings for 3rd party libraries because there are just too many of them
if (XCODE AND DEFINED ENV{CI})
    set (CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -w"")
    set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -w"")
endif ()",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1519,2017-04-11T13:12:15Z,2017-04-13T23:40:16Z,2017-04-13T23:40:16Z,CLOSED,False,68739,35084,1524,https://github.com/rokups,Sync with upstream,6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1519#issuecomment-294048703,"Commit urho3d/Urho3D@129205a
Did not update SystemUI, Console and DebugHud because they are on the way out.
Urho3D added IK üéâ
Also updated some third party libs. Good news - custom modifications for includes no longer needed because we have a sane build scripts ;)
Few changes were available upstream so i removed // ATOMIC BEGIN|END.
Did my best though there still might be some hairy stuff.
This breaks binding generation. Suddenly createNode() in TS becomes unavailable.
Removed this because similar types are now part of rapidjson, please verify if it was a valid decision.
Let the buildbot games begin ü•á","Great eye for detail on pulling the updates from Urho and Third Party deps! ü¶Ö
I am finishing up in this branch and will land from there: https://github.com/AtomicGameEngine/AtomicGameEngine/tree/JME-ATOMIC-URHO_THIRDPARTY_UPDATE
On behalf of üê´ everywhere, THANKS! üéâ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1520,2017-04-15T15:29:08Z,2017-04-15T16:04:04Z,2017-04-18T13:45:03Z,MERGED,True,26,12,8,https://github.com/rokups,Jme atomic urho thirdparty update,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1520,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1520,"Replaced ""urho3d"" strings with ""atomic""
Fixed crash when calling UI::GetWidgetAt() without initializing UI subsystem. Engine makes this call automatically. Since i do not use TB UI it crashes application.
Removed assert that caused crash when using c++11 std::bind() for subscribing to events. Fix is on upstream since i added support for c++11 callbacks.
Fixed SDL build, at least on my system it failed to discover dl due to check_c_source_compiles() missing dl link library.
Fixed dependency issue on windows when building without .NET and javascript.","Replaced ""urho3d"" strings with ""atomic""
Fixed crash when calling UI::GetWidgetAt() without initializing UI subsystem. Engine makes this call automatically. Since i do not use TB UI it crashes application.
Removed assert that caused crash when using c++11 std::bind() for subscribing to events. Fix is on upstream since i added support for c++11 callbacks.
Fixed SDL build, at least on my system it failed to discover dl due to check_c_source_compiles() missing dl link library.
Fixed dependency issue on windows when building without .NET and javascript.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1521,2017-04-17T03:41:26Z,2017-04-17T14:37:17Z,2017-04-17T17:36:47Z,CLOSED,False,553,553,6,https://github.com/bryant1410,Fix broken headings in Markdown files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521,https://github.com/bryant1410,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521,"GitHub changed the way Markdown headings are parsed, so this change fixes it.
See bryant1410/readmesfix for more information.
Tackles bryant1410/readmesfix#1","GitHub changed the way Markdown headings are parsed, so this change fixes it.
See bryant1410/readmesfix for more information.
Tackles bryant1410/readmesfix#1",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1521,2017-04-17T03:41:26Z,2017-04-17T14:37:17Z,2017-04-17T17:36:47Z,CLOSED,False,553,553,6,https://github.com/bryant1410,Fix broken headings in Markdown files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521#issuecomment-294399314,"GitHub changed the way Markdown headings are parsed, so this change fixes it.
See bryant1410/readmesfix for more information.
Tackles bryant1410/readmesfix#1",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1521,2017-04-17T03:41:26Z,2017-04-17T14:37:17Z,2017-04-17T17:36:47Z,CLOSED,False,553,553,6,https://github.com/bryant1410,Fix broken headings in Markdown files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521#issuecomment-294497912,"GitHub changed the way Markdown headings are parsed, so this change fixes it.
See bryant1410/readmesfix for more information.
Tackles bryant1410/readmesfix#1","@bryant1410 Thanks, though when sending scripted PR's en masse, probably a good idea to fix the script to not alter file whitespace globally, including markdown files which don't need changes.
Closing and will fix in a separate PR",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1521,2017-04-17T03:41:26Z,2017-04-17T14:37:17Z,2017-04-17T17:36:47Z,CLOSED,False,553,553,6,https://github.com/bryant1410,Fix broken headings in Markdown files,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521,https://github.com/bryant1410,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1521#issuecomment-294537101,"GitHub changed the way Markdown headings are parsed, so this change fixes it.
See bryant1410/readmesfix for more information.
Tackles bryant1410/readmesfix#1","@bryant1410 Thanks, though when sending scripted PR's en masse, probably a good idea to fix the script to not alter file whitespace globally, including markdown files which don't need changes.
Closing and will fix in a separate PR

Yup, sorry. Will fix to avoid changing LF/CRLF. Btw, I tried to consider bugs by running the script incrementally and checking, and already fixed some bugs.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1522,2017-04-17T17:13:37Z,2017-04-17T18:44:58Z,2017-04-17T18:45:00Z,MERGED,True,70299,35468,1581,https://github.com/JoshEngebretson,Urho and Third Party updates (Commit: 129205a9b1fd94573c81feba76f897990990e8ec),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1522,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1522,"Updates Urho and Third Party dependencies to urho3d/Urho3D@129205a
Also updates Atomic C# Android to SDL 2.0.5 and has a few other improvements and fixes shaken out during the update (see squashed commit messages)
A big thanks to @rokups for spearheading and working on the update!!! üê´ üé∏","Updates Urho and Third Party dependencies to urho3d/Urho3D@129205a
Also updates Atomic C# Android to SDL 2.0.5 and has a few other improvements and fixes shaken out during the update (see squashed commit messages)
A big thanks to @rokups for spearheading and working on the update!!! üê´ üé∏",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1524,2017-04-17T21:31:47Z,2017-04-17T21:54:24Z,2017-04-17T21:54:26Z,MERGED,True,93,39,4,https://github.com/JoshEngebretson,[C#] Adding explicit Scene/Node/Component Destroy methods,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1524,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1524,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1526,2017-04-19T01:15:59Z,2017-04-19T15:54:49Z,2017-06-18T15:16:10Z,MERGED,True,16,31,3,https://github.com/JimMarlowe,activate webgl builds,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1526,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1526,"This pr fixes some compilation errors that cause the WebGL platform not to compile.
I am concerned about the root cause of #1209 since then function it was implemented in, FileSystem::GetProgramDir() was totally rewritten and the original fix may not work.
It also adds the nav library to the build, otherwise the webgl player crashes.
On a sunny note, this webgl player actually plays audio, where in the past it had been stubbornly silent.","This pr fixes some compilation errors that cause the WebGL platform not to compile.
I am concerned about the root cause of #1209 since then function it was implemented in, FileSystem::GetProgramDir() was totally rewritten and the original fix may not work.
It also adds the nav library to the build, otherwise the webgl player crashes.
On a sunny note, this webgl player actually plays audio, where in the past it had been stubbornly silent.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1529,2017-04-26T16:39:48Z,2017-04-26T17:08:36Z,2017-04-26T17:08:39Z,MERGED,True,2,0,1,https://github.com/JoshEngebretson,Forward D3D11 flag to TB for pixel offset,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1529,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1529,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1530,2017-04-27T22:28:58Z,2017-04-27T23:05:37Z,2017-04-27T23:05:39Z,MERGED,True,183,2,7,https://github.com/JoshEngebretson,Script shader parameter setters for RenderPath and RenderPathCommand,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1530,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1530,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",True,"{'THUMBS_UP': ['https://github.com/JoshEngebretson'], 'HOORAY': ['https://github.com/JoshEngebretson'], 'LAUGH': ['https://github.com/JoshEngebretson'], 'HEART': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-301840534,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Great, thanks üëç,  I'll give this a whirl later today once I can get back to macOS",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-301884770,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Great work!  It is a lot more stable on macOS and the UI seems to be working other than the thread ID's which are still not quite being calculated properly.  I did try and disconnect and then reconnect and the Qt profiler app hangs on macOS when doing this... can you disconnect/reconnect for you?
EDIT: Force quitting the Profiler application and restarting it and I could reconnect to the player app and start capturing again, so is Profiler app specific
EDIT 2: I get this crash quite a bit, seem to be able to trigger it with right click select of the timespan, though also believe I got it once when Profiler app was in background process:
Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   Profiler                      	0x0000000103ba02dc EasyGraphicsView::onIdleTimeout() + 14828 (blocks_graphics_view.cpp:1635)
1   Profiler                      	0x0000000103bb20da QtPrivate::FunctorCall<QtPrivate::IndexesList<>, QtPrivate::List<>, void, void (EasyGraphicsView::*)()>::call(void (EasyGraphicsView::*)(), EasyGraphicsView*, void**) + 122 (qobjectdefs_impl.h:143)
2   Profiler                      	0x0000000103bb2030 void QtPrivate::FunctionPointer<void (EasyGraphicsView::*)()>::call<QtPrivate::List<>, void>(void (EasyGraphicsView::*)(), EasyGraphicsView*, void**) + 80 (qobjectdefs_impl.h:163)
3   Profiler                      	0x0000000103bb1f56 QtPrivate::QSlotObject<void (EasyGraphicsView::*)(), QtPrivate::List<>, void>::impl(int, QtPrivate::QSlotObjectBase*, QObject*, void**, bool*) + 166 (qobject_impl.h:121)
4   org.qt-project.QtCore         	0x0000000104ada22b QMetaObject::activate(QObject*, int, int, void**) + 731
5   org.qt-project.QtCore         	0x0000000104ad3320 QObject::event(QEvent*) + 48
6   org.qt-project.QtWidgets      	0x0000000103e1a58d QApplicationPrivate::notify_helper(QObject*, QEvent*) + 269
7   org.qt-project.QtWidgets      	0x0000000103e1ced2 QApplication::notify(QObject*, QEvent*) + 5906
8   org.qt-project.QtCore         	0x0000000104aa9544 QCoreApplication::notifyInternal2(QObject*, QEvent*) + 164
9   org.qt-project.QtCore         	0x0000000104afe9d6 QTimerInfoList::activateTimers() + 1142
10  libqcocoa.dylib               	0x00000001078deae2 QCocoaEventDispatcherPrivate::activateTimersSourceCallback(void*) + 18",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-301892032,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",I was able to profile on Android (awesome! üöÄ ) and the thread id's appear to be the same number:,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-306488147,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@JoshEngebretson easy_profiler maintainers did some work on networking and threading. Our changes were upstreamed as well. I rebased this branch on to master, cleaned it up, updated easy_profiler, fixed crash with event profiling (its a bit dirty, but works great). I squashed all commits as they were more wandering in the woods than meaningful work.. Squashing ate your changes, but rest assured your mark in history of humanity was presedved :)
Please test profiler tool on MacOS. I commented out that socket.listen() loop for now and i hope it will work without said loop and i can clean it up from commit history altogether.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-306511899,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@rokups Awesome sauce!  Thanks, and will test and review as soon as possible üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/cas4ey,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-307642957,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@JoshEngebretson Hello! I'm collaborator of easy_profiler. I saw you had a crash in GUI. Does the problem still exist? If yes, could you, please, send me .prof file with which you had the problem?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-307645345,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Hello @cas4ey , thanks for your excellent work on easy_profiler!  I have not reproduced any crashes in recent testing of the profiler branch, will  let you know if I do üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-307728495,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@JoshEngebretson i updated to latest profiler code and rebased on to engine master. Connection log spam is no longer there and it seems network quirks are fixed. Please test how it fares on MacOS.
Also please point me to some example of manual binding example for c# and to some example how to add extra code for js. I would like to try adding something like AtomicNET/Core/Profiler.cs
 to javascript.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-307788175,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Awesome, I'll be able to test this later today.  I'll also provide some guidance for C#/JS üê´
Edit: Looks like there are some include path issues with the profiler on Windows/macOS according to the logs, note CI builds in release",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308169449,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Something weird is going on here and i cant figure it out. Could you please take a look? Search build log for -- Library type: SHARED (easy profiler library type). Due to this it should be STATIC. This variable is created here, but according to cmake docs it only creates CACHE variable if it is missing. Otherwise value is left intact. I confirmed it testing on my machine. Something odd is going on here. I also had to add this workaround for mac build because it didnt work with CXX_STANDARD 11 even though cmake version is high enough to support it. If you got any ideas whats going on here i am all ears.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308174951,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","I am not sure on the CMake workaround, 3.1.2 is what is on build box.  If we're modifying the stock easy_profiler CMake, please mark with // ATOMIC BEGIN and // ATOMIC END block with a note about modification, this helps when updating and also removing changes when they are no longer necessary.
I'll have a look at the build when I get a chance here, won't be too long ;)  Great work!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308269528,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308374408,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308669048,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",Finally it builds \o/ @JoshEngebretson thank you very much for spotting that easy_profiler cmake quirk. Fresh set of eyeballs are a great thing o/ I will try to upstream that change as well.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,16,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-308686059,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","I am afraid at least on windows profiler deployment is complicated.
profiler_gui can not build if engine links to static runtime because prebuilt Qt libraries link to dynamic msvc runtime. profiler_gui links to easy_profiler lib here, and lib inherits static runtime from the engine.
We can build profiler_gui with -DATOMIC_DYNAMIC_RUNTIME=1, however then editor and few other targets fail to build because CEF links to static runtime.
We have to do one of the following on windows:

Build Qt linking to static msvc runtime.
Build CEF linking to dynamic msvc runtime.
Generate -DATOMIC_DYNAMIC_RUNTIME=0 and build engine without providing it access to Qt. Generate build with -DATOMIC_DYNAMIC_RUNTIME=1 and build profiler_gui only. Copy profiler tool with Qt dlls to static build directory for distribution.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,17,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310324098,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Again sorry for taking forever. Real life and summer caught up to me.
Sometimes i can be idiot of epic proportions. I completely forgot the fact that Qt ships both release and debug builds of their libraries. Forcing a release (/MD) build in otherwise debug build of engine was causing issues and completely unnecessary. Once i realized this it was easy to have it build debug version of profiler that links to dynamic msvc runtime just like rest of Qt. It all works perfectly. I also rebased branch on latest master.
To deploy profiler dlls on windows we are supposed to run this: C:\Qt\5.9\msvc2017_64\bin\windeployqt.exe --no-angle --no-opengl-sw --no-translations C:\Atomic-easy_profiler\AtomicGameEngine\Artifacts\Build\Profiler\Release\Profiler.exe. It dumps minimal required Qt libraries into directory where Profiler.exe is located.
@JoshEngebretson please give it a spin on MacOS and let me know if something is still missing or if is it complete now.
#1566 makes Add manual optimized bindings for Profiler::BeginBlock() goal obsolete so i am crossing it out.
Also please point me to some example how to add extra code for js. I would like to try adding something like AtomicNET/Core/Profiler.cs
 to javascript.
If profiling on MacOS works as expected and when i add this js bit i think this PR will be complete.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,18,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310489151,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@rokups Absolutely zero worries man, this is a mega-feature! üòé
I am really swamped here today, will test at first opportunity.  That's good news on the Windows side of things, thanks for R&D'ing it
Also, I haven't forgotten #1566. I'll look into whipping up a quick hand binding example for the profiler if that gets hairy (or for the meantime).",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/HeadClot,19,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310563351,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",This is insane. Just saw the Repo for easy profiler. Super happy to see this in AGE :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/Type1J,20,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310662571,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",@rokups This is great! Good job!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,21,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310730605,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Thanks for applauds guys :) üëè
@JoshEngebretson optimized c# bindings are working. One more piece of the puzzle is that generated c# projects do not have ATOMIC_PROFILING defined. It should be defined at least in debug builds and it is ok if it is defined even if engine is built without ATOMIC_PROFILING. I can not find where i should change that. Halp üÜò",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,22,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-310732381,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","The C# solution generator has support for adding constants, though not for debug vs release I don't think right now, example:

  
    
      AtomicGameEngine/Script/AtomicNET/AtomicNETProject.json
    
    
         Line 47
      in
      a3cfc78
    
  
  
    

        
          
           ""defineConstants"" : [""ATOMIC_DESKTOP""], 
        
    
  


Would be a pretty easy add for supporting debug/release specific flags:

  
    
      AtomicGameEngine/Source/ToolCore/NETTools/NETProjectGen.cpp
    
    
         Line 473
      in
      a3cfc78
    
  
  
    

        
          
           pgroup.CreateChild(""DefineConstants"").SetValue(String::Joined(constants, "";"").CString());",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,23,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311638493,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@JoshEngebretson i cleaned up commit history, now it is in a state to be merged. Updated easy_profiler to latest code on their develop branch too and all custom modifications are marked with atomic comments. The last bit missing is bit for js profiling.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,24,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311665331,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",@JoshEngebretson requested changes landed. Once you review i will squash Changes requested in code review into easy_profiler integration in order to keep best appearances üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,25,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311667357,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Great, cleared for landing, I'll just do some final binary testing once you have the commits arranged, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,26,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311672711,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",This would also be a good PR to add yourself to AUTHORS.md üåü,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/rokups,27,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311695715,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Already there, Rokas Kupstys ;)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,28,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311697736,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Haha, awesome, you're a Super Contributor :)  If you want to add yourself to the Atomic Game Engine credits block, I think you should.. and technically, part of the contributing agreement: CONTRIBUTING.md",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,29,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311777542,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,30,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-311820341,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@rokups I made some tweaks and added JS/TS Profiler.BeginBlock support, feel free to look over and cherry pick into PR: d826df8
I also had some problems on CI Mac, so:
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/JoshEngebretson,31,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-312017309,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","@rokups You absolutely shredded on the new Profiler subsystem üé∏ , very impressive work!  It has also been a lot of fun working on this feature with you, LEVEL UP! üåü
A hearty THANKS from üê´ everywhere, and special thanks to @cas4ey for such an excellent profiling library and client, which Atomic now uses to profile C++, C#, JavaScript/TypeScript!!!
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/Type1J,32,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-312018008,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.",This is pretty awesome @rokups!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1531,2017-04-28T10:57:07Z,2017-06-29T16:18:01Z,2017-06-30T15:05:41Z,MERGED,True,27924,691,131,https://github.com/rokups,easy_profiler integration,8,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531,https://github.com/cas4ey,33,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1531#issuecomment-312292527,"This PR integrates easy_profiler replacing old and not really useful on-screen profiler.
Features:

Profiling data is cached and sent over network (easy mobile device and application startup profiling)
Profiling data can be saved to file and loaded later
Profiler recognizes different threads
Options for changing profiled block color (displayed in profiler tool). Events are orange, resource loading is blue
Profiler tool is using Qt5. On systems where Qt is not available cmake will display warning but engine will still build
C# support, requires projects to define ATOMIC_PROFILING.
Profiler is enabled automatically for debug builds
Command line parameters to set profiler port and enable/disable application listening for profiler connections

In the future easy_profiler maintainers plan support for dx11/12, opengl, vulkan and cuda profiling. Maintainers were very helpful and implemented non-scoped profiler blocks on my request. Tracking arbitrary values (my request as well) is already in the works, this will be useful for tracking c#/js object counts and what not.
I found a way to do reasonably low-overhead c# code block profiling using lambda. There is still a chance to optimize a little by defining custom bindings to Profiler::BeginBlock() which takes const char* as parameter. It looks like this:
Profiler.Block(""BlockName"", () => {
    // Code here
});
I did not add js support, however it is trivial. Is there a spot somewhere we could add some extra code for typescript to use much like Script/AtomicNET/AtomicNET/Core/Profiler.cs? In js it would look like so:
Profiler.block(""BlockName"", function() {
    // Code here
});
Can we set engineParameters_ from c#/js applications? If we can - how? We need this in order to make listening for profiler connections opt-in instead of opt-out.
TODO:

 js support
 Add ATOMIC_PROFILING to debug configurations of C# projects
 Make profiler not listen by default
 Add manual optimized bindings for Profiler::BeginBlock()

Please review.","Whoa! Great news! üëç
@rokups Thanks for your great work on the integration and for your valuable suggestions for easy_profiler ü•á
@JoshEngebretson It's a pleasure to create useful things which could help people üòÉ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1535,2017-05-15T16:27:37Z,2017-05-15T17:58:52Z,2017-05-15T17:58:54Z,MERGED,True,4,1,1,https://github.com/JoshEngebretson,Default high dpi back to false from update,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1535,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1535,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1538,2017-05-16T17:29:48Z,2017-05-16T18:12:42Z,2017-05-18T15:41:36Z,MERGED,True,427,139,22,https://github.com/JoshEngebretson,[C#] Enum improvements and access to CSComponentAssembly type information at runtime,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1538,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1538,"This PR improved enumeration serialization for script fields to be by enum string instead of numeric value.  It also adds a Cache representation of CSComponentAssembly type information which is available at runtime.  If generating the project Cache, and AtomicNETService is not available to process the binary solution, the cached information in the assemblies .asset file is used.","This PR improved enumeration serialization for script fields to be by enum string instead of numeric value.  It also adds a Cache representation of CSComponentAssembly type information which is available at runtime.  If generating the project Cache, and AtomicNETService is not available to process the binary solution, the cached information in the assemblies .asset file is used.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1538,2017-05-16T17:29:48Z,2017-05-16T18:12:42Z,2017-05-18T15:41:36Z,MERGED,True,427,139,22,https://github.com/JoshEngebretson,[C#] Enum improvements and access to CSComponentAssembly type information at runtime,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1538,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1538#issuecomment-302444324,"This PR improved enumeration serialization for script fields to be by enum string instead of numeric value.  It also adds a Cache representation of CSComponentAssembly type information which is available at runtime.  If generating the project Cache, and AtomicNETService is not available to process the binary solution, the cached information in the assemblies .asset file is used.",Awesome :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1540,2017-05-18T20:15:30Z,2017-05-18T20:45:28Z,2017-05-18T20:45:30Z,MERGED,True,7,0,1,https://github.com/JoshEngebretson,Improve error message when attempting to build out of a local repo,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1540,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1540,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1542,2017-05-19T22:38:02Z,2017-05-21T13:45:20Z,2017-06-18T15:16:08Z,MERGED,True,32,0,2,https://github.com/JimMarlowe,Add UISelectList accessors to get list strings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542,"This PR makes the UISelectList a little more useful. There is a lot of data hiding going on between the UISelectList and the UISelectItemSource, as far as I can tell you can only program a UISelectList with a UISelectItemSource. Once the UISelectItemSource is created and then leave the scope, you cant get the UISelectItemSource back out of the UISelectList. But, there is an internal TBSelectItemSource that the UISelectList uses to do the drawing and stuff, and I can find that, and return the strings that you can clearly see...
The added methods are :
const String& UISelectList::GetItemString(int index);
and
const String& UISelectList::GetSelectedItemString();
and they pass thru the script bindings without issue. Example code snippet :
if ( ev.target.id == ""myselectlist"") {
   var selectlist = <Atomic.UISelectList>this.mahWindow.getWidget(ev.target.id);
   var selected = selectlist.getValue();
   Atomic.print ( ""Atomic.UISelectList selected item = "" + selected );
   Atomic.print ( ""Atomic.UISelectList selected string = "" + selectlist.getSelectedItemString());
   Atomic.print ( ""or Atomic.UISelectList selected string = "" + selectlist.getItemString(selected));
   }","This PR makes the UISelectList a little more useful. There is a lot of data hiding going on between the UISelectList and the UISelectItemSource, as far as I can tell you can only program a UISelectList with a UISelectItemSource. Once the UISelectItemSource is created and then leave the scope, you cant get the UISelectItemSource back out of the UISelectList. But, there is an internal TBSelectItemSource that the UISelectList uses to do the drawing and stuff, and I can find that, and return the strings that you can clearly see...
The added methods are :
const String& UISelectList::GetItemString(int index);
and
const String& UISelectList::GetSelectedItemString();
and they pass thru the script bindings without issue. Example code snippet :
if ( ev.target.id == ""myselectlist"") {
   var selectlist = <Atomic.UISelectList>this.mahWindow.getWidget(ev.target.id);
   var selected = selectlist.getValue();
   Atomic.print ( ""Atomic.UISelectList selected item = "" + selected );
   Atomic.print ( ""Atomic.UISelectList selected string = "" + selectlist.getSelectedItemString());
   Atomic.print ( ""or Atomic.UISelectList selected string = "" + selectlist.getItemString(selected));
   }",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1542,2017-05-19T22:38:02Z,2017-05-21T13:45:20Z,2017-06-18T15:16:08Z,MERGED,True,32,0,2,https://github.com/JimMarlowe,Add UISelectList accessors to get list strings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542#issuecomment-302843350,"This PR makes the UISelectList a little more useful. There is a lot of data hiding going on between the UISelectList and the UISelectItemSource, as far as I can tell you can only program a UISelectList with a UISelectItemSource. Once the UISelectItemSource is created and then leave the scope, you cant get the UISelectItemSource back out of the UISelectList. But, there is an internal TBSelectItemSource that the UISelectList uses to do the drawing and stuff, and I can find that, and return the strings that you can clearly see...
The added methods are :
const String& UISelectList::GetItemString(int index);
and
const String& UISelectList::GetSelectedItemString();
and they pass thru the script bindings without issue. Example code snippet :
if ( ev.target.id == ""myselectlist"") {
   var selectlist = <Atomic.UISelectList>this.mahWindow.getWidget(ev.target.id);
   var selected = selectlist.getValue();
   Atomic.print ( ""Atomic.UISelectList selected item = "" + selected );
   Atomic.print ( ""Atomic.UISelectList selected string = "" + selectlist.getSelectedItemString());
   Atomic.print ( ""or Atomic.UISelectList selected string = "" + selectlist.getItemString(selected));
   }","hmmm now that im using it for real, its being problematic. wait.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1542,2017-05-19T22:38:02Z,2017-05-21T13:45:20Z,2017-06-18T15:16:08Z,MERGED,True,32,0,2,https://github.com/JimMarlowe,Add UISelectList accessors to get list strings,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1542#issuecomment-302937698,"This PR makes the UISelectList a little more useful. There is a lot of data hiding going on between the UISelectList and the UISelectItemSource, as far as I can tell you can only program a UISelectList with a UISelectItemSource. Once the UISelectItemSource is created and then leave the scope, you cant get the UISelectItemSource back out of the UISelectList. But, there is an internal TBSelectItemSource that the UISelectList uses to do the drawing and stuff, and I can find that, and return the strings that you can clearly see...
The added methods are :
const String& UISelectList::GetItemString(int index);
and
const String& UISelectList::GetSelectedItemString();
and they pass thru the script bindings without issue. Example code snippet :
if ( ev.target.id == ""myselectlist"") {
   var selectlist = <Atomic.UISelectList>this.mahWindow.getWidget(ev.target.id);
   var selected = selectlist.getValue();
   Atomic.print ( ""Atomic.UISelectList selected item = "" + selected );
   Atomic.print ( ""Atomic.UISelectList selected string = "" + selectlist.getSelectedItemString());
   Atomic.print ( ""or Atomic.UISelectList selected string = "" + selectlist.getItemString(selected));
   }","Great add, thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1547,2017-05-31T19:41:05Z,2017-05-31T20:59:40Z,2017-05-31T20:59:41Z,MERGED,True,15,1,2,https://github.com/shearer12345,Check for `/usr/bin/mono/` directory ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547,https://github.com/shearer12345,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547,"Adds a check for the /usr/bin/mono/ directory before automatically setting with-atomicnet=true - so doesn't build with C# when it shouldn't.
Added a programDirectoryExists function for the check
Closes #1544
Tested on Ubuntu 17.04 - though should be consist on most distros. Mono seems pretty consistently installed to /usr/bin/mono","Adds a check for the /usr/bin/mono/ directory before automatically setting with-atomicnet=true - so doesn't build with C# when it shouldn't.
Added a programDirectoryExists function for the check
Closes #1544
Tested on Ubuntu 17.04 - though should be consist on most distros. Mono seems pretty consistently installed to /usr/bin/mono",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1547,2017-05-31T19:41:05Z,2017-05-31T20:59:40Z,2017-05-31T20:59:41Z,MERGED,True,15,1,2,https://github.com/shearer12345,Check for `/usr/bin/mono/` directory ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547#issuecomment-305295579,"Adds a check for the /usr/bin/mono/ directory before automatically setting with-atomicnet=true - so doesn't build with C# when it shouldn't.
Added a programDirectoryExists function for the check
Closes #1544
Tested on Ubuntu 17.04 - though should be consist on most distros. Mono seems pretty consistently installed to /usr/bin/mono",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1547,2017-05-31T19:41:05Z,2017-05-31T20:59:40Z,2017-05-31T20:59:41Z,MERGED,True,15,1,2,https://github.com/shearer12345,Check for `/usr/bin/mono/` directory ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547#issuecomment-305304201,"Adds a check for the /usr/bin/mono/ directory before automatically setting with-atomicnet=true - so doesn't build with C# when it shouldn't.
Added a programDirectoryExists function for the check
Closes #1544
Tested on Ubuntu 17.04 - though should be consist on most distros. Mono seems pretty consistently installed to /usr/bin/mono","@shearer12345 Thanks!  Let's get CI chewing on it üëç
@AtomicBuildBot ok to test, add to whitelist",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1547,2017-05-31T19:41:05Z,2017-05-31T20:59:40Z,2017-05-31T20:59:41Z,MERGED,True,15,1,2,https://github.com/shearer12345,Check for `/usr/bin/mono/` directory ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1547#issuecomment-305315711,"Adds a check for the /usr/bin/mono/ directory before automatically setting with-atomicnet=true - so doesn't build with C# when it shouldn't.
Added a programDirectoryExists function for the check
Closes #1544
Tested on Ubuntu 17.04 - though should be consist on most distros. Mono seems pretty consistently installed to /usr/bin/mono","Great, thanks, and welcome to the AUTHORS.md :)
LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1549,2017-06-08T02:55:21Z,2017-06-08T16:08:38Z,2017-06-08T16:08:41Z,MERGED,True,31,3,2,https://github.com/shaddockh,Minor fixes for TMX files,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1549,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1549,"This PR includes a couple quick fixes

Latest version of Tiled has a version id of 1.0.0 instead of 1.0 so this recognizes both
Tiled supports the ability to use individual images in a tileset instead of a spritesheet.  The version of the TMXFile in Urho and Atomic doesn't support this, but also doesn't indicate why loading a tmx with these fails.  This checks for that situation and writes out the appropriate error.

Note: I'll add a new issue to see if it will be possible for the TmxFile loader to support these types of tilesets in the future.","This PR includes a couple quick fixes

Latest version of Tiled has a version id of 1.0.0 instead of 1.0 so this recognizes both
Tiled supports the ability to use individual images in a tileset instead of a spritesheet.  The version of the TMXFile in Urho and Atomic doesn't support this, but also doesn't indicate why loading a tmx with these fails.  This checks for that situation and writes out the appropriate error.

Note: I'll add a new issue to see if it will be possible for the TmxFile loader to support these types of tilesets in the future.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1549,2017-06-08T02:55:21Z,2017-06-08T16:08:38Z,2017-06-08T16:08:41Z,MERGED,True,31,3,2,https://github.com/shaddockh,Minor fixes for TMX files,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1549,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1549#issuecomment-307150849,"This PR includes a couple quick fixes

Latest version of Tiled has a version id of 1.0.0 instead of 1.0 so this recognizes both
Tiled supports the ability to use individual images in a tileset instead of a spritesheet.  The version of the TMXFile in Urho and Atomic doesn't support this, but also doesn't indicate why loading a tmx with these fails.  This checks for that situation and writes out the appropriate error.

Note: I'll add a new issue to see if it will be possible for the TmxFile loader to support these types of tilesets in the future.","Great, thanks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1551,2017-06-08T23:25:09Z,2017-06-10T17:06:35Z,2017-06-18T15:16:06Z,CLOSED,False,1442,1,36,https://github.com/JimMarlowe,UIPromptWindow and UIFinderWindow Widgets ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,"This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.","This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1551,2017-06-08T23:25:09Z,2017-06-10T17:06:35Z,2017-06-18T15:16:06Z,CLOSED,False,1442,1,36,https://github.com/JimMarlowe,UIPromptWindow and UIFinderWindow Widgets ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551#issuecomment-307480624,"This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.","After finding GetParentPath(), and applying it, it has a side effect to not stop at ""/"" and will go to """" as the root directory, so no. It is also assuming ""/"" as the path separator, so Im no worse off.
and then ...
    //
    //C++ snippet for UIPromptWindow
    // note you really need a c++ class to embed this in, and uiwidgetParent needs to exist.
    UIPromptWindow  *promptPtr = new UIPromptWindow(context_, uiwidgetParent, ""myprompt"", true);
    SubscribeToEvent(promptPtr, E_UIPROMPTCOMPLETE, ATOMIC_HANDLER(myClass, HandlePrompt));
    promptPtr->Show(""WindowTitle"", ""Message in window"", ""preset value"" );
  
    // class event handler for results
    void myClass::HandlePrompt(StringHash eventType, VariantMap& eventData)
    {
        String Title = eventData[""Title""].GetString();  // these are the 3 fields in the event
        String Reason = eventData[""Reason""].GetString();
        String Selected = eventData[""Selected""].GetString();
        ATOMIC_LOGINFO ( ""Title = "" + Title );
        ATOMIC_LOGINFO ( ""Reason = "" + Reason );
        ATOMIC_LOGINFO ( ""Selected = "" + Selected );
        if( Reason == ""OK"" ) // reasons are strings ""OK"" and ""CANCEL"", depending on which was pressed
        {
            // do OK action 
            ATOMIC_LOGINFO ( ""the string I got was "" + Selected );
        }
    }

    //
    // C# snippet for UIPromptWindow
    uiview = new UIView();  // if you already have one, you can use it.
    UIPromptWindow prompt = new UIPromptWindow(uiview, ""myprompt"", true );
    SubscribeToEvent<UIPromptCompleteEvent>(prompt, PromptUpdate); 
    prompt.Show( ""WindowTitle"", ""Message in window"", ""preset value"", 0, 0, 0);

    // event handler for results
    void PromptUpdate(UIPromptCompleteEvent ev)
    {
            Log.Info (""Title = "" + ev.Title );
            Log.Info (""Reason = "" + ev.Reason );
            Log.Info (""Selected = "" + ev.Selected );
        if( ev.Reason == ""OK"" )
        {
             // do OK action 
                Log.Info (""the string I got was "" + ev.Selected );
        }
    }

    //
    // Javascript snippet for UIPromptWindow
    // you need a uiview in your program to use this
    var prompt = new Atomic.UIPromptWindow(uiview, ""myprompt"");
    prompt.show(  ""WindowTitle"", ""Message in window"", ""preset value"", 0, 0, 0);
    prompt.subscribeToEvent( prompt, ""UIPromptComplete"", function (ev) {
        Atomic.print ( ""Title = "" + ev.title);
        Atomic.print ( ""Reason = "" + ev.reason );
        Atomic.print ( ""Selected = "" + ev.selected );
        if( ev.reason == ""OK"" )
        {
            // do OK action 
            Atomic.print ( ""the string I got was "" + ev.selected );
        }
    });


    //
    // C++ snippet for UIFinderWindow
    UIFinderWindow  *finderPtr = new UIPromptWindow(context_, uiwidgetParent, ""myprompt"", true);
    SubscribeToEvent( finderPtr, E_UIFINDERCOMPLETE, ATOMIC_HANDLER(myClass, HandleFinder));
    
    finderPtr->FindFile(""Find a File"", ""<preset path>"" );  // find a filename
*OR*  
    finderPtr->FindPath(""Find a Folder"", ""<preset path>"" );  // find a folder
  
    // class event handler for results
    void myClass::HandleFinder(StringHash eventType, VariantMap& eventData)
    {
        String Title = eventData[""Title""].GetString();  // these are the 3 fields in the event
        String Reason = eventData[""Reason""].GetString();
        String Selected = eventData[""Selected""].GetString();
        ATOMIC_LOGINFO ( ""Title = "" + Title );
        ATOMIC_LOGINFO ( ""Reason = "" + Reason );
        ATOMIC_LOGINFO ( ""Selected = "" + Selected );
        if( Reason == ""OK"" ) // reasons are strings ""OK"" and ""CANCEL"", depending on which was pressed
        {
            // do OK action 
            ATOMIC_LOGINFO ( ""the file (or folder) I got was "" + Selected );
        }
    }

    //
    // C# UIFinderWindow snippet  
    UIFinderWindow finder = new UIFinderWindow(uiview, ""myfinder"", true );
    SubscribeToEvent<UIFinderCompleteEvent>(finder, FinderUpdate); 
        
    finder.FindFile (""Find a File"", ""<preset path>"", 0, 0, 0); // find a filename
*OR*
    finder.FindPath (""Find a Folder"", ""<preset path>"", 0, 0, 0); // find a folder

    void FinderUpdate(UIFinderCompleteEvent ev)
    {
        Log.Info (""Title = "" + ev.Title);
        Log.Info (""Reason = "" + ev.Reason);
        Log.Info (""Selected = "" + ev.Selected);
        if( ev.Reason == ""OK"" ) // reasons are strings ""OK"" and ""CANCEL"", depending on which was pressed
        {
            // do OK action 
                 Log.Info (""the file (or folder) I got was "" + ev.Selected);
        }
    }
 
    //
    // Javascript UIFinderWindow snippet  
    var finder = new Atomic.UIFinderWindow(uiview, ""myfinder"");
        
    finder.findFile(""Find a File"", ""<preset path>"", 0, 0, 0);
*OR*
    finder.findPath(""Find a Folder"", ""<preset path>"", 0, 0, 0);
        
    finder.subscribeToEvent(finder, ""UIFinderComplete"", function (ev) {
        Atomic.print ( ""Title = "" + ev.title);
        Atomic.print ( ""Reason = "" + ev.reason );
        Atomic.print ( ""Selected= "" + ev.selected );
        if( ev.eason == ""OK"" ) // reasons are strings ""OK"" and ""CANCEL"", depending on which was pressed
        {
            // do OK action 
            Atomic.print ( ""the file (or folder) I got was "" + ev.selected );
        }
    });",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1551,2017-06-08T23:25:09Z,2017-06-10T17:06:35Z,2017-06-18T15:16:06Z,CLOSED,False,1442,1,36,https://github.com/JimMarlowe,UIPromptWindow and UIFinderWindow Widgets ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551#issuecomment-307570495,"This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.","Nice usage snippets!  One note on subscribing to events in JS/TS, you don't need to use raw strings like ""UIFinderComplete"", there should be a Atomic.UIFinderCompleteEventType you can use instead.
Does the behavior of GetParentPath need addressing, or is it doing the ""right thing""?
On paths, the engine normalizes path internal storage to / , so all path operations should be working with that assumption, GetNativePath and GetWideNativePath are pretty much there for Windows, and only when interfacing with Windows API's that choke on /
I spun up a branch for some quick tweaks and will land from there, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1551,2017-06-08T23:25:09Z,2017-06-10T17:06:35Z,2017-06-18T15:16:06Z,CLOSED,False,1442,1,36,https://github.com/JimMarlowe,UIPromptWindow and UIFinderWindow Widgets ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551#issuecomment-307577888,"This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.","Thanks again, really good stuff, I think you are now the resident TurboBadger expert btw ‚õ∑
I opened #1557 with a couple tweaks, will land when green! üíö",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1551,2017-06-08T23:25:09Z,2017-06-10T17:06:35Z,2017-06-18T15:16:06Z,CLOSED,False,1442,1,36,https://github.com/JimMarlowe,UIPromptWindow and UIFinderWindow Widgets ,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551,https://github.com/JimMarlowe,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1551#issuecomment-307579435,"This PR does a couple of things...
The UISelectList is given access to the items in the list, and has added calls to be able to create, remove and populate the list items within the class (used in the UIFinderWindow).  The UIFieldEdit can now bring up the onscreen keyboard on mobile platforms to edit strings.
There are two new widgets, UIPromptWindow and UIFinderWindow, both can be used in C++, C# and JS/TS.  UIPromptWindow is an Atomic widget that can get a string from the user, the result is sent to an event handler. UIFinderWindow is an Atomic widget that can get a file or path from the user, the result is sent to an event handler.  The Finder has the ability to create a directory at the current path, and it uses a UIPromptWindow to get the name.  It can also bookmark directories that the user finds interesting, again using a UIPromptWindow to change the name if the preselected name is not wanted. These bookmarks are saved on device (in the AtomicGameEngine preferences directory) and restored when the Finder is used again.
The UIFinderWindow needs testing on Windows because of the slashes.","The GetParentPath() is doing the correct thing. The Finder is providing ""/"" as the top to give the user a warm-fuzzy about where they are, though admittedly only Linux peeps would be alarmed if they saw nothing as the path.  I tried both types of JS events, both worked, but I was out of snippet space üåé
An I'm no TB expert, I'm just annoyed with it enough to kick it, so I can get my job done üê§",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1553,2017-06-10T06:03:11Z,2017-06-10T23:06:41Z,2017-06-11T21:37:41Z,MERGED,True,66,51,6,https://github.com/MuffinManKen,2d project templates work,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,https://github.com/MuffinManKen,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,"Added/Improved comments
Made different language versions consistent","Added/Improved comments
Made different language versions consistent",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1553,2017-06-10T06:03:11Z,2017-06-10T23:06:41Z,2017-06-11T21:37:41Z,MERGED,True,66,51,6,https://github.com/MuffinManKen,2d project templates work,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553#issuecomment-307545312,"Added/Improved comments
Made different language versions consistent",Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1553,2017-06-10T06:03:11Z,2017-06-10T23:06:41Z,2017-06-11T21:37:41Z,MERGED,True,66,51,6,https://github.com/MuffinManKen,2d project templates work,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,https://github.com/rokups,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553#issuecomment-307558625,"Added/Improved comments
Made different language versions consistent",Replace tabs with 4 spaces.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1553,2017-06-10T06:03:11Z,2017-06-10T23:06:41Z,2017-06-11T21:37:41Z,MERGED,True,66,51,6,https://github.com/MuffinManKen,2d project templates work,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553#issuecomment-307567370,"Added/Improved comments
Made different language versions consistent",@MuffinManKen Thanks! I will look over this soon üëç,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1553,2017-06-10T06:03:11Z,2017-06-10T23:06:41Z,2017-06-11T21:37:41Z,MERGED,True,66,51,6,https://github.com/MuffinManKen,2d project templates work,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1553#issuecomment-307595331,"Added/Improved comments
Made different language versions consistent","""tabs -> spaces, even though it is so wrong""

Hah!  I can see both sides, just not mixed... and we kind of inherited the space convention :)
Very nice, and an improvement to first contact with the engine üëç, thanks, landing!  ( Oh, if you want to follow up with a PR adding yourself to AUTHORS.md, please do )",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1554,2017-06-10T11:08:14Z,2017-06-10T22:33:24Z,2017-06-29T17:31:04Z,CLOSED,False,87,25,9,https://github.com/rokups,Building engine as shared lib,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554,"This PR adds ATOMIC_DYNAMIC_RUNTIME which enables building engine as shared library. Shared library builds also link to msvc runtime dynamically. By default flag is not enabled and static build is produced just like now.
Also added few warning cleanups and moved some build flags from global scope into Atomic project so that they are pulled in by downstream projects when linking to Atomic. These flags are -std=gnu++11 and msvc runtime flags.
Tested and works on Linux and Windows. I didnt touch mac part at all (except for -std=gnu++11) since i can not test it nor i know what should be done. Tips would be appreciated. I myself am looking at moving compiler and linker flags from AtomicMac.cmake to Atomic project build script so they can be automatically inherited by downstream projects as well, but that is when we know that current changes didnt break anything-mac.","This PR adds ATOMIC_DYNAMIC_RUNTIME which enables building engine as shared library. Shared library builds also link to msvc runtime dynamically. By default flag is not enabled and static build is produced just like now.
Also added few warning cleanups and moved some build flags from global scope into Atomic project so that they are pulled in by downstream projects when linking to Atomic. These flags are -std=gnu++11 and msvc runtime flags.
Tested and works on Linux and Windows. I didnt touch mac part at all (except for -std=gnu++11) since i can not test it nor i know what should be done. Tips would be appreciated. I myself am looking at moving compiler and linker flags from AtomicMac.cmake to Atomic project build script so they can be automatically inherited by downstream projects as well, but that is when we know that current changes didnt break anything-mac.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1554,2017-06-10T11:08:14Z,2017-06-10T22:33:24Z,2017-06-29T17:31:04Z,CLOSED,False,87,25,9,https://github.com/rokups,Building engine as shared lib,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554#issuecomment-307567012,"This PR adds ATOMIC_DYNAMIC_RUNTIME which enables building engine as shared library. Shared library builds also link to msvc runtime dynamically. By default flag is not enabled and static build is produced just like now.
Also added few warning cleanups and moved some build flags from global scope into Atomic project so that they are pulled in by downstream projects when linking to Atomic. These flags are -std=gnu++11 and msvc runtime flags.
Tested and works on Linux and Windows. I didnt touch mac part at all (except for -std=gnu++11) since i can not test it nor i know what should be done. Tips would be appreciated. I myself am looking at moving compiler and linker flags from AtomicMac.cmake to Atomic project build script so they can be automatically inherited by downstream projects as well, but that is when we know that current changes didnt break anything-mac.","Excellent, I'll put this in the queue for today and have a look on the mac side too :) üê´üå¥‚òÄÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1554,2017-06-10T11:08:14Z,2017-06-10T22:33:24Z,2017-06-29T17:31:04Z,CLOSED,False,87,25,9,https://github.com/rokups,Building engine as shared lib,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1554#issuecomment-307594048,"This PR adds ATOMIC_DYNAMIC_RUNTIME which enables building engine as shared library. Shared library builds also link to msvc runtime dynamically. By default flag is not enabled and static build is produced just like now.
Also added few warning cleanups and moved some build flags from global scope into Atomic project so that they are pulled in by downstream projects when linking to Atomic. These flags are -std=gnu++11 and msvc runtime flags.
Tested and works on Linux and Windows. I didnt touch mac part at all (except for -std=gnu++11) since i can not test it nor i know what should be done. Tips would be appreciated. I myself am looking at moving compiler and linker flags from AtomicMac.cmake to Atomic project build script so they can be automatically inherited by downstream projects as well, but that is when we know that current changes didnt break anything-mac.","AWESOME Work!  It is really cool to be able to build an Atomic shared library, I went ahead and got the C++ FeatureExample linking with a shared library.  In order to get a shared Atomic.dll consumed in AtomicNET, the Editor, etc will require some additional work, though in those cases probably just a static link anyway... I also tested the STATIC build on macOS and Windows to ensure it was operational.
I'll be landing once green over in: #1559 üíö",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1557,2017-06-10T17:04:07Z,2017-06-10T17:33:31Z,2017-06-10T17:33:33Z,MERGED,True,1438,1,36,https://github.com/JoshEngebretson,UIPromptWindow and UIFinderWindow Widgets (Tweaks),3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1557,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1557,A continuation of #1551 with a couple minor tweaks,A continuation of #1551 with a couple minor tweaks,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1558,2017-06-10T19:12:28Z,2017-06-10T19:52:43Z,2017-06-10T19:52:46Z,MERGED,True,32,19,5,https://github.com/JoshEngebretson,[C#] Better handling of inherited interface methods,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1558,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1558,Closes #1556,Closes #1556,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1559,2017-06-10T22:28:40Z,2017-06-10T22:56:04Z,2017-06-10T22:56:10Z,MERGED,True,168,107,82,https://github.com/JoshEngebretson,[C++] Atomic shared library support,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1559,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1559,"This PR is a continuation of #1554 with some fixed to get FeatureExamples linking:

, details there.","This PR is a continuation of #1554 with some fixed to get FeatureExamples linking:

, details there.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1560,2017-06-10T23:12:32Z,2017-06-10T23:33:10Z,2017-06-10T23:33:12Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Updating Examples submodule commit,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1560,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1560,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1561,2017-06-11T15:09:35Z,2017-06-11T15:34:39Z,2017-06-18T15:16:04Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,fix bug setting TB DefaultFont size,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1561,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1561,"This PR fixes a bug that has been there for awhile. There was a hardcoded 12 where the size argument should have been. Where this becomes important, is when you change the operating DPI (I lie to the TB system, since it lies right back) this bug hardcodes 12 (pixels) into all the default TB widgets as their size, and changing your dpi either way, results in peculiar (in a bad way) UI.","This PR fixes a bug that has been there for awhile. There was a hardcoded 12 where the size argument should have been. Where this becomes important, is when you change the operating DPI (I lie to the TB system, since it lies right back) this bug hardcodes 12 (pixels) into all the default TB widgets as their size, and changing your dpi either way, results in peculiar (in a bad way) UI.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1561,2017-06-11T15:09:35Z,2017-06-11T15:34:39Z,2017-06-18T15:16:04Z,MERGED,True,1,1,1,https://github.com/JimMarlowe,fix bug setting TB DefaultFont size,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1561,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1561#issuecomment-307637067,"This PR fixes a bug that has been there for awhile. There was a hardcoded 12 where the size argument should have been. Where this becomes important, is when you change the operating DPI (I lie to the TB system, since it lies right back) this bug hardcodes 12 (pixels) into all the default TB widgets as their size, and changing your dpi either way, results in peculiar (in a bad way) UI.","... aaaaand another great catch ‚öæÔ∏è , thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1562,2017-06-11T21:41:38Z,2017-06-12T23:47:12Z,2017-07-21T00:30:32Z,MERGED,True,2,0,1,https://github.com/MuffinManKen,Adding myself to the contributors list,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562,https://github.com/MuffinManKen,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1562,2017-06-11T21:41:38Z,2017-06-12T23:47:12Z,2017-07-21T00:30:32Z,MERGED,True,2,0,1,https://github.com/MuffinManKen,Adding myself to the contributors list,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562#issuecomment-307658905,,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1562,2017-06-11T21:41:38Z,2017-06-12T23:47:12Z,2017-07-21T00:30:32Z,MERGED,True,2,0,1,https://github.com/MuffinManKen,Adding myself to the contributors list,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1562#issuecomment-307966206,,"Great, welcome aboard! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1564,2017-06-12T01:28:02Z,2017-06-12T02:16:53Z,2017-06-15T20:38:42Z,MERGED,True,4589,4,18,https://github.com/JoshEngebretson,Text3D port to Graphics module,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1564,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1564,"This PR adds Text3D to the Graphics submodule with support for ttf, bitmap, and sdf (Signed Distance Field) fonts.  It also includes C++/C# FeatureExample ports.

Closes #260","This PR adds Text3D to the Graphics submodule with support for ttf, bitmap, and sdf (Signed Distance Field) fonts.  It also includes C++/C# FeatureExample ports.

Closes #260",True,{'HOORAY': ['https://github.com/Type1J']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1564,2017-06-12T01:28:02Z,2017-06-12T02:16:53Z,2017-06-15T20:38:42Z,MERGED,True,4589,4,18,https://github.com/JoshEngebretson,Text3D port to Graphics module,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1564,https://github.com/Type1J,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1564#issuecomment-308859203,"This PR adds Text3D to the Graphics submodule with support for ttf, bitmap, and sdf (Signed Distance Field) fonts.  It also includes C++/C# FeatureExample ports.

Closes #260",Awesome!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1567,2017-06-14T18:10:54Z,2017-06-16T17:27:33Z,2017-06-29T17:31:00Z,CLOSED,False,37044,29402,81,https://github.com/rokups,imgui-based SystemUI,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567,Ready for testing. Example is at: https://github.com/rokups/AtomicExamples/tree/feature/imgui,Ready for testing. Example is at: https://github.com/rokups/AtomicExamples/tree/feature/imgui,True,"{'HOORAY': ['https://github.com/JoshEngebretson'], 'THUMBS_UP': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1567,2017-06-14T18:10:54Z,2017-06-16T17:27:33Z,2017-06-29T17:31:00Z,CLOSED,False,37044,29402,81,https://github.com/rokups,imgui-based SystemUI,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567#issuecomment-308581054,Ready for testing. Example is at: https://github.com/rokups/AtomicExamples/tree/feature/imgui,"This is really awesome :)  I think removing the old SystemUI system in favor of imgui is a good move, as we should have widget parity.  You also did the work of replacing DebugHud and Console, kudos üëç
One note just from a quick glance, adding imgui's STB libs makes at least 3 copies of some of these headers.  What do you think about using https://github.com/AtomicGameEngine/AtomicGameEngine/tree/master/Source/ThirdParty/STB with imgui, adding any that are missing?
Looking forward to checking out this branch! üöÄ üê´ üöÄ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1567,2017-06-14T18:10:54Z,2017-06-16T17:27:33Z,2017-06-29T17:31:00Z,CLOSED,False,37044,29402,81,https://github.com/rokups,imgui-based SystemUI,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567#issuecomment-309076477,Ready for testing. Example is at: https://github.com/rokups/AtomicExamples/tree/feature/imgui,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1567,2017-06-14T18:10:54Z,2017-06-16T17:27:33Z,2017-06-29T17:31:00Z,CLOSED,False,37044,29402,81,https://github.com/rokups,imgui-based SystemUI,7,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1567#issuecomment-309085920,Ready for testing. Example is at: https://github.com/rokups/AtomicExamples/tree/feature/imgui,"Thanks! This is a huge level up for tooling! I gave the PR a really close look and have to say: FANTASTIC FREAKING WORK! üëç üëç üëç
The STB updates alone are awesome sauce, thanks for updating those to new versions and consolidating!
I'll land from here which just has a couple minor tweaks ‚úàÔ∏è : #1568",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1568,2017-06-16T17:23:37Z,2017-06-16T17:50:56Z,2017-06-24T00:47:00Z,MERGED,True,37058,29405,83,https://github.com/JoshEngebretson,imgui immediate mode UI system for system and tooling use cases,9,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1568,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1568,"... a continuation of #1567 with some minor PR tweaks
imgui repo: https://github.com/ocornut/imgui","... a continuation of #1567 with some minor PR tweaks
imgui repo: https://github.com/ocornut/imgui",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1570,2017-06-18T15:28:43Z,2017-06-19T23:44:08Z,2017-06-19T23:44:08Z,MERGED,True,331,4,6,https://github.com/JimMarlowe,add UIPulldownMenu widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,"This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!","This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1570,2017-06-18T15:28:43Z,2017-06-19T23:44:08Z,2017-06-19T23:44:08Z,MERGED,True,331,4,6,https://github.com/JimMarlowe,add UIPulldownMenu widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570#issuecomment-309481175,"This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!","This is all leading up to a TB periodic table of widgets sample program, that shows what widgets you can use, and how to get at them from your program in JS/C#/C++. I keep pecking üê§  away at it, but TB usability leaves a lot to be desired. I am often amazed at what you've gone thru with the editor, hence, this widget.",True,"{'HOORAY': ['https://github.com/JoshEngebretson'], 'THUMBS_UP': ['https://github.com/JoshEngebretson']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1570,2017-06-18T15:28:43Z,2017-06-19T23:44:08Z,2017-06-19T23:44:08Z,MERGED,True,331,4,6,https://github.com/JimMarlowe,add UIPulldownMenu widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570#issuecomment-309500331,"This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!","I look forward to the UI periodic table :) ""I am often amazed at what you've gone thru with the editor"", that is exactly right... part of the evolution of Atomic, this would have made things better on the frontend :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1570,2017-06-18T15:28:43Z,2017-06-19T23:44:08Z,2017-06-19T23:44:08Z,MERGED,True,331,4,6,https://github.com/JimMarlowe,add UIPulldownMenu widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570#issuecomment-309597363,"This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!",Changed and tested (it's good).,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1570,2017-06-18T15:28:43Z,2017-06-19T23:44:08Z,2017-06-19T23:44:08Z,MERGED,True,331,4,6,https://github.com/JimMarlowe,add UIPulldownMenu widget,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1570#issuecomment-309603577,"This PR adds a UIWidget for a simplified pulldown menu, that one doesn't has to be a rocket scientist üöÄ  in order to create and use. With this, you can make a menubar enabled program with ease.
It also exposes two embedded functions for Typescript usage, onChanged() and onEvent().  Others (@Nyt0x, un PR'd) have defined onChanged as onChanged: (data:any) => void;, but I don't see anywhere actually filling in the event structure, so I left it out.
UIPulldownMenu
This is a simplified Pulldown menu widget for user applications. It can be programmed by a .ui.txt layout file, or thru api, with a UISelectItemSource. It is designed to use the EVENT_TYPE_CHANGED event to inform when a menu entry has been selected. This event can be utilized in Javascript/Typescript code with the onChanged() function, and with C#,C++,  subscribe to the WidgetEvent, and check for EVENT_TYPE_CHANGED event type. You don't get the selected entry directly (for many reasons), so you have to ask the UIPulldownMenu which entry(ID) caused the CHANGED event. And, remember to fill out the id fields on the menu entries, or there won't be any ids to retrieve.
JJ/TS snippet
// in JS/TS
var filemenu = layout.getWidget(""FileMenu"");
filemenu.onChanged = function () 
{
    Atomic.print ( ""FileMenu selected = "" + filemenu.getSelectedId() ); 
    if ( filemenu.getSelectedId() === ""FileExit"" ) Atomic.engine.exit();
};


C# snippet
// and with C#
AtomicEngine.UIPulldownMenu filemenu = (AtomicEngine.UIPulldownMenu)layout.GetWidget(""FileMenu"");
filemenu.SubscribeToEvent<WidgetEvent>(filemenu, ev =>
{
    if (ev.Type == UI_EVENT_TYPE.UI_EVENT_TYPE_CHANGED)
    {
        string myitem = filemenu.GetSelectedId();
        Log.Info(""FileMenu selected = "" + myitem);
        if ( myitem == ""FileExit"" ) GetSubsystem<Engine>().Exit();
    }
});

sample_layout.ui.txt file

# UIPulldownMenu demo layout file
TBLayout: axis: y, size: available, distribution: available
	TBLayout: axis: x, id: Menubar, margin: 5, size: preferred, distribution: gravity, distribution-position: left right, skin: TBWindow
		TBPulldownMenu: text: ""File"", skin: 0, id: ""FileMenu""
			items:
				item: text: ""Open..."", id: FileOpen
				item: text: ""Save..."", id: FileSave
				item: text: ""-""
				item: text: ""Exit"", id: FileExit
		TBPulldownMenu: text: ""Edit"", skin: 0, id: ""EditMenu""
			items:
				item: text: ""Cut"", id: EditCut
				item: text: ""Copy"", id: EditCopy
				item: text: ""Paste"", id: EditPaste
				item: text: ""Delete"", id: EditDelete
				item: text: ""-""
				item: text: ""Select All"", id: EditAll
		TBPulldownMenu: text: ""View"", skin: 0, id: ""ViewMenu""
			items:
				item: text: ""Scale"", id: ViewScale
				item: text: ""Rotate"", id: ViewRotate
				item: text: ""Translate"", id: ViewTranslate
		TBPulldownMenu: text: ""Help"", skin: 0, id: ""HelpMenu""
			items:
				item: text: ""Help..."", id: HelpHelp
				item: text: ""About this program..."", id: HelpAbout
	TBWidget
	TBWidget
	TBWidget
	TBWidget
	TBButton: text: Press me!","Great, thanks! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1571,2017-06-18T17:45:40Z,2017-06-19T14:24:28Z,2017-06-19T14:39:35Z,MERGED,True,37,0,2,https://github.com/Alan-FGR,added 2d raycasting,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571,https://github.com/Alan-FGR,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1571,2017-06-18T17:45:40Z,2017-06-19T14:24:28Z,2017-06-19T14:39:35Z,MERGED,True,37,0,2,https://github.com/Alan-FGR,added 2d raycasting,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571,https://github.com/Alan-FGR,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571#issuecomment-309292030,,"Good Jesus, I don't know how this ended up here but apparently it worked... I was trying to use git request-pull but apparently that doesn't use the same system GitHub uses, it was very confusing :P
#1197",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1571,2017-06-18T17:45:40Z,2017-06-19T14:24:28Z,2017-06-19T14:39:35Z,MERGED,True,37,0,2,https://github.com/Alan-FGR,added 2d raycasting,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571,https://github.com/Alan-FGR,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1571#issuecomment-309292070,,I need to find a decent git GUI :P,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1574,2017-06-20T17:55:57Z,2017-06-20T18:50:01Z,2017-06-20T18:50:03Z,MERGED,True,22,3,2,https://github.com/JoshEngebretson,"[C#] Static methods now generates static properties, with error checking",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1574,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1574,Closes #1573,Closes #1573,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1575,2017-06-20T18:53:14Z,2017-06-20T19:16:19Z,2017-07-13T15:16:37Z,MERGED,True,4,1,1,https://github.com/JimMarlowe,Modern and legacy Linux mono detection for #1544,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1575,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1575,This should be sufficient rule to detect the existence of mono on (nearly) any type of linux system.,This should be sufficient rule to detect the existence of mono on (nearly) any type of linux system.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1575,2017-06-20T18:53:14Z,2017-06-20T19:16:19Z,2017-07-13T15:16:37Z,MERGED,True,4,1,1,https://github.com/JimMarlowe,Modern and legacy Linux mono detection for #1544,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1575,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1575#issuecomment-309859912,This should be sufficient rule to detect the existence of mono on (nearly) any type of linux system.,"Shazam ‚ö°Ô∏è ! Thanks for addressing this issue, closes #1544",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1576,2017-06-23T16:11:59Z,2017-06-23T17:23:24Z,2017-06-24T14:12:17Z,MERGED,True,1,1,1,https://github.com/Alan-FGR,just a quick suggestion :P,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576,https://github.com/Alan-FGR,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1576,2017-06-23T16:11:59Z,2017-06-23T17:23:24Z,2017-06-24T14:12:17Z,MERGED,True,1,1,1,https://github.com/Alan-FGR,just a quick suggestion :P,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576#issuecomment-310715894,,"That's a nice improvement on the help wanted link, thanks üëç
I'd rather not have the fork link, don't really need a convenience link from there for that action, and would rather folks go to site as clicking doesn't open a new tab.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1576,2017-06-23T16:11:59Z,2017-06-23T17:23:24Z,2017-06-24T14:12:17Z,MERGED,True,1,1,1,https://github.com/Alan-FGR,just a quick suggestion :P,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576,https://github.com/Alan-FGR,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576#issuecomment-310716964,,"lol, this is a huge PR üòÜ",True,{'HOORAY': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1576,2017-06-23T16:11:59Z,2017-06-23T17:23:24Z,2017-06-24T14:12:17Z,MERGED,True,1,1,1,https://github.com/Alan-FGR,just a quick suggestion :P,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576,https://github.com/Type1J,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1576#issuecomment-310840857,,Contributions are contributions. The small ones add up.,True,{'THUMBS_UP': ['https://github.com/Alan-FGR']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1577,2017-06-25T16:59:39Z,2017-06-27T12:26:36Z,2017-07-13T15:16:34Z,CLOSED,False,355,4,13,https://github.com/JimMarlowe,Turbobadger Widget updates,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577,"This PR adds UIRadioButton and UIScrollbar to the Atomic widget family  üë©‚Äçüëß‚Äçüë¶
Added API for setting a step size to UIInlineSelect, instead of it being hardcoded to 1. It can be changed in the layout file too.
Added API for getting the UISlider min and max values.
Added function in layout file reader to be able to assign ""squeezable"" attribute on UIButton and UITextFields.","This PR adds UIRadioButton and UIScrollbar to the Atomic widget family  üë©‚Äçüëß‚Äçüë¶
Added API for setting a step size to UIInlineSelect, instead of it being hardcoded to 1. It can be changed in the layout file too.
Added API for getting the UISlider min and max values.
Added function in layout file reader to be able to assign ""squeezable"" attribute on UIButton and UITextFields.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1577,2017-06-25T16:59:39Z,2017-06-27T12:26:36Z,2017-07-13T15:16:34Z,CLOSED,False,355,4,13,https://github.com/JimMarlowe,Turbobadger Widget updates,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577#issuecomment-310951663,"This PR adds UIRadioButton and UIScrollbar to the Atomic widget family  üë©‚Äçüëß‚Äçüë¶
Added API for setting a step size to UIInlineSelect, instead of it being hardcoded to 1. It can be changed in the layout file too.
Added API for getting the UISlider min and max values.
Added function in layout file reader to be able to assign ""squeezable"" attribute on UIButton and UITextFields.","Thanks for the PR, will have a look-see soon üê´ üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1577,2017-06-25T16:59:39Z,2017-06-27T12:26:36Z,2017-07-13T15:16:34Z,CLOSED,False,355,4,13,https://github.com/JimMarlowe,Turbobadger Widget updates,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1577#issuecomment-311342720,"This PR adds UIRadioButton and UIScrollbar to the Atomic widget family  üë©‚Äçüëß‚Äçüë¶
Added API for setting a step size to UIInlineSelect, instead of it being hardcoded to 1. It can be changed in the layout file too.
Added API for getting the UISlider min and max values.
Added function in layout file reader to be able to assign ""squeezable"" attribute on UIButton and UITextFields.","Great work, I went ahead and rebased to master (landed updates to UIView, etc yesterday, so there were conflicts created).  I'll land here when green: #1584
Thanks! üç∞ üê´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1578,2017-06-26T12:35:17Z,2017-06-29T16:01:50Z,2017-11-22T11:43:10Z,CLOSED,False,725,18,16,https://github.com/mattbenic,IPC server and a turbobadger fix,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1578,2017-06-26T12:35:17Z,2017-06-29T16:01:50Z,2017-11-22T11:43:10Z,CLOSED,False,725,18,16,https://github.com/mattbenic,IPC server and a turbobadger fix,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578#issuecomment-311074136,,"Awesome, thanks for the PR!  Gave it a quick glance and looks solid, will review closer once passing CI.  Did you know you can get build failure logs now by clicking Details below, if not, you do now :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1578,2017-06-26T12:35:17Z,2017-06-29T16:01:50Z,2017-11-22T11:43:10Z,CLOSED,False,725,18,16,https://github.com/mattbenic,IPC server and a turbobadger fix,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578#issuecomment-311377799,,"@mattbenic If you haven't started in on this, I can look at it later today... needs to be rebased to master for new UIView updates, and I have full compliment of platforms here",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1578,2017-06-26T12:35:17Z,2017-06-29T16:01:50Z,2017-11-22T11:43:10Z,CLOSED,False,725,18,16,https://github.com/mattbenic,IPC server and a turbobadger fix,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1578#issuecomment-311734144,,"Oh... and the AtomicToolCoreNative.dll doesn't need to happen for this PR, I believe it can be refactored pretty easily to avoid the dependency.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1580,2017-06-26T15:42:11Z,2017-06-27T16:06:06Z,2017-06-28T07:59:27Z,MERGED,True,252,17,8,https://github.com/rokups,Common subsystem pointers in Context,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,"This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.","This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1580,2017-06-26T15:42:11Z,2017-06-27T16:06:06Z,2017-06-28T07:59:27Z,MERGED,True,252,17,8,https://github.com/rokups,Common subsystem pointers in Context,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580#issuecomment-311108513,"This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.","Excellent, and will automatically be available to C#, JavaScript/TypeScript! üéÅ
I'll have a closer look later today, thanks! üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1580,2017-06-26T15:42:11Z,2017-06-27T16:06:06Z,2017-06-28T07:59:27Z,MERGED,True,252,17,8,https://github.com/rokups,Common subsystem pointers in Context,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,https://github.com/rokups,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580#issuecomment-311376769,"This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.","@JoshEngebretson need your input. I added seemingly ordinary Engine* GetEngine() { return engine_; } but generated bindings for duktape are unhappy:
static int jsb_class_Context_GetEngine(duk_context* ctx)
{
duk_push_this(ctx);
Context* native = js_to_class_instance<Context>(ctx, -1, 0);
const Object* object = native->GetEngine();
js_push_class_object_instance(ctx, object);
return 1;
}

error: cannot convert ‚ÄòAtomic::Engine*‚Äô to ‚Äòconst Atomic::Object*‚Äô in initialization
const Object* object = native->GetEngine();

Adding includes for subsystems to Context.h solves the issue. Any objection for that? Is there maybe a better way?
P.S. Yes, getters should be const, and they will! ;)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1580,2017-06-26T15:42:11Z,2017-06-27T16:06:06Z,2017-06-28T07:59:27Z,MERGED,True,252,17,8,https://github.com/rokups,Common subsystem pointers in Context,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580#issuecomment-311378672,"This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.","Add the includes to:
Script/Packages/Atomic/Core.json
Here's an example:
https://github.com/AtomicGameEngine/AtomicGameEngine/blob/master/Script/Packages/Atomic/Physics.json#L5",True,{'THUMBS_UP': ['https://github.com/rokups']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1580,2017-06-26T15:42:11Z,2017-06-27T16:06:06Z,2017-06-28T07:59:27Z,MERGED,True,252,17,8,https://github.com/rokups,Common subsystem pointers in Context,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1580#issuecomment-311405799,"This PR adds most commonly used subsystem pointers to Context so we can avoid HashMap lookup when we need to get a subsystem. Lookup is cheap, but it all adds up.
In order to get hold of SystemUI pointer on engine initialization i had to clean up that part. Now Engine::Initialize() creates SystemUI subsystem and registers it. SystemUI constructor creates and registers DebugHud and Console subsystems.","Awesome, level up! üåü
... and thanks for the tweaks, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1582,2017-06-26T23:47:50Z,2017-06-27T00:29:35Z,2017-06-27T03:48:48Z,MERGED,True,1183,216,14,https://github.com/JoshEngebretson,3D UI Feature,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1582,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1582,"This pull request adds new 3D UI support as well as better UIView management for multiple and overlapping views.  The Atomic Example repository submodule commit is also updated with the submodule commit of a new C++ 3D GUI feature examples.  JavaScript example to follow...
Edit: Also one follow up issue: #1581","This pull request adds new 3D UI support as well as better UIView management for multiple and overlapping views.  The Atomic Example repository submodule commit is also updated with the submodule commit of a new C++ 3D GUI feature examples.  JavaScript example to follow...
Edit: Also one follow up issue: #1581",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1583,2017-06-27T03:22:40Z,2017-06-27T03:48:31Z,2017-06-27T03:48:35Z,MERGED,True,12,3,2,https://github.com/JoshEngebretson,Update for GetParentRoot which gets the UIView root by default,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1583,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1583,Fixes broken popups and other things that were incorrectly being parented to global root widget,Fixes broken popups and other things that were incorrectly being parented to global root widget,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1584,2017-06-27T12:24:36Z,2017-06-27T12:50:53Z,2017-06-27T12:50:55Z,MERGED,True,361,10,13,https://github.com/JoshEngebretson,TurboBadger Widget Updates (rebased),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1584,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1584,"This is PR #1577, rebased to master","This is PR #1577, rebased to master",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1586,2017-06-29T17:58:13Z,2017-07-05T18:49:10Z,2017-07-09T13:35:33Z,CLOSED,False,27783,12343,719,https://github.com/rokups,Urho and ThirdParty merge,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586,"This is a merge with upstream commit 0bdb20f
This merge is special. Since we had no common commits with Urho3D merges were done manually. This changes now. git 2.1.0 introduced feature that allows us to fake parents of commits. We merged with upstream last time at commit 404afff. Commit message says we merged with upstream commit 129205a9b1fd94573c81feba76f897990990e8ec and this commit does not exist in atomic repo. Using git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec i faked parent of 404afff to point to 129205a9b1fd94573c81feba76f897990990e8ec. Now git has a reference point for merges.
How to merge from upstream (after this merges):

Configure git repository: git config merge.renameLimit 1000000. This sets rename detection limit high as atomic repository exceeds default limit. Do it once per repository, new checked out repositories need that set manually. If you forget it - no big deal as you will get error reminding of it.
Add new git remote pointing to Urho3D repository, lets call it upstream.
Fetch upstream/master.
Check out any atomic branch. ‚ö†Ô∏è Do not check out Urho3D branches ‚ö†Ô∏è
Merge from upstream/master, git merge --squash upstream/master.

This will merge changes as usual. Only new changes since last common commit will be merged. You will have to solve some conflicts in case same code was modified in atomic and upstream. Git figures out renames automatically as well, you do not have to care about it. This even removes need of // ATOMIC BEGIN|END comments as atomic changes are preserved and diffs from upstream are replayed on atomic code.
If you wish to try this method on your own do this:

Check out a new branch.
Run git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec, it inserts fake parent for previous sync with upstream.
Follow steps in the list above.","This is a merge with upstream commit 0bdb20f
This merge is special. Since we had no common commits with Urho3D merges were done manually. This changes now. git 2.1.0 introduced feature that allows us to fake parents of commits. We merged with upstream last time at commit 404afff. Commit message says we merged with upstream commit 129205a9b1fd94573c81feba76f897990990e8ec and this commit does not exist in atomic repo. Using git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec i faked parent of 404afff to point to 129205a9b1fd94573c81feba76f897990990e8ec. Now git has a reference point for merges.
How to merge from upstream (after this merges):

Configure git repository: git config merge.renameLimit 1000000. This sets rename detection limit high as atomic repository exceeds default limit. Do it once per repository, new checked out repositories need that set manually. If you forget it - no big deal as you will get error reminding of it.
Add new git remote pointing to Urho3D repository, lets call it upstream.
Fetch upstream/master.
Check out any atomic branch. ‚ö†Ô∏è Do not check out Urho3D branches ‚ö†Ô∏è
Merge from upstream/master, git merge --squash upstream/master.

This will merge changes as usual. Only new changes since last common commit will be merged. You will have to solve some conflicts in case same code was modified in atomic and upstream. Git figures out renames automatically as well, you do not have to care about it. This even removes need of // ATOMIC BEGIN|END comments as atomic changes are preserved and diffs from upstream are replayed on atomic code.
If you wish to try this method on your own do this:

Check out a new branch.
Run git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec, it inserts fake parent for previous sync with upstream.
Follow steps in the list above.",True,{'THUMBS_UP': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1586,2017-06-29T17:58:13Z,2017-07-05T18:49:10Z,2017-07-09T13:35:33Z,CLOSED,False,27783,12343,719,https://github.com/rokups,Urho and ThirdParty merge,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586#issuecomment-312089691,"This is a merge with upstream commit 0bdb20f
This merge is special. Since we had no common commits with Urho3D merges were done manually. This changes now. git 2.1.0 introduced feature that allows us to fake parents of commits. We merged with upstream last time at commit 404afff. Commit message says we merged with upstream commit 129205a9b1fd94573c81feba76f897990990e8ec and this commit does not exist in atomic repo. Using git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec i faked parent of 404afff to point to 129205a9b1fd94573c81feba76f897990990e8ec. Now git has a reference point for merges.
How to merge from upstream (after this merges):

Configure git repository: git config merge.renameLimit 1000000. This sets rename detection limit high as atomic repository exceeds default limit. Do it once per repository, new checked out repositories need that set manually. If you forget it - no big deal as you will get error reminding of it.
Add new git remote pointing to Urho3D repository, lets call it upstream.
Fetch upstream/master.
Check out any atomic branch. ‚ö†Ô∏è Do not check out Urho3D branches ‚ö†Ô∏è
Merge from upstream/master, git merge --squash upstream/master.

This will merge changes as usual. Only new changes since last common commit will be merged. You will have to solve some conflicts in case same code was modified in atomic and upstream. Git figures out renames automatically as well, you do not have to care about it. This even removes need of // ATOMIC BEGIN|END comments as atomic changes are preserved and diffs from upstream are replayed on atomic code.
If you wish to try this method on your own do this:

Check out a new branch.
Run git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec, it inserts fake parent for previous sync with upstream.
Follow steps in the list above.","@rokups  That is some mighty fine spelunking ‚õè , thanks for also documenting the process, very üê´!
I'll have a closer look (especially at the git-fu), won't be able to land on master until after holiday weekend, and can do testing.  This might also be a good opportunity to flip the D3D11 renderer switch to default position...
I did scroll through, nice updates/features, great work!!!  Also, thanks to the Urho3D Project of course!!! üöÄ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1586,2017-06-29T17:58:13Z,2017-07-05T18:49:10Z,2017-07-09T13:35:33Z,CLOSED,False,27783,12343,719,https://github.com/rokups,Urho and ThirdParty merge,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586,https://github.com/rokups,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586#issuecomment-312902045,"This is a merge with upstream commit 0bdb20f
This merge is special. Since we had no common commits with Urho3D merges were done manually. This changes now. git 2.1.0 introduced feature that allows us to fake parents of commits. We merged with upstream last time at commit 404afff. Commit message says we merged with upstream commit 129205a9b1fd94573c81feba76f897990990e8ec and this commit does not exist in atomic repo. Using git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec i faked parent of 404afff to point to 129205a9b1fd94573c81feba76f897990990e8ec. Now git has a reference point for merges.
How to merge from upstream (after this merges):

Configure git repository: git config merge.renameLimit 1000000. This sets rename detection limit high as atomic repository exceeds default limit. Do it once per repository, new checked out repositories need that set manually. If you forget it - no big deal as you will get error reminding of it.
Add new git remote pointing to Urho3D repository, lets call it upstream.
Fetch upstream/master.
Check out any atomic branch. ‚ö†Ô∏è Do not check out Urho3D branches ‚ö†Ô∏è
Merge from upstream/master, git merge --squash upstream/master.

This will merge changes as usual. Only new changes since last common commit will be merged. You will have to solve some conflicts in case same code was modified in atomic and upstream. Git figures out renames automatically as well, you do not have to care about it. This even removes need of // ATOMIC BEGIN|END comments as atomic changes are preserved and diffs from upstream are replayed on atomic code.
If you wish to try this method on your own do this:

Check out a new branch.
Run git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec, it inserts fake parent for previous sync with upstream.
Follow steps in the list above.","Merged few new commits and learned something.
Before each merge with upstream we have to add new graft point: git replace --graft atomic_last_merge_commit_id urho3d_last_merged_commit_id. Then do the usual - merge with urho3d/master branch which is fetched into atomic repo.
As you can see last commit is 604d153 and commit message indicates changes are from 5475c48 urho3d commit. On next merge you do git replace --graft 604d15326870598f71154ed546b73ccfc190ab19 5475c482989eb60b7ef92d7c2ae80ec78eba7fc2 and then git merge --squash urho3d/master. That is all there is to it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1586,2017-06-29T17:58:13Z,2017-07-05T18:49:10Z,2017-07-09T13:35:33Z,CLOSED,False,27783,12343,719,https://github.com/rokups,Urho and ThirdParty merge,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1586#issuecomment-313192710,"This is a merge with upstream commit 0bdb20f
This merge is special. Since we had no common commits with Urho3D merges were done manually. This changes now. git 2.1.0 introduced feature that allows us to fake parents of commits. We merged with upstream last time at commit 404afff. Commit message says we merged with upstream commit 129205a9b1fd94573c81feba76f897990990e8ec and this commit does not exist in atomic repo. Using git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec i faked parent of 404afff to point to 129205a9b1fd94573c81feba76f897990990e8ec. Now git has a reference point for merges.
How to merge from upstream (after this merges):

Configure git repository: git config merge.renameLimit 1000000. This sets rename detection limit high as atomic repository exceeds default limit. Do it once per repository, new checked out repositories need that set manually. If you forget it - no big deal as you will get error reminding of it.
Add new git remote pointing to Urho3D repository, lets call it upstream.
Fetch upstream/master.
Check out any atomic branch. ‚ö†Ô∏è Do not check out Urho3D branches ‚ö†Ô∏è
Merge from upstream/master, git merge --squash upstream/master.

This will merge changes as usual. Only new changes since last common commit will be merged. You will have to solve some conflicts in case same code was modified in atomic and upstream. Git figures out renames automatically as well, you do not have to care about it. This even removes need of // ATOMIC BEGIN|END comments as atomic changes are preserved and diffs from upstream are replayed on atomic code.
If you wish to try this method on your own do this:

Check out a new branch.
Run git replace --graft 404afffddfa02a77101af6c6c4f9b534db12e66c c0a700c2b428a22a92cac18e473c68c180730f63 129205a9b1fd94573c81feba76f897990990e8ec, it inserts fake parent for previous sync with upstream.
Follow steps in the list above.","@rokups Awesome work!, I'll land from here with a couple tweaks and fixes from testing: #1588
I will also pull the Git update documentation out to the Wiki Cookbook
Thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1588,2017-07-05T18:44:47Z,2017-07-05T19:12:44Z,2017-07-24T16:33:38Z,MERGED,True,27800,12353,723,https://github.com/JoshEngebretson,Urho and ThirdParty merge (continued),5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1588,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1588,"... a continuation of @rokups PR #1586, with some tweaks and fixes from testing.
Closes #1545","... a continuation of @rokups PR #1586, with some tweaks and fixes from testing.
Closes #1545",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1588,2017-07-05T18:44:47Z,2017-07-05T19:12:44Z,2017-07-24T16:33:38Z,MERGED,True,27800,12353,723,https://github.com/JoshEngebretson,Urho and ThirdParty merge (continued),5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1588,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1588#issuecomment-313198743,"... a continuation of @rokups PR #1586, with some tweaks and fixes from testing.
Closes #1545","@rokups Thanks again, another squeaky clean PR! LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1591,2017-07-05T22:46:54Z,2017-07-06T19:42:16Z,2017-07-13T15:16:32Z,MERGED,True,225,0,7,https://github.com/JimMarlowe,UITabContainer and UILayout enhancements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1591,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1591,"This PR has usability enhancements for UITabContainer and UILayout.
The UITabContainer has a couple of methods added to make this class usable. And all the method arguments will propagate thru the scripting languages.
    int GetCurrentPage(); /// returns the current page number
    bool DeletePage( int page ); /// deletes a tab + page, returns true if successful
    void AddTabPageFile ( const String &tabname, const String &layoutFile ); /// adds a tab + page from file
    void AddTabPageWidget ( const String &tabname, UIWidget *widget ); /// adds a tab + page widget(s)


The UI/TBLayout has a method added to program the 5 main functions in a singe call. These functions are interrelated, so if you change one, the chances are very good you'll be changing more of them. This cuts to this annoying chase.
   void SetLayoutConfig ( const String &settings );  /// program bulk layout functionality 
The string that used has at least 5 alphanumeric characters to set each of the afflicted functions.  If the input string is less than 5 characters it will not program any of the fields. Text above the 5th character ignored.  A '-' character in any field will not program that entry. Any character used which is not an allowed characters or a '-' will result in the default setting to be used.

Character [0]  can be  'X' or 'Y'  for UI_AXIS = X(D), Y
Character [1]  can be  'A'|'G'|'P' for UI_LAYOUT_SIZE = Available, Gravity(D), Preferred
Character [2]  can be  'C'|'G'|'L'|'R'  for UI_LAYOUT_POSITION = Center(D), Gravity, LeftTop, RightBottom
Character [3]  can be  'A'|'G'|'P'  for UI_LAYOUT_DISTRIBUTION = Available, Gravity, Preferred(D)
Character [4]  can be  'C'|'L'|'R'  for UI_LAYOUT_DISTRIBUTION_POSITION, Center(D), LeftTop, RightBottom

A token was added to the layout file for the TBLayout, use  TBLayout: config: ""XGCPC""  for programming.","This PR has usability enhancements for UITabContainer and UILayout.
The UITabContainer has a couple of methods added to make this class usable. And all the method arguments will propagate thru the scripting languages.
    int GetCurrentPage(); /// returns the current page number
    bool DeletePage( int page ); /// deletes a tab + page, returns true if successful
    void AddTabPageFile ( const String &tabname, const String &layoutFile ); /// adds a tab + page from file
    void AddTabPageWidget ( const String &tabname, UIWidget *widget ); /// adds a tab + page widget(s)


The UI/TBLayout has a method added to program the 5 main functions in a singe call. These functions are interrelated, so if you change one, the chances are very good you'll be changing more of them. This cuts to this annoying chase.
   void SetLayoutConfig ( const String &settings );  /// program bulk layout functionality 
The string that used has at least 5 alphanumeric characters to set each of the afflicted functions.  If the input string is less than 5 characters it will not program any of the fields. Text above the 5th character ignored.  A '-' character in any field will not program that entry. Any character used which is not an allowed characters or a '-' will result in the default setting to be used.

Character [0]  can be  'X' or 'Y'  for UI_AXIS = X(D), Y
Character [1]  can be  'A'|'G'|'P' for UI_LAYOUT_SIZE = Available, Gravity(D), Preferred
Character [2]  can be  'C'|'G'|'L'|'R'  for UI_LAYOUT_POSITION = Center(D), Gravity, LeftTop, RightBottom
Character [3]  can be  'A'|'G'|'P'  for UI_LAYOUT_DISTRIBUTION = Available, Gravity, Preferred(D)
Character [4]  can be  'C'|'L'|'R'  for UI_LAYOUT_DISTRIBUTION_POSITION, Center(D), LeftTop, RightBottom

A token was added to the layout file for the TBLayout, use  TBLayout: config: ""XGCPC""  for programming.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1591,2017-07-05T22:46:54Z,2017-07-06T19:42:16Z,2017-07-13T15:16:32Z,MERGED,True,225,0,7,https://github.com/JimMarlowe,UITabContainer and UILayout enhancements,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1591,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1591#issuecomment-313570431,"This PR has usability enhancements for UITabContainer and UILayout.
The UITabContainer has a couple of methods added to make this class usable. And all the method arguments will propagate thru the scripting languages.
    int GetCurrentPage(); /// returns the current page number
    bool DeletePage( int page ); /// deletes a tab + page, returns true if successful
    void AddTabPageFile ( const String &tabname, const String &layoutFile ); /// adds a tab + page from file
    void AddTabPageWidget ( const String &tabname, UIWidget *widget ); /// adds a tab + page widget(s)


The UI/TBLayout has a method added to program the 5 main functions in a singe call. These functions are interrelated, so if you change one, the chances are very good you'll be changing more of them. This cuts to this annoying chase.
   void SetLayoutConfig ( const String &settings );  /// program bulk layout functionality 
The string that used has at least 5 alphanumeric characters to set each of the afflicted functions.  If the input string is less than 5 characters it will not program any of the fields. Text above the 5th character ignored.  A '-' character in any field will not program that entry. Any character used which is not an allowed characters or a '-' will result in the default setting to be used.

Character [0]  can be  'X' or 'Y'  for UI_AXIS = X(D), Y
Character [1]  can be  'A'|'G'|'P' for UI_LAYOUT_SIZE = Available, Gravity(D), Preferred
Character [2]  can be  'C'|'G'|'L'|'R'  for UI_LAYOUT_POSITION = Center(D), Gravity, LeftTop, RightBottom
Character [3]  can be  'A'|'G'|'P'  for UI_LAYOUT_DISTRIBUTION = Available, Gravity, Preferred(D)
Character [4]  can be  'C'|'L'|'R'  for UI_LAYOUT_DISTRIBUTION_POSITION, Center(D), LeftTop, RightBottom

A token was added to the layout file for the TBLayout, use  TBLayout: config: ""XGCPC""  for programming.","The new APIs will help with the other scripting languages. I pushed a version of the periodic program up to https://github.com/JimMarlowe/AtomicExamples/tree/JM-PERIODIC/UIPeriodicTable so you can see whats-what, though its still not done.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1592,2017-07-06T11:54:16Z,2017-07-06T19:49:44Z,2017-07-09T13:35:30Z,MERGED,True,26,0,2,https://github.com/rokups,Automatically deploy Qt dlls to profiler executable directory.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1592,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1592,Change takes care of putting minimal required Qt dlls to the directory where Profiler.exe is built. This is only done for windows. Linux does not need this at all and i am not sure how it should work on MacOS so that one is left out. So as a result after building Atomic now you can go to Artifacts/Build/Profiler/(Release|Debug) and run Profiler.exe  without needing any extra steps.,Change takes care of putting minimal required Qt dlls to the directory where Profiler.exe is built. This is only done for windows. Linux does not need this at all and i am not sure how it should work on MacOS so that one is left out. So as a result after building Atomic now you can go to Artifacts/Build/Profiler/(Release|Debug) and run Profiler.exe  without needing any extra steps.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1593,2017-07-07T14:48:02Z,2017-07-07T15:11:49Z,2017-07-07T15:11:51Z,MERGED,True,1,1,1,https://github.com/JoshEngebretson,Fix macOS detection (keep MacOSX string for compatibility),1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1593,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1593,"This PR fixes Mac platform detection in JS, which makes the editors shortcuts work again, etc","This PR fixes Mac platform detection in JS, which makes the editors shortcuts work again, etc",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1594,2017-07-07T15:24:14Z,2017-07-07T18:59:07Z,2017-07-13T15:16:31Z,MERGED,True,9,9,2,https://github.com/JimMarlowe,Linux Control key detection wrong,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1594,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1594,This PR fixes a couple of instances of detecting when the Control vs Command button is pressed on linux. This resolves #1423,This PR fixes a couple of instances of detecting when the Control vs Command button is pressed on linux. This resolves #1423,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1594,2017-07-07T15:24:14Z,2017-07-07T18:59:07Z,2017-07-13T15:16:31Z,MERGED,True,9,9,2,https://github.com/JimMarlowe,Linux Control key detection wrong,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1594,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1594#issuecomment-313765731,This PR fixes a couple of instances of detecting when the Control vs Command button is pressed on linux. This resolves #1423,"Good catch, thanks! LANDING! ‚úàÔ∏è
Closes #1423",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1597,2017-07-09T17:39:15Z,2017-07-10T20:08:02Z,2017-07-10T20:25:04Z,MERGED,True,313078,212710,124,https://github.com/shaddockh,Updates to TypeScript and Monaco Editor,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597,https://github.com/shaddockh,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597,"This PR updates TypeScript to version 2.4.1 (see https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/ )
It also updates the Monaco editor to 0.9 (see https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#090-03072017 )
There were also a few changes to ensure that everything still works.  The main difference was that themes are handled differently under Monaco 0.9.
Monaco 0.9 also adds a new minimap along the side.","This PR updates TypeScript to version 2.4.1 (see https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/ )
It also updates the Monaco editor to 0.9 (see https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#090-03072017 )
There were also a few changes to ensure that everything still works.  The main difference was that themes are handled differently under Monaco 0.9.
Monaco 0.9 also adds a new minimap along the side.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1597,2017-07-09T17:39:15Z,2017-07-10T20:08:02Z,2017-07-10T20:25:04Z,MERGED,True,313078,212710,124,https://github.com/shaddockh,Updates to TypeScript and Monaco Editor,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597#issuecomment-314221113,"This PR updates TypeScript to version 2.4.1 (see https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/ )
It also updates the Monaco editor to 0.9 (see https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#090-03072017 )
There were also a few changes to ensure that everything still works.  The main difference was that themes are handled differently under Monaco 0.9.
Monaco 0.9 also adds a new minimap along the side.","Tested on Windows and all good, including compiling a TypeScript project, btw the minimap is really awesome!  Thanks for the update! üåü LANDING! ‚úàÔ∏è
PS: One thing I want to look into is a submodule for the node_module dependencies, in order to keep the main repo clean.  Do you do anything special with the node_modules or are they pretty much local npm installs?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1597,2017-07-09T17:39:15Z,2017-07-10T20:08:02Z,2017-07-10T20:25:04Z,MERGED,True,313078,212710,124,https://github.com/shaddockh,Updates to TypeScript and Monaco Editor,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597,https://github.com/shaddockh,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1597#issuecomment-314225520,"This PR updates TypeScript to version 2.4.1 (see https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/ )
It also updates the Monaco editor to 0.9 (see https://github.com/Microsoft/monaco-editor/blob/master/CHANGELOG.md#090-03072017 )
There were also a few changes to ensure that everything still works.  The main difference was that themes are handled differently under Monaco 0.9.
Monaco 0.9 also adds a new minimap along the side.","Node modules is pretty static, so it could be a submodule.  It's only being used during build and the only time I've really updated it is when I'm bringing in a new version of TypeScript.  I think the TypeDoc process pulls down it's own node modules on the fly during build.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1599,2017-07-10T13:57:14Z,2017-07-10T20:17:01Z,2017-07-10T20:59:22Z,MERGED,True,18,37,2,https://github.com/Type1J,"Changes conflicting enum names, and removes a badly thought out API call.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599,https://github.com/Type1J,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599,"I've had this locally for a while. I'm trying to reconcile the upstream and my local version of Atomic. This fix may resolve some script naming conflicts, if anybody has them.","I've had this locally for a while. I'm trying to reconcile the upstream and my local version of Atomic. This fix may resolve some script naming conflicts, if anybody has them.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1599,2017-07-10T13:57:14Z,2017-07-10T20:17:01Z,2017-07-10T20:59:22Z,MERGED,True,18,37,2,https://github.com/Type1J,"Changes conflicting enum names, and removes a badly thought out API call.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599#issuecomment-314223357,"I've had this locally for a while. I'm trying to reconcile the upstream and my local version of Atomic. This fix may resolve some script naming conflicts, if anybody has them.","Thanks for the PR, looks great, nice clean ups on the enum üëç I am curious if you have used the download BufferQueue object in script yet?  If so, which language, and how was the experience?
We're green here, so LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1599,2017-07-10T13:57:14Z,2017-07-10T20:17:01Z,2017-07-10T20:59:22Z,MERGED,True,18,37,2,https://github.com/Type1J,"Changes conflicting enum names, and removes a badly thought out API call.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599,https://github.com/Type1J,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599#issuecomment-314234106,"I've had this locally for a while. I'm trying to reconcile the upstream and my local version of Atomic. This fix may resolve some script naming conflicts, if anybody has them.","I have in C++ and JavaScript. The BufferQueue exists to prevent possible reallocation when you can't afford it, and you probably already have an allocation that you just want to drop in at the end. It works especially well when you can just use that same allocation that you want to drop in at the end.
I've used something like BufferQueue for years in sound queues. Infact, Atomic's BufferQueue came from it's sound code. I forget where exactly, but somewhere down in the ""here's the next sound buffer"" code.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1599,2017-07-10T13:57:14Z,2017-07-10T20:17:01Z,2017-07-10T20:59:22Z,MERGED,True,18,37,2,https://github.com/Type1J,"Changes conflicting enum names, and removes a badly thought out API call.",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599,https://github.com/Type1J,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1599#issuecomment-314239777,"I've had this locally for a while. I'm trying to reconcile the upstream and my local version of Atomic. This fix may resolve some script naming conflicts, if anybody has them.","The downside is that it's a Deserializer subclass, but it doesn't seek. When any full allocation that it owns is read, it just DecRef()s it, so it will be deallocated if it's the only remaining owner. That's causing me a bit of trouble with something that I've been working on as a higher level interface to WebRequest, actually. I've modified the Resource class a bit to allow it a DOWNLOADING state, and it seems to work well, but some Resource loaders try to seek on the Deserializer that they're given, so that made me have to copy the BufferQueue to a VectorBuffer before using it as the Deserializer to hand off to BeginLoad(). I'm doing the copy in the loading thread, so it doesn't affect main thread performance, but I was wondering if I needed to refactor the Resource loaders that exist and put a ""no seek"" restriction on them. I think that's probably too limiting, so I'll stick with the quick copy in the loading thread for now. ResourceCache isn't being using currently. It seems that most of the ResourceCache API wants the resource to be immediately available, which is not practical for a Resource that's being downloaded from some remote system. I'm trying to integrate it anyway because it would fit in better, but I may have to keep them separate.  ... Sorry... rambling...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1603,2017-07-12T13:17:52Z,2017-07-12T13:44:05Z,2017-07-12T13:48:45Z,MERGED,True,8,8,2,https://github.com/rokups,Fix #1602,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603,Fix #1602,Fix #1602,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1603,2017-07-12T13:17:52Z,2017-07-12T13:44:05Z,2017-07-12T13:48:45Z,MERGED,True,8,8,2,https://github.com/rokups,Fix #1602,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603#issuecomment-314773175,Fix #1602,"Great, that's what I get for only testing D3D11 and D3D9, thanks for the fix (and improvements), landing! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1603,2017-07-12T13:17:52Z,2017-07-12T13:44:05Z,2017-07-12T13:48:45Z,MERGED,True,8,8,2,https://github.com/rokups,Fix #1602,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603,https://github.com/rokups,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603#issuecomment-314773595,Fix #1602,Noooo that still had one bug... ! üí•,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1603,2017-07-12T13:17:52Z,2017-07-12T13:44:05Z,2017-07-12T13:48:45Z,MERGED,True,8,8,2,https://github.com/rokups,Fix #1602,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1603#issuecomment-314774695,Fix #1602,We can fix it in post! ‚ú®,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1604,2017-07-12T17:52:19Z,2017-07-13T02:01:17Z,2017-07-31T17:25:42Z,CLOSED,False,17,12,3,https://github.com/rokups,Fix #1602 for real,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1604,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1604,This should solve the issue. Could use a test from someone other than me though :p,This should solve the issue. Could use a test from someone other than me though :p,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1604,2017-07-12T17:52:19Z,2017-07-13T02:01:17Z,2017-07-31T17:25:42Z,CLOSED,False,17,12,3,https://github.com/rokups,Fix #1602 for real,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1604,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1604#issuecomment-314948405,This should solve the issue. Could use a test from someone other than me though :p,"I went ahead and fixed the comment, will land in #1605
I tested D3D11, D3D9, and am just finishing up testing OpenGL now... thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1605,2017-07-13T02:00:04Z,2017-07-13T04:06:38Z,2017-07-13T04:06:40Z,MERGED,True,16,11,3,https://github.com/JoshEngebretson,Fix for renderer selection on Windows,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1605,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1605,"Closes #1602 via #1604, with a comment fix here...","Closes #1602 via #1604, with a comment fix here...",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606#issuecomment-315234713,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","Wow, widget docking in 500 lines, impressive!    Can I test the docking behavior?  Maybe with https://github.com/JimMarlowe/AtomicExamples/tree/JM-PERIODIC/UIPeriodicTable?
I will savor this fine PR in the AM, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606#issuecomment-315239504,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","Yes, Ive updated the UIPeriodicTable program to demonstrate the docking stuff.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606#issuecomment-315451770,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","The ability to undock/redock is actually not limited to tabs, it can be anything, but the TabContainer is deterministic enough to demonstrate a completed system without having to change it in the future.  A general TBLayout decoder ring might take awhile...  Due to the ID system being somewhat relative, if you currently have code that looks up an undocked content ID, you might not find it when undocked.  The solution to that is, search from the uiview widget, and then it will find the ID in the dockwindow.  I have some follow on work, which will make this a general function so you don't have to remember what to do, and create some widget tree query functions to find all widgets of a class, an ID, and a GetText.  Then you can create a menu of DockWindows.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606#issuecomment-317082156,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","Awesome, thanks for the API improvements!  üëç
I added a quick fix to ensure return results were clean and will land in #1611 when green ‚úÖ",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1606,2017-07-13T15:22:15Z,2017-07-21T18:46:20Z,2017-07-22T00:46:03Z,CLOSED,False,761,6,23,https://github.com/JimMarlowe,Turbobadger TabContainer Docking,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606,https://github.com/JimMarlowe,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1606#issuecomment-317141909,"This PR adds undocking and redocking for the Turbobadger UITabContainer Widget. For undocking a tab, the page contents can be reparented into a Window (for real!). For redocking, the content is reparented again back into the UITabContainer. A new widget, the UIDockWindow, was created, that can redock with an embedded button in the titlebar.
Added NumChildren to TBWidget, a missing method.
Added PrettyPrint to TBWidget, this has been used to check is the un/redocking was doing what it was suppose to.","Good deal. That JS/TS manual binding was an ""adventure"" üç∑",True,{'HOORAY': ['https://github.com/JoshEngebretson']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1610,2017-07-19T22:59:55Z,2017-07-19T23:50:12Z,2017-07-19T23:50:14Z,MERGED,True,12,12,4,https://github.com/JoshEngebretson,"Move UI update event to engine post update, cleanups",1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1610,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1610,Closes #1609,Closes #1609,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1611,2017-07-21T18:42:43Z,2017-07-21T19:19:28Z,2017-07-21T19:19:32Z,MERGED,True,768,6,23,https://github.com/JoshEngebretson,Turbobadger TabContainer Docking (continued),6,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1611,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1611,This is PR #1606 with a quick fix to ensure we don't return invalid results.,This is PR #1606 with a quick fix to ensure we don't return invalid results.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1613,2017-07-26T01:17:42Z,2017-07-26T17:28:58Z,2017-07-26T17:28:58Z,MERGED,True,2,1,2,https://github.com/JimMarlowe,Add UIPeriodicTable example,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613,"This adds the UIPeriodicTable example to the AtomicEditor example browser.
My Examples submodule isn't updating for the new UIPeriodicTable directory, is there something else I need to do to make that happen?","This adds the UIPeriodicTable example to the AtomicEditor example browser.
My Examples submodule isn't updating for the new UIPeriodicTable directory, is there something else I need to do to make that happen?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1613,2017-07-26T01:17:42Z,2017-07-26T17:28:58Z,2017-07-26T17:28:58Z,MERGED,True,2,1,2,https://github.com/JimMarlowe,Add UIPeriodicTable example,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613#issuecomment-317921100,"This adds the UIPeriodicTable example to the AtomicEditor example browser.
My Examples submodule isn't updating for the new UIPeriodicTable directory, is there something else I need to do to make that happen?","Yeah, the submodule needs to be updated to commit af394b23609d45071b490d8d85c8c5187ecd05db, you should be able to achieve this by checking out that commit in the Submodules/AtomicExamples and then committing that in the main repo.  Let me know if you're having any problems with it.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1613,2017-07-26T01:17:42Z,2017-07-26T17:28:58Z,2017-07-26T17:28:58Z,MERGED,True,2,1,2,https://github.com/JimMarlowe,Add UIPeriodicTable example,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1613#issuecomment-318125156,"This adds the UIPeriodicTable example to the AtomicEditor example browser.
My Examples submodule isn't updating for the new UIPeriodicTable directory, is there something else I need to do to make that happen?","Awesome, thanks again :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1614,2017-07-26T21:00:11Z,2017-07-26T21:33:17Z,2017-07-26T21:33:19Z,MERGED,True,8,3,2,https://github.com/JoshEngebretson,Disable imgui file creation by default.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1614,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1614,"Disable imgui's default behavior of creating an ini and log file.  Also, output to stdout/stderr when running script binding generation
Closes #1595","Disable imgui's default behavior of creating an ini and log file.  Also, output to stdout/stderr when running script binding generation
Closes #1595",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1615,2017-07-27T19:47:00Z,2017-07-28T15:52:40Z,2017-07-28T15:52:40Z,MERGED,True,21,15,7,https://github.com/JimMarlowe,Allow Editor Plugins to define shortcuts and some linting,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1615,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1615,"This PR allows AtomicEditor Plugins to define Shortcut definitions and process the shortcut actions.  The Editor has an elaborate Shortcut system, but it doesn‚Äôt allow for shortcuts to be dynamically defined. There is also some mechanism that also defines unqualified F1-F12 as ""special"", which, sadly, won't allow these keys to be programmed from plugins, since they won't emit an event. Using qualified (shift, control, alt) emit events though. It will not check for duplicate shortcut definitions.
Using is page as an example https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Editor-Extensions
To define the shortcut :
this.serviceLocator.uiServices.createPluginMenuItemSource(""My Menu"", { ""Open"" : [`${this.name}.open.myaction`, ""Ctrl+F5"" ] });

To enable the shortcut action, add this code to the plugin projectLoaded() function :
        var myplug = this;
        this.subscribeToEvent( ""UIShortcut"", function (ev) {
            if ( ev.key == Atomic.KEY_F5  && ev.qualifiers == Atomic.QUAL_CTRL ) 
                myplug.menuItemClicked( ""MyMenuPlugin.open.myaction"" );
        });


There are also some misc TSLINT reject fixes that have crept in, while I was checking the file I changed.","This PR allows AtomicEditor Plugins to define Shortcut definitions and process the shortcut actions.  The Editor has an elaborate Shortcut system, but it doesn‚Äôt allow for shortcuts to be dynamically defined. There is also some mechanism that also defines unqualified F1-F12 as ""special"", which, sadly, won't allow these keys to be programmed from plugins, since they won't emit an event. Using qualified (shift, control, alt) emit events though. It will not check for duplicate shortcut definitions.
Using is page as an example https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Editor-Extensions
To define the shortcut :
this.serviceLocator.uiServices.createPluginMenuItemSource(""My Menu"", { ""Open"" : [`${this.name}.open.myaction`, ""Ctrl+F5"" ] });

To enable the shortcut action, add this code to the plugin projectLoaded() function :
        var myplug = this;
        this.subscribeToEvent( ""UIShortcut"", function (ev) {
            if ( ev.key == Atomic.KEY_F5  && ev.qualifiers == Atomic.QUAL_CTRL ) 
                myplug.menuItemClicked( ""MyMenuPlugin.open.myaction"" );
        });


There are also some misc TSLINT reject fixes that have crept in, while I was checking the file I changed.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1615,2017-07-27T19:47:00Z,2017-07-28T15:52:40Z,2017-07-28T15:52:40Z,MERGED,True,21,15,7,https://github.com/JimMarlowe,Allow Editor Plugins to define shortcuts and some linting,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1615,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1615#issuecomment-318690766,"This PR allows AtomicEditor Plugins to define Shortcut definitions and process the shortcut actions.  The Editor has an elaborate Shortcut system, but it doesn‚Äôt allow for shortcuts to be dynamically defined. There is also some mechanism that also defines unqualified F1-F12 as ""special"", which, sadly, won't allow these keys to be programmed from plugins, since they won't emit an event. Using qualified (shift, control, alt) emit events though. It will not check for duplicate shortcut definitions.
Using is page as an example https://github.com/AtomicGameEngine/AtomicGameEngine/wiki/Editor-Extensions
To define the shortcut :
this.serviceLocator.uiServices.createPluginMenuItemSource(""My Menu"", { ""Open"" : [`${this.name}.open.myaction`, ""Ctrl+F5"" ] });

To enable the shortcut action, add this code to the plugin projectLoaded() function :
        var myplug = this;
        this.subscribeToEvent( ""UIShortcut"", function (ev) {
            if ( ev.key == Atomic.KEY_F5  && ev.qualifiers == Atomic.QUAL_CTRL ) 
                myplug.menuItemClicked( ""MyMenuPlugin.open.myaction"" );
        });


There are also some misc TSLINT reject fixes that have crept in, while I was checking the file I changed.","Very nice, thanks!  LANDING ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1616,2017-07-31T13:06:29Z,2017-08-01T19:36:24Z,2017-08-03T14:18:01Z,MERGED,True,226,196,14,https://github.com/rokups,MingW-w64 support,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1616,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1616,Engine can now build with MingW-w64. What is still missing is webview and as direct consequence of that - editor. Webview is disabled if mingw is detected. Bindings build though. I also updated nativefiledialog to latest version which already is pretty old. That was required in order to get mingw building. As a consequence of update it is no longer possible to set title of dialog for choosing a directory. I hope it is acceptable.,Engine can now build with MingW-w64. What is still missing is webview and as direct consequence of that - editor. Webview is disabled if mingw is detected. Bindings build though. I also updated nativefiledialog to latest version which already is pretty old. That was required in order to get mingw building. As a consequence of update it is no longer possible to set title of dialog for choosing a directory. I hope it is acceptable.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1617,2017-07-31T23:42:47Z,2017-08-01T22:27:34Z,2017-08-01T22:27:34Z,MERGED,True,407,2,10,https://github.com/JimMarlowe,Add Atomic UIButtonGrid widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617,"This PR adds an Atomic UIButtonGrid widget. This ""widget"" is special. It creates a regular grid of buttons, these buttons will remain in a grid organization, even if the container is resized. It will ellipse ""..."" the text in the buttons if there is not enough room to fully display the text.  This will make it easy to create game menus, and sudoku, tic-tac-toe boards üò∏  There are two methodologies to enter the button text, either by specifying a row and column address, or the ""floodfill"" add text, which tiles in the text sequentially. The embedded UIButtons can be retrieved by both indexing methodologies, so you can assign event handlers to process the button clicks, or by IDs assigned at creation, using the spreadsheet like scheme, having A1 as the first id, and row incrementing letters, and columns incrementing numbers.
I had to do a little plumbing in Turbobadger to get access to the resize information, otherwise, I'd have to make a TB widget and wrap it.
This is what it can do for the feature examples ...
#if ATOMIC_DESKTOP || ATOMIC_MOBILE  
            var buttonGrid = new UIButtonGrid( 6, 4, 6 );
            buttonGrid.SetLayoutHeight( rootLayout.Rect.Height - 32 );
            buttonGrid.SetLayoutWidth( rootLayout.Rect.Width - 32);
            rootLayout.AddChild( buttonGrid );
            var sampleTypes = typeof(Sample).Assembly.GetTypes().Where(t => t.IsSubclassOf(typeof(Sample)) && t != typeof(Sample) ).ToArray();
            foreach (var sample in sampleTypes)
            {
                int got = buttonGrid.AddGridText ( sample.Name );
                var button = buttonGrid.AtGridWidget(got);
                button.SubscribeToEvent<WidgetEvent>( button,  e => 
                {
                    if (e.Type != UI_EVENT_TYPE.UI_EVENT_TYPE_CLICK)  return; // We're only interested in clicks","This PR adds an Atomic UIButtonGrid widget. This ""widget"" is special. It creates a regular grid of buttons, these buttons will remain in a grid organization, even if the container is resized. It will ellipse ""..."" the text in the buttons if there is not enough room to fully display the text.  This will make it easy to create game menus, and sudoku, tic-tac-toe boards üò∏  There are two methodologies to enter the button text, either by specifying a row and column address, or the ""floodfill"" add text, which tiles in the text sequentially. The embedded UIButtons can be retrieved by both indexing methodologies, so you can assign event handlers to process the button clicks, or by IDs assigned at creation, using the spreadsheet like scheme, having A1 as the first id, and row incrementing letters, and columns incrementing numbers.
I had to do a little plumbing in Turbobadger to get access to the resize information, otherwise, I'd have to make a TB widget and wrap it.
This is what it can do for the feature examples ...
#if ATOMIC_DESKTOP || ATOMIC_MOBILE  
            var buttonGrid = new UIButtonGrid( 6, 4, 6 );
            buttonGrid.SetLayoutHeight( rootLayout.Rect.Height - 32 );
            buttonGrid.SetLayoutWidth( rootLayout.Rect.Width - 32);
            rootLayout.AddChild( buttonGrid );
            var sampleTypes = typeof(Sample).Assembly.GetTypes().Where(t => t.IsSubclassOf(typeof(Sample)) && t != typeof(Sample) ).ToArray();
            foreach (var sample in sampleTypes)
            {
                int got = buttonGrid.AddGridText ( sample.Name );
                var button = buttonGrid.AtGridWidget(got);
                button.SubscribeToEvent<WidgetEvent>( button,  e => 
                {
                    if (e.Type != UI_EVENT_TYPE.UI_EVENT_TYPE_CLICK)  return; // We're only interested in clicks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1617,2017-07-31T23:42:47Z,2017-08-01T22:27:34Z,2017-08-01T22:27:34Z,MERGED,True,407,2,10,https://github.com/JimMarlowe,Add Atomic UIButtonGrid widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617#issuecomment-319508536,"This PR adds an Atomic UIButtonGrid widget. This ""widget"" is special. It creates a regular grid of buttons, these buttons will remain in a grid organization, even if the container is resized. It will ellipse ""..."" the text in the buttons if there is not enough room to fully display the text.  This will make it easy to create game menus, and sudoku, tic-tac-toe boards üò∏  There are two methodologies to enter the button text, either by specifying a row and column address, or the ""floodfill"" add text, which tiles in the text sequentially. The embedded UIButtons can be retrieved by both indexing methodologies, so you can assign event handlers to process the button clicks, or by IDs assigned at creation, using the spreadsheet like scheme, having A1 as the first id, and row incrementing letters, and columns incrementing numbers.
I had to do a little plumbing in Turbobadger to get access to the resize information, otherwise, I'd have to make a TB widget and wrap it.
This is what it can do for the feature examples ...
#if ATOMIC_DESKTOP || ATOMIC_MOBILE  
            var buttonGrid = new UIButtonGrid( 6, 4, 6 );
            buttonGrid.SetLayoutHeight( rootLayout.Rect.Height - 32 );
            buttonGrid.SetLayoutWidth( rootLayout.Rect.Width - 32);
            rootLayout.AddChild( buttonGrid );
            var sampleTypes = typeof(Sample).Assembly.GetTypes().Where(t => t.IsSubclassOf(typeof(Sample)) && t != typeof(Sample) ).ToArray();
            foreach (var sample in sampleTypes)
            {
                int got = buttonGrid.AddGridText ( sample.Name );
                var button = buttonGrid.AtGridWidget(got);
                button.SubscribeToEvent<WidgetEvent>( button,  e => 
                {
                    if (e.Type != UI_EVENT_TYPE.UI_EVENT_TYPE_CLICK)  return; // We're only interested in clicks","Points taken, resolved.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1617,2017-07-31T23:42:47Z,2017-08-01T22:27:34Z,2017-08-01T22:27:34Z,MERGED,True,407,2,10,https://github.com/JimMarlowe,Add Atomic UIButtonGrid widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1617#issuecomment-319514959,"This PR adds an Atomic UIButtonGrid widget. This ""widget"" is special. It creates a regular grid of buttons, these buttons will remain in a grid organization, even if the container is resized. It will ellipse ""..."" the text in the buttons if there is not enough room to fully display the text.  This will make it easy to create game menus, and sudoku, tic-tac-toe boards üò∏  There are two methodologies to enter the button text, either by specifying a row and column address, or the ""floodfill"" add text, which tiles in the text sequentially. The embedded UIButtons can be retrieved by both indexing methodologies, so you can assign event handlers to process the button clicks, or by IDs assigned at creation, using the spreadsheet like scheme, having A1 as the first id, and row incrementing letters, and columns incrementing numbers.
I had to do a little plumbing in Turbobadger to get access to the resize information, otherwise, I'd have to make a TB widget and wrap it.
This is what it can do for the feature examples ...
#if ATOMIC_DESKTOP || ATOMIC_MOBILE  
            var buttonGrid = new UIButtonGrid( 6, 4, 6 );
            buttonGrid.SetLayoutHeight( rootLayout.Rect.Height - 32 );
            buttonGrid.SetLayoutWidth( rootLayout.Rect.Width - 32);
            rootLayout.AddChild( buttonGrid );
            var sampleTypes = typeof(Sample).Assembly.GetTypes().Where(t => t.IsSubclassOf(typeof(Sample)) && t != typeof(Sample) ).ToArray();
            foreach (var sample in sampleTypes)
            {
                int got = buttonGrid.AddGridText ( sample.Name );
                var button = buttonGrid.AtGridWidget(got);
                button.SubscribeToEvent<WidgetEvent>( button,  e => 
                {
                    if (e.Type != UI_EVENT_TYPE.UI_EVENT_TYPE_CLICK)  return; // We're only interested in clicks","Awesome, looks great, LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1622,2017-08-11T16:16:29Z,2017-08-11T17:14:35Z,2017-08-11T18:00:32Z,MERGED,True,7,8,2,https://github.com/rokups,Move imgui ui assembly and rendering to END_RENDERING event. ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1622,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1622,"Required for interoperability with Urho3D UI. It allows me to render Urho3D UI just before imgui in order to have imgui be rendered on top of everything. It does not affect anything related to TurboBadger, imgui still renders on top of it like before.","Required for interoperability with Urho3D UI. It allows me to render Urho3D UI just before imgui in order to have imgui be rendered on top of everything. It does not affect anything related to TurboBadger, imgui still renders on top of it like before.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1622,2017-08-11T16:16:29Z,2017-08-11T17:14:35Z,2017-08-11T18:00:32Z,MERGED,True,7,8,2,https://github.com/rokups,Move imgui ui assembly and rendering to END_RENDERING event. ,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1622,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1622#issuecomment-321869082,"Required for interoperability with Urho3D UI. It allows me to render Urho3D UI just before imgui in order to have imgui be rendered on top of everything. It does not affect anything related to TurboBadger, imgui still renders on top of it like before.","Ok, great, thanks for the PR! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.","This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/rokups,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-321967469,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.",@JoshEngebretson builds are failing on CI. Maybe it is a time to discuss official bump of required cmake version?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-321998761,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.","I will be out of the office this week.  I'll be able to look into this when I return.  Let's keep the PR open until then, thanks!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-323753561,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.","I am still not in position to mess with CI boxes, though it is on my mind üí´",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-323753827,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.",Crowd in the chat cant wait for master to come home ;),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/JoshEngebretson,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-324430424,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.",@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/JoshEngebretson,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-324435998,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.","@rokups Thanks for the PR, I updated the CI boxes and now green ‚úîÔ∏è
LANDING!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1623,2017-08-12T08:14:23Z,2017-08-23T19:18:50Z,2017-09-09T16:31:03Z,MERGED,True,57,13,8,https://github.com/rokups,Misc small improvements,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623,https://github.com/rokups,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1623#issuecomment-324560130,"This is a small collection of recent fixes and few additions. Lets go through them:
CMake version requirement bumped to 3.3. Why you ask? Because noone noticed, but we already depend on that version since we started using $<$<COMPILE_LANGUAGE:CXX>:-std=gnu++11>. COMPILE_LANGUAGE:CXX thingy was introduced in 3.3. Older distros may get recent prebuilt CMake binaries from CMake website and they run. Tested with CMake 3.9 on ubuntu 14.04 on travis.ci.
Several build fixes for android NDK 13b. Namely must not link to pthread because it does not/no longer exists on android. Also wrapped -std=gnu++11 into generator expression because otherwise compiler fails building c files due to unknown flag. Also excluded profiler tool from build on android in a way that does not cause any warnings.
ImGui::Text(messageText_.CString()); -> ImGui::TextUnformatted(messageText_.CString()); because again on android it fails to build due to printing user-supplied text as format string being insecure. Clang is really nice, isnt it? ;)
Added IntVector2 constructor taking in float array. No explanation needed here.
Added SetBlockEvents(bool) and GetBlockEvents() to Object. This allows us to block certain objects from sending and receiving events. I found it very convenient for implementing game states, but i am sure there are other useful applications. Blocking events is easier than unsubscribing and resubscribing after all.
Added SendEvent(StringHash, const VariantMap&) overload which allows us to use initializer lists for sending events. For example SendEvent(""foo"", { {Foo::P_BAR, ""bar""}, {Foo::P_FOO, 1} }). While using this method variant causes extra copy i think there should be a convenience method for cases where speed does not matter.
This is a mix of various things, but i think they should be acceptable. If not, and if you think i should split PR up or get rid of some changes please let me know.","Awesome! One thing though - for testing i have reverted back to cmake_minimum_required(VERSION 2.8.12.1), it should be changed to cmake_minimum_required(VERSION 3.3)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1624,2017-08-12T18:33:27Z,2017-08-12T18:58:29Z,2017-08-12T20:17:16Z,MERGED,True,56,25,8,https://github.com/JoshEngebretson,Atomic Updates,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1624,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1624,"C# fix for crashing when running from VS2015/VS2017 (odd issue with not using native debugger engine with managed code)
Fix for VS2015 detection when missing trailing slash
Quick esc exits for basic JS project templates
D3D11 proc sky shader fix
Fix for proc sky when autoupdate is not enabled
updating submodule commit","C# fix for crashing when running from VS2015/VS2017 (odd issue with not using native debugger engine with managed code)
Fix for VS2015 detection when missing trailing slash
Quick esc exits for basic JS project templates
D3D11 proc sky shader fix
Fix for proc sky when autoupdate is not enabled
updating submodule commit",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1625,2017-08-14T20:00:41Z,2017-08-21T14:13:59Z,2017-08-21T14:13:59Z,MERGED,True,157,27,10,https://github.com/JimMarlowe,Add titlebar axis control for UIWindow,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625,"This Pr adds API control of the titlebar axis/location on the UIWindow. The default will be the AXIS_Y, which places the titlebar at the top of the window. The new option is AXIS_X, which moves the titlebar to the left side, the closer 'X' moves to the top of the titlebar, and what's left of the title string is at the bottom, though since Turbobadger can't display rotated text, it quickly clips the string. The resizer still occupies the lower right corner. The DockWindow was also updated with this capability.
This will satisfy a couple of items in #1620  [UI] Turbobadger wishlist (in no particular order)","This Pr adds API control of the titlebar axis/location on the UIWindow. The default will be the AXIS_Y, which places the titlebar at the top of the window. The new option is AXIS_X, which moves the titlebar to the left side, the closer 'X' moves to the top of the titlebar, and what's left of the title string is at the bottom, though since Turbobadger can't display rotated text, it quickly clips the string. The resizer still occupies the lower right corner. The DockWindow was also updated with this capability.
This will satisfy a couple of items in #1620  [UI] Turbobadger wishlist (in no particular order)",True,{'THUMBS_UP': ['https://github.com/darrylryan']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1625,2017-08-14T20:00:41Z,2017-08-21T14:13:59Z,2017-08-21T14:13:59Z,MERGED,True,157,27,10,https://github.com/JimMarlowe,Add titlebar axis control for UIWindow,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625#issuecomment-323087403,"This Pr adds API control of the titlebar axis/location on the UIWindow. The default will be the AXIS_Y, which places the titlebar at the top of the window. The new option is AXIS_X, which moves the titlebar to the left side, the closer 'X' moves to the top of the titlebar, and what's left of the title string is at the bottom, though since Turbobadger can't display rotated text, it quickly clips the string. The resizer still occupies the lower right corner. The DockWindow was also updated with this capability.
This will satisfy a couple of items in #1620  [UI] Turbobadger wishlist (in no particular order)","Im adding a change to the UIScrollContainer, which makes AddChild() do the expected action, and the action taken by the layout file. This will fix #1626",True,{'THUMBS_UP': ['https://github.com/darrylryan']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1625,2017-08-14T20:00:41Z,2017-08-21T14:13:59Z,2017-08-21T14:13:59Z,MERGED,True,157,27,10,https://github.com/JimMarlowe,Add titlebar axis control for UIWindow,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625,https://github.com/JimMarlowe,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625#issuecomment-323431181,"This Pr adds API control of the titlebar axis/location on the UIWindow. The default will be the AXIS_Y, which places the titlebar at the top of the window. The new option is AXIS_X, which moves the titlebar to the left side, the closer 'X' moves to the top of the titlebar, and what's left of the title string is at the bottom, though since Turbobadger can't display rotated text, it quickly clips the string. The resizer still occupies the lower right corner. The DockWindow was also updated with this capability.
This will satisfy a couple of items in #1620  [UI] Turbobadger wishlist (in no particular order)","This code makes for easier programming of undocked windows. When a window is undocked,
the event flow from the contained widgets now go into the parent which has been changed to the dockwindow. Any past event subscriptions are still in effect, except they don't work as expected (at all). What this change does, is if the origin widget has been specified (used for integrated redocking) it will also reroute event emits back to this widget, and the original event handlers will again receive the events. magic.  If no origin widget is given, one will have to unsubscribe and resubscribe event handler for widgets that emit events.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1625,2017-08-14T20:00:41Z,2017-08-21T14:13:59Z,2017-08-21T14:13:59Z,MERGED,True,157,27,10,https://github.com/JimMarlowe,Add titlebar axis control for UIWindow,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1625#issuecomment-323753257,"This Pr adds API control of the titlebar axis/location on the UIWindow. The default will be the AXIS_Y, which places the titlebar at the top of the window. The new option is AXIS_X, which moves the titlebar to the left side, the closer 'X' moves to the top of the titlebar, and what's left of the title string is at the bottom, though since Turbobadger can't display rotated text, it quickly clips the string. The resizer still occupies the lower right corner. The DockWindow was also updated with this capability.
This will satisfy a couple of items in #1620  [UI] Turbobadger wishlist (in no particular order)","Awesome work, the event handling can indeed be tricky, nice wizardry üîÆ
Landing üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1628,2017-08-18T00:29:02Z,2017-09-08T15:24:07Z,2017-09-08T15:24:07Z,MERGED,True,11,0,2,https://github.com/darrylryan,Exposed SetColor for UIBargraph so that it can be used from script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628,https://github.com/darrylryan,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1628,2017-08-18T00:29:02Z,2017-09-08T15:24:07Z,2017-09-08T15:24:07Z,MERGED,True,11,0,2,https://github.com/darrylryan,Exposed SetColor for UIBargraph so that it can be used from script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628,https://github.com/rokups,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628#issuecomment-323599575,,Some tabs have sneaked in ;),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1628,2017-08-18T00:29:02Z,2017-09-08T15:24:07Z,2017-09-08T15:24:07Z,MERGED,True,11,0,2,https://github.com/darrylryan,Exposed SetColor for UIBargraph so that it can be used from script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628#issuecomment-323753793,,"@darrylryan I concur, tab-elicious! üçó :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1628,2017-08-18T00:29:02Z,2017-09-08T15:24:07Z,2017-09-08T15:24:07Z,MERGED,True,11,0,2,https://github.com/darrylryan,Exposed SetColor for UIBargraph so that it can be used from script,3,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1628#issuecomment-328134329,,"Great, thanks for pruning the tabbage üëç",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324046347,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","Need advice on these c# errors, what should be done with IntVector2 here?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324128264,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","Thanks for another mighty fine PR!
I will have a look at the IntVector2 issue tomorrow and see if I can tap it into place. üî®",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324154647,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)",@rokups any ideas on what tiled version is recommended now? Docs still mention 0.92.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324253564,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)",@Alan-FGR i have no idea what tiled is.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324305429,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","@Alan-FGR i have no idea what tiled is.

@rokups and you call yourself a game developer? 
You proclaim that TMX support was updated, I thought you'd know what it's about :P",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324307929,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","@rokups and you call yourself a game developer?

I dont. I am random noob from the depths of internetz 

You proclaim that TMX support was updated, I thought you'd know what it's about :P

Not like its my work ;)",True,{'LAUGH': ['https://github.com/Alan-FGR']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/JoshEngebretson,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324444069,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","@rokups I fixed the IntVector2 issue and will land in #1631, thanks!
BTW, are you still using the same git merge method?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324560880,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","Yep, did this using git grafting again. Only TMX parser class was more of an issue. We should probably consider upstreaming our changes if possible.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324697342,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","I've tried the lastest tiled stable release (1.0.2) and TMXs fail to load the images for some reason :(... the supported version definitely should be documented, so I don't know if the problem is somewhere else, or if it's the importer since the debug info is quite limited... I don't even know if I should try downgrading tiled until it works or something :(... maybe I should start testing a file from 0.92 to make sure the problem isn't elsewhere",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,11,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324699365,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","After further investigation, it has something to do with the filenames apparently... I'll try some other maps",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,12,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324719972,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","I'm still going to try some more complex maps, but saving the tmx file crashed the editor, can somebody else confirm?",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,13,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324724257,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","OK, TMX does need some work... objects layers zfight with tile layers and some object types won't show too :(",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/rokups,14,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324840913,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)",@Alan-FGR could you test with urho3d? Maybe i messed up solving conflicts. That file was a bit problematic.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1629,2017-08-22T13:55:42Z,2017-08-23T19:52:57Z,2017-08-25T11:55:22Z,CLOSED,False,73295,5182,278,https://github.com/rokups,Merge with upstream,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629,https://github.com/Alan-FGR,15,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1629#issuecomment-324897755,"Merge with upstream. Basically Urho3D 1.7 + few fixes.
Most notable since last merge:

IK updates
WebP support
TMX file format updates
Some Text3D updates (oversampling, etc)","@rokups I will... I will also test the TMX files in the examples to see if they didn't break. I'm starting to think though that the features having problem they never worked properly to begin with. Object layers are apparently just partially supported and upon a quick check at the source apparently the layers don't have anything to prevent zfighting with the tile layers. The editor crashes even with the simplest map though, when you save if in tiled and the editor is open it always crash.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1630,2017-08-22T23:53:01Z,2017-08-23T19:06:22Z,2017-08-23T19:06:22Z,MERGED,True,480,1,5,https://github.com/JimMarlowe,Add Multicolumn List Widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630,"UIMultiList
These are 2 classes that enable the UISelectList to have multiple columns.  There is API to set the column type, column width, data for the column and fixing the column height, if necessary. Once set into the UISelectList, it operates the same way, to get which row is selected.
There are a couple of column types that can be used
TEXT = which is a TextField, with left justified text, the column data is the text that will be displayed.
TEXTC = a TextField, with center justified text
TEXTR = a TextField with right justified text
IMAGE = an ImageWidget, the column data is the resource name (or pathname) to the file to display
COLOR = a ColorWidget, the column data is the hex color string, like ""#228800"", to display.
ICON = a SkinImage, the column data is the skin name for the icon to display.
If the column height is left as 0, the content will determine the height of the row. If you need it to be a fixed size, the column height field can be used.
The columm widths must be programmed, and are needed to keep alignment for the widget, the content will not exceed the programmed value.
Example Javascript code
    var mis = new Atomic.UIMultiItemSource();  // new itemsource

    var columnHeight = 0;   // 0 = let content determine column height
    var  = ""item1"";   // RefId string returned when list entry is selected
	var aumi1 = new Atomic.UIMultiItem( columnRefId, ""ICON"", ""LogoAtomic"", 32, columnHeight );
	aumi1.addColumn ( ""TEXT"", ""a new kind of list..."", 210 );
	aumi1.addColumn ( ""TEXTC"", ""RW"",  20 );
	aumi1.addColumn ( ""COLOR"", ""#33FF33"", 20 );
	aumi1.addColumn ( ""TEXT"", ""moar"", 66 );
	aumi1.addColumn ( ""TEXT"", ""moar text is fine, in multiple columns."", 266 );
    mis.addItem( aumi1 );
    
    mylist.setSource(mis);","UIMultiList
These are 2 classes that enable the UISelectList to have multiple columns.  There is API to set the column type, column width, data for the column and fixing the column height, if necessary. Once set into the UISelectList, it operates the same way, to get which row is selected.
There are a couple of column types that can be used
TEXT = which is a TextField, with left justified text, the column data is the text that will be displayed.
TEXTC = a TextField, with center justified text
TEXTR = a TextField with right justified text
IMAGE = an ImageWidget, the column data is the resource name (or pathname) to the file to display
COLOR = a ColorWidget, the column data is the hex color string, like ""#228800"", to display.
ICON = a SkinImage, the column data is the skin name for the icon to display.
If the column height is left as 0, the content will determine the height of the row. If you need it to be a fixed size, the column height field can be used.
The columm widths must be programmed, and are needed to keep alignment for the widget, the content will not exceed the programmed value.
Example Javascript code
    var mis = new Atomic.UIMultiItemSource();  // new itemsource

    var columnHeight = 0;   // 0 = let content determine column height
    var  = ""item1"";   // RefId string returned when list entry is selected
	var aumi1 = new Atomic.UIMultiItem( columnRefId, ""ICON"", ""LogoAtomic"", 32, columnHeight );
	aumi1.addColumn ( ""TEXT"", ""a new kind of list..."", 210 );
	aumi1.addColumn ( ""TEXTC"", ""RW"",  20 );
	aumi1.addColumn ( ""COLOR"", ""#33FF33"", 20 );
	aumi1.addColumn ( ""TEXT"", ""moar"", 66 );
	aumi1.addColumn ( ""TEXT"", ""moar text is fine, in multiple columns."", 266 );
    mis.addItem( aumi1 );
    
    mylist.setSource(mis);",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1630,2017-08-22T23:53:01Z,2017-08-23T19:06:22Z,2017-08-23T19:06:22Z,MERGED,True,480,1,5,https://github.com/JimMarlowe,Add Multicolumn List Widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630#issuecomment-324404812,"UIMultiList
These are 2 classes that enable the UISelectList to have multiple columns.  There is API to set the column type, column width, data for the column and fixing the column height, if necessary. Once set into the UISelectList, it operates the same way, to get which row is selected.
There are a couple of column types that can be used
TEXT = which is a TextField, with left justified text, the column data is the text that will be displayed.
TEXTC = a TextField, with center justified text
TEXTR = a TextField with right justified text
IMAGE = an ImageWidget, the column data is the resource name (or pathname) to the file to display
COLOR = a ColorWidget, the column data is the hex color string, like ""#228800"", to display.
ICON = a SkinImage, the column data is the skin name for the icon to display.
If the column height is left as 0, the content will determine the height of the row. If you need it to be a fixed size, the column height field can be used.
The columm widths must be programmed, and are needed to keep alignment for the widget, the content will not exceed the programmed value.
Example Javascript code
    var mis = new Atomic.UIMultiItemSource();  // new itemsource

    var columnHeight = 0;   // 0 = let content determine column height
    var  = ""item1"";   // RefId string returned when list entry is selected
	var aumi1 = new Atomic.UIMultiItem( columnRefId, ""ICON"", ""LogoAtomic"", 32, columnHeight );
	aumi1.addColumn ( ""TEXT"", ""a new kind of list..."", 210 );
	aumi1.addColumn ( ""TEXTC"", ""RW"",  20 );
	aumi1.addColumn ( ""COLOR"", ""#33FF33"", 20 );
	aumi1.addColumn ( ""TEXT"", ""moar"", 66 );
	aumi1.addColumn ( ""TEXT"", ""moar text is fine, in multiple columns."", 266 );
    mis.addItem( aumi1 );
    
    mylist.setSource(mis);","Going thru and testing the TS, C++, C# I found I had picked who I derived the ""Multi"" objects from poorly. Now they are derived from UISelectItem/Source and no longer give errors in use.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1630,2017-08-22T23:53:01Z,2017-08-23T19:06:22Z,2017-08-23T19:06:22Z,MERGED,True,480,1,5,https://github.com/JimMarlowe,Add Multicolumn List Widget,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1630#issuecomment-324432911,"UIMultiList
These are 2 classes that enable the UISelectList to have multiple columns.  There is API to set the column type, column width, data for the column and fixing the column height, if necessary. Once set into the UISelectList, it operates the same way, to get which row is selected.
There are a couple of column types that can be used
TEXT = which is a TextField, with left justified text, the column data is the text that will be displayed.
TEXTC = a TextField, with center justified text
TEXTR = a TextField with right justified text
IMAGE = an ImageWidget, the column data is the resource name (or pathname) to the file to display
COLOR = a ColorWidget, the column data is the hex color string, like ""#228800"", to display.
ICON = a SkinImage, the column data is the skin name for the icon to display.
If the column height is left as 0, the content will determine the height of the row. If you need it to be a fixed size, the column height field can be used.
The columm widths must be programmed, and are needed to keep alignment for the widget, the content will not exceed the programmed value.
Example Javascript code
    var mis = new Atomic.UIMultiItemSource();  // new itemsource

    var columnHeight = 0;   // 0 = let content determine column height
    var  = ""item1"";   // RefId string returned when list entry is selected
	var aumi1 = new Atomic.UIMultiItem( columnRefId, ""ICON"", ""LogoAtomic"", 32, columnHeight );
	aumi1.addColumn ( ""TEXT"", ""a new kind of list..."", 210 );
	aumi1.addColumn ( ""TEXTC"", ""RW"",  20 );
	aumi1.addColumn ( ""COLOR"", ""#33FF33"", 20 );
	aumi1.addColumn ( ""TEXT"", ""moar"", 66 );
	aumi1.addColumn ( ""TEXT"", ""moar text is fine, in multiple columns."", 266 );
    mis.addItem( aumi1 );
    
    mylist.setSource(mis);","Excellent!  Thanks for the PR üëç
Bonus points for moors filled with lavender :)

LANDING! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1631,2017-08-23T19:51:18Z,2017-08-23T20:19:31Z,2017-08-23T20:19:35Z,MERGED,True,73308,5183,280,https://github.com/JoshEngebretson,Third Party Updates,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1631,https://github.com/JoshEngebretson,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1631,"Continuation of #1629, rebased to master with IntVector2 fix.
Thanks to @rokups!","Continuation of #1629, rebased to master with IntVector2 fix.
Thanks to @rokups!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1634,2017-08-24T08:45:52Z,2017-08-24T16:30:42Z,2017-08-25T07:31:13Z,MERGED,True,4,2,2,https://github.com/rokups,Bump CMake version and initialize new variables in Text3DFreeType,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,Just a few things i overlooked on last PR.,Just a few things i overlooked on last PR.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1634,2017-08-24T08:45:52Z,2017-08-24T16:30:42Z,2017-08-25T07:31:13Z,MERGED,True,4,2,2,https://github.com/rokups,Bump CMake version and initialize new variables in Text3DFreeType,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634#issuecomment-324668408,Just a few things i overlooked on last PR.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1634,2017-08-24T08:45:52Z,2017-08-24T16:30:42Z,2017-08-25T07:31:13Z,MERGED,True,4,2,2,https://github.com/rokups,Bump CMake version and initialize new variables in Text3DFreeType,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634#issuecomment-324676351,Just a few things i overlooked on last PR.,"... and one, more, time! üêπ
@AtomicBuildBot retest this please",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1634,2017-08-24T08:45:52Z,2017-08-24T16:30:42Z,2017-08-25T07:31:13Z,MERGED,True,4,2,2,https://github.com/rokups,Bump CMake version and initialize new variables in Text3DFreeType,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,https://github.com/JoshEngebretson,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634#issuecomment-324680841,Just a few things i overlooked on last PR.,@AtomicBuildBot retest this please,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1634,2017-08-24T08:45:52Z,2017-08-24T16:30:42Z,2017-08-25T07:31:13Z,MERGED,True,4,2,2,https://github.com/rokups,Bump CMake version and initialize new variables in Text3DFreeType,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634,https://github.com/JoshEngebretson,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1634#issuecomment-324687690,Just a few things i overlooked on last PR.,"@rokups Thanks, the Windows CI cmake was at 3.2.2 and is now updated too",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1637,2017-08-25T08:41:47Z,2017-08-28T16:51:55Z,2017-09-09T12:36:45Z,MERGED,True,37,34,3,https://github.com/rokups,Optional submodules,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637,By popular demand (from @Alan-FGR) this change implements pulling submodules only if features that require these submodules are enabled. So disabling ATOMIC_CPLUSPLUS_EXAMPLES will not pull examples and disabling ATOMIC_WEBVIEW will not pull CEF.,By popular demand (from @Alan-FGR) this change implements pulling submodules only if features that require these submodules are enabled. So disabling ATOMIC_CPLUSPLUS_EXAMPLES will not pull examples and disabling ATOMIC_WEBVIEW will not pull CEF.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1637,2017-08-25T08:41:47Z,2017-08-28T16:51:55Z,2017-09-09T12:36:45Z,MERGED,True,37,34,3,https://github.com/rokups,Optional submodules,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637,https://github.com/Alan-FGR,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637#issuecomment-324899636,By popular demand (from @Alan-FGR) this change implements pulling submodules only if features that require these submodules are enabled. So disabling ATOMIC_CPLUSPLUS_EXAMPLES will not pull examples and disabling ATOMIC_WEBVIEW will not pull CEF.,"@rokups while I solved my problem just by cloning recursive when GitHub got fast for a moment (it often caps speed @ ridiculous levels), I think this is extremely important since the only way to get a new version of Atomic these days is by compiling it yourself (bin distro's old as heck), and these submodules are extremely huge; some people just don't have gigabit internet, and I personally would honestly give up if I was on a slow connection and had to wait hours just to clone it in order to compile and give it a try. Even if you have gigabit internet GitHub caps speed way too often, we shouldn't expect our potential users to go through all that trouble. Ideally we should provide binaries though.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1637,2017-08-25T08:41:47Z,2017-08-28T16:51:55Z,2017-09-09T12:36:45Z,MERGED,True,37,34,3,https://github.com/rokups,Optional submodules,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637,https://github.com/JoshEngebretson,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1637#issuecomment-325409565,By popular demand (from @Alan-FGR) this change implements pulling submodules only if features that require these submodules are enabled. So disabling ATOMIC_CPLUSPLUS_EXAMPLES will not pull examples and disabling ATOMIC_WEBVIEW will not pull CEF.,"Thanks for the PR, landing! ‚úàÔ∏è",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1647,2017-09-07T08:53:54Z,2017-09-08T15:20:45Z,2017-09-09T15:50:09Z,MERGED,True,2557,1526,8,https://github.com/rokups,ImGUI 1.51,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1647,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1647,https://github.com/ocornut/imgui/releases/tag/v1.51,https://github.com/ocornut/imgui/releases/tag/v1.51,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1647,2017-09-07T08:53:54Z,2017-09-08T15:20:45Z,2017-09-09T15:50:09Z,MERGED,True,2557,1526,8,https://github.com/rokups,ImGUI 1.51,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1647,https://github.com/JoshEngebretson,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1647#issuecomment-328133355,https://github.com/ocornut/imgui/releases/tag/v1.51,"Great, thanks for the PR!",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1648,2017-09-07T16:20:54Z,2017-09-08T15:22:49Z,2017-09-08T15:22:49Z,MERGED,True,1,1,1,https://github.com/ShalokShalom,Update README.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1648,https://github.com/ShalokShalom,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1648,Add Typescript to description,Add Typescript to description,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1648,2017-09-07T16:20:54Z,2017-09-08T15:22:49Z,2017-09-08T15:22:49Z,MERGED,True,1,1,1,https://github.com/ShalokShalom,Update README.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1648,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1648#issuecomment-327850973,Add Typescript to description,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1650,2017-09-09T18:39:57Z,2017-09-09T19:13:17Z,2017-09-09T19:13:20Z,MERGED,True,1,1,1,https://github.com/rokups,Update examples submodule,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1650,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1650,P.S. crowd in chat misses you ;),P.S. crowd in chat misses you ;),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/ShalokShalom,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/AtomicBuildBot,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-328893298,,Can one of the admins verify this patch?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-345718694,,"In theory this should be true, but without resources to explicitly test and deal with any possible properties, we'll stick to only specifically stating we have C# support.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/ShalokShalom,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-345742672,,"Yeah, just ignore dozens of languages, including one of the simplest functional programming languages, just because it could be that there are issues. As C# compiles down to CIL, it makes no difference.
If it makes a difference, it could make the same difference in C# as well.
I suggest to simply merge this patch and act if any feedback comes in.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-345793018,,"If you're prepared to do an F# port of one of the larger 3D examples as a proof of concept, we can re-evaluate this issue.",True,{'THUMBS_UP': ['https://github.com/nem0']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/ShalokShalom,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-345800180,,"No, I prefer to use an Engine that will support it so as Vulkan: http://www.banshee3d.com/
Thanks",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/mattbenic,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-345918117,,Fair enough. Good luck with your projects.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1652,2017-09-12T15:37:09Z,2017-11-20T14:52:59Z,2017-11-22T10:12:43Z,CLOSED,False,1,1,1,https://github.com/ShalokShalom,Add F# and other .NET languages,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652,https://github.com/ShalokShalom,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1652#issuecomment-346304665,,Thanks a lot.,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1656,2017-10-08T22:50:47Z,2017-11-22T11:33:11Z,2017-11-22T11:33:11Z,MERGED,True,29,0,2,https://github.com/JimMarlowe,Add right-click import on resources folders #357,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656,https://github.com/JimMarlowe,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656,"This PR add the ability to import an asset file by searching for it with a file finder, instead of using OS drag and drop.
There is a new entry in the context menu in either Project window when a folder is selected, this entry is called ""Import Asset..."".  Selecting ""Import Asset..."" brings up the file finder to search for an asset file that will be saved into the Project folder which was originally selected.  Due to limitations in the file finder, only one asset may be imported at at time.  There is a message in the editor's status area which reports the success or failure of the import operation.
This will be for all (AtomicEditor) platforms.","This PR add the ability to import an asset file by searching for it with a file finder, instead of using OS drag and drop.
There is a new entry in the context menu in either Project window when a folder is selected, this entry is called ""Import Asset..."".  Selecting ""Import Asset..."" brings up the file finder to search for an asset file that will be saved into the Project folder which was originally selected.  Due to limitations in the file finder, only one asset may be imported at at time.  There is a message in the editor's status area which reports the success or failure of the import operation.
This will be for all (AtomicEditor) platforms.",True,{'HOORAY': ['https://github.com/Alan-FGR']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1656,2017-10-08T22:50:47Z,2017-11-22T11:33:11Z,2017-11-22T11:33:11Z,MERGED,True,29,0,2,https://github.com/JimMarlowe,Add right-click import on resources folders #357,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656,https://github.com/JimMarlowe,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656#issuecomment-335242985,"This PR add the ability to import an asset file by searching for it with a file finder, instead of using OS drag and drop.
There is a new entry in the context menu in either Project window when a folder is selected, this entry is called ""Import Asset..."".  Selecting ""Import Asset..."" brings up the file finder to search for an asset file that will be saved into the Project folder which was originally selected.  Due to limitations in the file finder, only one asset may be imported at at time.  There is a message in the editor's status area which reports the success or failure of the import operation.
This will be for all (AtomicEditor) platforms.","I added a asset database scan to a successful file import, since that's what a drop of a asset does.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1656,2017-10-08T22:50:47Z,2017-11-22T11:33:11Z,2017-11-22T11:33:11Z,MERGED,True,29,0,2,https://github.com/JimMarlowe,Add right-click import on resources folders #357,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656#issuecomment-345720754,"This PR add the ability to import an asset file by searching for it with a file finder, instead of using OS drag and drop.
There is a new entry in the context menu in either Project window when a folder is selected, this entry is called ""Import Asset..."".  Selecting ""Import Asset..."" brings up the file finder to search for an asset file that will be saved into the Project folder which was originally selected.  Due to limitations in the file finder, only one asset may be imported at at time.  There is a message in the editor's status area which reports the success or failure of the import operation.
This will be for all (AtomicEditor) platforms.","Verified on Windows. Just waiting for a linux verify. In the meantime, please rebase this to latest master so it'll include the CI hooks and trigger a build.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1656,2017-10-08T22:50:47Z,2017-11-22T11:33:11Z,2017-11-22T11:33:11Z,MERGED,True,29,0,2,https://github.com/JimMarlowe,Add right-click import on resources folders #357,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656,https://github.com/JimMarlowe,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1656#issuecomment-346107402,"This PR add the ability to import an asset file by searching for it with a file finder, instead of using OS drag and drop.
There is a new entry in the context menu in either Project window when a folder is selected, this entry is called ""Import Asset..."".  Selecting ""Import Asset..."" brings up the file finder to search for an asset file that will be saved into the Project folder which was originally selected.  Due to limitations in the file finder, only one asset may be imported at at time.  There is a message in the editor's status area which reports the success or failure of the import operation.
This will be for all (AtomicEditor) platforms.","Rebased, as requested. I have tested it on Mint Linux, Which is Ubuntu 14.x based, with the now required CMake upgrade.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1663,2017-10-27T05:48:28Z,2017-11-20T14:30:28Z,2017-11-20T14:30:28Z,CLOSED,False,6,0,1,https://github.com/iamblocksberg,Update README.md,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1663,https://github.com/iamblocksberg,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1663,add License add bottom,add License add bottom,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1663,2017-10-27T05:48:28Z,2017-11-20T14:30:28Z,2017-11-20T14:30:28Z,CLOSED,False,6,0,1,https://github.com/iamblocksberg,Update README.md,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1663,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1663#issuecomment-339882605,add License add bottom,"Making the in-use license clear is a valid edit, but doesn't need 4 commits. Please squash them and resubmit.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1666,2017-11-06T19:52:23Z,,2017-11-20T14:30:04Z,OPEN,False,1,1,1,https://github.com/mikailcolak,Mistyped variable name fixed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1666,https://github.com/mikailcolak,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1666,Issue: #1665,Issue: #1665,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1666,2017-11-06T19:52:23Z,,2017-11-20T14:30:04Z,OPEN,False,1,1,1,https://github.com/mikailcolak,Mistyped variable name fixed.,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1666,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1666#issuecomment-345711809,Issue: #1665,Thanks for this. Please rebase onto latest master so that the CI will kick in,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/arnavb,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,Just some minor refactorings!,Just some minor refactorings!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-343058553,Just some minor refactorings!,"Thanks. We're in the process of sorting out CI, and will evaluate this and other PRs when that's up and running again.",True,"{'THUMBS_UP': ['https://github.com/arnavb', 'https://github.com/MilynSJEC']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-345704464,Just some minor refactorings!,"Please squash these commits, and rebase onto current master so a CI build will be triggered.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/arnavb,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-345897282,Just some minor refactorings!,How can I squash them? Can‚Äôt you do that when you merge this?,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-345918247,Just some minor refactorings!,"I can if you prefer, but please do the rebase to latest master your side :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/arnavb,6,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-346043104,Just some minor refactorings!,"I‚Äôm sorry, you may have to do this, since I do not have access to a computer for a week, unless you plan on waiting.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/mattbenic,7,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-346325978,Just some minor refactorings!,We're perfectly happy to wait until you can do it :),True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/arnavb,8,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-346354339,Just some minor refactorings!,Ok thanks!,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/arnavb,9,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-476161016,Just some minor refactorings!,"@mattbenic I just realized that I had completely forgotten about this PR! I said I would have made the changes in a week, but I hope more than a year isn't too late ;)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1667,2017-11-09T00:48:53Z,,2019-03-25T11:48:43Z,OPEN,False,4,9,1,https://github.com/arnavb,Updated AppBase.cpp,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667,https://github.com/mattbenic,10,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1667#issuecomment-476162843,Just some minor refactorings!,Hehe. Well we haven't contributed to the repo either in about as much time ;) I'll look at puling it in when I get a chance,True,{'THUMBS_UP': ['https://github.com/arnavb']}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1670,2017-11-20T13:32:21Z,2017-11-20T13:32:31Z,2017-11-20T14:33:20Z,MERGED,True,1328,22,19,https://github.com/mattbenic,Travis CI,4,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1670,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1670,Bringing in @rokups Travis CI for linux (some squashing for brevity),Bringing in @rokups Travis CI for linux (some squashing for brevity),True,"{'HOORAY': ['https://github.com/rokups', 'https://github.com/Alan-FGR']}"
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1672,2017-11-28T10:32:02Z,2017-11-29T05:26:05Z,2017-11-29T06:03:01Z,MERGED,True,1032,60,37,https://github.com/mattbenic,Various small changes,15,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1672,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1672,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1673,2017-11-29T15:14:15Z,2017-11-30T06:29:04Z,2017-11-30T06:33:15Z,MERGED,True,40,105,5,https://github.com/mattbenic,Dependency cleanup and IPC Server cleanup,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1673,https://github.com/mattbenic,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1673,"Improvements on previous commits, missed in previous bulk PR","Improvements on previous commits, missed in previous bulk PR",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1678,2017-12-31T22:14:51Z,2018-01-05T04:53:02Z,2018-01-08T04:12:26Z,CLOSED,False,105,40,5,https://github.com/jmsmoorehead,"Revert ""Dependency cleanup and IPC Server cleanup""",1,['status: requires clarification'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,https://github.com/jmsmoorehead,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1678,2017-12-31T22:14:51Z,2018-01-05T04:53:02Z,2018-01-08T04:12:26Z,CLOSED,False,105,40,5,https://github.com/jmsmoorehead,"Revert ""Dependency cleanup and IPC Server cleanup""",1,['status: requires clarification'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678#issuecomment-354950545,,Why is this revert necessary? Also it's failing to compile on CI,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1678,2017-12-31T22:14:51Z,2018-01-05T04:53:02Z,2018-01-08T04:12:26Z,CLOSED,False,105,40,5,https://github.com/jmsmoorehead,"Revert ""Dependency cleanup and IPC Server cleanup""",1,['status: requires clarification'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,https://github.com/mattbenic,3,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678#issuecomment-355472728,,Closing due to lack of response,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1678,2017-12-31T22:14:51Z,2018-01-05T04:53:02Z,2018-01-08T04:12:26Z,CLOSED,False,105,40,5,https://github.com/jmsmoorehead,"Revert ""Dependency cleanup and IPC Server cleanup""",1,['status: requires clarification'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,https://github.com/jmsmoorehead,4,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678#issuecomment-355699490,,I'm just learning this matt  sorry.....,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1678,2017-12-31T22:14:51Z,2018-01-05T04:53:02Z,2018-01-08T04:12:26Z,CLOSED,False,105,40,5,https://github.com/jmsmoorehead,"Revert ""Dependency cleanup and IPC Server cleanup""",1,['status: requires clarification'],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678,https://github.com/mattbenic,5,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1678#issuecomment-355881557,,"No problem, we thought it might be a mistake :)",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1691,2018-03-11T18:27:20Z,,2018-03-12T06:14:30Z,OPEN,False,1,1,1,https://github.com/palob,Unhardcode icon file type in GNU/Linux launcher,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1691,https://github.com/palob,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1691,"Since you're going to install the icon to a location compliant with freedesktop.org standards you don't need to specify the icon file extension in the .desktop launcher. It will be found anyway.
This facilitates the use of non-PNG (e.g. SVG) app icon themes.
Cf. this example .desktop launcher.","Since you're going to install the icon to a location compliant with freedesktop.org standards you don't need to specify the icon file extension in the .desktop launcher. It will be found anyway.
This facilitates the use of non-PNG (e.g. SVG) app icon themes.
Cf. this example .desktop launcher.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1691,2018-03-11T18:27:20Z,,2018-03-12T06:14:30Z,OPEN,False,1,1,1,https://github.com/palob,Unhardcode icon file type in GNU/Linux launcher,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1691,https://github.com/mattbenic,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1691#issuecomment-372203557,"Since you're going to install the icon to a location compliant with freedesktop.org standards you don't need to specify the icon file extension in the .desktop launcher. It will be found anyway.
This facilitates the use of non-PNG (e.g. SVG) app icon themes.
Cf. this example .desktop launcher.","Your PR failed travis build, please correct before we can accept your PR. Are you able to access those build logs from the link above? If not let me know and I'll drop them in a gist for you.",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1692,2018-03-27T05:55:11Z,,2018-03-27T05:55:11Z,OPEN,False,1,1,2,https://github.com/SamyBencherif,üëãHey guys why were you using the imessage logo,5,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1692,https://github.com/SamyBencherif,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1692,"Lol that was weird that you were using the imessage logo in your markdown file. I feel like it is copyrighted and it's just off-putting to see it used somewhere else..
So I replaced it with a royalty free message logo üòÇ.. Hardly a noticeable difference to those who don't use apple.
Hope you like the change I made.. If you don't accept my pull request plz change the icon it makes my eyes bleed
ok love you bye üíã","Lol that was weird that you were using the imessage logo in your markdown file. I feel like it is copyrighted and it's just off-putting to see it used somewhere else..
So I replaced it with a royalty free message logo üòÇ.. Hardly a noticeable difference to those who don't use apple.
Hope you like the change I made.. If you don't accept my pull request plz change the icon it makes my eyes bleed
ok love you bye üíã",True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1693,2018-03-27T09:58:48Z,,2018-03-27T09:58:48Z,OPEN,False,2,2,2,https://github.com/rokups,Fix asset importer and travis,2,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1693,https://github.com/rokups,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1693,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1701,2019-08-09T15:54:14Z,,2020-10-06T14:28:23Z,OPEN,False,1,1,1,https://github.com/cmarshall108,ToolCore/Import: fixed compilation error with comparing pointer and int,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1701,https://github.com/cmarshall108,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1701,,,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1705,2022-04-09T11:49:52Z,2022-04-09T11:50:58Z,2022-04-09T11:50:58Z,CLOSED,False,1,0,1,https://github.com/houssemeddinelassoued,Update README.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1705,https://github.com/houssemeddinelassoued,1,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1705,You need to add this line,You need to add this line,True,{}
AtomicGameEngine/AtomicGameEngine,https://github.com/AtomicGameEngine/AtomicGameEngine,1705,2022-04-09T11:49:52Z,2022-04-09T11:50:58Z,2022-04-09T11:50:58Z,CLOSED,False,1,0,1,https://github.com/houssemeddinelassoued,Update README.md,1,[],https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1705,https://github.com/houssemeddinelassoued,2,https://github.com/AtomicGameEngine/AtomicGameEngine/pull/1705#issuecomment-1093953555,You need to add this line,ok,True,{}
