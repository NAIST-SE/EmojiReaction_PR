cesanta/mongoose,https://github.com/cesanta/mongoose,626,2016-02-28T22:35:37Z,2016-03-15T12:37:25Z,2016-03-15T12:37:25Z,CLOSED,False,4,0,1,https://github.com/f4bsch,including winsock2.h if ipv6 enabled,1,[],https://github.com/cesanta/mongoose/pull/626,https://github.com/f4bsch,1,https://github.com/cesanta/mongoose/pull/626,"By default windows.h loads winsock.h, not WinSock2.h. The latter is required (plus Ws2ipdef.h) for IPv6 support.
Also note that in the mongoose.h there is a pragma comment to link with Winsock2 lib, but mongoose actually uses the Winsock1 headers.","By default windows.h loads winsock.h, not WinSock2.h. The latter is required (plus Ws2ipdef.h) for IPv6 support.
Also note that in the mongoose.h there is a pragma comment to link with Winsock2 lib, but mongoose actually uses the Winsock1 headers.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,626,2016-02-28T22:35:37Z,2016-03-15T12:37:25Z,2016-03-15T12:37:25Z,CLOSED,False,4,0,1,https://github.com/f4bsch,including winsock2.h if ipv6 enabled,1,[],https://github.com/cesanta/mongoose/pull/626,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/626#issuecomment-196800806,"By default windows.h loads winsock.h, not WinSock2.h. The latter is required (plus Ws2ipdef.h) for IPv6 support.
Also note that in the mongoose.h there is a pragma comment to link with Winsock2 lib, but mongoose actually uses the Winsock1 headers.","committed in 1d0a898, thanks",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,630,2016-03-14T07:50:06Z,2016-03-14T18:44:21Z,2016-03-14T18:44:21Z,CLOSED,False,1,1,1,https://github.com/julee,"fix response of http range request broken when range value is large, …",1,[],https://github.com/cesanta/mongoose/pull/630,https://github.com/julee,1,https://github.com/cesanta/mongoose/pull/630,"…exceeding 50 bytes length.


This change is","…exceeding 50 bytes length.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,630,2016-03-14T07:50:06Z,2016-03-14T18:44:21Z,2016-03-14T18:44:21Z,CLOSED,False,1,1,1,https://github.com/julee,"fix response of http range request broken when range value is large, …",1,[],https://github.com/cesanta/mongoose/pull/630,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/630#issuecomment-196464931,"…exceeding 50 bytes length.


This change is","committed as 15c333f
thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,637,2016-04-04T20:29:57Z,2016-04-05T20:07:59Z,2016-04-05T22:52:44Z,CLOSED,False,1,1,1,https://github.com/markaylett,Fix epoll() accept bug.,1,[],https://github.com/cesanta/mongoose/pull/637,https://github.com/markaylett,1,https://github.com/cesanta/mongoose/pull/637,"The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is","The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,637,2016-04-04T20:29:57Z,2016-04-05T20:07:59Z,2016-04-05T22:52:44Z,CLOSED,False,1,1,1,https://github.com/markaylett,Fix epoll() accept bug.,1,[],https://github.com/cesanta/mongoose/pull/637,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/637#issuecomment-205720143,"The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is","the truth is, epoll support is broken, in more ways than one.
it also does not bring much benefit, as we still have to walk the list of connections to deliver polls.
do you see a big difference versus select()?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,637,2016-04-04T20:29:57Z,2016-04-05T20:07:59Z,2016-04-05T22:52:44Z,CLOSED,False,1,1,1,https://github.com/markaylett,Fix epoll() accept bug.,1,[],https://github.com/cesanta/mongoose/pull/637,https://github.com/markaylett,3,https://github.com/cesanta/mongoose/pull/637#issuecomment-205743160,"The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is","One of my users raised this as an issue when trying to run with epoll(). (See https://github.com/swirlycloud/swirlyc/issues/55) Not a major concern for me at this stage; if the epoll() implementation is buggy, then I will simply document this as a known issue and disable support for it on my end.
I would suggest, however, that since epoll() is notionally supported in Mongoose, it's still worth taking this specific fix. At least it will 1) prevent duplication of effort, 2) may avoid scaring off new customers, and 3) may highlight other issues that also need fixing. A comment for the unwary close to the following would also be good:
#define MG_MGR_EV_MGR 0 /* select() */
What are your plans for epoll() support longer term?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,637,2016-04-04T20:29:57Z,2016-04-05T20:07:59Z,2016-04-05T22:52:44Z,CLOSED,False,1,1,1,https://github.com/markaylett,Fix epoll() accept bug.,1,[],https://github.com/cesanta/mongoose/pull/637,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/637#issuecomment-205744856,"The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is","as mentioned above, it doesn't bring much in terms of improvement anyway. Mongoose is more about simplicity than scale, so epoll support is just extra complexity. i'm thinking of removing it altogether.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,637,2016-04-04T20:29:57Z,2016-04-05T20:07:59Z,2016-04-05T22:52:44Z,CLOSED,False,1,1,1,https://github.com/markaylett,Fix epoll() accept bug.,1,[],https://github.com/cesanta/mongoose/pull/637,https://github.com/rojer,5,https://github.com/cesanta/mongoose/pull/637#issuecomment-206024367,"The mg_ev_mgr_epoll_ctl() function calls abort() after encountering the following error when a client TCP connection is accepted:
epoll_ctl(5, EPOLL_CTL_MOD, 7, {EPOLLIN, {u32=20605408, u64=749695152056800}}) = -1 ENOENT (No such file or directory)
N.B. -DMG_MGR_EV_MGR=1 is used to enable epoll() on Linux.
The problem is that mg_add_conn() is called in mg_if_accept_new_conn() before mg_sock_set() has set the socket descriptor for the new connection:
mg_ev_mgr_epoll_ctl  0x144c9e0 -1 1
mg_if_accept_new_conn 0x144fa68 0x144c9e0 -1 0, (nil) (nil)
mg_sock_set          0x144c9e0 7
Caveat: the extent of my testing has been limited to plain TCP sockets, so similar problems may exist elsewhere (such as SSL).


This change is",19dd02a removed epoll support,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,638,2016-04-05T05:13:47Z,2017-02-28T12:56:59Z,2017-02-28T12:56:59Z,CLOSED,False,4,4,1,https://github.com/choday,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/638,https://github.com/choday,1,https://github.com/cesanta/mongoose/pull/638,"use mongoose.h without openssl


This change is","use mongoose.h without openssl


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,638,2016-04-05T05:13:47Z,2017-02-28T12:56:59Z,2017-02-28T12:56:59Z,CLOSED,False,4,4,1,https://github.com/choday,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/638,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/638#issuecomment-205970595,"use mongoose.h without openssl


This change is","this is not the right way of doing it, instead, code that uses these members should be ifdefed.
@alashkin, looks like compilation w/o SSL is broken. can you make sure that Mongoose compiles w/o SSL? add a compile test too.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,638,2016-04-05T05:13:47Z,2017-02-28T12:56:59Z,2017-02-28T12:56:59Z,CLOSED,False,4,4,1,https://github.com/choday,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/638,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/638#issuecomment-206152060,"use mongoose.h without openssl


This change is","@choday @rojer
Just tried to compile a couple of mongoose examples with and w/out SSL - everything is OK [for me]
@choday
What errors do you have?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,638,2016-04-05T05:13:47Z,2017-02-28T12:56:59Z,2017-02-28T12:56:59Z,CLOSED,False,4,4,1,https://github.com/choday,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/638,https://github.com/alashkin,4,https://github.com/cesanta/mongoose/pull/638#issuecomment-283031989,"use mongoose.h without openssl


This change is",Closed due inactivity,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,639,2016-04-05T15:41:40Z,2017-04-14T07:19:57Z,2017-04-14T07:19:57Z,CLOSED,False,28,8,2,https://github.com/JohnDearlight,mg_poll_conn - sends message to a single connection,1,[],https://github.com/cesanta/mongoose/pull/639,https://github.com/JohnDearlight,1,https://github.com/cesanta/mongoose/pull/639,"We wrote this simple mod so that we could send a message to a single connection without triggering a broadcast poll.
In our applications, we been passing the connection in the message.  The handler would then decide whether to accept or reject the message by comparing the 'nc' mg_connection argument to the connection passed in the message.  We wanted to avoid this broadcast kind of logic by targeting a specific connection.  By adding the connection to the ctl_msg, a very simple mod, the ctl_msg handler can easily determine dispatch to that connection immediately without polling every connection.
We figured that this mod is sufficiently non-intrusive to warrant asking that it be merged into the main release.


This change is","We wrote this simple mod so that we could send a message to a single connection without triggering a broadcast poll.
In our applications, we been passing the connection in the message.  The handler would then decide whether to accept or reject the message by comparing the 'nc' mg_connection argument to the connection passed in the message.  We wanted to avoid this broadcast kind of logic by targeting a specific connection.  By adding the connection to the ctl_msg, a very simple mod, the ctl_msg handler can easily determine dispatch to that connection immediately without polling every connection.
We figured that this mod is sufficiently non-intrusive to warrant asking that it be merged into the main release.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,639,2016-04-05T15:41:40Z,2017-04-14T07:19:57Z,2017-04-14T07:19:57Z,CLOSED,False,28,8,2,https://github.com/JohnDearlight,mg_poll_conn - sends message to a single connection,1,[],https://github.com/cesanta/mongoose/pull/639,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/639#issuecomment-294106056,"We wrote this simple mod so that we could send a message to a single connection without triggering a broadcast poll.
In our applications, we been passing the connection in the message.  The handler would then decide whether to accept or reject the message by comparing the 'nc' mg_connection argument to the connection passed in the message.  We wanted to avoid this broadcast kind of logic by targeting a specific connection.  By adding the connection to the ctl_msg, a very simple mod, the ctl_msg handler can easily determine dispatch to that connection immediately without polling every connection.
We figured that this mod is sufficiently non-intrusive to warrant asking that it be merged into the main release.


This change is","It is unsafe, because even holding a pointer to a connection in another thread is unsafe.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/benjamind,1,https://github.com/cesanta/mongoose/pull/641,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is","I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/641#issuecomment-208082246,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is","first, let's call it ESP8266_VisualGDB
there's a ton of duplication here... first, let's not check in mongoose.c and .h again.
then it looks like some of these files are autogenerated, can be regenerated and presumably don't need to be checked in.
please make sure only the files that are absolutely necessary are included and then i'll take a closer look",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/benjamind,3,https://github.com/cesanta/mongoose/pull/641#issuecomment-208082426,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is","Yeah sure thing, just wanted to get this up so you could take a look. I'm still finding my way around VisualGDB so have to figure out what can and can't be autogenerated. I'll work this up a bit more then send you a ping to take another look.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/641#issuecomment-586913162,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is",@benjamind ping - do you have an updated version ?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/benjamind,5,https://github.com/cesanta/mongoose/pull/641#issuecomment-589543457,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is",Afraid I haven't come back to this in quite some time. Sorry!,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,641,2016-04-10T21:55:25Z,2020-02-21T14:18:54Z,2020-02-21T14:18:54Z,CLOSED,False,16849,0,17,https://github.com/benjamind,Adds visualgdb working example,1,[],https://github.com/cesanta/mongoose/pull/641,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/641#issuecomment-589672141,"I finally got Mongoose working under VisualGDB.
Had to modify the normal esp8266.mak that VisualGDB provides to link in libcirom and libmirom.
Also found I had to use the compact eagle.v6.512.compact.ld file found in this commit d2b9ad5


This change is","All right - then I am closing this issue, please reopen it back if you have an update.
Thanks so much for sending a PR in the first place!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,644,2016-04-13T07:51:01Z,2016-04-13T11:00:59Z,2016-04-13T11:34:47Z,CLOSED,False,1,1,1,https://github.com/spuschhof,Fix crash in mg_stat on MinGW-w64,2,[],https://github.com/cesanta/mongoose/pull/644,https://github.com/spuschhof,1,https://github.com/cesanta/mongoose/pull/644,"Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is","Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,644,2016-04-13T07:51:01Z,2016-04-13T11:00:59Z,2016-04-13T11:34:47Z,CLOSED,False,1,1,1,https://github.com/spuschhof,Fix crash in mg_stat on MinGW-w64,2,[],https://github.com/cesanta/mongoose/pull/644,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/644#issuecomment-209326793,"Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is","thank you.
can we use __MINGW64__ here? i understand that for 64 bit version, both are defined.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,644,2016-04-13T07:51:01Z,2016-04-13T11:00:59Z,2016-04-13T11:34:47Z,CLOSED,False,1,1,1,https://github.com/spuschhof,Fix crash in mg_stat on MinGW-w64,2,[],https://github.com/cesanta/mongoose/pull/644,https://github.com/spuschhof,3,https://github.com/cesanta/mongoose/pull/644#issuecomment-209333687,"Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is","__MINGW64__ is only defined when compiling in 64bit mode, but the crash occures in 32bit mode.
According to this list, the only macros defined for MinGW-w64 in both 32 and 64bit mode, but not for MinGW32, are __MINGW64_VERSION_MAJOR and __MINGW64_VERSION_MINOR.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,644,2016-04-13T07:51:01Z,2016-04-13T11:00:59Z,2016-04-13T11:34:47Z,CLOSED,False,1,1,1,https://github.com/spuschhof,Fix crash in mg_stat on MinGW-w64,2,[],https://github.com/cesanta/mongoose/pull/644,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/644#issuecomment-209367486,"Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is","ok, sounds good. i need to apply this to our internal repo, so i won't merge this exact PR, but i'll mention you in the commit.
thanks again!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,644,2016-04-13T07:51:01Z,2016-04-13T11:00:59Z,2016-04-13T11:34:47Z,CLOSED,False,1,1,1,https://github.com/spuschhof,Fix crash in mg_stat on MinGW-w64,2,[],https://github.com/cesanta/mongoose/pull/644,https://github.com/rojer,5,https://github.com/cesanta/mongoose/pull/644#issuecomment-209380894,"Fixing a crash in mg_stat when compiling with MinGW-w64 on 32bit Windows. MinGW-w64's definition of stat can not be converted to _stati64, but _stati64 is always defined, so _stati64 should be used on MinGW-w64.


This change is",published in 8a62005,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,650,2016-04-22T12:36:26Z,2016-04-22T13:25:06Z,2016-04-22T13:25:06Z,CLOSED,False,4,0,1,https://github.com/f00bard,Check for return of EAGAIN/EWOULDBLOCK when sending,1,[],https://github.com/cesanta/mongoose/pull/650,https://github.com/f00bard,1,https://github.com/cesanta/mongoose/pull/650,"This issue is still present in Mongoose 6.4 on Cygwin.  To reproduce, build the simplest_web_server example and serve from a directory with an HTML file that references a few other files (in my case, serving a packed .js of ~750KB).  Issue occurs intermittently but with great frequency.
#438


This change is","This issue is still present in Mongoose 6.4 on Cygwin.  To reproduce, build the simplest_web_server example and serve from a directory with an HTML file that references a few other files (in my case, serving a packed .js of ~750KB).  Issue occurs intermittently but with great frequency.
#438


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,650,2016-04-22T12:36:26Z,2016-04-22T13:25:06Z,2016-04-22T13:25:06Z,CLOSED,False,4,0,1,https://github.com/f00bard,Check for return of EAGAIN/EWOULDBLOCK when sending,1,[],https://github.com/cesanta/mongoose/pull/650,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/650#issuecomment-213425922,"This issue is still present in Mongoose 6.4 on Cygwin.  To reproduce, build the simplest_web_server example and serve from a directory with an HTML file that references a few other files (in my case, serving a packed .js of ~750KB).  Issue occurs intermittently but with great frequency.
#438


This change is","i'm not going to merge this exact PR, but it do have one that does similar thing.
in particular, we should only be doing it for non-ssl connection , because SSL code does its own error/not an error check.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,650,2016-04-22T12:36:26Z,2016-04-22T13:25:06Z,2016-04-22T13:25:06Z,CLOSED,False,4,0,1,https://github.com/f00bard,Check for return of EAGAIN/EWOULDBLOCK when sending,1,[],https://github.com/cesanta/mongoose/pull/650,https://github.com/rojer,3,https://github.com/cesanta/mongoose/pull/650#issuecomment-213427516,"This issue is still present in Mongoose 6.4 on Cygwin.  To reproduce, build the simplest_web_server example and serve from a directory with an HTML file that references a few other files (in my case, serving a packed .js of ~750KB).  Issue occurs intermittently but with great frequency.
#438


This change is","closing in favor of 5539868
thanks!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,652,2016-04-26T18:18:28Z,2016-04-26T19:56:43Z,2016-04-27T06:02:40Z,CLOSED,False,8,0,1,https://github.com/danielinux,Fixed compilation with MG_DISABLE_SOCKETPAIR,1,[],https://github.com/cesanta/mongoose/pull/652,https://github.com/danielinux,1,https://github.com/cesanta/mongoose/pull/652,"When MG_DISABLE_SOCKETPAIR is selected, not all calls to mg_socketpair are compiled out.


This change is","When MG_DISABLE_SOCKETPAIR is selected, not all calls to mg_socketpair are compiled out.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,652,2016-04-26T18:18:28Z,2016-04-26T19:56:43Z,2016-04-27T06:02:40Z,CLOSED,False,8,0,1,https://github.com/danielinux,Fixed compilation with MG_DISABLE_SOCKETPAIR,1,[],https://github.com/cesanta/mongoose/pull/652,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/652#issuecomment-214867433,"When MG_DISABLE_SOCKETPAIR is selected, not all calls to mg_socketpair are compiled out.


This change is","it's not quite the right thing to do.
the root of the problem is that CGI requires socketpair and CGI-handling code will not compile without it. however, your PR makes it compile and not work, which is worse.
the right thing to do is to automatically disable CGI if socketpair is disabled. i'll make a change that does that and will close this PR in favor of that.
thanks for reporting though, i'll mention you in the commit.",True,{'THUMBS_UP': ['https://github.com/danielinux']}
cesanta/mongoose,https://github.com/cesanta/mongoose,652,2016-04-26T18:18:28Z,2016-04-26T19:56:43Z,2016-04-27T06:02:40Z,CLOSED,False,8,0,1,https://github.com/danielinux,Fixed compilation with MG_DISABLE_SOCKETPAIR,1,[],https://github.com/cesanta/mongoose/pull/652,https://github.com/danielinux,3,https://github.com/cesanta/mongoose/pull/652#issuecomment-214979154,"When MG_DISABLE_SOCKETPAIR is selected, not all calls to mg_socketpair are compiled out.


This change is","Thanks, this fixes our problem. Upstream mongoose now compiles with frosted-OS using -DMG_DISABLE_CGI
insane-adding-machines/frosted-userland@ce07f60",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,652,2016-04-26T18:18:28Z,2016-04-26T19:56:43Z,2016-04-27T06:02:40Z,CLOSED,False,8,0,1,https://github.com/danielinux,Fixed compilation with MG_DISABLE_SOCKETPAIR,1,[],https://github.com/cesanta/mongoose/pull/652,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/652#issuecomment-214979561,"When MG_DISABLE_SOCKETPAIR is selected, not all calls to mg_socketpair are compiled out.


This change is","after 21665e3 you shouldn't need explicit -DMG_DISABLE_CGI anymore but i suggest that you keep it, for clarity.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,657,2016-05-09T08:48:24Z,2019-01-16T11:28:04Z,2019-01-16T11:28:04Z,CLOSED,False,5,3,1,https://github.com/magcius,Send extra options with OPTIONS,1,[],https://github.com/cesanta/mongoose/pull/657,https://github.com/magcius,1,https://github.com/cesanta/mongoose/pull/657,"In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is","In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,657,2016-05-09T08:48:24Z,2019-01-16T11:28:04Z,2019-01-16T11:28:04Z,CLOSED,False,5,3,1,https://github.com/magcius,Send extra options with OPTIONS,1,[],https://github.com/cesanta/mongoose/pull/657,https://github.com/telesma,2,https://github.com/cesanta/mongoose/pull/657#issuecomment-454432107,"In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is",#516 will do the job,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,657,2016-05-09T08:48:24Z,2019-01-16T11:28:04Z,2019-01-16T11:28:04Z,CLOSED,False,5,3,1,https://github.com/magcius,Send extra options with OPTIONS,1,[],https://github.com/cesanta/mongoose/pull/657,https://github.com/magcius,3,https://github.com/cesanta/mongoose/pull/657#issuecomment-454433824,"In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is","That commit (which was back in 2015) was then erased when 518a7f8 happened. As far as I know, this is still relevant.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,657,2016-05-09T08:48:24Z,2019-01-16T11:28:04Z,2019-01-16T11:28:04Z,CLOSED,False,5,3,1,https://github.com/magcius,Send extra options with OPTIONS,1,[],https://github.com/cesanta/mongoose/pull/657,https://github.com/telesma,4,https://github.com/cesanta/mongoose/pull/657#issuecomment-454497161,"In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is",@magcius I don‘t know why such a regression could happen. CORS handling is a must feature for a webserver!,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,657,2016-05-09T08:48:24Z,2019-01-16T11:28:04Z,2019-01-16T11:28:04Z,CLOSED,False,5,3,1,https://github.com/magcius,Send extra options with OPTIONS,1,[],https://github.com/cesanta/mongoose/pull/657,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/657#issuecomment-454746186,"In order to support CORS, browsers make OPTIONS requests to ""preflight""
certain requests. We need to make sure that we reply to such requests
with our custom header options.


This change is","Integrated to the HEAD, dev branch",True,{'THUMBS_UP': ['https://github.com/telesma']}
cesanta/mongoose,https://github.com/cesanta/mongoose,659,2016-05-11T07:22:59Z,2016-05-11T17:28:12Z,2016-05-11T17:31:33Z,CLOSED,False,2,0,1,https://github.com/kndysfm,Add a include-guard for stdint.h,1,[],https://github.com/cesanta/mongoose/pull/659,https://github.com/kndysfm,1,https://github.com/cesanta/mongoose/pull/659,"These type definitions conflicted on including another external library.
Please review it.


This change is","These type definitions conflicted on including another external library.
Please review it.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,659,2016-05-11T07:22:59Z,2016-05-11T17:28:12Z,2016-05-11T17:31:33Z,CLOSED,False,2,0,1,https://github.com/kndysfm,Add a include-guard for stdint.h,1,[],https://github.com/cesanta/mongoose/pull/659,https://github.com/mkmik,2,https://github.com/cesanta/mongoose/pull/659#issuecomment-218432096,"These type definitions conflicted on including another external library.
Please review it.


This change is","Hi,
who defines _STDINT ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,659,2016-05-11T07:22:59Z,2016-05-11T17:28:12Z,2016-05-11T17:31:33Z,CLOSED,False,2,0,1,https://github.com/kndysfm,Add a include-guard for stdint.h,1,[],https://github.com/cesanta/mongoose/pull/659,https://github.com/mkmik,3,https://github.com/cesanta/mongoose/pull/659#issuecomment-218531522,"These type definitions conflicted on including another external library.
Please review it.


This change is","c84af7d might have fixed your issue. If not, let's reopen this and discuss it further. Please let us know.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,664,2016-06-07T07:39:20Z,2016-06-07T07:43:17Z,2016-06-07T07:43:17Z,CLOSED,False,2,1,1,https://github.com/labourcier,Fix compilation bug with MG_DISABLE_HTTP_WEBSOCKET,1,[],https://github.com/cesanta/mongoose/pull/664,https://github.com/labourcier,1,https://github.com/cesanta/mongoose/pull/664,"Close the code block inside the #ifdef block


This change is","Close the code block inside the #ifdef block


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,665,2016-06-07T08:09:38Z,2020-02-17T10:06:44Z,2020-02-17T10:06:45Z,CLOSED,False,4,1,1,https://github.com/labourcier,Fix compilation bug with MG_DISABLE_HTTP_WEBSOCKET,1,[],https://github.com/cesanta/mongoose/pull/665,https://github.com/labourcier,1,https://github.com/cesanta/mongoose/pull/665,"Close the code block inside the #ifdef block


This change is","Close the code block inside the #ifdef block


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,665,2016-06-07T08:09:38Z,2020-02-17T10:06:44Z,2020-02-17T10:06:45Z,CLOSED,False,4,1,1,https://github.com/labourcier,Fix compilation bug with MG_DISABLE_HTTP_WEBSOCKET,1,[],https://github.com/cesanta/mongoose/pull/665,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/665#issuecomment-586913736,"Close the code block inside the #ifdef block


This change is","Thanks!
Closing this as it is obsolete at this moment.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/schmurfy,1,https://github.com/cesanta/mongoose/pull/667,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is","the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/nkolban,2,https://github.com/cesanta/mongoose/pull/667#issuecomment-254021816,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is",I got burned by not knowing this information.  Please review this pull request and see if the docs can be updated.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/schmurfy,3,https://github.com/cesanta/mongoose/pull/667#issuecomment-254237894,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is","Yeah I fear you will not be the last, I had forgotten about this pull request I thought it would be reviewed/merged by now... it is not like the changes are huge either...",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/schmurfy,4,https://github.com/cesanta/mongoose/pull/667#issuecomment-361512894,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is","I just got back to this while looking my opened issues, this is still true, the documentation reference a non existing constant name, what could possibly delay a one line pull request by 2 years ?
if you don't want documentation fix just say it and close this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/schmurfy,5,https://github.com/cesanta/mongoose/pull/667#issuecomment-361512978,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is","my pull request is not even mergeable anyway and I won't bother updating it, do as you please.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,667,2016-06-13T13:48:23Z,2018-01-30T08:30:57Z,2018-09-20T14:13:48Z,CLOSED,False,1,1,1,https://github.com/schmurfy,MG_F_FINISHED_SENDING_DATA => MG_F_SEND_AND_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/667,https://github.com/jpmens,6,https://github.com/cesanta/mongoose/pull/667#issuecomment-423199123,"the constant was changed but the name is the old one in the documentation, also I can't find the two following constants anywhere in the code about buffering, I don't use them but someone more familiar with the code might want to have a look :)


This change is",Why wasn't this merged? Why is the documentation still inaccurate?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,669,2016-06-14T19:29:28Z,2020-02-17T10:08:47Z,2020-02-17T10:08:48Z,CLOSED,False,5,5,1,https://github.com/Jackarain,initialize char array,1,[],https://github.com/cesanta/mongoose/pull/669,https://github.com/Jackarain,1,https://github.com/cesanta/mongoose/pull/669,"Signed-off-by: jack jack.wgm@gmail.com


This change is","Signed-off-by: jack jack.wgm@gmail.com


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,669,2016-06-14T19:29:28Z,2020-02-17T10:08:47Z,2020-02-17T10:08:48Z,CLOSED,False,5,5,1,https://github.com/Jackarain,initialize char array,1,[],https://github.com/cesanta/mongoose/pull/669,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/669#issuecomment-586914671,"Signed-off-by: jack jack.wgm@gmail.com


This change is",There is no need to init those buffers.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,678,2016-07-06T06:51:24Z,2016-07-08T15:51:54Z,2016-07-08T15:51:54Z,MERGED,True,1,1,1,https://github.com/tbfly,!): Fix for compile error in Android.,1,[],https://github.com/cesanta/mongoose/pull/678,https://github.com/tbfly,1,https://github.com/cesanta/mongoose/pull/678,"Fix for compile error in Android.


This change is","Fix for compile error in Android.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,683,2016-08-01T14:48:30Z,2016-08-02T04:25:52Z,2016-08-02T04:25:52Z,CLOSED,False,19,19,2,https://github.com/ysc3839,Fix #682.,2,[],https://github.com/cesanta/mongoose/pull/683,https://github.com/ysc3839,1,https://github.com/cesanta/mongoose/pull/683,This change is,This change is,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,688,2016-08-25T02:14:17Z,2016-08-25T03:11:21Z,2016-08-25T03:22:26Z,CLOSED,False,1,0,1,https://github.com/sunxiaoguang,Copy remote peer's address to spawned thread's local connection,1,[],https://github.com/cesanta/mongoose/pull/688,https://github.com/sunxiaoguang,1,https://github.com/cesanta/mongoose/pull/688,"When threading is enabled, the sa field of connection created for spawned thread is not copied, therefore can't get real peer's address and port can be fixed by this patch.


This change is","When threading is enabled, the sa field of connection created for spawned thread is not copied, therefore can't get real peer's address and port can be fixed by this patch.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,688,2016-08-25T02:14:17Z,2016-08-25T03:11:21Z,2016-08-25T03:22:26Z,CLOSED,False,1,0,1,https://github.com/sunxiaoguang,Copy remote peer's address to spawned thread's local connection,1,[],https://github.com/cesanta/mongoose/pull/688,https://github.com/sunxiaoguang,2,https://github.com/cesanta/mongoose/pull/688#issuecomment-242270130,"When threading is enabled, the sa field of connection created for spawned thread is not copied, therefore can't get real peer's address and port can be fixed by this patch.


This change is","It was added by in master branch already, so I'm closing it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,689,2016-08-25T03:21:30Z,2020-12-07T10:26:21Z,2020-12-07T10:26:21Z,CLOSED,False,10,0,1,https://github.com/sunxiaoguang,Use socketpair directly on unix platform which all have this syscall.,1,[],https://github.com/cesanta/mongoose/pull/689,https://github.com/sunxiaoguang,1,https://github.com/cesanta/mongoose/pull/689,"Use socketpair directly on unix platform which all have this syscall on recent
versions. Current way of creating socketpair is more portable but may block
for nondeterministic time when calling connect. Also it reduce number of
syscalls have to make


This change is","Use socketpair directly on unix platform which all have this syscall on recent
versions. Current way of creating socketpair is more portable but may block
for nondeterministic time when calling connect. Also it reduce number of
syscalls have to make


This change is",True,{'THUMBS_UP': ['https://github.com/azadkuh']}
cesanta/mongoose,https://github.com/cesanta/mongoose,689,2016-08-25T03:21:30Z,2020-12-07T10:26:21Z,2020-12-07T10:26:21Z,CLOSED,False,10,0,1,https://github.com/sunxiaoguang,Use socketpair directly on unix platform which all have this syscall.,1,[],https://github.com/cesanta/mongoose/pull/689,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/689#issuecomment-739825987,"Use socketpair directly on unix platform which all have this syscall on recent
versions. Current way of creating socketpair is more portable but may block
for nondeterministic time when calling connect. Also it reduce number of
syscalls have to make


This change is","Integrated, d1d8a77
Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,700,2016-09-20T02:47:00Z,2020-12-07T10:27:26Z,2020-12-07T10:27:26Z,CLOSED,False,2,2,1,https://github.com/buaabarty,Fix a bug of server example code in the document,1,[],https://github.com/cesanta/mongoose/pull/700,https://github.com/buaabarty,1,https://github.com/cesanta/mongoose/pull/700,"Here is the origin code in the document.
#include ""mongoose.h""

static const char *s_http_port = ""8000"";

static void ev_handler(struct mg_connection *c, int ev, void *p) {
  if (ev == MG_EV_HTTP_REQUEST) {
    struct http_message *hm = (struct http_message *) p;

    // We have received an HTTP request. Parsed request is contained in `hm`.
    // Send HTTP reply to the client which shows full original request.
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
  }
}

int main(void) {
  struct mg_mgr mgr;
  struct mg_connection *c;

  mg_mgr_init(&mgr, NULL);
  c = mg_bind(&mgr, s_http_port, ev_handler);
  mg_set_protocol_http_websocket(c);

  for (;;) {
    mg_mgr_poll(&mgr, 1000);
  }
  mg_mgr_free(&mgr);

  return 0;
}
Let's see these two lines:
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
The hm is a pointer to struct http_message, but you use hm.message to obtain the element message of *hm. I think that hm->message should be the correct way to represent.
please review 😄  @cpq @rojer . Thank you so much.


This change is","Here is the origin code in the document.
#include ""mongoose.h""

static const char *s_http_port = ""8000"";

static void ev_handler(struct mg_connection *c, int ev, void *p) {
  if (ev == MG_EV_HTTP_REQUEST) {
    struct http_message *hm = (struct http_message *) p;

    // We have received an HTTP request. Parsed request is contained in `hm`.
    // Send HTTP reply to the client which shows full original request.
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
  }
}

int main(void) {
  struct mg_mgr mgr;
  struct mg_connection *c;

  mg_mgr_init(&mgr, NULL);
  c = mg_bind(&mgr, s_http_port, ev_handler);
  mg_set_protocol_http_websocket(c);

  for (;;) {
    mg_mgr_poll(&mgr, 1000);
  }
  mg_mgr_free(&mgr);

  return 0;
}
Let's see these two lines:
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
The hm is a pointer to struct http_message, but you use hm.message to obtain the element message of *hm. I think that hm->message should be the correct way to represent.
please review 😄  @cpq @rojer . Thank you so much.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,700,2016-09-20T02:47:00Z,2020-12-07T10:27:26Z,2020-12-07T10:27:26Z,CLOSED,False,2,2,1,https://github.com/buaabarty,Fix a bug of server example code in the document,1,[],https://github.com/cesanta/mongoose/pull/700,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/700#issuecomment-739826656,"Here is the origin code in the document.
#include ""mongoose.h""

static const char *s_http_port = ""8000"";

static void ev_handler(struct mg_connection *c, int ev, void *p) {
  if (ev == MG_EV_HTTP_REQUEST) {
    struct http_message *hm = (struct http_message *) p;

    // We have received an HTTP request. Parsed request is contained in `hm`.
    // Send HTTP reply to the client which shows full original request.
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
  }
}

int main(void) {
  struct mg_mgr mgr;
  struct mg_connection *c;

  mg_mgr_init(&mgr, NULL);
  c = mg_bind(&mgr, s_http_port, ev_handler);
  mg_set_protocol_http_websocket(c);

  for (;;) {
    mg_mgr_poll(&mgr, 1000);
  }
  mg_mgr_free(&mgr);

  return 0;
}
Let's see these two lines:
    mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
    mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
The hm is a pointer to struct http_message, but you use hm.message to obtain the element message of *hm. I think that hm->message should be the correct way to represent.
please review 😄  @cpq @rojer . Thank you so much.


This change is","Examples have been revamped, thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,701,2016-09-20T22:55:49Z,2016-09-20T22:59:04Z,2016-09-20T22:59:04Z,CLOSED,False,6,6,1,https://github.com/af-inet,consistent use of MG_MALLOC,1,[],https://github.com/cesanta/mongoose/pull/701,https://github.com/af-inet,1,https://github.com/cesanta/mongoose/pull/701,This change is,This change is,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,701,2016-09-20T22:55:49Z,2016-09-20T22:59:04Z,2016-09-20T22:59:04Z,CLOSED,False,6,6,1,https://github.com/af-inet,consistent use of MG_MALLOC,1,[],https://github.com/cesanta/mongoose/pull/701,https://github.com/af-inet,2,https://github.com/cesanta/mongoose/pull/701#issuecomment-248461334,This change is,"Actually, going to fix the other alloc calls before I PR.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,702,2016-09-20T23:08:31Z,2016-09-23T03:20:28Z,2016-09-23T03:20:28Z,CLOSED,False,0,0,0,https://github.com/af-inet,"Consistent MG_MALLOC, MG_REALLOC and MG_FREE calls.",0,[],https://github.com/cesanta/mongoose/pull/702,https://github.com/af-inet,1,https://github.com/cesanta/mongoose/pull/702,This change is,This change is,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,703,2016-09-21T18:24:06Z,2017-05-19T18:21:56Z,2017-05-19T18:21:56Z,CLOSED,False,4,0,1,https://github.com/makc,make websocket example serve index.html,1,[],https://github.com/cesanta/mongoose/pull/703,https://github.com/makc,1,https://github.com/cesanta/mongoose/pull/703,This change is,This change is,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,703,2016-09-21T18:24:06Z,2017-05-19T18:21:56Z,2017-05-19T18:21:56Z,CLOSED,False,4,0,1,https://github.com/makc,make websocket example serve index.html,1,[],https://github.com/cesanta/mongoose/pull/703,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/703#issuecomment-294108458,This change is,@ruslanvaliullin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,703,2016-09-21T18:24:06Z,2017-05-19T18:21:56Z,2017-05-19T18:21:56Z,CLOSED,False,4,0,1,https://github.com/makc,make websocket example serve index.html,1,[],https://github.com/cesanta/mongoose/pull/703,https://github.com/ruslanvaliullin,3,https://github.com/cesanta/mongoose/pull/703#issuecomment-294111155,This change is,ok,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,704,2016-09-23T03:24:39Z,2017-03-23T19:29:23Z,2017-03-23T19:29:23Z,CLOSED,False,25,25,1,https://github.com/af-inet,"Consistent MG_MALLOC, MG_REALLOC and MG_FREE calls.",1,[],https://github.com/cesanta/mongoose/pull/704,https://github.com/af-inet,1,https://github.com/cesanta/mongoose/pull/704,This change is,This change is,True,{'THUMBS_UP': ['https://github.com/thdot']}
cesanta/mongoose,https://github.com/cesanta/mongoose,704,2016-09-23T03:24:39Z,2017-03-23T19:29:23Z,2017-03-23T19:29:23Z,CLOSED,False,25,25,1,https://github.com/af-inet,"Consistent MG_MALLOC, MG_REALLOC and MG_FREE calls.",1,[],https://github.com/cesanta/mongoose/pull/704,https://github.com/alashkin,2,https://github.com/cesanta/mongoose/pull/704#issuecomment-288834599,This change is,Integrated in df5fff5,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,707,2016-09-29T11:38:03Z,2017-03-21T07:37:23Z,2017-03-21T07:37:23Z,CLOSED,False,1,1,1,https://github.com/vijayant123,Fixed typo error.,1,[],https://github.com/cesanta/mongoose/pull/707,https://github.com/vijayant123,1,https://github.com/cesanta/mongoose/pull/707,"A quick typo fix.


This change is","A quick typo fix.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,707,2016-09-29T11:38:03Z,2017-03-21T07:37:23Z,2017-03-21T07:37:23Z,CLOSED,False,1,1,1,https://github.com/vijayant123,Fixed typo error.,1,[],https://github.com/cesanta/mongoose/pull/707,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/707#issuecomment-287998832,"A quick typo fix.


This change is",Duplicate of #793,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,712,2016-10-08T20:43:46Z,2017-03-01T06:45:05Z,2017-03-01T06:45:05Z,CLOSED,False,1,1,1,https://github.com/jagoyette,Fixed issue #711 - mg_match_prefix fails to match single asterisk,1,[],https://github.com/cesanta/mongoose/pull/712,https://github.com/jagoyette,1,https://github.com/cesanta/mongoose/pull/712,"The change in this branch fixes the problem where mg_match_prefix fails to properly match a glob pattern with a single asterisk. I tested it with the following code:
#include ""mongoose.h""

int main()
{
    const char *str = ""/api/user/192/friends"";
    const char *pattern = ""/api/user/*/friends"";

    int numBytes = mg_match_prefix(pattern, strlen(pattern), str);
    if (numBytes < 0) {
        printf(""No match found\n"");
    } else {
        printf(""Match found: %d bytes\n"", numBytes);
    } 
}



This change is","The change in this branch fixes the problem where mg_match_prefix fails to properly match a glob pattern with a single asterisk. I tested it with the following code:
#include ""mongoose.h""

int main()
{
    const char *str = ""/api/user/192/friends"";
    const char *pattern = ""/api/user/*/friends"";

    int numBytes = mg_match_prefix(pattern, strlen(pattern), str);
    if (numBytes < 0) {
        printf(""No match found\n"");
    } else {
        printf(""Match found: %d bytes\n"", numBytes);
    } 
}



This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,712,2016-10-08T20:43:46Z,2017-03-01T06:45:05Z,2017-03-01T06:45:05Z,CLOSED,False,1,1,1,https://github.com/jagoyette,Fixed issue #711 - mg_match_prefix fails to match single asterisk,1,[],https://github.com/cesanta/mongoose/pull/712,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/712#issuecomment-283006713,"The change in this branch fixes the problem where mg_match_prefix fails to properly match a glob pattern with a single asterisk. I tested it with the following code:
#include ""mongoose.h""

int main()
{
    const char *str = ""/api/user/192/friends"";
    const char *pattern = ""/api/user/*/friends"";

    int numBytes = mg_match_prefix(pattern, strlen(pattern), str);
    if (numBytes < 0) {
        printf(""No match found\n"");
    } else {
        printf(""Match found: %d bytes\n"", numBytes);
    } 
}



This change is","@alashkin please verify, add unit test, and integrate.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,712,2016-10-08T20:43:46Z,2017-03-01T06:45:05Z,2017-03-01T06:45:05Z,CLOSED,False,1,1,1,https://github.com/jagoyette,Fixed issue #711 - mg_match_prefix fails to match single asterisk,1,[],https://github.com/cesanta/mongoose/pull/712,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/712#issuecomment-283259078,"The change in this branch fixes the problem where mg_match_prefix fails to properly match a glob pattern with a single asterisk. I tested it with the following code:
#include ""mongoose.h""

int main()
{
    const char *str = ""/api/user/192/friends"";
    const char *pattern = ""/api/user/*/friends"";

    int numBytes = mg_match_prefix(pattern, strlen(pattern), str);
    if (numBytes < 0) {
        printf(""No match found\n"");
    } else {
        printf(""Match found: %d bytes\n"", numBytes);
    } 
}



This change is","Fixed in one of previous commits
Thank you",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,716,2016-10-12T16:03:43Z,2016-12-05T02:08:44Z,2016-12-05T02:08:44Z,CLOSED,False,3,1,1,https://github.com/iSLC,Avoid snprintf linking errors on MinGW.,1,[],https://github.com/cesanta/mongoose/pull/716,https://github.com/iSLC,1,https://github.com/cesanta/mongoose/pull/716,"Don't create the _snprintf and _vsnprintf aliases for snprintf and vsnprintf as it could lead to linker issues on MinGW. Occurred on recent MinGW-w64 versions.


This change is","Don't create the _snprintf and _vsnprintf aliases for snprintf and vsnprintf as it could lead to linker issues on MinGW. Occurred on recent MinGW-w64 versions.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,719,2016-10-14T10:58:21Z,2017-03-01T06:34:20Z,2017-03-01T06:34:20Z,CLOSED,False,34,34,6,https://github.com/thdot,Fix misspelled words in source code and documentation,1,[],https://github.com/cesanta/mongoose/pull/719,https://github.com/thdot,1,https://github.com/cesanta/mongoose/pull/719,This change is,This change is,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,719,2016-10-14T10:58:21Z,2017-03-01T06:34:20Z,2017-03-01T06:34:20Z,CLOSED,False,34,34,6,https://github.com/thdot,Fix misspelled words in source code and documentation,1,[],https://github.com/cesanta/mongoose/pull/719,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/719#issuecomment-283006586,This change is,@alashkin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,719,2016-10-14T10:58:21Z,2017-03-01T06:34:20Z,2017-03-01T06:34:20Z,CLOSED,False,34,34,6,https://github.com/thdot,Fix misspelled words in source code and documentation,1,[],https://github.com/cesanta/mongoose/pull/719,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/719#issuecomment-283257494,This change is,"Most of mentioned stuff is generated, thus, it cannot be changed directly.
Root causes fixed in b5dd54a
Thanx!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,724,2016-10-21T10:00:52Z,2017-02-28T10:46:34Z,2017-02-28T10:46:34Z,CLOSED,False,0,0,0,https://github.com/linersheng,Merge pull request #1 from cesanta/master,1,[],https://github.com/cesanta/mongoose/pull/724,https://github.com/linersheng,1,https://github.com/cesanta/mongoose/pull/724,"sync


This change is","sync


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,728,2016-10-27T05:33:43Z,2016-11-01T09:56:16Z,2016-11-01T09:56:16Z,CLOSED,False,18,0,5,https://github.com/datonli,add some code to deal with MG_EV_CLOSE in client example,2,[],https://github.com/cesanta/mongoose/pull/728,https://github.com/datonli,1,https://github.com/cesanta/mongoose/pull/728,"add some code to deal with MG_EV_CLOSE  in case of server down and client hang up @ #727


This change is","add some code to deal with MG_EV_CLOSE  in case of server down and client hang up @ #727


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,728,2016-10-27T05:33:43Z,2016-11-01T09:56:16Z,2016-11-01T09:56:16Z,CLOSED,False,18,0,5,https://github.com/datonli,add some code to deal with MG_EV_CLOSE in client example,2,[],https://github.com/cesanta/mongoose/pull/728,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/728#issuecomment-257302991,"add some code to deal with MG_EV_CLOSE  in case of server down and client hang up @ #727


This change is",@alashkin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,728,2016-10-27T05:33:43Z,2016-11-01T09:56:16Z,2016-11-01T09:56:16Z,CLOSED,False,18,0,5,https://github.com/datonli,add some code to deal with MG_EV_CLOSE in client example,2,[],https://github.com/cesanta/mongoose/pull/728,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/728#issuecomment-257527934,"add some code to deal with MG_EV_CLOSE  in case of server down and client hang up @ #727


This change is",Integrated in e62dc8f,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/datonli,1,https://github.com/cesanta/mongoose/pull/733,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/datonli,2,https://github.com/cesanta/mongoose/pull/733#issuecomment-259131443,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Sorry for the so many commit info, but it's for synchronous the master branch. Actually, I just change one line only.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/datonli,3,https://github.com/cesanta/mongoose/pull/733#issuecomment-259313359,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is",please handle it @alashkin,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/alashkin,4,https://github.com/cesanta/mongoose/pull/733#issuecomment-259670743,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Integrated in 499a7d6
Thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/datonli,5,https://github.com/cesanta/mongoose/pull/733#issuecomment-259869586,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Hi @alashkin , I'm so wondering why you doesn't just accept my code? I couldn't see any difference between 499a7d6 and 7844453. May you let me know the reason please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/alashkin,6,https://github.com/cesanta/mongoose/pull/733#issuecomment-259899151,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Hi @osDanielLee!
Sure.
If you take a look to PR history of this repo, you can see, that all of them are closed with comment ""integrated in ....""
The reason is technical: this repo contains only amalgamated mongoose.[ch] & stuff, while in realty mongoose.c is a result of amalgamation of several files. So, in any case, I cannot merge PR right here, I have to move code to the real source file and then cesantabot amalgamates sources and publishes this repo: look into commit history history of this repo - none of them made by humans directly, everything published by cesantabot.
So, for small PRs we tend to simplify workflow and just copy-n-paste changes to the real sources. If PR is big and complicated we deamalgamate PR (or ask contributor to do this - amalgamation tools are available here: https://github.com/cesanta/mongoose/tree/master/tools), put the changes to sources and commit them back.
If you worries that I didn't preserved you name, we can fix it. For this you have to agreed with Cesanta CLA (https://docs.cesanta.com/contributors_la.shtml) and I'll recommit the thing with your name (but again - I'll close your PR in any case, as I said it is impossible to commit directly to this repo)
Sorry for inconvenience and again - thank you for your contribution.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,733,2016-11-08T13:04:33Z,2016-11-10T11:48:27Z,2016-11-11T14:51:29Z,CLOSED,False,1,1,1,https://github.com/datonli,fix mg_is_error logic wrong ,7,[],https://github.com/cesanta/mongoose/pull/733,https://github.com/datonli,7,https://github.com/cesanta/mongoose/pull/733#issuecomment-259952382,"Delete n == 0 in mg_is_error, because if connect function return 0, stand for connect work well, mg_is_error should be false not the TRUE( n == 0), look it carefully and you will find delete n == 0 won't effect the value of nc->err according to different rc value and errno.
Of course, if you don't delete n == 0 code, it won't raise a error, but it just happened to be right.


This change is","Hi, @alexander Alashkin , I've got the reason so don't be bothered about the commit things. We all want the repo and community to be better. Thanks for your kind explanation.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,747,2016-11-24T10:18:23Z,2020-12-07T10:28:00Z,2020-12-07T10:28:00Z,CLOSED,False,35,0,8,https://github.com/datonli,Add a method to modify connect default time in non-blocking mode,11,[],https://github.com/cesanta/mongoose/pull/747,https://github.com/datonli,1,https://github.com/cesanta/mongoose/pull/747,"Add a method to modify connect default time in non-blocking mode. Image in some general use occasions which the server ip given doesn't exist, due to setting non-blocking mode in mongoose default, it'll run just like right and we don't know the client is trying to connect nonexistent server until getting through a default time of connect, after that, select function would find the socketfd return read-write available both, actually connect is failed totally. The time is decided by system where you run, and it's probably between 75 seconds to a few minutes. It's wasting the time for our client at least 75 seconds especially for some occasions strict requirments for time. So the time need to be modified in some way.
Hope this would help community~~ LOL


This change is ","Add a method to modify connect default time in non-blocking mode. Image in some general use occasions which the server ip given doesn't exist, due to setting non-blocking mode in mongoose default, it'll run just like right and we don't know the client is trying to connect nonexistent server until getting through a default time of connect, after that, select function would find the socketfd return read-write available both, actually connect is failed totally. The time is decided by system where you run, and it's probably between 75 seconds to a few minutes. It's wasting the time for our client at least 75 seconds especially for some occasions strict requirments for time. So the time need to be modified in some way.
Hope this would help community~~ LOL


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,747,2016-11-24T10:18:23Z,2020-12-07T10:28:00Z,2020-12-07T10:28:00Z,CLOSED,False,35,0,8,https://github.com/datonli,Add a method to modify connect default time in non-blocking mode,11,[],https://github.com/cesanta/mongoose/pull/747,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/747#issuecomment-283006400,"Add a method to modify connect default time in non-blocking mode. Image in some general use occasions which the server ip given doesn't exist, due to setting non-blocking mode in mongoose default, it'll run just like right and we don't know the client is trying to connect nonexistent server until getting through a default time of connect, after that, select function would find the socketfd return read-write available both, actually connect is failed totally. The time is decided by system where you run, and it's probably between 75 seconds to a few minutes. It's wasting the time for our client at least 75 seconds especially for some occasions strict requirments for time. So the time need to be modified in some way.
Hope this would help community~~ LOL


This change is ",@osDanielLee could you merge all commits into one please?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,747,2016-11-24T10:18:23Z,2020-12-07T10:28:00Z,2020-12-07T10:28:00Z,CLOSED,False,35,0,8,https://github.com/datonli,Add a method to modify connect default time in non-blocking mode,11,[],https://github.com/cesanta/mongoose/pull/747,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/747#issuecomment-739826978,"Add a method to modify connect default time in non-blocking mode. Image in some general use occasions which the server ip given doesn't exist, due to setting non-blocking mode in mongoose default, it'll run just like right and we don't know the client is trying to connect nonexistent server until getting through a default time of connect, after that, select function would find the socketfd return read-write available both, actually connect is failed totally. The time is decided by system where you run, and it's probably between 75 seconds to a few minutes. It's wasting the time for our client at least 75 seconds especially for some occasions strict requirments for time. So the time need to be modified in some way.
Hope this would help community~~ LOL


This change is ",Closing as there is no response.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,754,2016-12-02T11:35:39Z,2017-03-01T10:16:20Z,2017-03-01T10:16:20Z,CLOSED,False,12,12,1,https://github.com/mredd,Fix out of bounds access in string comparisons,1,[],https://github.com/cesanta/mongoose/pull/754,https://github.com/mredd,1,https://github.com/cesanta/mongoose/pull/754,"Proposed fix for #752.


This change is ","Proposed fix for #752.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,754,2016-12-02T11:35:39Z,2017-03-01T10:16:20Z,2017-03-01T10:16:20Z,CLOSED,False,12,12,1,https://github.com/mredd,Fix out of bounds access in string comparisons,1,[],https://github.com/cesanta/mongoose/pull/754,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/754#issuecomment-283005708,"Proposed fix for #752.


This change is ",@alashkin please verify and integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,754,2016-12-02T11:35:39Z,2017-03-01T10:16:20Z,2017-03-01T10:16:20Z,CLOSED,False,12,12,1,https://github.com/mredd,Fix out of bounds access in string comparisons,1,[],https://github.com/cesanta/mongoose/pull/754,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/754#issuecomment-283300434,"Proposed fix for #752.


This change is ","Most of mentioned issues were fixed in previous commits, the rest fixed in d85d95a
Thank you",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,757,2016-12-09T09:35:12Z,2017-02-28T12:37:57Z,2017-02-28T12:38:08Z,CLOSED,False,6,6,1,https://github.com/mat007,Prevent conflict with openssl,1,[],https://github.com/cesanta/mongoose/pull/757,https://github.com/mat007,1,https://github.com/cesanta/mongoose/pull/757,"When linking openssl and mongoose in the same binary the MD5_Init, MD5_Update and MD5_Final symbols are defined twice. Renaming the ones in mongoose works around this issue.


This change is ","When linking openssl and mongoose in the same binary the MD5_Init, MD5_Update and MD5_Final symbols are defined twice. Renaming the ones in mongoose works around this issue.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,757,2016-12-09T09:35:12Z,2017-02-28T12:37:57Z,2017-02-28T12:38:08Z,CLOSED,False,6,6,1,https://github.com/mat007,Prevent conflict with openssl,1,[],https://github.com/cesanta/mongoose/pull/757,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/757#issuecomment-283006192,"When linking openssl and mongoose in the same binary the MD5_Init, MD5_Update and MD5_Final symbols are defined twice. Renaming the ones in mongoose works around this issue.


This change is ",@alashkin please verify and integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,757,2016-12-09T09:35:12Z,2017-02-28T12:37:57Z,2017-02-28T12:38:08Z,CLOSED,False,6,6,1,https://github.com/mat007,Prevent conflict with openssl,1,[],https://github.com/cesanta/mongoose/pull/757,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/757#issuecomment-283028268,"When linking openssl and mongoose in the same binary the MD5_Init, MD5_Update and MD5_Final symbols are defined twice. Renaming the ones in mongoose works around this issue.


This change is ","@cpq @mat007
I think -DDISABLE_MD5 does the same
Pls, reopen PR if I'm wrong",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,759,2016-12-10T13:48:20Z,2017-03-01T06:43:28Z,2017-03-01T06:43:28Z,CLOSED,False,1,2,1,https://github.com/mat007,Fix compilation error when defining MG_ENABLE_HTTP_STREAMING_MULTIPART,1,[],https://github.com/cesanta/mongoose/pull/759,https://github.com/mat007,1,https://github.com/cesanta/mongoose/pull/759,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,759,2016-12-10T13:48:20Z,2017-03-01T06:43:28Z,2017-03-01T06:43:28Z,CLOSED,False,1,2,1,https://github.com/mat007,Fix compilation error when defining MG_ENABLE_HTTP_STREAMING_MULTIPART,1,[],https://github.com/cesanta/mongoose/pull/759,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/759#issuecomment-283005805,This change is ,@alashkin please verify and integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,759,2016-12-10T13:48:20Z,2017-03-01T06:43:28Z,2017-03-01T06:43:28Z,CLOSED,False,1,2,1,https://github.com/mat007,Fix compilation error when defining MG_ENABLE_HTTP_STREAMING_MULTIPART,1,[],https://github.com/cesanta/mongoose/pull/759,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/759#issuecomment-283258823,This change is ,"Fixed in once of previous commit, closing
Thank you",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/jmgregory,1,https://github.com/cesanta/mongoose/pull/761,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/761#issuecomment-282994950,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ",@alashkin please verify this,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/761#issuecomment-283004517,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","This was a part of multithreading API, which was deleted.
Closing this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/761#issuecomment-286671171,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","I don't think this is related to multithreading.
It looks like it's about closing socketpairs - see issue #607.
@alashkin could you double-check please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/alashkin,5,https://github.com/cesanta/mongoose/pull/761#issuecomment-286672321,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","@cpq
spawn_handling_thread function was called from multithreaded_ev_handler only
Current master doesn't have this function at all",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/alashkin,6,https://github.com/cesanta/mongoose/pull/761#issuecomment-286672725,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ",If this is about #607 - proposed in this PR fix is wrong anyway,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/jmgregory,7,https://github.com/cesanta/mongoose/pull/761#issuecomment-286717609,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","Yes, on the surface, my issue seemed the same as #607, but once I had dug into it a bit and found the real cause, it might have been better to open a new issue.  Not that it matters anyways, since multithreading has been removed entirely.
While we're on that subject, removing multithreading seems like a pretty dramatic change to me.  Is there an announcements board or some place I could have found out you were about to do that?  Our app as built depends on multithreading; now we're stuck with the older version of Mongoose.  Our client paid for a Mongoose license.  If we'd have known how unstable the codebase was going to be, we might have looked elsewhere...",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/761#issuecomment-286720103,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","@jmgregory Justin thanks for the background.
It was particularly a MT support that was unstable and constantly giving us problems - you can search issues to see the history. The whole mechanism was not robust.
We'd be happy to collaborate to make a better solution for your client - are you open to do that? If yes, please describe a minimal case which would simulate the real life, and we can come up with an example that could be used as a skeleton.
Would that work for you?",True,{'THUMBS_UP': ['https://github.com/jmgregory']}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/jmgregory,9,https://github.com/cesanta/mongoose/pull/761#issuecomment-286733595,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","Thanks, Sergey, I appreciate the offer!  When I get some time, I'll go back and see if the newer version of the single-threaded event API can meet our needs.  If not, I'll get in touch with you.  At this point, part of me is thinking, ""if it ain't broke, don't fix it"".",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/alashkin,10,https://github.com/cesanta/mongoose/pull/761#issuecomment-288001257,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","@cpq
Reassigning to you
Fill free to return this issue back to me if there is subject to fix/implement/whatever",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,761,2016-12-16T23:28:38Z,2017-03-21T19:34:47Z,2017-03-21T19:34:47Z,CLOSED,False,6,0,1,https://github.com/jmgregory,Close dummy mg_mgr sockets when MG_ENABLE_BROADCAST is set (Issue 607),1,[],https://github.com/cesanta/mongoose/pull/761,https://github.com/cpq,11,https://github.com/cesanta/mongoose/pull/761#issuecomment-288193533,"When MG_ENABLE_BROADCAST is set, the dummy mg_mgr struct in spawn_handling_thread() creates its own socket pair, which never gets closed.  This pull requests closes the pair once we're done with dummy.


This change is ","Ok closing this, @jmgregory please let us know if you need an assistance from our side!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/lmiguelmh,1,https://github.com/cesanta/mongoose/pull/767,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ","if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/767#issuecomment-282994481,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ",@alashkin please verify and integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/767#issuecomment-283299752,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ","Fixed in aed6d05
Thanks",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/lmiguelmh,4,https://github.com/cesanta/mongoose/pull/767#issuecomment-284248798,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ","Thanks for not accepting my push detecting and fixing this issue took me like 3 days. :(
BTW the comment ""if client closes close too"" is wrong: the client doesn't want to close. The problem is that this test is only valid when the frame is not a reassembled one. A reassembled frame could have any data and the first byte of that data could be WEBSOCKET_OP_CLOSE.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/vhmth,5,https://github.com/cesanta/mongoose/pull/767#issuecomment-362798952,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ",^ Why would you close @lmiguelmh's PR and push the same code with no explanation as to why that was done?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/rojer,6,https://github.com/cesanta/mongoose/pull/767#issuecomment-362802868,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ","@vhmth this is due to the way our repositories are set up: there is a private repository that we work on and then public repositories, including cesanta/mongoose, are published from it. aed6d05 is such a commit, made to the internal repo and then published from it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,767,2016-12-28T20:10:35Z,2017-03-01T10:13:29Z,2018-02-04T20:12:24Z,CLOSED,False,5,3,1,https://github.com/lmiguelmh,reassembled buffer should not be tested for WEBSOCKET_OP_CLOSE,1,[],https://github.com/cesanta/mongoose/pull/767,https://github.com/vhmth,7,https://github.com/cesanta/mongoose/pull/767#issuecomment-362935674,"if reass==1 then frames are appended to the reassembled buffer thus buf[0] will have whatever data wsm.data[0] had (see memmove in line #8882) so is possible that the 8-LSB will be WEBSOCKET_OP_CLOSE and the connection will be closed. In fact this was the reason for the issue #740


This change is ","I see @rojer - understood. Should that be added when opening a new PR as a note? That way people won't be upset/confused like @lmiguelmh seemed to be here. Not trying to make a mountain out of a mole hill, but I think mongoose will see a lot of drop-off from potential repeat-contributors if they get their code merged without an explanation.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,771,2017-01-16T15:36:03Z,2017-01-16T19:40:22Z,2017-01-16T19:40:22Z,CLOSED,False,3,1,1,https://github.com/buzinas,Update mime types for woff and woff2 fonts according to W3C,1,[],https://github.com/cesanta/mongoose/pull/771,https://github.com/buzinas,1,https://github.com/cesanta/mongoose/pull/771,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,773,2017-01-18T17:49:00Z,2017-03-01T10:14:32Z,2017-03-01T10:14:32Z,CLOSED,False,2,0,1,https://github.com/saces,Add a backend feature.,1,[],https://github.com/cesanta/mongoose/pull/773,https://github.com/saces,1,https://github.com/cesanta/mongoose/pull/773,"Its just a simple #ifdef, if MG_VIRTUAL_FILESYSTEM
is defined you have to link your own implementation
for mg_stat, mg_[f]open, and mg_read.
So you can serve files directly from android assets for example.



This change is ","Its just a simple #ifdef, if MG_VIRTUAL_FILESYSTEM
is defined you have to link your own implementation
for mg_stat, mg_[f]open, and mg_read.
So you can serve files directly from android assets for example.



This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,773,2017-01-18T17:49:00Z,2017-03-01T10:14:32Z,2017-03-01T10:14:32Z,CLOSED,False,2,0,1,https://github.com/saces,Add a backend feature.,1,[],https://github.com/cesanta/mongoose/pull/773,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/773#issuecomment-283006062,"Its just a simple #ifdef, if MG_VIRTUAL_FILESYSTEM
is defined you have to link your own implementation
for mg_stat, mg_[f]open, and mg_read.
So you can serve files directly from android assets for example.



This change is ","@alashkin please integrate, and add to the docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,773,2017-01-18T17:49:00Z,2017-03-01T10:14:32Z,2017-03-01T10:14:32Z,CLOSED,False,2,0,1,https://github.com/saces,Add a backend feature.,1,[],https://github.com/cesanta/mongoose/pull/773,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/773#issuecomment-283300005,"Its just a simple #ifdef, if MG_VIRTUAL_FILESYSTEM
is defined you have to link your own implementation
for mg_stat, mg_[f]open, and mg_read.
So you can serve files directly from android assets for example.



This change is ",Implemented in 920e8d9,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,778,2017-02-03T10:19:31Z,2017-02-03T10:23:30Z,2017-02-03T10:23:31Z,MERGED,True,0,195425,352,https://github.com/alashkin,Remove examples,1,[],https://github.com/cesanta/mongoose/pull/778,https://github.com/alashkin,1,https://github.com/cesanta/mongoose/pull/778,"We stopped to publish examples to this repo.
This PR removes already published stuff.
(I don't want to put this removal to publish script, we need to do it only once)


This change is ","We stopped to publish examples to this repo.
This PR removes already published stuff.
(I don't want to put this removal to publish script, we need to do it only once)


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,785,2017-02-17T18:32:43Z,2017-02-28T09:54:31Z,2017-02-28T09:54:31Z,CLOSED,False,35,0,2,https://github.com/makdharma,add simplest basel BUILD file,3,[],https://github.com/cesanta/mongoose/pull/785,https://github.com/makdharma,1,https://github.com/cesanta/mongoose/pull/785,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,785,2017-02-17T18:32:43Z,2017-02-28T09:54:31Z,2017-02-28T09:54:31Z,CLOSED,False,35,0,2,https://github.com/makdharma,add simplest basel BUILD file,3,[],https://github.com/cesanta/mongoose/pull/785,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/785#issuecomment-282994124,This change is ,"Thanks, but we're not adding a parallel build system at this point.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,786,2017-02-27T06:32:47Z,2017-02-28T12:32:09Z,2017-02-28T12:32:09Z,CLOSED,False,2,2,1,https://github.com/estrm,Update server_example.md,1,[],https://github.com/cesanta/mongoose/pull/786,https://github.com/estrm,1,https://github.com/cesanta/mongoose/pull/786,"I think that these changes can polish the source file.


This change is ","I think that these changes can polish the source file.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,786,2017-02-27T06:32:47Z,2017-02-28T12:32:09Z,2017-02-28T12:32:09Z,CLOSED,False,2,2,1,https://github.com/estrm,Update server_example.md,1,[],https://github.com/cesanta/mongoose/pull/786,https://github.com/estrm,2,https://github.com/cesanta/mongoose/pull/786#issuecomment-282641185,"I think that these changes can polish the source file.


This change is ","Using the example provided, some error occurred, like
my system  { Linux sunyiming 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux }
gcc -o main server_example.c mongoose.c
server_example.c: In function ‘ev_handler’:
server_example.c:11:28: error: request for member ‘message’ in something not a structure or union
     mg_send_head(c, 200, hm.message.len, ""Content-Type: text/plain"");
                            ^
server_example.c:12:28: error: request for member ‘message’ in something not a structure or union
     mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
                            ^
server_example.c:12:44: error: request for member ‘message’ in something not a structure or union
     mg_printf(c, ""%.*s"", hm.message.len, hm.message.p);
                                            ^
makefile:3: recipe for target 'main' failed
make: *** [main] Error 1

``",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,786,2017-02-27T06:32:47Z,2017-02-28T12:32:09Z,2017-02-28T12:32:09Z,CLOSED,False,2,2,1,https://github.com/estrm,Update server_example.md,1,[],https://github.com/cesanta/mongoose/pull/786,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/786#issuecomment-282993630,"I think that these changes can polish the source file.


This change is ",@alashkin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,786,2017-02-27T06:32:47Z,2017-02-28T12:32:09Z,2017-02-28T12:32:09Z,CLOSED,False,2,2,1,https://github.com/estrm,Update server_example.md,1,[],https://github.com/cesanta/mongoose/pull/786,https://github.com/alashkin,4,https://github.com/cesanta/mongoose/pull/786#issuecomment-283027166,"I think that these changes can polish the source file.


This change is ","Integrated in f7c0a2e
Thanx!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,787,2017-02-27T07:31:42Z,2017-02-28T06:56:36Z,2017-02-28T06:56:36Z,CLOSED,False,4,2,1,https://github.com/estrm,Update client_example.md,1,[],https://github.com/cesanta/mongoose/pull/787,https://github.com/estrm,1,https://github.com/cesanta/mongoose/pull/787,"find three bugs.


This change is ","find three bugs.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,787,2017-02-27T07:31:42Z,2017-02-28T06:56:36Z,2017-02-28T06:56:36Z,CLOSED,False,4,2,1,https://github.com/estrm,Update client_example.md,1,[],https://github.com/cesanta/mongoose/pull/787,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/787#issuecomment-282748323,"find three bugs.


This change is ",@alashkin please integrate!,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,787,2017-02-27T07:31:42Z,2017-02-28T06:56:36Z,2017-02-28T06:56:36Z,CLOSED,False,4,2,1,https://github.com/estrm,Update client_example.md,1,[],https://github.com/cesanta/mongoose/pull/787,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/787#issuecomment-282958653,"find three bugs.


This change is ","Integrated in 71d0972
@Guguant thanx!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,788,2017-02-28T08:44:43Z,2017-02-28T10:55:56Z,2017-02-28T10:55:56Z,CLOSED,False,1,1,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/788,https://github.com/estrm,1,https://github.com/cesanta/mongoose/pull/788,"a small bug.


This change is ","a small bug.


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,788,2017-02-28T08:44:43Z,2017-02-28T10:55:56Z,2017-02-28T10:55:56Z,CLOSED,False,1,1,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/788,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/788#issuecomment-282993508,"a small bug.


This change is ",@alashkin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,788,2017-02-28T08:44:43Z,2017-02-28T10:55:56Z,2017-02-28T10:55:56Z,CLOSED,False,1,1,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/788,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/788#issuecomment-283008562,"a small bug.


This change is ","Integrated in 874b5bf
Thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,790,2017-03-02T08:39:31Z,2017-03-15T08:06:27Z,2017-03-16T07:00:36Z,CLOSED,False,10,9,2,https://github.com/benrubson,Prefix MD5 functions,1,[],https://github.com/cesanta/mongoose/pull/790,https://github.com/benrubson,1,https://github.com/cesanta/mongoose/pull/790,"Hi,
This PR solves issue #789.
Thank you 👍
Ben


This change is ","Hi,
This PR solves issue #789.
Thank you 👍
Ben


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,791,2017-03-04T04:37:05Z,2017-03-04T04:39:42Z,2017-03-04T04:39:42Z,CLOSED,False,38748,8316,252,https://github.com/jagoyette,Update fork try 2,223,[],https://github.com/cesanta/mongoose/pull/791,https://github.com/jagoyette,1,https://github.com/cesanta/mongoose/pull/791,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,793,2017-03-10T02:56:51Z,2017-03-21T10:48:28Z,2017-03-21T10:48:28Z,CLOSED,False,2,2,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/793,https://github.com/estrm,1,https://github.com/cesanta/mongoose/pull/793,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,793,2017-03-10T02:56:51Z,2017-03-21T10:48:28Z,2017-03-21T10:48:28Z,CLOSED,False,2,2,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/793,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/793#issuecomment-286671383,This change is ,@alashkin please integrate,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,793,2017-03-10T02:56:51Z,2017-03-21T10:48:28Z,2017-03-21T10:48:28Z,CLOSED,False,2,2,1,https://github.com/estrm,Update mongoose.h,1,[],https://github.com/cesanta/mongoose/pull/793,https://github.com/alashkin,3,https://github.com/cesanta/mongoose/pull/793#issuecomment-288041714,This change is ,Integrated in 14094aa,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,794,2017-03-10T03:56:45Z,2017-03-23T13:25:52Z,2017-03-23T13:25:52Z,CLOSED,False,1,1,1,https://github.com/estrm,Update mg_send_http_chunk.md,1,[],https://github.com/cesanta/mongoose/pull/794,https://github.com/estrm,1,https://github.com/cesanta/mongoose/pull/794,This change is ,This change is ,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,794,2017-03-10T03:56:45Z,2017-03-23T13:25:52Z,2017-03-23T13:25:52Z,CLOSED,False,1,1,1,https://github.com/estrm,Update mg_send_http_chunk.md,1,[],https://github.com/cesanta/mongoose/pull/794,https://github.com/alashkin,2,https://github.com/cesanta/mongoose/pull/794#issuecomment-288718138,This change is ,Fixed in #793,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/benrubson,1,https://github.com/cesanta/mongoose/pull/796,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ","Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/alashkin,2,https://github.com/cesanta/mongoose/pull/796#issuecomment-288042676,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ",Integrated in d9243d1,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/benrubson,3,https://github.com/cesanta/mongoose/pull/796#issuecomment-288046475,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ","@alashkin thank you 👍
You did not merge the doc part ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/benrubson,4,https://github.com/cesanta/mongoose/pull/796#issuecomment-288047072,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ","OK found here :
2fb145d
Perfect thx 👍",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/alashkin,5,https://github.com/cesanta/mongoose/pull/796#issuecomment-288053527,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ","@benrubson
I didnt merge doc from your PR - i use another names for macroses (with CS_ prefix, that is more correct)
Hope you ok with it",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,796,2017-03-16T07:00:18Z,2017-03-21T10:52:38Z,2017-03-21T11:54:06Z,CLOSED,False,3,3,2,https://github.com/benrubson,Update DISABLE_MD5 flag,1,[],https://github.com/cesanta/mongoose/pull/796,https://github.com/benrubson,6,https://github.com/cesanta/mongoose/pull/796#issuecomment-288055981,"Hello,
This PR updates the closing DISABLE_MD5 flag which was not correctly set, leading to these errors :
Undefined symbols for architecture x86_64:
  ""_MD5_Final"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Init"", referenced from:
      _cs_md5 in mongoose.o
  ""_MD5_Update"", referenced from:
      _cs_md5 in mongoose.o
ld: symbol(s) not found for architecture x86_64

It also updates the doc with the correct flag names.
Thx 👍
Ben


This change is ","Yes of course, perfect, thank you 👍",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,824,2017-06-15T10:02:16Z,2017-07-17T14:14:39Z,2017-07-17T14:14:39Z,CLOSED,False,1,1,1,https://github.com/yanngarras,FIX : broken link to simplest_web_server_ssl,1,[],https://github.com/cesanta/mongoose/pull/824,https://github.com/yanngarras,1,https://github.com/cesanta/mongoose/pull/824,Change broken link to simplest_web_server_ssl,Change broken link to simplest_web_server_ssl,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,829,2017-06-30T10:30:36Z,2017-07-17T14:11:57Z,2017-07-17T14:11:57Z,CLOSED,False,1,1,1,https://github.com/VitorDiToro,Fixed the code block,1,[],https://github.com/cesanta/mongoose/pull/829,https://github.com/VitorDiToro,1,https://github.com/cesanta/mongoose/pull/829,"Fixed the block of code for this sentence ""#!/path/to/php-cgi.exe and #!/path/to/perl.exe""","Fixed the block of code for this sentence ""#!/path/to/php-cgi.exe and #!/path/to/perl.exe""",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,831,2017-07-03T00:17:52Z,2017-07-03T10:54:17Z,2017-07-03T10:54:17Z,CLOSED,False,10,1,1,https://github.com/hendrikw01,Fix for recent openSSL,1,[],https://github.com/cesanta/mongoose/pull/831,https://github.com/hendrikw01,1,https://github.com/cesanta/mongoose/pull/831,"Replaced msg_callback_arg with SSL_CTX_set_app_data / SSL_CTX_get_app_data
This PR fixes: #826","Replaced msg_callback_arg with SSL_CTX_set_app_data / SSL_CTX_get_app_data
This PR fixes: #826",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,831,2017-07-03T00:17:52Z,2017-07-03T10:54:17Z,2017-07-03T10:54:17Z,CLOSED,False,10,1,1,https://github.com/hendrikw01,Fix for recent openSSL,1,[],https://github.com/cesanta/mongoose/pull/831,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/831#issuecomment-312568351,"Replaced msg_callback_arg with SSL_CTX_set_app_data / SSL_CTX_get_app_data
This PR fixes: #826",@rojer please verify and integrate if valid,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,831,2017-07-03T00:17:52Z,2017-07-03T10:54:17Z,2017-07-03T10:54:17Z,CLOSED,False,10,1,1,https://github.com/hendrikw01,Fix for recent openSSL,1,[],https://github.com/cesanta/mongoose/pull/831,https://github.com/rojer,3,https://github.com/cesanta/mongoose/pull/831#issuecomment-312611537,"Replaced msg_callback_arg with SSL_CTX_set_app_data / SSL_CTX_get_app_data
This PR fixes: #826","yes, using SSL_CTX_get/set_app_data is the right thing to do here.
there's no need for ifdef check, as these functions are present even in ancient versions of openssl. i simply didn't find them at the time when i was writing this code.
i'm going to create a separate PR to apply this to our internal repo.
thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,833,2017-07-05T20:19:39Z,2017-08-17T15:20:35Z,2017-08-17T15:20:35Z,CLOSED,False,4,7,1,https://github.com/CfirTsabari,fixing ignoring DhcpNameServer in case that the NameServer key is empty.,2,[],https://github.com/cesanta/mongoose/pull/833,https://github.com/CfirTsabari,1,https://github.com/cesanta/mongoose/pull/833,"fixing ignoring DhcpNameServer in case that the NameServer key is empty.
#832","fixing ignoring DhcpNameServer in case that the NameServer key is empty.
#832",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,833,2017-07-05T20:19:39Z,2017-08-17T15:20:35Z,2017-08-17T15:20:35Z,CLOSED,False,4,7,1,https://github.com/CfirTsabari,fixing ignoring DhcpNameServer in case that the NameServer key is empty.,2,[],https://github.com/cesanta/mongoose/pull/833,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/833#issuecomment-315706131,"fixing ignoring DhcpNameServer in case that the NameServer key is empty.
#832","Ruslan, please verify and integrate if it is valid.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,851,2017-09-04T04:57:25Z,2018-10-06T09:28:21Z,2018-10-06T09:28:21Z,CLOSED,False,1,1,1,https://github.com/16yuki0702,Fix version number,1,[],https://github.com/cesanta/mongoose/pull/851,https://github.com/16yuki0702,1,https://github.com/cesanta/mongoose/pull/851,"Although it is not a big deal, as I downloaded version 6.8 and used it,
the MG_VERSION macro still remains 6.7.
So I fixed it to 6.8.
Thank you so much.","Although it is not a big deal, as I downloaded version 6.8 and used it,
the MG_VERSION macro still remains 6.7.
So I fixed it to 6.8.
Thank you so much.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,855,2017-09-13T10:32:48Z,2017-09-13T10:48:51Z,2017-09-13T12:01:43Z,MERGED,True,3489,2008,88,https://github.com/rojer,Mongoose 6.9,137,[],https://github.com/cesanta/mongoose/pull/855,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/855,"API changes:

MG_ENABLE_CALLBACK_USERDATA - if set, changes signature of event handler function to include user_data argument. Disabled by default for now, in the future this will become the default.
mg_set_nameserver() - specify DNS server to use
mg_assemble_uri() - assemble a URI from parts
mg_connect_ws() now accepts http:// URLs

Bug fixes:

Fix parsing of MQTT QoS > 0 PUBLISH messages
Fix MQTT PUB{ACK,REC,REL,COMP} and UNSUBACK flags
Properly shut down the SSL connection (send ""close notify"" TLS message)
Fix mg_get_http_var() return value
Fix MQTT handshake; change client protocol to version 3.1.1
Fix Handling of multiple MQTT messages per RECV event
Update to make lwip_net_if thread-safe
Use DhcpNameServer on Windows
Fix MQTT message parsing issues
Fix DNS name uncompression that could lead to infinite loop
Fix WS frame reassembly issues","API changes:

MG_ENABLE_CALLBACK_USERDATA - if set, changes signature of event handler function to include user_data argument. Disabled by default for now, in the future this will become the default.
mg_set_nameserver() - specify DNS server to use
mg_assemble_uri() - assemble a URI from parts
mg_connect_ws() now accepts http:// URLs

Bug fixes:

Fix parsing of MQTT QoS > 0 PUBLISH messages
Fix MQTT PUB{ACK,REC,REL,COMP} and UNSUBACK flags
Properly shut down the SSL connection (send ""close notify"" TLS message)
Fix mg_get_http_var() return value
Fix MQTT handshake; change client protocol to version 3.1.1
Fix Handling of multiple MQTT messages per RECV event
Update to make lwip_net_if thread-safe
Use DhcpNameServer on Windows
Fix MQTT message parsing issues
Fix DNS name uncompression that could lead to infinite loop
Fix WS frame reassembly issues",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,856,2017-09-13T11:48:07Z,2017-09-13T11:57:33Z,2017-09-13T11:57:36Z,MERGED,True,1,1,1,https://github.com/rojer,Mongoose 6.9,1,[],https://github.com/cesanta/mongoose/pull/856,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/856,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,863,2017-09-25T22:07:28Z,2020-12-12T17:06:48Z,2020-12-12T17:06:48Z,CLOSED,False,26,0,2,https://github.com/Silverspur,Add a fallback resource as new option for serving http.,2,[],https://github.com/cesanta/mongoose/pull/863,https://github.com/Silverspur,1,https://github.com/cesanta/mongoose/pull/863,"Most web framework supporting routing request servers to support a fallback resource to be served when the uri does not match any actual file, so as to 'redirect' all requests to a single file (which in term uses the uri in the treatment to serve the actually requested resource).
This is what this does: an new field fallback_resource is added to the mg_serve_http_opts structure, and used in the mg_serve_http function in case the requested resource is not found.","Most web framework supporting routing request servers to support a fallback resource to be served when the uri does not match any actual file, so as to 'redirect' all requests to a single file (which in term uses the uri in the treatment to serve the actually requested resource).
This is what this does: an new field fallback_resource is added to the mg_serve_http_opts structure, and used in the mg_serve_http function in case the requested resource is not found.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,875,2017-11-17T21:14:40Z,2020-12-07T10:29:50Z,2020-12-07T10:29:50Z,CLOSED,False,1,1,1,https://github.com/discosultan,Fix documentation link 404 in README.md,1,[],https://github.com/cesanta/mongoose/pull/875,https://github.com/discosultan,1,https://github.com/cesanta/mongoose/pull/875,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,875,2017-11-17T21:14:40Z,2020-12-07T10:29:50Z,2020-12-07T10:29:50Z,CLOSED,False,1,1,1,https://github.com/discosultan,Fix documentation link 404 in README.md,1,[],https://github.com/cesanta/mongoose/pull/875,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/875#issuecomment-739828120,,"Closing this - documentation has been refactored.
Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,876,2017-11-18T01:55:15Z,2020-12-07T10:47:49Z,2020-12-07T10:47:49Z,CLOSED,False,1,1,1,https://github.com/tinylcy,Modify the method comments that are inconsistent with the parameters.,1,[],https://github.com/cesanta/mongoose/pull/876,https://github.com/tinylcy,1,https://github.com/cesanta/mongoose/pull/876,Modify the method comments that are inconsistent with the parameters.,Modify the method comments that are inconsistent with the parameters.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,876,2017-11-18T01:55:15Z,2020-12-07T10:47:49Z,2020-12-07T10:47:49Z,CLOSED,False,1,1,1,https://github.com/tinylcy,Modify the method comments that are inconsistent with the parameters.,1,[],https://github.com/cesanta/mongoose/pull/876,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/876#issuecomment-739837729,Modify the method comments that are inconsistent with the parameters.,"Closing this, as the docstrings are gone, and code refactored.
Thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,877,2017-11-21T10:51:43Z,2020-12-12T23:54:51Z,2020-12-12T23:54:52Z,CLOSED,False,4,0,1,https://github.com/dlobato,Set session id context to allow session reuse on two-way ssl (openssl),1,[],https://github.com/cesanta/mongoose/pull/877,https://github.com/dlobato,1,https://github.com/cesanta/mongoose/pull/877,"Two way SSL currently can't reuse tls session when using openssl. This can be verified using s_client tool from openssl as follows:
$> openssl s_client -connect localhost:8443 -CAfile ca-chain.cert.pem -cert bob@example.com.cert.pem -key bob@example.com.key.pem -reconnect
given proper CA and client cert files we should see that session can't be reused (it works fine on one-way ssl).
Reference: https://wiki.openssl.org/index.php/Manual:SSL_CTX_set_session_id_context(3)

If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.

I'm not 100% sure about setting such id to a default value, although as a SSL_CTX is created per server, I'm assuming sessions are not shared and therefore same session id should not point to same data on different servers.","Two way SSL currently can't reuse tls session when using openssl. This can be verified using s_client tool from openssl as follows:
$> openssl s_client -connect localhost:8443 -CAfile ca-chain.cert.pem -cert bob@example.com.cert.pem -key bob@example.com.key.pem -reconnect
given proper CA and client cert files we should see that session can't be reused (it works fine on one-way ssl).
Reference: https://wiki.openssl.org/index.php/Manual:SSL_CTX_set_session_id_context(3)

If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.

I'm not 100% sure about setting such id to a default value, although as a SSL_CTX is created per server, I'm assuming sessions are not shared and therefore same session id should not point to same data on different servers.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,877,2017-11-21T10:51:43Z,2020-12-12T23:54:51Z,2020-12-12T23:54:52Z,CLOSED,False,4,0,1,https://github.com/dlobato,Set session id context to allow session reuse on two-way ssl (openssl),1,[],https://github.com/cesanta/mongoose/pull/877,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/877#issuecomment-743922104,"Two way SSL currently can't reuse tls session when using openssl. This can be verified using s_client tool from openssl as follows:
$> openssl s_client -connect localhost:8443 -CAfile ca-chain.cert.pem -cert bob@example.com.cert.pem -key bob@example.com.key.pem -reconnect
given proper CA and client cert files we should see that session can't be reused (it works fine on one-way ssl).
Reference: https://wiki.openssl.org/index.php/Manual:SSL_CTX_set_session_id_context(3)

If the session id context is not set on an SSL/TLS server and client certificates are used, stored sessions will not be reused but a fatal error will be flagged and the handshake will fail.

I'm not 100% sure about setting such id to a default value, although as a SSL_CTX is created per server, I'm assuming sessions are not shared and therefore same session id should not point to same data on different servers.","Thanks.
Closing this, as the current codebase has this change in.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,878,2017-11-22T16:17:50Z,2020-12-11T13:04:52Z,2020-12-11T13:04:52Z,CLOSED,False,1,1,1,https://github.com/jobezic,Update api_server.c,1,[],https://github.com/cesanta/mongoose/pull/878,https://github.com/jobezic,1,https://github.com/cesanta/mongoose/pull/878,Fix bad comparison.,Fix bad comparison.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,878,2017-11-22T16:17:50Z,2020-12-11T13:04:52Z,2020-12-11T13:04:52Z,CLOSED,False,1,1,1,https://github.com/jobezic,Update api_server.c,1,[],https://github.com/cesanta/mongoose/pull/878,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/878#issuecomment-743181563,Fix bad comparison.,"Thank you.
Closing this, as  with 7.0, the api_server example is gone.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,879,2017-11-23T16:55:00Z,2020-12-12T14:52:16Z,2020-12-12T14:52:16Z,CLOSED,False,1,1,1,https://github.com/wisnoi,Fix docs link in README.md,1,[],https://github.com/cesanta/mongoose/pull/879,https://github.com/wisnoi,1,https://github.com/cesanta/mongoose/pull/879,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,879,2017-11-23T16:55:00Z,2020-12-12T14:52:16Z,2020-12-12T14:52:16Z,CLOSED,False,1,1,1,https://github.com/wisnoi,Fix docs link in README.md,1,[],https://github.com/cesanta/mongoose/pull/879,https://github.com/amilcarlucas,2,https://github.com/cesanta/mongoose/pull/879#issuecomment-666282045,,Can you rebase this on master?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,879,2017-11-23T16:55:00Z,2020-12-12T14:52:16Z,2020-12-12T14:52:16Z,CLOSED,False,1,1,1,https://github.com/wisnoi,Fix docs link in README.md,1,[],https://github.com/cesanta/mongoose/pull/879,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/879#issuecomment-743767212,,"Fixed, and docs refactored.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,880,2017-11-23T16:55:37Z,2020-12-07T10:49:49Z,2020-12-07T10:49:50Z,CLOSED,False,1,1,1,https://github.com/wisnoi,Fix CLA link in CONTRIBUTING.md,1,[],https://github.com/cesanta/mongoose/pull/880,https://github.com/wisnoi,1,https://github.com/cesanta/mongoose/pull/880,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,880,2017-11-23T16:55:37Z,2020-12-07T10:49:49Z,2020-12-07T10:49:50Z,CLOSED,False,1,1,1,https://github.com/wisnoi,Fix CLA link in CONTRIBUTING.md,1,[],https://github.com/cesanta/mongoose/pull/880,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/880#issuecomment-739838718,,"The contributing.md is gone, so closing this.
Thanks for the fix!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,884,2018-01-12T14:42:47Z,2020-12-24T06:58:30Z,2020-12-24T06:58:30Z,CLOSED,False,11,13,2,https://github.com/schmurfy,stop mqqt broker from using user_data,2,[],https://github.com/cesanta/mongoose/pull/884,https://github.com/schmurfy,1,https://github.com/cesanta/mongoose/pull/884,"makes mqtt broker use connection->priv_2 instead of connection->user_data, see #883","makes mqtt broker use connection->priv_2 instead of connection->user_data, see #883",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,884,2018-01-12T14:42:47Z,2020-12-24T06:58:30Z,2020-12-24T06:58:30Z,CLOSED,False,11,13,2,https://github.com/schmurfy,stop mqqt broker from using user_data,2,[],https://github.com/cesanta/mongoose/pull/884,https://github.com/schmurfy,2,https://github.com/cesanta/mongoose/pull/884#issuecomment-621715031,"makes mqtt broker use connection->priv_2 instead of connection->user_data, see #883","@cpq  any news on this ?
I was about to close it to clean up my pr list but I might still need that so...",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,884,2018-01-12T14:42:47Z,2020-12-24T06:58:30Z,2020-12-24T06:58:30Z,CLOSED,False,11,13,2,https://github.com/schmurfy,stop mqqt broker from using user_data,2,[],https://github.com/cesanta/mongoose/pull/884,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/884#issuecomment-750777756,"makes mqtt broker use connection->priv_2 instead of connection->user_data, see #883","That's fixed: the current codebase does not provide any helper API for the broker code, thus does not use user data.
See MQTT server example at https://github.com/cesanta/mongoose/tree/master/examples/mqtt-server",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,891,2018-01-29T19:10:56Z,2020-12-12T14:53:34Z,2020-12-12T14:53:34Z,CLOSED,False,57,57,6,https://github.com/herbrechtsmeier,"Fix strict-prototypes, missing-prototypes and shadow warning",3,[],https://github.com/cesanta/mongoose/pull/891,https://github.com/herbrechtsmeier,1,https://github.com/cesanta/mongoose/pull/891,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,891,2018-01-29T19:10:56Z,2020-12-12T14:53:34Z,2020-12-12T14:53:34Z,CLOSED,False,57,57,6,https://github.com/herbrechtsmeier,"Fix strict-prototypes, missing-prototypes and shadow warning",3,[],https://github.com/cesanta/mongoose/pull/891,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/891#issuecomment-743767380,,"Thank you.
Current source afaik adhere to those rules.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,892,2018-01-30T03:33:04Z,2020-12-12T14:58:59Z,2020-12-12T14:58:59Z,CLOSED,False,1,1,1,https://github.com/pukaifei,bug: response line and headers are not removed from recv_mbuf after MG_EV_HTTP_REPLY,1,[],https://github.com/cesanta/mongoose/pull/892,https://github.com/pukaifei,1,https://github.com/cesanta/mongoose/pull/892,"bug: When using HTTP1.1 keep-alive, the response line and headers are still in nc->recv_mbuf after MG_EV_HTTP_REPLY.
fix: mongoose.c mg_http_handler mbuf_remove(io, hm->message.len) -> mbuf_remove(io, nc->recv_mbuf.len)","bug: When using HTTP1.1 keep-alive, the response line and headers are still in nc->recv_mbuf after MG_EV_HTTP_REPLY.
fix: mongoose.c mg_http_handler mbuf_remove(io, hm->message.len) -> mbuf_remove(io, nc->recv_mbuf.len)",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,892,2018-01-30T03:33:04Z,2020-12-12T14:58:59Z,2020-12-12T14:58:59Z,CLOSED,False,1,1,1,https://github.com/pukaifei,bug: response line and headers are not removed from recv_mbuf after MG_EV_HTTP_REPLY,1,[],https://github.com/cesanta/mongoose/pull/892,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/892#issuecomment-743768061,"bug: When using HTTP1.1 keep-alive, the response line and headers are still in nc->recv_mbuf after MG_EV_HTTP_REPLY.
fix: mongoose.c mg_http_handler mbuf_remove(io, hm->message.len) -> mbuf_remove(io, nc->recv_mbuf.len)","Thank you.
That's wrong. This change totally destroys everything in the recv buffer, which might contain the next request.
The unit test has, in fact. test_http_pipeline() function.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/dexterbg,1,https://github.com/cesanta/mongoose/pull/894,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/894#issuecomment-362517267,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael",@rojer shall we integrate this?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/894#issuecomment-385235088,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","Thank you.
Prior to integrating this, please confirm you've signed the CLA, linked from
https://github.com/cesanta/mongoose#contributions",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/dexterbg,4,https://github.com/cesanta/mongoose/pull/894#issuecomment-385248014,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","I signed the CLA before creating the original pull request. @slcasner Steve, how about you?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/slcasner,5,https://github.com/cesanta/mongoose/pull/894#issuecomment-385258184,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael",I have signed the CLA now.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/slcasner,6,https://github.com/cesanta/mongoose/pull/894#issuecomment-385258891,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","The openvehicles:master branch also includes my two changes not described in the original pull request:


Add a user-settable flag MG_F_SEND_IMMEDIATELY that requests mg_send() to immediately send the provided data if the write to the socket would not block.  Otherwise the data is just appended to the send buffer but is not sent.


Change the return value of mg_send() (and subordinate functions) from void to size_t and return the length of the data appended if successful or zero if memory allocation fails.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/awong-dev,7,https://github.com/cesanta/mongoose/pull/894#issuecomment-432196816,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael",Any chance some version of this could be updated and merged?  I am having similar issues and would like to remove my local workarounds for MG_CTL_MSG_MESSAGE_SIZE being too large for an esp32.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/894#issuecomment-585116086,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","This PR contains several unrelated pieces - please split, one PR per single functionality piece. The PR should be against the dev branch, and one PR must have only one commit.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/markwj,9,https://github.com/cesanta/mongoose/pull/894#issuecomment-585477813,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","This PR contains several unrelated pieces - please split, one PR per single functionality piece. The PR should be against the dev branch, and one PR must have only one commit.

Is there any point? There are 33 outstanding pull requests here, dating back to 5 years to 2015. Only three have any response, and this one has sat dead since October 2018. It seems Cesanta is simply not interested in community improvements? We could go to the work to re-factor all these improvements and bug fixes into individual PRs, but there seems little point unless they get some attention.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/cpq,10,https://github.com/cesanta/mongoose/pull/894#issuecomment-585655658,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","We've been bad lately about the submitted contributions - apologies about that, we'll be more responsive.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,894,2018-02-01T19:09:20Z,2020-12-12T23:45:57Z,2020-12-12T23:45:57Z,CLOSED,False,344,127,3,https://github.com/dexterbg,LWIP SO_REUSEADDR & ESP32 logging,16,[],https://github.com/cesanta/mongoose/pull/894,https://github.com/cpq,11,https://github.com/cesanta/mongoose/pull/894#issuecomment-743921379,"The LWIP commit checks for the LWIP SO_REUSE build option to decide wether to include the setsockop call. This solves the issue of lost connections blocking server ports due to sockets remaining in TIME_WAIT.
The ESP32 logging commits change the stderr logging channel to the ESP-IDF standard syslog channel on an ESP32 platform, so mongoose log output is consistent & cooperative with other log output and can be controlled by the ESP log level. File logging and the mongoose log control & filters can still be used, only the stderr channel is changed.
The debug log on mg_socket_if_destroy_conn() enables tracing socket close behaviour and timing.
These changes have been done for and tested within our ESP32 project (OVMS V3).
Tell me if you need separate pull requests.
Regards,
Michael","Thanks.
Closing this, as the latest codebase enables SO_REUSEADDR on ESP32 by default.
Please reopen if required.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,900,2018-02-18T18:21:04Z,2019-10-30T03:09:38Z,2019-10-30T03:09:38Z,CLOSED,False,21,6,1,https://github.com/jagoyette,Using MG_PEEK to read entire datagram in mg_recvfrom,1,[],https://github.com/cesanta/mongoose/pull/900,https://github.com/jagoyette,1,https://github.com/cesanta/mongoose/pull/900,"Incoming UDP datagrams are currently truncated at MG_UDP_RECV_BUFFER_SIZE
bytes. The method mg_handle_udp_read uses mg_recvfrom to read the
incoming data using a fixed buffer allocated with MG_UDP_RECV_BUFFER_SIZE
bytes. This patch solves the truncation issue by using the MG_PEEK flag and continuously
increasing the size of the allocated buffer until it can accommodate the entire UDP datagram.
Call recvfrom with MG_PEEK in a loop to determine full size
of incoming buffer. Use MG_REALLOC to increase buffer until
it can accommodate entire message or no more memory is available.
mg_recvfrom will now accommodate an arbitrary size of incoming
data instead of truncating after MG_UDP_RECV_BUFFER_SIZE bytes.","Incoming UDP datagrams are currently truncated at MG_UDP_RECV_BUFFER_SIZE
bytes. The method mg_handle_udp_read uses mg_recvfrom to read the
incoming data using a fixed buffer allocated with MG_UDP_RECV_BUFFER_SIZE
bytes. This patch solves the truncation issue by using the MG_PEEK flag and continuously
increasing the size of the allocated buffer until it can accommodate the entire UDP datagram.
Call recvfrom with MG_PEEK in a loop to determine full size
of incoming buffer. Use MG_REALLOC to increase buffer until
it can accommodate entire message or no more memory is available.
mg_recvfrom will now accommodate an arbitrary size of incoming
data instead of truncating after MG_UDP_RECV_BUFFER_SIZE bytes.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,926,2018-06-03T13:40:12Z,2020-12-12T17:04:47Z,2020-12-12T17:04:48Z,CLOSED,False,9,8,1,https://github.com/sigusr1,add line number for log prefix,1,[],https://github.com/cesanta/mongoose/pull/926,https://github.com/sigusr1,1,https://github.com/cesanta/mongoose/pull/926,I think add line number  for log will be help for debug.,I think add line number  for log will be help for debug.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,926,2018-06-03T13:40:12Z,2020-12-12T17:04:47Z,2020-12-12T17:04:48Z,CLOSED,False,9,8,1,https://github.com/sigusr1,add line number for log prefix,1,[],https://github.com/cesanta/mongoose/pull/926,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/926#issuecomment-743784596,I think add line number  for log will be help for debug.,"Thanks!
Already there!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,927,2018-06-05T12:32:55Z,2018-06-06T13:07:07Z,2018-06-08T16:15:59Z,CLOSED,False,7,6,1,https://github.com/gegzy,Non-SSL TCP read now gets all available data,2,[],https://github.com/cesanta/mongoose/pull/927,https://github.com/gegzy,1,https://github.com/cesanta/mongoose/pull/927,"Instead of just reading one data block per mg_poll, this patch now reads all available data and calls the callback per block (as per SSL functionality).","Instead of just reading one data block per mg_poll, this patch now reads all available data and calls the callback per block (as per SSL functionality).",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,927,2018-06-05T12:32:55Z,2018-06-06T13:07:07Z,2018-06-08T16:15:59Z,CLOSED,False,7,6,1,https://github.com/gegzy,Non-SSL TCP read now gets all available data,2,[],https://github.com/cesanta/mongoose/pull/927,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/927#issuecomment-395061655,"Instead of just reading one data block per mg_poll, this patch now reads all available data and calls the callback per block (as per SSL functionality).","this part has changed in the most recent version, can you check if it still applies to the dev branch and rebase?
open a new pull request if it does.
thanks!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,927,2018-06-05T12:32:55Z,2018-06-06T13:07:07Z,2018-06-08T16:15:59Z,CLOSED,False,7,6,1,https://github.com/gegzy,Non-SSL TCP read now gets all available data,2,[],https://github.com/cesanta/mongoose/pull/927,https://github.com/gegzy,3,https://github.com/cesanta/mongoose/pull/927#issuecomment-395768295,"Instead of just reading one data block per mg_poll, this patch now reads all available data and calls the callback per block (as per SSL functionality).","The dev branch changes work fine, therefore no requirement for my patch. Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,927,2018-06-05T12:32:55Z,2018-06-06T13:07:07Z,2018-06-08T16:15:59Z,CLOSED,False,7,6,1,https://github.com/gegzy,Non-SSL TCP read now gets all available data,2,[],https://github.com/cesanta/mongoose/pull/927,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/927#issuecomment-395777438,"Instead of just reading one data block per mg_poll, this patch now reads all available data and calls the callback per block (as per SSL functionality).","@gegzy cool, good to know",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,939,2018-06-26T09:09:24Z,2018-06-27T08:40:56Z,2018-06-27T08:40:56Z,CLOSED,False,1,1,1,https://github.com/YankunLi,fix bug in mg_mgr_init_opt method,1,[],https://github.com/cesanta/mongoose/pull/939,https://github.com/YankunLi,1,https://github.com/cesanta/mongoose/pull/939,"opts.num_ifaces should be used intead of mg_num_ifaces, if
opts.num_ifaces is not equal to zero, there will be an error here.","opts.num_ifaces should be used intead of mg_num_ifaces, if
opts.num_ifaces is not equal to zero, there will be an error here.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,939,2018-06-26T09:09:24Z,2018-06-27T08:40:56Z,2018-06-27T08:40:56Z,CLOSED,False,1,1,1,https://github.com/YankunLi,fix bug in mg_mgr_init_opt method,1,[],https://github.com/cesanta/mongoose/pull/939,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/939#issuecomment-400584329,"opts.num_ifaces should be used intead of mg_num_ifaces, if
opts.num_ifaces is not equal to zero, there will be an error here.","looks good, integrating the change. this PR will be closed but don't worry, you'll see a commit here soon enough.
thanks @YankunLi !",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,940,2018-06-26T09:21:24Z,2018-06-26T11:56:36Z,2018-06-26T11:56:36Z,CLOSED,False,100,2,2,https://github.com/dg-dboehi,Fix pipelining issue with multipart upload,3,[],https://github.com/cesanta/mongoose/pull/940,https://github.com/dg-dboehi,1,https://github.com/cesanta/mongoose/pull/940,"We found a issue with the multipart upload handling, when the streaming functionality is enabled.
When a client uses pipelining, and sends two post requests with multipart data directly after each other,
the Mongoose server was unable to process the second request.
We found that the issue is that the server clears the receive buffer after the first request, and with that deletes part of the second request, which is already in the buffer.
I've attached both a new test case, as well as a fix for this issue.","We found a issue with the multipart upload handling, when the streaming functionality is enabled.
When a client uses pipelining, and sends two post requests with multipart data directly after each other,
the Mongoose server was unable to process the second request.
We found that the issue is that the server clears the receive buffer after the first request, and with that deletes part of the second request, which is already in the buffer.
I've attached both a new test case, as well as a fix for this issue.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,940,2018-06-26T09:21:24Z,2018-06-26T11:56:36Z,2018-06-26T11:56:36Z,CLOSED,False,100,2,2,https://github.com/dg-dboehi,Fix pipelining issue with multipart upload,3,[],https://github.com/cesanta/mongoose/pull/940,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/940#issuecomment-400260969,"We found a issue with the multipart upload handling, when the streaming functionality is enabled.
When a client uses pipelining, and sends two post requests with multipart data directly after each other,
the Mongoose server was unable to process the second request.
We found that the issue is that the server clears the receive buffer after the first request, and with that deletes part of the second request, which is already in the buffer.
I've attached both a new test case, as well as a fix for this issue.","thank you! this looks good, especially like that you included a test.
before your contribution can be accepted, please sign the CLA as documented here.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,940,2018-06-26T09:21:24Z,2018-06-26T11:56:36Z,2018-06-26T11:56:36Z,CLOSED,False,100,2,2,https://github.com/dg-dboehi,Fix pipelining issue with multipart upload,3,[],https://github.com/cesanta/mongoose/pull/940,https://github.com/dg-dboehi,3,https://github.com/cesanta/mongoose/pull/940#issuecomment-400263924,"We found a issue with the multipart upload handling, when the streaming functionality is enabled.
When a client uses pipelining, and sends two post requests with multipart data directly after each other,
the Mongoose server was unable to process the second request.
We found that the issue is that the server clears the receive buffer after the first request, and with that deletes part of the second request, which is already in the buffer.
I've attached both a new test case, as well as a fix for this issue.","@rojer My company, duagon AG, has already signed the CLA.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,940,2018-06-26T09:21:24Z,2018-06-26T11:56:36Z,2018-06-26T11:56:36Z,CLOSED,False,100,2,2,https://github.com/dg-dboehi,Fix pipelining issue with multipart upload,3,[],https://github.com/cesanta/mongoose/pull/940,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/940#issuecomment-400278860,"We found a issue with the multipart upload handling, when the streaming functionality is enabled.
When a client uses pipelining, and sends two post requests with multipart data directly after each other,
the Mongoose server was unable to process the second request.
We found that the issue is that the server clears the receive buffer after the first request, and with that deletes part of the second request, which is already in the buffer.
I've attached both a new test case, as well as a fix for this issue.","ok, integrating. this PR will be closed and a commit by a commit to our internal repo which will later be published to the public repo. you will see it attached to this PR.
thank you for the fix!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,942,2018-06-30T16:14:14Z,2018-07-03T09:28:40Z,2018-07-04T15:47:39Z,CLOSED,False,1,0,1,https://github.com/sigusr1,mem leak when upload file fail,1,[],https://github.com/cesanta/mongoose/pull/942,https://github.com/sigusr1,1,https://github.com/cesanta/mongoose/pull/942,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,942,2018-06-30T16:14:14Z,2018-07-03T09:28:40Z,2018-07-04T15:47:39Z,CLOSED,False,1,0,1,https://github.com/sigusr1,mem leak when upload file fail,1,[],https://github.com/cesanta/mongoose/pull/942,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/942#issuecomment-402075904,,already fixed on the dev branch in 339bbee,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,944,2018-07-02T11:57:15Z,2018-08-13T13:49:41Z,2018-08-13T13:49:41Z,CLOSED,False,107,83,1,https://github.com/M4GNV5,Don't manipulate the send buffer when sending MQTT messages,1,[],https://github.com/cesanta/mongoose/pull/944,https://github.com/M4GNV5,1,https://github.com/cesanta/mongoose/pull/944,"Calculating the total packet length first allows to send the packet header before sending the rest of the packet.
This fixes #943","Calculating the total packet length first allows to send the packet header before sending the rest of the packet.
This fixes #943",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,944,2018-07-02T11:57:15Z,2018-08-13T13:49:41Z,2018-08-13T13:49:41Z,CLOSED,False,107,83,1,https://github.com/M4GNV5,Don't manipulate the send buffer when sending MQTT messages,1,[],https://github.com/cesanta/mongoose/pull/944,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/944#issuecomment-412519899,"Calculating the total packet length first allows to send the packet header before sending the rest of the packet.
This fixes #943",i am integrating this PR into our internal repo with minor changes. it will be closed and a bit later a commit will be published referencing it.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,945,2018-07-11T13:49:24Z,2018-07-12T20:40:26Z,2018-07-12T20:40:26Z,CLOSED,False,12,8,3,https://github.com/jelledevleeschouwer,Fix compiler warnings when CS_ENABLE_STDIO is not defined.,1,[],https://github.com/cesanta/mongoose/pull/945,https://github.com/jelledevleeschouwer,1,https://github.com/cesanta/mongoose/pull/945,Fix -Werror=empty-body when CS_ENABLE_STDIO is not defined,Fix -Werror=empty-body when CS_ENABLE_STDIO is not defined,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,945,2018-07-11T13:49:24Z,2018-07-12T20:40:26Z,2018-07-12T20:40:26Z,CLOSED,False,12,8,3,https://github.com/jelledevleeschouwer,Fix compiler warnings when CS_ENABLE_STDIO is not defined.,1,[],https://github.com/cesanta/mongoose/pull/945,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/945#issuecomment-404641117,Fix -Werror=empty-body when CS_ENABLE_STDIO is not defined,thank you! i'm incorporating this into my own related change.,True,{'THUMBS_UP': ['https://github.com/jelledevleeschouwer']}
cesanta/mongoose,https://github.com/cesanta/mongoose,955,2018-08-06T19:30:17Z,2018-08-13T12:08:39Z,2018-08-13T12:08:39Z,CLOSED,False,5,2,1,https://github.com/Mellnik,Add support for OpenSSL client SNI,1,[],https://github.com/cesanta/mongoose/pull/955,https://github.com/Mellnik,1,https://github.com/cesanta/mongoose/pull/955,Adds SNI extension to Client Hello which can be used by setting mg_connect_opts.ssl_server_name.,Adds SNI extension to Client Hello which can be used by setting mg_connect_opts.ssl_server_name.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,955,2018-08-06T19:30:17Z,2018-08-13T12:08:39Z,2018-08-13T12:08:39Z,CLOSED,False,5,2,1,https://github.com/Mellnik,Add support for OpenSSL client SNI,1,[],https://github.com/cesanta/mongoose/pull/955,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/955#issuecomment-411053978,Adds SNI extension to Client Hello which can be used by setting mg_connect_opts.ssl_server_name.,@rojer please review & integrate if required,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,955,2018-08-06T19:30:17Z,2018-08-13T12:08:39Z,2018-08-13T12:08:39Z,CLOSED,False,5,2,1,https://github.com/Mellnik,Add support for OpenSSL client SNI,1,[],https://github.com/cesanta/mongoose/pull/955,https://github.com/rojer,3,https://github.com/cesanta/mongoose/pull/955#issuecomment-412056506,Adds SNI extension to Client Hello which can be used by setting mg_connect_opts.ssl_server_name.,"looks good, integrating. thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,960,2018-08-17T04:50:18Z,2020-12-12T23:47:41Z,2020-12-12T23:47:41Z,CLOSED,False,17,1,2,https://github.com/kongque,add a sock option for disable Nagle algorithm,2,[],https://github.com/cesanta/mongoose/pull/960,https://github.com/kongque,1,https://github.com/cesanta/mongoose/pull/960,In a realtime game or application. Disable Nagle's algorithm is important.,In a realtime game or application. Disable Nagle's algorithm is important.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,960,2018-08-17T04:50:18Z,2020-12-12T23:47:41Z,2020-12-12T23:47:41Z,CLOSED,False,17,1,2,https://github.com/kongque,add a sock option for disable Nagle algorithm,2,[],https://github.com/cesanta/mongoose/pull/960,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/960#issuecomment-743921519,In a realtime game or application. Disable Nagle's algorithm is important.,"Thanks.
Closing this, as NODELAY is enabled in the latest codebase by default.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,966,2018-08-29T14:17:44Z,2020-12-12T15:03:56Z,2020-12-12T15:03:57Z,CLOSED,False,242,0,4,https://github.com/dooglz,Add mg_file_upload_handler_string,1,[],https://github.com/cesanta/mongoose/pull/966,https://github.com/dooglz,1,https://github.com/cesanta/mongoose/pull/966,Add mg_file_upload_handler_string. Keeps uploaded file in memory in a char* string. Returns this string on MG_EV_HTTP_PART_END.,Add mg_file_upload_handler_string. Keeps uploaded file in memory in a char* string. Returns this string on MG_EV_HTTP_PART_END.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,966,2018-08-29T14:17:44Z,2020-12-12T15:03:56Z,2020-12-12T15:03:57Z,CLOSED,False,242,0,4,https://github.com/dooglz,Add mg_file_upload_handler_string,1,[],https://github.com/cesanta/mongoose/pull/966,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/966#issuecomment-743768743,Add mg_file_upload_handler_string. Keeps uploaded file in memory in a char* string. Returns this string on MG_EV_HTTP_PART_END.,"Thank you.
The file upload functionality has been revamped.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,968,2018-09-08T01:51:45Z,2018-09-08T01:52:20Z,2018-09-08T01:52:20Z,CLOSED,False,4023,2559,92,https://github.com/jagoyette,test,41,[],https://github.com/cesanta/mongoose/pull/968,https://github.com/jagoyette,1,https://github.com/cesanta/mongoose/pull/968,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,969,2018-09-09T12:54:16Z,2020-12-12T15:07:03Z,2020-12-12T15:07:03Z,CLOSED,False,16,2,3,https://github.com/tsieprawski,Add a very basic Meson build file to build Mongoose as shared library.,4,[],https://github.com/cesanta/mongoose/pull/969,https://github.com/tsieprawski,1,https://github.com/cesanta/mongoose/pull/969,"I have my private pet-project using Mongoose. I'm using Meson as build system and I've created a very basic Meson build file to include Mongoose, so it is automatically downloaded and built alongside my code. I think it would be cool to include it upstream. It's very basic, it just builds Mongoose as shared library.","I have my private pet-project using Mongoose. I'm using Meson as build system and I've created a very basic Meson build file to include Mongoose, so it is automatically downloaded and built alongside my code. I think it would be cool to include it upstream. It's very basic, it just builds Mongoose as shared library.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,969,2018-09-09T12:54:16Z,2020-12-12T15:07:03Z,2020-12-12T15:07:03Z,CLOSED,False,16,2,3,https://github.com/tsieprawski,Add a very basic Meson build file to build Mongoose as shared library.,4,[],https://github.com/cesanta/mongoose/pull/969,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/969#issuecomment-743769159,"I have my private pet-project using Mongoose. I'm using Meson as build system and I've created a very basic Meson build file to include Mongoose, so it is automatically downloaded and built alongside my code. I think it would be cool to include it upstream. It's very basic, it just builds Mongoose as shared library.","Thanks, but that does not belong to the Mongoose repo.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,978,2018-10-08T13:06:30Z,2018-10-08T13:06:46Z,2018-10-08T13:06:46Z,MERGED,True,477,218,27,https://github.com/rojer,Mongoose 6.13,21,[],https://github.com/cesanta/mongoose/pull/978,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/978,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,982,2018-10-20T20:46:33Z,2019-09-30T06:58:40Z,2019-09-30T06:58:40Z,CLOSED,False,2,5,2,https://github.com/M4GNV5,readme changes,1,[],https://github.com/cesanta/mongoose/pull/982,https://github.com/M4GNV5,1,https://github.com/cesanta/mongoose/pull/982,"The dashboard image in the readme doesn't exist. Another fix would be to re-add it to the server.
Fixed a typo in the tools readme.","The dashboard image in the readme doesn't exist. Another fix would be to re-add it to the server.
Fixed a typo in the tools readme.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,987,2018-11-21T20:23:45Z,2018-12-07T09:45:32Z,2018-12-07T09:45:32Z,CLOSED,False,7,3,5,https://github.com/awong-dev,Make MG_CTL_MSG_MESSAGE_SIZE overridable.,1,[],https://github.com/cesanta/mongoose/pull/987,https://github.com/awong-dev,1,https://github.com/cesanta/mongoose/pull/987,"The default buffer size of 8192 for control messages is too large on some
platforms such as the esp32. Allowing the size to be adjustable via
compile time flags allows for mongoose to be used on these platforms
without blowing up the stack.","The default buffer size of 8192 for control messages is too large on some
platforms such as the esp32. Allowing the size to be adjustable via
compile time flags allows for mongoose to be used on these platforms
without blowing up the stack.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,987,2018-11-21T20:23:45Z,2018-12-07T09:45:32Z,2018-12-07T09:45:32Z,CLOSED,False,7,3,5,https://github.com/awong-dev,Make MG_CTL_MSG_MESSAGE_SIZE overridable.,1,[],https://github.com/cesanta/mongoose/pull/987,https://github.com/awong-dev,2,https://github.com/cesanta/mongoose/pull/987#issuecomment-440798426,"The default buffer size of 8192 for control messages is too large on some
platforms such as the esp32. Allowing the size to be adjustable via
compile time flags allows for mongoose to be used on these platforms
without blowing up the stack.","This is a more complete version of the patch in #894.  Without this, mg_broadcast is unusable on the whole esp32 function.
I've signed the contributor CLA, so I'm hoping this can be an easy merge. Please let me know if there's anything else required.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,987,2018-11-21T20:23:45Z,2018-12-07T09:45:32Z,2018-12-07T09:45:32Z,CLOSED,False,7,3,5,https://github.com/awong-dev,Make MG_CTL_MSG_MESSAGE_SIZE overridable.,1,[],https://github.com/cesanta/mongoose/pull/987,https://github.com/awong-dev,3,https://github.com/cesanta/mongoose/pull/987#issuecomment-445135539,"The default buffer size of 8192 for control messages is too large on some
platforms such as the esp32. Allowing the size to be adjustable via
compile time flags allows for mongoose to be used on these platforms
without blowing up the stack.",@cpq @rojer gentle ping?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,987,2018-11-21T20:23:45Z,2018-12-07T09:45:32Z,2018-12-07T09:45:32Z,CLOSED,False,7,3,5,https://github.com/awong-dev,Make MG_CTL_MSG_MESSAGE_SIZE overridable.,1,[],https://github.com/cesanta/mongoose/pull/987,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/987#issuecomment-445172009,"The default buffer size of 8192 for control messages is too large on some
platforms such as the esp32. Allowing the size to be adjustable via
compile time flags allows for mongoose to be used on these platforms
without blowing up the stack.","Thank you Albert.
We'll integrate this. Could you please sign a CLA in the mean time?
https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1011,2019-03-20T06:00:02Z,2020-12-12T16:49:16Z,2020-12-12T16:49:17Z,CLOSED,False,7,1,1,https://github.com/xin-f,Modify the flag of NON-BLOCKING for fusion stack,1,[],https://github.com/cesanta/mongoose/pull/1011,https://github.com/xin-f,1,https://github.com/cesanta/mongoose/pull/1011,"MG uses fcntl(sock, F_SETFL, flags | O_NONBLOCK) to set nbio mode but fusion says:
#define O_NONBLOCK      0x2000  /* Non-blocking (not supported in Fusion) */
Actually, #define MSG_NONBLOCKING 0x4000  /* override any blocking state */
is used for non-blocking mode.","MG uses fcntl(sock, F_SETFL, flags | O_NONBLOCK) to set nbio mode but fusion says:
#define O_NONBLOCK      0x2000  /* Non-blocking (not supported in Fusion) */
Actually, #define MSG_NONBLOCKING 0x4000  /* override any blocking state */
is used for non-blocking mode.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1011,2019-03-20T06:00:02Z,2020-12-12T16:49:16Z,2020-12-12T16:49:17Z,CLOSED,False,7,1,1,https://github.com/xin-f,Modify the flag of NON-BLOCKING for fusion stack,1,[],https://github.com/cesanta/mongoose/pull/1011,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1011#issuecomment-743782741,"MG uses fcntl(sock, F_SETFL, flags | O_NONBLOCK) to set nbio mode but fusion says:
#define O_NONBLOCK      0x2000  /* Non-blocking (not supported in Fusion) */
Actually, #define MSG_NONBLOCKING 0x4000  /* override any blocking state */
is used for non-blocking mode.","Thank you.
c5b1c08",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1012,2019-03-22T16:56:24Z,2020-12-24T06:57:12Z,2020-12-24T10:37:42Z,CLOSED,False,4,2,1,https://github.com/zuckschwerdt,Fix IPv6 connect in mg_socket_if_connect_tcp,1,[],https://github.com/cesanta/mongoose/pull/1012,https://github.com/zuckschwerdt,1,https://github.com/cesanta/mongoose/pull/1012,IPv6 addresses in mg_connect() currently don't work (tested on unix / MacOS) as mg_socket_if_connect_tcp() uses the fixed family AF_INET in socket() and fixed sin-length in connect(). It should use sa_family from socket_address and the sin6 length if applicable.,IPv6 addresses in mg_connect() currently don't work (tested on unix / MacOS) as mg_socket_if_connect_tcp() uses the fixed family AF_INET in socket() and fixed sin-length in connect(). It should use sa_family from socket_address and the sin6 length if applicable.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1012,2019-03-22T16:56:24Z,2020-12-24T06:57:12Z,2020-12-24T10:37:42Z,CLOSED,False,4,2,1,https://github.com/zuckschwerdt,Fix IPv6 connect in mg_socket_if_connect_tcp,1,[],https://github.com/cesanta/mongoose/pull/1012,https://github.com/zuckschwerdt,2,https://github.com/cesanta/mongoose/pull/1012#issuecomment-725290444,IPv6 addresses in mg_connect() currently don't work (tested on unix / MacOS) as mg_socket_if_connect_tcp() uses the fixed family AF_INET in socket() and fixed sin-length in connect(). It should use sa_family from socket_address and the sin6 length if applicable.,This still applies and is needed for IPv6 support in mg_socket_if_connect_tcp().,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1012,2019-03-22T16:56:24Z,2020-12-24T06:57:12Z,2020-12-24T10:37:42Z,CLOSED,False,4,2,1,https://github.com/zuckschwerdt,Fix IPv6 connect in mg_socket_if_connect_tcp,1,[],https://github.com/cesanta/mongoose/pull/1012,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1012#issuecomment-750777337,IPv6 addresses in mg_connect() currently don't work (tested on unix / MacOS) as mg_socket_if_connect_tcp() uses the fixed family AF_INET in socket() and fixed sin-length in connect(). It should use sa_family from socket_address and the sin6 length if applicable.,"IPv6 listening and client sockets are now tested by the unit test, make test.
Verified on both MacOS and Linux.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1012,2019-03-22T16:56:24Z,2020-12-24T06:57:12Z,2020-12-24T10:37:42Z,CLOSED,False,4,2,1,https://github.com/zuckschwerdt,Fix IPv6 connect in mg_socket_if_connect_tcp,1,[],https://github.com/cesanta/mongoose/pull/1012,https://github.com/zuckschwerdt,4,https://github.com/cesanta/mongoose/pull/1012#issuecomment-750841748,IPv6 addresses in mg_connect() currently don't work (tested on unix / MacOS) as mg_socket_if_connect_tcp() uses the fixed family AF_INET in socket() and fixed sin-length in connect(). It should use sa_family from socket_address and the sin6 length if applicable.,"Yes, the rewritten code now has working IPv6 in mg_connect_resolved(), thanks!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1014,2019-03-23T07:34:10Z,2020-12-13T00:34:53Z,2020-12-13T00:34:53Z,CLOSED,False,9,1,1,https://github.com/xin-f,Set a cache for session id reusage,1,[],https://github.com/cesanta/mongoose/pull/1014,https://github.com/xin-f,1,https://github.com/cesanta/mongoose/pull/1014,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1014,2019-03-23T07:34:10Z,2020-12-13T00:34:53Z,2020-12-13T00:34:53Z,CLOSED,False,9,1,1,https://github.com/xin-f,Set a cache for session id reusage,1,[],https://github.com/cesanta/mongoose/pull/1014,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1014#issuecomment-743921724,,"Thank you.
Could you elaborate a bit more on the benefits of this change, please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1014,2019-03-23T07:34:10Z,2020-12-13T00:34:53Z,2020-12-13T00:34:53Z,CLOSED,False,9,1,1,https://github.com/xin-f,Set a cache for session id reusage,1,[],https://github.com/cesanta/mongoose/pull/1014,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1014#issuecomment-743926536,,"Thanks.
It looks like that cache is not enabled by default, so won't integrate this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1020,2019-05-08T11:54:55Z,2019-09-30T06:46:40Z,2019-09-30T06:46:40Z,MERGED,True,2,2,1,https://github.com/nliviu,Fix ASAN build for examples/cookie_auth,1,[],https://github.com/cesanta/mongoose/pull/1020,https://github.com/nliviu,1,https://github.com/cesanta/mongoose/pull/1020,"The ASAN build fails for examples/cookie_auth with
cookie_auth.c:62:7: error: variable 'ret' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]
  if (cookie_header == NULL) goto clean;
      ^~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:84:10: note: uninitialized use occurs here
  return ret;
         ^~~
cookie_auth.c:62:3: note: remove the 'if' if its condition is always false
  if (cookie_header == NULL) goto clean;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:65:3: note: variable 'ret' is declared here
  struct session *ret = NULL;
  ^
cookie_auth.c:62:7: error: variable 'ssid' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]
  if (cookie_header == NULL) goto clean;
      ^~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:81:7: note: uninitialized use occurs here
  if (ssid != ssid_buf) {
      ^~~~
cookie_auth.c:62:3: note: remove the 'if' if its condition is always false
  if (cookie_header == NULL) goto clean;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:64:3: note: variable 'ssid' is declared here
  char *ssid = ssid_buf;
  ^
2 errors generated.","The ASAN build fails for examples/cookie_auth with
cookie_auth.c:62:7: error: variable 'ret' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]
  if (cookie_header == NULL) goto clean;
      ^~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:84:10: note: uninitialized use occurs here
  return ret;
         ^~~
cookie_auth.c:62:3: note: remove the 'if' if its condition is always false
  if (cookie_header == NULL) goto clean;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:65:3: note: variable 'ret' is declared here
  struct session *ret = NULL;
  ^
cookie_auth.c:62:7: error: variable 'ssid' is used uninitialized whenever 'if' condition is true [-Werror,-Wsometimes-uninitialized]
  if (cookie_header == NULL) goto clean;
      ^~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:81:7: note: uninitialized use occurs here
  if (ssid != ssid_buf) {
      ^~~~
cookie_auth.c:62:3: note: remove the 'if' if its condition is always false
  if (cookie_header == NULL) goto clean;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cookie_auth.c:64:3: note: variable 'ssid' is declared here
  char *ssid = ssid_buf;
  ^
2 errors generated.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1024,2019-05-16T08:36:42Z,2019-07-01T09:09:36Z,2019-07-01T09:09:36Z,CLOSED,False,1,0,1,https://github.com/akrpic77,Pass user data to the handler in case of failed multipart upload,1,[],https://github.com/cesanta/mongoose/pull/1024,https://github.com/akrpic77,1,https://github.com/cesanta/mongoose/pull/1024,"In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.","In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1024,2019-05-16T08:36:42Z,2019-07-01T09:09:36Z,2019-07-01T09:09:36Z,CLOSED,False,1,0,1,https://github.com/akrpic77,Pass user data to the handler in case of failed multipart upload,1,[],https://github.com/cesanta/mongoose/pull/1024,https://github.com/akrpic77,2,https://github.com/cesanta/mongoose/pull/1024#issuecomment-496237539,"In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.",@cpq should I open the issue? was this PR considered?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1024,2019-05-16T08:36:42Z,2019-07-01T09:09:36Z,2019-07-01T09:09:36Z,CLOSED,False,1,0,1,https://github.com/akrpic77,Pass user data to the handler in case of failed multipart upload,1,[],https://github.com/cesanta/mongoose/pull/1024,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1024#issuecomment-505813808,"In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.","Looks good to integrate - could you sing the CLA please, mentioned at https://github.com/cesanta/mongoose#contributions ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1024,2019-05-16T08:36:42Z,2019-07-01T09:09:36Z,2019-07-01T09:09:36Z,CLOSED,False,1,0,1,https://github.com/akrpic77,Pass user data to the handler in case of failed multipart upload,1,[],https://github.com/cesanta/mongoose/pull/1024,https://github.com/akrpic77,4,https://github.com/cesanta/mongoose/pull/1024#issuecomment-506987399,"In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.",great! I’ve already signed CLA.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1024,2019-05-16T08:36:42Z,2019-07-01T09:09:36Z,2019-07-01T09:09:36Z,CLOSED,False,1,0,1,https://github.com/akrpic77,Pass user data to the handler in case of failed multipart upload,1,[],https://github.com/cesanta/mongoose/pull/1024,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1024#issuecomment-507182869,"In case of an error'd multipart upload handler is called with MG_EV_HTTP_MULTIPART_REQUEST_END and newly constructed mg_http_multipart_part. This structure is missing the user_data which was maybe stored there during normal operation (e.g. MG_EV_HTTP_PART_BEGIN).
Provide pointer to the used user_data so in a case of an error a user gets a chance to do the cleanup.","Integrated to the dev branch - b619637
it'll go to the master branch at the next release.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1025,2019-05-24T07:17:54Z,2019-05-24T23:02:30Z,2019-05-24T23:02:30Z,CLOSED,False,2,2,2,https://github.com/jiangzhuti,fix potential buffer overflow when getaddrinfo is enabled,2,[],https://github.com/cesanta/mongoose/pull/1025,https://github.com/jiangzhuti,1,https://github.com/cesanta/mongoose/pull/1025,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1025,2019-05-24T07:17:54Z,2019-05-24T23:02:30Z,2019-05-24T23:02:30Z,CLOSED,False,2,2,2,https://github.com/jiangzhuti,fix potential buffer overflow when getaddrinfo is enabled,2,[],https://github.com/cesanta/mongoose/pull/1025,https://github.com/nliviu,2,https://github.com/cesanta/mongoose/pull/1025#issuecomment-495729040,,3fc61a3 fixes it in the dev branch..,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1032,2019-06-20T15:15:42Z,2019-06-20T17:55:39Z,2019-06-20T17:55:47Z,CLOSED,False,7,15,2,https://github.com/azadkuh,Issue1031,2,[],https://github.com/cesanta/mongoose/pull/1032,https://github.com/azadkuh,1,https://github.com/cesanta/mongoose/pull/1032,issue 1031,issue 1031,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1033,2019-06-20T17:59:28Z,2020-12-07T10:16:42Z,2020-12-07T10:16:42Z,CLOSED,False,6,15,2,https://github.com/azadkuh,fix Issue1031,2,[],https://github.com/cesanta/mongoose/pull/1033,https://github.com/azadkuh,1,https://github.com/cesanta/mongoose/pull/1033,link,link,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1033,2019-06-20T17:59:28Z,2020-12-07T10:16:42Z,2020-12-07T10:16:42Z,CLOSED,False,6,15,2,https://github.com/azadkuh,fix Issue1031,2,[],https://github.com/cesanta/mongoose/pull/1033,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1033#issuecomment-642832150,link,"Please sign the CLA at https://cesanta.com/cla.html before we integrate it.
Thanks!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1033,2019-06-20T17:59:28Z,2020-12-07T10:16:42Z,2020-12-07T10:16:42Z,CLOSED,False,6,15,2,https://github.com/azadkuh,fix Issue1031,2,[],https://github.com/cesanta/mongoose/pull/1033,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1033#issuecomment-739820357,link,"Closing this, as there is no tools anymore.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,1,https://github.com/cesanta/mongoose/pull/1035,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,2,https://github.com/cesanta/mongoose/pull/1035#issuecomment-508973940,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","Attached is the crash for the mg_parse_http fuzzer + screenshot of the backtrace.
I think this should also be given a CVE for a memory corruption vulnerability.
I'll be happy to contribute more fuzzers after this bug is fixed so it won't fail the other fuzzers.
Also, I'll be happy to contribute an integration to Fuzzit (I'm the CEO of the company) which will enable continuous fuzzing for the project for free as it's an open-source project. you can read also about systemd case study here.
To reproduce run
cd fuzz
make
./fuzz/mg_parse_http/mg_parse_http

crash-c6a21364a4b293c2074130802bb38bd91b054a7c.txt
Cheers,
Yevgeny",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,3,https://github.com/cesanta/mongoose/pull/1035#issuecomment-508974187,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",Not sure who is the right person to review the PR. but CCing @cpq  as you merged a CVE bugfix lately.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,4,https://github.com/cesanta/mongoose/pull/1035#issuecomment-509361473,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",@alashkin maybe you can look at this? not sure who is the right person.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/bobsayshilol,5,https://github.com/cesanta/mongoose/pull/1035#issuecomment-510677637,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","Hi. I saw this posted on reddit and am in no way affiliated with the project, but it looks like you've accidentally committed the 2.7MB fuzzing binary which likely isn't meant to be in the repo.
I had a brief go at running the fuzzer myself and it looks like the crash is the result of an incorrect assumption on the behaviour of atoi(). From the documentation:

The string may begin with an arbitrary amount of white space (as determined by isspace(3)) followed by a single optional '+' or '-' sign.

This patch fixes the issue by checking that the first character of the status code isn't a space, and hence fixes the crash as it can no longer be given a string of 4 spaces which it would read off of:
diff --git a/src/mg_http.c b/src/mg_http.c
index ef546c3..972cbec 100644
--- a/src/mg_http.c
+++ b/src/mg_http.c
@@ -455,7 +455,7 @@ int mg_parse_http(const char *s, int n, struct http_message *hm, int is_req) {
     }
   } else {
     s = mg_skip(s, end, "" "", &hm->proto);
-    if (end - s < 4 || s[3] != ' ') return -1;
+    if (end - s < 4 || isspace(s[0]) || s[3] != ' ') return -1;
     hm->resp_code = atoi(s);
     if (hm->resp_code < 100 || hm->resp_code >= 600) return -1;
     s += 4;

I also beefed up the fuzzer locally to test the other paths and nothing else was flagged up. Feel free to use it if you'd like:
int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size) {
    struct http_message req;
    int is_req;

    /* The first byte determines whether or not this is a request */
    if (size < 1) return 0;
    is_req = *data++;
    size--;

    if (is_req != 0 && is_req != 1) return 0;

    mg_parse_http((const char *)data, size, &req, is_req);
    return 0;
}

Also I notice the undefined behaviour sanitizer isn't enabled in the root Makefile? Nothing was flagged up when it was enabled, but integer overflow is a very common issue and that sanitizer is ideal for detecting it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1035#issuecomment-510814015,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","Thank you gents.
Before it gets integrated, please sign a CLA , linked at https://github.com/cesanta/mongoose#contributions",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,7,https://github.com/cesanta/mongoose/pull/1035#issuecomment-511102126,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@cpq Signed the CLA, Also would you be interested if we also contributed integration to Fuzzit so the fuzzers will run continuously? (like in systemd or apache arrow)
@bobsayshilol Thanks! is there a way to reach out to you privately? wanted to discuss an idea with you? you ping me at yp@fuzzit.dev and I'll reply there.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/bobsayshilol,8,https://github.com/cesanta/mongoose/pull/1035#issuecomment-512005685,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@cpq note that there aren't any commits attributed to me in this PR so I don't need to sign the CLA, so this should be ready to be looked at/merged.
@yevgenypats I'll drop you an email.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,9,https://github.com/cesanta/mongoose/pull/1035#issuecomment-513237469,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@yevgenypats @bobsayshilol thank you so much, gents.
The PR went in to the dev branch.
1a38e91
Closing this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/yevgenypats,10,https://github.com/cesanta/mongoose/pull/1035#issuecomment-513247814,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",@cpq You welcome. I wanted to follow-up and see if you guys are interested in integrating the fuzzers with our (Fuzzit) Continuous Fuzzing as a Service platform. My biased opinion:) is that it is crucial for the stability and security of native code applications. Feel free to ping my at yp@fuzzit.dev.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/nluedtke,11,https://github.com/cesanta/mongoose/pull/1035#issuecomment-522577109,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",This was assigned CVE-2019-13503.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,12,https://github.com/cesanta/mongoose/pull/1035#issuecomment-522591872,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@nluedtke shall the CVE mention Mongoose 6.14 and prior?
6.15 has that bug fixed.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/nluedtke,13,https://github.com/cesanta/mongoose/pull/1035#issuecomment-522630478,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",It does not and nor do I know who reported it. Just referencing it for tracking purposes. Ill mention it on the Red Hat bug.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,14,https://github.com/cesanta/mongoose/pull/1035#issuecomment-522631089,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","Ah, thanks for the clarification @nluedtke , appreciated.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/attritionorg,15,https://github.com/cesanta/mongoose/pull/1035#issuecomment-522641386,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@cpq can you clarify? the fixing commits don't show they are part of a 6.15 release. at the time this was reported, 6.15 was the current version I think?",True,{'THUMBS_UP': ['https://github.com/jdelta-RBS']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,16,https://github.com/cesanta/mongoose/pull/1035#issuecomment-524197104,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.","@attritionorg  you're correct, we pushed to the dev branch but did not make a release.
We'll do it asap.",True,{'THUMBS_UP': ['https://github.com/jdelta-RBS']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/matthiashawran,17,https://github.com/cesanta/mongoose/pull/1035#issuecomment-532581390,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",@cpq do you have an idea of a new release date which includes this fix ? Thanks !,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/cpq,18,https://github.com/cesanta/mongoose/pull/1035#issuecomment-536432258,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",Just tagged 6.16,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1035,2019-07-07T05:55:59Z,2019-07-19T13:54:40Z,2019-09-30T07:32:34Z,CLOSED,False,65,1,5,https://github.com/yevgenypats,libFuzzer integration + bug report,1,[],https://github.com/cesanta/mongoose/pull/1035,https://github.com/matthiashawran,19,https://github.com/cesanta/mongoose/pull/1035#issuecomment-536439951,"This commit places the basics for libFuzzer integration with one
fuzzer which fuzzes the mg_parse_http function. The fuzzer is
located at fuzz/mg_parse_http.
To add more fuzzers please add them to ./fuzz directory.
Also a memory corruption bug is found using this fuzzer which
might lead to additional bugs after fix is pushed.",@cqp thanks for the tag!,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1049,2019-09-15T23:03:08Z,2019-09-30T06:56:54Z,2019-09-30T06:56:55Z,CLOSED,False,41,0,2,https://github.com/CfirTsabari,Added a script that get mongoose version.,1,[],https://github.com/cesanta/mongoose/pull/1049,https://github.com/CfirTsabari,1,https://github.com/cesanta/mongoose/pull/1049,"hi,
I have created a script that get mongoose version (for my own usage),  and thought you might want it.
It was inspired from zmq version.sh.
I tried to use the same conventions you used in the other python scripts except for using sys.stdout.write since we need a print without spaces when printing version number.","hi,
I have created a script that get mongoose version (for my own usage),  and thought you might want it.
It was inspired from zmq version.sh.
I tried to use the same conventions you used in the other python scripts except for using sys.stdout.write since we need a print without spaces when printing version number.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1049,2019-09-15T23:03:08Z,2019-09-30T06:56:54Z,2019-09-30T06:56:55Z,CLOSED,False,41,0,2,https://github.com/CfirTsabari,Added a script that get mongoose version.,1,[],https://github.com/cesanta/mongoose/pull/1049,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1049#issuecomment-536428504,"hi,
I have created a script that get mongoose version (for my own usage),  and thought you might want it.
It was inspired from zmq version.sh.
I tried to use the same conventions you used in the other python scripts except for using sys.stdout.write since we need a print without spaces when printing version number.","perl -nle 'print $1 if /^#define\s+MG_VERSION\s+""(.+)""/' mongoose.h",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1054,2019-09-30T22:16:18Z,2019-10-07T08:08:59Z,2019-10-07T08:08:59Z,MERGED,True,1,1,1,https://github.com/M4GNV5,fix typo in tools/README.md,1,[],https://github.com/cesanta/mongoose/pull/1054,https://github.com/M4GNV5,1,https://github.com/cesanta/mongoose/pull/1054,"Hey,
my previous pull request #982 was closed. The main issue (the broken preview image) was fixed, but the typo still exists in tools/README.md. This PR fixes just that typo.","Hey,
my previous pull request #982 was closed. The main issue (the broken preview image) was fixed, but the typo still exists in tools/README.md. This PR fixes just that typo.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1060,2019-10-08T06:28:47Z,2020-12-07T10:15:57Z,2020-12-07T10:15:57Z,CLOSED,False,6,0,1,https://github.com/nliviu,Fix https://github.com/cesanta/mongoose/issues/1042,1,[],https://github.com/cesanta/mongoose/pull/1060,https://github.com/nliviu,1,https://github.com/cesanta/mongoose/pull/1060,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1060,2019-10-08T06:28:47Z,2020-12-07T10:15:57Z,2020-12-07T10:15:57Z,CLOSED,False,6,0,1,https://github.com/nliviu,Fix https://github.com/cesanta/mongoose/issues/1042,1,[],https://github.com/cesanta/mongoose/pull/1060,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1060#issuecomment-739819931,,"Thanks @nliviu !
Closing this, as auth function has been refactored into the mg_http_creds() API, which fetches auth info from various sources including cookies.
There is a usage example also at https://github.com/cesanta/mongoose/tree/master/examples/multiple-logins",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1062,2019-10-11T08:32:51Z,2020-02-21T14:31:36Z,2020-02-21T14:31:36Z,CLOSED,False,1,1,1,https://github.com/lnksz,Fix a possibly forgot dereferencing,1,[],https://github.com/cesanta/mongoose/pull/1062,https://github.com/lnksz,1,https://github.com/cesanta/mongoose/pull/1062,"Suggested by cppcheck, and does not look like a false positive, as

setting the pointer-pointer argument to NULL would not have any effect at the end of the function.
On the contrary, setting the referenced pointer to NULL is a good idea in a destructor like *free() function.

(Signed CLA)","Suggested by cppcheck, and does not look like a false positive, as

setting the pointer-pointer argument to NULL would not have any effect at the end of the function.
On the contrary, setting the referenced pointer to NULL is a good idea in a destructor like *free() function.

(Signed CLA)",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1062,2019-10-11T08:32:51Z,2020-02-21T14:31:36Z,2020-02-21T14:31:36Z,CLOSED,False,1,1,1,https://github.com/lnksz,Fix a possibly forgot dereferencing,1,[],https://github.com/cesanta/mongoose/pull/1062,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1062#issuecomment-589677779,"Suggested by cppcheck, and does not look like a false positive, as

setting the pointer-pointer argument to NULL would not have any effect at the end of the function.
On the contrary, setting the referenced pointer to NULL is a good idea in a destructor like *free() function.

(Signed CLA)","Integrated.
ef92f2e
Thank you!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/dmundt,1,https://github.com/cesanta/mongoose/pull/1066,Fix segmentation fault in mg_http_reverse_proxy() #1065,Fix segmentation fault in mg_http_reverse_proxy() #1065,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/anatolyborodin,2,https://github.com/cesanta/mongoose/pull/1066#issuecomment-544416525,Fix segmentation fault in mg_http_reverse_proxy() #1065,"mongoose.c is a so called ""amalgamated"" library. I'm not really sure, if it's being updated automatically or manually during a release. Anyway, src/mg_http.c is the original source, and should be updated as well. See e.g. 3fc61a3
@cpq what is the right way?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/anatolyborodin,3,https://github.com/cesanta/mongoose/pull/1066#issuecomment-544434778,Fix segmentation fault in mg_http_reverse_proxy() #1065,"The logic regarding mg_http_get_proto_dat()/mg_http_create_proto_data() was changed in e5910da. mg_http_get_proto_dat() allocated the missing object before. I'm not sure if it's a right thing to do again (should a getter function allocate anything?)
e5910da?diff=unified#diff-e2958a0adcf1d38b24ce49505c902074R670-R672 allows (?) the pointer to be NULL.
e5910da?diff=unified#diff-e2958a0adcf1d38b24ce49505c902074R3071-R3072 here is an explicit mg_http_create_proto_data() call.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/mwm29,4,https://github.com/cesanta/mongoose/pull/1066#issuecomment-568224300,Fix segmentation fault in mg_http_reverse_proxy() #1065,"It looks like the seg fault occurs on line 8124 of mongoose.c: mg_http_get_proto_data(be)->reverse_proxy_data.linked_conn = nc; be's proto_data is NULL.
I agree that it doesn't make sense for a getter to allocate data. You could add a check before this line instead of in the getter function. However with the fix in this pr or the fix I proposed, the reverse_proxy example still doesn't work. It no longer seg faults but the request to the backend server just hangs indefinitely. Is anyone else seeing this behavior?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1066#issuecomment-568436574,Fix segmentation fault in mg_http_reverse_proxy() #1065,"Please debug it - run with the hexdump turned on, compile with the debugging on, etc.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/mwm29,6,https://github.com/cesanta/mongoose/pull/1066#issuecomment-568643722,Fix segmentation fault in mg_http_reverse_proxy() #1065,"I ran the reverse_proxy example and connected with http_client. Attached are the hexdumps from reverse_proxy (hexdump.txt) and from http_client (clienthex.txt).
hexdump.txt
clienthex.txt",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/mwm29,7,https://github.com/cesanta/mongoose/pull/1066#issuecomment-568650405,Fix segmentation fault in mg_http_reverse_proxy() #1065,"So it looks like reverse_proxy sees the GET on 8000, sends it on 8000, receives it on 8001, 8001 generates and sends a 200, the 200 response is received on 8000, but isn't forwarded back to the client.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/TianQingshuai,8,https://github.com/cesanta/mongoose/pull/1066#issuecomment-638899670,Fix segmentation fault in mg_http_reverse_proxy() #1065,"You can find the fixes code here #1087
It does work fine.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1066,2019-10-18T09:52:16Z,2020-12-27T09:46:31Z,2020-12-27T09:46:31Z,CLOSED,False,3,0,1,https://github.com/dmundt,Fix segmentation fault in mg_http_reverse_proxy #1065,1,[],https://github.com/cesanta/mongoose/pull/1066,https://github.com/cpq,9,https://github.com/cesanta/mongoose/pull/1066#issuecomment-751446450,Fix segmentation fault in mg_http_reverse_proxy() #1065,"The reverse proxy example was rewritten, adopted for the latest release.
See https://github.com/cesanta/mongoose/tree/master/examples/http-reverse-proxy
Closing this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1074,2019-11-09T08:25:12Z,2020-02-21T14:26:16Z,2020-02-21T14:26:17Z,CLOSED,False,1,1,1,https://github.com/zuckschwerdt,Fix typedef bool for MSC,1,[],https://github.com/cesanta/mongoose/pull/1074,https://github.com/zuckschwerdt,1,https://github.com/cesanta/mongoose/pull/1074,When compiling for the CS_P_WINDOWS platform with Mingw-w64 (or MinGW) the stdbool header is available. The typedef int bool alternative should be limited to MSC.,When compiling for the CS_P_WINDOWS platform with Mingw-w64 (or MinGW) the stdbool header is available. The typedef int bool alternative should be limited to MSC.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1074,2019-11-09T08:25:12Z,2020-02-21T14:26:16Z,2020-02-21T14:26:17Z,CLOSED,False,1,1,1,https://github.com/zuckschwerdt,Fix typedef bool for MSC,1,[],https://github.com/cesanta/mongoose/pull/1074,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1074#issuecomment-589675405,When compiling for the CS_P_WINDOWS platform with Mingw-w64 (or MinGW) the stdbool header is available. The typedef int bool alternative should be limited to MSC.,"4e89eac
Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1089,2019-12-23T10:59:01Z,2019-12-23T11:16:20Z,2019-12-23T11:16:20Z,CLOSED,False,1,1,1,https://github.com/HarDToBelieve,Fix integer overflow in parse_mqtt(),1,[],https://github.com/cesanta/mongoose/pull/1089,https://github.com/HarDToBelieve,1,https://github.com/cesanta/mongoose/pull/1089,Use unsigned int instead of size_t,Use unsigned int instead of size_t,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1089,2019-12-23T10:59:01Z,2019-12-23T11:16:20Z,2019-12-23T11:16:20Z,CLOSED,False,1,1,1,https://github.com/HarDToBelieve,Fix integer overflow in parse_mqtt(),1,[],https://github.com/cesanta/mongoose/pull/1089,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1089#issuecomment-568446639,Use unsigned int instead of size_t,"Thank you so much.
Integrated to the dev branch, cb602f1
It'll be merged to a release in the next release cycle (soon).",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,1,https://github.com/cesanta/mongoose/pull/1091,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1091#issuecomment-586916122,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Please rename to MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS.
Please sign the CLA at https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,3,https://github.com/cesanta/mongoose/pull/1091#issuecomment-596940062,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Please rename to MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS.
Please sign the CLA at https://cesanta.com/cla.html

Done both",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1091#issuecomment-739815224,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Looking closer at this, it might be a wrong fix, since the received and discarded chunk might include valid data.
Could you give an example/hexdump of the problematic HAP request please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,5,https://github.com/cesanta/mongoose/pull/1091#issuecomment-739856386,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Once pair-setup (plain text i/o) done, controller sends encrypted message. mg_parse_http returns -1 and session ends. With this fix, we still able to handle it propertly.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1091#issuecomment-750778610,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,@d4rkmen please provide an example hexdump of the problematic HAP request.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,7,https://github.com/cesanta/mongoose/pull/1091#issuecomment-753655235,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Here u r:
#1 POST /pair-verify (plain)
>>50 4f 53 54 20 2f 70 61 69 72 2d 76 65 72 69 66 79 20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a 20 d0 93 d0 b0 d0 b3 d0 b0 d1 80 d0 b8 d0 bd d0 b0 5c 30 33 32 2d 5c 30 33 32 d0 9a d1 83 d1 85 d0 bd d1 8f 2e 5f 68 61 70 2e 5f 74 63 70 2e 6c 6f 63 61 6c 0d 0a 43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20 33 37 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 61 70 70 6c 69 63 61 74 69 6f 6e 2f 70 61 69 72 69 6e 67 2b 74 6c 76 38 0d 0a 0d 0a 06 01 01 03 20 be 5d b1 f3 b2 06 92 57 a4 c8 e8 7c 53 0a e4 74 bd 43 1c 83 c6 41 d9 05 25 80 95 27 22 da e3 6c
#2 GET /accessories (crypted)
>>58 00 d2 5b 95 5b 58 40 19 c1 cd 50 ce 40 61 9e 65 5e 33 2c db 54 ec 9a 6f 66 da 21 72 51 3d 48 74 7e 8b c2 af df cc c6 fe 75 88 11 a2 dc 05 35 da a4 9c 73 89 f2 0c 77 55 d6 7e 93 41 15 f1 c7 22 a7 7b cf 35 8d b0 5b 7e 18 f8 0c c3 8a a4 33 b4 6d bb 16 e0 6e 50 e4 e5 76 22 d8 30 e5 08 3c 8f 52 42 f7 1b 25 36 22 8c 1e
connection closed",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/1091#issuecomment-754608520,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"The first request looks like this:
POST /pair-verify HTTP/1.1
Host: Гагарина\032-\032Кухня._hap._tcp.local
Content-Length: 37
Content-Type: application/pairing+tlv8

 ?]???W???|S
?t?C??A?%??'""??l

With hexdump:
$ perl -le 'print pack(""H*"", ""504f5354202f706169722d76657269667920485454502f312e310d0a486f73743a20d093d0b0d0b3d0b0d180d0b8d0bdd0b05c3033322d5c303332d09ad183d185d0bdd18f2e5f6861702e5f7463702e6c6f63616c0d0a436f6e74656e742d4c656e6774683a2033370d0a436f6e74656e742d547970653a206170706c69636174696f6e2f70616972696e672b746c76380d0a0d0a0601010320be5db1f3b2069257a4c8e87c530ae474bd431c83c641d9052580952722dae36c"")' | hexdump -C
00000000  50 4f 53 54 20 2f 70 61  69 72 2d 76 65 72 69 66  |POST /pair-verif|
00000010  79 20 48 54 54 50 2f 31  2e 31 0d 0a 48 6f 73 74  |y HTTP/1.1..Host|
00000020  3a 20 d0 93 d0 b0 d0 b3  d0 b0 d1 80 d0 b8 d0 bd  |: ..............|
00000030  d0 b0 5c 30 33 32 2d 5c  30 33 32 d0 9a d1 83 d1  |..\032-\032.....|
00000040  85 d0 bd d1 8f 2e 5f 68  61 70 2e 5f 74 63 70 2e  |......_hap._tcp.|
00000050  6c 6f 63 61 6c 0d 0a 43  6f 6e 74 65 6e 74 2d 4c  |local..Content-L|
00000060  65 6e 67 74 68 3a 20 33  37 0d 0a 43 6f 6e 74 65  |ength: 37..Conte|
00000070  6e 74 2d 54 79 70 65 3a  20 61 70 70 6c 69 63 61  |nt-Type: applica|
00000080  74 69 6f 6e 2f 70 61 69  72 69 6e 67 2b 74 6c 76  |tion/pairing+tlv|
00000090  38 0d 0a 0d 0a 06 01 01  03 20 be 5d b1 f3 b2 06  |8........ .]....|
000000a0  92 57 a4 c8 e8 7c 53 0a  e4 74 bd 43 1c 83 c6 41  |.W...|S..t.C...A|
000000b0  d9 05 25 80 95 27 22 da  e3 6c 0a                 |..%..'""..l.|
000000bb
So the issue is with the UTF-8 characters in the HTTP Host header.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,9,https://github.com/cesanta/mongoose/pull/1091#issuecomment-754617611,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Is there a way in HAP API to encode the Host header? That would solve the issue.
It looks wrong to ""fix"" it on the server side by injecting kludges like mentioned above.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,10,https://github.com/cesanta/mongoose/pull/1091#issuecomment-754622089,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"first packet makes no issue
the second one and the rest ones goes crypted, so its not the http packet before decrypt happen (as you can see in the dump)
since its not, connection closes permanently
pr gives an option to control behavior. we call decrypt, parse http and so on
connection remains open to keep the session",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/cpq,11,https://github.com/cesanta/mongoose/pull/1091#issuecomment-754640660,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"Then, do not use HTTP.
Listen on a port using plain TCP: mg_listen() instead of mg_http_listen().
This way, a built-in HTTP callback won't be triggered.
Catch MG_EV_READ, parse the request manually, like here: https://github.com/cesanta/mongoose/blob/7.0/src/http.c#L617-L620
Would that be a solution?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1091,2020-01-11T19:13:55Z,2021-01-05T14:19:09Z,2021-01-05T14:19:09Z,CLOSED,False,8,0,2,https://github.com/d4rkmen,Handle Apple HAP using http websocket,3,[],https://github.com/cesanta/mongoose/pull/1091,https://github.com/d4rkmen,12,https://github.com/cesanta/mongoose/pull/1091#issuecomment-754663512,Define MG_ENABLE_HTTP_IGNORE_INVALID_REQUESTS to ignore nonprintable responses for Apple HomeKit Accessory Protocol,"I have no idea.
ws_http hanlder was doing fine with this task, because every session starts as normal HTTP.
Anyway, this was actual for mongoose 6.x. The new 7 release is a way much different and I still delaying to use it.
So, just ignore it.
Thanks",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1096,2020-02-07T13:35:03Z,2020-02-14T08:31:41Z,2020-02-14T08:31:41Z,CLOSED,False,14,13,1,https://github.com/jcorporation,Cleanup html output of directory listing,3,[],https://github.com/cesanta/mongoose/pull/1096,https://github.com/jcorporation,1,https://github.com/cesanta/mongoose/pull/1096,This pull requests removes \n from html output and sanitizes the html.,This pull requests removes \n from html output and sanitizes the html.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1096,2020-02-07T13:35:03Z,2020-02-14T08:31:41Z,2020-02-14T08:31:41Z,CLOSED,False,14,13,1,https://github.com/jcorporation,Cleanup html output of directory listing,3,[],https://github.com/cesanta/mongoose/pull/1096,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1096#issuecomment-585655947,This pull requests removes \n from html output and sanitizes the html.,"Thank you! Before integrating, please sign the CLA  at https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1096,2020-02-07T13:35:03Z,2020-02-14T08:31:41Z,2020-02-14T08:31:41Z,CLOSED,False,14,13,1,https://github.com/jcorporation,Cleanup html output of directory listing,3,[],https://github.com/cesanta/mongoose/pull/1096,https://github.com/jcorporation,3,https://github.com/cesanta/mongoose/pull/1096#issuecomment-585666798,This pull requests removes \n from html output and sanitizes the html.,Signed,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1096,2020-02-07T13:35:03Z,2020-02-14T08:31:41Z,2020-02-14T08:31:41Z,CLOSED,False,14,13,1,https://github.com/jcorporation,Cleanup html output of directory listing,3,[],https://github.com/cesanta/mongoose/pull/1096,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1096#issuecomment-586152408,This pull requests removes \n from html output and sanitizes the html.,"Integrated into dev branch - https://github.com/cesanta/mongoose/tree/dev
Will be merged to a master branch at next release.
Thank you so much.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/MarkJonas,1,https://github.com/cesanta/mongoose/pull/1112,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de","The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1112#issuecomment-642518380,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de","Thank you!
Please sign the CLA at https://cesanta.com/cla.html, and we'll integrate it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/MarkJonas,3,https://github.com/cesanta/mongoose/pull/1112#issuecomment-642785257,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de",@cpq I signed the CLA.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/MarkJonas,4,https://github.com/cesanta/mongoose/pull/1112#issuecomment-642836527,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de","@cpq I am astonished and disappointed that the commit does not communicate my authorship anymore. My expectation was that you would merge my branch and thus take my commit.
commit 5774a7e58c280d70d31dc1ea73b5476f560761ca (HEAD -> feature/remove-logically-dead-code, origin/feature/remove-logically-dead-code)
Author: Mark Jonas <toertel@gmail.com>
Date:   Thu Apr 9 13:18:09 2020 +0200

    Remove logically dead code
    
    The if- and else-if-clause already cover the complete value range of
    'boundary'. Thus, the original else cannot be reached. Because the
    original else-if-clause triggers on the negation of the if-clause it can
    be replaced with a simple else.
    
    Signed-off-by: Mark Jonas <toertel@gmail.com>
    Acked-by: Stefano Babic <sbabic@denx.de>

vs.
commit 48800697752197595e75a235f9c6589999d1e303
Author: Sergey Lyubka <lsm@cesanta.com>
Date:   Thu Jun 11 18:38:42 2020 +0100

    Fix #1112

@sbabic FYI.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1112#issuecomment-642842639,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de","The reason was: your change did not touch the file in src/, only an amalgamated mongoose.c
I will revert this commit. Do not  re-submit.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1112,2020-04-09T12:21:41Z,2020-06-11T17:38:50Z,2020-06-11T18:10:04Z,CLOSED,False,1,3,1,https://github.com/MarkJonas,Remove logically dead code,1,[],https://github.com/cesanta/mongoose/pull/1112,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1112#issuecomment-642847483,"The if- and else-if-clause already cover the complete value range of
'boundary'. Thus, the original else cannot be reached. Because the
original else-if-clause triggers on the negation of the if-clause it can
be replaced with a simple else.
Signed-off-by: Mark Jonas toertel@gmail.com
Acked-by: Stefano Babic sbabic@denx.de","Reverted.
@MarkJonas , you now 100% do not author anything in Mongoose codebase.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1122,2020-06-17T18:35:12Z,2020-09-19T18:49:12Z,2020-09-19T18:49:12Z,CLOSED,False,339,0,1,https://github.com/ullenius,Add GPL2 full licence,1,[],https://github.com/cesanta/mongoose/pull/1122,https://github.com/ullenius,1,https://github.com/cesanta/mongoose/pull/1122,"Add full GPL2 licence (https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt)
Solves issue #1121","Add full GPL2 licence (https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt)
Solves issue #1121",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1122,2020-06-17T18:35:12Z,2020-09-19T18:49:12Z,2020-09-19T18:49:12Z,CLOSED,False,339,0,1,https://github.com/ullenius,Add GPL2 full licence,1,[],https://github.com/cesanta/mongoose/pull/1122,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1122#issuecomment-695343713,"Add full GPL2 licence (https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt)
Solves issue #1121","This software is under a dual license, not solely under GPLv2.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1124,2020-06-24T16:08:40Z,2020-06-24T16:08:49Z,2020-06-24T16:08:54Z,MERGED,True,5,0,1,https://github.com/novlean,added MWS white paper,1,[],https://github.com/cesanta/mongoose/pull/1124,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1124,Download “9 Things NOT to do when embedding a web server” white paper.,Download “9 Things NOT to do when embedding a web server” white paper.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1125,2020-06-26T06:53:22Z,2020-12-07T10:03:12Z,2020-12-07T10:03:12Z,CLOSED,False,51,47,2,https://github.com/idigger,Fix handle leak in mg_get_ip_address_of_nameserver on windows system #1119,2,[],https://github.com/cesanta/mongoose/pull/1125,https://github.com/idigger,1,https://github.com/cesanta/mongoose/pull/1125,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1125,2020-06-26T06:53:22Z,2020-12-07T10:03:12Z,2020-12-07T10:03:12Z,CLOSED,False,51,47,2,https://github.com/idigger,Fix handle leak in mg_get_ip_address_of_nameserver on windows system #1119,2,[],https://github.com/cesanta/mongoose/pull/1125,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1125#issuecomment-739812378,,"Closing this, as mg_get_ip_address_of_nameserver() is not in the codebase anymore.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1128,2020-07-08T01:20:57Z,2020-07-12T14:32:42Z,2020-08-19T20:44:52Z,MERGED,True,2870,23966,198,https://github.com/rojer,Sync src with amalgamated versions,1,[],https://github.com/cesanta/mongoose/pull/1128,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/1128,"Now src contains exactly what's embedded in mongoose.c and .h, nothing more.
Added tools/amalgam.sh to aamlgamate both files at once.
There are no functional changes to mongoose.c, .h in this PR, only slight filename changes.","Now src contains exactly what's embedded in mongoose.c and .h, nothing more.
Added tools/amalgam.sh to aamlgamate both files at once.
There are no functional changes to mongoose.c, .h in this PR, only slight filename changes.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1130,2020-07-20T05:13:32Z,2020-07-20T05:14:00Z,2020-07-20T05:14:12Z,CLOSED,False,8,12,5,https://github.com/zuzy,Bug fix/realloc zero,15,[],https://github.com/cesanta/mongoose/pull/1130,https://github.com/zuzy,1,https://github.com/cesanta/mongoose/pull/1130,Add zero judge before realloc.,Add zero judge before realloc.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/zuzy,1,https://github.com/cesanta/mongoose/pull/1131,"Call resize(buf, 0) by chance and get double freed....","Call resize(buf, 0) by chance and get double freed....",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/rojer,2,https://github.com/cesanta/mongoose/pull/1131#issuecomment-676703101,"Call resize(buf, 0) by chance and get double freed....","as long as realloc(xx, 0) returns NULL in that case, it should be fine.
what is the compiler we are talking about?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/zuzy,3,https://github.com/cesanta/mongoose/pull/1131#issuecomment-677478582,"Call resize(buf, 0) by chance and get double freed....","Ubuntu16.04, x86, gcc-5 for now.
I treat mongoose-mqtt as a way to transport files. Publish & on-message callback are called heavily.
Sometimes 'Double free' error occurs by accient, and I found that 'realloc 0' is somehow unclear in standard.
As a result, 'double free' disappaerd after I did that.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/rojer,4,https://github.com/cesanta/mongoose/pull/1131#issuecomment-677738452,"Call resize(buf, 0) by chance and get double freed....","ok, we'll need something more substantial. this code is well exercised in many scenarios and behaves correctly.
you can use ASAN to track down your double-free.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1131#issuecomment-739811782,"Call resize(buf, 0) by chance and get double freed....",@zuzy please re-test with the current master.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1131,2020-07-20T05:32:07Z,2020-12-12T15:43:16Z,2020-12-12T15:43:17Z,CLOSED,False,5,0,1,https://github.com/zuzy,"<bug>: avoid realloc(xx, 0)",1,[],https://github.com/cesanta/mongoose/pull/1131,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1131#issuecomment-743774314,"Call resize(buf, 0) by chance and get double freed....",Closing this until confirmed.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/1138,"h/t @BushraAloraini
Fixes #1135","h/t @BushraAloraini
Fixes #1135",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/lnksz,2,https://github.com/cesanta/mongoose/pull/1138#issuecomment-677482387,"h/t @BushraAloraini
Fixes #1135","Isn't 
  
    
      mongoose/src/mg_http_cgi.c
    
    
         Line 359
      in
      86f391c
    
  
  
    

        
          
           for (i = 0; hm->header_names[i].len > 0; i++) { 
        
    
  

 also affected @cpq ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/mtimperley,3,https://github.com/cesanta/mongoose/pull/1138#issuecomment-794017348,"h/t @BushraAloraini
Fixes #1135","Isn't

  
    
      mongoose/src/mg_http_cgi.c
    
    
         Line 359
      in
      86f391c
    
  
  
    

        
          
           for (i = 0; hm->header_names[i].len > 0; i++) { 
        
    
  


also affected @cpq ?

@lnksz, did you get an answer to your question? After reviewing this commit, I have the same question.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1138#issuecomment-794211183,"h/t @BushraAloraini
Fixes #1135","@lnksz  @mtimperley current HEAD has CGI support removed, and HTTP codebase heavily refactored.
So, not affected.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/mtimperley,5,https://github.com/cesanta/mongoose/pull/1138#issuecomment-794364179,"h/t @BushraAloraini
Fixes #1135","Thanks @cpq that is good to know. I'm currently supporting v6.18 as the plan to move to v7.1 is still some months away. I'm thinking this check will do no harm, so I might as well put it in with the others. Do you agree?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1138,2020-08-19T20:49:45Z,2020-08-19T23:44:37Z,2021-03-09T20:24:02Z,MERGED,True,2,2,2,https://github.com/rojer,Add missing range check in mg_get_http_header(),1,[],https://github.com/cesanta/mongoose/pull/1138,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1138#issuecomment-794407623,"h/t @BushraAloraini
Fixes #1135","That makes sense, @mtimperley , thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1139,2020-08-19T21:03:31Z,2020-08-19T23:45:03Z,2020-08-19T23:45:03Z,MERGED,True,27,109,5,https://github.com/rojer,Fix warnings and sync line numbers of unamalgamated sources,1,[],https://github.com/cesanta/mongoose/pull/1139,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/1139,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1143,2020-08-28T19:31:08Z,2020-08-28T19:46:38Z,2020-08-28T20:04:59Z,MERGED,True,22,0,2,https://github.com/rojer,"Add cs_log_{lock,unlock}",1,[],https://github.com/cesanta/mongoose/pull/1143,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/1143,"In implementatiosn that have preemptive scheduelrs these can be implemented
to ensure logging from different threads is properly serialized.","In implementatiosn that have preemptive scheduelrs these can be implemented
to ensure logging from different threads is properly serialized.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1157,2020-10-24T22:13:32Z,2020-10-26T13:25:31Z,2020-10-26T13:25:31Z,MERGED,True,406,138,13,https://github.com/rojer,Add mg_next_query_string_entry_n() and mg_url_decode_n(),1,[],https://github.com/cesanta/mongoose/pull/1157,https://github.com/rojer,1,https://github.com/cesanta/mongoose/pull/1157,"Move to mg_util.h so encode and decode are next ot each other.
Pull out mg_next_list_entry_n() for advanced use cases.
Add unit tests.","Move to mg_util.h so encode and decode are next ot each other.
Pull out mg_next_list_entry_n() for advanced use cases.
Add unit tests.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1161,2020-11-11T08:45:39Z,2020-12-07T10:00:54Z,2020-12-07T10:00:54Z,CLOSED,False,1,1,1,https://github.com/zuckschwerdt,Fix len check in mg_match_prefix_n,1,[],https://github.com/cesanta/mongoose/pull/1161,https://github.com/zuckschwerdt,1,https://github.com/cesanta/mongoose/pull/1161,This fixed the len-- > 0 check in mg_match_prefix_n() to --len > 0 as the postfix operator is applied after the comparison and we already have len != 0 to guard that. I take it that len-- ; len > 0 (pseudo code) is meant.,This fixed the len-- > 0 check in mg_match_prefix_n() to --len > 0 as the postfix operator is applied after the comparison and we already have len != 0 to guard that. I take it that len-- ; len > 0 (pseudo code) is meant.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1161,2020-11-11T08:45:39Z,2020-12-07T10:00:54Z,2020-12-07T10:00:54Z,CLOSED,False,1,1,1,https://github.com/zuckschwerdt,Fix len check in mg_match_prefix_n,1,[],https://github.com/cesanta/mongoose/pull/1161,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1161#issuecomment-739811037,This fixed the len-- > 0 check in mg_match_prefix_n() to --len > 0 as the postfix operator is applied after the comparison and we already have len != 0 to guard that. I take it that len-- ; len > 0 (pseudo code) is meant.,"Closing this, as mg_match_prefix() has been renamed to mg_globmatch() and heavily refactored.
See https://github.com/cesanta/mongoose/blob/master/src/util.c#L60
Please feel free too reopen if the issue is still there - in that case, drop a couple of lines to the unit test to showcase it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/DavidKorczynski,1,https://github.com/cesanta/mongoose/pull/1162,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.","Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1162#issuecomment-739809274,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.",Could you adopt it to the current master please?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/DavidKorczynski,3,https://github.com/cesanta/mongoose/pull/1162#issuecomment-740069470,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.",Fixed @cpq - could you also provide an email for OSS-Fuzz? Notice the email should be linked to a google account for watching details on the fuzzing (coverage/stack traces etc.),True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1162#issuecomment-740111217,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.","Pushed d1b8f9e to add base64 and get_var tests - would that actually suffice?
To answer your question about the email address - support@cesanta.com
Glancing over the oss-fuzz GH page, it is not immediately obvious how to integrate with the service - could you provide a quick pointer please?
You're very welcome to extend the fuzzer, appreciated. What is your interest? Do you or your team use Mongoose?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/DavidKorczynski,5,https://github.com/cesanta/mongoose/pull/1162#issuecomment-740125603,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.","Thanks for putting in the updates. I think we can stick with the fuzzer you have now, which should be good.
You can see in the OSS-Fuzz PR google/oss-fuzz#4648 how to integrate with the service. The only steps necessary are create the project.yaml, build.sh and Dockerfile files, which you see in the PR.
We (Ada Logics) collaborate with the OSS-Fuzz team on getting well-known open source libraries into the service to help secure the security posture of these open source libraries. As such, my interest is from a perspective of securing important open source projects.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/codecov-io,6,https://github.com/cesanta/mongoose/pull/1162#issuecomment-740179643,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.","Codecov Report

Merging #1162 (d1b8f9e) into master (228acef) will decrease coverage by 0.00%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master    #1162      +/-   ##
==========================================
- Coverage   87.06%   87.06%   -0.01%     
==========================================
  Files          18       18              
  Lines        2003     2002       -1     
==========================================
- Hits         1744     1743       -1     
  Misses        259      259              



Impacted Files
Coverage Δ





src/base64.c
95.91% <ø> (-0.09%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 228acef...6e4c978. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1162,2020-11-17T18:10:18Z,2020-12-07T21:44:02Z,2020-12-07T21:44:02Z,CLOSED,False,39,7,1,https://github.com/DavidKorczynski,Fuzzer extension + suggestion for oss-fuzz integration,2,[],https://github.com/cesanta/mongoose/pull/1162,https://github.com/cpq,7,https://github.com/cesanta/mongoose/pull/1162#issuecomment-740198084,"Hi,
This PR extends the existing fuzzer with the purpose of integrating mongoose into the oss-fuzz project.  OSS-Fuzz is a free service run by Google that performs continuous fuzzing of important open source projects and it would be nice to integrate mongoose as well. Essentially, OSS-Fuzz will perform the fuzzing for you in a continuous manner and then email you bug reports, coverage reports etc. All we need is a set of email addresses that will receive this information.
If you are happy to integrate into OSS-Fuzz then I would be happy too to continue extending the fuzzer. Please tell me here if you would like integrating into OSS-Fuzz: for convenience I have made a PR (google/oss-fuzz#4648) on the OSS-Fuzz repo that does the integration in case you are happy with it.","Fantastic, thank you David.
I presume I can close this now - let me know if anything required moving forward.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/hakabahitoyo,1,https://github.com/cesanta/mongoose/pull/1185,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1185#issuecomment-753936385,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","Looks good, please sign an CLA and we'll integrate it.
The CLA is at https://cesanta.com/cla.html
Also, make sure to synchronise an amalgamation with your changes by building mongoose.c and mongoose.h files:
make mongoose.c mongoose.h",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1185#issuecomment-753937643,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","BTW, which OS/compiler was that?
Current unit tests have openssl target and they pass. Maybe we need to add some extra openssl builds.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/hakabahitoyo,4,https://github.com/cesanta/mongoose/pull/1185#issuecomment-754367163,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","BTW, which OS/compiler was that?


g++ (Debian 8.3.0-6) 8.3.0 (with -std=c++17)
gcc (Debian 8.3.0-6) 8.3.0
clang version 7.0.1-8+deb10u2 (tags/RELEASE_701/final)
Debian GNU/Linux 10.7",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/codecov-io,5,https://github.com/cesanta/mongoose/pull/1185#issuecomment-754369914,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","Codecov Report

Merging #1185 (1689a0d) into master (117aeaa) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1185   +/-   ##
=======================================
  Coverage   92.57%   92.57%           
=======================================
  Files          19       19           
  Lines        2531     2531           
=======================================
  Hits         2343     2343           
  Misses        188      188           



Impacted Files
Coverage Δ





src/tls.c
86.90% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 117aeaa...1689a0d. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1185,2021-01-04T07:31:54Z,2021-01-05T11:46:49Z,2021-01-05T11:46:50Z,MERGED,True,2,2,2,https://github.com/hakabahitoyo,Suppress error: cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in MG_ENABLE_OPENSSL build.,2,[],https://github.com/cesanta/mongoose/pull/1185,https://github.com/hakabahitoyo,6,https://github.com/cesanta/mongoose/pull/1185#issuecomment-754371314,"This PR suppresses the error cast from ‘void*’ to ‘int’ loses precision [-fpermissive] in the MG_ENABLE_OPENSSL build.
The cast from void * to int is illegal in some modern compilers (GCC, Clang). Casting to ssize_t is still legal.","please sign an CLA

OK. I have signed.

make sure to synchronise an amalgamation with your changes by building mongoose.c and mongoose.h files

OK. This additional commit do that: 1689a0d",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1191,2021-01-12T10:34:10Z,2021-01-17T11:18:33Z,2021-01-17T11:18:33Z,MERGED,True,2,2,1,https://github.com/RiccardoDalFiume,FIX README mg_http_serve*,1,[],https://github.com/cesanta/mongoose/pull/1191,https://github.com/RiccardoDalFiume,1,https://github.com/cesanta/mongoose/pull/1191,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1191,2021-01-12T10:34:10Z,2021-01-17T11:18:33Z,2021-01-17T11:18:33Z,MERGED,True,2,2,1,https://github.com/RiccardoDalFiume,FIX README mg_http_serve*,1,[],https://github.com/cesanta/mongoose/pull/1191,https://github.com/codecov-io,2,https://github.com/cesanta/mongoose/pull/1191#issuecomment-758566762,,"Codecov Report

Merging #1191 (7beff02) into master (a4c9d1e) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1191   +/-   ##
=======================================
  Coverage   92.57%   92.57%           
=======================================
  Files          19       19           
  Lines        2531     2531           
=======================================
  Hits         2343     2343           
  Misses        188      188           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a4c9d1e...7beff02. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1194,2021-01-14T18:17:57Z,2021-01-21T10:02:46Z,2021-01-21T10:02:46Z,CLOSED,False,12,7,1,https://github.com/beyondkyq,Enable DNS resolution to time out.,1,[],https://github.com/cesanta/mongoose/pull/1194,https://github.com/beyondkyq,1,https://github.com/cesanta/mongoose/pull/1194,"When I want to make multiple HTTP requests, the code is as follows,I refer to the example of http-client:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

If the DNS resolution of URL in mg_http_connect fails once, the following log will appear:
2021-01-21 01:49:13    e:\work\code\privatepract 2 -- tchrC
2021-01-21 01:49:13    e:\work\code\privatepract 2 closed
2021-01-21 01:49:13  I e:\work\code\privatepract All connections closed
2021-01-21 01:49:14    e:\work\code\privatepract 1 -> https://test-easy.mall-to.com/api/floor
2021-01-21 01:49:14    e:\work\code\privatepract 2 -> udp://8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 2 resolved, sock 00000000000002D4 -> 8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 1 resolving test-easy.mall-to.com, txnid 1
2021-01-21 01:49:14    e:\work\code\privatepract 2 tUc 39/39 0
2021-01-21 01:49:15    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:15    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:16    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:16    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:17    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:17    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:18    e:\work\code\privatepract 2 -- tchrc

The above logs will loop infinitely. When I debug mongoose.c, I find that mg_mgr_poll will call dns_cb, and ev in dns_cb is MG_EV_POLL, but the parameter fn_data is always null,so the timeout comparison is never performed.It also doesn't trigger MG_EV_CLOSE and MG_EV_ERROR。
If you use an invalid DNS service address, this will happen soon. The code is as follows:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
		mgr.dns4.url = ""udp://127.0.0.1"";
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

mongoose has helped me a lot and can be easily integrated into my device code. However, after upgrading from version 6.xx to 7.0, , there are some problems with my code, I can't refer to the experience of 6.xx,, so I may have used mongoose inappropriately. Thank you for your reply.","When I want to make multiple HTTP requests, the code is as follows,I refer to the example of http-client:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

If the DNS resolution of URL in mg_http_connect fails once, the following log will appear:
2021-01-21 01:49:13    e:\work\code\privatepract 2 -- tchrC
2021-01-21 01:49:13    e:\work\code\privatepract 2 closed
2021-01-21 01:49:13  I e:\work\code\privatepract All connections closed
2021-01-21 01:49:14    e:\work\code\privatepract 1 -> https://test-easy.mall-to.com/api/floor
2021-01-21 01:49:14    e:\work\code\privatepract 2 -> udp://8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 2 resolved, sock 00000000000002D4 -> 8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 1 resolving test-easy.mall-to.com, txnid 1
2021-01-21 01:49:14    e:\work\code\privatepract 2 tUc 39/39 0
2021-01-21 01:49:15    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:15    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:16    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:16    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:17    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:17    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:18    e:\work\code\privatepract 2 -- tchrc

The above logs will loop infinitely. When I debug mongoose.c, I find that mg_mgr_poll will call dns_cb, and ev in dns_cb is MG_EV_POLL, but the parameter fn_data is always null,so the timeout comparison is never performed.It also doesn't trigger MG_EV_CLOSE and MG_EV_ERROR。
If you use an invalid DNS service address, this will happen soon. The code is as follows:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
		mgr.dns4.url = ""udp://127.0.0.1"";
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

mongoose has helped me a lot and can be easily integrated into my device code. However, after upgrading from version 6.xx to 7.0, , there are some problems with my code, I can't refer to the experience of 6.xx,, so I may have used mongoose inappropriately. Thank you for your reply.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1194,2021-01-14T18:17:57Z,2021-01-21T10:02:46Z,2021-01-21T10:02:46Z,CLOSED,False,12,7,1,https://github.com/beyondkyq,Enable DNS resolution to time out.,1,[],https://github.com/cesanta/mongoose/pull/1194,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1194#issuecomment-763993616,"When I want to make multiple HTTP requests, the code is as follows,I refer to the example of http-client:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

If the DNS resolution of URL in mg_http_connect fails once, the following log will appear:
2021-01-21 01:49:13    e:\work\code\privatepract 2 -- tchrC
2021-01-21 01:49:13    e:\work\code\privatepract 2 closed
2021-01-21 01:49:13  I e:\work\code\privatepract All connections closed
2021-01-21 01:49:14    e:\work\code\privatepract 1 -> https://test-easy.mall-to.com/api/floor
2021-01-21 01:49:14    e:\work\code\privatepract 2 -> udp://8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 2 resolved, sock 00000000000002D4 -> 8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 1 resolving test-easy.mall-to.com, txnid 1
2021-01-21 01:49:14    e:\work\code\privatepract 2 tUc 39/39 0
2021-01-21 01:49:15    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:15    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:16    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:16    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:17    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:17    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:18    e:\work\code\privatepract 2 -- tchrc

The above logs will loop infinitely. When I debug mongoose.c, I find that mg_mgr_poll will call dns_cb, and ev in dns_cb is MG_EV_POLL, but the parameter fn_data is always null,so the timeout comparison is never performed.It also doesn't trigger MG_EV_CLOSE and MG_EV_ERROR。
If you use an invalid DNS service address, this will happen soon. The code is as follows:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
		mgr.dns4.url = ""udp://127.0.0.1"";
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

mongoose has helped me a lot and can be easily integrated into my device code. However, after upgrading from version 6.xx to 7.0, , there are some problems with my code, I can't refer to the experience of 6.xx,, so I may have used mongoose inappropriately. Thank you for your reply.","The logic of this PR is unclear, and does not seem to correspond with the description. The style is off. The source is untouched, only the amalgamated mongoose.c.
Please style, change source, comment nicely, squash into once commit, and make sure to sign the CLA at https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1194,2021-01-14T18:17:57Z,2021-01-21T10:02:46Z,2021-01-21T10:02:46Z,CLOSED,False,12,7,1,https://github.com/beyondkyq,Enable DNS resolution to time out.,1,[],https://github.com/cesanta/mongoose/pull/1194,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1194#issuecomment-764522486,"When I want to make multiple HTTP requests, the code is as follows,I refer to the example of http-client:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

If the DNS resolution of URL in mg_http_connect fails once, the following log will appear:
2021-01-21 01:49:13    e:\work\code\privatepract 2 -- tchrC
2021-01-21 01:49:13    e:\work\code\privatepract 2 closed
2021-01-21 01:49:13  I e:\work\code\privatepract All connections closed
2021-01-21 01:49:14    e:\work\code\privatepract 1 -> https://test-easy.mall-to.com/api/floor
2021-01-21 01:49:14    e:\work\code\privatepract 2 -> udp://8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 2 resolved, sock 00000000000002D4 -> 8.8.8.8:53
2021-01-21 01:49:14    e:\work\code\privatepract 1 resolving test-easy.mall-to.com, txnid 1
2021-01-21 01:49:14    e:\work\code\privatepract 2 tUc 39/39 0
2021-01-21 01:49:15    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:15    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:16    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:16    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:17    e:\work\code\privatepract 2 -- tchrc
2021-01-21 01:49:17    e:\work\code\privatepract 1 -- tchRc
2021-01-21 01:49:18    e:\work\code\privatepract 2 -- tchrc

The above logs will loop infinitely. When I debug mongoose.c, I find that mg_mgr_poll will call dns_cb, and ev in dns_cb is MG_EV_POLL, but the parameter fn_data is always null,so the timeout comparison is never performed.It also doesn't trigger MG_EV_CLOSE and MG_EV_ERROR。
If you use an invalid DNS service address, this will happen soon. The code is as follows:
        bool done = false;                        // Event handler flips it to true
 	mg_log_set(""4"");                          // Set to 0 to disable debug

 	while (true)
 	{
		struct mg_mgr mgr;       
 		done = false;
 		mg_mgr_init(&mgr);                        // Initialise event manager	
		mgr.dns4.url = ""udp://127.0.0.1"";
 		mg_http_connect(&mgr, s_url, fn, &done);  // Create client connection
		while (!done)
		{
			mg_mgr_poll(&mgr, 1000);    // Infinite event loop
		}
		mg_mgr_free(&mgr);                        // Free resources
 		std::this_thread::sleep_for(std::chrono::milliseconds(1000));
 	}

mongoose has helped me a lot and can be easily integrated into my device code. However, after upgrading from version 6.xx to 7.0, , there are some problems with my code, I can't refer to the experience of 6.xx,, so I may have used mongoose inappropriately. Thank you for your reply.",The issue was fixed in 6ecb6c1,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1200,2021-01-23T07:53:33Z,2021-01-25T10:37:36Z,2021-01-25T10:37:36Z,MERGED,True,1,1,1,https://github.com/Davonter,Fix README.md mg_mgr_free,1,[],https://github.com/cesanta/mongoose/pull/1200,https://github.com/Davonter,1,https://github.com/cesanta/mongoose/pull/1200,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1200,2021-01-23T07:53:33Z,2021-01-25T10:37:36Z,2021-01-25T10:37:36Z,MERGED,True,1,1,1,https://github.com/Davonter,Fix README.md mg_mgr_free,1,[],https://github.com/cesanta/mongoose/pull/1200,https://github.com/codecov-io,2,https://github.com/cesanta/mongoose/pull/1200#issuecomment-765885877,,"Codecov Report

Merging #1200 (960d3c7) into master (9eabf3f) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1200   +/-   ##
=======================================
  Coverage   92.77%   92.77%           
=======================================
  Files          19       19           
  Lines        2559     2559           
=======================================
  Hits         2374     2374           
  Misses        185      185           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9eabf3f...960d3c7. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1208,2021-01-30T04:08:33Z,2021-01-30T13:08:32Z,2021-01-30T13:08:32Z,CLOSED,False,7,1,2,https://github.com/hakabahitoyo,Improve HTTP client example for TLS and SNI,2,[],https://github.com/cesanta/mongoose/pull/1208,https://github.com/hakabahitoyo,1,https://github.com/cesanta/mongoose/pull/1208,I don't find the documentation that describes how to handle SNI (Server Name Indication) as an HTTPS client. This PR adds some code which handles SNI into the example of HTTP client.,I don't find the documentation that describes how to handle SNI (Server Name Indication) as an HTTPS client. This PR adds some code which handles SNI into the example of HTTP client.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1208,2021-01-30T04:08:33Z,2021-01-30T13:08:32Z,2021-01-30T13:08:32Z,CLOSED,False,7,1,2,https://github.com/hakabahitoyo,Improve HTTP client example for TLS and SNI,2,[],https://github.com/cesanta/mongoose/pull/1208,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1208#issuecomment-770188075,I don't find the documentation that describes how to handle SNI (Server Name Indication) as an HTTPS client. This PR adds some code which handles SNI into the example of HTTP client.,Please sign the CLA https://cesanta.com/cla.html before this gets integrated.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1208,2021-01-30T04:08:33Z,2021-01-30T13:08:32Z,2021-01-30T13:08:32Z,CLOSED,False,7,1,2,https://github.com/hakabahitoyo,Improve HTTP client example for TLS and SNI,2,[],https://github.com/cesanta/mongoose/pull/1208,https://github.com/hakabahitoyo,3,https://github.com/cesanta/mongoose/pull/1208#issuecomment-770206754,I don't find the documentation that describes how to handle SNI (Server Name Indication) as an HTTPS client. This PR adds some code which handles SNI into the example of HTTP client.,"Please sign the CLA https://cesanta.com/cla.html before this gets integrated.

OK. Done.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1208,2021-01-30T04:08:33Z,2021-01-30T13:08:32Z,2021-01-30T13:08:32Z,CLOSED,False,7,1,2,https://github.com/hakabahitoyo,Improve HTTP client example for TLS and SNI,2,[],https://github.com/cesanta/mongoose/pull/1208,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1208#issuecomment-770210227,I don't find the documentation that describes how to handle SNI (Server Name Indication) as an HTTPS client. This PR adds some code which handles SNI into the example of HTTP client.,"Pushed d327ee9 , thank you.
Note: struct mg_tls_opts::srvname changed to simplify TLS setup.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1213,2021-02-03T03:17:53Z,2021-02-03T08:30:56Z,2021-02-03T08:30:56Z,MERGED,True,2,2,1,https://github.com/csimons,README.md: fix typo: is_drainig -> is_draining,1,[],https://github.com/cesanta/mongoose/pull/1213,https://github.com/csimons,1,https://github.com/cesanta/mongoose/pull/1213,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/nopnop2002,1,https://github.com/cesanta/mongoose/pull/1232,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.","There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/nopnop2002,2,https://github.com/cesanta/mongoose/pull/1232#issuecomment-793152495,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.","I forgot to add to mongoose.h.
int mg_mqtt_next_unsub(struct mg_mqtt_message *msg, struct mg_str *topic, int pos);",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1232#issuecomment-793541304,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.",Shall we just rename the existing mg_mqtt_next_sub to something like mg_mqtt_next_topic and avoid having two duplicate functions?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/nopnop2002,4,https://github.com/cesanta/mongoose/pull/1232#issuecomment-793628202,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.",I will respect your opinion and follow your attempts.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/nopnop2002,5,https://github.com/cesanta/mongoose/pull/1232#issuecomment-793637408,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.","If you avoid having two duplicate functions, I have only one request.
My request is to have the version number raised.
This makes it clear that mg_mqtt_next_sub has been renamed to something like mg_mqtt_next_topic.
Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1232,2021-03-08T22:56:20Z,2021-03-09T10:14:24Z,2021-03-09T10:14:24Z,CLOSED,False,13,0,1,https://github.com/nopnop2002,Add mg_mqtt_next_unsub,1,[],https://github.com/cesanta/mongoose/pull/1232,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1232#issuecomment-793666060,"There is mg_mqtt_next_sub.
But There isn't mg_mqtt_next_unsub.
So I added.","Refactored and pushed 829827d
Thanks!",True,{'THUMBS_UP': ['https://github.com/nopnop2002']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1238,2021-03-11T13:02:09Z,2021-03-11T13:16:06Z,2021-03-11T13:16:09Z,MERGED,True,18,18,1,https://github.com/novlean,Fixed typos,1,[],https://github.com/cesanta/mongoose/pull/1238,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1238,Fixed typos in Cesanta.com MWS docs,Fixed typos in Cesanta.com MWS docs,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1238,2021-03-11T13:02:09Z,2021-03-11T13:16:06Z,2021-03-11T13:16:09Z,MERGED,True,18,18,1,https://github.com/novlean,Fixed typos,1,[],https://github.com/cesanta/mongoose/pull/1238,https://github.com/codecov-io,2,https://github.com/cesanta/mongoose/pull/1238#issuecomment-796720459,Fixed typos in Cesanta.com MWS docs,"Codecov Report

Merging #1238 (91ed6de) into master (cf3aafc) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1238   +/-   ##
=======================================
  Coverage   92.83%   92.83%           
=======================================
  Files          19       19           
  Lines        2764     2764           
=======================================
  Hits         2566     2566           
  Misses        198      198           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update cf3aafc...91ed6de. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1245,2021-03-17T14:32:12Z,2021-03-18T08:51:04Z,2021-12-06T13:17:46Z,MERGED,True,46,14,2,https://github.com/ptsolakos,mbedtls parse cert and key from buffer,1,[],https://github.com/cesanta/mongoose/pull/1245,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1245,"Provide possibility to parse opts->cert and opts->certkey from buffer.
Adds functionality proposed in issue #1240 .","Provide possibility to parse opts->cert and opts->certkey from buffer.
Adds functionality proposed in issue #1240 .",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1245,2021-03-17T14:32:12Z,2021-03-18T08:51:04Z,2021-12-06T13:17:46Z,MERGED,True,46,14,2,https://github.com/ptsolakos,mbedtls parse cert and key from buffer,1,[],https://github.com/cesanta/mongoose/pull/1245,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1245#issuecomment-801502763,"Provide possibility to parse opts->cert and opts->certkey from buffer.
Adds functionality proposed in issue #1240 .","Thank you.
Please sign the CLA at https://cesanta.com/cla.html , per https://github.com/cesanta/mongoose#contributions.
Once done, we'll integrate this PR.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1245,2021-03-17T14:32:12Z,2021-03-18T08:51:04Z,2021-12-06T13:17:46Z,MERGED,True,46,14,2,https://github.com/ptsolakos,mbedtls parse cert and key from buffer,1,[],https://github.com/cesanta/mongoose/pull/1245,https://github.com/ptsolakos,3,https://github.com/cesanta/mongoose/pull/1245#issuecomment-801527623,"Provide possibility to parse opts->cert and opts->certkey from buffer.
Adds functionality proposed in issue #1240 .","Thank you Sergey.
Just signed the CLA.
Best regards
Panagiotis",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1247,2021-03-19T14:01:34Z,2021-03-19T14:01:45Z,2021-03-19T14:01:49Z,MERGED,True,1,2,1,https://github.com/novlean,added video call offer,1,[],https://github.com/cesanta/mongoose/pull/1247,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1247,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1259,2021-04-06T18:18:21Z,2021-04-09T15:54:24Z,2021-04-09T15:54:24Z,MERGED,True,12,8,2,https://github.com/mcottrell1,fixed msvc errors around VLAs when using TLS,1,[],https://github.com/cesanta/mongoose/pull/1259,https://github.com/mcottrell1,1,https://github.com/cesanta/mongoose/pull/1259,"MSVC doesn't like VLAs (e.g. https://gcc.godbolt.org/z/Kn6n4TzaP), which means mongoose won't compile with MSVC if using mbedtls or openssl. This resolves it by using a dynamic allocation.
Original errors from mongoose compile with VS2019:
mongoose.c(3671,35): error C2057: expected constant expression
mongoose.c(3671,35): error C2466: cannot allocate an array of constant size 0
mongoose.c(3671,36): error C2133: 'buf': unknown size","MSVC doesn't like VLAs (e.g. https://gcc.godbolt.org/z/Kn6n4TzaP), which means mongoose won't compile with MSVC if using mbedtls or openssl. This resolves it by using a dynamic allocation.
Original errors from mongoose compile with VS2019:
mongoose.c(3671,35): error C2057: expected constant expression
mongoose.c(3671,35): error C2466: cannot allocate an array of constant size 0
mongoose.c(3671,36): error C2133: 'buf': unknown size",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1259,2021-04-06T18:18:21Z,2021-04-09T15:54:24Z,2021-04-09T15:54:24Z,MERGED,True,12,8,2,https://github.com/mcottrell1,fixed msvc errors around VLAs when using TLS,1,[],https://github.com/cesanta/mongoose/pull/1259,https://github.com/codecov-io,2,https://github.com/cesanta/mongoose/pull/1259#issuecomment-814338370,"MSVC doesn't like VLAs (e.g. https://gcc.godbolt.org/z/Kn6n4TzaP), which means mongoose won't compile with MSVC if using mbedtls or openssl. This resolves it by using a dynamic allocation.
Original errors from mongoose compile with VS2019:
mongoose.c(3671,35): error C2057: expected constant expression
mongoose.c(3671,35): error C2466: cannot allocate an array of constant size 0
mongoose.c(3671,36): error C2133: 'buf': unknown size","Codecov Report

Merging #1259 (974c997) into master (16a7ba6) will decrease coverage by 0.06%.
The diff coverage is 20.00%.


@@            Coverage Diff             @@
##           master    #1259      +/-   ##
==========================================
- Coverage   92.81%   92.74%   -0.07%     
==========================================
  Files          19       19              
  Lines        2839     2841       +2     
==========================================
  Hits         2635     2635              
- Misses        204      206       +2     



Impacted Files
Coverage Δ





src/tls.c
80.00% <20.00%> (-1.42%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 16a7ba6...974c997. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1262,2021-04-13T13:52:02Z,2021-04-14T08:30:39Z,2021-04-14T08:30:39Z,CLOSED,False,2,2,2,https://github.com/Chrischenny,Chen,2,[],https://github.com/cesanta/mongoose/pull/1262,https://github.com/Chrischenny,1,https://github.com/cesanta/mongoose/pull/1262,"Change : in mg_socketpair, change the operation macro from AF_INET to AF_UNIX, and socket type from SOCK_DGRAM to SOCK_STREAM
Reason:  socketpair() can only use in AF_UNIX domain, and we usually use text msg (which use to communicate with other modules in our code) rather than streaming media. so, we should use SOCK_STREAM to make sure the msg is reachable","Change : in mg_socketpair, change the operation macro from AF_INET to AF_UNIX, and socket type from SOCK_DGRAM to SOCK_STREAM
Reason:  socketpair() can only use in AF_UNIX domain, and we usually use text msg (which use to communicate with other modules in our code) rather than streaming media. so, we should use SOCK_STREAM to make sure the msg is reachable",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1262,2021-04-13T13:52:02Z,2021-04-14T08:30:39Z,2021-04-14T08:30:39Z,CLOSED,False,2,2,2,https://github.com/Chrischenny,Chen,2,[],https://github.com/cesanta/mongoose/pull/1262,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1262#issuecomment-819336954,"Change : in mg_socketpair, change the operation macro from AF_INET to AF_UNIX, and socket type from SOCK_DGRAM to SOCK_STREAM
Reason:  socketpair() can only use in AF_UNIX domain, and we usually use text msg (which use to communicate with other modules in our code) rather than streaming media. so, we should use SOCK_STREAM to make sure the msg is reachable","There is no AF_UNIX on other platforms, like Windows.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1265,2021-04-16T00:21:48Z,2021-04-29T07:52:10Z,2021-04-29T07:52:11Z,CLOSED,False,43,0,2,https://github.com/mcottrell1,Added secure clearing of iobuf memory,1,[],https://github.com/cesanta/mongoose/pull/1265,https://github.com/mcottrell1,1,https://github.com/cesanta/mongoose/pull/1265,This allows mongoose users to enable securing erasing of data in iobufs by setting MG_SECURE_MEMORY. Useful for ensuring any sensitive data that might have been in a http request/response is erased when the connection is cleaned up as per CERT guidelines MSC18-C and MSC06-C.,This allows mongoose users to enable securing erasing of data in iobufs by setting MG_SECURE_MEMORY. Useful for ensuring any sensitive data that might have been in a http request/response is erased when the connection is cleaned up as per CERT guidelines MSC18-C and MSC06-C.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1265,2021-04-16T00:21:48Z,2021-04-29T07:52:10Z,2021-04-29T07:52:11Z,CLOSED,False,43,0,2,https://github.com/mcottrell1,Added secure clearing of iobuf memory,1,[],https://github.com/cesanta/mongoose/pull/1265,https://github.com/codecov-io,2,https://github.com/cesanta/mongoose/pull/1265#issuecomment-820822000,This allows mongoose users to enable securing erasing of data in iobufs by setting MG_SECURE_MEMORY. Useful for ensuring any sensitive data that might have been in a http request/response is erased when the connection is cleaned up as per CERT guidelines MSC18-C and MSC06-C.,"Codecov Report

Merging #1265 (5227854) into master (1b8624f) will not change coverage.
The diff coverage is 100.00%.


@@           Coverage Diff           @@
##           master    #1265   +/-   ##
=======================================
  Coverage   92.78%   92.78%           
=======================================
  Files          19       19           
  Lines        2840     2840           
=======================================
  Hits         2635     2635           
  Misses        205      205           



Impacted Files
Coverage Δ





src/iobuf.c
90.62% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1b8624f...5227854. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1265,2021-04-16T00:21:48Z,2021-04-29T07:52:10Z,2021-04-29T07:52:11Z,CLOSED,False,43,0,2,https://github.com/mcottrell1,Added secure clearing of iobuf memory,1,[],https://github.com/cesanta/mongoose/pull/1265,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1265#issuecomment-829017922,This allows mongoose users to enable securing erasing of data in iobufs by setting MG_SECURE_MEMORY. Useful for ensuring any sensitive data that might have been in a http request/response is erased when the connection is cleaned up as per CERT guidelines MSC18-C and MSC06-C.,"Integrated 7061b72
Thank you gents.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1273,2021-04-27T01:43:59Z,2021-04-30T01:16:35Z,2021-04-30T01:32:05Z,CLOSED,False,22,12,2,https://github.com/ksanadf,get_chunk_length in http.c has problem,2,[],https://github.com/cesanta/mongoose/pull/1273,https://github.com/ksanadf,1,https://github.com/cesanta/mongoose/pull/1273,chunk data analysis fun has some problem.,chunk data analysis fun has some problem.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1273,2021-04-27T01:43:59Z,2021-04-30T01:16:35Z,2021-04-30T01:32:05Z,CLOSED,False,22,12,2,https://github.com/ksanadf,get_chunk_length in http.c has problem,2,[],https://github.com/cesanta/mongoose/pull/1273,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1273#issuecomment-829020116,chunk data analysis fun has some problem.,"Thank you.
This change does not have any comments, no associated unit test.
Could you at least give an example of data which has issues, please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1273,2021-04-27T01:43:59Z,2021-04-30T01:16:35Z,2021-04-30T01:32:05Z,CLOSED,False,22,12,2,https://github.com/ksanadf,get_chunk_length in http.c has problem,2,[],https://github.com/cesanta/mongoose/pull/1273,https://github.com/ksanadf,3,https://github.com/cesanta/mongoose/pull/1273#issuecomment-829735532,chunk data analysis fun has some problem.,"I didn't check the original code. when I see ""i != '\r'"",  I thought ""using i not buf[i]"" (maybe sth err here).  Then I make some changes. sorry, It's my fault, I'll closed the request immediately.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1275,2021-04-29T16:19:24Z,2021-04-29T18:26:47Z,2021-04-29T18:26:47Z,MERGED,True,1,1,1,https://github.com/ptsolakos,Corrected small typo in docs,1,[],https://github.com/cesanta/mongoose/pull/1275,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1275,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1276,2021-05-04T15:54:20Z,2021-05-04T15:54:28Z,2021-05-04T15:54:32Z,MERGED,True,4,4,1,https://github.com/novlean,fixed typo + added few things,1,[],https://github.com/cesanta/mongoose/pull/1276,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1276,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1277,2021-05-04T16:02:49Z,2021-05-04T16:02:56Z,2021-05-04T16:02:58Z,MERGED,True,4,4,1,https://github.com/novlean,more typos + some fixes,1,[],https://github.com/cesanta/mongoose/pull/1277,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1277,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1284,2021-05-12T08:26:05Z,2021-05-12T09:28:43Z,2021-05-12T09:28:47Z,MERGED,True,54589,152,94,https://github.com/cpq,Stm32,6,[],https://github.com/cesanta/mongoose/pull/1284,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1284,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1284,2021-05-12T08:26:05Z,2021-05-12T09:28:43Z,2021-05-12T09:28:47Z,MERGED,True,54589,152,94,https://github.com/cpq,Stm32,6,[],https://github.com/cesanta/mongoose/pull/1284,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1284#issuecomment-839587764,,"Codecov Report

Merging #1284 (a98e980) into master (9173034) will increase coverage by 0.00%.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1284   +/-   ##
=======================================
  Coverage   90.89%   90.89%           
=======================================
  Files          19       19           
  Lines        2966     2967    +1     
=======================================
+ Hits         2696     2697    +1     
  Misses        270      270           



Impacted Files
Coverage Δ





src/http.c
82.67% <ø> (ø)



src/net.c
94.11% <ø> (ø)



src/sock.c
88.40% <ø> (ø)



src/util.c
93.16% <ø> (+0.04%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9173034...a98e980. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1290,2021-05-23T20:44:39Z,2021-05-24T08:49:35Z,2021-05-24T08:49:36Z,MERGED,True,22,0,1,https://github.com/lnksz,Propose an issue template,1,[],https://github.com/cesanta/mongoose/pull/1290,https://github.com/lnksz,1,https://github.com/cesanta/mongoose/pull/1290,"As it is in the discussion of raised issues to have some extra iteration because of architecture, library version, and other meta information, an issue template could save these extra rounds and possibly reduce the number of duplicates by highlighting where one can check for answers.
This is just a sketch based on what notifications I got from mongoose in the past months. Feel free to change it.","As it is in the discussion of raised issues to have some extra iteration because of architecture, library version, and other meta information, an issue template could save these extra rounds and possibly reduce the number of duplicates by highlighting where one can check for answers.
This is just a sketch based on what notifications I got from mongoose in the past months. Feel free to change it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/Jasper-Ben,1,https://github.com/cesanta/mongoose/pull/1295,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/Jasper-Ben,2,https://github.com/cesanta/mongoose/pull/1295#issuecomment-859136738,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","Please make this change 10 lines maximum.
There is no need to declare variables that are used only once.
3 lines for the build libs target, 3 lines for the install target, 3 lines for uninstall target. Not more.

👋 @cpq, I added a second commit which reduces the LOC and only kept those variables I deemed absolutely necessary. If these changes are OK for you now, I will squash the commit and sign the CLA, so you can merge",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1295#issuecomment-864858386,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","That looks good, please go ahead, squash and sign the CLA!",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/Jasper-Ben,4,https://github.com/cesanta/mongoose/pull/1295#issuecomment-864894740,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","@cpq just added one minor fix with 8a5190b
didn't notice this before as my initial test environment was overwriting the CFLAGS env.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/codecov-commenter,5,https://github.com/cesanta/mongoose/pull/1295#issuecomment-864902779,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","Codecov Report

Merging #1295 (19c0834) into master (886a29d) will decrease coverage by 0.09%.
The diff coverage is 84.61%.


❗ Current head 19c0834 differs from pull request most recent head 8a5190b. Consider uploading reports for the commit 8a5190b to get more accurate results


@@            Coverage Diff             @@
##           master    #1295      +/-   ##
==========================================
- Coverage   90.81%   90.72%   -0.10%     
==========================================
  Files          19       19              
  Lines        2711     2716       +5     
==========================================
+ Hits         2462     2464       +2     
- Misses        249      252       +3     



Impacted Files
Coverage Δ





src/ws.c
81.81% <66.66%> (-1.95%)
⬇️


src/mqtt.c
78.67% <100.00%> (+0.15%)
⬆️


test/unit_test.c
99.65% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 886a29d...8a5190b. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1295,2021-06-07T18:15:13Z,2021-06-21T10:35:44Z,2021-06-21T11:34:38Z,MERGED,True,15,0,1,https://github.com/Jasper-Ben,Add static and dynamic lib targets to Makefile,1,[],https://github.com/cesanta/mongoose/pull/1295,https://github.com/Jasper-Ben,6,https://github.com/cesanta/mongoose/pull/1295#issuecomment-864910187,"I know that the topic has come up a few times already (e.g. #326) and I understand you, as the maintainers, understand mongoose source code to be simply added to an existing project.
However, I believe that packaging mongoose as a separate lib does have its advantages, e.g. when packaging it for a Linux distro, e.g. https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=mongoose or https://github.com/iris-GmbH/meta-iris-thirdparty/blob/feature/jaor/mongoose_recipe/recipes-core/mongoose/mongoose_7.2.bb. For the latter I extended the existing Makefile in what I believe to be a pretty unintrusive way.
I'd be happy if you would reconsider adding support for building mongoose as a library. If not, so be it. No hard feelings 🙂","Squashed and CLA done. Feel free to merge, if happy with the change introduced in 8a5190b 🙂",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1303,2021-06-30T19:57:20Z,2021-07-02T17:28:54Z,2021-07-02T17:28:54Z,MERGED,True,4,4,1,https://github.com/Jasper-Ben,Makefile: change curly brackets to round brackets,1,[],https://github.com/cesanta/mongoose/pull/1303,https://github.com/Jasper-Ben,1,https://github.com/cesanta/mongoose/pull/1303,"Esthetic change which replaces the curly brackets introduced by me in
commit b6ee9e6 with round brackets.
Because consistency.","Esthetic change which replaces the curly brackets introduced by me in
commit b6ee9e6 with round brackets.
Because consistency.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1303,2021-06-30T19:57:20Z,2021-07-02T17:28:54Z,2021-07-02T17:28:54Z,MERGED,True,4,4,1,https://github.com/Jasper-Ben,Makefile: change curly brackets to round brackets,1,[],https://github.com/cesanta/mongoose/pull/1303,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1303#issuecomment-871687633,"Esthetic change which replaces the curly brackets introduced by me in
commit b6ee9e6 with round brackets.
Because consistency.","Codecov Report

Merging #1303 (d7fed15) into master (8f3554d) will not change coverage.
The diff coverage is n/a.


❗ Current head d7fed15 differs from pull request most recent head e69ee90. Consider uploading reports for the commit e69ee90 to get more accurate results


@@           Coverage Diff           @@
##           master    #1303   +/-   ##
=======================================
  Coverage   90.72%   90.72%           
=======================================
  Files          19       19           
  Lines        2716     2716           
=======================================
  Hits         2464     2464           
  Misses        252      252           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8f3554d...e69ee90. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1306,2021-07-04T15:40:49Z,2021-07-13T06:06:30Z,2021-07-13T06:06:30Z,MERGED,True,1,1,1,https://github.com/SimonNitzsche,Fixed typo on README,1,[],https://github.com/cesanta/mongoose/pull/1306,https://github.com/SimonNitzsche,1,https://github.com/cesanta/mongoose/pull/1306,"Added a dot to ""etc"" on the README","Added a dot to ""etc"" on the README",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1310,2021-07-09T09:50:59Z,2021-07-13T06:13:13Z,2021-07-13T06:13:13Z,CLOSED,False,2,0,1,None,_CRT_SECURE_NO_WARNINGS redefinition fix,1,[],https://github.com/cesanta/mongoose/pull/1310,None,1,https://github.com/cesanta/mongoose/pull/1310,_CRT_SECURE_NO_WARNINGS should only be defined if it's not defined to avoid macro redefinition warnings if the project already has it defined.,_CRT_SECURE_NO_WARNINGS should only be defined if it's not defined to avoid macro redefinition warnings if the project already has it defined.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1310,2021-07-09T09:50:59Z,2021-07-13T06:13:13Z,2021-07-13T06:13:13Z,CLOSED,False,2,0,1,None,_CRT_SECURE_NO_WARNINGS redefinition fix,1,[],https://github.com/cesanta/mongoose/pull/1310,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1310#issuecomment-878806940,_CRT_SECURE_NO_WARNINGS should only be defined if it's not defined to avoid macro redefinition warnings if the project already has it defined.,"Again, mongoose.h is an amalgamation - next build swipes away this change.
A source file must be changed instead.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1310,2021-07-09T09:50:59Z,2021-07-13T06:13:13Z,2021-07-13T06:13:13Z,CLOSED,False,2,0,1,None,_CRT_SECURE_NO_WARNINGS redefinition fix,1,[],https://github.com/cesanta/mongoose/pull/1310,None,3,https://github.com/cesanta/mongoose/pull/1310#issuecomment-878807701,_CRT_SECURE_NO_WARNINGS should only be defined if it's not defined to avoid macro redefinition warnings if the project already has it defined.,"Again, mongoose.h is an amalgamation - next build swipes away this change.
A source file must be changed instead.

Didn't notice this. Will have it in mind in case I add another pull  request.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1311,2021-07-12T08:11:37Z,2021-07-13T06:04:06Z,2021-07-13T06:04:06Z,CLOSED,False,9,0,1,None,#1305 Solve linking problems in c++ projects,1,[],https://github.com/cesanta/mongoose/pull/1311,None,1,https://github.com/cesanta/mongoose/pull/1311,This change solves issue #1305 linking problems for users using mongoose in c++ projects.,This change solves issue #1305 linking problems for users using mongoose in c++ projects.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1311,2021-07-12T08:11:37Z,2021-07-13T06:04:06Z,2021-07-13T06:04:06Z,CLOSED,False,9,0,1,None,#1305 Solve linking problems in c++ projects,1,[],https://github.com/cesanta/mongoose/pull/1311,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1311#issuecomment-878786785,This change solves issue #1305 linking problems for users using mongoose in c++ projects.,mongoose.h is an amalgamation. Net rebuild will swipe away this change.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1311,2021-07-12T08:11:37Z,2021-07-13T06:04:06Z,2021-07-13T06:04:06Z,CLOSED,False,9,0,1,None,#1305 Solve linking problems in c++ projects,1,[],https://github.com/cesanta/mongoose/pull/1311,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1311#issuecomment-878804465,This change solves issue #1305 linking problems for users using mongoose in c++ projects.,"Pushed 0155869
Thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1314,2021-07-17T16:08:51Z,2021-07-19T07:47:47Z,2021-07-19T14:10:40Z,CLOSED,False,20,9,1,https://github.com/Bklyn,#1313 expose listening port via conn->peer,1,[],https://github.com/cesanta/mongoose/pull/1314,https://github.com/Bklyn,1,https://github.com/cesanta/mongoose/pull/1314,"Pass an mg_addr pointer to mg_open_listener and use this to populate conn->peer for the caller
Addresses #1313","Pass an mg_addr pointer to mg_open_listener and use this to populate conn->peer for the caller
Addresses #1313",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1314,2021-07-17T16:08:51Z,2021-07-19T07:47:47Z,2021-07-19T14:10:40Z,CLOSED,False,20,9,1,https://github.com/Bklyn,#1313 expose listening port via conn->peer,1,[],https://github.com/cesanta/mongoose/pull/1314,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1314#issuecomment-882096388,"Pass an mg_addr pointer to mg_open_listener and use this to populate conn->peer for the caller
Addresses #1313","@Bklyn thank you.
Before it is integrated, could you confirm you've signed a CLA, please?
https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1314,2021-07-17T16:08:51Z,2021-07-19T07:47:47Z,2021-07-19T14:10:40Z,CLOSED,False,20,9,1,https://github.com/Bklyn,#1313 expose listening port via conn->peer,1,[],https://github.com/cesanta/mongoose/pull/1314,https://github.com/Bklyn,3,https://github.com/cesanta/mongoose/pull/1314#issuecomment-882102405,"Pass an mg_addr pointer to mg_open_listener and use this to populate conn->peer for the caller
Addresses #1313","Yes I have
…
On Sun, Jul 18, 2021, 2:07 PM Sergey Lyubka notifications-at-github.com |github-*****| ***@***.***> wrote:
 @***** <https://github.com/*****> thank you.
 Before it is integrated, could you confirm you've signed a CLA, please?

 https://cesanta.com/cla.html

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#1314 (comment)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/AAAPVAAGSYAGL6IJ5HQXNLLTYMJ6NANCNFSM5ARGN2GA>
 .",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1314,2021-07-17T16:08:51Z,2021-07-19T07:47:47Z,2021-07-19T14:10:40Z,CLOSED,False,20,9,1,https://github.com/Bklyn,#1313 expose listening port via conn->peer,1,[],https://github.com/cesanta/mongoose/pull/1314,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1314#issuecomment-882324083,"Pass an mg_addr pointer to mg_open_listener and use this to populate conn->peer for the caller
Addresses #1313","@Bklyn integrated, thank you.
Had to fix few minor issues and add a notice in the docs.",True,{'THUMBS_UP': ['https://github.com/Bklyn']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1317,2021-07-18T20:30:24Z,2021-07-19T08:04:27Z,2021-07-19T08:06:08Z,CLOSED,False,5,0,1,https://github.com/edubart,"Add ifdef guards, fixes issue #1315",1,[],https://github.com/cesanta/mongoose/pull/1317,https://github.com/edubart,1,https://github.com/cesanta/mongoose/pull/1317,"See https://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards for other people rationale on this.
I followed a tip that an user suggested there, to use ifdef guards and pragma once this way:
#ifndef BLAH_H
#define BLAH_H
#pragma once

// ...

#endif","See https://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards for other people rationale on this.
I followed a tip that an user suggested there, to use ifdef guards and pragma once this way:
#ifndef BLAH_H
#define BLAH_H
#pragma once

// ...

#endif",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1317,2021-07-18T20:30:24Z,2021-07-19T08:04:27Z,2021-07-19T08:06:08Z,CLOSED,False,5,0,1,https://github.com/edubart,"Add ifdef guards, fixes issue #1315",1,[],https://github.com/cesanta/mongoose/pull/1317,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1317#issuecomment-882336580,"See https://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards for other people rationale on this.
I followed a tip that an user suggested there, to use ifdef guards and pragma once this way:
#ifndef BLAH_H
#define BLAH_H
#pragma once

// ...

#endif","@edubart thank you, integrated
Since mongoose.h is generated (amaglamated), a slight modification to the PR made.
Could you also sign the CLA, please? https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1319,2021-07-20T05:04:20Z,2021-07-20T15:46:30Z,2021-07-20T15:47:15Z,MERGED,True,1,1,1,https://github.com/ignacionr,The sanitiser pointed out this problem,1,[],https://github.com/cesanta/mongoose/pull/1319,https://github.com/ignacionr,1,https://github.com/cesanta/mongoose/pull/1319,And I believe it's right. Other-side-close should be done only for the 'A' (proxy-client-side) connection.,And I believe it's right. Other-side-close should be done only for the 'A' (proxy-client-side) connection.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1319,2021-07-20T05:04:20Z,2021-07-20T15:46:30Z,2021-07-20T15:47:15Z,MERGED,True,1,1,1,https://github.com/ignacionr,The sanitiser pointed out this problem,1,[],https://github.com/cesanta/mongoose/pull/1319,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1319#issuecomment-883289278,And I believe it's right. Other-side-close should be done only for the 'A' (proxy-client-side) connection.,"Thank you @ignacionr
Please sign the CLA before this gets integrated:
https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1319,2021-07-20T05:04:20Z,2021-07-20T15:46:30Z,2021-07-20T15:47:15Z,MERGED,True,1,1,1,https://github.com/ignacionr,The sanitiser pointed out this problem,1,[],https://github.com/cesanta/mongoose/pull/1319,https://github.com/ignacionr,3,https://github.com/cesanta/mongoose/pull/1319#issuecomment-883365502,And I believe it's right. Other-side-close should be done only for the 'A' (proxy-client-side) connection.,"Thank you @ignacionr
Please sign the CLA before this gets integrated:
https://cesanta.com/cla.html

This is done. Hope to be of more help in the future, since I truly love this project.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1319,2021-07-20T05:04:20Z,2021-07-20T15:46:30Z,2021-07-20T15:47:15Z,MERGED,True,1,1,1,https://github.com/ignacionr,The sanitiser pointed out this problem,1,[],https://github.com/cesanta/mongoose/pull/1319,https://github.com/codecov-commenter,4,https://github.com/cesanta/mongoose/pull/1319#issuecomment-883496009,And I believe it's right. Other-side-close should be done only for the 'A' (proxy-client-side) connection.,"Codecov Report

Merging #1319 (6ac6aa5) into master (3982e06) will decrease coverage by 0.06%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master    #1319      +/-   ##
==========================================
- Coverage   90.81%   90.74%   -0.07%     
==========================================
  Files          19       19              
  Lines        2721     2723       +2     
==========================================
  Hits         2471     2471              
- Misses        250      252       +2     



Impacted Files
Coverage Δ





src/tls.c
75.00% <0.00%> (-1.54%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3982e06...6ac6aa5. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1324,2021-07-30T17:36:56Z,2021-07-31T21:30:04Z,2021-08-01T00:31:05Z,MERGED,True,3,2,3,https://github.com/ignacionr,"allow for in-url colon, when port is not specified",1,[],https://github.com/cesanta/mongoose/pull/1324,https://github.com/ignacionr,1,https://github.com/cesanta/mongoose/pull/1324,fixes #1323,fixes #1323,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1324,2021-07-30T17:36:56Z,2021-07-31T21:30:04Z,2021-08-01T00:31:05Z,MERGED,True,3,2,3,https://github.com/ignacionr,"allow for in-url colon, when port is not specified",1,[],https://github.com/cesanta/mongoose/pull/1324,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1324#issuecomment-890049071,fixes #1323,"Codecov Report

Merging #1324 (e52a618) into master (3a46055) will increase coverage by 0.00%.
The diff coverage is 100.00%.


@@           Coverage Diff           @@
##           master    #1324   +/-   ##
=======================================
  Coverage   90.96%   90.97%           
=======================================
  Files          21       21           
  Lines        2823     2837   +14     
=======================================
+ Hits         2568     2581   +13     
- Misses        255      256    +1     



Impacted Files
Coverage Δ





src/url.c
100.00% <100.00%> (ø)



test/unit_test.c
99.67% <100.00%> (+<0.01%)
⬆️


src/http.c
82.36% <0.00%> (-0.22%)
⬇️


src/fs_packed.c
88.63% <0.00%> (+2.92%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3a46055...e52a618. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1324,2021-07-30T17:36:56Z,2021-07-31T21:30:04Z,2021-08-01T00:31:05Z,MERGED,True,3,2,3,https://github.com/ignacionr,"allow for in-url colon, when port is not specified",1,[],https://github.com/cesanta/mongoose/pull/1324,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1324#issuecomment-890406055,fixes #1323,Merged with thanks.,True,{'HEART': ['https://github.com/ignacionr']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1333,2021-08-07T16:23:46Z,2021-08-11T19:00:22Z,2021-08-11T19:00:23Z,MERGED,True,356,328,14,https://github.com/cpq,"Better multithreading support: remove mg_socketpair, add mg_mkpipe() and mg_rmpipe()",7,[],https://github.com/cesanta/mongoose/pull/1333,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1333,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1333,2021-08-07T16:23:46Z,2021-08-11T19:00:22Z,2021-08-11T19:00:23Z,MERGED,True,356,328,14,https://github.com/cpq,"Better multithreading support: remove mg_socketpair, add mg_mkpipe() and mg_rmpipe()",7,[],https://github.com/cesanta/mongoose/pull/1333,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1333#issuecomment-894710931,,"Codecov Report

Merging #1333 (8b770d2) into master (86f43cd) will increase coverage by 0.09%.
The diff coverage is 92.48%.


@@            Coverage Diff             @@
##           master    #1333      +/-   ##
==========================================
+ Coverage   90.70%   90.79%   +0.09%     
==========================================
  Files          21       21              
  Lines        2861     2955      +94     
==========================================
+ Hits         2595     2683      +88     
- Misses        266      272       +6     



Impacted Files
Coverage Δ





src/ws.c
78.98% <25.00%> (ø)



src/sock.c
87.31% <89.85%> (+0.09%)
⬆️


src/http.c
82.58% <100.00%> (ø)



src/iobuf.c
94.59% <100.00%> (ø)



src/sntp.c
94.28% <100.00%> (-0.16%)
⬇️


test/unit_test.c
99.69% <100.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 86f43cd...8b770d2. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1336,2021-08-12T08:32:20Z,2021-08-12T11:57:06Z,2021-08-12T11:57:07Z,MERGED,True,58,20,6,https://github.com/zudwalex,Update FREERTOS + LWIP support,1,[],https://github.com/cesanta/mongoose/pull/1336,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1336,Fix small problems related to compilation on STM32/FREERTOS /LWIP platform,Fix small problems related to compilation on STM32/FREERTOS /LWIP platform,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1336,2021-08-12T08:32:20Z,2021-08-12T11:57:06Z,2021-08-12T11:57:07Z,MERGED,True,58,20,6,https://github.com/zudwalex,Update FREERTOS + LWIP support,1,[],https://github.com/cesanta/mongoose/pull/1336,https://github.com/zudwalex,2,https://github.com/cesanta/mongoose/pull/1336#issuecomment-897571573,Fix small problems related to compilation on STM32/FREERTOS /LWIP platform,@cpq VC98 fixed,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1341,2021-08-23T07:33:05Z,2021-08-23T13:50:39Z,2021-08-23T13:50:40Z,MERGED,True,10,6,3,https://github.com/lnksz,Fix #1340: Long HTTP Chunks,2,[],https://github.com/cesanta/mongoose/pull/1341,https://github.com/lnksz,1,https://github.com/cesanta/mongoose/pull/1341,"Fix a copy/paste error, which resulted in only short (<0x10) chunks being handled as expected.
Fixes #1340 .
Out of curiosity I cut out the relevant parts of the code to godbolt.org and enabled PVS Studio to see whether their (excellent) copy-paste detector would throw a warning: https://godbolt.org/z/bP1P93faE
But it didn't :(
Anyway, it would be interesting to register this project to their Open Source free service, in other projects I have seen wonders from this tool:
https://pvs-studio.com/en/blog/posts/0614/","Fix a copy/paste error, which resulted in only short (<0x10) chunks being handled as expected.
Fixes #1340 .
Out of curiosity I cut out the relevant parts of the code to godbolt.org and enabled PVS Studio to see whether their (excellent) copy-paste detector would throw a warning: https://godbolt.org/z/bP1P93faE
But it didn't :(
Anyway, it would be interesting to register this project to their Open Source free service, in other projects I have seen wonders from this tool:
https://pvs-studio.com/en/blog/posts/0614/",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1343,2021-08-27T08:28:51Z,2021-08-28T07:37:59Z,2021-08-28T10:17:55Z,CLOSED,False,2,0,1,https://github.com/mzihlmann,add conn_data to mg_connection,1,[],https://github.com/cesanta/mongoose/pull/1343,https://github.com/mzihlmann,1,https://github.com/cesanta/mongoose/pull/1343,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1343,2021-08-27T08:28:51Z,2021-08-28T07:37:59Z,2021-08-28T10:17:55Z,CLOSED,False,2,0,1,https://github.com/mzihlmann,add conn_data to mg_connection,1,[],https://github.com/cesanta/mongoose/pull/1343,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1343#issuecomment-907587997,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,"Use fn_data
Closing this.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1343,2021-08-27T08:28:51Z,2021-08-28T07:37:59Z,2021-08-28T10:17:55Z,CLOSED,False,2,0,1,https://github.com/mzihlmann,add conn_data to mg_connection,1,[],https://github.com/cesanta/mongoose/pull/1343,https://github.com/mzihlmann,3,https://github.com/cesanta/mongoose/pull/1343#issuecomment-907597580,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,"fn_data is a reference to an object on the listening connection. Assume i only have one listening socket, so for me fn_data is like a global value, all incoming connections reference the same copy. I cannot modify this per-connection, it would affect the state of all connections currently handled. I could replace it on a connection basis but then i also lose reference to it and abuse mongoose, of course it works, but its more simple and straightforward if mongoose would offer a possibility to have a unique userdata attached to each unique connection id. If i get it wrong please explain it to me, would be greatly appreciated.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1343,2021-08-27T08:28:51Z,2021-08-28T07:37:59Z,2021-08-28T10:17:55Z,CLOSED,False,2,0,1,https://github.com/mzihlmann,add conn_data to mg_connection,1,[],https://github.com/cesanta/mongoose/pull/1343,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1343#issuecomment-907605151,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,"You could modify it per connection, just set c->fn_data to a new value.
Let us explain that better in the docs, because it is not clear, and your confusion in genuine.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1343,2021-08-27T08:28:51Z,2021-08-28T07:37:59Z,2021-08-28T10:17:55Z,CLOSED,False,2,0,1,https://github.com/mzihlmann,add conn_data to mg_connection,1,[],https://github.com/cesanta/mongoose/pull/1343,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1343#issuecomment-907605660,conn_data is a hook for the user to attach arbitrary data on the connection itself. this allows the user to manage arbitrary state on the connection without relying on an external database for a mapping id -> void*.,"Updated https://github.com/cesanta/mongoose/tree/master/docs#event-handler-function
Thanks for your patience and for getting in touch! Let us know if it is still unclear.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1344,2021-08-27T21:46:16Z,2021-08-28T07:37:26Z,2021-08-28T07:37:26Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, priorty -> priority",1,[],https://github.com/cesanta/mongoose/pull/1344,https://github.com/timgates42,1,https://github.com/cesanta/mongoose/pull/1344,"There is a small typo in examples/stm32-freertos-tcp/stm32f7/core_cm7.h.
Should read priority rather than priorty.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in examples/stm32-freertos-tcp/stm32f7/core_cm7.h.
Should read priority rather than priorty.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1344,2021-08-27T21:46:16Z,2021-08-28T07:37:26Z,2021-08-28T07:37:26Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, priorty -> priority",1,[],https://github.com/cesanta/mongoose/pull/1344,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1344#issuecomment-907578974,"There is a small typo in examples/stm32-freertos-tcp/stm32f7/core_cm7.h.
Should read priority rather than priorty.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","Codecov Report

Merging #1344 (9f827fe) into master (7ba6fda) will increase coverage by 0.24%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master    #1344      +/-   ##
==========================================
+ Coverage   90.86%   91.10%   +0.24%     
==========================================
  Files          21       21              
  Lines        2966     3025      +59     
==========================================
+ Hits         2695     2756      +61     
+ Misses        271      269       -2     



Impacted Files
Coverage Δ





test/unit_test.c
99.70% <0.00%> (+0.01%)
⬆️


src/iobuf.c
94.87% <0.00%> (+0.27%)
⬆️


src/ws.c
82.46% <0.00%> (+3.48%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7ba6fda...9f827fe. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1346,2021-09-05T10:31:27Z,2021-09-05T10:31:40Z,2021-09-05T10:31:59Z,CLOSED,False,1826,219,12,https://github.com/zudwalex,Update docs,6,[],https://github.com/cesanta/mongoose/pull/1346,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1346,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1346,2021-09-05T10:31:27Z,2021-09-05T10:31:40Z,2021-09-05T10:31:59Z,CLOSED,False,1826,219,12,https://github.com/zudwalex,Update docs,6,[],https://github.com/cesanta/mongoose/pull/1346,https://github.com/zudwalex,2,https://github.com/cesanta/mongoose/pull/1346#issuecomment-913126506,,Opened by mistake,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1350,2021-09-15T19:24:39Z,2021-09-15T19:51:18Z,2021-09-15T19:51:18Z,MERGED,True,722,80,1,https://github.com/zudwalex,Add parameters descriptions to documentation,1,[],https://github.com/cesanta/mongoose/pull/1350,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1350,Describe parameters and return values of Mongoose API,Describe parameters and return values of Mongoose API,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1350,2021-09-15T19:24:39Z,2021-09-15T19:51:18Z,2021-09-15T19:51:18Z,MERGED,True,722,80,1,https://github.com/zudwalex,Add parameters descriptions to documentation,1,[],https://github.com/cesanta/mongoose/pull/1350,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1350#issuecomment-920314558,Describe parameters and return values of Mongoose API,"Codecov Report

Merging #1350 (eb94704) into master (894a168) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1350   +/-   ##
=======================================
  Coverage   91.27%   91.27%           
=======================================
  Files          21       21           
  Lines        3049     3049           
=======================================
  Hits         2783     2783           
  Misses        266      266           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 894a168...eb94704. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1355,2021-09-21T17:02:15Z,2021-09-21T17:07:33Z,2021-09-21T17:07:38Z,MERGED,True,1,1,1,https://github.com/novlean,2021,1,[],https://github.com/cesanta/mongoose/pull/1355,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1355,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1356,2021-09-23T12:51:23Z,2021-09-24T03:41:18Z,2021-09-24T03:41:18Z,CLOSED,False,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1356,https://github.com/yermin,1,https://github.com/cesanta/mongoose/pull/1356,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1356,2021-09-23T12:51:23Z,2021-09-24T03:41:18Z,2021-09-24T03:41:18Z,CLOSED,False,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1356,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1356#issuecomment-925905386,,@yermin thank you. Please sign the CLA (linked from a project readme page) before this gets integrated.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1358,2021-09-24T03:40:46Z,2021-09-27T08:00:11Z,2021-09-27T08:00:22Z,MERGED,True,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1358,https://github.com/yermin,1,https://github.com/cesanta/mongoose/pull/1358,Signed-off-by: yermin yermin@buaa.edu.cn,Signed-off-by: yermin yermin@buaa.edu.cn,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1358,2021-09-24T03:40:46Z,2021-09-27T08:00:11Z,2021-09-27T08:00:22Z,MERGED,True,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1358,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1358#issuecomment-926421688,Signed-off-by: yermin yermin@buaa.edu.cn,@yermin this is confusing. Why the old PR was closed? Did you sign the CLA?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1358,2021-09-24T03:40:46Z,2021-09-27T08:00:11Z,2021-09-27T08:00:22Z,MERGED,True,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1358,https://github.com/yermin,3,https://github.com/cesanta/mongoose/pull/1358#issuecomment-926767111,Signed-off-by: yermin yermin@buaa.edu.cn,"sorry, this is my first PR, I don't know how to this. I have already sign the CLA",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1358,2021-09-24T03:40:46Z,2021-09-27T08:00:11Z,2021-09-27T08:00:22Z,MERGED,True,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1358,https://github.com/codecov-commenter,4,https://github.com/cesanta/mongoose/pull/1358#issuecomment-927618828,Signed-off-by: yermin yermin@buaa.edu.cn,"Codecov Report

Merging #1358 (a180727) into master (c490ff8) will not change coverage.
The diff coverage is n/a.


❗ Current head a180727 differs from pull request most recent head 8f693b9. Consider uploading reports for the commit 8f693b9 to get more accurate results


@@           Coverage Diff           @@
##           master    #1358   +/-   ##
=======================================
  Coverage   91.37%   91.37%           
=======================================
  Files          21       21           
  Lines        3094     3094           
=======================================
  Hits         2827     2827           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c490ff8...8f693b9. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1358,2021-09-24T03:40:46Z,2021-09-27T08:00:11Z,2021-09-27T08:00:22Z,MERGED,True,27,22,1,https://github.com/yermin,makes it more readable,1,[],https://github.com/cesanta/mongoose/pull/1358,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1358#issuecomment-927624580,Signed-off-by: yermin yermin@buaa.edu.cn,"Merged, thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1360,2021-09-24T12:36:43Z,2021-09-27T07:39:15Z,2021-09-27T07:39:16Z,MERGED,True,120,6,7,https://github.com/zudwalex,Add AzureRTOS basic support,1,[],https://github.com/cesanta/mongoose/pull/1360,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1360,Changes required for HTTP Server example work in AzureRTOS enviroment,Changes required for HTTP Server example work in AzureRTOS enviroment,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1360,2021-09-24T12:36:43Z,2021-09-27T07:39:15Z,2021-09-27T07:39:16Z,MERGED,True,120,6,7,https://github.com/zudwalex,Add AzureRTOS basic support,1,[],https://github.com/cesanta/mongoose/pull/1360,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1360#issuecomment-926592212,Changes required for HTTP Server example work in AzureRTOS enviroment,"Codecov Report

Merging #1360 (a10e2e0) into master (5bf5516) will increase coverage by 0.22%.
The diff coverage is 96.29%.


❗ Current head a10e2e0 differs from pull request most recent head 72c8ee0. Consider uploading reports for the commit 72c8ee0 to get more accurate results


@@            Coverage Diff             @@
##           master    #1360      +/-   ##
==========================================
+ Coverage   91.14%   91.37%   +0.22%     
==========================================
  Files          21       21              
  Lines        3038     3094      +56     
==========================================
+ Hits         2769     2827      +58     
+ Misses        269      267       -2     



Impacted Files
Coverage Δ





src/fs_packed.c
87.80% <ø> (-0.84%)
⬇️


src/url.c
100.00% <ø> (ø)



src/ws.c
82.58% <ø> (+0.11%)
⬆️


src/fs_posix.c
91.66% <80.00%> (-0.34%)
⬇️


src/sock.c
86.56% <80.00%> (-0.66%)
⬇️


src/http.c
83.92% <95.34%> (+1.34%)
⬆️


src/log.c
89.65% <100.00%> (-0.35%)
⬇️


src/net.c
94.18% <100.00%> (+0.85%)
⬆️


src/util.c
93.19% <100.00%> (ø)



test/unit_test.c
99.71% <100.00%> (+<0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5bf5516...72c8ee0. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1363,2021-09-24T18:07:25Z,2021-09-27T07:44:43Z,2021-09-27T07:44:43Z,MERGED,True,382,382,1,https://github.com/tophatgeeks,Update README - Jordan Ramsey Edits.md,1,[],https://github.com/cesanta/mongoose/pull/1363,https://github.com/tophatgeeks,1,https://github.com/cesanta/mongoose/pull/1363,"I have gone through and edited for consistency, punctuation, wording, and grammar. If you have questions feel free to reach out.  I fixed some spelling errors ""if"" instead of ""is"" ""update"" instead of ""updatw"", etc.
-Jordan Ramsey","I have gone through and edited for consistency, punctuation, wording, and grammar. If you have questions feel free to reach out.  I fixed some spelling errors ""if"" instead of ""is"" ""update"" instead of ""updatw"", etc.
-Jordan Ramsey",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1363,2021-09-24T18:07:25Z,2021-09-27T07:44:43Z,2021-09-27T07:44:43Z,MERGED,True,382,382,1,https://github.com/tophatgeeks,Update README - Jordan Ramsey Edits.md,1,[],https://github.com/cesanta/mongoose/pull/1363,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1363#issuecomment-927614581,"I have gone through and edited for consistency, punctuation, wording, and grammar. If you have questions feel free to reach out.  I fixed some spelling errors ""if"" instead of ""is"" ""update"" instead of ""updatw"", etc.
-Jordan Ramsey","Codecov Report

Merging #1363 (79e9fae) into master (c490ff8) will not change coverage.
The diff coverage is n/a.


❗ Current head 79e9fae differs from pull request most recent head 6b1ff37. Consider uploading reports for the commit 6b1ff37 to get more accurate results


@@           Coverage Diff           @@
##           master    #1363   +/-   ##
=======================================
  Coverage   91.37%   91.37%           
=======================================
  Files          21       21           
  Lines        3094     3094           
=======================================
  Hits         2827     2827           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c490ff8...6b1ff37. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1365,2021-09-27T08:13:14Z,2021-09-27T10:50:48Z,2021-09-27T10:50:48Z,MERGED,True,8,0,1,https://github.com/zudwalex,Add NXP MIMXRT1020 AzureRTOS example,1,[],https://github.com/cesanta/mongoose/pull/1365,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1365,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1366,2021-09-29T09:20:39Z,2021-10-02T21:45:08Z,2021-10-02T21:45:09Z,MERGED,True,2,0,2,https://github.com/zudwalex,Add missed include for FreeRTOS/LwIP arch,1,[],https://github.com/cesanta/mongoose/pull/1366,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1366,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1368,2021-10-04T10:16:30Z,2021-10-04T11:04:00Z,2021-10-04T11:04:00Z,MERGED,True,42,0,4,https://github.com/zudwalex,Add NXP examples,2,[],https://github.com/cesanta/mongoose/pull/1368,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1368,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1368,2021-10-04T10:16:30Z,2021-10-04T11:04:00Z,2021-10-04T11:04:00Z,MERGED,True,42,0,4,https://github.com/zudwalex,Add NXP examples,2,[],https://github.com/cesanta/mongoose/pull/1368,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1368#issuecomment-933343840,,"Codecov Report

Merging #1368 (d2f8b34) into master (693863a) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1368   +/-   ##
=======================================
  Coverage   91.37%   91.37%           
=======================================
  Files          21       21           
  Lines        3094     3094           
=======================================
  Hits         2827     2827           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 693863a...d2f8b34. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1371,2021-10-05T15:54:38Z,2021-10-05T15:54:44Z,2021-10-05T15:54:47Z,MERGED,True,6,10,1,https://github.com/novlean,mongoose.ws,1,[],https://github.com/cesanta/mongoose/pull/1371,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1371,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1372,2021-10-05T16:09:39Z,2021-10-05T16:09:43Z,2021-10-05T16:09:46Z,MERGED,True,1,1,1,https://github.com/novlean,license,1,[],https://github.com/cesanta/mongoose/pull/1372,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1372,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1373,2021-10-06T11:12:55Z,2021-10-06T11:31:27Z,2021-10-06T11:31:27Z,MERGED,True,7,0,7,https://github.com/zudwalex,Use mongoose.[ch] from main repo,1,[],https://github.com/cesanta/mongoose/pull/1373,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1373,Copy mongoose.[ch] from parent folder to example folder on make build invocation,Copy mongoose.[ch] from parent folder to example folder on make build invocation,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1373,2021-10-06T11:12:55Z,2021-10-06T11:31:27Z,2021-10-06T11:31:27Z,MERGED,True,7,0,7,https://github.com/zudwalex,Use mongoose.[ch] from main repo,1,[],https://github.com/cesanta/mongoose/pull/1373,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1373#issuecomment-936009202,Copy mongoose.[ch] from parent folder to example folder on make build invocation,"Codecov Report

Merging #1373 (655529f) into master (fd5319e) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1373   +/-   ##
=======================================
  Coverage   91.36%   91.36%           
=======================================
  Files          21       21           
  Lines        3093     3093           
=======================================
  Hits         2826     2826           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fd5319e...655529f. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1377,2021-10-13T02:07:53Z,2021-10-22T12:16:07Z,2021-10-22T12:19:03Z,MERGED,True,18,11,9,https://github.com/jameshilliard,Make private functions static and add missing prototypes.,1,[],https://github.com/cesanta/mongoose/pull/1377,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1377,"Fixes:
mongoose/mongoose.c:180:8: warning: no previous prototype for ‘mg_dns_parse_name’ [-Wmissing-prototypes]
  180 | size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs, char *dst,
      |        ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:306:6: warning: no previous prototype for ‘mg_dns_send’ [-Wmissing-prototypes]
  306 | void mg_dns_send(struct mg_connection *c, const struct mg_str *name,
      |      ^~~~~~~~~~~
mongoose/mongoose.c:925:6: warning: no previous prototype for ‘mg_http_parse_headers’ [-Wmissing-prototypes]
  925 | void mg_http_parse_headers(const char *s, const char *end,
      |      ^~~~~~~~~~~~~~~~~~~~~
mongoose/mongoose.c:1125:7: warning: no previous prototype for ‘mg_http_etag’ [-Wmissing-prototypes]
 1125 | char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
      |       ^~~~~~~~~~~~
mongoose/mongoose.c:2578:6: warning: no previous prototype for ‘mg_sha1_transform’ [-Wmissing-prototypes]
 2578 | void mg_sha1_transform(uint32_t state[5], const unsigned char buffer[64]) {
      |      ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:2976:8: warning: no previous prototype for ‘mg_open_listener’ [-Wmissing-prototypes]
 2976 | SOCKET mg_open_listener(const char *url, struct mg_addr *addr) {
      |        ^~~~~~~~~~~~~~~~","Fixes:
mongoose/mongoose.c:180:8: warning: no previous prototype for ‘mg_dns_parse_name’ [-Wmissing-prototypes]
  180 | size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs, char *dst,
      |        ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:306:6: warning: no previous prototype for ‘mg_dns_send’ [-Wmissing-prototypes]
  306 | void mg_dns_send(struct mg_connection *c, const struct mg_str *name,
      |      ^~~~~~~~~~~
mongoose/mongoose.c:925:6: warning: no previous prototype for ‘mg_http_parse_headers’ [-Wmissing-prototypes]
  925 | void mg_http_parse_headers(const char *s, const char *end,
      |      ^~~~~~~~~~~~~~~~~~~~~
mongoose/mongoose.c:1125:7: warning: no previous prototype for ‘mg_http_etag’ [-Wmissing-prototypes]
 1125 | char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
      |       ^~~~~~~~~~~~
mongoose/mongoose.c:2578:6: warning: no previous prototype for ‘mg_sha1_transform’ [-Wmissing-prototypes]
 2578 | void mg_sha1_transform(uint32_t state[5], const unsigned char buffer[64]) {
      |      ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:2976:8: warning: no previous prototype for ‘mg_open_listener’ [-Wmissing-prototypes]
 2976 | SOCKET mg_open_listener(const char *url, struct mg_addr *addr) {
      |        ^~~~~~~~~~~~~~~~",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1377,2021-10-13T02:07:53Z,2021-10-22T12:16:07Z,2021-10-22T12:19:03Z,MERGED,True,18,11,9,https://github.com/jameshilliard,Make private functions static and add missing prototypes.,1,[],https://github.com/cesanta/mongoose/pull/1377,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1377#issuecomment-949576198,"Fixes:
mongoose/mongoose.c:180:8: warning: no previous prototype for ‘mg_dns_parse_name’ [-Wmissing-prototypes]
  180 | size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs, char *dst,
      |        ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:306:6: warning: no previous prototype for ‘mg_dns_send’ [-Wmissing-prototypes]
  306 | void mg_dns_send(struct mg_connection *c, const struct mg_str *name,
      |      ^~~~~~~~~~~
mongoose/mongoose.c:925:6: warning: no previous prototype for ‘mg_http_parse_headers’ [-Wmissing-prototypes]
  925 | void mg_http_parse_headers(const char *s, const char *end,
      |      ^~~~~~~~~~~~~~~~~~~~~
mongoose/mongoose.c:1125:7: warning: no previous prototype for ‘mg_http_etag’ [-Wmissing-prototypes]
 1125 | char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
      |       ^~~~~~~~~~~~
mongoose/mongoose.c:2578:6: warning: no previous prototype for ‘mg_sha1_transform’ [-Wmissing-prototypes]
 2578 | void mg_sha1_transform(uint32_t state[5], const unsigned char buffer[64]) {
      |      ^~~~~~~~~~~~~~~~~
mongoose/mongoose.c:2976:8: warning: no previous prototype for ‘mg_open_listener’ [-Wmissing-prototypes]
 2976 | SOCKET mg_open_listener(const char *url, struct mg_addr *addr) {
      |        ^~~~~~~~~~~~~~~~",Merged with thanks,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1378,2021-10-13T19:24:33Z,2021-10-22T13:03:42Z,2021-10-22T13:46:16Z,MERGED,True,15,13,6,https://github.com/jameshilliard,Fix some undefined macro warnings.,2,[],https://github.com/cesanta/mongoose/pull/1378,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1378,Should silence warnings when these macros are undefined.,Should silence warnings when these macros are undefined.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1379,2021-10-13T22:49:38Z,2021-10-22T13:04:54Z,2021-10-22T13:09:54Z,MERGED,True,2,2,2,https://github.com/jameshilliard,sntp: Don't set Leap Indicator in client messages.,1,[],https://github.com/cesanta/mongoose/pull/1379,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1379,"Per RFC4330:
This field is significant only in server messages","Per RFC4330:
This field is significant only in server messages",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1379,2021-10-13T22:49:38Z,2021-10-22T13:04:54Z,2021-10-22T13:09:54Z,MERGED,True,2,2,2,https://github.com/jameshilliard,sntp: Don't set Leap Indicator in client messages.,1,[],https://github.com/cesanta/mongoose/pull/1379,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1379#issuecomment-949470706,"Per RFC4330:
This field is significant only in server messages","Codecov Report

Merging #1379 (d7925e0) into master (b5147a1) will not change coverage.
The diff coverage is 100.00%.


❗ Current head d7925e0 differs from pull request most recent head 37d45b3. Consider uploading reports for the commit 37d45b3 to get more accurate results


@@           Coverage Diff           @@
##           master    #1379   +/-   ##
=======================================
  Coverage   91.36%   91.36%           
=======================================
  Files          21       21           
  Lines        3093     3093           
=======================================
  Hits         2826     2826           
  Misses        267      267           



Impacted Files
Coverage Δ





src/sntp.c
94.28% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b5147a1...37d45b3. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1380,2021-10-13T23:10:45Z,2021-10-22T13:06:45Z,2021-10-22T13:46:24Z,MERGED,True,38,0,2,https://github.com/jameshilliard,util: Actually return uptime on OSX/Linux for mg_millis,1,[],https://github.com/cesanta/mongoose/pull/1380,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1380,"The documentation for mg_millis indicates it will:
Return current uptime in milliseconds.
So we should use API's that actually return uptime.","The documentation for mg_millis indicates it will:
Return current uptime in milliseconds.
So we should use API's that actually return uptime.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1380,2021-10-13T23:10:45Z,2021-10-22T13:06:45Z,2021-10-22T13:46:24Z,MERGED,True,38,0,2,https://github.com/jameshilliard,util: Actually return uptime on OSX/Linux for mg_millis,1,[],https://github.com/cesanta/mongoose/pull/1380,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1380#issuecomment-949470129,"The documentation for mg_millis indicates it will:
Return current uptime in milliseconds.
So we should use API's that actually return uptime.","@jameshilliard thank you! Could you  sign the https://cesanta.com/cla.html to have that integrated , please ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1380,2021-10-13T23:10:45Z,2021-10-22T13:06:45Z,2021-10-22T13:46:24Z,MERGED,True,38,0,2,https://github.com/jameshilliard,util: Actually return uptime on OSX/Linux for mg_millis,1,[],https://github.com/cesanta/mongoose/pull/1380,https://github.com/codecov-commenter,3,https://github.com/cesanta/mongoose/pull/1380#issuecomment-949470614,"The documentation for mg_millis indicates it will:
Return current uptime in milliseconds.
So we should use API's that actually return uptime.","Codecov Report

Merging #1380 (d0bc6be) into master (b5147a1) will not change coverage.
The diff coverage is 100.00%.


❗ Current head d0bc6be differs from pull request most recent head 001dc3f. Consider uploading reports for the commit 001dc3f to get more accurate results


@@           Coverage Diff           @@
##           master    #1380   +/-   ##
=======================================
  Coverage   91.36%   91.36%           
=======================================
  Files          21       21           
  Lines        3093     3093           
=======================================
  Hits         2826     2826           
  Misses        267      267           



Impacted Files
Coverage Δ





src/util.c
93.15% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b5147a1...001dc3f. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1381,2021-10-14T16:00:24Z,2021-10-22T19:30:47Z,2021-10-22T19:30:47Z,MERGED,True,46,8,5,https://github.com/ptsolakos,Certificate revocation checking when using mbedtls,1,[],https://github.com/cesanta/mongoose/pull/1381,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1381,This commit expands mongoose API so that it is possible to use the Certificate Revocation List checking supported by mbedtls.,This commit expands mongoose API so that it is possible to use the Certificate Revocation List checking supported by mbedtls.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1381,2021-10-14T16:00:24Z,2021-10-22T19:30:47Z,2021-10-22T19:30:47Z,MERGED,True,46,8,5,https://github.com/ptsolakos,Certificate revocation checking when using mbedtls,1,[],https://github.com/cesanta/mongoose/pull/1381,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1381#issuecomment-949405505,This commit expands mongoose API so that it is possible to use the Certificate Revocation List checking supported by mbedtls.,"Thank you.
Please confirm you've signed the CLA at https://cesanta.com/cla.html",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1381,2021-10-14T16:00:24Z,2021-10-22T19:30:47Z,2021-10-22T19:30:47Z,MERGED,True,46,8,5,https://github.com/ptsolakos,Certificate revocation checking when using mbedtls,1,[],https://github.com/cesanta/mongoose/pull/1381,https://github.com/ptsolakos,3,https://github.com/cesanta/mongoose/pull/1381#issuecomment-949754021,This commit expands mongoose API so that it is possible to use the Certificate Revocation List checking supported by mbedtls.,"Thank you.
I have signed the CLA.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1384,2021-10-22T09:59:33Z,2021-10-22T12:39:02Z,2021-10-22T12:39:03Z,MERGED,True,248,8,21,https://github.com/zudwalex,Add more NXP examples and move them to nxp folder,1,[],https://github.com/cesanta/mongoose/pull/1384,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1384,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1385,2021-10-22T11:10:30Z,2021-10-22T12:39:14Z,2021-10-22T12:39:14Z,MERGED,True,18,18,34,https://github.com/zudwalex,Move STM32 examples to stm32 folder,1,[],https://github.com/cesanta/mongoose/pull/1385,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1385,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1387,This makes it easier for projects using mongoose to audit license compliance.,This makes it easier for projects using mongoose to audit license compliance.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1387#issuecomment-950099264,This makes it easier for projects using mongoose to audit license compliance.,"Codecov Report

Merging #1387 (8a686dd) into master (b5147a1) will decrease coverage by 0.15%.
The diff coverage is n/a.


❗ Current head 8a686dd differs from pull request most recent head cca4a3a. Consider uploading reports for the commit cca4a3a to get more accurate results


@@            Coverage Diff             @@
##           master    #1387      +/-   ##
==========================================
- Coverage   91.36%   91.20%   -0.16%     
==========================================
  Files          21       21              
  Lines        3093     3117      +24     
==========================================
+ Hits         2826     2843      +17     
- Misses        267      274       +7     



Impacted Files
Coverage Δ





src/tls.c
70.53% <0.00%> (-3.73%)
⬇️


src/sntp.c
94.11% <0.00%> (-0.17%)
⬇️


src/sock.c
86.51% <0.00%> (-0.06%)
⬇️


src/ws.c
82.58% <0.00%> (ø)



src/dns.c
88.88% <0.00%> (ø)



src/mqtt.c
78.67% <0.00%> (ø)



src/util.c
93.15% <0.00%> (ø)



src/base64.c
96.15% <0.00%> (ø)



src/fs_posix.c
91.66% <0.00%> (ø)



test/unit_test.c
99.71% <0.00%> (+<0.01%)
⬆️


... and 1 more






Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b5147a1...cca4a3a. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1387#issuecomment-950123056,This makes it easier for projects using mongoose to audit license compliance.,"@jameshilliard thanks but we cannot accept this change. Our license is not GPLv2 only, it is dual.
We'd like to keep the license snippet as it is.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1387#issuecomment-950125416,This makes it easier for projects using mongoose to audit license compliance.,"Our license is not GPLv2 only, it is dual.

That is still in the full license text, SPDX from my understanding is just for flagging open source license compatibility.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/jameshilliard,5,https://github.com/cesanta/mongoose/pull/1387#issuecomment-950125766,This makes it easier for projects using mongoose to audit license compliance.,"Oh, actually I think the way to do this is a custom spdx LICENSE file for the commercial license option, I'll rework this to add that.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/jameshilliard,6,https://github.com/cesanta/mongoose/pull/1387#issuecomment-950128686,This makes it easier for projects using mongoose to audit license compliance.,@cpq SPDX Identifier updated to indicate dual license.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1387,2021-10-23T06:18:57Z,2021-10-27T18:31:20Z,2021-10-27T18:31:20Z,CLOSED,False,17,0,4,https://github.com/jameshilliard,Add SPDX Identifier.,1,[],https://github.com/cesanta/mongoose/pull/1387,https://github.com/cpq,7,https://github.com/cesanta/mongoose/pull/1387#issuecomment-953201014,This makes it easier for projects using mongoose to audit license compliance.,"Thank you, but we'd like to keep our license text exactly how it is.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1388,Potential fix for #1375.,Potential fix for #1375.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1388#issuecomment-950126333,Potential fix for #1375.,"Codecov Report

Merging #1388 (4b70874) into master (4e523cc) will increase coverage by 0.15%.
The diff coverage is 100.00%.


❗ Current head 4b70874 differs from pull request most recent head 79200e8. Consider uploading reports for the commit 79200e8 to get more accurate results


@@            Coverage Diff             @@
##           master    #1388      +/-   ##
==========================================
+ Coverage   91.20%   91.35%   +0.15%     
==========================================
  Files          21       21              
  Lines        3117     3148      +31     
==========================================
+ Hits         2843     2876      +33     
+ Misses        274      272       -2     



Impacted Files
Coverage Δ





src/http.c
84.40% <100.00%> (+0.41%)
⬆️


src/mqtt.c
78.98% <100.00%> (+0.30%)
⬆️


src/sock.c
86.81% <100.00%> (+0.29%)
⬆️


test/unit_test.c
99.72% <100.00%> (+<0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 4e523cc...79200e8. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1388#issuecomment-950195381,Potential fix for #1375.,"Is the same effect achieved by changing callback calling order ?
Currently, mg_call() implementation first calls c->pfn (protocol handler) then c->fn (user handler).
If we call the user handler first, that'll be more correct and gives a chance to the user callback to intercept data.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1388#issuecomment-950236081,Potential fix for #1375.,"Is the same effect achieved by changing callback calling order ?

I don't think it's the same.

If we call the user handler first, that'll be more correct and gives a chance to the user callback to intercept data.

Wouldn't that potentially introduce other side effects?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1388#issuecomment-953197678,Potential fix for #1375.,"TBH it is hard to see the benefit of this PR, whilst the logic is more or less clear.
Thus I am reluctant to add an extra logic and extra structure member with an unclear benefit.
Please add a failing unit test that this PR fixes.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/jameshilliard,6,https://github.com/cesanta/mongoose/pull/1388#issuecomment-953584436,Potential fix for #1375.,"Please add a failing unit test that this PR fixes.

Yeah, let me see what I can come up with, the failure scenario is a bit complex I think.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1388,2021-10-23T09:51:14Z,2021-10-30T11:25:28Z,2021-10-30T11:25:28Z,CLOSED,False,69,9,7,https://github.com/jameshilliard,Don't delete recv buffer until all callbacks are processed.,1,[],https://github.com/cesanta/mongoose/pull/1388,https://github.com/jameshilliard,7,https://github.com/cesanta/mongoose/pull/1388#issuecomment-955193946,Potential fix for #1375.,"I think the issue I was hitting may have a different cause, I'm going to close this for now.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1393,2021-10-31T17:03:41Z,2021-11-01T20:31:52Z,2021-11-01T20:51:00Z,CLOSED,False,0,1,1,https://github.com/jcorporation,Sort mime types and remove duplicates,1,[],https://github.com/cesanta/mongoose/pull/1393,https://github.com/jcorporation,1,https://github.com/cesanta/mongoose/pull/1393,As the title says. CLA is already signed by me.,As the title says. CLA is already signed by me.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1393,2021-10-31T17:03:41Z,2021-11-01T20:31:52Z,2021-11-01T20:51:00Z,CLOSED,False,0,1,1,https://github.com/jcorporation,Sort mime types and remove duplicates,1,[],https://github.com/cesanta/mongoose/pull/1393,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1393#issuecomment-956225757,As the title says. CLA is already signed by me.,"The list is intentionally unsorted: the most ""popular"" entries are at the top.
Please keep the original sorting, and retain only ""duplicates"" change.
Alternatively, a list could be sorted and a binary search can be employed instead of simple loop.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1393,2021-10-31T17:03:41Z,2021-11-01T20:31:52Z,2021-11-01T20:51:00Z,CLOSED,False,0,1,1,https://github.com/jcorporation,Sort mime types and remove duplicates,1,[],https://github.com/cesanta/mongoose/pull/1393,https://github.com/jcorporation,3,https://github.com/cesanta/mongoose/pull/1393#issuecomment-956285008,As the title says. CLA is already signed by me.,"Ok, the commit now removes only a duplicate entry.
In my opinion the list is relatively arbitrary. My preferred list would be:

css
js
webp
png
jpg
jpeg
svg
html
htm
shtml
ico
woff
woff2
pdf

This is a list of the most frequently used files extensions.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1393,2021-10-31T17:03:41Z,2021-11-01T20:31:52Z,2021-11-01T20:51:00Z,CLOSED,False,0,1,1,https://github.com/jcorporation,Sort mime types and remove duplicates,1,[],https://github.com/cesanta/mongoose/pull/1393,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1393#issuecomment-956379913,As the title says. CLA is already signed by me.,Using a shorter list sounds good.. How did you compile that short list?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1393,2021-10-31T17:03:41Z,2021-11-01T20:31:52Z,2021-11-01T20:51:00Z,CLOSED,False,0,1,1,https://github.com/jcorporation,Sort mime types and remove duplicates,1,[],https://github.com/cesanta/mongoose/pull/1393,https://github.com/jcorporation,5,https://github.com/cesanta/mongoose/pull/1393#issuecomment-956440033,As the title says. CLA is already signed by me.,"In my experience this are the most used file types for serving a webpage. But looking at my webserver statistics I would move css and js after html. CSS and JS files are often combined to reduce the number of assets to serve. Eventually we can also remove woff, woff2 is widely established.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/jcorporation,1,https://github.com/cesanta/mongoose/pull/1395,Display the url decoded path in title,Display the url decoded path in title,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956227583,Display the url decoded path in title,"Codecov Report

Merging #1395 (f1ae3f5) into master (bf88167) will decrease coverage by 0.01%.
The diff coverage is 83.33%.


❗ Current head f1ae3f5 differs from pull request most recent head 4c520d4. Consider uploading reports for the commit 4c520d4 to get more accurate results


@@            Coverage Diff             @@
##           master    #1395      +/-   ##
==========================================
- Coverage   91.36%   91.35%   -0.02%     
==========================================
  Files          21       21              
  Lines        3140     3145       +5     
==========================================
+ Hits         2869     2873       +4     
- Misses        271      272       +1     



Impacted Files
Coverage Δ





src/http.c
84.69% <83.33%> (-0.05%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update bf88167...4c520d4. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/jcorporation,3,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956289492,Display the url decoded path in title,"Sorry, but I can not find any error...",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956569012,Display the url decoded path in title,"$ make vc98
Fails, cause your change is not ISO C89 compliant.
Regardless, what is the issue with the current code?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/jcorporation,5,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956580023,Display the url decoded path in title,The uri displayed in the title of the dir listing is not url decoded,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956756259,Display the url decoded path in title,"Well.. So what?
I don't see an issue with that. Please elaborate.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/jcorporation,7,https://github.com/cesanta/mongoose/pull/1395#issuecomment-956765153,Display the url decoded path in title,It is a cosmetic issue. The user sees the url encoded uri and not the better readable decoded uri in the page title and in the h1 tag.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/1395#issuecomment-957247454,Display the url decoded path in title,"I understand that.
Could you provide a real life example, e.g. a simple directory tree that demonstrates an issue, please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1395,2021-11-01T10:57:44Z,2021-11-02T22:45:36Z,2022-05-19T11:08:58Z,CLOSED,False,10,2,1,https://github.com/jcorporation,Display decoded uri in list_dir,1,[],https://github.com/cesanta/mongoose/pull/1395,https://github.com/jcorporation,9,https://github.com/cesanta/mongoose/pull/1395#issuecomment-957334219,Display the url decoded path in title,"Sure:
Path is: /Alben/Marilyn_Manson/Holy_Wood_(In_The_Shadow_Of_The_Valley_Of_Death)/

In the directory listing of /Alben/Marilyn_Manson/ the subdirectory name is displayed correctly as Holy_Wood_(In_The_Shadow_Of_The_Valley_Of_Death)/
Changing in this directory displays in the header: Index of /Alben/Marilyn_Manson/Holy_Wood_%28In_The_Shadow_Of_The_Valley_Of_Death%29/",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1402,2021-11-14T08:45:45Z,2021-11-14T16:51:10Z,2021-11-14T16:51:11Z,CLOSED,False,0,1,1,https://github.com/aphage,fix: doublue free,1,[],https://github.com/cesanta/mongoose/pull/1402,https://github.com/aphage,1,https://github.com/cesanta/mongoose/pull/1402,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1402,2021-11-14T08:45:45Z,2021-11-14T16:51:10Z,2021-11-14T16:51:11Z,CLOSED,False,0,1,1,https://github.com/aphage,fix: doublue free,1,[],https://github.com/cesanta/mongoose/pull/1402,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1402#issuecomment-968273694,,Thank you. Please sign the CLA https://cesanta.com/cla.html to have it integrated.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1402,2021-11-14T08:45:45Z,2021-11-14T16:51:10Z,2021-11-14T16:51:11Z,CLOSED,False,0,1,1,https://github.com/aphage,fix: doublue free,1,[],https://github.com/cesanta/mongoose/pull/1402,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1402#issuecomment-968326373,,"Pushed 2c50069 , thanks",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1417,2021-11-30T22:50:45Z,2021-12-13T11:35:31Z,2021-12-13T11:35:31Z,MERGED,True,26,0,1,https://github.com/DavidKorczynski,Add CIFuzz integration,1,[],https://github.com/cesanta/mongoose/pull/1417,https://github.com/DavidKorczynski,1,https://github.com/cesanta/mongoose/pull/1417,"Add CIFuzz workflow action to have fuzzers build and run on each PR.
This is a service offered by OSS-Fuzz, on which mongoose already runs.","Add CIFuzz workflow action to have fuzzers build and run on each PR.
This is a service offered by OSS-Fuzz, on which mongoose already runs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1423,2021-12-06T15:35:10Z,2021-12-07T12:43:27Z,2021-12-07T15:27:59Z,CLOSED,False,64,0,5,https://github.com/ptsolakos,Expose tls config,3,[],https://github.com/cesanta/mongoose/pull/1423,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1423,"Currently there is  no way for the user application to use a custom security configuration.
Only the standard configuration  hard-coded in mg_tls_init can be used.
This pull request adds a new mg_tls API function allowing the user to set a callback, with which he can modify the tls security configuration at will.","Currently there is  no way for the user application to use a custom security configuration.
Only the standard configuration  hard-coded in mg_tls_init can be used.
This pull request adds a new mg_tls API function allowing the user to set a callback, with which he can modify the tls security configuration at will.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1423,2021-12-06T15:35:10Z,2021-12-07T12:43:27Z,2021-12-07T15:27:59Z,CLOSED,False,64,0,5,https://github.com/ptsolakos,Expose tls config,3,[],https://github.com/cesanta/mongoose/pull/1423,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1423#issuecomment-986898635,"Currently there is  no way for the user application to use a custom security configuration.
Only the standard configuration  hard-coded in mg_tls_init can be used.
This pull request adds a new mg_tls API function allowing the user to set a callback, with which he can modify the tls security configuration at will.","Codecov Report

Merging #1423 (8c4e757) into master (0b209ea) will decrease coverage by 0.05%.
The diff coverage is 66.66%.


@@            Coverage Diff             @@
##           master    #1423      +/-   ##
==========================================
- Coverage   91.36%   91.30%   -0.06%     
==========================================
  Files          21       21              
  Lines        3160     3163       +3     
==========================================
+ Hits         2887     2888       +1     
- Misses        273      275       +2     



Impacted Files
Coverage Δ





src/tls.c
69.56% <66.66%> (-0.98%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0b209ea...8c4e757. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1423,2021-12-06T15:35:10Z,2021-12-07T12:43:27Z,2021-12-07T15:27:59Z,CLOSED,False,64,0,5,https://github.com/ptsolakos,Expose tls config,3,[],https://github.com/cesanta/mongoose/pull/1423,https://github.com/ptsolakos,3,https://github.com/cesanta/mongoose/pull/1423#issuecomment-987891418,"Currently there is  no way for the user application to use a custom security configuration.
Only the standard configuration  hard-coded in mg_tls_init can be used.
This pull request adds a new mg_tls API function allowing the user to set a callback, with which he can modify the tls security configuration at will.",Closing this MR: Config callback should be part of struct mg_tls and not be declared static.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1425,2021-12-07T16:46:35Z,2021-12-08T14:15:41Z,2021-12-08T15:23:22Z,CLOSED,False,22,0,5,https://github.com/ptsolakos,Add tls configuration callback,1,[],https://github.com/cesanta/mongoose/pull/1425,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1425,"Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init can be used.
This pull request allows the user to define a callback, with which he can modify the tls security configuration at will.","Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init can be used.
This pull request allows the user to define a callback, with which he can modify the tls security configuration at will.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1425,2021-12-07T16:46:35Z,2021-12-08T14:15:41Z,2021-12-08T15:23:22Z,CLOSED,False,22,0,5,https://github.com/ptsolakos,Add tls configuration callback,1,[],https://github.com/cesanta/mongoose/pull/1425,https://github.com/ptsolakos,2,https://github.com/cesanta/mongoose/pull/1425#issuecomment-988851675,"Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init can be used.
This pull request allows the user to define a callback, with which he can modify the tls security configuration at will.","The proposed change will create issues with client code not properly initializing struct mg_tls_opts.
struct mg_tls_opts tls_opts;
instead of
struct mg_tls_opts tls_opts = {0};
I will make an other proposal adding a new api function which will have the callback as parameter:
void mg_tls_init_modify_conf(struct mg_connection *c, struct mg_tls_opts *opts, void fn(void *))",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/ptsolakos,1,https://github.com/cesanta/mongoose/pull/1426,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1426#issuecomment-988997925,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Codecov Report

Merging #1426 (f43a5a0) into master (24e8c4d) will decrease coverage by 0.10%.
The diff coverage is 70.16%.


❗ Current head f43a5a0 differs from pull request most recent head dcf9fa4. Consider uploading reports for the commit dcf9fa4 to get more accurate results


@@            Coverage Diff             @@
##           master    #1426      +/-   ##
==========================================
- Coverage   91.40%   91.30%   -0.11%     
==========================================
  Files          21       21              
  Lines        3154     3163       +9     
==========================================
+ Hits         2883     2888       +5     
- Misses        271      275       +4     



Impacted Files
Coverage Δ





src/sock.c
86.76% <ø> (-0.05%)
⬇️


src/net.c
92.30% <60.00%> (-1.88%)
⬇️


src/tls_mbed.c
69.56% <69.56%> (ø)



src/http.c
84.80% <100.00%> (ø)



test/unit_test.c
99.72% <100.00%> (+<0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5ca9062...dcf9fa4. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1426#issuecomment-993519209,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Just pushed an alternative approach, see f43a5a0 and 3f5fd89
Please feedback - would it work for you?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/ptsolakos,4,https://github.com/cesanta/mongoose/pull/1426#issuecomment-993607770,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Thank you for following up on this topic.
In the beginning I was thinking as well to expand struct mg_tls_opts with a function callback (see #1425). Then I abandoned the idea because I thought  it may cause backward compatibility issues with client code initializing the struct without a member initialization list. Do you think this is an issue?
Question to your approach:
I would expect that the custom callback is called after default configuration before this line:

  
    
      mongoose/src/tls_mbed.c
    
    
         Line 154
      in
      3f5fd89
    
  
  
    

        
          
           if ((rc = mbedtls_ssl_setup(&tls->ssl, &tls->conf)) != 0) { 
        
    
  


Can you post a short snippet of a custom callback function you have in mind?
Is the custom function responsible for the complete initialization or just modification of the default configuration?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1426#issuecomment-993671309,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","By default, the init function supposed to be NULL and thus not called - therefore, there should not be any issue with the backward compatibility.
W.r.t. example.. Could you first show an expected usage of your interface please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/ptsolakos,6,https://github.com/cesanta/mongoose/pull/1426#issuecomment-993704571,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","With the approach proposed in the beginning, I just modify only the default configuration only on the setting that I am interested in and leave the rest untouched. The callback function assumes that the initialization and default configuration is done by mg_tls_init() and the callback is called after initialization and default setting but before the handshake.
For example let's say I want to use the default mbettls configuration and change the minimum accepted RSA key length to 4096 at runtime depending on some condition (default is 2048 when mbedtls is shipped).
I would define a  callback like this:
const mbedtls_x509_crt_profile custom_profile = {
    MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 ) |
    MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ) |
    MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA512 ),/* MDs for signatures */
    0xFFFFFFF, /* Any PK alg    */
    0xFFFFFFF, /* Any curve     */
    4096,/* Minimum size for RSA keys  */
};

static void custom_cb(void* config) {
    mbedtls_ssl_config *conf = (mbedtls_ssl_config *)config;
    conf->cert_profile = &custom_profile;
}
and then the application would call the  dedicated interface function like this:
mg_tls_init_custom_conf(conn, tls_opts, custom_cb);
Is this confusing from your point of view?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/cpq,7,https://github.com/cesanta/mongoose/pull/1426#issuecomment-993958678,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Yeah it is very confusing.
Especially TLS initialisation may need more than some post-init tweaks.
The custom_init() approach is also quite limiting.
Maybe the right way is just to use -DMG_ENABLE_CUSTOM_TLS=1",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/1426#issuecomment-994685808,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Actually, the recent change exposed TLS structures to the application.
Meaning, c->tls  pointer, which is void *, can be cast to the actual TLS data, e.g. https://github.com/cesanta/mongoose/blob/master/src/tls_mbed.h#L21
That means that after mg_tls_init() call an application can to any necessary post-configuration using TLS library API, .e.g.
    struct mg_tls_opts opts = {
        .cert = ""server.pem"",
        .certkey = ""server.pem"",
    };
    mg_tls_init(c, &opts);
    if (c->tls != NULL) {
#if MG_ENABLE_MBEDTLS
      struct mg_tls *tls = c->tls;
      tls->conf.cert_profile = &custom_profile;
#endif
    }
In my opinion, that renders the custom_init() approach, as well as an approach suggested by you, not necessary. Since the TLS data structures are exposed, there is no need for the extra API.
Could you confirm that you could do the necessary configuration with the latest codebase, please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/ptsolakos,9,https://github.com/cesanta/mongoose/pull/1426#issuecomment-995589295,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","I understand that the interface proposed in this pull request is not so straightforward. It assumes knowledge to the mg_init() internals. It is not easy to provide a clean interface with the ability to have full customization.
Maybe as you mentioned, the right way is to use -DMG_ENABLE_CUSTOM_TLS=1. This was not available so far.
Regarding your last proposal to modify the exposed TLS data structure after mg_tls_init(), it is not bringing the expected result.
The problem is, that in order for the changes to have an effect, the mbedtls_ssl_setup() has to be called only once and before initiating the handshake. This is done at the end of mg_tls_init(), so it can not be done again by the application. Please see the documentation of the function here.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/cpq,10,https://github.com/cesanta/mongoose/pull/1426#issuecomment-995610865,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","Thank you @ptsolakos. I don't see a reason why your code can modify the conf once, and an application cannot.
Anyhow, I read that the solution is to use DMG_ENABLE_CUSTOM_TLS - thus I consider this issue closed.
Thanks again for reporting.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1426,2021-12-08T16:54:43Z,2021-12-16T09:52:03Z,2021-12-16T10:48:46Z,CLOSED,False,93,4,5,https://github.com/ptsolakos,Add mg_tls_init_modify_conf(),1,[],https://github.com/cesanta/mongoose/pull/1426,https://github.com/ptsolakos,11,https://github.com/cesanta/mongoose/pull/1426#issuecomment-995659300,"Adds possibility to modify the default configuration of the TLS library.
Currently there is no way for the user application to use a custom security configuration.
Only the standard configuration hard-coded in mg_tls_init() can be used.
This pull request adds a TLS API function similar to mg_tls_init()  with an extra callback as parameter. With this callback the user application can modify the TLS security configuration at will.","@cpq thank you as well.
Just for your clarification:
My change was modifying the configuration inside mg_tls_init() before calling mbedtls_ssl_setup(). Only this way the modification has an effect in the TLS handshake. With the current API, even if the application modifies the configuration afterwards and calls mbedtls_ssl_setup() this will have no effect. This is a limitation of Mbed TLS as mentioned in the documentation of the function below. I have not tested it with OpenSSL.
/**
 * \brief          Set up an SSL context for use
 *
 * \note           No copy of the configuration context is made, it can be
 *                 shared by many mbedtls_ssl_context structures.
 *
 * \warning        The conf structure will be accessed during the session.
 *                 It must not be modified or freed as long as the session
 *                 is active.
 *
 * \warning        This function must be called exactly once per context.
 *                 Calling mbedtls_ssl_setup again is not supported, even
 *                 if no session is active.
 *
 * \param ssl      SSL context
 * \param conf     SSL configuration to use
 *
 * \return         0 if successful, or MBEDTLS_ERR_SSL_ALLOC_FAILED if
 *                 memory allocation failed
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf );",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1431,2021-12-21T00:34:57Z,2021-12-21T08:47:22Z,2021-12-21T08:47:22Z,MERGED,True,1,1,1,https://github.com/ryuukk,Closed WS connection is not an error for the logger,1,[],https://github.com/cesanta/mongoose/pull/1431,https://github.com/ryuukk,1,https://github.com/cesanta/mongoose/pull/1431,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1433,2021-12-21T20:28:59Z,2021-12-21T21:56:41Z,2021-12-21T21:56:41Z,MERGED,True,0,1,1,https://github.com/ryuukk,Remove debugging left over,1,[],https://github.com/cesanta/mongoose/pull/1433,https://github.com/ryuukk,1,https://github.com/cesanta/mongoose/pull/1433,"I'm pretty sure this was a left over from a debug session, i kept getting spammed in the log about hexdumps","I'm pretty sure this was a left over from a debug session, i kept getting spammed in the log about hexdumps",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1433,2021-12-21T20:28:59Z,2021-12-21T21:56:41Z,2021-12-21T21:56:41Z,MERGED,True,0,1,1,https://github.com/ryuukk,Remove debugging left over,1,[],https://github.com/cesanta/mongoose/pull/1433,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1433#issuecomment-999074115,"I'm pretty sure this was a left over from a debug session, i kept getting spammed in the log about hexdumps","Codecov Report

Merging #1433 (133629d) into master (fb0a9bc) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1433   +/-   ##
=======================================
  Coverage   91.54%   91.54%           
=======================================
  Files          21       21           
  Lines        3157     3157           
=======================================
  Hits         2890     2890           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fb0a9bc...133629d. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1434,2021-12-22T13:41:00Z,2021-12-23T11:00:26Z,2021-12-23T11:00:26Z,CLOSED,False,2,2,2,https://github.com/ithewei,fix mqtt connflag,1,[],https://github.com/cesanta/mongoose/pull/1434,https://github.com/ithewei,1,https://github.com/cesanta/mongoose/pull/1434,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1434,2021-12-22T13:41:00Z,2021-12-23T11:00:26Z,2021-12-23T11:00:26Z,CLOSED,False,2,2,2,https://github.com/ithewei,fix mqtt connflag,1,[],https://github.com/cesanta/mongoose/pull/1434,https://github.com/ithewei,2,https://github.com/cesanta/mongoose/pull/1434#issuecomment-999593834,,"mqtt connect flags:



0
1
2
3-4
5
6
7




reserved
clean_session
has_will
will_qos
will_retain
has_password
has_username",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1436,2021-12-23T17:18:50Z,2021-12-23T17:18:55Z,2022-04-26T15:58:58Z,MERGED,True,1,1,1,https://github.com/novlean,Update README.md,1,[],https://github.com/cesanta/mongoose/pull/1436,https://github.com/novlean,1,https://github.com/cesanta/mongoose/pull/1436,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1458,2022-01-27T04:12:42Z,2022-01-27T12:10:11Z,2022-01-27T12:10:11Z,CLOSED,False,1,1,1,https://github.com/236212005,fix compile error,2,[],https://github.com/cesanta/mongoose/pull/1458,https://github.com/236212005,1,https://github.com/cesanta/mongoose/pull/1458,"[ray@vr8 mqtt-server]$ make
cc ../../mongoose.c -I../.. -W -Wall -DMG_ENABLE_LINES=1  -o example main.c
main.c: In function ‘fn’:
main.c:81:33: error：The 2nd argument type of 'mg_mqtt_pub 'is incompatible
mg_mqtt_pub(sub->c, &mm->topic, &mm->data, 1, false);
^~~~~~~~~~
In file included from main.c:10:
../../mongoose.h:1105:57: Note: Type 'struct mg_str' is required, but the type of actual parameter is' struct mg_str *'
void mg_mqtt_pub(struct mg_connection *c, struct mg_str topic,
~~~~~~~~~~~~~~^~~~~
main.c:81:45: error：The 3rd argument type of' mg_mqtt_pub 'is incompatible
mg_mqtt_pub(sub->c, &mm->topic, &mm->data, 1, false);
^~~~~~~~~
In file included from main.c:10:
../../mongoose.h:1106:32: Note: Type 'struct mg_str' is required, but the type of actual parameter is' struct mg_str *'
struct mg_str data, int qos, bool retain);
~~~~~~~~~~~~~~^~~~
make: *** [Makefile:7：example] error 1
[ray@vr8 mqtt-server]$ gcc --version
gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)
Copyright © 2018 Free Software Foundation, Inc.","[ray@vr8 mqtt-server]$ make
cc ../../mongoose.c -I../.. -W -Wall -DMG_ENABLE_LINES=1  -o example main.c
main.c: In function ‘fn’:
main.c:81:33: error：The 2nd argument type of 'mg_mqtt_pub 'is incompatible
mg_mqtt_pub(sub->c, &mm->topic, &mm->data, 1, false);
^~~~~~~~~~
In file included from main.c:10:
../../mongoose.h:1105:57: Note: Type 'struct mg_str' is required, but the type of actual parameter is' struct mg_str *'
void mg_mqtt_pub(struct mg_connection *c, struct mg_str topic,
~~~~~~~~~~~~~~^~~~~
main.c:81:45: error：The 3rd argument type of' mg_mqtt_pub 'is incompatible
mg_mqtt_pub(sub->c, &mm->topic, &mm->data, 1, false);
^~~~~~~~~
In file included from main.c:10:
../../mongoose.h:1106:32: Note: Type 'struct mg_str' is required, but the type of actual parameter is' struct mg_str *'
struct mg_str data, int qos, bool retain);
~~~~~~~~~~~~~~^~~~
make: *** [Makefile:7：example] error 1
[ray@vr8 mqtt-server]$ gcc --version
gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-4)
Copyright © 2018 Free Software Foundation, Inc.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1476,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1046215474,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Codecov Report

Merging #1476 (d8d3097) into master (45816ef) will increase coverage by 0.16%.
The diff coverage is 96.20%.

@@            Coverage Diff             @@
##           master    #1476      +/-   ##
==========================================
+ Coverage   95.77%   95.93%   +0.16%     
==========================================
  Files          22       22              
  Lines        4281     4352      +71     
==========================================
+ Hits         4100     4175      +75     
+ Misses        181      177       -4     



Impacted Files
Coverage Δ





src/sock.c
91.43% <66.66%> (+0.85%)
⬆️


test/unit_test.c
99.52% <97.36%> (-0.12%)
⬇️


src/base64.c
97.27% <0.00%> (+0.11%)
⬆️


src/iobuf.c
100.00% <0.00%> (+7.50%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 45816ef...d8d3097. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1048096668,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Thanks @jameshilliard
This change, however, defeats the purpose of MG_MAX_RECV_BUF_SIZE
What's the point of having the limit if it is ignored?
The point of this compile-time limit is to prevent a situation when an external client can DoS the server by pushing an infinite data, and let the user to set an automatic guard against the overflow.
If your code is aware about the potential overflow, and manages the incoming data with care, just set the MG_MAX_RECV_BUF_SIZE to some very high value. What's the point in disabling the guard?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1048240746,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","This change, however, defeats the purpose of MG_MAX_RECV_BUF_SIZE
What's the point of having the limit if it is ignored?

This shouldn't allow the buffer itself to grow any larger than before. It just changes the behavior upon reaching the limit to halt reading more data into the buffer instead of hard erroring.

The point of this compile-time limit is to prevent a situation when an external client can DoS the server by pushing an infinite data, and let the user to set an automatic guard against the overflow.

I'm not seeing how this change causes an issue there, the max recv buffer size is still respected, just the behavior upon reaching it is different. A buffer size limit is fundamentally different from a max upload size limit.

If your code is aware about the potential overflow, and manages the incoming data with care, just set the MG_MAX_RECV_BUF_SIZE to some very high value. What's the point of disabling the guard?

But we don't actually want the buffer to grow beyond a particular size(MG_MAX_RECV_BUF_SIZE is deliberately far below our max upload size), we want the MG_MAX_RECV_BUF_SIZE to be respected so that large uploads don't use too much memory. But upon reaching MG_MAX_RECV_BUF_SIZE(which happens if we can't empty the buffer faster than it is being filled) we want to slow down the upload by halting the socket reading until we are able to sufficiently drain it.
Essentially we are forwarding/streaming the data in the buffer to another socket(internal unix socket), however that socket consumer is in some cases significantly slower than the mongoose tcp recv socket, and we can't buffer too much data in memory either(memory limited embedded systems) so we need a way to slow down the reads from the socket(and thus slow down the upload client via TCP back-pressure) to keep the upload from using up all our memory.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1048800317,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I see the point, thank you.
I believe the semantics of this behavior is different from what is anticipated from the existing MG_MAX_RECV_BUF_SIZE. Basically, you're saying  that the MG_MAX_RECV_BUF_SIZE should be a rate limit window, akin to TCP window size.
That makes sense. However, such change requires a little bit more. Your code simply stops reading , but makes select wake up on every loop, which turns event loop into a busy loop. I believe, the rate-limited socket must also be excluded from the select() poll in iotest(), if the limit is reached.
Also, consider a situation with HTTP upload. Say, you set a limit of 2k. But a client sends a request with lots of headers, where request length itself exceeds 2k (for example, there is a long URL with many query parameters).
What you'll get is a connection silently stalled waiting for the full request to buffer, and that'll never happen.
What is the rate limit size you plan to apply in practice? What is your environment - MCU, approximate free RAM, connectivity type, RTOS, TLS lib?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,6,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1049457506,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Basically, you're saying that the MG_MAX_RECV_BUF_SIZE should be a rate limit window, akin to TCP window size.

I mean the name MG_MAX_RECV_BUF_SIZE implies that the value is simply the max size c->recv is allowed to reach. I guess it's conceptually similar to TCP window sizing except it's capping the application buffer size.

However, such change requires a little bit more.

Hmm, I do see an issue with the poll loop trying to do zero length reads when the buffer reaches max size which should now be fixed.

Your code simply stops reading , but makes select wake up on every loop, which turns event loop into a busy loop. I believe, the rate-limited socket must also be excluded from the select() poll in iotest(), if the limit is reached.

Well the loop calls mg_call(c, MG_EV_POLL, &now); here:

  
    
      mongoose/src/sock.c
    
    
         Line 546
      in
      42ba1e4
    
  
  
    

        
          
           mg_call(c, MG_EV_POLL, &now); 
        
    
  


The idea is the MG_EV_POLL event in turn would then be used to consume the buffer using mg_iobuf_del and re-allow reads to occur.

Also, consider a situation with HTTP upload. Say, you set a limit of 2k. But a client sends a request with lots of headers, where request length itself exceeds 2k (for example, there is a long URL with many query parameters).
What you'll get is a connection silently stalled waiting for the full request to buffer, and that'll never happen.

I think you could drain the buffer with mg_iobuf_del in this case in the MG_EV_POLL events right?

What is the rate limit size you plan to apply in practice? What is your environment - MCU, approximate free RAM, connectivity type, RTOS, TLS lib?

Probably the default size limit is fine, we don't need an unusually small buffer, the issue is that we need to be able to handle unusually large uploads(potentially multiple gigabytes that far exceed available system RAM) without increasing the buffer size, target systems are embedded Linux based systems such as raspberry pi's or x86_64 industrial embedded linux systems. Available RAM is likely in most cases to be relatively large, for the systems I work with it typically ranges from 256mb to multiple gigabytes.
In our use case the streamed request from mongoose is essentially forwarded to a unix socket service thread which then parses and extracts an update package(which is basically a cpio archive containing a manifest and potentially various images/archives/binaries) on the fly while being streamed.
In cases where the update package/images are significantly larger than available system ram the update package images can be directly written to non-volatile storage without requiring the full image to be received over the network(it also can cache the image in RAM however this still requires that the mongoose buffer be limited to avoid doubling the RAM requirements as we still have to unpack the update package on the fly into RAM in that case).
The unix socket thread receiving/extracting and writing the update package archive may be effectively limited by multiple factors such as decompression overhead in the case of compressed archives/images and in the case of direct streamed flash writes the limit may effectively be the max IO speed of the non-volatile storage the update package is being written to.
Since connectivity may be wifi or even full gigabit the max upload speeds to mongoose may easily far exceed the speeds the extractor can process the upload.
Usually TLS is not used here as the update archives have their own code signing mechanisms.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,7,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1049582929,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.",Added a test to reproduce error(if run without changes to sock.c) and validate buffer behavior when MG_MAX_RECV_BUF_SIZE is reached.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,8,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1050392370,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.",FYI the test failure being hit here appears to be present in master and unrelated to this set of changes.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,9,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1074051558,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","@jameshilliard thank you.
I am still unsure about feasibility of this change.
I understand that your intention is to use MG_MAX_RECV_BUF_SIZE as a traffic shaping constant, which stalls receiving until the receiving side drains c->recv buffer.
However, practically, that should not happen. In case of HTTP upload, the event handler should handle MG_EVHTTP_CHUNK and drain the buffer as new data arrives - see examples/file-upload.
I don't see any other practical examples when traffic shaping would be required.
Can you elaborate please?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,10,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1074230311,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","However, practically, that should not happen. In case of HTTP upload, the event handler should handle MG_EV_HTTP_CHUNK and drain the buffer as new data arrives - see examples/file-upload.

Well what I'm doing is similar to what I'm simulating with the test I wrote here to reproduce the issue, I'm consuming from the buffer and then calling mg_iobuf_del to partially consume from the buffer by catching MG_EV_READ and MG_EV_POLL events since it's difficult to use the MG_EV_HTTP_CHUNK events instead as they expect a corresponding mg_http_delete_chunk call which fully removes each chunk from the input buffer(which is not what I want to do), which makes it effectively impossible to partially consume the chunk by operating on MG_EV_HTTP_CHUNK events.
Note that if my consumer is unable to accept data from the recv buffer I still want to fill the recv buffer up to the MG_MAX_RECV_BUF_SIZE size for performance reasons rather than blocking the thread entirely within the MG_EV_HTTP_CHUNK event handler.
The issue with MG_EV_HTTP_CHUNK events is that they don't give sufficient granular control in regards to rate limiting the recv buffer as you effectively have to fully consume each chunk whenever there is a MG_EV_HTTP_CHUNK event, which may not be possible when the consumer is rate limited. I think in order to use MG_EV_HTTP_CHUNK events I would need a way to both defer chunk events entirely(until the next poll cycle so that my consumer can attempt to consume again) as well as a way to partially consume/delete a chunk(the amount deleted would be determined by the amount of data the consumer is capable of accepting).",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,11,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1074862771,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","@jameshilliard thanks.
Your change fails unit test if MG_MAX_RECV_BUF_SIZE set to some sane value, e.g. 4096.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,12,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1075097402,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Your change fails unit test if MG_MAX_RECV_BUF_SIZE set to some sane value, e.g. 4096.

Hmm, not sure that's a regression, unit tests seem to fail for me without this change when MG_MAX_RECV_BUF_SIZE is 4096. Does MG_MAX_RECV_BUF_SIZE set to 4096 pass for you on master?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,13,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1075107746,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I think this is an improvement for handling smaller MG_MAX_RECV_BUF_SIZE sizes, I tested setting MG_MAX_RECV_BUF_SIZE to 32768, which fails on master but works with these changes.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,14,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1092422467,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Your change fails unit test if MG_MAX_RECV_BUF_SIZE set to some sane value, e.g. 4096.

Should be fixed now.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,15,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1120280580,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Your change fails unit test if MG_MAX_RECV_BUF_SIZE set to some sane value, e.g. 4096.

The test in #1543 reproduces the MG_MAX_RECV_BUF_SIZE=4096 failure I saw in master, I added the same test to this pull request as well to validate that this fixes the test failure.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,16,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1144822963,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","So depending on the MG_ENABLE_RECV_RETRY, the behavior and meaning of the MG_MAX_RECV_BUF_SIZE is different.
I suggest to use a different constant for shaping:

MG_MAX_RECV_BUF_SIZE - will continue to have its existing semantics and logic
MG_STREAM_RECV_SIZE - a new constant used specifically for traffic shaping, with the semantics you're asking for

Does that make sense?
Also I think it makes sense to rename MG_MAX_RECV_BUF_SIZE to MG_MAX_RECV_SIZE",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,17,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1144835502,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Let's introduce MG_STREAM_RECV_SIZE, set it by default to MG_MAX_RECV_SIZE.
Also, if we stop receiving when MG_MAX_RECV_SIZE is reached, the mg_mgr_poll() might fall into a busy loop, because we're still select-ing/poll-ing on that connection, although not reading..
Can you please make that change? Your PR will be integrated then.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,18,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1144879740,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","So depending on the MG_ENABLE_RECV_RETRY, the behavior and meaning of the MG_MAX_RECV_BUF_SIZE is different.

Well it's really more just changing the behavior upon reaching the max buf size, the buf size limit is respected in both cases.

I suggest to use a different constant for shaping:
* MG_MAX_RECV_BUF_SIZE - will continue to have its existing semantics and logic

* MG_STREAM_RECV_SIZE - a new constant used specifically for traffic shaping, with the semantics you're asking for

Does that make sense?

It's somewhat unclear how the precedence would work here. Does MG_STREAM_RECV_SIZE take precedence over MG_MAX_RECV_SIZE if set?

Let's introduce MG_STREAM_RECV_SIZE, set it by default to MG_MAX_RECV_SIZE.

If MG_STREAM_RECV_SIZE has a default of MG_MAX_RECV_SIZE that would mean the new behavior is the default? I'm a little confused here.

Also, if we stop receiving when MG_MAX_RECV_SIZE is reached, the mg_mgr_poll() might fall into a busy loop, because we're still select-ing/poll-ing on that connection, although not reading..

Well the use case is for situations where there's buffer consumer attached to the poll events, we also use a timer to kill stalled uploads so that we don't get stuck in a busy loop forever.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,19,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145418069,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","MG_MAX_RECV_SIZE is supposed to be some high value, like 5mb. That is always the highest priority. If a recv buffer gets this big and user handler not yet acted upon it, a connection gets forcefully closed.
By the way, MG_MAX_RECV_SIZE was introduced in the first place to avoid making timers that kill stalled connections.
MG_STREAM_RECV_SIZE  by default is set to MG_MAX_RECV_SIZE. Application that want to cap the recv traffic,  set MG_STREAM_RECV_SIZE to a much lower value, e.g. 4kb, and activate the ""streaming"" logic. In this scenario, recv buffer  never grows beyond MG_STREAM_RECV_SIZE and obviously never reaches MG_MAX_RECV_SIZE.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,20,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145545978,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","MG_MAX_RECV_SIZE is supposed to be some high value, like 5mb. That is always the highest priority. If a recv buffer gets this big and user handler not yet acted upon it, a connection gets forcefully closed.

This seems a bit confusing, I think I have a better solution here that gives runtime behavior control to application logic when needed.
I reworked things so that a MG_EV_BUFFER_FULL event is emitted upon the buffer reaching MG_MAX_RECV_SIZE which allows the event handler to inhibit the error while still retaining default behavior, this is useful for cases where it may be desirable to dynamically disable the max_recv_buf_size reached error depending upon user fn_data state.
This is handy since it allow us to have application checks within a MG_EV_BUFFER_FULL handler to confirm that we are still waiting on our buffer consumer and that we're fine to continue looping.

By the way, MG_MAX_RECV_SIZE was introduced in the first place to avoid making timers that kill stalled connections.

Oh, I thought it was to prevent memory from usage from getting too high. It doesn't really look like it will reliably kill stalled connections in all cases to me, only stalled connections that keep pushing data filling up the buffer from what I can tell.

MG_STREAM_RECV_SIZE by default is set to MG_MAX_RECV_SIZE. Application that want to cap the recv traffic, set MG_STREAM_RECV_SIZE to a much lower value, e.g. 4kb, and activate the ""streaming"" logic. In this scenario, recv buffer never grows beyond MG_STREAM_RECV_SIZE and obviously never reaches MG_MAX_RECV_SIZE.

Well the thing we need is the ability to put back-pressure on the sender once the buffer hits the size limit as we proxy to a unix socket that may be quite slow at receiving traffic(may be streaming a very large update image to very slow flash memory that far exceeds ram size for example).
The lower e.g. 4kb size in the tests is just to ensure the chunking handler code works correctly with a MG_MAX_RECV_SIZE smaller than the size of the data being received.
In practice the default MG_MAX_RECV_SIZE doesn't appear to need to be different for streaming cases, it's the behavior once reaching MG_MAX_RECV_SIZE that needs to be controllable.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,21,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145618500,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Why a new event, MG_EV_BUFFER_FULL ?
An app can catch MG_EV_READ and compare c->recv.len with whatever threshold it wants.
If an app wants to stall reads, we could introduce a user-settable flag, e.g. c->is_full, in which case sock.c won't read more data.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,22,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145631348,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","So an event handler is something like:
  if (ev == MV_EV_READ) {
     if (c->recv.len > MAX) c->is_full = true;
  }
  ...
  if (c->recv.len < MAX) c->is_full = false;
Try it out:
diff --git a/src/net.h b/src/net.h
index 044c7350..f6c17083 100644
--- a/src/net.h
+++ b/src/net.h
@@ -63,6 +63,7 @@ struct mg_connection {
   unsigned is_hexdumping : 1;  // Hexdump in/out traffic
   unsigned is_draining : 1;    // Send remaining data, then close and free
   unsigned is_closing : 1;     // Close and free the connection immediately
+  unsigned is_full : 1;        // Stop reads, until cleared
   unsigned is_readable : 1;    // Connection is ready to read
   unsigned is_writable : 1;    // Connection is ready to write
 };
diff --git a/src/sock.c b/src/sock.c
index 26a37edb..4ea9e6e1 100644
--- a/src/sock.c
+++ b/src/sock.c
@@ -469,14 +469,27 @@ int mg_mkpipe(struct mg_mgr *mgr, mg_event_handler_t fn, void *fn_data,
   return (int) sp[0];
 }
 
+static bool can_read(const struct mg_connection *c) {
+  return c->is_full == false;
+}
+
+static bool can_write(const struct mg_connection *c) {
+  return c->is_connecting || (c->send.len > 0 && c->is_tls_hs == 0);
+}
+
+static bool skip_iotest(const struct mg_connection *c) {
+  return (c->is_closing || c->is_resolving || FD(c) == INVALID_SOCKET) ||
+         (can_read(c) == false && can_write(c) == false);
+}
+
 static void mg_iotest(struct mg_mgr *mgr, int ms) {
 #if MG_ARCH == MG_ARCH_FREERTOS_TCP
   struct mg_connection *c;
   for (c = mgr->conns; c != NULL; c = c->next) {
-    if (c->is_closing || c->is_resolving || FD(c) == INVALID_SOCKET) continue;
-    FreeRTOS_FD_SET(c->fd, mgr->ss, eSELECT_READ | eSELECT_EXCEPT);
-    if (c->is_connecting || (c->send.len > 0 && c->is_tls_hs == 0))
-      FreeRTOS_FD_SET(c->fd, mgr->ss, eSELECT_WRITE);
+    if (skip_iotest(c)) continue;
+    if (can_read(c))
+      FreeRTOS_FD_SET(c->fd, mgr->ss, eSELECT_READ | eSELECT_EXCEPT);
+    if (can_write(c)) FreeRTOS_FD_SET(c->fd, mgr->ss, eSELECT_WRITE);
   }
   FreeRTOS_select(mgr->ss, pdMS_TO_TICKS(ms));
   for (c = mgr->conns; c != NULL; c = c->next) {
@@ -494,14 +507,12 @@ static void mg_iotest(struct mg_mgr *mgr, int ms) {
   memset(fds, 0, sizeof(fds));
   n = 0;
   for (struct mg_connection *c = mgr->conns; c != NULL; c = c->next) {
-    if (c->is_closing || c->is_resolving || FD(c) == INVALID_SOCKET) {
+    if (skip_iotest(c)) {
       // Socket not valid, ignore
     } else {
       fds[n].fd = FD(c);
-      fds[n].events = POLLIN;
-      if (c->is_connecting || (c->send.len > 0 && c->is_tls_hs == 0)) {
-        fds[n].events |= POLLOUT;
-      }
+      if (can_read(c)) fds[n].events = POLLIN;
+      if (can_write(c)) fds[n].events |= POLLOUT;
       n++;
       if (mg_tls_pending(c) > 0) ms = 0;  // Don't wait if TLS is ready
     }
@@ -512,7 +523,7 @@ static void mg_iotest(struct mg_mgr *mgr, int ms) {
   } else {
     n = 0;
     for (struct mg_connection *c = mgr->conns; c != NULL; c = c->next) {
-      if (c->is_closing || c->is_resolving || FD(c) == INVALID_SOCKET) {
+      if (skip_iotest(c)) {
         // Socket not valid, ignore
       } else {
         c->is_readable = (unsigned) (fds[n].revents & POLLIN ? 1 : 0);
@@ -534,12 +545,11 @@ static void mg_iotest(struct mg_mgr *mgr, int ms) {
   FD_ZERO(&wset);
 
   for (c = mgr->conns; c != NULL; c = c->next) {
-    if (c->is_closing || c->is_resolving || FD(c) == INVALID_SOCKET) continue;
-    FD_SET(FD(c), &rset);
-    if (FD(c) > maxfd) maxfd = FD(c);
-    if (c->is_connecting || (c->send.len > 0 && c->is_tls_hs == 0))
-      FD_SET(FD(c), &wset);
+    if (skip_iotest(c)) continue;
+    if (can_read(c)) FD_SET(FD(c), &rset);
+    if (can_write(c)) FD_SET(FD(c), &wset);
     if (mg_tls_pending(c) > 0) tv = tv_zero;
+    if (FD(c) > maxfd) maxfd = FD(c);
   }
 
   if ((rc = select((int) maxfd + 1, &rset, &wset, NULL, &tv)) < 0) {",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,23,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145635669,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Why a new event, MG_EV_BUFFER_FULL ?

Seems to be the easiest way to control what happens when the buffer is full.
For example say the app is partially draining/processing the buffer on each poll loop, the app may want to catch this event and use it as an opportunity to check if whatever is draining/processing the buffer has stalled for whatever reason.

An app can catch MG_EV_READ and compare c->recv.len with whatever threshold it wants.

Not sure how that would help, MG_EV_READ is only called when data is read from the socket AFAIU and doesn't appear to allow controlling what happens when the buffer is full.

If an app wants to stall reads, we could introduce a user-settable flag, e.g. c->is_full, in which case sock.c won't read more data.

Well sock.c already has the c->recv.len >= MG_MAX_RECV_SIZE condition check which is equivalent of c->is_full condition, the important part is the ability to control what happens when the buffer is full.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,24,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145638915,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","BTW, we could stall writes the same way. Then user-settable flags are better called something like  c->is_stalled_reads and c->is_stalled_writes",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,25,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145642606,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Currently there is no such thing as ""buffer is full"". We read as far as we can malloc. And we malloc in MG_IO_SIZE chunks. That's all we have.
Catching MG_EV_READ is a reliable way to tap into that process
Please, don't try to change MG_MAX_RECV_SIZE semantics. It is clear: as soon we hit that limit, we close, full stop.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,26,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145679134,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","So an event handler is something like:
  if (ev == MV_EV_READ) {
     if (c->recv.len > MAX) c->is_full = true;
  }
  ...
  if (c->recv.len < MAX) c->is_full = false;

I think rather than making it a boolean it might make sense to have a c->max_recv instead of the static MG_MAX_RECV_SIZE check in read_conn(with c->max_recv defaulting to MG_MAX_RECV_SIZE) in addition to the MG_EV_BUFFER_FULL callback, that way the recv limit can be dynamically adjusted and the buffer full condition can be precisely controlled via the event handler(with current effective defaults preserved).

BTW, we could stall writes the same way. Then user-settable flags are better called something like c->is_stalled_reads and c->is_stalled_writes

I think writes we don't need anything special here since we can already see how many bytes are in the outgoing buffer and can just pause writing to the send buffer if we need to slow things down there.

Currently there is no such thing as ""buffer is full"". We read as far as we can malloc. And we malloc in MG_IO_SIZE chunks. That's all we have.

I mean, from looking at the code in read_conn it looks like the malloc/buffer size upper limit works out to be MG_MAX_RECV_SIZE + (MG_MAX_RECV_SIZE % MG_IO_SIZE) due to always incrementing in MG_IO_SIZE chunks, which makes MG_MAX_RECV_SIZE effectively a buffer full check under default configuration since the default (MG_MAX_RECV_SIZE % MG_IO_SIZE) == 0, unless I'm reading things wrong here.

Catching MG_EV_READ is a reliable way to tap into that process

I guess it could probably work, but the API semantics seem a little tricky to reason about for me as you're then dealing with two buffer limits and it's not obvious what happens if you're trying to make them the same.
Say I do something like this:
  if (ev == MV_EV_READ) {
     if (c->recv.len >= MG_MAX_RECV_SIZE ) c->is_full = true;
  }
  ...
  if (c->recv.len < MG_MAX_RECV_SIZE ) c->is_full = false;
This appears at first glance like it would always inhibit a max_recv_buf_size reached error, however if (MG_MAX_RECV_SIZE % MG_IO_SIZE) != 0 then it's not so clear what happens to me.

Please, don't try to change MG_MAX_RECV_SIZE semantics. It is clear: as soon we hit that limit, we close, full stop.

I'm mostly a bit concerned with the interaction between MG_MAX_RECV_SIZE and c->is_full as it seems like it could be prone to subtle bugs with that approach due to effectively trying to do the same check in two different places.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,27,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145684158,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Please just forget about MG_MAX_RECV_SIZE.
It is not not a ""buffer full"" constant. It is  a ""close immediately"" constant.
W.r.t. making a variable rather than a bool flag - well, it is exactly the same as MG_STREAM_RECV_SIZE suggestion. I agree, having MG_STREAM_RECV_SIZE is more precise in terms of controlling the size. The boolean flag gives more freedom to the app to decide when to stall.
This is the current logic for the buffer growth - MG_IO_SIZE is malloc granularity:
  } else if (c->recv.size - c->recv.len < MG_IO_SIZE &&
             !mg_iobuf_resize(&c->recv, c->recv.size + MG_IO_SIZE)) {
We can change it to something like this:
  } else if (c->recv.size <= c->recv.len  &&
             !mg_iobuf_resize(&c->recv, c->recv.size + MG_IO_SIZE)) {
This way we always fill up the existing MG_IO_SIZE chunk, and only when it is full, we allocate the next. With this logic, the
c->recv.len < SOME_VALUE check in the event handler will be fairly precise. It will guarantee that the c->recv.size is not larger than the nearest MG_IO_SIZE boundary.
An advantage of this approach is that it correctly deals with the mg_iotest and does not fall into a busy loop when user stalls reads. If it works for your case, I suggest to go ahead with that.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,28,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145730402,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Please just forget about MG_MAX_RECV_SIZE.
It is not not a ""buffer full"" constant. It is a ""close immediately"" constant.

So I think part of the issue is that we may actually need entirely different ""buffer full"" and ""close immediately"" behavior semantics that is dependent on the URI match.
Consider the following example:
static void ev_handler(struct mg_connection *nc, int ev, void *ev_data, void *fn_data)
{
	if (ev == MG_EV_HTTP_MSG) {
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
		if (!mg_http_is_authorized(hm, global_auth_domain, global_auth_file))
			mg_http_send_digest_auth_request(nc, global_auth_domain);
		else if (mg_http_get_header(hm, ""Sec-WebSocket-Key"") != NULL)
			websocket_handler(nc, ev_data);
		else if (mg_http_match_uri(hm, ""/restart""))
			restart_handler(nc, ev_data);
		else
			mg_http_serve_dir(nc, ev_data, &s_http_server_opts);
	} else if (nc->label[0] != 'M' && ev == MG_EV_HTTP_CHUNK) {
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
		if (!mg_http_is_authorized(hm, global_auth_domain, global_auth_file))
			mg_http_send_digest_auth_request(nc, global_auth_domain);
		else if (mg_http_match_uri(hm, ""/upload""))
			multipart_upload_handler(nc, ev, ev_data, upload_handler, NULL);
	} else if (nc->label[0] == 'M' && (ev == MG_EV_READ || ev == MG_EV_POLL || ev == MG_EV_CLOSE)) {
		multipart_upload_handler(nc, ev, ev_data, upload_handler, fn_data);
#if MG_ENABLE_SSL
	} else if (ev == MG_EV_ACCEPT && ssl) {
		mg_tls_init(nc, &tls_opts);
#endif
	} else if (ev == MG_EV_ERROR) {
		ERROR(""%p %s"", nc->fd, (char *) ev_data);
	} else if (ev == MG_EV_WS_MSG) {
		mg_iobuf_del(&nc->recv, 0, nc->recv.len);
	}
}

We want to ""close immediately"" upon hitting MG_MAX_RECV_SIZE for mg_http_match_uri(hm, ""/restart"") as it is a normal http event handler without chunking/streaming support.
Likewise for mg_http_serve_dir(nc, ev_data, &s_http_server_opts) we probably want to ""close immediately"" upon hitting MG_MAX_RECV_SIZE.
For the websocket_handler(nc, ev_data) we also probably want to ""close immediately"" if hitting MG_MAX_RECV_SIZE to prevent excess memory usage.
On the other hand we never want to hit a ""close immediately"" at all and instead want ""buffer until full and loop"" upon hitting a MG_MAX_RECV_SIZE equivalent for the multipart_upload_handler as it supports streaming uploads that may need to apply back-pressure.

Now in some cases we may want to vary the specific ""close immediately"" and ""buffer until and then loop"" limits based on the uri match handler requirements(not super important at the moment here but I could see it being helpful).
Using c->max_recv with a MG_EV_BUFFER_FULL callback seems to be the cleanest way to provide this flexibility cases as it lets us both decide what our c->recv max is and what happens when that max gets hit on a granular per uri/handler basis.
So for a handler like this we could theoretically want up to 4 different limits with 2 types of behavior(close immediately or continue looping) upon reaching the limits.

W.r.t. making a variable rather than a bool flag - well, it is exactly the same as MG_STREAM_RECV_SIZE suggestion. I agree, having MG_STREAM_RECV_SIZE is more precise in terms of controlling the size. The boolean flag gives more freedom to the app to decide when to stall.

I think the semantics are cleaner with a dynamic c->max_recv, at least for more complex multi-handler scenarios.

This way we always fill up the existing MG_IO_SIZE chunk, and only when it is full, we allocate the next. With this logic, the
c->recv.len < SOME_VALUE check in the event handler will be fairly precise. It will guarantee that the c->recv.size is not larger than the nearest MG_IO_SIZE boundary.

To me something like this in my PR seems clearer as it guarantees c->recv.size would not exceed MG_MAX_RECV_SIZE:
else if (c->recv.size - c->recv.len < MG_IO_SIZE &&
             c->recv.size + MG_IO_SIZE <= MG_MAX_RECV_SIZE &&
             !mg_iobuf_resize(&c->recv, c->recv.size + MG_IO_SIZE)) {

An advantage of this approach is that it correctly deals with the mg_iotest and does not fall into a busy loop when user stalls reads. If it works for your case, I suggest to go ahead with that.

The main worry with this approach is that it's not clear how one would fully inhibit(on a application logic conditional basis) hitting the max_recv_buf_size reached error condition while still allowing the buffer to reach a size of MG_MAX_RECV_SIZE.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,29,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145797746,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Sorry, but I strongly against the MG_EV_BUFFER_FULL message and using the MG_MAX_RECV_SIZE for anything other than it is used now. It is for putting a cap for RAM usage and killing accidentally stalled connections.
Normally, we should not talk about MG_MAX_RECV_SIZE at all. It is just a safety measure which must not bear any other meaning.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,30,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145799398,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Sorry, but I strongly against the MG_EV_BUFFER_FULL message and using the MG_MAX_RECV_SIZE for anything other than it is used now. It is for putting a cap for RAM usage and killing accidentally stalled connections.

How about two variables, one for each limit and the ability to disable either entirely by setting it to 0?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,31,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145800083,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I am OK with the c->is_full approach, because it is easy to understand and it is flexible.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,32,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145811802,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I am OK with the c->is_full approach, because it is easy to understand and it is flexible.

How about c->is_full mixed with a dynamic c->recv_max(same semantics and purpose as MG_MAX_RECV_SIZE but adjustable on the fly per connection)? At least by making c->recv_max dynamic I can then conditionally bump it to a high enough value to prevent it from conflicting with streaming mode when setting c->is_full .",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,33,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145817756,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I envision something like this:
static void ev_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
  if (ev == MG_EV_HTTP_MSG) {
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
    if (..... non streaming handlers) {
      ...
    } else if (mg_http_match_uri(hm, ""/upload"")) {
      nc->label[0] = 'M';  // Streaming URI !
      multipart_upload_handler(c, ev, ev_data, upload_handler, NULL);
    }
  } else if (nc->label[0] == 'M' && (ev == MG_EV_READ || ev == MG_EV_POLL || ev == MG_EV_CLOSE)) {
      multipart_upload_handler(c, ev, ev_data, upload_handler, fn_data); // Drain streaming connection
      c->is_full = c->recv.len >= 2 * MG_IO_SIZE;  // Cap streaming buf size
  }
}",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,34,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145823961,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","I envision something like this:

Yeah, I think that with #1575 to allow for per handler MG_MAX_RECV_SIZE tuning would be fairly workable.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/cpq,35,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145828729,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Let me stress again - I don't see a reason to change MG_MAX_RECV_SIZE behavior. It should be set to some reasonable value, which is equal to e.g. max websocket message size - for example, 16kb. That should be enough. Having a per-connection limit is just an overkill.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1476,2022-02-20T11:19:13Z,2022-06-03T10:37:39Z,2022-06-03T10:42:20Z,CLOSED,False,173,17,9,https://github.com/jameshilliard,Allow controlling behavior when MG_MAX_RECV_SIZE is reached,1,[],https://github.com/cesanta/mongoose/pull/1476,https://github.com/jameshilliard,36,https://github.com/cesanta/mongoose/pull/1476#issuecomment-1145834499,"When MG_MAX_RECV_SIZE is reached we may want to stop reading rather than throwing an error as a full buffer may just mean we need to wait for the consumer to clear the buffer on a future poll iteration.
Each poll iteration will call MG_EV_POLL which can consume from the buffer to allow reading to continue, we should not assume that the buffer will always be consumed below the recv max after each poll iteration as the consumer may need to apply backpressure to the recv buffer if the consumer is not able to clear the recv buffer faster than read_conn fills it.
Introduce a MG_EV_BUFFER_FULL event which allows the user to choose what to do when the buffer is reached, with the existing erroring behavior remaining the default.","Let me stress again - I don't see a reason to change MG_MAX_RECV_SIZE behavior. It should be set to some reasonable value, which is equal to e.g. max websocket message size - for example, 16kb. That should be enough. Having a per-connection limit is just an overkill.

Tuning the buffer size is important for performance, small buffers can massively degrade performance for uploads especially under high RTT conditions and large buffers may not be desirable for handlers not dealing with upload handlers as you could run into RAM exhaustion issues if you tune them too high for all handlers, also allowing per connecting tuning allows one to limit aggregate recv buffer size in application logic when dealing with multiple connections as a static MG_MAX_RECV_SIZE is only able to tune on a per connection basis and would be insufficient to prevent ram exhaustion if there are too many connections.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1479,2022-02-23T17:48:31Z,2022-03-18T09:18:50Z,2022-03-18T09:18:50Z,MERGED,True,99,2,7,https://github.com/zudwalex,Add RTX-RTOS support,1,[],https://github.com/cesanta/mongoose/pull/1479,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1479,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1483,2022-03-02T15:30:56Z,2022-03-18T08:53:02Z,2022-03-18T08:53:02Z,CLOSED,False,16,7,2,https://github.com/jameshilliard,Relax sccmp test(output differs in valgrind for some tests) and test under valgrind.,1,[],https://github.com/cesanta/mongoose/pull/1483,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1483,"Output under valgrind:
3af51 2 unit_test.c:1222:sccmp          [] [] 0 0
3af62 2 unit_test.c:1222:sccmp          [] [1] -49 -1
3af64 2 unit_test.c:1222:sccmp          [a] [A] 0 0
3af64 2 unit_test.c:1222:sccmp          [a1] [A] 49 1
3af65 2 unit_test.c:1222:sccmp          [a] [A1] -49 -1","Output under valgrind:
3af51 2 unit_test.c:1222:sccmp          [] [] 0 0
3af62 2 unit_test.c:1222:sccmp          [] [1] -49 -1
3af64 2 unit_test.c:1222:sccmp          [a] [A] 0 0
3af64 2 unit_test.c:1222:sccmp          [a1] [A] 49 1
3af65 2 unit_test.c:1222:sccmp          [a] [A1] -49 -1",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1483,2022-03-02T15:30:56Z,2022-03-18T08:53:02Z,2022-03-18T08:53:02Z,CLOSED,False,16,7,2,https://github.com/jameshilliard,Relax sccmp test(output differs in valgrind for some tests) and test under valgrind.,1,[],https://github.com/cesanta/mongoose/pull/1483,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1483#issuecomment-1057067876,"Output under valgrind:
3af51 2 unit_test.c:1222:sccmp          [] [] 0 0
3af62 2 unit_test.c:1222:sccmp          [] [1] -49 -1
3af64 2 unit_test.c:1222:sccmp          [a] [A] 0 0
3af64 2 unit_test.c:1222:sccmp          [a1] [A] 49 1
3af65 2 unit_test.c:1222:sccmp          [a] [A1] -49 -1","Codecov Report

Merging #1483 (c5114e5) into master (733abcf) will increase coverage by 0.00%.
The diff coverage is 100.00%.


@@           Coverage Diff           @@
##           master    #1483   +/-   ##
=======================================
  Coverage   92.18%   92.18%           
=======================================
  Files          22       22           
  Lines        3415     3417    +2     
=======================================
+ Hits         3148     3150    +2     
  Misses        267      267           



Impacted Files
Coverage Δ





test/unit_test.c
99.67% <100.00%> (+<0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 733abcf...c5114e5. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1483,2022-03-02T15:30:56Z,2022-03-18T08:53:02Z,2022-03-18T08:53:02Z,CLOSED,False,16,7,2,https://github.com/jameshilliard,Relax sccmp test(output differs in valgrind for some tests) and test under valgrind.,1,[],https://github.com/cesanta/mongoose/pull/1483,https://github.com/jameshilliard,3,https://github.com/cesanta/mongoose/pull/1483#issuecomment-1067032070,"Output under valgrind:
3af51 2 unit_test.c:1222:sccmp          [] [] 0 0
3af62 2 unit_test.c:1222:sccmp          [] [1] -49 -1
3af64 2 unit_test.c:1222:sccmp          [a] [A] 0 0
3af64 2 unit_test.c:1222:sccmp          [a1] [A] 49 1
3af65 2 unit_test.c:1222:sccmp          [a] [A1] -49 -1","I've rebased this and now it's getting further and hitting an error here:
 ==3025== Conditional jump or move depends on uninitialised value(s)
==3025==    at 0x4843596: rawmemchr (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==3025==    by 0x49A0DE5: _IO_str_init_static_internal (strops.c:41)
==3025==    by 0x4970372: _IO_strfile_read (strfile.h:95)
==3025==    by 0x4970372: __isoc99_sscanf (isoc99_sscanf.c:28)
==3025==    by 0x120920: mg_ssi (ssi.c:21)
==3025==    by 0x1286B1: mg_http_serve_ssi (ssi.c:83)
==3025==    by 0x1286B1: mg_http_serve_dir (http.c:740)
==3025==    by 0x13D281: eh1 (unit_test.c:442)
==3025==    by 0x11893E: mg_call (event.c:11)
==3025==    by 0x121C47: http_cb (http.c:936)
==3025==    by 0x118964: mg_call (event.c:12)
==3025==    by 0x123DA4: iolog (sock.c:135)
==3025==    by 0x129741: read_conn (sock.c:272)
==3025==    by 0x129741: mg_mgr_poll (sock.c:561)
==3025==    by 0x13B19C: fetch (unit_test.c:499)
==3025==  Uninitialised value was created by a stack allocation
==3025==    at 0x120632: mg_ssi (ssi.c:11)
==3025==",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1484,2022-03-02T15:46:51Z,2022-03-02T15:51:13Z,2022-03-02T15:51:13Z,CLOSED,False,1,1,1,https://github.com/jameshilliard,Just assert data.txt exists.,1,[],https://github.com/cesanta/mongoose/pull/1484,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1484,It seems ls -l messes up github actions log output.,It seems ls -l messes up github actions log output.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1484,2022-03-02T15:46:51Z,2022-03-02T15:51:13Z,2022-03-02T15:51:13Z,CLOSED,False,1,1,1,https://github.com/jameshilliard,Just assert data.txt exists.,1,[],https://github.com/cesanta/mongoose/pull/1484,https://github.com/jameshilliard,2,https://github.com/cesanta/mongoose/pull/1484#issuecomment-1057082093,It seems ls -l messes up github actions log output.,"hmm, must not have tested that right, didn't seem to help",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1485,2022-03-02T17:14:05Z,2022-03-06T16:50:03Z,2022-03-07T03:59:20Z,MERGED,True,1,1,1,https://github.com/jameshilliard,Regenerate pack file when dependencies are changed.,1,[],https://github.com/cesanta/mongoose/pull/1485,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1485,Should help prevent some spurious test failures due to stale test/packed_fs.c file.,Should help prevent some spurious test failures due to stale test/packed_fs.c file.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1485,2022-03-02T17:14:05Z,2022-03-06T16:50:03Z,2022-03-07T03:59:20Z,MERGED,True,1,1,1,https://github.com/jameshilliard,Regenerate pack file when dependencies are changed.,1,[],https://github.com/cesanta/mongoose/pull/1485,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1485#issuecomment-1057177133,Should help prevent some spurious test failures due to stale test/packed_fs.c file.,"Codecov Report

Merging #1485 (f36b8ac) into master (a284df0) will not change coverage.
The diff coverage is n/a.


❗ Current head f36b8ac differs from pull request most recent head 3da9986. Consider uploading reports for the commit 3da9986 to get more accurate results


@@           Coverage Diff           @@
##           master    #1485   +/-   ##
=======================================
  Coverage   92.18%   92.18%           
=======================================
  Files          22       22           
  Lines        3415     3415           
=======================================
  Hits         3148     3148           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a284df0...3da9986. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1487,2022-03-07T05:03:23Z,2022-03-08T12:06:08Z,2022-03-08T18:57:01Z,MERGED,True,31,31,1,https://github.com/jameshilliard,Update actions/checkout@v2 to actions/checkout@v3,1,[],https://github.com/cesanta/mongoose/pull/1487,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1487,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1487,2022-03-07T05:03:23Z,2022-03-08T12:06:08Z,2022-03-08T18:57:01Z,MERGED,True,31,31,1,https://github.com/jameshilliard,Update actions/checkout@v2 to actions/checkout@v3,1,[],https://github.com/cesanta/mongoose/pull/1487,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1487#issuecomment-1060197986,,"Codecov Report

Merging #1487 (c46ad97) into master (733abcf) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master    #1487   +/-   ##
=======================================
  Coverage   92.18%   92.18%           
=======================================
  Files          22       22           
  Lines        3415     3415           
=======================================
  Hits         3148     3148           
  Misses        267      267           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 733abcf...c46ad97. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1488,2022-03-08T23:12:06Z,2022-03-14T13:26:08Z,2022-03-14T13:26:08Z,CLOSED,False,26,16,4,https://github.com/jameshilliard,Fix non-blocking send/recv flags,1,[],https://github.com/cesanta/mongoose/pull/1488,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1488,"The correct flag for non-blocking send/recv should be MSG_DONTWAIT
It's unclear where the MSG_NONBLOCKING flag came from as it does not appear to be valid, it was added in commit:
c5b1c08","The correct flag for non-blocking send/recv should be MSG_DONTWAIT
It's unclear where the MSG_NONBLOCKING flag came from as it does not appear to be valid, it was added in commit:
c5b1c08",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1488,2022-03-08T23:12:06Z,2022-03-14T13:26:08Z,2022-03-14T13:26:08Z,CLOSED,False,26,16,4,https://github.com/jameshilliard,Fix non-blocking send/recv flags,1,[],https://github.com/cesanta/mongoose/pull/1488,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1488#issuecomment-1065544309,"The correct flag for non-blocking send/recv should be MSG_DONTWAIT
It's unclear where the MSG_NONBLOCKING flag came from as it does not appear to be valid, it was added in commit:
c5b1c08","Codecov Report

Merging #1488 (9c2fcd8) into master (3ffb6c0) will not change coverage.
The diff coverage is 100.00%.


❗ Current head 9c2fcd8 differs from pull request most recent head 76ec799. Consider uploading reports for the commit 76ec799 to get more accurate results


@@           Coverage Diff           @@
##           master    #1488   +/-   ##
=======================================
  Coverage   92.17%   92.17%           
=======================================
  Files          22       22           
  Lines        3413     3413           
=======================================
  Hits         3146     3146           
  Misses        267      267           



Impacted Files
Coverage Δ





src/sock.c
86.59% <100.00%> (ø)



src/tls_mbed.c
75.63% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3ffb6c0...76ec799. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1489,"Fixes:
runtime error: null pointer passed as argument","Fixes:
runtime error: null pointer passed as argument",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1489#issuecomment-1062371276,"Fixes:
runtime error: null pointer passed as argument","Codecov Report

Merging #1489 (9b15946) into master (0ddda4a) will increase coverage by 0.03%.
The diff coverage is 100.00%.


@@            Coverage Diff             @@
##           master    #1489      +/-   ##
==========================================
+ Coverage   92.18%   92.21%   +0.03%     
==========================================
  Files          22       22              
  Lines        3415     3416       +1     
==========================================
+ Hits         3148     3150       +2     
+ Misses        267      266       -1     



Impacted Files
Coverage Δ





src/iobuf.c
97.43% <100.00%> (+0.06%)
⬆️


src/tls_mbed.c
76.47% <0.00%> (+0.84%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0ddda4a...9b15946. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1489#issuecomment-1062708895,"Fixes:
runtime error: null pointer passed as argument",Could you provide a failing unit test for this case please ?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1489#issuecomment-1062723104,"Fixes:
runtime error: null pointer passed as argument","Could you provide a failing unit test for this case please ?

Shows up in existing tests as a non-fatal error:
/tmp/mongoose/unit_test ASAN_OPTIONS=detect_leaks=1
56468f9 2 unit_test.c:1222:sccmp        [] [] 0 0
56468f9 2 unit_test.c:1222:sccmp        [] [1] -49 -49
56468f9 2 unit_test.c:1222:sccmp        [a] [A] 0 0
56468f9 2 unit_test.c:1222:sccmp        [a1] [A] 49 49
56468f9 2 unit_test.c:1222:sccmp        [a] [A1] -49 -49
56468fa 3 net.c:202:mg_listen           1 http://LOCALHOST:12358 port 0
56468fa 3 net.c:180:mg_connect          2 -> http://LOCALHOST:12358
56468fa 3 sock.c:384:accept_conn        3 accepted 127.0.0.1:48790
56468fb 3 net.c:158:mg_close_conn       2 closed
56468fb 3 sock.c:108:iolog                3 00100000000010 0:0 -1 err 88 (Socket operation on non-socket)
56468fb 3 net.c:158:mg_close_conn       3 closed
56468fc 3 net.c:180:mg_connect          4 -> http://LOCALHOST:12358
56468fc 3 sock.c:384:accept_conn        5 accepted 127.0.0.1:48792
56468fc 3 net.c:158:mg_close_conn       4 closed
56468fd 3 sock.c:108:iolog                5 00100000000010 0:0 -1 err 88 (Socket operation on non-socket)
56468fd 3 net.c:158:mg_close_conn       5 closed
56468fd 3 net.c:180:mg_connect          6 -> http://LOCALHOST:12358
56468fd 3 sock.c:384:accept_conn        7 accepted 127.0.0.1:48794
56468fe 3 net.c:158:mg_close_conn       6 closed
56468fe 3 sock.c:108:iolog                7 00100000000010 0:0 -1 err 88 (Socket operation on non-socket)
56468fe 3 net.c:158:mg_close_conn       7 closed
56468fe 3 net.c:180:mg_connect          8 -> http://LOCALHOST:12358
56468ff 3 sock.c:384:accept_conn        9 accepted 127.0.0.1:48796
5646900 3 net.c:158:mg_close_conn       8 closed
5646900 3 sock.c:108:iolog                9 00100000000010 0:0 -1 err 2 (No such file or directory)
5646900 3 net.c:158:mg_close_conn       9 closed
5646900 3 net.c:158:mg_close_conn       1 closed
5646901 3 net.c:214:mg_mgr_free         All connections closed
5646901 3 net.c:202:mg_listen           1 udp://127.0.0.1:12353 port 0
5646901 3 net.c:180:mg_connect          2 -> udp://127.0.0.1:12353
src/iobuf.c:64:3: runtime error: null pointer passed as argument 1, which is declared to never be null
src/iobuf.c:64:3: runtime error: null pointer passed as argument 2, which is declared to never be null
5646907 3 net.c:158:mg_close_conn       2 closed
5646907 3 net.c:158:mg_close_conn       1 closed",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/jameshilliard,5,https://github.com/cesanta/mongoose/pull/1489#issuecomment-1064062545,"Fixes:
runtime error: null pointer passed as argument","Could you provide a failing unit test for this case please ?

Added -fno-sanitize-recover which will make this trigger a hard error when running tests.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1489,2022-03-08T23:23:22Z,2022-03-14T13:28:33Z,2022-03-14T13:28:33Z,CLOSED,False,3,1,3,https://github.com/jameshilliard,Ensure io->buf is not null in mg_iobuf_del,1,[],https://github.com/cesanta/mongoose/pull/1489,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1489#issuecomment-1066786167,"Fixes:
runtime error: null pointer passed as argument",Fixed by 37cb51e,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,1,https://github.com/cesanta/mongoose/pull/1494,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1070695818,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","Server name validation is enabled by setting ""host"" in the TLS options:
https://github.com/cesanta/mongoose/blob/master/examples/http-client/main.c#L26
Why did you introduce a separate API for it ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,3,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1071918574,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","When I have ""A"" HTTPS server with ""name B cert"" and mongoose clients call it with ""A"", it gets ""name B cert"" and connects successfully without verifying hostname.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/cpq,4,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1072160917,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.",I did not understand. Can you give an example please?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,5,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1072207004,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","I set my DNS as following;
yahoo.c1126.com CNAME www.yahoo.com.


mongoose client try to connect to ""https://yahoo.c1126.com"", it will get the CERT with ""CN = *.www.yahoo.com"".


""yahoo.c1126.com"" does not match the CN, mongoose client SHOULD NOT connect.(now connects without error)",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/cpq,6,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1072893858,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","It does not connect.
$ cd examples/http-client
$ make clean all ARGS=""https://yahoo.c1126.com"" MBEDTLS=/usr/
...
12421484 3 dns.c:161:dns_cb             1 com resolved to 87.248.100.216
124214a7 3 tls_mbed.c:106:mg_tls_init   1 Setting TLS
124214d4 1 event.c:21:mg_error          1 TLS handshake: -0x2700",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,7,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1072923527,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","Oh reaaly, I did on windows. Can I ask you to do on windows.
( I think that I must do it on linux before pr, sorry about it)",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/cpq,8,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1073984533,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","Added vc2017 target to the examples/http-client build, and verified on windows.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,9,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1074746672,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.","on Debian,
$ cd examples/http-client
$ make clean all ARGS=""https://yahoo.c1126.com"" OPENSSL=/usr
It does not verify name.
MBEDTLS is ok, OPENSSL is NG.
Should I make issue ?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/cpq,10,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1074893902,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.",Pushed b78ced4  please check,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1494,2022-03-17T07:36:29Z,2022-03-21T14:41:05Z,2022-03-22T23:49:25Z,CLOSED,False,13,1,2,https://github.com/Nori100,verify hostname in mg_tls_init() - SSL client,2,[],https://github.com/cesanta/mongoose/pull/1494,https://github.com/Nori100,11,https://github.com/cesanta/mongoose/pull/1494#issuecomment-1075761173,"When I use the https server with SSL cert for another HOSTNAME, mongoose client does not verify it.
I want to add it.",I confirmed. Thank you for your work.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1495,2022-03-18T18:19:30Z,2022-03-21T15:18:59Z,2022-03-21T16:53:13Z,MERGED,True,96,180,2,https://github.com/jameshilliard,Run valgrind tests with appropriate compiler optimizations.,1,[],https://github.com/cesanta/mongoose/pull/1495,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1495,"Per valgrind docs:

If you are planning to use Memcheck: On rare occasions, compiler optimisations (at -O2 and above, and sometimes -O1) have been observed to generate code which fools Memcheck into wrongly reporting uninitialised value errors, or missing uninitialised value errors.


So the best solution is to turn off optimisation altogether.

Also cleaned up the tests(some weren't getting run properly like test++) using the test matrix feature.","Per valgrind docs:

If you are planning to use Memcheck: On rare occasions, compiler optimisations (at -O2 and above, and sometimes -O1) have been observed to generate code which fools Memcheck into wrongly reporting uninitialised value errors, or missing uninitialised value errors.


So the best solution is to turn off optimisation altogether.

Also cleaned up the tests(some weren't getting run properly like test++) using the test matrix feature.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1506,2022-04-01T16:41:02Z,2022-04-05T14:11:20Z,2022-04-05T14:11:21Z,CLOSED,False,2,0,1,https://github.com/honestech74,Fix zephyr build,1,[],https://github.com/cesanta/mongoose/pull/1506,https://github.com/honestech74,1,https://github.com/cesanta/mongoose/pull/1506,"When you didn't configure CONFIG_POSIX_API, it fixes SO_KEEPALIVE issue.","When you didn't configure CONFIG_POSIX_API, it fixes SO_KEEPALIVE issue.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1506,2022-04-01T16:41:02Z,2022-04-05T14:11:20Z,2022-04-05T14:11:21Z,CLOSED,False,2,0,1,https://github.com/honestech74,Fix zephyr build,1,[],https://github.com/cesanta/mongoose/pull/1506,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1506#issuecomment-1086739559,"When you didn't configure CONFIG_POSIX_API, it fixes SO_KEEPALIVE issue.",It builds fine for me without this change.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1506,2022-04-01T16:41:02Z,2022-04-05T14:11:20Z,2022-04-05T14:11:21Z,CLOSED,False,2,0,1,https://github.com/honestech74,Fix zephyr build,1,[],https://github.com/cesanta/mongoose/pull/1506,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1506#issuecomment-1088613293,"When you didn't configure CONFIG_POSIX_API, it fixes SO_KEEPALIVE issue.","@honestech74  does ""CONFIG_POSIX_API=y""  fix the issue for you?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1506,2022-04-01T16:41:02Z,2022-04-05T14:11:20Z,2022-04-05T14:11:21Z,CLOSED,False,2,0,1,https://github.com/honestech74,Fix zephyr build,1,[],https://github.com/cesanta/mongoose/pull/1506,https://github.com/honestech74,4,https://github.com/cesanta/mongoose/pull/1506#issuecomment-1088754971,"When you didn't configure CONFIG_POSIX_API, it fixes SO_KEEPALIVE issue.",It was not related to CONFIG_POSIX_API. It should work in the latest zephyr upstream(zephyr-v3.0.0).,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1507,2022-04-02T20:44:40Z,2022-04-05T12:06:06Z,2022-04-05T12:09:18Z,MERGED,True,46,12,3,https://github.com/jameshilliard,Handle MBEDTLS_ERR_NET_CONN_RESET errors,1,[],https://github.com/cesanta/mongoose/pull/1507,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1507,mbedtls expects this to be returned if the connection resets.,mbedtls expects this to be returned if the connection resets.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1507,2022-04-02T20:44:40Z,2022-04-05T12:06:06Z,2022-04-05T12:09:18Z,MERGED,True,46,12,3,https://github.com/jameshilliard,Handle MBEDTLS_ERR_NET_CONN_RESET errors,1,[],https://github.com/cesanta/mongoose/pull/1507,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1507#issuecomment-1086719572,mbedtls expects this to be returned if the connection resets.,"Codecov Report

Merging #1507 (3ec17c4) into master (0ed6470) will increase coverage by 0.06%.
The diff coverage is 45.45%.

@@            Coverage Diff             @@
##           master    #1507      +/-   ##
==========================================
+ Coverage   93.86%   93.93%   +0.06%     
==========================================
  Files          22       22              
  Lines        4127     4137      +10     
==========================================
+ Hits         3874     3886      +12     
+ Misses        253      251       -2     



Impacted Files
Coverage Δ





src/sock.c
84.86% <0.00%> (-1.03%)
⬇️


src/tls_mbed.c
84.82% <62.50%> (-1.55%)
⬇️


src/base64.c
97.04% <0.00%> (+0.92%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0ed6470...3ec17c4. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1508,2022-04-02T21:27:42Z,2022-04-02T23:11:25Z,2022-04-02T23:11:25Z,MERGED,True,8,1,1,https://github.com/jameshilliard,Print mqtt buffer on error in tests,1,[],https://github.com/cesanta/mongoose/pull/1508,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1508,"This test seems to fail randomly a lot, print the buffer on error to make it easier to isolate issues.","This test seems to fail randomly a lot, print the buffer on error to make it easier to isolate issues.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1508,2022-04-02T21:27:42Z,2022-04-02T23:11:25Z,2022-04-02T23:11:25Z,MERGED,True,8,1,1,https://github.com/jameshilliard,Print mqtt buffer on error in tests,1,[],https://github.com/cesanta/mongoose/pull/1508,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1508#issuecomment-1086727441,"This test seems to fail randomly a lot, print the buffer on error to make it easier to isolate issues.","Codecov Report

Merging #1508 (173c2ba) into master (b5fcf95) will decrease coverage by 0.08%.
The diff coverage is 50.00%.

@@            Coverage Diff             @@
##           master    #1508      +/-   ##
==========================================
- Coverage   93.95%   93.87%   -0.09%     
==========================================
  Files          22       22              
  Lines        4120     4128       +8     
==========================================
+ Hits         3871     3875       +4     
- Misses        249      253       +4     



Impacted Files
Coverage Δ





test/unit_test.c
99.43% <50.00%> (-0.33%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b5fcf95...173c2ba. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1509,2022-04-03T04:08:23Z,2022-04-04T08:16:35Z,2022-04-04T08:16:35Z,MERGED,True,2,1,1,https://github.com/jameshilliard,Fix mg_mgr_wakeup conflicting types error,1,[],https://github.com/cesanta/mongoose/pull/1509,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1509,"Fixes:
test/mongoose_custom.c:26:6: error: conflicting types for 'mg_mgr_wakeup'
   26 | void mg_mgr_wakeup(struct mg_connection *c, const void *buf, size_t len) {
      |      ^~~~~~~~~~~~~
In file included from test/mongoose_custom.c:1:
./mongoose.h:956:6: note: previous declaration of 'mg_mgr_wakeup' was here
  956 | bool mg_mgr_wakeup(struct mg_connection *pipe, const void *buf, size_t len);
      |      ^~~~~~~~~~~~~
make: *** [Makefile:105: arm] Error 1","Fixes:
test/mongoose_custom.c:26:6: error: conflicting types for 'mg_mgr_wakeup'
   26 | void mg_mgr_wakeup(struct mg_connection *c, const void *buf, size_t len) {
      |      ^~~~~~~~~~~~~
In file included from test/mongoose_custom.c:1:
./mongoose.h:956:6: note: previous declaration of 'mg_mgr_wakeup' was here
  956 | bool mg_mgr_wakeup(struct mg_connection *pipe, const void *buf, size_t len);
      |      ^~~~~~~~~~~~~
make: *** [Makefile:105: arm] Error 1",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1509,2022-04-03T04:08:23Z,2022-04-04T08:16:35Z,2022-04-04T08:16:35Z,MERGED,True,2,1,1,https://github.com/jameshilliard,Fix mg_mgr_wakeup conflicting types error,1,[],https://github.com/cesanta/mongoose/pull/1509,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1509#issuecomment-1086772642,"Fixes:
test/mongoose_custom.c:26:6: error: conflicting types for 'mg_mgr_wakeup'
   26 | void mg_mgr_wakeup(struct mg_connection *c, const void *buf, size_t len) {
      |      ^~~~~~~~~~~~~
In file included from test/mongoose_custom.c:1:
./mongoose.h:956:6: note: previous declaration of 'mg_mgr_wakeup' was here
  956 | bool mg_mgr_wakeup(struct mg_connection *pipe, const void *buf, size_t len);
      |      ^~~~~~~~~~~~~
make: *** [Makefile:105: arm] Error 1","Codecov Report

Merging #1509 (e268aff) into master (4474ada) will not change coverage.
The diff coverage is n/a.

@@           Coverage Diff           @@
##           master    #1509   +/-   ##
=======================================
  Coverage   93.86%   93.86%           
=======================================
  Files          22       22           
  Lines        4127     4127           
=======================================
  Hits         3874     3874           
  Misses        253      253           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 4474ada...e268aff. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1518,2022-04-07T23:32:03Z,2022-04-11T09:45:08Z,2022-04-11T18:25:16Z,MERGED,True,42,8,3,https://github.com/jameshilliard,Ensure MQTT_CMD_SUBACK is received before calling mg_mqtt_pub in tests,1,[],https://github.com/cesanta/mongoose/pull/1518,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1518,Should hopefully fix the random mqtt test failures.,Should hopefully fix the random mqtt test failures.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1518,2022-04-07T23:32:03Z,2022-04-11T09:45:08Z,2022-04-11T18:25:16Z,MERGED,True,42,8,3,https://github.com/jameshilliard,Ensure MQTT_CMD_SUBACK is received before calling mg_mqtt_pub in tests,1,[],https://github.com/cesanta/mongoose/pull/1518,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1518#issuecomment-1092300715,Should hopefully fix the random mqtt test failures.,"Codecov Report

Merging #1518 (2c2df0e) into master (a1ec179) will increase coverage by 0.02%.
The diff coverage is 100.00%.


❗ Current head 2c2df0e differs from pull request most recent head 7b72deb. Consider uploading reports for the commit 7b72deb to get more accurate results

@@            Coverage Diff             @@
##           master    #1518      +/-   ##
==========================================
+ Coverage   94.00%   94.03%   +0.02%     
==========================================
  Files          22       22              
  Lines        4123     4139      +16     
==========================================
+ Hits         3876     3892      +16     
  Misses        247      247              



Impacted Files
Coverage Δ





test/unit_test.c
99.76% <100.00%> (+<0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a1ec179...7b72deb. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1524,2022-04-13T08:12:02Z,2022-04-13T10:17:23Z,2022-04-13T10:17:23Z,MERGED,True,757,19,21,https://github.com/zudwalex,Add Zephyr examples,1,[],https://github.com/cesanta/mongoose/pull/1524,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1524,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1526,2022-04-13T17:37:23Z,2022-04-19T08:03:30Z,2022-04-19T08:03:30Z,MERGED,True,38,6,7,https://github.com/zudwalex,Add Zephyr build to Github actions,1,[],https://github.com/cesanta/mongoose/pull/1526,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1526,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1526,2022-04-13T17:37:23Z,2022-04-19T08:03:30Z,2022-04-19T08:03:30Z,MERGED,True,38,6,7,https://github.com/zudwalex,Add Zephyr build to Github actions,1,[],https://github.com/cesanta/mongoose/pull/1526,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1526#issuecomment-1098316892,,"Codecov Report

Merging #1526 (a7c24ae) into master (186eb99) will not change coverage.
The diff coverage is n/a.

@@           Coverage Diff           @@
##           master    #1526   +/-   ##
=======================================
  Coverage   95.02%   95.02%           
=======================================
  Files          22       22           
  Lines        4117     4117           
=======================================
  Hits         3912     3912           
  Misses        205      205           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 186eb99...a7c24ae. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1531,2022-04-20T06:42:57Z,2022-04-20T10:38:01Z,2022-04-20T10:38:01Z,MERGED,True,4,12,8,https://github.com/zudwalex,Fix zephyr tests,1,[],https://github.com/cesanta/mongoose/pull/1531,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1531,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1543,Expected to fail without #1476.,Expected to fail without #1476.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1120279646,Expected to fail without #1476.,"Codecov Report

Merging #1543 (9daee4f) into master (bc16854) will not change coverage.
The diff coverage is n/a.

@@           Coverage Diff           @@
##           master    #1543   +/-   ##
=======================================
  Coverage   94.63%   94.63%           
=======================================
  Files          22       22           
  Lines        4117     4117           
=======================================
  Hits         3896     3896           
  Misses        221      221           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update bc16854...9daee4f. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1144571644,Expected to fail without #1476.,"The 4096 ought to fail, because unit test fetched test/data/ca.pem which is ~30kb in size.
When I set MG_MAX_RECV_BUF_SIZE to 35000 or more, tests pass.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1144578685,Expected to fail without #1476.,"The 4096 ought to fail, because unit test fetched test/data/ca.pem which is ~30kb in size.

If you only process the data once fully received/buffered with MG_EV_HTTP_MSG yes that is true, but if using MG_EV_HTTP_CHUNK or something that drains the buffer when it hits MG_MAX_RECV_BUF_SIZE then it should not fail.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1144681529,Expected to fail without #1476.,"That's correct.
If we submit your change, then the behavior for use cases that do not process chunks (and that's the majority) will change. When a limit is hit, instead of failiing, the processing will just hang. Is that true?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/jameshilliard,6,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1144732977,Expected to fail without #1476.,"If we submit your change, then the behavior for use cases that do not process chunks (and that's the majority) will change.

Yeah, that's true, I made the retry behavior configurable in #1476 with the current behavior the default.

When a limit is hit, instead of failiing, the processing will just hang. Is that true?

Depends if timeouts are implemented but yeah it would keep retrying.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1543,2022-05-07T20:01:38Z,2022-06-03T10:38:19Z,2022-06-03T10:38:19Z,CLOSED,False,9,1,1,https://github.com/jameshilliard,Test with 4096 MG_MAX_RECV_BUF_SIZE,1,[],https://github.com/cesanta/mongoose/pull/1543,https://github.com/cpq,7,https://github.com/cesanta/mongoose/pull/1543#issuecomment-1145831729,Expected to fail without #1476.,"Closing this, as it works as expected.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1552,2022-05-15T16:36:27Z,2022-05-15T16:40:47Z,2022-05-15T16:40:47Z,MERGED,True,88,8,8,https://github.com/zudwalex,Add TI support,1,[],https://github.com/cesanta/mongoose/pull/1552,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1552,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1552,2022-05-15T16:36:27Z,2022-05-15T16:40:47Z,2022-05-15T16:40:47Z,MERGED,True,88,8,8,https://github.com/zudwalex,Add TI support,1,[],https://github.com/cesanta/mongoose/pull/1552,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1552#issuecomment-1126975559,,"Codecov Report

Merging #1552 (0ed7545) into master (95e22e8) will decrease coverage by 0.01%.
The diff coverage is 66.66%.

@@            Coverage Diff             @@
##           master    #1552      +/-   ##
==========================================
- Coverage   94.76%   94.75%   -0.02%     
==========================================
  Files          22       22              
  Lines        4110     4119       +9     
==========================================
+ Hits         3895     3903       +8     
- Misses        215      216       +1     



Impacted Files
Coverage Δ





src/log.c
66.66% <ø> (-0.84%)
⬇️


src/sock.c
84.42% <66.66%> (ø)



src/base64.c
96.51% <0.00%> (-0.09%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 95e22e8...0ed7545. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1553,2022-05-16T10:32:11Z,2022-05-16T11:19:42Z,2022-05-16T11:19:42Z,CLOSED,False,35,8,7,https://github.com/zudwalex,Use docker for Zephyr CI,1,[],https://github.com/cesanta/mongoose/pull/1553,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1553,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1554,2022-05-16T11:41:09Z,2022-05-16T12:39:26Z,2022-05-16T12:39:26Z,MERGED,True,24,52,7,https://github.com/zudwalex,Use docker for Zephyr CI,1,[],https://github.com/cesanta/mongoose/pull/1554,https://github.com/zudwalex,1,https://github.com/cesanta/mongoose/pull/1554,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1554,2022-05-16T11:41:09Z,2022-05-16T12:39:26Z,2022-05-16T12:39:26Z,MERGED,True,24,52,7,https://github.com/zudwalex,Use docker for Zephyr CI,1,[],https://github.com/cesanta/mongoose/pull/1554,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1554#issuecomment-1127566606,,"Codecov Report

Merging #1554 (d8d24af) into master (25806e4) will not change coverage.
The diff coverage is n/a.

@@           Coverage Diff           @@
##           master    #1554   +/-   ##
=======================================
  Coverage   94.71%   94.71%           
=======================================
  Files          22       22           
  Lines        4124     4124           
=======================================
  Hits         3906     3906           
  Misses        218      218           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 25806e4...d8d24af. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1557,2022-05-20T08:46:49Z,2022-05-20T09:16:57Z,2022-05-20T09:16:57Z,MERGED,True,124,188,15,https://github.com/cpq,Remove mg_log_set_callback. Use MG_PUTCHAR macro instead,1,[],https://github.com/cesanta/mongoose/pull/1557,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1557,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1557,2022-05-20T08:46:49Z,2022-05-20T09:16:57Z,2022-05-20T09:16:57Z,MERGED,True,124,188,15,https://github.com/cpq,Remove mg_log_set_callback. Use MG_PUTCHAR macro instead,1,[],https://github.com/cesanta/mongoose/pull/1557,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1557#issuecomment-1132651002,,"Codecov Report

Merging #1557 (7e2ca72) into master (7c17c80) will increase coverage by 0.04%.
The diff coverage is 100.00%.

@@            Coverage Diff             @@
##           master    #1557      +/-   ##
==========================================
+ Coverage   94.70%   94.75%   +0.04%     
==========================================
  Files          22       22              
  Lines        4119     4115       -4     
==========================================
- Hits         3901     3899       -2     
+ Misses        218      216       -2     



Impacted Files
Coverage Δ





src/log.c
68.57% <100.00%> (+1.90%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7c17c80...7e2ca72. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1561,2022-05-24T21:53:45Z,2022-05-26T06:53:02Z,2022-05-31T10:10:20Z,MERGED,True,84,2,5,https://github.com/vkoskiv,Add optional poll() implementation under MG_ENABLE_POLL define,1,[],https://github.com/cesanta/mongoose/pull/1561,https://github.com/vkoskiv,1,https://github.com/cesanta/mongoose/pull/1561,"This adds the ability to substitute select() with poll() on supported
unix environments when MG_ENABLE_POLL is defined. A make flag called
USE_POLL is provided as well.
Using poll() removes the limitation of FD_SETSIZE concurrent sockets,
generally 1024 on Linux environments.
Tested with make test IPV6=0 USE_POLL=1
Marked as draft because I have not debugged a strange issue where substituting the call to malloc() in mg_iotest() with alloca() (as suggested by @cpq) results in the test_http_client and test_dns_error tests to fail.","This adds the ability to substitute select() with poll() on supported
unix environments when MG_ENABLE_POLL is defined. A make flag called
USE_POLL is provided as well.
Using poll() removes the limitation of FD_SETSIZE concurrent sockets,
generally 1024 on Linux environments.
Tested with make test IPV6=0 USE_POLL=1
Marked as draft because I have not debugged a strange issue where substituting the call to malloc() in mg_iotest() with alloca() (as suggested by @cpq) results in the test_http_client and test_dns_error tests to fail.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1561,2022-05-24T21:53:45Z,2022-05-26T06:53:02Z,2022-05-31T10:10:20Z,MERGED,True,84,2,5,https://github.com/vkoskiv,Add optional poll() implementation under MG_ENABLE_POLL define,1,[],https://github.com/cesanta/mongoose/pull/1561,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1561#issuecomment-1137064659,"This adds the ability to substitute select() with poll() on supported
unix environments when MG_ENABLE_POLL is defined. A make flag called
USE_POLL is provided as well.
Using poll() removes the limitation of FD_SETSIZE concurrent sockets,
generally 1024 on Linux environments.
Tested with make test IPV6=0 USE_POLL=1
Marked as draft because I have not debugged a strange issue where substituting the call to malloc() in mg_iotest() with alloca() (as suggested by @cpq) results in the test_http_client and test_dns_error tests to fail.","Integrated this change, thank you @vkoskiv",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1561,2022-05-24T21:53:45Z,2022-05-26T06:53:02Z,2022-05-31T10:10:20Z,MERGED,True,84,2,5,https://github.com/vkoskiv,Add optional poll() implementation under MG_ENABLE_POLL define,1,[],https://github.com/cesanta/mongoose/pull/1561,https://github.com/vkoskiv,3,https://github.com/cesanta/mongoose/pull/1561#issuecomment-1137160650,"This adds the ability to substitute select() with poll() on supported
unix environments when MG_ENABLE_POLL is defined. A make flag called
USE_POLL is provided as well.
Using poll() removes the limitation of FD_SETSIZE concurrent sockets,
generally 1024 on Linux environments.
Tested with make test IPV6=0 USE_POLL=1
Marked as draft because I have not debugged a strange issue where substituting the call to malloc() in mg_iotest() with alloca() (as suggested by @cpq) results in the test_http_client and test_dns_error tests to fail.","Thanks @cpq, I would have preferred to retain authorship of the changes, but at least the issue is now resolved 👍",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1561,2022-05-24T21:53:45Z,2022-05-26T06:53:02Z,2022-05-31T10:10:20Z,MERGED,True,84,2,5,https://github.com/vkoskiv,Add optional poll() implementation under MG_ENABLE_POLL define,1,[],https://github.com/cesanta/mongoose/pull/1561,https://github.com/vkoskiv,4,https://github.com/cesanta/mongoose/pull/1561#issuecomment-1138097666,"This adds the ability to substitute select() with poll() on supported
unix environments when MG_ENABLE_POLL is defined. A make flag called
USE_POLL is provided as well.
Using poll() removes the limitation of FD_SETSIZE concurrent sockets,
generally 1024 on Linux environments.
Tested with make test IPV6=0 USE_POLL=1
Marked as draft because I have not debugged a strange issue where substituting the call to malloc() in mg_iotest() with alloca() (as suggested by @cpq) results in the test_http_client and test_dns_error tests to fail.","Alright, thanks for the good feedback! I amended the commit from before with your suggestions. Let me know if you have any more.
Tests pass now, and I also did some stress testing with 9000 concurrent websocket connections, and things worked fine.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1563,2022-05-26T20:44:36Z,2022-05-28T17:28:27Z,2022-05-28T17:28:27Z,MERGED,True,3,3,1,https://github.com/vkoskiv,Small fix to mg_timer_add() documentation,1,[],https://github.com/cesanta/mongoose/pull/1563,https://github.com/vkoskiv,1,https://github.com/cesanta/mongoose/pull/1563,The return value was not documented.,The return value was not documented.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1564,2022-05-29T13:53:22Z,2022-05-30T13:32:17Z,2022-05-30T13:32:18Z,MERGED,True,1,1,1,https://github.com/behnejad,Update README.md,1,[],https://github.com/cesanta/mongoose/pull/1564,https://github.com/behnejad,1,https://github.com/cesanta/mongoose/pull/1564,added missing parameter in sample code of mg_match.,added missing parameter in sample code of mg_match.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1567,2022-05-31T06:33:16Z,2022-05-31T06:35:20Z,2022-05-31T06:35:20Z,CLOSED,False,18,10,4,https://github.com/behnejad,changing mg_once to accept deliminator.,1,[],https://github.com/cesanta/mongoose/pull/1567,https://github.com/behnejad,1,https://github.com/cesanta/mongoose/pull/1567,"adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.","adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1568,2022-05-31T06:43:03Z,2022-05-31T17:25:12Z,2022-05-31T17:25:12Z,MERGED,True,18,10,4,https://github.com/behnejad,adding new api to enable separation of query string with '&'.,1,[],https://github.com/cesanta/mongoose/pull/1568,https://github.com/behnejad,1,https://github.com/cesanta/mongoose/pull/1568,"adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.
sorry for opening pull request with out building.
take away lesson for my self: Always build before commit.","adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.
sorry for opening pull request with out building.
take away lesson for my self: Always build before commit.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1568,2022-05-31T06:43:03Z,2022-05-31T17:25:12Z,2022-05-31T17:25:12Z,MERGED,True,18,10,4,https://github.com/behnejad,adding new api to enable separation of query string with '&'.,1,[],https://github.com/cesanta/mongoose/pull/1568,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1568#issuecomment-1141889220,"adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.
sorry for opening pull request with out building.
take away lesson for my self: Always build before commit.","Please rename mg_delimlist to mg_split.
Merge all commits into one.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1568,2022-05-31T06:43:03Z,2022-05-31T17:25:12Z,2022-05-31T17:25:12Z,MERGED,True,18,10,4,https://github.com/behnejad,adding new api to enable separation of query string with '&'.,1,[],https://github.com/cesanta/mongoose/pull/1568,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1568#issuecomment-1141954629,"adding mg_delimlist function. like mg_commalist but with delim as last parameter.
this way user can use mg_delimlist to separate query string with '&'.
sorry for opening pull request with out building.
take away lesson for my self: Always build before commit.","Thank you. Please sign a CLA at https://cesanta.com/cla.html , and I'll merge.",True,{'THUMBS_UP': ['https://github.com/behnejad']}
cesanta/mongoose,https://github.com/cesanta/mongoose,1570,2022-06-01T10:07:41Z,2022-06-01T20:17:52Z,2022-06-01T20:17:52Z,MERGED,True,1,1,1,https://github.com/behnejad,Update README.md,1,[],https://github.com/cesanta/mongoose/pull/1570,https://github.com/behnejad,1,https://github.com/cesanta/mongoose/pull/1570,"after sending buffer to socket, MG_EV_WRITE will generate.","after sending buffer to socket, MG_EV_WRITE will generate.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1572,2022-06-01T16:09:49Z,2022-06-01T16:22:24Z,2022-06-01T16:22:24Z,MERGED,True,44,3,3,https://github.com/cpq,Modify times example,2,[],https://github.com/cesanta/mongoose/pull/1572,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1572,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1572,2022-06-01T16:09:49Z,2022-06-01T16:22:24Z,2022-06-01T16:22:24Z,MERGED,True,44,3,3,https://github.com/cpq,Modify times example,2,[],https://github.com/cesanta/mongoose/pull/1572,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1572#issuecomment-1143812192,,"Codecov Report

Merging #1572 (f735585) into master (55517d4) will not change coverage.
The diff coverage is n/a.

@@           Coverage Diff           @@
##           master    #1572   +/-   ##
=======================================
  Coverage   95.78%   95.78%           
=======================================
  Files          22       22           
  Lines        4245     4245           
=======================================
  Hits         4066     4066           
  Misses        179      179           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 55517d4...f735585. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1573,2022-06-01T20:16:04Z,2022-06-02T13:06:41Z,2022-06-02T13:07:23Z,MERGED,True,4,8,1,https://github.com/cpq,Minor cosmetic changes,1,[],https://github.com/cesanta/mongoose/pull/1573,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1573,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1573,2022-06-01T20:16:04Z,2022-06-02T13:06:41Z,2022-06-02T13:07:23Z,MERGED,True,4,8,1,https://github.com/cpq,Minor cosmetic changes,1,[],https://github.com/cesanta/mongoose/pull/1573,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1573#issuecomment-1144537402,,"Codecov Report

Merging #1573 (d360efa) into master (d7b7a0a) will not change coverage.
The diff coverage is n/a.


❗ Current head d360efa differs from pull request most recent head 063244e. Consider uploading reports for the commit 063244e to get more accurate results

@@           Coverage Diff           @@
##           master    #1573   +/-   ##
=======================================
  Coverage   95.78%   95.78%           
=======================================
  Files          22       22           
  Lines        4245     4245           
=======================================
  Hits         4066     4066           
  Misses        179      179           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update d7b7a0a...063244e. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1575,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,2,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145833186,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"I am not in favor of this change.
Having such a fine granularity does not buy much on an embedded system. Anyone can simply DoS a device with a couple of hanging (half-finished) HTTP requests. Or just few extra users pull the Web UI page - each browser connection opens 4-5 simultaneous connections. So I don't think this change is practical, TBH",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145836661,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"Let's continue the RAM tuning conversation here. It is an important topic.
Could you share some concrete details - what MCU/board is it, what is free RAM value, and usage pattern?",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,4,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145836995,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"Anyone can simply DoS a device with a couple of hanging (half-finished) HTTP requests.

Depends on the hardware and use case I think, upload buffers may be desirable to have on the order of multiple megabytes, while other buffers(say for simple get requests) can be far smaller(a few kb).",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,5,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145838182,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,I concur. But let's talk some real numbers. Shall we take some real board and a real use case as an example?,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,6,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145839724,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"Could you share some concrete details - what MCU/board is it, what is free RAM value, and usage pattern?

Mostly x86_64 industrial and aarch64 boards, RAM typically between 512mb and 4GB, updates may be larger than RAM size and streamed directly to disk if larger than RAM size. Note we restrict the upload handler to a single upload at one time but want a reasonably large buffer for it for performance.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,7,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145849862,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"Uh. I recently work with devices with 60-120 Kb free RAM, so 512M device, I assume, has megabytes of free RAM - depends on the runtime conditions of course.
In this situation I would not bother at all. Choose some sane limit for the MG_MAX_RECV_SIZE,  e.g. 65kb, and be done with it. Then,

Using a default MG_IO_MAX of 2048 bytes is fine for that setup
Every browser session starts 4-5 keep-alive connections, which are usually closed by the browser if idle for X minutes
All GET requests have no body, so they are only headers - usually 1-2 kb max, usually less
As soon as GET request is done, mongoose deletes it from the recv buffer (see mg_iobuf_del() calls in http.c)
So I would NOT worry about GET requests at all
The only trouble are big POST and big WS messages
The big upload POSTs you handle with streaming
The big API POSTs (e.g. pushing some JSON data, I hope you use our mjson library) - the 64k cap should be enough
The big WS messages, well, cap! The suggested 64k is usually fine. For example, AWS IoT has a 8k cap for MQTT.
Are we missing something?
Yes, TLS! that is RAM-hungry. But that is a totally different topic.

The sending codepath is:

Serving static files. Already capped by http.c at MG_IO_SIZE
Serving dynamic responses. That's a firmware writer responsibility !

Mongoose runs perfectly well with a very similar setup on a ESP8266 with ~30k free RAM. MG_IO_SIZE is set to 512, and MG_MAX_RECV_SIZE is set to 4k.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,8,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1145967429,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"so 512M device, I assume, has megabytes of free RAM - depends on the runtime conditions of course.

Well 512M and up is what I typically work with but swupdate needs to support devices running under much more constrained resources(32MB RAM maybe on the lower end so need to be careful with letting too many buffers get too large, kinda a matter of safety margin I guess), there's update scenarios supported where interruptions due to ram exhaustion can result in a bricked system, being fully crash safe during updates isn't always easy or fully possible but controlling buffer sizes on a per connection granular basis can be helpful to get better worst case predictability on max RAM usage during an update.
My systems generally have a much bigger safety margin since I use dual copy without streaming mostly but single copy setups are much more common and say being able to lock down all but the upload buffer to much smaller sizes I think would provide a good bit more safety margin.
Keep in mind opportunistically enlarging the receive buffer in a controlled way for streaming installs also reduces the length of time a connection interruption may cause an install failure.
Basically it would potentially be problematic to use an enlarged upload buffer for RAM constrained systems for more than one connection at a time(the one for the streaming upload) in case it were to push the RAM usage up too much due to multiple incoming requests or something like that. I know a lot of devices run with much worse safety margins here because there's less flash memory and ram needed if you say don't do fully RAM buffered dual copy updates.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,9,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1146549434,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"That's understood, thank you.
Nevertheless, I do not see any need for so highly granular configuration. First, it is an embedded linux, so we're talking about systems which have way more than 50-100 Kb free RAM. Second, it is a server, not client, which could be DoSed simply by some number of extra connections, no matter how much optimized they are. Third, Monogoose buffers are not preallocated. We're talking about limits here. The average case scenario uses very moderate RAM per connection.
What is the point of nano- optimisation if I can simply fire a couple of nc commands that saturate a device? Limiting the number of connection is not an option, too. All in all, there is no point in doing such optimisation cause it is unlikely to be triggered in the first place.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,10,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1146587977,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"Nevertheless, I do not see any need for so highly granular configuration. First, it is an embedded linux, so we're talking about systems which have way more than 50-100 Kb free RAM.

Well there's more RAM overall but also the update image sizes and RAM requirements are typically much higher than non-linux systems, the constraints in play vary a lot and I've seen quite a lot of systems that are pretty much running right up against resource limits(often for dumb reasons but it's still rather common).

We're talking about limits here. The average case scenario uses very moderate RAM per connection.

Well this is for an updater which needs to handle multiple requests(for update status monitoring) while updating, but we want to loosen the limit for only a single connection while keeping the others reasonably low. I'm more concerned with trying to limit worst case scenario RAM usage than average case usage.

What is the point of nano- optimisation if I can simply fire a couple of nc commands that saturate a device? Limiting the number of connection is not an option, too. All in all, there is no point in doing such optimisation cause it is unlikely to be triggered in the first place.

It's actually kinda easy to trigger accidentally, whatever is pushing the update package(such as some sort of mass update automation system or application) to mongoose could have a rapidly looping resend bug which causes the update request to be spammed at the webserver repeatedly, if all but the active upload connection has a low buffer size limit it's unlikely the system will run out of ram and crash during the update as the excess connections would get killed fairly quickly by going hitting the limit.
If say we want a 1MB or larger recv buffer for the active upload handler it wouldn't take that many retries being spammed to make the system run out of ram if we can't restrict the larger buffer to only the single active upload handler connection. For systems that don't use streaming updates this is also an issue as they will unpack update artifacts to RAM before writing them so will often be near max ram usage already. So we would only want to grow the upload buffer if no update is already being processed in the background.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/cpq,11,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1146772052,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"This change won't go in. It adds complexity and buys nothing.
@jameshilliard   your time & effort appreciated nevertheless, thank you.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1575,2022-06-03T10:24:35Z,2022-06-05T09:24:35Z,2022-06-05T22:39:43Z,CLOSED,False,16,4,6,https://github.com/jameshilliard,Make MG_MAX_RECV_SIZE dynamically configurable per connection.,1,[],https://github.com/cesanta/mongoose/pull/1575,https://github.com/jameshilliard,12,https://github.com/cesanta/mongoose/pull/1575#issuecomment-1146896086,Useful if different handlers in the same application need a different MG_MAX_RECV_SIZE.,"This change won't go in. It adds complexity and buys nothing.

Yeah, I guess it's probably somewhat overly use case specific.
I've def seen update failures similar to what I described(http buffers getting too big and triggering update failures to OOM crashes) get hit by a production line QA testing automation system being a bit overly aggressive with pushing updates for boards that had been preflashed before assembly but which needed to be updated to the latest firmware version before shipping/final burn in testing
Luckily the systems didn't hard brick since they had enough space to use redundant dual A/B partition rotation but power cycling was need in some cases to get things back into a workable state due to processes crashing.
I guess an alternative approach here is to make sure MG_MAX_RECV_SIZE is always set to the max buffer size limit one wants at the start and then in the event handler we'd need something like this for handlers dealing with everything other than the connection we want a large buffer on:
if (c->recv.len >= SMALL_BUFFER_MAX_SIZE && ev == MG_EV_READ)
  mg_error(c, ""max_recv_buf_size reached"");
Main downside is just that we have to catch all MG_EV_READ events for which we want to clamp buffers rather than only having to unclamp the buffer explicitly as needed, but it should work I think.

What is the point of nano- optimisation if I can simply fire a couple of nc commands that saturate a device? Limiting the number of connection is not an option, too.


First, it is an embedded linux, so we're talking about systems which have way more than 50-100 Kb free RAM. Second, it is a server, not client, which could be DoSed simply by some number of extra connections, no matter how much optimized they are.

For devices with say 50-100 Kb free RAM I was thinking it may make sense to implement a simple buffer pool(and maybe connection pool as well to allow clamping max connections) attached to the mg_mgr, it would be a bit of a refactor but I think it would mostly just be a matter of having the mg_iobuf allocation/deallocation functions accept a mg_connection and do something like:
When allocating iobuffers check and decrement from recv_pool(basically just an integer like type for tracking total buffer allocations):
if (allocation_size <= c->mgr->recv_pool)
  c->mgr->recv_pool -= allocation_size
else
  mg_error(c, ""max_recv_pool_size reached"");
When deallocating iobuffers return the allocations to the pool by incrementing the freed buffer size:
c->mgr->recv_pool += allocation_size",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1577,2022-06-03T12:58:25Z,2022-06-03T13:38:25Z,2022-06-03T13:38:35Z,MERGED,True,64,2,4,https://github.com/cpq,Add sntp-time-sync example,1,[],https://github.com/cesanta/mongoose/pull/1577,https://github.com/cpq,1,https://github.com/cesanta/mongoose/pull/1577,,,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1579,2022-06-05T13:19:27Z,2022-06-05T14:28:00Z,2022-06-05T14:28:00Z,CLOSED,False,99,2,3,https://github.com/jameshilliard,Do not try to read from full connections.,1,[],https://github.com/cesanta/mongoose/pull/1579,https://github.com/jameshilliard,1,https://github.com/cesanta/mongoose/pull/1579,Fixes a bug where setting c->is_full = true wasn't stopping reads.,Fixes a bug where setting c->is_full = true wasn't stopping reads.,True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1579,2022-06-05T13:19:27Z,2022-06-05T14:28:00Z,2022-06-05T14:28:00Z,CLOSED,False,99,2,3,https://github.com/jameshilliard,Do not try to read from full connections.,1,[],https://github.com/cesanta/mongoose/pull/1579,https://github.com/codecov-commenter,2,https://github.com/cesanta/mongoose/pull/1579#issuecomment-1146803640,Fixes a bug where setting c->is_full = true wasn't stopping reads.,"Codecov Report

Merging #1579 (1b6c69f) into master (f4fa1e0) will increase coverage by 0.11%.
The diff coverage is 100.00%.


❗ Current head 1b6c69f differs from pull request most recent head 4ee8c24. Consider uploading reports for the commit 4ee8c24 to get more accurate results

@@            Coverage Diff             @@
##           master    #1579      +/-   ##
==========================================
+ Coverage   95.74%   95.86%   +0.11%     
==========================================
  Files          22       22              
  Lines        4277     4328      +51     
==========================================
+ Hits         4095     4149      +54     
+ Misses        182      179       -3     



Impacted Files
Coverage Δ





src/sock.c
90.69% <ø> (ø)



test/unit_test.c
99.65% <100.00%> (+0.01%)
⬆️


src/iobuf.c
100.00% <0.00%> (+7.50%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f4fa1e0...4ee8c24. Read the comment docs.",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1579,2022-06-05T13:19:27Z,2022-06-05T14:28:00Z,2022-06-05T14:28:00Z,CLOSED,False,99,2,3,https://github.com/jameshilliard,Do not try to read from full connections.,1,[],https://github.com/cesanta/mongoose/pull/1579,https://github.com/cpq,3,https://github.com/cesanta/mongoose/pull/1579#issuecomment-1146814758,Fixes a bug where setting c->is_full = true wasn't stopping reads.,"Integrated with a small change, thank you @jameshilliard !",True,{}
cesanta/mongoose,https://github.com/cesanta/mongoose,1581,2022-06-07T03:34:30Z,2022-06-07T07:35:24Z,2022-06-07T07:55:09Z,MERGED,True,1,1,1,https://github.com/behnejad,fixing offset of Content-Length value.,1,[],https://github.com/cesanta/mongoose/pull/1581,https://github.com/behnejad,1,https://github.com/cesanta/mongoose/pull/1581,"in very large HTTP response, this offset might cause a problem with HTTP header format.","in very large HTTP response, this offset might cause a problem with HTTP header format.",True,{}
