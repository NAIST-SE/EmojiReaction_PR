d0k3/GodMode9,https://github.com/d0k3/GodMode9,2,2016-03-24T18:32:40Z,2016-03-24T19:04:44Z,2016-03-24T19:04:44Z,MERGED,True,1,1,1,https://github.com/Flat,Fix purple blue,1,[],https://github.com/d0k3/GodMode9/pull/2,https://github.com/Flat,1,https://github.com/d0k3/GodMode9/pull/2,Fix #1,Fix #1,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,2,2016-03-24T18:32:40Z,2016-03-24T19:04:44Z,2016-03-24T19:04:44Z,MERGED,True,1,1,1,https://github.com/Flat,Fix purple blue,1,[],https://github.com/d0k3/GodMode9/pull/2,https://github.com/RShadowhand,2,https://github.com/d0k3/GodMode9/pull/2#issuecomment-200962171,Fix #1,"Wew, so fast! :P",True,"{'LAUGH': ['https://github.com/Flat', 'https://github.com/RShadowhand', 'https://github.com/d0k3']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,3,2016-04-10T14:05:46Z,2016-04-10T14:05:53Z,2016-04-10T14:05:53Z,MERGED,True,35,6,4,https://github.com/d0k3,Up to date with master,3,[],https://github.com/d0k3/GodMode9/pull/3,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/3,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,4,2016-04-12T10:31:34Z,2016-04-12T10:31:40Z,2016-04-12T10:36:29Z,MERGED,True,56,282,4,https://github.com/d0k3,Revised entrypoint linker.ld / start.s,3,[],https://github.com/d0k3/GodMode9/pull/4,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/4,Thanks @AuroraWright!,Thanks @AuroraWright!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,5,2016-04-19T18:30:31Z,2016-04-19T20:38:22Z,2016-04-19T20:38:23Z,MERGED,True,1,1,1,https://github.com/fox8091,Fix DTCM address,1,[],https://github.com/d0k3/GodMode9/pull/5,https://github.com/fox8091,1,https://github.com/d0k3/GodMode9/pull/5,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,5,2016-04-19T18:30:31Z,2016-04-19T20:38:22Z,2016-04-19T20:38:23Z,MERGED,True,1,1,1,https://github.com/fox8091,Fix DTCM address,1,[],https://github.com/d0k3/GodMode9/pull/5,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/5#issuecomment-212118237,,Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,6,2016-04-22T13:50:36Z,2016-04-22T13:50:50Z,2016-05-24T13:58:38Z,MERGED,True,84,12,4,https://github.com/d0k3,Fix virtual memory drive accesses,2,[],https://github.com/d0k3/GodMode9/pull/6,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/6,This also extends access to N3DS extended memory regions.,This also extends access to N3DS extended memory regions.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,7,2016-05-02T10:37:02Z,2016-05-02T10:37:16Z,2016-05-24T13:58:36Z,MERGED,True,64,17,5,https://github.com/d0k3,Enable RAM drive feature,5,[],https://github.com/d0k3/GodMode9/pull/7,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/7,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,22,2017-01-25T19:38:46Z,2017-01-25T22:16:43Z,2017-01-25T22:16:43Z,CLOSED,False,83,3,5,None,Add ARM9 payload launching,1,[],https://github.com/d0k3/GodMode9/pull/22,None,1,https://github.com/d0k3/GodMode9/pull/22,"Couple of notes:


it uses two unprotected bootrom functions, therefore it must remain available at all times


temporarily takes up a couple of bytes @ ITCM + 0x100, so if this project ever uses low exception vectors, keep that in mind


only tested with Cakes, D9WIP, GM9 itself, arm9launcher and ctrmemtest, but it should work with any sane payload","Couple of notes:


it uses two unprotected bootrom functions, therefore it must remain available at all times


temporarily takes up a couple of bytes @ ITCM + 0x100, so if this project ever uses low exception vectors, keep that in mind


only tested with Cakes, D9WIP, GM9 itself, arm9launcher and ctrmemtest, but it should work with any sane payload",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,22,2017-01-25T19:38:46Z,2017-01-25T22:16:43Z,2017-01-25T22:16:43Z,CLOSED,False,83,3,5,None,Add ARM9 payload launching,1,[],https://github.com/d0k3/GodMode9/pull/22,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/22#issuecomment-275222264,"Couple of notes:


it uses two unprotected bootrom functions, therefore it must remain available at all times


temporarily takes up a couple of bytes @ ITCM + 0x100, so if this project ever uses low exception vectors, keep that in mind


only tested with Cakes, D9WIP, GM9 itself, arm9launcher and ctrmemtest, but it should work with any sane payload","Oh! GM9 get's it first ever pull request, nice! I will have to change some minor things, though, so I'll check it out locally and look it over, alright?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,22,2017-01-25T19:38:46Z,2017-01-25T22:16:43Z,2017-01-25T22:16:43Z,CLOSED,False,83,3,5,None,Add ARM9 payload launching,1,[],https://github.com/d0k3/GodMode9/pull/22,None,3,https://github.com/d0k3/GodMode9/pull/22#issuecomment-275228335,"Couple of notes:


it uses two unprotected bootrom functions, therefore it must remain available at all times


temporarily takes up a couple of bytes @ ITCM + 0x100, so if this project ever uses low exception vectors, keep that in mind


only tested with Cakes, D9WIP, GM9 itself, arm9launcher and ctrmemtest, but it should work with any sane payload","Sure, no problem. I was wondering if I should add argument passing and since there's no guidelines on how to add special features I just looked at the current ones and tried to replicate them as best as possible.
If there's anything I can help with, feel free to ask.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,22,2017-01-25T19:38:46Z,2017-01-25T22:16:43Z,2017-01-25T22:16:43Z,CLOSED,False,83,3,5,None,Add ARM9 payload launching,1,[],https://github.com/d0k3/GodMode9/pull/22,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/22#issuecomment-275250498,"Couple of notes:


it uses two unprotected bootrom functions, therefore it must remain available at all times


temporarily takes up a couple of bytes @ ITCM + 0x100, so if this project ever uses low exception vectors, keep that in mind


only tested with Cakes, D9WIP, GM9 itself, arm9launcher and ctrmemtest, but it should work with any sane payload","Manually added, closing this pull request",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,26,2017-02-22T21:03:42Z,2017-02-23T16:13:14Z,2017-02-23T16:13:14Z,CLOSED,False,102,187,14,None,Merge linker scripts and bootstrapping code,4,[],https://github.com/d0k3/GodMode9/pull/26,None,1,https://github.com/d0k3/GodMode9/pull/26,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,26,2017-02-22T21:03:42Z,2017-02-23T16:13:14Z,2017-02-23T16:13:14Z,CLOSED,False,102,187,14,None,Merge linker scripts and bootstrapping code,4,[],https://github.com/d0k3/GodMode9/pull/26,None,2,https://github.com/d0k3/GodMode9/pull/26#issuecomment-282038500,,d0c4e11,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,27,2017-02-25T13:23:38Z,2017-02-25T14:32:01Z,2017-02-25T14:32:01Z,MERGED,True,1,1,1,None,hotfix,1,[],https://github.com/d0k3/GodMode9/pull/27,None,1,https://github.com/d0k3/GodMode9/pull/27,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,29,2017-02-28T14:22:36Z,2017-02-28T14:58:10Z,2017-02-28T14:58:10Z,CLOSED,False,4,0,1,None,Update godmode.c,1,[],https://github.com/d0k3/GodMode9/pull/29,None,1,https://github.com/d0k3/GodMode9/pull/29,fixes #28,fixes #28,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,29,2017-02-28T14:22:36Z,2017-02-28T14:58:10Z,2017-02-28T14:58:10Z,CLOSED,False,4,0,1,None,Update godmode.c,1,[],https://github.com/d0k3/GodMode9/pull/29,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/29#issuecomment-283061566,fixes #28,"Thanks, but I already had this fixed :). Closing this now...",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,36,2017-03-29T13:39:07Z,2017-03-30T11:49:38Z,2017-03-30T12:11:43Z,MERGED,True,1,1,1,https://github.com/lilymaniac,Use proper TIDLow for KOR N3DS H&S,1,[],https://github.com/d0k3/GodMode9/pull/36,https://github.com/lilymaniac,1,https://github.com/d0k3/GodMode9/pull/36,"20027300, not 00027300
This fixes H&S inject on KOR N3DS","20027300, not 00027300
This fixes H&S inject on KOR N3DS",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,39,2017-04-04T22:45:16Z,2017-04-04T23:07:34Z,2017-04-06T14:24:23Z,CLOSED,False,147,90,11,https://github.com/d0k3,Take over some of saibotu's improvements,5,[],https://github.com/d0k3/GodMode9/pull/39,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/39,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,41,2017-04-08T18:45:53Z,2017-04-08T19:20:38Z,2017-04-08T19:30:01Z,CLOSED,False,4,4,2,https://github.com/saibotu,Fixed ticket.db parsing,2,[],https://github.com/d0k3/GodMode9/pull/41,https://github.com/saibotu,1,https://github.com/d0k3/GodMode9/pull/41,"This fixes the offsets of tickets in the ticket.db virtual drive. All tickets had the same content without this.
I also added .tik extensions, so the tickets can be installed using FBI.","This fixes the offsets of tickets in the ticket.db virtual drive. All tickets had the same content without this.
I also added .tik extensions, so the tickets can be installed using FBI.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,41,2017-04-08T18:45:53Z,2017-04-08T19:20:38Z,2017-04-08T19:30:01Z,CLOSED,False,4,4,2,https://github.com/saibotu,Fixed ticket.db parsing,2,[],https://github.com/d0k3/GodMode9/pull/41,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/41#issuecomment-292738085,"This fixes the offsets of tickets in the ticket.db virtual drive. All tickets had the same content without this.
I also added .tik extensions, so the tickets can be installed using FBI.","Goddammit, thanks for this pull request. Coincidentially you help me fix another bug I've been puzzled about for the last few hours with this. @saibotu - you're the best!
However, that other commit - problem is, this increases the size of of the VirtualFile struct, which might lead to unexpected problems elsewhere. I'll have to look into this further. I think there could be problems in vgame.c",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,41,2017-04-08T18:45:53Z,2017-04-08T19:20:38Z,2017-04-08T19:30:01Z,CLOSED,False,4,4,2,https://github.com/saibotu,Fixed ticket.db parsing,2,[],https://github.com/d0k3/GodMode9/pull/41,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/41#issuecomment-292739732,"This fixes the offsets of tickets in the ticket.db virtual drive. All tickets had the same content without this.
I also added .tik extensions, so the tickets can be installed using FBI.","Okay, as you may have noticed, I changed the second commit just a little. I think it is for the better this way, just to be safe. Again, thanks for your help!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,45,2017-04-13T16:10:17Z,2017-04-15T17:03:55Z,2017-04-15T17:03:55Z,MERGED,True,6,15,3,None,"increase ramdrive storage size, reorganized the memory layout",1,[],https://github.com/d0k3/GodMode9/pull/45,None,1,https://github.com/d0k3/GodMode9/pull/45,Hasn't been heavily tested (I don't even have a N3DS to test the upper 128MiB) but it appears to work fine.,Hasn't been heavily tested (I don't even have a N3DS to test the upper 128MiB) but it appears to work fine.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,45,2017-04-13T16:10:17Z,2017-04-15T17:03:55Z,2017-04-15T17:03:55Z,MERGED,True,6,15,3,None,"increase ramdrive storage size, reorganized the memory layout",1,[],https://github.com/d0k3/GodMode9/pull/45,https://github.com/SUOlivia,2,https://github.com/d0k3/GodMode9/pull/45#issuecomment-294233197,Hasn't been heavily tested (I don't even have a N3DS to test the upper 128MiB) but it appears to work fine.,"Works perfectly with N3ds, filled the ramdrive to full capacity and SHA matched. And while the ramdrive was full, i made a cia out of a random system title and mounted ticket.db as a virtual drive",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,52,2017-04-21T01:46:02Z,2017-04-22T10:48:31Z,2017-04-22T10:48:31Z,CLOSED,False,3,3,1,https://github.com/Plailect,spelling,1,[],https://github.com/d0k3/GodMode9/pull/52,https://github.com/Plailect,1,https://github.com/d0k3/GodMode9/pull/52,😋,😋,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,52,2017-04-21T01:46:02Z,2017-04-22T10:48:31Z,2017-04-22T10:48:31Z,CLOSED,False,3,3,1,https://github.com/Plailect,spelling,1,[],https://github.com/d0k3/GodMode9/pull/52,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/52#issuecomment-296365050,😋,"Manually taken over (locally, atm). Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,56,2017-04-30T19:26:49Z,2017-05-02T20:56:08Z,2017-05-02T20:56:08Z,CLOSED,False,2,2,1,https://github.com/Multipixelone,Update README.md to Luma3DS 7.0,1,[],https://github.com/d0k3/GodMode9/pull/56,https://github.com/Multipixelone,1,https://github.com/d0k3/GodMode9/pull/56,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,56,2017-04-30T19:26:49Z,2017-05-02T20:56:08Z,2017-05-02T20:56:08Z,CLOSED,False,2,2,1,https://github.com/Multipixelone,Update README.md to Luma3DS 7.0,1,[],https://github.com/d0k3/GodMode9/pull/56,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/56#issuecomment-298758575,,I'd rather keep this in a state where instructions are correct for newer and older versions of Luma 3DS.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,62,2017-05-20T12:52:55Z,2017-05-20T14:32:02Z,2017-05-20T14:32:02Z,MERGED,True,1,1,1,https://github.com/LegoFigure11,Fix typo,1,[],https://github.com/d0k3/GodMode9/pull/62,https://github.com/LegoFigure11,1,https://github.com/d0k3/GodMode9/pull/62,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,72,2017-05-25T23:54:37Z,2017-05-29T10:27:40Z,2017-05-29T10:27:40Z,CLOSED,False,39,12,5,https://github.com/TuxSH,Add support for upcoming Luma3DS & B9S versions...,1,[],https://github.com/d0k3/GodMode9/pull/72,https://github.com/TuxSH,1,https://github.com/d0k3/GodMode9/pull/72,"This commit adds support for upcoming Luma3DS & B9S versions without breaking support for outdated/deprecated entrypoints.
It additionally addresses some issues in start.s (GW relocator not clearing&relocating caches & the DTCM issue).","This commit adds support for upcoming Luma3DS & B9S versions without breaking support for outdated/deprecated entrypoints.
It additionally addresses some issues in start.s (GW relocator not clearing&relocating caches & the DTCM issue).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,72,2017-05-25T23:54:37Z,2017-05-29T10:27:40Z,2017-05-29T10:27:40Z,CLOSED,False,39,12,5,https://github.com/TuxSH,Add support for upcoming Luma3DS & B9S versions...,1,[],https://github.com/d0k3/GodMode9/pull/72,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/72#issuecomment-304628912,"This commit adds support for upcoming Luma3DS & B9S versions without breaking support for outdated/deprecated entrypoints.
It additionally addresses some issues in start.s (GW relocator not clearing&relocating caches & the DTCM issue).","Taken over in https://github.com/d0k3/GodMode9/tree/freencsd, will be merged into master later. Thankyou!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,73,2017-05-26T00:15:48Z,2017-05-31T14:19:34Z,2017-05-31T14:19:34Z,CLOSED,False,69,59,13,https://github.com/TuxSH,Remove firmtool submodule,8,[],https://github.com/d0k3/GodMode9/pull/73,https://github.com/TuxSH,1,https://github.com/d0k3/GodMode9/pull/73,"This remove the firmtool submodule.
firmtool is an installable script and should be treated as such.
People who can run the script are also able to do pip install --upgrade git+https://github.com/TuxSH/firmtool.git to install (or update) firmtool easily.
Morever this avoids you from having to update the submodule everytime, and more importantly from keeping an outdated (and/or bugged) version of it in your repo. The submodule commit was older that v1.0 (for example it generated .sha files everytime, something you probably don't want)!","This remove the firmtool submodule.
firmtool is an installable script and should be treated as such.
People who can run the script are also able to do pip install --upgrade git+https://github.com/TuxSH/firmtool.git to install (or update) firmtool easily.
Morever this avoids you from having to update the submodule everytime, and more importantly from keeping an outdated (and/or bugged) version of it in your repo. The submodule commit was older that v1.0 (for example it generated .sha files everytime, something you probably don't want)!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,73,2017-05-26T00:15:48Z,2017-05-31T14:19:34Z,2017-05-31T14:19:34Z,CLOSED,False,69,59,13,https://github.com/TuxSH,Remove firmtool submodule,8,[],https://github.com/d0k3/GodMode9/pull/73,https://github.com/fox8091,2,https://github.com/d0k3/GodMode9/pull/73#issuecomment-304785414,"This remove the firmtool submodule.
firmtool is an installable script and should be treated as such.
People who can run the script are also able to do pip install --upgrade git+https://github.com/TuxSH/firmtool.git to install (or update) firmtool easily.
Morever this avoids you from having to update the submodule everytime, and more importantly from keeping an outdated (and/or bugged) version of it in your repo. The submodule commit was older that v1.0 (for example it generated .sha files everytime, something you probably don't want)!",Perhaps also fix the build process so it uses an ELF instead of a bin since firmtool supports that?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,73,2017-05-26T00:15:48Z,2017-05-31T14:19:34Z,2017-05-31T14:19:34Z,CLOSED,False,69,59,13,https://github.com/TuxSH,Remove firmtool submodule,8,[],https://github.com/d0k3/GodMode9/pull/73,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/73#issuecomment-305201237,"This remove the firmtool submodule.
firmtool is an installable script and should be treated as such.
People who can run the script are also able to do pip install --upgrade git+https://github.com/TuxSH/firmtool.git to install (or update) firmtool easily.
Morever this avoids you from having to update the submodule everytime, and more importantly from keeping an outdated (and/or bugged) version of it in your repo. The submodule commit was older that v1.0 (for example it generated .sha files everytime, something you probably don't want)!",Taken over locally,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,83,2017-06-04T01:49:33Z,2017-06-11T15:48:55Z,2017-06-11T15:48:55Z,CLOSED,False,24,18,1,https://github.com/TuxSH,Fix TWL key 0x03 init,1,[],https://github.com/d0k3/GodMode9/pull/83,https://github.com/TuxSH,1,https://github.com/d0k3/GodMode9/pull/83,"This fixes TWL key init:

only done on k9lh
fixed for devunits","This fixes TWL key init:

only done on k9lh
fixed for devunits",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,83,2017-06-04T01:49:33Z,2017-06-11T15:48:55Z,2017-06-11T15:48:55Z,CLOSED,False,24,18,1,https://github.com/TuxSH,Fix TWL key 0x03 init,1,[],https://github.com/d0k3/GodMode9/pull/83,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/83#issuecomment-306170984,"This fixes TWL key init:

only done on k9lh
fixed for devunits","Taken over locally, key0x03Y pulled out of P9 instead of hardcoded. You may review the changes here:
a27bd1f
Also, I trust this is actually tested on A9LH?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,83,2017-06-04T01:49:33Z,2017-06-11T15:48:55Z,2017-06-11T15:48:55Z,CLOSED,False,24,18,1,https://github.com/TuxSH,Fix TWL key 0x03 init,1,[],https://github.com/d0k3/GodMode9/pull/83,https://github.com/TuxSH,3,https://github.com/d0k3/GodMode9/pull/83#issuecomment-307265186,"This fixes TWL key init:

only done on k9lh
fixed for devunits","Also, I trust this is actually tested on A9LH?
I haven't tested on A9LH, although it should work (the full routine which doesn't assume a9lh works).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/TuxSH,1,https://github.com/d0k3/GodMode9/pull/86,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.","Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/86#issuecomment-306171370,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.","While this is appreciated, it would be much more of a hassle to bring back removed entrypoints than  to lug them around for a little more.
Thus, this instead of taking the pull request: d97e754
This will be kept until the next release to see if there are any legit complaints.
Please leave this pull request open, I'll take it at a later point.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/linouxis9,3,https://github.com/d0k3/GodMode9/pull/86#issuecomment-306308309,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.",I wonder why they want payloads for old entrypoints be removed that badly..,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/86#issuecomment-306328756,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.","There are good reasons to get rid of these unstable entrypoints. Difficult to maintain and test... Outdated, a lof of functionality not being available. There may also be legit reasons to keep, so I'm doing this slow.",True,"{'THUMBS_UP': ['https://github.com/linouxis9', 'https://github.com/ValiantStorm', 'https://github.com/astronautlevel2']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/fox8091,5,https://github.com/d0k3/GodMode9/pull/86#issuecomment-310578882,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.",Perhaps also remove usage instructions for old entrypoints from the readme as well?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,86,2017-06-04T17:03:39Z,2017-08-04T13:21:05Z,2017-08-04T13:21:05Z,CLOSED,False,15,137,10,https://github.com/TuxSH,Drop support for pre-a9lh entrypoints,1,[],https://github.com/d0k3/GodMode9/pull/86,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/86#issuecomment-320247195,"Those entrypoints are terribly outdated and shouldn't be used anymore outside sb9si.
As you can see this also removes the need for painful-to-maintain support cruft inside GM9.","Entrypoints removed locally, thus closing this now. Thanks for this pull request!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,97,2017-06-14T00:23:39Z,2017-06-16T11:23:04Z,2017-06-19T04:24:21Z,CLOSED,False,9,1,1,None,Wait 3ms for i2c reads/writes to workaround N3DS MCU bugs,1,[],https://github.com/d0k3/GodMode9/pull/97,None,1,https://github.com/d0k3/GodMode9/pull/97,"Luma, b9s, etc. wait 3ms when doing i2c reads/writes due to MCU bugs on the N3DS, however GM9 does not. This fixes that.","Luma, b9s, etc. wait 3ms when doing i2c reads/writes due to MCU bugs on the N3DS, however GM9 does not. This fixes that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,97,2017-06-14T00:23:39Z,2017-06-16T11:23:04Z,2017-06-19T04:24:21Z,CLOSED,False,9,1,1,None,Wait 3ms for i2c reads/writes to workaround N3DS MCU bugs,1,[],https://github.com/d0k3/GodMode9/pull/97,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/97#issuecomment-308401451,"Luma, b9s, etc. wait 3ms when doing i2c reads/writes due to MCU bugs on the N3DS, however GM9 does not. This fixes that.","Okay, I have a suggestion for this one. Maybe @AuroraWright can chime in, too.
These delays, on all reads and writes, can lead to less responsive input routines (even if it is just 3ms). As I understand, MCU bugs on N3DS only happen when alternating between reads / writes, though. So... what if we add the 3ms delay only at the beginning and end of i2cWriteRegister(). That should work, too, right?
EDIT: maybe even only at the beginning of the function, assuming that any chainloading (to and from GM9) will take longer than 3ms (thus only GM9 being a possible cause of switching too fast).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,97,2017-06-14T00:23:39Z,2017-06-16T11:23:04Z,2017-06-19T04:24:21Z,CLOSED,False,9,1,1,None,Wait 3ms for i2c reads/writes to workaround N3DS MCU bugs,1,[],https://github.com/d0k3/GodMode9/pull/97,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/97#issuecomment-309001536,"Luma, b9s, etc. wait 3ms when doing i2c reads/writes due to MCU bugs on the N3DS, however GM9 does not. This fixes that.","Merged locally into the scripting branch, which will be merged to master later. Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,121,2017-07-17T18:18:32Z,2017-07-24T12:18:02Z,2017-07-24T12:18:02Z,CLOSED,False,15,13,1,https://github.com/WinterMute,allow parallel build,1,[],https://github.com/d0k3/GodMode9/pull/121,https://github.com/WinterMute,1,https://github.com/d0k3/GodMode9/pull/121,These changes let you specify the number of jobs for a speedy parallel build.,These changes let you specify the number of jobs for a speedy parallel build.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,121,2017-07-17T18:18:32Z,2017-07-24T12:18:02Z,2017-07-24T12:18:02Z,CLOSED,False,15,13,1,https://github.com/WinterMute,allow parallel build,1,[],https://github.com/d0k3/GodMode9/pull/121,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/121#issuecomment-317404184,These changes let you specify the number of jobs for a speedy parallel build.,Merged,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,122,2017-07-17T18:29:00Z,2017-07-24T11:59:23Z,2017-07-24T11:59:23Z,CLOSED,False,1,1,1,https://github.com/WinterMute,devkitARM r47 fix,1,[],https://github.com/d0k3/GodMode9/pull/122,https://github.com/WinterMute,1,https://github.com/d0k3/GodMode9/pull/122,"inline alone leaves the compiler free to use the external definition, but the program does not provide one.","inline alone leaves the compiler free to use the external definition, but the program does not provide one.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,122,2017-07-17T18:29:00Z,2017-07-24T11:59:23Z,2017-07-24T11:59:23Z,CLOSED,False,1,1,1,https://github.com/WinterMute,devkitARM r47 fix,1,[],https://github.com/d0k3/GodMode9/pull/122,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/122#issuecomment-317400238,"inline alone leaves the compiler free to use the external definition, but the program does not provide one.",Merged,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,133,2017-07-29T20:35:58Z,2017-07-29T20:51:23Z,2017-07-30T07:32:38Z,CLOSED,False,1,1,1,https://github.com/emre009,Update hid.h,1,[],https://github.com/d0k3/GodMode9/pull/133,https://github.com/emre009,1,https://github.com/d0k3/GodMode9/pull/133,emre009@f3f79da,emre009@f3f79da,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,133,2017-07-29T20:35:58Z,2017-07-29T20:51:23Z,2017-07-30T07:32:38Z,CLOSED,False,1,1,1,https://github.com/emre009,Update hid.h,1,[],https://github.com/d0k3/GodMode9/pull/133,https://github.com/ahoischen,2,https://github.com/d0k3/GodMode9/pull/133#issuecomment-318857806,emre009@f3f79da,"This change caused GodMode9 to break.
As repeatedly stated, special ""broken button"" builds aren't being made. You can change the code yourself, but don't expect it to be incorporated into the central codebase.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,133,2017-07-29T20:35:58Z,2017-07-29T20:51:23Z,2017-07-30T07:32:38Z,CLOSED,False,1,1,1,https://github.com/emre009,Update hid.h,1,[],https://github.com/d0k3/GodMode9/pull/133,https://github.com/mariogamer2,3,https://github.com/d0k3/GodMode9/pull/133#issuecomment-318858141,emre009@f3f79da,No you must also switch what is in parentheses (and delete the other y). Also @ahoischen second point,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,133,2017-07-29T20:35:58Z,2017-07-29T20:51:23Z,2017-07-30T07:32:38Z,CLOSED,False,1,1,1,https://github.com/emre009,Update hid.h,1,[],https://github.com/d0k3/GodMode9/pull/133,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/133#issuecomment-318858508,emre009@f3f79da,"What @ahoischen said. This special broken button build is for you, it won't be incorporated into the codebase. Think about it, @emre009 - the next guy has a broken Y button, and what then?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,137,2017-07-31T09:08:34Z,2017-07-31T09:15:45Z,2017-07-31T09:15:45Z,CLOSED,False,1,1,1,https://github.com/emre009,Update hid.h,1,[],https://github.com/d0k3/GodMode9/pull/137,https://github.com/emre009,1,https://github.com/d0k3/GodMode9/pull/137,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,138,2017-07-31T09:36:54Z,2017-07-31T09:57:42Z,2017-07-31T14:23:28Z,CLOSED,False,2,2,2,https://github.com/emre009,Emre009 patch 2,2,[],https://github.com/d0k3/GodMode9/pull/138,https://github.com/emre009,1,https://github.com/d0k3/GodMode9/pull/138,"emre009@16b9ec1
emre009@054f0a8","emre009@16b9ec1
emre009@054f0a8",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,138,2017-07-31T09:36:54Z,2017-07-31T09:57:42Z,2017-07-31T14:23:28Z,CLOSED,False,2,2,2,https://github.com/emre009,Emre009 patch 2,2,[],https://github.com/d0k3/GodMode9/pull/138,https://github.com/ahoischen,2,https://github.com/d0k3/GodMode9/pull/138#issuecomment-319020113,"emre009@16b9ec1
emre009@054f0a8","Please stop trying to merge your custom buttons. If you can't compile a build yourself, please ask someone more knowledgeable. These Pull Requests won't achieve anything.",True,{'THUMBS_UP': ['https://github.com/CuriousTommy']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,138,2017-07-31T09:36:54Z,2017-07-31T09:57:42Z,2017-07-31T14:23:28Z,CLOSED,False,2,2,2,https://github.com/emre009,Emre009 patch 2,2,[],https://github.com/d0k3/GodMode9/pull/138,https://github.com/emre009,3,https://github.com/d0k3/GodMode9/pull/138#issuecomment-319023084,"emre009@16b9ec1
emre009@054f0a8",I did it all to see if it was in Travis. Then I would have to remove them. Just show me how someone was released. Sorry I did not make any changes to the database. My only goal was to use the home menu.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,138,2017-07-31T09:36:54Z,2017-07-31T09:57:42Z,2017-07-31T14:23:28Z,CLOSED,False,2,2,2,https://github.com/emre009,Emre009 patch 2,2,[],https://github.com/d0k3/GodMode9/pull/138,https://github.com/ahoischen,4,https://github.com/d0k3/GodMode9/pull/138#issuecomment-319024216,"emre009@16b9ec1
emre009@054f0a8","You can always enable TravisCI for your forks by going to www.travis-ci.org and signing in with your GitHub account. I'm not familiar with Godmode9's build system, but it might be enough to just create a release on GitHub and wait for Travis to upload the file. Otherwise, you will have to compile it yourself. The instructions for that are in the .travis.yml file.
I should propose automatic releases.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,138,2017-07-31T09:36:54Z,2017-07-31T09:57:42Z,2017-07-31T14:23:28Z,CLOSED,False,2,2,2,https://github.com/emre009,Emre009 patch 2,2,[],https://github.com/d0k3/GodMode9/pull/138,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/138#issuecomment-319082063,"emre009@16b9ec1
emre009@054f0a8","Oh well... for Travis, the pull request would not have been required. If you really can't compile on your own right now, ask someone else. I will also make compiling a bit easier by removing submodules (today or tomorrow).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,144,2017-08-07T20:48:32Z,2017-08-07T21:41:59Z,2017-08-07T21:42:04Z,CLOSED,False,5,6,1,https://github.com/saibotu,Fixed mounting images,1,[],https://github.com/d0k3/GodMode9/pull/144,https://github.com/saibotu,1,https://github.com/d0k3/GodMode9/pull/144,"This fixes mounting images (closes #142), while still allowing mounting from 8: and 9: (except for nand images).
There might be a better solution to this, but i couldn't find a way to identify the amount of needed drives and didn't know where to implement it.","This fixes mounting images (closes #142), while still allowing mounting from 8: and 9: (except for nand images).
There might be a better solution to this, but i couldn't find a way to identify the amount of needed drives and didn't know where to implement it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,144,2017-08-07T20:48:32Z,2017-08-07T21:41:59Z,2017-08-07T21:42:04Z,CLOSED,False,5,6,1,https://github.com/saibotu,Fixed mounting images,1,[],https://github.com/d0k3/GodMode9/pull/144,https://github.com/saibotu,2,https://github.com/d0k3/GodMode9/pull/144#issuecomment-320778712,"This fixes mounting images (closes #142), while still allowing mounting from 8: and 9: (except for nand images).
There might be a better solution to this, but i couldn't find a way to identify the amount of needed drives and didn't know where to implement it.","Don't merge this yet, just noticed another issue with this. Mounting a nand image and then any other image doesnt restore ramdrive and bonusdrive.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,144,2017-08-07T20:48:32Z,2017-08-07T21:41:59Z,2017-08-07T21:42:04Z,CLOSED,False,5,6,1,https://github.com/saibotu,Fixed mounting images,1,[],https://github.com/d0k3/GodMode9/pull/144,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/144#issuecomment-320786246,"This fixes mounting images (closes #142), while still allowing mounting from 8: and 9: (except for nand images).
There might be a better solution to this, but i couldn't find a way to identify the amount of needed drives and didn't know where to implement it.","Yeah, that's correct. I didn't see your p/r earlier, so I just did the solution myself. Maybe you doublecheck?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,144,2017-08-07T20:48:32Z,2017-08-07T21:41:59Z,2017-08-07T21:42:04Z,CLOSED,False,5,6,1,https://github.com/saibotu,Fixed mounting images,1,[],https://github.com/d0k3/GodMode9/pull/144,https://github.com/saibotu,4,https://github.com/d0k3/GodMode9/pull/144#issuecomment-320788757,"This fixes mounting images (closes #142), while still allowing mounting from 8: and 9: (except for nand images).
There might be a better solution to this, but i couldn't find a way to identify the amount of needed drives and didn't know where to implement it.","Just checked, your solution works fine. 👍",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,149,2017-08-08T12:44:05Z,2017-08-08T15:53:34Z,2017-08-08T15:53:34Z,CLOSED,False,0,0,0,https://github.com/Wolfvak,Added brightness adjustment through the volume slider,1,[],https://github.com/d0k3/GodMode9/pull/149,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/149,"Also adds some ARM-specific routines, GIC/DIC code for the MPcore and PXI support.
The startup brightness has been lowered considerably (75% -> 25%) to prevent headaches and such.","Also adds some ARM-specific routines, GIC/DIC code for the MPcore and PXI support.
The startup brightness has been lowered considerably (75% -> 25%) to prevent headaches and such.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,149,2017-08-08T12:44:05Z,2017-08-08T15:53:34Z,2017-08-08T15:53:34Z,CLOSED,False,0,0,0,https://github.com/Wolfvak,Added brightness adjustment through the volume slider,1,[],https://github.com/d0k3/GodMode9/pull/149,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/149#issuecomment-320999524,"Also adds some ARM-specific routines, GIC/DIC code for the MPcore and PXI support.
The startup brightness has been lowered considerably (75% -> 25%) to prevent headaches and such.","Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,153,2017-08-12T13:16:18Z,2017-08-12T22:32:15Z,2017-08-12T22:32:15Z,CLOSED,False,7,1,2,https://github.com/rboninsegna,"Enable alternate key .firm build (for ntrboothax, etc)",2,[],https://github.com/d0k3/GodMode9/pull/153,https://github.com/rboninsegna,1,https://github.com/d0k3/GodMode9/pull/153,:3,:3,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,153,2017-08-12T13:16:18Z,2017-08-12T22:32:15Z,2017-08-12T22:32:15Z,CLOSED,False,7,1,2,https://github.com/rboninsegna,"Enable alternate key .firm build (for ntrboothax, etc)",2,[],https://github.com/d0k3/GodMode9/pull/153,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/153#issuecomment-321986254,:3,"Could you be more specific as to which ""minor features"" are unavailable when booting from this entrypoint?
As for the lack of decrypted OTP, is it because the necessary key is cleared before boot or is there any other reason?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,153,2017-08-12T13:16:18Z,2017-08-12T22:32:15Z,2017-08-12T22:32:15Z,CLOSED,False,7,1,2,https://github.com/rboninsegna,"Enable alternate key .firm build (for ntrboothax, etc)",2,[],https://github.com/d0k3/GodMode9/pull/153,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/153#issuecomment-321992159,:3,"No OTP access, @Wolfvak :)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,153,2017-08-12T13:16:18Z,2017-08-12T22:32:15Z,2017-08-12T22:32:15Z,CLOSED,False,7,1,2,https://github.com/rboninsegna,"Enable alternate key .firm build (for ntrboothax, etc)",2,[],https://github.com/d0k3/GodMode9/pull/153,https://github.com/Wolfvak,4,https://github.com/d0k3/GodMode9/pull/153#issuecomment-322009910,:3,"Merged with e95ece0, thanks for the contribution!",True,{'THUMBS_UP': ['https://github.com/rboninsegna']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,154,2017-08-12T21:43:11Z,2017-08-14T11:46:59Z,2017-08-14T11:46:59Z,CLOSED,False,7,3,1,https://github.com/AuroraWright,Pass argc=1 if the specified FIRM does not require screen init,1,[],https://github.com/d0k3/GodMode9/pull/154,https://github.com/AuroraWright,1,https://github.com/d0k3/GodMode9/pull/154,For consistency with B9S/Luma3DS,For consistency with B9S/Luma3DS,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,154,2017-08-12T21:43:11Z,2017-08-14T11:46:59Z,2017-08-14T11:46:59Z,CLOSED,False,7,3,1,https://github.com/AuroraWright,Pass argc=1 if the specified FIRM does not require screen init,1,[],https://github.com/d0k3/GodMode9/pull/154,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/154#issuecomment-322169639,For consistency with B9S/Luma3DS,"Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,163,2017-08-15T19:25:50Z,2017-08-15T19:34:12Z,2017-08-15T19:34:12Z,CLOSED,False,406,142,17,https://github.com/Wolfvak,"Add local exception handler, improve MPcore IRQ handler",3,[],https://github.com/d0k3/GodMode9/pull/163,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/163,"The ARM9 exception handler only modifies a small section at the bottom of ITCM, so any other global handlers that may be present won't be affected.
The ARM11 IRQ handler was changed to use some new ARMv6k instructions.","The ARM9 exception handler only modifies a small section at the bottom of ITCM, so any other global handlers that may be present won't be affected.
The ARM11 IRQ handler was changed to use some new ARMv6k instructions.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,163,2017-08-15T19:25:50Z,2017-08-15T19:34:12Z,2017-08-15T19:34:12Z,CLOSED,False,406,142,17,https://github.com/Wolfvak,"Add local exception handler, improve MPcore IRQ handler",3,[],https://github.com/d0k3/GodMode9/pull/163,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/163#issuecomment-322565857,"The ARM9 exception handler only modifies a small section at the bottom of ITCM, so any other global handlers that may be present won't be affected.
The ARM11 IRQ handler was changed to use some new ARMv6k instructions.","Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,168,2017-08-16T20:48:13Z,2017-08-16T21:05:51Z,2017-08-16T21:05:51Z,CLOSED,False,2599,44,26,https://github.com/shoguna,Add Nintendo Zone to injection list,8,[],https://github.com/d0k3/GodMode9/pull/168,https://github.com/shoguna,1,https://github.com/d0k3/GodMode9/pull/168,"Since the app is completely inoperable even when you manage to launch it from FBI, could you add Nintendo Zone to the list of Nintendo apps to inject?","Since the app is completely inoperable even when you manage to launch it from FBI, could you add Nintendo Zone to the list of Nintendo apps to inject?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,168,2017-08-16T20:48:13Z,2017-08-16T21:05:51Z,2017-08-16T21:05:51Z,CLOSED,False,2599,44,26,https://github.com/shoguna,Add Nintendo Zone to injection list,8,[],https://github.com/d0k3/GodMode9/pull/168,https://github.com/ahoischen,2,https://github.com/d0k3/GodMode9/pull/168#issuecomment-322895513,"Since the app is completely inoperable even when you manage to launch it from FBI, could you add Nintendo Zone to the list of Nintendo apps to inject?","This seems to be an issue and not a PR. Correct me if I'm wrong, but the proposed changes don't seem to be related to your request. Consider opening an issue instead.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,173,2017-08-19T18:25:36Z,2017-08-19T18:29:03Z,2017-08-19T18:29:03Z,MERGED,True,1,1,1,https://github.com/AuroraWright,Fix overwriting part of the FIRM with garbage on install,1,[],https://github.com/d0k3/GodMode9/pull/173,https://github.com/AuroraWright,1,https://github.com/d0k3/GodMode9/pull/173,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,178,2017-08-21T16:18:45Z,2017-08-21T16:46:35Z,2017-08-21T16:46:46Z,MERGED,True,4,3,2,https://github.com/sora10pls,Add hash to NAND backup scripts,2,[],https://github.com/d0k3/GodMode9/pull/178,https://github.com/sora10pls,1,https://github.com/d0k3/GodMode9/pull/178,Resolves #174.,Resolves #174.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,178,2017-08-21T16:18:45Z,2017-08-21T16:46:35Z,2017-08-21T16:46:46Z,MERGED,True,4,3,2,https://github.com/sora10pls,Add hash to NAND backup scripts,2,[],https://github.com/d0k3/GodMode9/pull/178,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/178#issuecomment-323795923,Resolves #174.,"Taken locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,191,2017-09-02T03:02:43Z,2017-09-04T00:17:20Z,2017-09-04T00:17:21Z,CLOSED,False,16,0,1,https://github.com/zetaPRIME,Scripting: SD card un/remount,1,[],https://github.com/d0k3/GodMode9/pull/191,https://github.com/zetaPRIME,1,https://github.com/d0k3/GodMode9/pull/191,Allows for SD card swapping during script execution. Would resolve #190.,Allows for SD card swapping during script execution. Would resolve #190.,True,"{'THUMBS_UP': ['https://github.com/legoj15', 'https://github.com/ZetaDesigns', 'https://github.com/coggy9']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,191,2017-09-02T03:02:43Z,2017-09-04T00:17:20Z,2017-09-04T00:17:21Z,CLOSED,False,16,0,1,https://github.com/zetaPRIME,Scripting: SD card un/remount,1,[],https://github.com/d0k3/GodMode9/pull/191,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/191#issuecomment-326841695,Allows for SD card swapping during script execution. Would resolve #190.,"Seen this too late, already solved it. You forgot setting the EmuNAND offset, though :).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,193,2017-09-05T01:31:56Z,2017-09-05T02:08:38Z,2017-09-05T11:52:37Z,CLOSED,False,2,0,1,https://github.com/windows-server-2003,Fix failure deleting/renaming mounted files,1,[],https://github.com/d0k3/GodMode9/pull/193,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/193,"It will show no confirmation to unmount the file and fail when try to delete/rename the mounted file via X or R+X,so I added confirmation to unmount the mounted file when deleting/renaming.","It will show no confirmation to unmount the file and fail when try to delete/rename the mounted file via X or R+X,so I added confirmation to unmount the mounted file when deleting/renaming.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,193,2017-09-05T01:31:56Z,2017-09-05T02:08:38Z,2017-09-05T11:52:37Z,CLOSED,False,2,0,1,https://github.com/windows-server-2003,Fix failure deleting/renaming mounted files,1,[],https://github.com/d0k3/GodMode9/pull/193,https://github.com/windows-server-2003,2,https://github.com/d0k3/GodMode9/pull/193#issuecomment-327053111,"It will show no confirmation to unmount the file and fail when try to delete/rename the mounted file via X or R+X,so I added confirmation to unmount the mounted file when deleting/renaming.","Sorry,it isn't so easy.I didn't test enough.Folder deletion will be bugged.I will close this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,193,2017-09-05T01:31:56Z,2017-09-05T02:08:38Z,2017-09-05T11:52:37Z,CLOSED,False,2,0,1,https://github.com/windows-server-2003,Fix failure deleting/renaming mounted files,1,[],https://github.com/d0k3/GodMode9/pull/193,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/193#issuecomment-327152959,"It will show no confirmation to unmount the file and fail when try to delete/rename the mounted file via X or R+X,so I added confirmation to unmount the mounted file when deleting/renaming.","Exactly, that's the problem. And there is no easy / quick way of handling this yet.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,200,2017-09-15T08:54:42Z,2017-09-15T09:06:42Z,2017-10-05T01:56:24Z,CLOSED,False,0,15,1,https://github.com/windows-server-2003,Delete script preview fauture,1,[],https://github.com/d0k3/GodMode9/pull/200,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/200,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,200,2017-09-15T08:54:42Z,2017-09-15T09:06:42Z,2017-10-05T01:56:24Z,CLOSED,False,0,15,1,https://github.com/windows-server-2003,Delete script preview fauture,1,[],https://github.com/d0k3/GodMode9/pull/200,https://github.com/windows-server-2003,2,https://github.com/d0k3/GodMode9/pull/200#issuecomment-329725610,,"Oh , I made a mistake, sorry. I wanted to made pull request on my repository.I didn't want to make pull request to the original(this) repository.
Script preview future is very nice, but it made executing scripts slow.so I want to be able to choose Preview future/Executing speed.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,200,2017-09-15T08:54:42Z,2017-09-15T09:06:42Z,2017-10-05T01:56:24Z,CLOSED,False,0,15,1,https://github.com/windows-server-2003,Delete script preview fauture,1,[],https://github.com/d0k3/GodMode9/pull/200,https://github.com/windows-server-2003,3,https://github.com/d0k3/GodMode9/pull/200#issuecomment-329732505,,"I had to just commit.
Sorry for troubling you.I'm not familiar with Github, so I'll be more careful.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,200,2017-09-15T08:54:42Z,2017-09-15T09:06:42Z,2017-10-05T01:56:24Z,CLOSED,False,0,15,1,https://github.com/windows-server-2003,Delete script preview fauture,1,[],https://github.com/d0k3/GodMode9/pull/200,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/200#issuecomment-329761856,,"Instead of doing this, why not open up an issue and upload a sample script?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,200,2017-09-15T08:54:42Z,2017-09-15T09:06:42Z,2017-10-05T01:56:24Z,CLOSED,False,0,15,1,https://github.com/windows-server-2003,Delete script preview fauture,1,[],https://github.com/d0k3/GodMode9/pull/200,https://github.com/windows-server-2003,5,https://github.com/d0k3/GodMode9/pull/200#issuecomment-329918833,,"I'm thinking about that, but released binaries will never be changed (even have broken FAT future). So I released without script preview future.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,206,2017-09-18T10:56:20Z,2017-09-18T12:03:29Z,2017-09-22T15:28:35Z,CLOSED,False,1,1,1,https://github.com/Nemris,Typo fix,1,[],https://github.com/d0k3/GodMode9/pull/206,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/206,Fixed a minor typo.,Fixed a minor typo.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,206,2017-09-18T10:56:20Z,2017-09-18T12:03:29Z,2017-09-22T15:28:35Z,CLOSED,False,1,1,1,https://github.com/Nemris,Typo fix,1,[],https://github.com/d0k3/GodMode9/pull/206,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/206#issuecomment-330199496,Fixed a minor typo.,I merged it together with another small readme fix of mine (so not to clutter up commit history) - hope that's okay for you!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,206,2017-09-18T10:56:20Z,2017-09-18T12:03:29Z,2017-09-22T15:28:35Z,CLOSED,False,1,1,1,https://github.com/Nemris,Typo fix,1,[],https://github.com/d0k3/GodMode9/pull/206,https://github.com/Nemris,3,https://github.com/d0k3/GodMode9/pull/206#issuecomment-330238697,Fixed a minor typo.,"You are more experienced with GitHub than me, plus it's your project we're talking about, so the rules are yours to decide! I only care that the result be as perfect as possible.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,212,2017-09-22T15:49:41Z,2017-09-23T19:50:14Z,2017-09-23T20:39:59Z,MERGED,True,4,4,3,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/212,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/212,Fixed some typo.,Fixed some typo.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,212,2017-09-22T15:49:41Z,2017-09-23T19:50:14Z,2017-09-23T20:39:59Z,MERGED,True,4,4,3,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/212,https://github.com/Nemris,2,https://github.com/d0k3/GodMode9/pull/212#issuecomment-331666648,Fixed some typo.,"@d0k3

I can't do that much, but I wish to contribute nonetheless.

Il 23 settembre 2017 21:50:18 CEST, d0k3 <notifications@github.com> ha scritto:
…
Merged #212.

--
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#212 (comment)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,212,2017-09-22T15:49:41Z,2017-09-23T19:50:14Z,2017-09-23T20:39:59Z,MERGED,True,4,4,3,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/212,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/212#issuecomment-331667296,Fixed some typo.,"Already took it, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,212,2017-09-22T15:49:41Z,2017-09-23T19:50:14Z,2017-09-23T20:39:59Z,MERGED,True,4,4,3,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/212,https://github.com/Nemris,4,https://github.com/d0k3/GodMode9/pull/212#issuecomment-331667333,Fixed some typo.,"To next time, then!

Il 23 settembre 2017 22:16:20 CEST, d0k3 <notifications@github.com> ha scritto:
…
Already took it, thanks!


--
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub:
#212 (comment)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,220,2017-09-25T15:14:44Z,2017-09-25T21:49:09Z,2017-09-25T21:49:09Z,MERGED,True,1,1,1,https://github.com/lucario1001,Update README.md,1,[],https://github.com/d0k3/GodMode9/pull/220,https://github.com/lucario1001,1,https://github.com/d0k3/GodMode9/pull/220,fixed a typo,fixed a typo,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,222,2017-09-25T21:52:06Z,2017-09-26T00:00:16Z,2017-09-26T16:37:53Z,MERGED,True,4,4,2,https://github.com/Nemris,Fixed variable typo,1,[],https://github.com/d0k3/GodMode9/pull/222,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/222,Replaced ERRORMSGMSG with ERRORMSG and adjusted the padding to match.,Replaced ERRORMSGMSG with ERRORMSG and adjusted the padding to match.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,222,2017-09-25T21:52:06Z,2017-09-26T00:00:16Z,2017-09-26T16:37:53Z,MERGED,True,4,4,2,https://github.com/Nemris,Fixed variable typo,1,[],https://github.com/d0k3/GodMode9/pull/222,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/222#issuecomment-332047059,Replaced ERRORMSGMSG with ERRORMSG and adjusted the padding to match.,Fixes #221,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,231,2017-10-04T16:21:36Z,2017-10-05T00:00:41Z,2017-10-05T00:00:41Z,CLOSED,False,22,3,2,https://github.com/RShadowhand,SALTMODE,1,[],https://github.com/d0k3/GodMode9/pull/231,https://github.com/RShadowhand,1,https://github.com/d0k3/GodMode9/pull/231,"This mode changes GM9 bootloader mode to behave more like an actual bootloader.
Changes:

No splash.
No 500ms delay before boot for splash.
Loading process won't stop because you held a key (other than START), making it possible to get into Luma's config menu in the off chance you need to change something).
Hold START to get to the menu, instead of R+LEFT.

Compile using make firm SALTMODE=1","This mode changes GM9 bootloader mode to behave more like an actual bootloader.
Changes:

No splash.
No 500ms delay before boot for splash.
Loading process won't stop because you held a key (other than START), making it possible to get into Luma's config menu in the off chance you need to change something).
Hold START to get to the menu, instead of R+LEFT.

Compile using make firm SALTMODE=1",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,231,2017-10-04T16:21:36Z,2017-10-05T00:00:41Z,2017-10-05T00:00:41Z,CLOSED,False,22,3,2,https://github.com/RShadowhand,SALTMODE,1,[],https://github.com/d0k3/GodMode9/pull/231,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/231#issuecomment-334322786,"This mode changes GM9 bootloader mode to behave more like an actual bootloader.
Changes:

No splash.
No 500ms delay before boot for splash.
Loading process won't stop because you held a key (other than START), making it possible to get into Luma's config menu in the off chance you need to change something).
Hold START to get to the menu, instead of R+LEFT.

Compile using make firm SALTMODE=1",Taken over locally (with some small adaptions),True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,232,2017-10-07T08:46:11Z,2017-10-09T11:26:29Z,2017-10-09T11:30:18Z,CLOSED,False,277,2,6,https://github.com/windows-server-2003,add 'unzip' command,1,[],https://github.com/d0k3/GodMode9/pull/232,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/232,"I added ""unzip"" command for extracting noncompressed zip file.
Please correct my bad English in source.
And also I couldn't add zip extraction via file handler menu. so if you can, please add. (sorry...)","I added ""unzip"" command for extracting noncompressed zip file.
Please correct my bad English in source.
And also I couldn't add zip extraction via file handler menu. so if you can, please add. (sorry...)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,232,2017-10-07T08:46:11Z,2017-10-09T11:26:29Z,2017-10-09T11:30:18Z,CLOSED,False,277,2,6,https://github.com/windows-server-2003,add 'unzip' command,1,[],https://github.com/d0k3/GodMode9/pull/232,https://github.com/windows-server-2003,2,https://github.com/d0k3/GodMode9/pull/232#issuecomment-334934158,"I added ""unzip"" command for extracting noncompressed zip file.
Please correct my bad English in source.
And also I couldn't add zip extraction via file handler menu. so if you can, please add. (sorry...)","TravisCI building failed, but don't mind. The problem was the server's downloading and built successed in local.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,232,2017-10-07T08:46:11Z,2017-10-09T11:26:29Z,2017-10-09T11:30:18Z,CLOSED,False,277,2,6,https://github.com/windows-server-2003,add 'unzip' command,1,[],https://github.com/d0k3/GodMode9/pull/232,https://github.com/windows-server-2003,3,https://github.com/d0k3/GodMode9/pull/232#issuecomment-335130622,"I added ""unzip"" command for extracting noncompressed zip file.
Please correct my bad English in source.
And also I couldn't add zip extraction via file handler menu. so if you can, please add. (sorry...)","Close with this conversation
https://gbatemp.net/threads/release-godmode9-all-access-file-browser-for-the-3ds.420027/page-33",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,235,2017-10-12T20:32:18Z,2017-10-12T22:46:57Z,2017-10-13T16:41:13Z,CLOSED,False,6,6,1,https://github.com/Nemris,Fixed a bunch of typos in the README,6,[],https://github.com/d0k3/GodMode9/pull/235,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/235,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,235,2017-10-12T20:32:18Z,2017-10-12T22:46:57Z,2017-10-13T16:41:13Z,CLOSED,False,6,6,1,https://github.com/Nemris,Fixed a bunch of typos in the README,6,[],https://github.com/d0k3/GodMode9/pull/235,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/235#issuecomment-336299806,,"Taken over locally. One thing, though - before you do a pull request, make sure your local source is up to date with master. Otherwise I need to some git voodoo to not mess up the commit history.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,235,2017-10-12T20:32:18Z,2017-10-12T22:46:57Z,2017-10-13T16:41:13Z,CLOSED,False,6,6,1,https://github.com/Nemris,Fixed a bunch of typos in the README,6,[],https://github.com/d0k3/GodMode9/pull/235,https://github.com/Nemris,3,https://github.com/d0k3/GodMode9/pull/235#issuecomment-336501910,,"@d0k3 I used git rebase to update my local fork after fetching your latest source, and pushing back changes to remote. git diff said that there were no differences between our master branches. Is there anything more to do, in order to ensure that I have an exact clone?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,235,2017-10-12T20:32:18Z,2017-10-12T22:46:57Z,2017-10-13T16:41:13Z,CLOSED,False,6,6,1,https://github.com/Nemris,Fixed a bunch of typos in the README,6,[],https://github.com/d0k3/GodMode9/pull/235,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/235#issuecomment-336504198,,"It's best you do you fresh clone of the repo, at least everytime after I merged in your changes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,235,2017-10-12T20:32:18Z,2017-10-12T22:46:57Z,2017-10-13T16:41:13Z,CLOSED,False,6,6,1,https://github.com/Nemris,Fixed a bunch of typos in the README,6,[],https://github.com/d0k3/GodMode9/pull/235,https://github.com/Nemris,5,https://github.com/d0k3/GodMode9/pull/235#issuecomment-336504886,,"Will do, thanks.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,246,2017-10-20T02:28:30Z,2017-10-21T16:48:01Z,2017-10-21T16:48:01Z,MERGED,True,7,2,2,https://github.com/JoshuaDoes,Organize and edit battery color scheme,2,[],https://github.com/d0k3/GodMode9/pull/246,https://github.com/JoshuaDoes,1,https://github.com/d0k3/GodMode9/pull/246,"Separates the battery colors into separate values in ""ui.h"" and edits them to be easier on the eyes (at least in my opinion). Colors are open for improvements.","Separates the battery colors into separate values in ""ui.h"" and edits them to be easier on the eyes (at least in my opinion). Colors are open for improvements.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,246,2017-10-20T02:28:30Z,2017-10-21T16:48:01Z,2017-10-21T16:48:01Z,MERGED,True,7,2,2,https://github.com/JoshuaDoes,Organize and edit battery color scheme,2,[],https://github.com/d0k3/GodMode9/pull/246,https://github.com/JoshuaDoes,2,https://github.com/d0k3/GodMode9/pull/246#issuecomment-338089247,"Separates the battery colors into separate values in ""ui.h"" and edits them to be easier on the eyes (at least in my opinion). Colors are open for improvements.","Uhh, I made a typo when editing into the latest commit, one moment",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,246,2017-10-20T02:28:30Z,2017-10-21T16:48:01Z,2017-10-21T16:48:01Z,MERGED,True,7,2,2,https://github.com/JoshuaDoes,Organize and edit battery color scheme,2,[],https://github.com/d0k3/GodMode9/pull/246,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/246#issuecomment-338244516,"Separates the battery colors into separate values in ""ui.h"" and edits them to be easier on the eyes (at least in my opinion). Colors are open for improvements.","Okay, I had a first look, and by now I'm still unsure. The green color looks a bit muddy.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,246,2017-10-20T02:28:30Z,2017-10-21T16:48:01Z,2017-10-21T16:48:01Z,MERGED,True,7,2,2,https://github.com/JoshuaDoes,Organize and edit battery color scheme,2,[],https://github.com/d0k3/GodMode9/pull/246,https://github.com/JoshuaDoes,4,https://github.com/d0k3/GodMode9/pull/246#issuecomment-338376721,"Separates the battery colors into separate values in ""ui.h"" and edits them to be easier on the eyes (at least in my opinion). Colors are open for improvements.","It could definitely use some fine-tuning. I'll work on a better green tomorrow, I have alternatives that might feel nicer",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,247,2017-10-22T07:19:32Z,2017-10-23T21:48:42Z,2017-10-23T21:48:43Z,CLOSED,False,7,2,2,https://github.com/JoshuaDoes,Better green for battery indicator,5,[],https://github.com/d0k3/GodMode9/pull/247,https://github.com/JoshuaDoes,1,https://github.com/d0k3/GodMode9/pull/247,"Got a good green this time around, credits to @ClammyMantis488 for helping decide on one.","Got a good green this time around, credits to @ClammyMantis488 for helping decide on one.",True,"{'THUMBS_UP': ['https://github.com/ValiantStorm', 'https://github.com/JoshuaDoes']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,247,2017-10-22T07:19:32Z,2017-10-23T21:48:42Z,2017-10-23T21:48:43Z,CLOSED,False,7,2,2,https://github.com/JoshuaDoes,Better green for battery indicator,5,[],https://github.com/d0k3/GodMode9/pull/247,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/247#issuecomment-338806920,"Got a good green this time around, credits to @ClammyMantis488 for helping decide on one.",Taken over locally (and rebased). Thank you!,True,{'THUMBS_UP': ['https://github.com/JoshuaDoes']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,249,2017-10-25T14:18:15Z,2017-10-27T17:45:21Z,2017-10-27T17:45:21Z,CLOSED,False,34,2,2,https://github.com/figgyc,Added REGION variable for scripting (fix #243),1,[],https://github.com/d0k3/GodMode9/pull/249,https://github.com/figgyc,1,https://github.com/d0k3/GodMode9/pull/249,I tested it and it worked. Fairly simple change.,I tested it and it worked. Fairly simple change.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,249,2017-10-25T14:18:15Z,2017-10-27T17:45:21Z,2017-10-27T17:45:21Z,CLOSED,False,34,2,2,https://github.com/figgyc,Added REGION variable for scripting (fix #243),1,[],https://github.com/d0k3/GodMode9/pull/249,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/249#issuecomment-340038638,I tested it and it worked. Fairly simple change.,"While your pull request is good code, I had to change some stuff, to prevent duplicate code and bloat. The SecureInfo file is already loaded for the SERIAL env var, a little above, and it's better region is handled in the same place.
Anyways, taken over locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/angelsl,1,https://github.com/d0k3/GodMode9/pull/257,Took me a while. Sorry about that.,Took me a while. Sorry about that.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/angelsl,2,https://github.com/d0k3/GodMode9/pull/257#issuecomment-341895711,Took me a while. Sorry about that.,"Hold on, don't merge yet.
Need to not show the attribute functionality for virtual files.
Also, thoughts on the interface itself?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/angelsl,3,https://github.com/d0k3/GodMode9/pull/257#issuecomment-341911252,Took me a while. Sorry about that.,"Okay. It no longer shows options to change on virtual files (and directories).
It works on directories now too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/257#issuecomment-342021645,Took me a while. Sorry about that.,"Alright, interface looks okay. You seem to have broken something, though. Check long file / dirnames.
The other pull request I'll take.
EDIT: Also, better to just store the changes locally and write upon exit of the dialogue if there are changes. This reduces the number of writes. Maybe even offer cancel to ignore any changes.
And... just a tidbit, I think we should leave it as is. The read-only attribute for dirs has practically no effect in FAT.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/angelsl,5,https://github.com/d0k3/GodMode9/pull/257#issuecomment-342173443,Took me a while. Sorry about that.,"Alright, updated.
The menu is only for files now. Attributes are set on exit, and the user is asked to confirm the changes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/257#issuecomment-342318343,Took me a while. Sorry about that.,"Okay, I'm nitpicking here, but, two things...

(press arrow keys to change attributes) -> make this short, this line shouldn't be longer than the above block ([arrow symbols] to change attributes) would be enough (whereas [arrow symbols] are the actual arrow symbols).
The confirmation dialogue will look bad for actual long filenames - gotta change that. Tbh, to me, that dialogue seems like overkill anyways. It would be enough if the bottom line said (< A> to apply, < B> to cancel). The bottom line could change after a change is detected. Maybe better to have it like that from the beginning, unsure.

Anyways, look into that, and I'll take it over.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,257,2017-11-04T09:34:28Z,2017-11-07T23:54:24Z,2018-10-16T07:58:03Z,CLOSED,False,97,15,3,https://github.com/angelsl,Add way to change file attributes,1,[],https://github.com/d0k3/GodMode9/pull/257,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/257#issuecomment-342663648,Took me a while. Sorry about that.,"Alright, I took it over locally, and added the two mentioned changes myself. I hope that's okay.
Normally I wouldn't push stuff that quick, but there are some bigger file reorganizations underway, so I wanted this pull request through before that happens.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/angelsl,1,https://github.com/d0k3/GodMode9/pull/258,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/angelsl,2,https://github.com/d0k3/GodMode9/pull/258#issuecomment-341914518,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","Hmm, I think there's a better alternative to this.. not sure.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/urherenow,3,https://github.com/d0k3/GodMode9/pull/258#issuecomment-341915920,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","With an empty adapter inserted, will it continue to boot from firm if something is installed there, or will it still hang?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/urherenow,4,https://github.com/d0k3/GodMode9/pull/258#issuecomment-341915957,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","For example, you installed luma to firm so it boots without an SD.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/angelsl,5,https://github.com/d0k3/GodMode9/pull/258#issuecomment-341915969,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","With an empty adapter inserted, will it continue to boot from firm if something is installed there, or will it still hang?

It will boot from FIRM0.
But if FIRM0 is something else that tries to mount SD and it doesn't have a time out, then that will hang.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/angelsl,6,https://github.com/d0k3/GodMode9/pull/258#issuecomment-341916177,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","Hmm, I think there's a better alternative to this.. not sure.

OK, I tried this and it doesn't work too well (GM9 calls things that try to init SD three times before it hits the bootloader menu, so we end up having to abort thrice).
The timeout here needs to be adjusted too, right now it's a bit long because the SD takes a bit longer to init from cold boot.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/258#issuecomment-342021821,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","Taken over. Given that this solves a very specific problem (one that almost falls under the ""vandalism"" category), and has no effect otherwise this is good enough. Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/fox8091,8,https://github.com/d0k3/GodMode9/pull/258#issuecomment-342022135,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","@d0k3 To be fair, I've used this before on an O3DS to allow me to leave the adapter in and just remove the microSD as needed. (Less wear on the 3DS SD reader, more on the easily replaceable adapter.)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,258,2017-11-04T17:15:49Z,2017-11-06T01:08:13Z,2018-10-16T07:58:03Z,CLOSED,False,8,2,1,https://github.com/angelsl,Timeout SD init after about a second,1,[],https://github.com/d0k3/GodMode9/pull/258,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/258#issuecomment-342026899,"This fixes the hang on boot if there is an empty microSD to SD adapter inserted, or otherwise faulty SD card that won't complete initialisation properly.
(Now GM9 won't hang, but the FIRM after GM9 will hang... sigh why isn't there a common library for this ARM9 stuff yet)","Yup, that's okay. :)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/261,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342457191,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Okay, doesn't look bad, I'm still hesitant to take this - this is critical stuff, so I need to fully understand how this works first.
Can you maybe give me a quick walkthrough of how this works? Also maybe some scripting examples?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342655252,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Okay, after a slightly more thorough look...
static char lbl_table [_ARG_MAX_LEN + 1] [_MAX_LABELS];  // label table to save labels hisotry
I'd rather not do stuff like that ^ that's a shitton of memory you're trying to get there. It may not even be required to save this anywhere... you can just search for a label on demand and error out if not found. With the whole script being in memory and not above 1MB, that won't take too long. It would also make the number of addditions to the source code smaller and you wouldn't have to specify a max number.
Btw, when I planned labels, I thought of something like this:
@Label
The label command works, too, of course.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342664316,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","... aaand, just so you got notice in advance. There are some bigger file reorganizations underway, and there may be a merge conflict for your pull request afterwards.
That's nothing to worry about actually, if that happens you can just copy your scripting.c to the new location and reapply the commit to the new base.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,5,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342767412,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Wait a while. I'm trying to change label format to ""@Label"".",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342789133,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Already looks a lot better!
Two questions: Why are static vars reset on line 1 (why not just before running the script?) and how is goto within if handled (if nesting).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,7,https://github.com/d0k3/GodMode9/pull/261#issuecomment-342804019,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Because their scope is only the function where they called(run_line())



like this ?
if test test
echo ""0""
else
label label
echo ""1""
end
goto label
This script will echo ""0"" then ""1"" then ""1"" ...(infinite loop)
Force don't skip after jump into ""if"" and after jump, everything will work normally
I found another issue.The script like below should exit with syntax error(duplicate ""else""). but won't.
I can fix this, but for some reason, I can't use PC and git now and I don't know when restored.Sorry. I'll try to use git on Android.(yes, rooted)
goto label1
if test test
else
label label2
else
end
label label1
goto label2",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,8,https://github.com/d0k3/GodMode9/pull/261#issuecomment-343070589,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Fixed. but as I said, I can't build by myself now so if there are any bugs, sorry.
Used git on android(no root needed)
Quick description about the code attatched
Quick.txt",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/261#issuecomment-343116700,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","In any case, we'll wait until you can properly test. No merging before that. In the meantime, others can test, too (thanks to Kazuma77 of gbatemp fame here), and I can review the code.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,10,https://github.com/d0k3/GodMode9/pull/261#issuecomment-343152016,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","OK, I'll check a lot.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/261#issuecomment-343753136,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Alright, just a quick note, regarding radio silence. Once you have looked it over, get back, and I'll have another thorough look through the changes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,12,https://github.com/d0k3/GodMode9/pull/261#issuecomment-345430616,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Fixed the merge conflict.
I updated my branch ""master"" first, then fetched and merged ""origin/master"" into ""if-goto""",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,13,https://github.com/d0k3/GodMode9/pull/261#issuecomment-345874596,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Okay, after a thorough review. Being honest here, I still don't understand the code in full.
First of all - that code is still a bit hacky, and that in turn will make later additions (f.e. like a for X in 0:/*.bin) a lot harder than they ought to be (not that it would be too easy one way or another). run_line was only ever intended to process one unit of script code, with your additions the function is allowed to set the script pointer and besides that, does a lot more than just process one unit. I see that there is some trouble in processing if and the condition behind, of course. So, just a few ideas. Some of them might not be good and I may be missing something, but everything can be discussed.
The search for a label should be done in a separate function, controlled by a global variable (the variable controlling it is already global, cause static == global). In run_cmd, everything that should be done for goto is set that global variable (also handle any if nesting related stuff, of course), everything that should be done for label is skip and return true. If that global var is set, another function should reposition the pointer and reset that global var. In the same vein - you were right. A label keyword fits the current structure much better than the @ style labels I suggested.
Now, as for if, else and end control flow - I like what you did there with the if nesting. I do stumble over this, though: { CMD_ID_IF      , ""if""      , 2, 0 }. Why is the max arg count here 2? If it's because most cmds take one argument: not all do. A solution for this would be putting the if condition into brackets and make the line parser recognize this as one argument. Might clash with some stuff, though, and we want to keep the error potential low. So, better not.
A different approach to this: make if have one argument. An if at the beginning of the line then has to be recognized specifically by run_line (that's the only one that absolutely has to). If if is recognized, you first make run_line execute what's behind the if silently and recursively (by calling itself with a changed line_start). Then, depending on the result, you make run_cmd for CMD_ID_IF run with one argument, which is either true or false (or anything you choose, like 0 and 1). This way, you can process stuff in run_cmd.
As for the search for the next else / end on an if false - that can be handled similarily to the search for a label, outside of run_line. Same for the search for end after an else in case of an if true. You can, in fact, opt to ignore errors in parts of the script that don't get executed (you already do that in part).
tl;dr: use global vars and control the flow in external functions. Use run_cmd for command handling. Don't overload run_line. And get back about stuff you disagree with and/or need clarification about.
EDIT: Also, the branch I did today, that was just so I have a one commit overview of what has changed. You may ignore that and add any of your further developments to your fork in it's current state, or you can reclone and continue from my branch, whatever you prefer.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,14,https://github.com/d0k3/GodMode9/pull/261#issuecomment-346327635,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","I understand.
Why is having two args bad? I think there are no reason to make ""if"" has one arg.
Also, I think ""@"" is better than ""label"". because special symbols used as special means(labels) makes scripts easy to read.


still a bit hacky, searching for the next else/end...


so I should make a var ""skip_state"" (0 if not skipping, 1 if ""if"" false and skipping until ""else"" or ""end"" , 2 if ""if"" true) and skipping until ""end"" and control it in run_cmd() ?


control flow in external function


Should I make a function similer to ""run_cmd()""(more simple) for searching a label and leave work like calling parse_line() to run_line()? or do all stuff(includes calling parse_line()) in the external function?


Edit


how can I modify commits on the branch which opening PR? If I try to push rebased branch in local to the remote one, I get an error like ""push rejected(your local branch is behind of the remote one)"" ,so I had to delete my branch once, then push. But deleting the branch will close the PR(I heared), anyway I think there are some better ways to do that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,15,https://github.com/d0k3/GodMode9/pull/261#issuecomment-346335940,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","I modified your comment above a little, just so it is better readable.
Well, why does if need two args? The way I understand it (being honest, I don't fully understand your code here), it's if [argument], where [argument] is either true or false. [argument] has to be specifically handled by run_line(), of course, possibly via recursion as I suggested above. You'd just run_line again (from within run_line), with line_start moved to after the if keyword.
I trust your judgement on most of that stuff, I just dislike these hacks in run_line(). run_line() has to be altered to handle if, but that's about it. It also should not be allowed to reposition the script pointer. run_cmd could handle these control flow commands via setting the global vars that control the flow (like, storing the label to search for). Neither run_cmd nor run_line should be allowed to reposition the script pointer.
I think you don't even have to change that much:

goto can be handled as a standard cmd, run_cmd sets the global label var, which is empty unless we're searching for a label. No need to do anything in run_line for it.
Same for else and end here - handle it in run_cmd. ifis an exception here, but only in that you have to make run_line recognize the condition and get the result before moving on to run_cmd (as I described above).
The if condition can be handled recursively as described above.
In run_cmd, if and else could alter some global vars that would tell another function were to go next or what to search for. Of course, it also makes sense to handle the if nesting in run_cmd. Maybe I forgot somethign considering if nesting here, though.

And yes, I suggest you make a separate function that searches for the label on goto. Possibly also a separate one that handles if based script pointer changes (search for else / end on an ""if false"", f.e.).
The advantage of doing stuff this way is that the code in general will be easier to understand. run_line would not do more than you'd expect from the name (who would expect that to reposition the pointer?), and you'd have smaller, easier understandable units of code in general.
As for your local branch - git is flaky sometimes. If the remote branch is up to date with the local one, just delete the local one and reclone. If the local one is farther ahead, store your changes somewhere locally, reclone, and merge your changes back in via some other means. On Windows I use WinMerge.
Forgot:
I'm okay with the @ style labels, but remove @ from the command list then. Whitespaces should not be allowed between @ and the label.
... and one more edit...
I understand that their may be some complications caused by if nesting when repositioning the pointer. Maybe handle the if nesting in a separate function, too? Tbh, it is not advisable to make a complicated ìf` nesting structure inside a GM9 script. Too easy to fuck up here and the end result being something unexpected.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,16,https://github.com/d0k3/GodMode9/pull/261#issuecomment-346535350,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","why does ""if"" need two args

My description was not enough.(sorry, there were no description) The ""if""command is similer to ""ifeq"" and the condition is matching the two args. I won't add ""true"" or ""false"" because adding them has no meaning. For now, the only type of vars in GM9 is String and I think there are no more conditions should be added. I'm thinking to change ""if"" to ""ifeq"".

control flow in external function

so I can make some changes in ExecuteGM9Script() ? To jump somewere, the external function must get the pointer of ""line_end"" from somewere.
note:I have final exams in 2 weeks and I can't use my PC. sorry but please leave this PR until I finish them. I can use my tablet and comment to Github.
The last commit is temporary and incomplete. Don't mind.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,17,https://github.com/d0k3/GodMode9/pull/261#issuecomment-346594614,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Yup, I think it's best to let ExecuteGM9Script() handle script pointer repositioning via an external function. I added some info on GBAtemp, cause I want Kazuma77's opinion - that's okay, too, right, you can access GBAtemp?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,18,https://github.com/d0k3/GodMode9/pull/261#issuecomment-346823206,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","GBATemp, yes, we need ""if"" nesting. Writing scripts without ""if"" nesting is also complexity. There are some problems for ""if"" nesting and ""for"" but possible. I should change the ""if""'s condition to like Linux's one.
The script preview return once to the start of the line when start to search a label. It's unnatural so I disabled (don't update) preview while jumping.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,19,https://github.com/d0k3/GodMode9/pull/261#issuecomment-347159701,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.",@windows-server-2003 - let me know once I should review the code again. Thanks for all the effort you're putting in!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,20,https://github.com/d0k3/GodMode9/pull/261#issuecomment-347376569,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Okay, I had a quick look. Before we continue - make sure you concentrate on your exams, alright?
Now, the label handling - that's still much too complicated. parse_line() does not even need to know what a label is, and we don't need no max label count.
All you have to do for labels in parse_line() is change this line:
if ((cmd >= line_end) || (*cmd == '#')) return true; // empty line or comment
to this:
if ((cmd >= line_end) || (*cmd == '#') || (*cmd == '@')) return true; // empty line or comment or label
Also, search_label - I wouldn't allow it to jump right into a conditional (if) block. See also here:
https://stackoverflow.com/questions/8481558/windows-batch-goto-within-if-block-behaves-very-strangely
... and it's similarily with other kinds of shells.
It's better to just let goto reset the if nesting lvl to zero, then search for a label, then just assume this label is outside of any if conditions (of course, output an error if we encounter a stray else or end). Thus, search_label could work much simpler (pseudo code here):
for each line starting at the first:
skip all whitespaces
if (end_of_line or curr_char != '@') continue
found if label matches
I think, you could also simplify the conditional skipper code. I'm unsure if that's what search_command is for. In any case, on any if inside a conditional skipped block, all you have to do is increase the count, and decrease the count if an end is encountered. If the count reaches 0, you reached the end of the data you had to skip (hope that's understandable). If the count never reaches 0 - well, bad luck, the script editor fucked up. All you do is output an error, return as unsuccesful and leave it at that.
Of course the handling for an else is a little bit different, but nothing too special. You could do all that (skipping) stuff in a simple small function.
In fact, a lot less global vars may be required if you forbid goto to inside a conditional block (which you totally should!) (goto from inside a conditional block is fine, of course) and just keep the current level inside a global var. Maybe the current level is almost all you need? Do we even need to limit the level of if nesting then?
In general, keep your changes much, much more simple and more contained. You don't have to catch all mistakes script editors may make. If they do fuck up, well, let them fuck up. Catch extraneous end and else, but for everything else, leave it to the script devs.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,21,https://github.com/d0k3/GodMode9/pull/261#issuecomment-350626920,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","I disabled showing error ""'end' expected"" because I can catch it only if skipping conditional block.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,22,https://github.com/d0k3/GodMode9/pull/261#issuecomment-350669880,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","About global vars

u32 ifcnt

Count of if nesting. increases at 'if's and decreases at 'end's unless you're jumping to a label from 'goto'

u32 ifcnt_skipped

increases at skipped 'if's and decreases at skipped 'end's and reset to 0 on finishing skipping/starting skipping(for safety, double-reset it)
example :
if chk test test1 # fail
　## 0
　if chk test test
　　## 1
　end
　##0
end # stop skipping

It won't be used if we aren't skipping. On 'end' and else', if skipping and it is 0, it will stop skipping.

u8 skip

0 -> not skipping
1 -> 'if' with failed condition command. From 'if' to 'else' or 'end'
2 -> 'if' with succeed one. From 'else' to 'end'
3 -> searching a label. Set in run_cmd() by 'goto' and used to decide to run search_label() in ExecuteGM9Script().  Reset if found the label.

bool syntax_error

One to know that a syntax error occurred in run_cmd() and should disable -o and -s in ExecuteGM9Script().
I know this way is not good. so If you have any better ideas to disable -o & -s teach me!

bool running_cond

True if running a command as a condition of 'if'.
This is to prevent infinite recursive 'if' condition running. infinite recursive(""if if if..."") makes no sense and may lead to a bug or crash cause memory overflow.

bool if_cond_res

The result of a command as a condition of 'if'.
set in run_line()(at calling itself) and used in run_cmd()

char findlabel[513]

The name of finding label.
findlabel[0] == '\000' means not jumping now.
Any opinion to this ?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,23,https://github.com/d0k3/GodMode9/pull/261#issuecomment-350773248,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Dammit. Okay, i fucked up a little, don't worry too much about this being closed now and not merged. I'll review later today!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/d0k3,24,https://github.com/d0k3/GodMode9/pull/261#issuecomment-350776811,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Alright, I merged and squashed your commits into my if-else branch. Also had a first look already and I think I'll merge (properly, not like my messup a few minutes ago) that today. Already looks a lot better!
EDIT: In the meantime, can we continue the discussion on temp? If you should have anything else to add from here, it may be best if you reclone from the if-else branch.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,261,2017-11-07T09:08:19Z,2017-12-11T16:11:21Z,2017-12-12T00:08:31Z,MERGED,True,239,8,1,https://github.com/windows-server-2003,"add ""if"", ""else"", ""end"", ""goto"", ""label"" command",22,[],https://github.com/d0k3/GodMode9/pull/261,https://github.com/windows-server-2003,25,https://github.com/d0k3/GodMode9/pull/261#issuecomment-350894944,"The second commit includes the changes since you had a quick look.
solves #129
Edit
if I'm using bad English in the comments or error messages, please correct them.
I didn't add description in HelloScript.gm9 because if I write, it will not understandable.","Thank you!
Yes, I'm checking it too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,263,2017-11-11T19:17:30Z,2017-11-11T19:33:53Z,2018-10-16T07:58:02Z,CLOSED,False,17,3,1,https://github.com/angelsl,Put the SD init timeout behind a compile flag,1,[],https://github.com/d0k3/GodMode9/pull/263,https://github.com/angelsl,1,https://github.com/d0k3/GodMode9/pull/263,Fixes #262,Fixes #262,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,263,2017-11-11T19:17:30Z,2017-11-11T19:33:53Z,2018-10-16T07:58:02Z,CLOSED,False,17,3,1,https://github.com/angelsl,Put the SD init timeout behind a compile flag,1,[],https://github.com/d0k3/GodMode9/pull/263,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/263#issuecomment-343688675,Fixes #262,"Taken it over, new_make2 branch, which will make it's way into master soon.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,266,2017-11-22T21:17:27Z,2017-11-22T21:47:43Z,2017-11-22T22:07:49Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed typo and improved readability,1,[],https://github.com/d0k3/GodMode9/pull/266,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/266,"P.S.: I reworked my fork updating workflow, so there shouldn't be any need for git voodoo on your part.","P.S.: I reworked my fork updating workflow, so there shouldn't be any need for git voodoo on your part.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,266,2017-11-22T21:17:27Z,2017-11-22T21:47:43Z,2017-11-22T22:07:49Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed typo and improved readability,1,[],https://github.com/d0k3/GodMode9/pull/266,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/266#issuecomment-346482017,"P.S.: I reworked my fork updating workflow, so there shouldn't be any need for git voodoo on your part.","Taken it over locally. Thanks, appreciated!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,268,2017-11-26T02:18:50Z,2017-11-27T00:32:44Z,2017-11-27T00:32:44Z,CLOSED,False,5,4,4,https://github.com/profi200,Fixed some bugs.,1,[],https://github.com/d0k3/GodMode9/pull/268,https://github.com/profi200,1,https://github.com/d0k3/GodMode9/pull/268,The main bug was not initializing PXI on ARM9. This can break GodMode9 if launched from certain chainloaders.,The main bug was not initializing PXI on ARM9. This can break GodMode9 if launched from certain chainloaders.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,268,2017-11-26T02:18:50Z,2017-11-27T00:32:44Z,2017-11-27T00:32:44Z,CLOSED,False,5,4,4,https://github.com/profi200,Fixed some bugs.,1,[],https://github.com/d0k3/GodMode9/pull/268,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/268#issuecomment-347051916,The main bug was not initializing PXI on ARM9. This can break GodMode9 if launched from certain chainloaders.,"Merged locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,278,2017-12-19T04:17:57Z,2017-12-25T00:57:27Z,2017-12-25T00:57:27Z,CLOSED,False,18,2,1,https://github.com/AuroraWright,Fix building the tar archive on macOS (and probably BSD),5,[],https://github.com/d0k3/GodMode9/pull/278,https://github.com/AuroraWright,1,https://github.com/d0k3/GodMode9/pull/278,"Tested with GNU tar (included in Linux distros) and BSD tar (included in macOS/BSD).
""--disable-copyfile"" is macOS specific and causes an error on GNU tar so it's only added if macOS is detected","Tested with GNU tar (included in Linux distros) and BSD tar (included in macOS/BSD).
""--disable-copyfile"" is macOS specific and causes an error on GNU tar so it's only added if macOS is detected",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,278,2017-12-19T04:17:57Z,2017-12-25T00:57:27Z,2017-12-25T00:57:27Z,CLOSED,False,18,2,1,https://github.com/AuroraWright,Fix building the tar archive on macOS (and probably BSD),5,[],https://github.com/d0k3/GodMode9/pull/278,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/278#issuecomment-352771297,"Tested with GNU tar (included in Linux distros) and BSD tar (included in macOS/BSD).
""--disable-copyfile"" is macOS specific and causes an error on GNU tar so it's only added if macOS is detected","To be honest, I'm unsure. ustar format is not a good idea, cause this way your user and group name will be included in the file. v7 is the only format that doesn't do this. Also, the ls on the tar command is there so that a missing file (like no README.md or no slash) doesn't cause the build to fail. I think the way it is now, you will have a failed build with a missing readme or splash.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,278,2017-12-19T04:17:57Z,2017-12-25T00:57:27Z,2017-12-25T00:57:27Z,CLOSED,False,18,2,1,https://github.com/AuroraWright,Fix building the tar archive on macOS (and probably BSD),5,[],https://github.com/d0k3/GodMode9/pull/278,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/278#issuecomment-352891065,"Tested with GNU tar (included in Linux distros) and BSD tar (included in macOS/BSD).
""--disable-copyfile"" is macOS specific and causes an error on GNU tar so it's only added if macOS is detected","More problems... this one will not allow to add dirs from data/ to the tar, however dirs are required (f.e. to add a scripts/ dir to the virtual tar). it will just create a ""flat"" archive.
Is ustar the only format available on Mac? Cause, as I said, this one leaks personal info which many users may not want. Maybe it would be a better idea to create a TAR variable and point that to the one dkA installed? On Windows that is C:\devkitPro\msys\bin, and assuming dkA is available is a safe bet. I also think this bloats the Makefile a bit, but this is a minor issue and perfectly solvable.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,278,2017-12-19T04:17:57Z,2017-12-25T00:57:27Z,2017-12-25T00:57:27Z,CLOSED,False,18,2,1,https://github.com/AuroraWright,Fix building the tar archive on macOS (and probably BSD),5,[],https://github.com/d0k3/GodMode9/pull/278,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/278#issuecomment-353810818,"Tested with GNU tar (included in Linux distros) and BSD tar (included in macOS/BSD).
""--disable-copyfile"" is macOS specific and causes an error on GNU tar so it's only added if macOS is detected","Okay, thanks a lot for this one. @ihaveamac did provide a Python script that further streamlined this process, thus solving the problem on all systems. I took his pull request (which wouldn't have happened without your work), so I'm closing this now.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,279,2017-12-20T03:43:21Z,2017-12-21T22:31:13Z,2018-02-03T04:06:26Z,CLOSED,False,20,0,1,https://github.com/windows-server-2003,Scripting: Added ssplit command,1,[],https://github.com/d0k3/GodMode9/pull/279,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/279,"A command to cut string at a char
ssplit [-b | --before] [-f | --first] VAR ""string"" ""c""
Example
set PATH ""0:/path1/path2/file.txt""

ssplit STR $[PATH] ""/""
echo $[STR] # file.txt

ssplit -b STR $[PATH] ""/""
echo $[STR] # 0:/path1/path2

ssplit -f STR $[PATH] ""/""
echo $[STR] # path1/path2/file.txt

ssplit -b -f STR $[PATH] ""/""
echo $[STR] # 0:


## errors
ssplit -o STR $[PATH] ""b"" # not found
echo $[STR] # 0: (keeps the last string)

ssplit -o STR $[PATH] ""something"" # not a char
echo $[STR] # 0: (same)","A command to cut string at a char
ssplit [-b | --before] [-f | --first] VAR ""string"" ""c""
Example
set PATH ""0:/path1/path2/file.txt""

ssplit STR $[PATH] ""/""
echo $[STR] # file.txt

ssplit -b STR $[PATH] ""/""
echo $[STR] # 0:/path1/path2

ssplit -f STR $[PATH] ""/""
echo $[STR] # path1/path2/file.txt

ssplit -b -f STR $[PATH] ""/""
echo $[STR] # 0:


## errors
ssplit -o STR $[PATH] ""b"" # not found
echo $[STR] # 0: (keeps the last string)

ssplit -o STR $[PATH] ""something"" # not a char
echo $[STR] # 0: (same)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,279,2017-12-20T03:43:21Z,2017-12-21T22:31:13Z,2018-02-03T04:06:26Z,CLOSED,False,20,0,1,https://github.com/windows-server-2003,Scripting: Added ssplit command,1,[],https://github.com/d0k3/GodMode9/pull/279,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/279#issuecomment-353074142,"A command to cut string at a char
ssplit [-b | --before] [-f | --first] VAR ""string"" ""c""
Example
set PATH ""0:/path1/path2/file.txt""

ssplit STR $[PATH] ""/""
echo $[STR] # file.txt

ssplit -b STR $[PATH] ""/""
echo $[STR] # 0:/path1/path2

ssplit -f STR $[PATH] ""/""
echo $[STR] # path1/path2/file.txt

ssplit -b -f STR $[PATH] ""/""
echo $[STR] # 0:


## errors
ssplit -o STR $[PATH] ""b"" # not found
echo $[STR] # 0: (keeps the last string)

ssplit -o STR $[PATH] ""something"" # not a char
echo $[STR] # 0: (same)",There really only is a minor problem with that - you shouldn't write directly to argv[x]. That one I'll fix myself quickly.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,279,2017-12-20T03:43:21Z,2017-12-21T22:31:13Z,2018-02-03T04:06:26Z,CLOSED,False,20,0,1,https://github.com/windows-server-2003,Scripting: Added ssplit command,1,[],https://github.com/d0k3/GodMode9/pull/279,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/279#issuecomment-353474287,"A command to cut string at a char
ssplit [-b | --before] [-f | --first] VAR ""string"" ""c""
Example
set PATH ""0:/path1/path2/file.txt""

ssplit STR $[PATH] ""/""
echo $[STR] # file.txt

ssplit -b STR $[PATH] ""/""
echo $[STR] # 0:/path1/path2

ssplit -f STR $[PATH] ""/""
echo $[STR] # path1/path2/file.txt

ssplit -b -f STR $[PATH] ""/""
echo $[STR] # 0:


## errors
ssplit -o STR $[PATH] ""b"" # not found
echo $[STR] # 0: (keeps the last string)

ssplit -o STR $[PATH] ""something"" # not a char
echo $[STR] # 0: (same)","Taken over locally as strsplit, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,280,2017-12-22T04:17:06Z,2017-12-25T00:55:37Z,2017-12-25T00:55:37Z,CLOSED,False,83,2,2,https://github.com/ihaveamac,"Add a custom Python script ""add2tar.py"" to create the vram0 tar file",1,[],https://github.com/d0k3/GodMode9/pull/280,https://github.com/ihaveamac,1,https://github.com/d0k3/GodMode9/pull/280,"This creates a tar file using the ustar format but doesn't include any extra information (user, group, date/time, etc). This works without depending on OS-level tools with different behavior (e.g. bsd-tar and gnu-tar which are not compatible with the same arguments).
add2tar.py requires Python 3.5 or later.","This creates a tar file using the ustar format but doesn't include any extra information (user, group, date/time, etc). This works without depending on OS-level tools with different behavior (e.g. bsd-tar and gnu-tar which are not compatible with the same arguments).
add2tar.py requires Python 3.5 or later.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,280,2017-12-22T04:17:06Z,2017-12-25T00:55:37Z,2017-12-25T00:55:37Z,CLOSED,False,83,2,2,https://github.com/ihaveamac,"Add a custom Python script ""add2tar.py"" to create the vram0 tar file",1,[],https://github.com/d0k3/GodMode9/pull/280,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/280#issuecomment-353810727,"This creates a tar file using the ustar format but doesn't include any extra information (user, group, date/time, etc). This works without depending on OS-level tools with different behavior (e.g. bsd-tar and gnu-tar which are not compatible with the same arguments).
add2tar.py requires Python 3.5 or later.","Merged locally. Thanks a lot, also to @AuroraWright, cause her work lead up to this!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/eiiiiix,1,https://github.com/d0k3/GodMode9/pull/305,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown","if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown",True,{'THUMBS_UP': ['https://github.com/Moire9']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/305#issuecomment-361586792,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown","Can't take this right now, big refactor in progress. Leaving it open for the time being.",True,{'THUMBS_UP': ['https://github.com/Moire9']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/eiiiiix,3,https://github.com/d0k3/GodMode9/pull/305#issuecomment-361638894,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown",alright hope the refactor foesnt mess anything up,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/Moire9,4,https://github.com/d0k3/GodMode9/pull/305#issuecomment-362460917,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown","That'll explain the lack of commits (not that that's a bad thing). Well, that's pretty cool! Hope it goes smoothly, and with less build errors than Eix encountered when he started working on EM9 again.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/eiiiiix,5,https://github.com/d0k3/GodMode9/pull/305#issuecomment-363531539,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown",@SirNapkin1334 check the hellomalloc branch https://github.com/d0k3/GodMode9/tree/hellomalloc,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/305#issuecomment-363608939,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown","Added in 7235401 - but had to rewrite it cause of the refactor.
I also added a prompt in that case. The bootloader really should be used as such (a bootloader), booting right into GM9 is just a helper construct.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,305,2018-01-29T18:44:59Z,2018-02-07T00:04:10Z,2018-02-07T19:04:34Z,CLOSED,False,3,0,1,https://github.com/eiiiiix,load gm9 if no payload is found,1,[],https://github.com/d0k3/GodMode9/pull/305,https://github.com/eiiiiix,7,https://github.com/d0k3/GodMode9/pull/305#issuecomment-363875207,"if your use the bootloader function and you dont have a payload to boot it will normally turn off
but puting that after the BootFirmHandler will load gm9 instead of shuting down
if a payload to boot is found this will not be reached because it stops the function to boot the payload
this is 99.99% safe
i just dont know what happens if a broken payload is loaded because i have no broken payload to test it with
but if a broken payload is used im pretty sure the 3ds will just shutdown","alright
but some people may keep all payloads on the sdcard and sometimes boot without it",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,1,https://github.com/d0k3/GodMode9/pull/309,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/ihaveamac,2,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363941458,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.",you should remove the other mentions of xorpads and ncchinfo.bin,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,3,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363941719,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.",Oops. Good point. I'll work on that.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,4,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363948427,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","Okay. I've finished the assignment, I fixed it. Waiting for Travis CI to pass. All should be good. I'll look it over one more time.
Yup. It's all good. Ready-to-merge.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,5,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363951512,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","Also, I found this:

See that (drvtype & DRV_XORPAD) ? ""XORpad"" : ...?
I have a feeling that that's unnecessary too, but since I can't exactly figure out what that chunk does, I'm not sure if it would be a good idea to remove it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363960921,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","The XORpad stuff is deliberately not completely removed from the code. That is so I can easily bring it back in case there are valid(!) complaints about the removal. There most likely won't be.
Anyways, thanks for this pull request, I'll look it over tomorrow!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,7,https://github.com/d0k3/GodMode9/pull/309#issuecomment-363961133,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.",@d0k3 That makes sense. I'll make sure to update and test after homework. Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/Moire9,8,https://github.com/d0k3/GodMode9/pull/309#issuecomment-364661471,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","""We need a more vindicative browserhax."" -SirNapkin's Dream
Also, vindicative is not a word (though vindicate is ).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,309,2018-02-07T23:02:56Z,2018-02-12T01:11:58Z,2018-02-13T01:17:56Z,CLOSED,False,0,3,1,https://github.com/Moire9,Remove XORPADs & NCCHINFO from README,4,[],https://github.com/d0k3/GodMode9/pull/309,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/309#issuecomment-364809094,"Since the [X:] drive was removed, there's no reason to mention it in the ReadMe.","Merged, thank you for this one!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,315,2018-02-17T23:19:38Z,2018-02-19T00:02:04Z,2018-02-22T11:56:06Z,MERGED,True,2,2,1,https://github.com/Wolfvak,Fix bootfirm version,1,[],https://github.com/d0k3/GodMode9/pull/315,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/315,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/320,The bit 7 seems to be a SD card write lock flag(0 if locked).,The bit 7 seems to be a SD card write lock flag(0 if locked).,True,{'HEART': ['https://github.com/Moire9']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/320#issuecomment-368913609,The bit 7 seems to be a SD card write lock flag(0 if locked).,"Interesting! I hadn't realized that you could write to the SD if it was locked, though it does make sense since the switch doesn't actually set anything on the inside of the SD, and there's no reason for the 3DS to include that functionality since it always has to write to the SD. But, apparently it does detect it, and ignore it? I can test it in about 9 hours.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/Moire9,3,https://github.com/d0k3/GodMode9/pull/320#issuecomment-368915887,The bit 7 seems to be a SD card write lock flag(0 if locked).,"I checked it just now on my o3DSXL, and it worked. But you know this will be entirely useless on n3/2DS(XL), since microSD doesn't have a lock unless inserted into an adapter.
Good job, though!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/Moire9,4,https://github.com/d0k3/GodMode9/pull/320#issuecomment-368946039,The bit 7 seems to be a SD card write lock flag(0 if locked).,"And, it functions as expected on the new systems (tested on n2DSXL), always allowing writes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/320#issuecomment-371314276,The bit 7 seems to be a SD card write lock flag(0 if locked).,"@windows-server-2003 - just change the two things I remarked in the review, and I'll merge it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/windows-server-2003,6,https://github.com/d0k3/GodMode9/pull/320#issuecomment-371315768,The bit 7 seems to be a SD card write lock flag(0 if locked).,I'll do it in 5 hours.,True,{'THUMBS_UP': ['https://github.com/Moire9']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/windows-server-2003,7,https://github.com/d0k3/GodMode9/pull/320#issuecomment-371360077,The bit 7 seems to be a SD card write lock flag(0 if locked).,Okay I finished it.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,320,2018-02-27T08:20:44Z,2018-03-08T23:16:15Z,2018-03-17T00:49:28Z,CLOSED,False,15,0,3,https://github.com/windows-server-2003,Forbid writing to SD if write locked,2,[],https://github.com/d0k3/GodMode9/pull/320,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/320#issuecomment-371658071,The bit 7 seems to be a SD card write lock flag(0 if locked).,"Merged locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,337,2018-04-03T03:35:22Z,2018-04-03T10:17:11Z,2018-05-23T02:54:30Z,CLOSED,False,14,4,3,https://github.com/Moire9,Add April Fools compiling,2,[],https://github.com/d0k3/GodMode9/pull/337,https://github.com/Moire9,1,https://github.com/d0k3/GodMode9/pull/337,"I thought that it would be nice to be able to compile with (or without, that'd be helpful for some people) the April Fools features. To compile with April Fools, simply run make APRIL_FOOLS=xxxx where xxxx is the year of the prank (currently the only available year is 2018 for obvious reasons). To compile without, simply run make. This shouldn't require a ton of maintenance, though it should be noted that from now on  that the VRAM0 support file naming (i.e. VRAM0_FONT_PBM) in the code must always be replaced with their LOTTERY equivalents (i.e. LOTTERY_FONT) (if you really need to be able to use VRAM0 naming than I'll see if I can figure out how to do this - this is my first C coding project, maybe my next will be doing the aforementioned). I tested compiling with and without APRIL_FOOLS and they both worked, so I would consider this a success!","I thought that it would be nice to be able to compile with (or without, that'd be helpful for some people) the April Fools features. To compile with April Fools, simply run make APRIL_FOOLS=xxxx where xxxx is the year of the prank (currently the only available year is 2018 for obvious reasons). To compile without, simply run make. This shouldn't require a ton of maintenance, though it should be noted that from now on  that the VRAM0 support file naming (i.e. VRAM0_FONT_PBM) in the code must always be replaced with their LOTTERY equivalents (i.e. LOTTERY_FONT) (if you really need to be able to use VRAM0 naming than I'll see if I can figure out how to do this - this is my first C coding project, maybe my next will be doing the aforementioned). I tested compiling with and without APRIL_FOOLS and they both worked, so I would consider this a success!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,337,2018-04-03T03:35:22Z,2018-04-03T10:17:11Z,2018-05-23T02:54:30Z,CLOSED,False,14,4,3,https://github.com/Moire9,Add April Fools compiling,2,[],https://github.com/d0k3/GodMode9/pull/337,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/337#issuecomment-378118793,"I thought that it would be nice to be able to compile with (or without, that'd be helpful for some people) the April Fools features. To compile with April Fools, simply run make APRIL_FOOLS=xxxx where xxxx is the year of the prank (currently the only available year is 2018 for obvious reasons). To compile without, simply run make. This shouldn't require a ton of maintenance, though it should be noted that from now on  that the VRAM0 support file naming (i.e. VRAM0_FONT_PBM) in the code must always be replaced with their LOTTERY equivalents (i.e. LOTTERY_FONT) (if you really need to be able to use VRAM0 naming than I'll see if I can figure out how to do this - this is my first C coding project, maybe my next will be doing the aforementioned). I tested compiling with and without APRIL_FOOLS and they both worked, so I would consider this a success!","Shoot, I realized that this should be merged into d0k3:master so it doesn't just sit there and not be used, if possible please merge it to master!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,337,2018-04-03T03:35:22Z,2018-04-03T10:17:11Z,2018-05-23T02:54:30Z,CLOSED,False,14,4,3,https://github.com/Moire9,Add April Fools compiling,2,[],https://github.com/d0k3/GodMode9/pull/337,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/337#issuecomment-378200931,"I thought that it would be nice to be able to compile with (or without, that'd be helpful for some people) the April Fools features. To compile with April Fools, simply run make APRIL_FOOLS=xxxx where xxxx is the year of the prank (currently the only available year is 2018 for obvious reasons). To compile without, simply run make. This shouldn't require a ton of maintenance, though it should be noted that from now on  that the VRAM0 support file naming (i.e. VRAM0_FONT_PBM) in the code must always be replaced with their LOTTERY equivalents (i.e. LOTTERY_FONT) (if you really need to be able to use VRAM0 naming than I'll see if I can figure out how to do this - this is my first C coding project, maybe my next will be doing the aforementioned). I tested compiling with and without APRIL_FOOLS and they both worked, so I would consider this a success!","Yeah, it's not in master, and it's not in there for a good reason. The lottery thing was a quick shot, and the implementation could be a lot better. I do understand that people actually like the bricked modes, and I might do something about that. Making the April Fools code permanent is not the right solution, though, and would hinder future progress.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,338,2018-04-04T10:12:40Z,2018-04-05T10:35:55Z,2018-04-05T10:47:19Z,CLOSED,False,12,12,4,https://github.com/windows-server-2003,Fix 'sd is write protected' after sd ejection,2,[],https://github.com/d0k3/GodMode9/pull/338,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/338,"Fixes showing 'SD is write protected' when trying to write something to SD after SD ejection without unmounting.(It should just fail)
Also fixes some typos.","Fixes showing 'SD is write protected' when trying to write something to SD after SD ejection without unmounting.(It should just fail)
Also fixes some typos.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,338,2018-04-04T10:12:40Z,2018-04-05T10:35:55Z,2018-04-05T10:47:19Z,CLOSED,False,12,12,4,https://github.com/windows-server-2003,Fix 'sd is write protected' after sd ejection,2,[],https://github.com/d0k3/GodMode9/pull/338,https://github.com/windows-server-2003,2,https://github.com/d0k3/GodMode9/pull/338#issuecomment-378783305,"Fixes showing 'SD is write protected' when trying to write something to SD after SD ejection without unmounting.(It should just fail)
Also fixes some typos.","It checks if the 5th bit is set and the 7th bit is unset.
The 7th bit seems to be unset if SD is missing or write protected and otherwise, set .
But we should not show write protection error if SD is missing(of course, trying to write to SD without SD is unexpected though)
And yes, it catches correctly.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,338,2018-04-04T10:12:40Z,2018-04-05T10:35:55Z,2018-04-05T10:47:19Z,CLOSED,False,12,12,4,https://github.com/windows-server-2003,Fix 'sd is write protected' after sd ejection,2,[],https://github.com/d0k3/GodMode9/pull/338,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/338#issuecomment-378892705,"Fixes showing 'SD is write protected' when trying to write something to SD after SD ejection without unmounting.(It should just fail)
Also fixes some typos.","Alright, merged, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/343,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380605016,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Okay, that came out of nowhere. But, the implementation looks pretty nice and clean and I see the potential of this. I personally still prefer IPS over BPS, but, ofc, I also see the downsides of IPS.
I'll still have some reviewing to do, maybe I'll have some nitpicks and ideas for improvement. Two minor nitpicks that catched my glance so far:

I'd hide more of that stuff (defines, enums) inside the .c file. In fact, I'd only expose what's actually used outside of bps.c. Personal preference here.
I wouldn't include beat/beat.h but rather edit the Makefile to include the beat path and then just include beat.h

As for using the ramdrive - I'd rather not have some files pop up there unexpectedly (for the user, that is). Script writers can choose to use the ram drive, I'd rather not have this by default. Is the heap not enough?
As for speeding this up... I may be able to help if you pinpoint the locations where there is a lot of time spent. Reading files without a buffer, f.e., is slow with the 3DS hardware. Using the heap and STD_BUFFER_SIZE is prefered.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Moire9,3,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380642133,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.",A question - why did you implement what seems to be CRC32 code? Would this (down the line) also allow us to do CRC32 checks along with SHA256 checks?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Hyarion-SS,4,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380715235,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Nice, thanks. I have no issue with IPS - it just didn't meet our needs. It would be very simple to add an IPS patcher function in case other users would want it, though.
I'll adapt it to your coding practices, no problem. I wasn't aware of STD_BUFFER_SIZE - knowing that makes heap usage much easier. However, one of the files we need to patch is larger than 1MB, and initial indications are that reading from the source file is the largest bottleneck. Holding only 1MB of the source file at a time in memory is unfortunately not an option, as the entire length needs to be accessible due to the nature of BPS. If I may suggest, I could implement an optional flag -r:
Default behavior: If source file is <1MB, use a buffer. Otherwise, display a prompt - ""patching this file will likely be slow, do you wish to use the ramdrive?"" If accepted, switch to -r behavior. If denied, fall back to direct reads.
-r behavior: Use the heap for <1MB source files, but instead attempt to copy any >1MB source file to ramdrive, deleting it after patching. Fall back to direct reads if the copy failed.
The -r flag can then be used in scripts like ours where the end user will never be looking at the ramdrive and probably does not even know what it is. As it's a standalone script runner without file manager functionality, there should be no downside.
@SirNapkin1334 - CRC32 is baked into the BPS format as a simple sanity check that the patch is intact, that it is being applied to the intended source, and that the intended patched file has been produced. The code to generate a CRC32 checksum on any file exists, but it isn't terribly useful in most cases.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380742369,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","@SirNapkin1334 - of course we could add CRC32 support. We could also add CRC16 support, SHA224, MD5, etc... but, would it make sense? I'd say no, it would only make things more confusing to the user. Better to stick with one kind of checksum.
@Hyarion-SS - You know, the heap is bigger than just those 1MB - I think it's 32MB, unsure. Now, I'm pretty sure you're aware, but even the ramdrive space is limited, and, even worse, the limit depends on wether you use an O3DS or N3DS. That means, if you go for the ramdrive solution, you haven't solved the problem, you just postponed it.
So, still not liking the ramdrive solution. As I said, script writers can choose to do the copy, they are also more likely to know which sizes to expect. You could use the heap (of course, for the love of god, check the output of malloc :)), you'd hit the limit only a little faster than with the ramdrive. Once the limit is hit you'd have to switch t othe slow mode. It is preferred not to have too many prompts, especially in an utility function, so I'd rather have some mention of the slow processing thing in the sample script. Is it cancelable, btw?
Alternative to that, but pretty ugly to implement: use a 'floating window' buffering scheme, where you have a standard sized buffer that is 'moved' along the file. You'd need to keep track of what is in the buffer and what is not, so there is potential for error.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Hyarion-SS,6,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380934207,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","You're right, I was too hesitant to malloc. I still appreciate having the direct read fallback just in case, but it's blazingly fast now in comparison.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Moire9,7,https://github.com/d0k3/GodMode9/pull/343#issuecomment-380950894,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Actually, md5 could be useful since many people use it as a quick and easy that's available on all platforms. In the README you give the md5 of the aeskeydb, so why not implement it?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Hyarion-SS,8,https://github.com/d0k3/GodMode9/pull/343#issuecomment-381107857,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","As it turns out, we do have use for IPS as well. I'll drop that in a separate PR whenever I get around to implementing it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/343#issuecomment-381165011,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Alright, so I'm assuming you're happy with the current state of the pr, it is tested, and ready to merge, right? Still haven't done a proper review, but I'll get to that quick.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/Hyarion-SS,10,https://github.com/d0k3/GodMode9/pull/343#issuecomment-381170048,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Yes, it's been tested with several BPS's and a 20-minute BPM on a couple of systems and takes everything I throw at it without complaint. This is ready to merge in my book.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/343#issuecomment-381191822,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Great! Give me a day or two so I can look though the code. Doubt I'll find another nitpick, tho.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,343,2018-04-11T17:11:15Z,2018-04-16T22:51:36Z,2018-04-16T22:51:36Z,CLOSED,False,770,0,8,https://github.com/Hyarion-SS,Add support for IPS/BPS/BPM-formatted binary delta patches.,5,[],https://github.com/d0k3/GodMode9/pull/343,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/343#issuecomment-381774732,"This is a straightforward C port of the ""beat patch"" application code from byuu's beat v03, adapted to GodMode9's virtual FatFS. GM9 permissions checking, progress bar, and nominal scripting support were also added. Files are currently read directly instead of reading into buffers - this slows down the process, but allows theoretical use of any size of patch and is a good base for optimization where possible.
While I started this for our own use, I believe that it has great potential for the rest of the 3DS modding community, especially when coupled with the standalone scriptrunner build option for GM9. Modders can release legal delta patches in a well-known standard packed directly into a standalone GM9 firm - the autorun.gm9 script inside will then locate the original game files and seamlessly patch them into the correct location for use with LayeredFS with a single button press.
As a disclaimer, I'm an engineer, not a programmer. It's been a decade since I touched C and I may have made some odd choices as a result. Regardless, this follows the original as closely as possible and is intended more as a a mostly tested and fully working, if sometimes slow, implementation that can be polished and optimized for the 3DS. Even its current state, however, it's fast enough for all but the largest mods. Optimizing reads and writes and using the RAM where possible are next on the list, perhaps copying the files into the ramdrive before patching if the space is available, but I'm unfamiliar with the GM9 ecosystem and would definitely appreciate any help.
Thanks for this great tool, by the way.","Merged, thanks a lot!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,349,2018-04-19T01:52:49Z,2018-04-19T09:39:20Z,2018-04-19T09:39:24Z,MERGED,True,0,0,1,https://github.com/Moire9,Add Wiki logo,1,[],https://github.com/d0k3/GodMode9/pull/349,https://github.com/Moire9,1,https://github.com/d0k3/GodMode9/pull/349,Just adding the Wiki-fied logo. Will edit Wiki to point to file.,Just adding the Wiki-fied logo. Will edit Wiki to point to file.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,349,2018-04-19T01:52:49Z,2018-04-19T09:39:20Z,2018-04-19T09:39:24Z,MERGED,True,0,0,1,https://github.com/Moire9,Add Wiki logo,1,[],https://github.com/d0k3/GodMode9/pull/349,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/349#issuecomment-382674146,Just adding the Wiki-fied logo. Will edit Wiki to point to file.,"Quick one: merged, closed. Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,354,2018-04-22T17:31:54Z,2018-04-23T22:14:11Z,2018-04-23T22:14:23Z,CLOSED,False,111,27,4,https://github.com/Hyarion-SS,Speed up binary delta patching by updating progress bar less often,2,[],https://github.com/d0k3/GodMode9/pull/354,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/354,"BPS and IPS progress bars are only updated every 256 iterations.


Also adds tested but currently undocumented file mode to BPM: use GNU Coreutil's ""split --bytes=2M"" on source and target files, then create a BPM from the created source and target folders. This BPM will work on the source file to create the target file.","BPS and IPS progress bars are only updated every 256 iterations.


Also adds tested but currently undocumented file mode to BPM: use GNU Coreutil's ""split --bytes=2M"" on source and target files, then create a BPM from the created source and target folders. This BPM will work on the source file to create the target file.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,354,2018-04-22T17:31:54Z,2018-04-23T22:14:11Z,2018-04-23T22:14:23Z,CLOSED,False,111,27,4,https://github.com/Hyarion-SS,Speed up binary delta patching by updating progress bar less often,2,[],https://github.com/d0k3/GodMode9/pull/354,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/354#issuecomment-383398337,"BPS and IPS progress bars are only updated every 256 iterations.


Also adds tested but currently undocumented file mode to BPM: use GNU Coreutil's ""split --bytes=2M"" on source and target files, then create a BPM from the created source and target folders. This BPM will work on the source file to create the target file.","I personally wouldn't implement this, as GodMode9 has great progress bars and these bars would be a discrepancy with the rest of GodMode9. Though it's d0k3's choice.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,354,2018-04-22T17:31:54Z,2018-04-23T22:14:11Z,2018-04-23T22:14:23Z,CLOSED,False,111,27,4,https://github.com/Hyarion-SS,Speed up binary delta patching by updating progress bar less often,2,[],https://github.com/d0k3/GodMode9/pull/354,https://github.com/Hyarion-SS,3,https://github.com/d0k3/GodMode9/pull/354#issuecomment-383398566,"BPS and IPS progress bars are only updated every 256 iterations.


Also adds tested but currently undocumented file mode to BPM: use GNU Coreutil's ""split --bytes=2M"" on source and target files, then create a BPM from the created source and target folders. This BPM will work on the source file to create the target file.","BPS has many, many quick iterations. Our formerly 20 minute BPM was reduced to a minute or less, and the visual difference is unnoticeable.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,354,2018-04-22T17:31:54Z,2018-04-23T22:14:11Z,2018-04-23T22:14:23Z,CLOSED,False,111,27,4,https://github.com/Hyarion-SS,Speed up binary delta patching by updating progress bar less often,2,[],https://github.com/d0k3/GodMode9/pull/354,https://github.com/Hyarion-SS,4,https://github.com/d0k3/GodMode9/pull/354#issuecomment-383740038,"BPS and IPS progress bars are only updated every 256 iterations.


Also adds tested but currently undocumented file mode to BPM: use GNU Coreutil's ""split --bytes=2M"" on source and target files, then create a BPM from the created source and target folders. This BPM will work on the source file to create the target file.",This is undergoing quite the rewrite. I'll be closing this PR as the end product will look quite different.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/355,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.",True,{'THUMBS_UP': ['https://github.com/Moire9']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/355#issuecomment-383398832,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","I like the idea, especially of cp -p since things like CTRtransfers and ticket copies because it looks like they’ll be quick at first but then you can’t judge how long it’ll take because there are just more and more progress bars. +1",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/355#issuecomment-388499362,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","@Hyarion-SS - sorry, don't want to nag, but this has been open with some requested changes for a while. Are you still working on it or intend to?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/Hyarion-SS,4,https://github.com/d0k3/GodMode9/pull/355#issuecomment-388524535,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Yes, I will be returning to it this weekend -- had to set it aside for a couple of weeks as I'm an engineering grad student.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/ParzivalWolfram,5,https://github.com/d0k3/GodMode9/pull/355#issuecomment-390096756,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Nice, looking forward to the new commands! I'd kinda like to see BATCH-style logic added (""if exists"" and such) to help make smarter scripts easier to make.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/MadScript77,6,https://github.com/d0k3/GodMode9/pull/355#issuecomment-390328285,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Um, ""if exist"" is already implemented.  So is ""not"" for that matter.  Meaning you can also do an ""if not exist"" -- which is often even more convenient.  You can do an ""if not exist $[FILENAME]"" followed by an ""echo"" saying the needed file wasn't found, then a ""reboot"" followed by an ""end"" command.  Or maybe check for ""not $[ONTYPE]"" and follow it with ""goto"" and ""end"" commands, as opposed to having the entire algorithm under the ""if"" conditional (the ""elif"" part being a continuation thereof, of course).  This does require an extra ""goto"" to skip the section that is being jumped to.  Still, probably less messy overall.
Most of my scripts would probably have more ""goto"" and less ""elif"" statements had I written them AFTER ""not"" was implemented.  It would be too much trouble to change them now, though.  Things would break left and right because some of the needed changes would likely be missed initially.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/355#issuecomment-418201829,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Okay, good. We've got one big problem left.... I can't just merge that without fucking up the commit history completely. Not even my git black magick would prevent that. Sooo.... could you maybe redo the commits on the current master, using something like WinMerge (or equivalent)?
You don't have to do the exact commits, just something that makes sense.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/Hyarion-SS,8,https://github.com/d0k3/GodMode9/pull/355#issuecomment-418232899,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","I rebased this branch onto the current revision of master. That should keep everything tidy, but let me know if you want any more housekeeping.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/355#issuecomment-418318350,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Thanks, this looks great! Looks like your better with that git stuff than me. I'll have a look later today. Doubt there will be more nitpicking from my side, but I'll get back.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/355#issuecomment-418536107,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Okay, there's some stuff I still want to discuss and read your opinion on...
How does cp -a handle a folder copy? Trying to copy a file to a folder or vice versa should already fail gracefully, but I'm unsure what happens when a user tries to cp -a from folder to folder. It would be somewhat bad (I think, I'm not sure) if in that case all the files inside an existing folder would be appended to. Maybe it would be a good idea to check if the input is really a file in case of -a.
Shouldn't cp -p just be the default for small files? As I understand, -p is intended to make the progress bar less messy (displaying always full) if a lot of small files are copied in succession (I may be wrong). We could also just make this behaviour the default for folder names and for files sized smaller than the buffer size (currently 1 MiB).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/355#issuecomment-421515755,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Alright, looks good! I trust the new changes have been tested?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/Hyarion-SS,12,https://github.com/d0k3/GodMode9/pull/355#issuecomment-421998233,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","We've gone through another round of scriptrunner testing on this codebase, and it looks good.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,355,2018-04-22T17:33:45Z,2018-09-18T22:52:14Z,2018-09-18T22:52:14Z,CLOSED,False,382,27,8,https://github.com/Hyarion-SS,"Add scripting commands extrcode, cmprcode, cp -p",5,[],https://github.com/d0k3/GodMode9/pull/355,https://github.com/d0k3,13,https://github.com/d0k3/GodMode9/pull/355#issuecomment-422584732,"extrcode already existed, but now has a progress bar and an entry in HelloScript.
cmprcode recompresses a code binary into its original format. It takes 2-3 minutes.
cp -p appends file 2 to the end of file 1 rather than overwriting it.
cp displays a full progress bar instead of % completion if the file to be copied is less than the buffer size.","Merged locally, with some small changes as discussed. Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,356,2018-04-22T17:42:25Z,2018-04-22T23:47:51Z,2018-06-13T13:16:57Z,CLOSED,False,22,22,2,https://github.com/Hyarion-SS,"Switch iteration order over RomFS's to ""files before folders"".",2,[],https://github.com/d0k3/GodMode9/pull/356,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/356,"This should only affect the For loop in scripts, causing files inside of a RomFS to be read in the order described on 3DBrew: https://www.3dbrew.org/wiki/RomFS#Directory_Metadata_Structure


Was previously ""folders before files"", but the For handler starts reading directory contents immediately after encountering them.","This should only affect the For loop in scripts, causing files inside of a RomFS to be read in the order described on 3DBrew: https://www.3dbrew.org/wiki/RomFS#Directory_Metadata_Structure


Was previously ""folders before files"", but the For handler starts reading directory contents immediately after encountering them.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,356,2018-04-22T17:42:25Z,2018-04-22T23:47:51Z,2018-06-13T13:16:57Z,CLOSED,False,22,22,2,https://github.com/Hyarion-SS,"Switch iteration order over RomFS's to ""files before folders"".",2,[],https://github.com/d0k3/GodMode9/pull/356,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/356#issuecomment-383421726,"This should only affect the For loop in scripts, causing files inside of a RomFS to be read in the order described on 3DBrew: https://www.3dbrew.org/wiki/RomFS#Directory_Metadata_Structure


Was previously ""folders before files"", but the For handler starts reading directory contents immediately after encountering them.","Okay, merged locally. While this commit is completely under-the-hood and won't have a noticable effect, it will make a difference for for recursion in that files will come before folders.
As I stated earlier, I don't like the reason behind this commit, because it is a hacky solution for what's intended to be achieved and may be changed later in the GM9 code, causing regressions. Finding a better solution is encouraged, for now this will do.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,1,https://github.com/d0k3/GodMode9/pull/362,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385010848,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Personally, I think that it should have a prompt saying something like this:
!!! WARNING !!!
THIS SCRIPT WILL COMPLETELY RESTORE YOUR NAND.
THIS MAY OVERWRITE YOUR SIGHAX INSTALLATION.
YOU HAVE BEEN WARNED.

Instead of checking that you're using ntrboot. If you want a better, but more complicated solution, mount the NAND backup and check if firm0/1 match the FIRM in CTRNAND. If they match, warn the user that it will overwrite their B9S installation. If they don't, warn them that if the image is corrupt it will likely brick their system. Make sure to inclue the EmuNAND warn. Besides that, I like it. I can't wait to use it!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,3,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385030372,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","I just reverted it to what d0k3 originally wanted.  The check is commented out in InScripted's version.  I thought it did say something to that effect, but, I can change it for clarity (or d0k3 can, of course).  You don't have to wait to use it.  It's in my fork.  Grab it, run it, see what you think.
I doubt there are many corrupt EmuNANDS that have GM9-style names in the first place, but I can add partial SHA checking if there is a need (0x200/0x400 bytes starting at 0x200 or something).  Though for the moment I'm kind of busy replacing all instances of ""labelsel"" with ""keysel"" in my scripts.  Not to mention putting together a few custom chainloaders.  The next release will have 3 -- Easy Mode, Kids Mode, and an advanced, fully configurable beast with many hotkeys (all but two being user-configurable -- Settings needs to always be there, and I reserved ""down"" for a ""keysel"" GUI menu for people that can't remember hotkeys).  I'm heavily leaning towards giving it the name of the AIO itself.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/windows-server-2003,4,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385101717,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Nice.
I found that the 7th option in the main menu( Transfer SysNAND to EmuNAND) is not fully displayed though.
Also I can't exit without shutting down or rebooting.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/Moire9,5,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385107308,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Yes, I haven't had a chance to test it, since I've been at school today, but I'll take a look at it as soon as I can. (1-2 hours from now)
I anticipate checking it out!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,6,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385134290,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Well, I use most of my scripts in compiled script runners, so, I tend to loop stuff that's not for the swap card.  I can add an exit option.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/Moire9,7,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385134803,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","I believe that the poweroff/reboot/exit buttons are kinda off. START should be reboot, since that's what it normally is in GM9. It doesn't matter that much to me as much which which of the remaining two is SELECT or DOWN, but I wholeheartedly believe that START should be reboot.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,8,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385135309,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Hmm, the current iteration of my AIO would drive you nuts then, probably.  I just kind of went A, X, Y, L, R, left, right, Select, Start for most stuff.  I'm actually using UP, not DOWN -- too many people will be used to tapping down to navigate.  I only do that with a two-screen menu like InScripted/InScripted_GUI has (one's the full chainloader, the other's just the on-screen menu part of it).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,9,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385136009,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","What's funny is that it clipped by ONE character.  If d0k3 had used LT and RT for left and right, it would have been fine.  Actually these are fairly benign -- I've been playing typo tag with my ""keysel"" revisions and new apps all day.  Forgot to put the extension on the ""NTRBoot Flasher"" file and was scratching my head as to why it was saying it wasn't a bootable FIRM for minutes, rofl.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385189065,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.",Just tell me when it's ready to merge :),True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/MadScript77,11,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385194595,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Well, I think it's ready, @d0k3, unless you can think of a way to check for a firm mismatch without it triggering on hacked NAND images.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,362,2018-04-26T23:46:08Z,2018-04-29T23:53:25Z,2018-04-29T23:53:25Z,CLOSED,False,158,101,6,https://github.com/MadScript77,Replaced the old non-branching NAND scripts.,3,[],https://github.com/d0k3/GodMode9/pull/362,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/362#issuecomment-385291495,"I replaced the old non-branching NAND backup/restore scripts with a branching, hotkeyed one.","Merged locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/365,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/365#issuecomment-385910056,,"That's not how I'd have indented it. The stuff below the labels is not a function, not even a pseudo function. It's goto-spaghetti-code - I think that should not be indented. Otherwise, it's fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/windows-server-2003,3,https://github.com/d0k3/GodMode9/pull/365#issuecomment-385913230,,"I think it's a pseudo function.
'called' when the option is selected and 'returns' to the main menu.
Anyway, it's okay and fixed(edited the commit).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/Moire9,4,https://github.com/d0k3/GodMode9/pull/365#issuecomment-385998948,,"Yeah, this is exactly what I’d have done. I offered to indent his scripts for him, but he didn’t want to. Well, still not as crazy as my friend who wrote his whole website in one LONG line of HTML.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/MadScript77,5,https://github.com/d0k3/GodMode9/pull/365#issuecomment-386131526,,"I said I didn't have time to do it.  If you do, more power to you.  I still don't even have a proper splash image for my AIO, never mind preview screens.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,365,2018-05-01T23:38:02Z,2018-05-03T10:00:15Z,2018-08-12T09:13:32Z,MERGED,True,91,81,1,https://github.com/windows-server-2003,Indent NANDManager,1,[],https://github.com/d0k3/GodMode9/pull/365,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/365#issuecomment-386246223,,"Alright, merged - thanks everyone!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,369,2018-05-11T23:51:35Z,2018-05-16T22:30:15Z,2018-05-16T22:37:49Z,CLOSED,False,25,25,11,https://github.com/windows-server-2003,fix format vulnerability,1,[],https://github.com/d0k3/GodMode9/pull/369,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/369,"Fix some vulnerability caused by passing char pointer directly to format argument
Added warning option for that","Fix some vulnerability caused by passing char pointer directly to format argument
Added warning option for that",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,369,2018-05-11T23:51:35Z,2018-05-16T22:30:15Z,2018-05-16T22:37:49Z,CLOSED,False,25,25,11,https://github.com/windows-server-2003,fix format vulnerability,1,[],https://github.com/d0k3/GodMode9/pull/369,https://github.com/windows-server-2003,2,https://github.com/d0k3/GodMode9/pull/369#issuecomment-388595419,"Fix some vulnerability caused by passing char pointer directly to format argument
Added warning option for that",Added some more the same type fixes(modified commit),True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,369,2018-05-11T23:51:35Z,2018-05-16T22:30:15Z,2018-05-16T22:37:49Z,CLOSED,False,25,25,11,https://github.com/windows-server-2003,fix format vulnerability,1,[],https://github.com/d0k3/GodMode9/pull/369,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/369#issuecomment-389686247,"Fix some vulnerability caused by passing char pointer directly to format argument
Added warning option for that","Taken over locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,374,2018-05-23T03:13:39Z,2018-05-23T23:08:24Z,2018-05-23T23:08:24Z,CLOSED,False,11,11,1,https://github.com/Moire9,Better readme fix,2,[],https://github.com/d0k3/GodMode9/pull/374,https://github.com/Moire9,1,https://github.com/d0k3/GodMode9/pull/374,"Thanks @ihaveamac for pointing out why the readme fix was put in, didn't realize markdown did that (also didn't notice that section of the README). This is a solution that simply escapes that, so you can see the buttons and they're like that of inside GodMode9, rather than using []. Also more similar to how The Guide is written. I also added that when building in SALTMODE the keycombo is START.","Thanks @ihaveamac for pointing out why the readme fix was put in, didn't realize markdown did that (also didn't notice that section of the README). This is a solution that simply escapes that, so you can see the buttons and they're like that of inside GodMode9, rather than using []. Also more similar to how The Guide is written. I also added that when building in SALTMODE the keycombo is START.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,374,2018-05-23T03:13:39Z,2018-05-23T23:08:24Z,2018-05-23T23:08:24Z,CLOSED,False,11,11,1,https://github.com/Moire9,Better readme fix,2,[],https://github.com/d0k3/GodMode9/pull/374,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/374#issuecomment-391528523,"Thanks @ihaveamac for pointing out why the readme fix was put in, didn't realize markdown did that (also didn't notice that section of the README). This is a solution that simply escapes that, so you can see the buttons and they're like that of inside GodMode9, rather than using []. Also more similar to how The Guide is written. I also added that when building in SALTMODE the keycombo is START.",Taken over locally,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,381,2018-06-02T07:09:09Z,2018-06-13T12:04:09Z,2018-06-13T12:04:09Z,CLOSED,False,1924,0,1,https://github.com/annson24,Include GM9Megascript in GodMode9 resources,1,[],https://github.com/d0k3/GodMode9/pull/381,https://github.com/annson24,1,https://github.com/d0k3/GodMode9/pull/381,Collective scripts for GodMode9.,Collective scripts for GodMode9.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,381,2018-06-02T07:09:09Z,2018-06-13T12:04:09Z,2018-06-13T12:04:09Z,CLOSED,False,1924,0,1,https://github.com/annson24,Include GM9Megascript in GodMode9 resources,1,[],https://github.com/d0k3/GodMode9/pull/381,https://github.com/Moire9,2,https://github.com/d0k3/GodMode9/pull/381#issuecomment-394110189,Collective scripts for GodMode9.,I like it. Just don't remove NANDmanager.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,381,2018-06-02T07:09:09Z,2018-06-13T12:04:09Z,2018-06-13T12:04:09Z,CLOSED,False,1924,0,1,https://github.com/annson24,Include GM9Megascript in GodMode9 resources,1,[],https://github.com/d0k3/GodMode9/pull/381,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/381#issuecomment-394895128,Collective scripts for GodMode9.,"Okay, @SirNapkin1334 - you tested it? NANDmanager will stay.
@annson24, I had a look over, and it looks good - this pull request was long in the making :). I'd just prefer if a second person here told me it's good to go.",True,{'THUMBS_UP': ['https://github.com/annson24']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,381,2018-06-02T07:09:09Z,2018-06-13T12:04:09Z,2018-06-13T12:04:09Z,CLOSED,False,1924,0,1,https://github.com/annson24,Include GM9Megascript in GodMode9 resources,1,[],https://github.com/d0k3/GodMode9/pull/381,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/381#issuecomment-396913641,Collective scripts for GodMode9.,"Okay, included. Feel free to do a pull request if you see the need for any changes. Thank you!",True,{'HOORAY': ['https://github.com/annson24']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,383,2018-06-05T08:48:52Z,2018-06-14T10:38:21Z,2018-08-12T09:13:20Z,CLOSED,False,11,9,2,https://github.com/windows-server-2003,fix buffer overflow,1,[],https://github.com/d0k3/GodMode9/pull/383,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/383,"In DrawTopBar() the font width can be 1 at minimum so len_path / FONT_WIDTH_EXT can be up to 280.
The same for the others.","In DrawTopBar() the font width can be 1 at minimum so len_path / FONT_WIDTH_EXT can be up to 280.
The same for the others.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,383,2018-06-05T08:48:52Z,2018-06-14T10:38:21Z,2018-08-12T09:13:20Z,CLOSED,False,11,9,2,https://github.com/windows-server-2003,fix buffer overflow,1,[],https://github.com/d0k3/GodMode9/pull/383,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/383#issuecomment-396916988,"In DrawTopBar() the font width can be 1 at minimum so len_path / FONT_WIDTH_EXT can be up to 280.
The same for the others.","Okay, the problem with this pull request is, you're grabbing somewhat large chunks ofs memory for a hypothetical scenario. The hypothetical scenario being font widths (including one pixel space) below 4px. It is basically impossible to make letters less wide and readable, at least without the use of color.
Sooo... why not use the FONT_WIDTH_EXT macro to make the arrays a reasonable size? You could also limit the size of the strings themselves, of course (clamp it at a certain length, f.e. Or, we could decide not to accept fonts < 4px in width.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,383,2018-06-05T08:48:52Z,2018-06-14T10:38:21Z,2018-08-12T09:13:20Z,CLOSED,False,11,9,2,https://github.com/windows-server-2003,fix buffer overflow,1,[],https://github.com/d0k3/GodMode9/pull/383,https://github.com/windows-server-2003,3,https://github.com/d0k3/GodMode9/pull/383#issuecomment-397227725,"In DrawTopBar() the font width can be 1 at minimum so len_path / FONT_WIDTH_EXT can be up to 280.
The same for the others.",fixed.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,383,2018-06-05T08:48:52Z,2018-06-14T10:38:21Z,2018-08-12T09:13:20Z,CLOSED,False,11,9,2,https://github.com/windows-server-2003,fix buffer overflow,1,[],https://github.com/d0k3/GodMode9/pull/383,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/383#issuecomment-397250564,"In DrawTopBar() the font width can be 1 at minimum so len_path / FONT_WIDTH_EXT can be up to 280.
The same for the others.","Taken over locally, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,387,2018-06-13T14:47:15Z,2018-06-13T22:44:45Z,2018-06-17T15:46:01Z,MERGED,True,4,1,1,https://github.com/Hyarion-SS,Limit progress bar refresh rate,1,[],https://github.com/d0k3/GodMode9/pull/387,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/387,"With this tweak, progress bars will not draw to screen sooner than PROGRESS_REFRESH_RATE milliseconds, currently defined as 30 ms. This equates to about a 30 Hz maximum refresh rate if showProgress is being constantly called.
Progress bar resets by setting progress to 0 or cancellation by holding B are not affected.
Not all functions which call the progress bar have been tested with this change, but it is a fairly simple tweak and I have seen no issues so far.","With this tweak, progress bars will not draw to screen sooner than PROGRESS_REFRESH_RATE milliseconds, currently defined as 30 ms. This equates to about a 30 Hz maximum refresh rate if showProgress is being constantly called.
Progress bar resets by setting progress to 0 or cancellation by holding B are not affected.
Not all functions which call the progress bar have been tested with this change, but it is a fairly simple tweak and I have seen no issues so far.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,388,2018-06-17T17:21:18Z,2018-06-17T22:03:13Z,2018-06-17T22:04:54Z,MERGED,True,490,391,4,https://github.com/Hyarion-SS,"Buffer all BPS, IPS, CRC32 reads in chunks of 1 MB or less",1,[],https://github.com/d0k3/GodMode9/pull/388,https://github.com/Hyarion-SS,1,https://github.com/d0k3/GodMode9/pull/388,"As the title states, all reads are now buffered in large chunks of STD_BUFFER_SIZE. CRC32 was trivial and IPS was straightforward - the nature of the format limits IPS to fairly small files that are read linearly from beginning to end.
BPS, however, necessitated a complete rewrite. Files can be any size and read from any point in the source or target files as many times as they wish, and they take full advantage of this - BPS patches are essentially a compressed archive containing the target file compressed using both the source file and previous sections of the target file itself as a dictionary, with equal or even superior efficiency in my tests to the bzip2-leveraging bsdiff format.
The previous BPS implementation tried to read patch, source, and target files into memory before falling back to simply reading the requested portions of the file on demand. For files of any reasonable size, this resulted in a ludicrous amount of tiny reads and writes, usually overlapping with data that had been previously read. The overhead and inefficiency could result in enough slowdown as to be practically unusable, so a growing amount of cruft was devoted to workarounds avoiding this fallback at all costs. I wasn't too happy with it.
So naturally, I wrote my own memory management system.
Instead of an array of bytes, file data is represented by an array of DataChunk structs, themselves each representing non-overlapping STD_BUFFER_SIZEd pieces of the file. Data reads intelligently switch between chunks midstream with a minimum of overhead, chunks are allocated only when requested, and when more memory is required, only the least recently used chunks are deallocated until the needed memory is available.
It's all been tested across a good number of Old and New 3DS's via an installer script patching a few hundred files each go, and we haven't found any issues. Theoretically it should be able to apply any valid BPS/BPM patch now, all at a very reasonable speed - the script previously took at least 20 minutes to complete but now finishes in less than 5.","As the title states, all reads are now buffered in large chunks of STD_BUFFER_SIZE. CRC32 was trivial and IPS was straightforward - the nature of the format limits IPS to fairly small files that are read linearly from beginning to end.
BPS, however, necessitated a complete rewrite. Files can be any size and read from any point in the source or target files as many times as they wish, and they take full advantage of this - BPS patches are essentially a compressed archive containing the target file compressed using both the source file and previous sections of the target file itself as a dictionary, with equal or even superior efficiency in my tests to the bzip2-leveraging bsdiff format.
The previous BPS implementation tried to read patch, source, and target files into memory before falling back to simply reading the requested portions of the file on demand. For files of any reasonable size, this resulted in a ludicrous amount of tiny reads and writes, usually overlapping with data that had been previously read. The overhead and inefficiency could result in enough slowdown as to be practically unusable, so a growing amount of cruft was devoted to workarounds avoiding this fallback at all costs. I wasn't too happy with it.
So naturally, I wrote my own memory management system.
Instead of an array of bytes, file data is represented by an array of DataChunk structs, themselves each representing non-overlapping STD_BUFFER_SIZEd pieces of the file. Data reads intelligently switch between chunks midstream with a minimum of overhead, chunks are allocated only when requested, and when more memory is required, only the least recently used chunks are deallocated until the needed memory is available.
It's all been tested across a good number of Old and New 3DS's via an installer script patching a few hundred files each go, and we haven't found any issues. Theoretically it should be able to apply any valid BPS/BPM patch now, all at a very reasonable speed - the script previously took at least 20 minutes to complete but now finishes in less than 5.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,388,2018-06-17T17:21:18Z,2018-06-17T22:03:13Z,2018-06-17T22:04:54Z,MERGED,True,490,391,4,https://github.com/Hyarion-SS,"Buffer all BPS, IPS, CRC32 reads in chunks of 1 MB or less",1,[],https://github.com/d0k3/GodMode9/pull/388,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/388#issuecomment-397909609,"As the title states, all reads are now buffered in large chunks of STD_BUFFER_SIZE. CRC32 was trivial and IPS was straightforward - the nature of the format limits IPS to fairly small files that are read linearly from beginning to end.
BPS, however, necessitated a complete rewrite. Files can be any size and read from any point in the source or target files as many times as they wish, and they take full advantage of this - BPS patches are essentially a compressed archive containing the target file compressed using both the source file and previous sections of the target file itself as a dictionary, with equal or even superior efficiency in my tests to the bzip2-leveraging bsdiff format.
The previous BPS implementation tried to read patch, source, and target files into memory before falling back to simply reading the requested portions of the file on demand. For files of any reasonable size, this resulted in a ludicrous amount of tiny reads and writes, usually overlapping with data that had been previously read. The overhead and inefficiency could result in enough slowdown as to be practically unusable, so a growing amount of cruft was devoted to workarounds avoiding this fallback at all costs. I wasn't too happy with it.
So naturally, I wrote my own memory management system.
Instead of an array of bytes, file data is represented by an array of DataChunk structs, themselves each representing non-overlapping STD_BUFFER_SIZEd pieces of the file. Data reads intelligently switch between chunks midstream with a minimum of overhead, chunks are allocated only when requested, and when more memory is required, only the least recently used chunks are deallocated until the needed memory is available.
It's all been tested across a good number of Old and New 3DS's via an installer script patching a few hundred files each go, and we haven't found any issues. Theoretically it should be able to apply any valid BPS/BPM patch now, all at a very reasonable speed - the script previously took at least 20 minutes to complete but now finishes in less than 5.","Merged, thank you! When measuring time, keep in mind that GM9 now also has an updated SD driver, which is responsible for part of the added performance (for big file operations, I estimate the new SD driver to be ~10% faster).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/Steveice10,1,https://github.com/d0k3/GodMode9/pull/396,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.",True,"{'THUMBS_UP': ['https://github.com/legoj15', 'https://github.com/NWPlayer123', 'https://github.com/BreadFish64', 'https://github.com/FearlessTobi', 'https://github.com/Moire9']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403322984,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Alright, I'll have a look tomorrow and then I'll merge it. Thanks for this!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403641805,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Okay... putting this up for discussion. There was a prompt earlier when DLCs are incomplete. Your pull request removed that prompt. Think we should leave it out? Given that DLCs are basically always incomplete, the prompt may be redundant. On the other hand, users may think that their DLCs are complete now (cause no prompt), which they aren't.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/Steveice10,4,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403642085,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","If you want the prompt to be there I can add it back. I just kind of figured users would understand it can only dump what they have, and that it no longer has consequences (i.e. on the TMD data) that need to be warned about.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403642566,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Nah, I'd rather just ask for your opinion. I think we can leave it as is.
That pull request is also tested?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/Steveice10,6,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403642816,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Yes. I tested it by dumping all of my DLC, testing all of my DLC in citra with the DLC-fixing pull request, and reinstalling one of my game's DLC on my system using a dumped CIA.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403643770,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.",I think at least the check should go back in. The other thing is nitpicking :^).,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/Steveice10,8,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403644124,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.",Comments fixed/responded to.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/Steveice10,9,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403646958,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.",Changed to u8 array.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/396#issuecomment-403647285,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","Merged, thanks! That was quick, also sorry about the nitpicking.
This also fixes #395",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/jroweboy,11,https://github.com/d0k3/GodMode9/pull/396#issuecomment-404357965,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","@d0k3 Sorry to pester you about this, but could we see a release with this fix soon? This will be required for DLC support in citra (for those people that don't all the DLC for the game) and when we announce that DLC is working, we'll be telling everyone to redump the dlc through godmode9 and that they should update godmode9 first :)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,396,2018-07-06T23:49:28Z,2018-07-09T23:05:35Z,2018-07-12T09:55:01Z,MERGED,True,22,18,1,https://github.com/Steveice10,Fix dumping DLC to CIA.,1,[],https://github.com/d0k3/GodMode9/pull/396,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/396#issuecomment-404456817,"Instead of modifying the TMD content chunks, just remove missing contents from the CIA header's content index.","@jroweboy - yeah, I intended to do one anyways. It will still take me a few days to wrap everything up and test it.",True,"{'THUMBS_UP': ['https://github.com/jroweboy', 'https://github.com/FearlessTobi']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,400,2018-07-21T16:04:36Z,2018-07-22T23:11:00Z,2018-07-23T01:37:16Z,CLOSED,False,3,3,1,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/400,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/400,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,400,2018-07-21T16:04:36Z,2018-07-22T23:11:00Z,2018-07-23T01:37:16Z,CLOSED,False,3,3,1,https://github.com/Nemris,Fixed typos,1,[],https://github.com/d0k3/GodMode9/pull/400,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/400#issuecomment-406904541,,"Merged via the command line, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,401,2018-07-23T02:13:18Z,2018-07-24T22:15:49Z,2018-07-26T11:08:45Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed a typo,1,[],https://github.com/d0k3/GodMode9/pull/401,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/401,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,401,2018-07-23T02:13:18Z,2018-07-24T22:15:49Z,2018-07-26T11:08:45Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed a typo,1,[],https://github.com/d0k3/GodMode9/pull/401,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/401#issuecomment-406999223,,"You should collect this small fixes and send in one big pull request. Ie. only open the pull request once you think you won't find anymore typos. Maybe use a regular spell checker to catch em all. I suggest we wait a bit for more to turn up, and you just add the commits. Is that alright?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,401,2018-07-23T02:13:18Z,2018-07-24T22:15:49Z,2018-07-26T11:08:45Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed a typo,1,[],https://github.com/d0k3/GodMode9/pull/401,https://github.com/Nemris,3,https://github.com/d0k3/GodMode9/pull/401#issuecomment-406999896,,"Makes sense. Just found this one while testing the injection feature, though.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,401,2018-07-23T02:13:18Z,2018-07-24T22:15:49Z,2018-07-26T11:08:45Z,CLOSED,False,1,1,1,https://github.com/Nemris,Fixed a typo,1,[],https://github.com/d0k3/GodMode9/pull/401,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/401#issuecomment-407569863,,Merged locally (I accidentially included it in my latest commit). Commit doesn't list you as author (another accident). I hope that's okay.,True,{'THUMBS_UP': ['https://github.com/Nemris']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/402,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/Nemris,2,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407027963,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","@d0k3 In regards to the tool, no, you don't need to explicitly open and edit the ReadMe, but only to maintain the patch.json.gz if the tool complains about a pattern it can't find.
I'm planning to release the script soon, so that you can have a look at it. I'm also available for the maintenance of the patch database if need be, so that you'd only need to clone the repo and launch the tool.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407033195,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".",Alright. As for this pull request - I'll need to introduce some changes to the readme myself. Upcoming release. I suggest we leave it open so you can update after I'm done.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/Nemris,4,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407034972,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","Expected that, what with the new trimmer and all; no problem.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/Nemris,5,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407118550,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","All right, the project is live at https://github.com/DMSalesman/Unmark .",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407570294,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","Alright, I made some small changes to the readme. Could you update accordingly?
Btw, you could actually make Unmark more generic, ie. do it in a way that allows using it for other Markdown files, too. Maybe there's some demand for that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/Nemris,7,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407583604,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".",The README should be fine now; I'll definitely think about your suggestion.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,402,2018-07-23T10:55:05Z,2018-07-25T22:46:40Z,2018-07-26T11:08:45Z,CLOSED,False,172,0,1,https://github.com/Nemris,Added refined user guide,2,[],https://github.com/d0k3/GodMode9/pull/402,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/402#issuecomment-407920379,"This commit adds an edited README.md to be built into GM9 as user guide.
The scrubbed parts include refs to the GM9 banner, unused MarkDown and
the whole ""How to build this / developer info"" block.
Links have been replaced with their corresponding anchor text, when
replacing them could be done without altering the sentences' original
meaning.
Certain parts have been further altered, such as the ""License""
paragraph, which now includes the full link to GM9's ""license.txt"".","Merged via the command line, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,404,2018-07-30T04:03:19Z,2018-07-30T09:49:51Z,2018-07-30T09:49:51Z,MERGED,True,1,1,1,https://github.com/TheGinGear,Update NANDManager.gm9,1,[],https://github.com/d0k3/GodMode9/pull/404,https://github.com/TheGinGear,1,https://github.com/d0k3/GodMode9/pull/404,"Just a quick fix, replaced the old keysel command","Just a quick fix, replaced the old keysel command",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,404,2018-07-30T04:03:19Z,2018-07-30T09:49:51Z,2018-07-30T09:49:51Z,MERGED,True,1,1,1,https://github.com/TheGinGear,Update NANDManager.gm9,1,[],https://github.com/d0k3/GodMode9/pull/404,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/404#issuecomment-408809229,"Just a quick fix, replaced the old keysel command","Yeah, replacing the keyselcommand was bound to bring some problems. Thanks for the quick fix!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/405,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Show ""(dir)"" on directory entry.
Allow scrolling in select menu.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/405#issuecomment-408811695,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","I'm a little bit unsure about this, cause we still have a limit for the number of displayable entries. I suggest not to increase the limit for now, though. Will have a more thorough look later, looks good so far.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/405#issuecomment-409147501,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Ah, you got me wrong. I meant the number of entries in the buffer (not the number of displayed entries), and it's good as it is now. Using 10 for displayable entries is fine, too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/405#issuecomment-409760678,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Okay, I had a look and I like the scrolling thing, however, some changes are problematic.
The ShowSelectPrompt function is meant to be universal. With your changes, if more than 8 (10) entries are in the menu, we got scrolling. Scrolling doesn't work properly cause not all lines are of equal length and there are leftovers when scrolling. You fix this for the FileSelector, but that doesn't mean it won't cause more trouble elsewhere.
I also checked the Scripts and Payloads submenus (in HOME menu), and they don't look too good now cause the menus are aligned to the left (while all other ShowSelectPrompt based menus are centered).
I'm unsure about the position bar. It's nice, but it also makes the code complicated, and for the typical short lists of options in these submenus it is really not required (although some indicator that there is more to the list is required).
So... ShowSelectPrompt has to stay universal (meaning, has to work with everything), and the FileSelector still needs work. One way to go about it is to make the FileSelector a separate UI function, but that's only a suggestion and I'm open for other solutions.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/windows-server-2003,5,https://github.com/d0k3/GodMode9/pull/405#issuecomment-410489506,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Okay, fixed.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/windows-server-2003,6,https://github.com/d0k3/GodMode9/pull/405#issuecomment-410656367,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","I created a new ui function(ShowFileScrollPrompt).
Also removed the scroll bar and added ""[%d more]"" below the last entry instead.
""menus are aligned"" means the message ""HOME menu..."" and "" select..."" are aligned, right ?
If it does, I fixed it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/405#issuecomment-410658413,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","I'll have a look and get back later, alright?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/405#issuecomment-412376711,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Okay, first of all, sorry, this took me as long as it did.
There is still something wrong with this. Just take a look in the HOME menu -> Scripts or HOME menu -> Payloads. The stuff in there should be centered, with this pull request, stuff is aligned to the left. This is caused by the replacement of TruncateString with ResizeString.
I of course know why you're doing this (so that there are never leftovers of the names atop / below when scrolling), but you will need to find a different solution for this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/windows-server-2003,9,https://github.com/d0k3/GodMode9/pull/405#issuecomment-420928855,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Sorry for keeping you waiting.
Implemented it as new style file selector.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/405#issuecomment-427697680,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Had a look, and I like it. There's still room for improvement:
https://i.imgur.com/9LGAynf.png
Even with the truncation, something is cut off. You need to truncate to a shorter width. You should also test with an 8px font. Use the FONT_WIDTH_EXT macro to calculate the truncated length based on the font width.
I've still got two suggestions... first, with the interface being very explorer like, it's somewhat weird to see a prompt when hitting an empty folder - maybe you want the dotdot (..) entry in there instead?
The last thing really is only a suggestion and comes down to personal tastes. I think the scroll bar on the right side is not required, cause you always know how many files are still there by the bottom entry. Leave it in, if you like it (the new file selector is yours, and I'm okay with it), or reconsider.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,405,2018-07-30T06:26:38Z,2019-03-15T00:15:47Z,2019-03-15T00:15:47Z,CLOSED,False,119,21,9,https://github.com/windows-server-2003,Improved file selector,5,[],https://github.com/d0k3/GodMode9/pull/405,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/405#issuecomment-473112864,"Show ""(dir)"" on directory entry.
Allow scrolling in select menu.","Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,422,2018-08-26T18:37:38Z,2018-08-26T20:34:00Z,2018-08-26T20:34:17Z,CLOSED,False,2,1,1,https://github.com/annson24,GM9Megascript Fixes,1,[],https://github.com/d0k3/GodMode9/pull/422,https://github.com/annson24,1,https://github.com/d0k3/GodMode9/pull/422,"Fixed #420, Emunand not restoring.
Fixed a minor bug when exiting Title Options, it exits directly to the Main Menu instead of Misc. Menu.","Fixed #420, Emunand not restoring.
Fixed a minor bug when exiting Title Options, it exits directly to the Main Menu instead of Misc. Menu.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,422,2018-08-26T18:37:38Z,2018-08-26T20:34:00Z,2018-08-26T20:34:17Z,CLOSED,False,2,1,1,https://github.com/annson24,GM9Megascript Fixes,1,[],https://github.com/d0k3/GodMode9/pull/422,https://github.com/annson24,2,https://github.com/d0k3/GodMode9/pull/422#issuecomment-416059520,"Fixed #420, Emunand not restoring.
Fixed a minor bug when exiting Title Options, it exits directly to the Main Menu instead of Misc. Menu.",Sorry for the typo. Too sleepy to notice.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,422,2018-08-26T18:37:38Z,2018-08-26T20:34:00Z,2018-08-26T20:34:17Z,CLOSED,False,2,1,1,https://github.com/annson24,GM9Megascript Fixes,1,[],https://github.com/d0k3/GodMode9/pull/422,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/422#issuecomment-416069840,"Fixed #420, Emunand not restoring.
Fixed a minor bug when exiting Title Options, it exits directly to the Main Menu instead of Misc. Menu.",Taken over locally,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,422,2018-08-26T18:37:38Z,2018-08-26T20:34:00Z,2018-08-26T20:34:17Z,CLOSED,False,2,1,1,https://github.com/annson24,GM9Megascript Fixes,1,[],https://github.com/d0k3/GodMode9/pull/422,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/422#issuecomment-416069889,"Fixed #420, Emunand not restoring.
Fixed a minor bug when exiting Title Options, it exits directly to the Main Menu instead of Misc. Menu.","Also, thanks for the quick fix!",True,"{'HEART': ['https://github.com/annson24', 'https://github.com/kurzw']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/windows-server-2003,1,https://github.com/d0k3/GodMode9/pull/428,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).","The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/428#issuecomment-421517085,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).","Alright. While this a pretty great idea, some stuff just ain't right yet. You take too much memory from the stack there, and doing so is not even required.
Just have a look at what DirEntryCpy does - it just does a memcpy and some pretty simple fix afterwards. You could also just qsort the whole array (not pointers, actual DirEntry), then apply the same simple fix to the whole list afterwards. This way, you won't need two additional (big!) arrays on the stack,
Maybe I'm missing something here, tho, so you you tell me.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/windows-server-2003,3,https://github.com/d0k3/GodMode9/pull/428#issuecomment-421529810,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).","apply the same simple fix to the whole list afterwards

I think there's no good way to do that.
int org_index =  (entry->name-contents)/sizeof(DirEntry);
int cur_index = (entry - contents)/sizeof(DirEntry);
entry->name += sizeof(DirEntry)*(cur_index - org_index);

Here is a way to do that but I don't think it's well readable.
I have another reason I wouldn't like to do that. Qsort performs (Nlog_2(N))(N11 if N = 2048) times of memcpy and memcpying DirEntries would take time than DirEntry*s.
My solution is using malloc to allocate memory.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/428#issuecomment-421938522,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).","Well, actually you need to search for the / again to manually apply the fix to the whole list. name is just a pointer to the position in path where the actual filename starts (strrchr is your friend). Not that super simple, granted, and there are ways to mess up, but also not too bad.
Now... memory limitations in GM9 (or, on the 3DS console) are somewhat tight. An additional requirement of half an MiB may very well matter. Sooo... will qsort on actual DirEntry really take that much longer? Got a quick way to test? If so, using malloc is very much acceptable.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/windows-server-2003,5,https://github.com/d0k3/GodMode9/pull/428#issuecomment-421967225,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).",It's like 0.3s->0.5s(caused by changing name comparation from entry->name to entry->path). Good.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/428#issuecomment-421993874,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).","Yeah, I think that's pretty much acceptable, especially considering those large dirs are rare. Thanks! I'll give it a last check later today and merge it. Backlog of pull requests / issues growing, so I better get to work :^).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/428#issuecomment-422204934,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).",Taken over locally. Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,428,2018-09-13T09:07:25Z,2018-09-17T23:34:10Z,2018-10-02T04:28:14Z,CLOSED,False,18,19,1,https://github.com/windows-server-2003,Improved file loading time,2,[],https://github.com/d0k3/GodMode9/pull/428,https://github.com/urherenow,8,https://github.com/d0k3/GodMode9/pull/428#issuecomment-426145454,"The present sort algorithm for file sorting is ""selection sort"".
However, it's a bit slow.
Since qsort is there, you should use qsort for faster sorting.
We can't sort an array of DirEntry directly as qsort uses memcpy for swapping(we have to use DirEntryCpy to swap them) but we can sort an array of pointer of DirEntry.
It's being much faster to load many files in single directory(5s->0.5s for me).",entry undeclared. breaks build.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,430,2018-09-25T08:01:37Z,2018-10-01T22:06:45Z,2018-10-01T22:06:45Z,CLOSED,False,9,1,1,https://github.com/annson24,Fixed #427,2,[],https://github.com/d0k3/GodMode9/pull/430,https://github.com/annson24,1,https://github.com/d0k3/GodMode9/pull/430,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,430,2018-09-25T08:01:37Z,2018-10-01T22:06:45Z,2018-10-01T22:06:45Z,CLOSED,False,9,1,1,https://github.com/annson24,Fixed #427,2,[],https://github.com/d0k3/GodMode9/pull/430,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/430#issuecomment-426080246,,"Merged and squashed locally, thanks @annson24 and @yonaikerlol !",True,{'THUMBS_UP': ['https://github.com/yonaikerlol']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,434,2018-10-07T13:57:52Z,2018-10-07T23:44:36Z,2019-05-28T00:33:13Z,MERGED,True,6,1,2,https://github.com/knight-ryu12,Make N_PANE definable,1,[],https://github.com/d0k3/GodMode9/pull/434,https://github.com/knight-ryu12,1,https://github.com/d0k3/GodMode9/pull/434,"I think this is kind of little PR that I've made, but... I think this'll be neat thing...?
Made changes on Makefile.common","I think this is kind of little PR that I've made, but... I think this'll be neat thing...?
Made changes on Makefile.common",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,450,2019-01-02T00:47:17Z,2019-01-02T23:19:25Z,2019-04-27T19:50:19Z,MERGED,True,1,1,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/450,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/450,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,463,2019-03-14T03:41:18Z,2019-03-15T00:16:13Z,2019-03-15T00:16:13Z,CLOSED,False,1,1,1,https://github.com/eiiiiix,Redo alphabet to be better,5,[],https://github.com/d0k3/GodMode9/pull/463,https://github.com/eiiiiix,1,https://github.com/d0k3/GodMode9/pull/463,"Currently renaming a file has all caps and lower grouped together and most files either use all lowercase or have only afew caps
changing the order makes it alittle easier to quickly rename for people who have bad L and R buttons","Currently renaming a file has all caps and lower grouped together and most files either use all lowercase or have only afew caps
changing the order makes it alittle easier to quickly rename for people who have bad L and R buttons",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,463,2019-03-14T03:41:18Z,2019-03-15T00:16:13Z,2019-03-15T00:16:13Z,CLOSED,False,1,1,1,https://github.com/eiiiiix,Redo alphabet to be better,5,[],https://github.com/d0k3/GodMode9/pull/463,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/463#issuecomment-472843066,"Currently renaming a file has all caps and lower grouped together and most files either use all lowercase or have only afew caps
changing the order makes it alittle easier to quickly rename for people who have bad L and R buttons","Well... I'd actually suggest we use the new alphabet order in all cases, thus we don't need the NO_LR compile parameter. I like it. I think the numbers should be kept in order, tho.",True,"{'THUMBS_UP': ['https://github.com/legoj15', 'https://github.com/eiiiiix']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,463,2019-03-14T03:41:18Z,2019-03-15T00:16:13Z,2019-03-15T00:16:13Z,CLOSED,False,1,1,1,https://github.com/eiiiiix,Redo alphabet to be better,5,[],https://github.com/d0k3/GodMode9/pull/463,https://github.com/eiiiiix,3,https://github.com/d0k3/GodMode9/pull/463#issuecomment-473046780,"Currently renaming a file has all caps and lower grouped together and most files either use all lowercase or have only afew caps
changing the order makes it alittle easier to quickly rename for people who have bad L and R buttons",i only changed the number order because starting at 9 if you go backwards is a little weird,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,463,2019-03-14T03:41:18Z,2019-03-15T00:16:13Z,2019-03-15T00:16:13Z,CLOSED,False,1,1,1,https://github.com/eiiiiix,Redo alphabet to be better,5,[],https://github.com/d0k3/GodMode9/pull/463,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/463#issuecomment-473112956,"Currently renaming a file has all caps and lower grouped together and most files either use all lowercase or have only afew caps
changing the order makes it alittle easier to quickly rename for people who have bad L and R buttons","Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,464,2019-03-14T17:07:22Z,2019-03-15T00:16:45Z,2019-03-15T00:16:45Z,CLOSED,False,95,10,5,https://github.com/luigoalma,revert seqmemcpy and memcpy reimplementation,2,[],https://github.com/d0k3/GodMode9/pull/464,https://github.com/luigoalma,1,https://github.com/d0k3/GodMode9/pull/464,"The memcpy replacement
If need to fix up anything first, like the comments on sha.c or rsa.c, say and I'll fix up","The memcpy replacement
If need to fix up anything first, like the comments on sha.c or rsa.c, say and I'll fix up",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,464,2019-03-14T17:07:22Z,2019-03-15T00:16:45Z,2019-03-15T00:16:45Z,CLOSED,False,95,10,5,https://github.com/luigoalma,revert seqmemcpy and memcpy reimplementation,2,[],https://github.com/d0k3/GodMode9/pull/464,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/464#issuecomment-473113027,"The memcpy replacement
If need to fix up anything first, like the comments on sha.c or rsa.c, say and I'll fix up","Taken over locally, thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/Validusername16,1,https://github.com/d0k3/GodMode9/pull/468,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/468#issuecomment-475990728,,I trust you tested this enough? I'll review this later.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,None,3,https://github.com/d0k3/GodMode9/pull/468#issuecomment-476012865,,I would love to see this in GM9!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/468#issuecomment-476015591,,"Okay, I thought about this for a bit, and you really should do that pull request to annson24's repo first:
https://github.com/annson24/GM9Megascript
@annson24 is the maintainer of the script, so I'll trust his judgement about these additions. I'll take them if @annson24 does.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/eip618,5,https://github.com/d0k3/GodMode9/pull/468#issuecomment-480554979,,@d0k3 this should probably be closed and the scripts pulled from annson's repo as they contain some changes not present here.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/468#issuecomment-480631057,,"Can @annson24 do the pull request? Or one of you guys. I could do it myself, but I think the commit ownership does not belong to me :).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/eip618,7,https://github.com/d0k3/GodMode9/pull/468#issuecomment-482903141,,"to be honest, i have no idea how to PR a file from one repo to another which isnt a fork of the first.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/468#issuecomment-483054964,,"Just fork GM9, replace the Megascript, do a pull request. Can you do that?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/468#issuecomment-483447531,,"Alright, did it myself. Thank @Validusername16, @eip618 and @annson24!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,468,2019-03-24T18:34:05Z,2019-04-15T22:51:08Z,2019-04-16T10:42:28Z,CLOSED,False,22,1,1,https://github.com/Validusername16,Update Cleanup SD Card and add Deleting Friendlist,1,[],https://github.com/d0k3/GodMode9/pull/468,https://github.com/eip618,10,https://github.com/d0k3/GodMode9/pull/468#issuecomment-483608270,,"sorry! i've been a little bit busy with... yknow, life over the past few days. sorry i didn't get the message.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,471,2019-03-31T01:03:49Z,2019-03-31T02:28:13Z,2019-04-01T10:10:33Z,CLOSED,False,15,2,1,https://github.com/eip618,Update cleanup script to add *miner method files,2,[],https://github.com/d0k3/GodMode9/pull/471,https://github.com/eip618,1,https://github.com/d0k3/GodMode9/pull/471,"Hi there!
This PR adds some files which are used to setup the latest *miner methods.
It also changes the handling of the cias folder, because users are often confused as to what to do with a cia when the cias folder suddenly disappears. So this change causes the contents of cias to be deleted, but not the actual folder itself.","Hi there!
This PR adds some files which are used to setup the latest *miner methods.
It also changes the handling of the cias folder, because users are often confused as to what to do with a cia when the cias folder suddenly disappears. So this change causes the contents of cias to be deleted, but not the actual folder itself.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,471,2019-03-31T01:03:49Z,2019-03-31T02:28:13Z,2019-04-01T10:10:33Z,CLOSED,False,15,2,1,https://github.com/eip618,Update cleanup script to add *miner method files,2,[],https://github.com/d0k3/GodMode9/pull/471,https://github.com/eip618,2,https://github.com/d0k3/GodMode9/pull/471#issuecomment-478306101,"Hi there!
This PR adds some files which are used to setup the latest *miner methods.
It also changes the handling of the cias folder, because users are often confused as to what to do with a cia when the cias folder suddenly disappears. So this change causes the contents of cias to be deleted, but not the actual folder itself.",i'll close this as i have just realised you addressed a similar pr from valid,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,471,2019-03-31T01:03:49Z,2019-03-31T02:28:13Z,2019-04-01T10:10:33Z,CLOSED,False,15,2,1,https://github.com/eip618,Update cleanup script to add *miner method files,2,[],https://github.com/d0k3/GodMode9/pull/471,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/471#issuecomment-478328722,"Hi there!
This PR adds some files which are used to setup the latest *miner methods.
It also changes the handling of the cias folder, because users are often confused as to what to do with a cia when the cias folder suddenly disappears. So this change causes the contents of cias to be deleted, but not the actual folder itself.","Yup. Just to be clear, I want that pull request. But I want @annson24 to review it.",True,{'THUMBS_UP': ['https://github.com/eip618']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,471,2019-03-31T01:03:49Z,2019-03-31T02:28:13Z,2019-04-01T10:10:33Z,CLOSED,False,15,2,1,https://github.com/eip618,Update cleanup script to add *miner method files,2,[],https://github.com/d0k3/GodMode9/pull/471,https://github.com/eip618,4,https://github.com/d0k3/GodMode9/pull/471#issuecomment-478519253,"Hi there!
This PR adds some files which are used to setup the latest *miner methods.
It also changes the handling of the cias folder, because users are often confused as to what to do with a cia when the cias folder suddenly disappears. So this change causes the contents of cias to be deleted, but not the actual folder itself.",it looks like they have noticed it and will get a handle on it shortly.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,474,2019-04-03T23:49:30Z,2019-04-15T22:41:32Z,2019-04-15T22:41:32Z,MERGED,True,3,5,1,https://github.com/luigoalma,Very minor optimization,1,[],https://github.com/d0k3/GodMode9/pull/474,https://github.com/luigoalma,1,https://github.com/d0k3/GodMode9/pull/474,"It only effect happens at common misaligned memory check and fixup
Does the exact same end result, just in less 2 instructions and independent of r4 and r5, using r12 instead","It only effect happens at common misaligned memory check and fixup
Does the exact same end result, just in less 2 instructions and independent of r4 and r5, using r12 instead",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,474,2019-04-03T23:49:30Z,2019-04-15T22:41:32Z,2019-04-15T22:41:32Z,MERGED,True,3,5,1,https://github.com/luigoalma,Very minor optimization,1,[],https://github.com/d0k3/GodMode9/pull/474,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/474#issuecomment-483445306,"It only effect happens at common misaligned memory check and fixup
Does the exact same end result, just in less 2 instructions and independent of r4 and r5, using r12 instead","Thanks, @luigoalma, merging it now...",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,476,2019-04-08T20:58:18Z,2019-04-19T15:37:23Z,2019-10-21T21:51:56Z,MERGED,True,2934,1166,55,https://github.com/Wolfvak,ARM11 improvements,9,[],https://github.com/d0k3/GodMode9/pull/476,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/476,"I'm currently working on a branch that will bring some improvements to how GM9 utilizes the ARM11 processor. It's currently a work in progress that shouldn't be merged until heavy testing is done on it (wink wink, to anyone reading this...), and until all the goals are achieved
Immediate goals:

 Improve the PXI protocol to make it as reliable as possible, as well as lower the latency
 Move I2C code to the ARM11
 Add register caching for the MCU (reads are performed from the cache and it's only updated whenever an MCU interrupt happens)
 Add a shared memory region (HID updates, Unix 64 bit timestamp to reduce RTC reads, anything else that potentially matters)
 Move existing code that performs background tasks to the ARM11 (backlight checks, etc)

Later goals:

 Enable the MMU, caches and other fancy MP11 features like branch prediction, return stack and instruction folding.","I'm currently working on a branch that will bring some improvements to how GM9 utilizes the ARM11 processor. It's currently a work in progress that shouldn't be merged until heavy testing is done on it (wink wink, to anyone reading this...), and until all the goals are achieved
Immediate goals:

 Improve the PXI protocol to make it as reliable as possible, as well as lower the latency
 Move I2C code to the ARM11
 Add register caching for the MCU (reads are performed from the cache and it's only updated whenever an MCU interrupt happens)
 Add a shared memory region (HID updates, Unix 64 bit timestamp to reduce RTC reads, anything else that potentially matters)
 Move existing code that performs background tasks to the ARM11 (backlight checks, etc)

Later goals:

 Enable the MMU, caches and other fancy MP11 features like branch prediction, return stack and instruction folding.",True,"{'THUMBS_UP': ['https://github.com/legoj15', 'https://github.com/knight-ryu12']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,476,2019-04-08T20:58:18Z,2019-04-19T15:37:23Z,2019-10-21T21:51:56Z,MERGED,True,2934,1166,55,https://github.com/Wolfvak,ARM11 improvements,9,[],https://github.com/d0k3/GodMode9/pull/476,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/476#issuecomment-484130203,"I'm currently working on a branch that will bring some improvements to how GM9 utilizes the ARM11 processor. It's currently a work in progress that shouldn't be merged until heavy testing is done on it (wink wink, to anyone reading this...), and until all the goals are achieved
Immediate goals:

 Improve the PXI protocol to make it as reliable as possible, as well as lower the latency
 Move I2C code to the ARM11
 Add register caching for the MCU (reads are performed from the cache and it's only updated whenever an MCU interrupt happens)
 Add a shared memory region (HID updates, Unix 64 bit timestamp to reduce RTC reads, anything else that potentially matters)
 Move existing code that performs background tasks to the ARM11 (backlight checks, etc)

Later goals:

 Enable the MMU, caches and other fancy MP11 features like branch prediction, return stack and instruction folding.","Okay, I believe I achieved most of what I set out to do as it currently stands. I'll still work on it, but it's at a stage where it can be tested by anyone and is fully functional (at least I hope so).
As always, lots of testing is appreciated!
Particular points to test:

GM9 boots at all (kind of important if you ask me)
GM9 boots from all entrypoints and behaves accordingly (bootloader mode, ntrboot complains about missing aeskeydb if it's not built in, etc)
Being able to boot all kinds of other FIRMs (as long as it makes sense to ofc, it's senseless to boot a N3DS stock FIRM on an O3DS and such)
Volume slider correctly modifies the LCD brightness
Make sure that the keypress checks behave the same as they used to

And anything else you can think of!
If you find something is broken, please comment about it here.
If it's not about a bug, or not pertinent to this PR I'll probably remove the comment.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,479,2019-04-29T18:21:20Z,2019-04-30T11:38:28Z,2019-10-12T02:16:59Z,MERGED,True,172,0,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/479,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/479,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,495,2019-06-26T09:44:22Z,2019-06-30T22:05:50Z,2019-06-30T22:05:50Z,CLOSED,False,59,59,6,None,Filename changes.,14,[],https://github.com/d0k3/GodMode9/pull/495,None,1,https://github.com/d0k3/GodMode9/pull/495,"LUMA uses 1:/rw/luma/ for its config files, so you should do that as well. Also, it is very messy to directly put files on the root directory.
Change some file extensions, so Windows software that depends on extensions know that they are FAT images and let you mount/check them.

(Also, what is the purpose of FIRM2 to FIRM7?)","LUMA uses 1:/rw/luma/ for its config files, so you should do that as well. Also, it is very messy to directly put files on the root directory.
Change some file extensions, so Windows software that depends on extensions know that they are FAT images and let you mount/check them.

(Also, what is the purpose of FIRM2 to FIRM7?)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,495,2019-06-26T09:44:22Z,2019-06-30T22:05:50Z,2019-06-30T22:05:50Z,CLOSED,False,59,59,6,None,Filename changes.,14,[],https://github.com/d0k3/GodMode9/pull/495,https://github.com/ihaveamac,2,https://github.com/d0k3/GodMode9/pull/495#issuecomment-506037310,"LUMA uses 1:/rw/luma/ for its config files, so you should do that as well. Also, it is very messy to directly put files on the root directory.
Change some file extensions, so Windows software that depends on extensions know that they are FAT images and let you mount/check them.

(Also, what is the purpose of FIRM2 to FIRM7?)",firm2 to firm7 can exist if they are added to the NCSD header. I don't think they should be removed.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,495,2019-06-26T09:44:22Z,2019-06-30T22:05:50Z,2019-06-30T22:05:50Z,CLOSED,False,59,59,6,None,Filename changes.,14,[],https://github.com/d0k3/GodMode9/pull/495,https://github.com/Wolfvak,3,https://github.com/d0k3/GodMode9/pull/495#issuecomment-506051817,"LUMA uses 1:/rw/luma/ for its config files, so you should do that as well. Also, it is very messy to directly put files on the root directory.
Change some file extensions, so Windows software that depends on extensions know that they are FAT images and let you mount/check them.

(Also, what is the purpose of FIRM2 to FIRM7?)","""ctrnand_fat.fat16.img""? That sounds a bit redundant",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,495,2019-06-26T09:44:22Z,2019-06-30T22:05:50Z,2019-06-30T22:05:50Z,CLOSED,False,59,59,6,None,Filename changes.,14,[],https://github.com/d0k3/GodMode9/pull/495,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/495#issuecomment-507071325,"LUMA uses 1:/rw/luma/ for its config files, so you should do that as well. Also, it is very messy to directly put files on the root directory.
Change some file extensions, so Windows software that depends on extensions know that they are FAT images and let you mount/check them.

(Also, what is the purpose of FIRM2 to FIRM7?)","Sorry, but there's no way we're taking this over. By changing all those filenames you break an untold number of tutorials for basically no gain.
I'm okay with using the 1:/rw directory as an alternative though. You may do a new pull request without all those filename changes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,None,1,https://github.com/d0k3/GodMode9/pull/502,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/TurdPooCharger,2,https://github.com/d0k3/GodMode9/pull/502#issuecomment-507083046,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","The opinions and points made here are my alone; this is not on behalf of the GodMode9 team.
I am a frequent GodMode9 user, passerby who read this pull request, and someone who disagrees with the idea about changing the placement of the gm9 folder.

If you place the gm9 folder within sdmc:/3ds, Homebrew Launcher will see it as an empty folder when there isn't an 3DSX app named as gm9.3dsx within it. This would add clutter to its listings.
Relocating the work folder there also adds an additional directory level you have to go into to look for it versus crowding with the other 3DSX apps and folders. There are those who have lots of homebrew titles.
Many gm9 scripts would simply break when referencing between $[GM9OUT] vs 0:/gm9/out/etc.. Various DIY guides would also be rendered outdated when people become confused that gm9 is no longer visible or not found on root.
Luma3DS when booted from SD card has the work directory at sdmc:/luma. It would be weird to have luma folder at card root yet gm9 is put in smdc:/3ds.  Some end users might see GodMode9 not sharing the same tier of prestige as Luma3DS if its own folder was relocated.
CTRNAND Luma3DS needs 1:/rw/luma in order to hold config.bin when booting HOME Menu without SD card, recording error logs, and carrying FIRM payloads.
I'm having a hard time determining what sort of files CTRNAND GodMode9 may need at 1:/rw/gm9 that involves operations without the SD card.",True,"{'THUMBS_UP': ['https://github.com/legoj15', 'https://github.com/HIDE810']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/Wolfvak,3,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508891257,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","To be fair, we do plan to have a very simple configuration file to store some persistent data (brightness, etc) and I personally wouldn't mind changing the CTRNAND path to be inside the rw directory, in the case where GM9 is booted without an SD (be it from FIRM0, ntrboot or from a FIRM stored in a filesystem).
Changing the SD path is a no-go for me though, there's just no point to it and I believe it'd break too much existing documentation.
I'll leave the PR open for further discussion, but don't expect too much positive feedback.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/TurdPooCharger,4,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508892067,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).",I am unsubscribing from this pull request as @pthfdr-42 back-to-back commit pushes are bombarding my e-mail notifications.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,None,5,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508892164,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","@Wolfvak Fine...
However, I really dislike putting folders directly at the root of FS. Android is infamous for this, and the same can be said for all Linux programs that ignore XDG_CONFIG_DIR.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/Wolfvak,6,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508892386,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","For the record, I only said I ""[...] personally wouldn't mind changing [...]"", not that I would absolutely merge when the changes were implemented.
That decision still falls on @d0k3, which is why I kept the PR open after expressing my position on this matter.
And yeah, as @TurdPooCharger said, you really need to merge all future changes into a single commit with all the changes, instead of a single commit for every file. You can't change the past (well with git you can...) but try to make sure you follow this in the future.
EDIT: Regarding putting files at the FS root, I have to agree with you. The 3ds folder is there for a reason, and it's to prevent the mess that NDS homebrew suffered from. But GM9 has been going on for 3 years and there's a good chance a ton of documentation (some probably obsolete) rely on the folder being 0:/gm9. A good reason to keep it as it is, and has been for 3+ years.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508940700,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","Anything that breaks stuff that worked earlier won't be merged. We also don't need additional bootfirm paths. These are only relevant if GM9 is an integral part of your system (the bootloader), and the boot.firm file is important enough to be in the root of both, SD and CTRNAND. Even b9s handles stuff that way.
I'm okay with the 1:/rw/gm9 path as alternative to the 1:/gm9 path for support files.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,None,8,https://github.com/d0k3/GodMode9/pull/502#issuecomment-508958117,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).",I added additional boot pathes so you do not have to put files at the root of the FS. It won't affect existing users.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/502#issuecomment-515133625,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","Well, you're breaking support for 1:/gm9. Can't megre that, as some tutorials may refer to it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/502#issuecomment-515794714,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).","@pthfdr-42 - add back the support for 1:/gm9. Also do some boot speed testing (is there any noticable difference from your changes?). After that get back, and I'll merge the pr (if it doesn't destroy boot performance).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,502,2019-06-30T23:41:59Z,2019-07-29T00:24:24Z,2019-07-29T00:24:24Z,CLOSED,False,3,3,2,None,Change support file pathes.,11,[],https://github.com/d0k3/GodMode9/pull/502,None,11,https://github.com/d0k3/GodMode9/pull/502#issuecomment-515807973,"It is very messy to directly put files on the root directory, so I changed the support file pathes to 0:/3ds/gm9/ (since 0:/3ds/ is used by most homebrews) and 1:/rw/gm9/ (since LUMA uses 1:/rw/luma/).
Also I added the GM9 pathes as locations for boot.firm so you do not have to put them at the root directory (should only work when GM9 is installed to FIRM0, so it won't affect noobs).",I officially give up.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/503,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508591115,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","This looks correct, but would you mind simply making the function return unknown whenever there is no extension present? Just to make it more future proof.
Also, thanks for noticing, one of the points of the rewritten MPU and exception handling code was to prevent NULL reads.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/aspargas2,3,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508591577,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","The majority of checks in that function don't rely on file extension or filename at all, so I personally don't see any reason there shouldn't be detection for extension-less files in all the file types that it's able to recognize without an extension present.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,4,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508591825,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","I agree, that would create an odd corner case where (for example) fonts are recognized when they have the wrong extension, but not when they have none. Not that either case should happen often.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/aspargas2,5,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508592047,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","There are also some cases where a supported file would normally not have an extension, such as extdata files (recognized as DIFF) and cetks and tmds from the CDN.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/Wolfvak,6,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508593211,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","What about making it point to an empty ("""") string instead? That would still work, right?
My problem is if a new type is implemented then it will have to check against NULL, too, but they might forget to add the check and the bug resurfaces.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/aspargas2,7,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508593668,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Yeah I guess that would work, just adding the following after line 27:
if (!ext) ext = """";",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,8,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508598290,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020",That makes sense. Nulls are a terrible thing.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/aspargas2,9,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508598579,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020",Doesn't that change make the first commit unnecessary?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/Wolfvak,10,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508598626,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Remember there's no need to check for the pointer being NULL, so would you mind removing those 2 checks you added earlier? Also, try to move the fix after the last variable declaration, with proper indentation (looks weird and could confuse people otherwise)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,11,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508600398,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Sure, but, by the same token, wouldn't I remove all the previous ones as well? There were 2 or 3 already.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,12,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508724797,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","I did these things, you are free to cherry-pick as you like (if just to flatten the commit, even...). I will be busy messing with SPI drivers.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/profi200,13,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508751304,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Regarding SPI it has been fully figured out: https://github.com/derrekr/fastboot3DS/blob/master/source/arm9/hardware/spicard.c
That doesn't implement quad SPI though since the speed gain will be low and we don't know the cmds for each flash type to enable this mode. What's missing is the actual SPI flash code. Also mentioning #40",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,14,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508753758,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Neat, thank you! I will be looking at it in the next few hours!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/Wolfvak,15,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508891059,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020","Sorry it took so long to merge, I kinda missed the new commits.
Thanks for the fix, and make sure to let us know if you find anything else!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,503,2019-07-04T23:23:38Z,2019-07-06T02:35:41Z,2019-07-06T13:18:36Z,MERGED,True,7,3,1,https://github.com/dratini0,Fix crashes when opening extensionless files.,5,[],https://github.com/d0k3/GodMode9/pull/503,https://github.com/dratini0,16,https://github.com/d0k3/GodMode9/pull/503#issuecomment-508925981,"I have noticed that trying to open extensionless files crashes, and that this happened after @Wolfvak's MPU fix. Adding some nullchecks seems to fix the issue.
Here is a crash report from the GM9-TD hourly:
Exception: Data Abort (4)
GodMode9 v1.8.0-69-g3cbbd538
2019-07-05 01:21:46
 
R00: 00000000 | R01: 08064646
R02: 00000004 | R03: F19FFFFD
R04: 227ED840 | R05: 00F0A0C8
R06: 08064646 | R07: 00000000
R08: 0806464A | R09: 00000200
R10: 227ED940 | R11: 2000135C
R12: 00000005 | R13: 227ED6B8
R14: 08034EDC | R15: 0804D1E4
CPSR: 200000DF

Stack:
227ED6B0: 40 D8 7E 22 64 18 03 08 40 D8 7E 22 C8 A0 F0 00 
227ED6C0: 65 13 00 20 5C 13 00 20 00 00 00 00 DC 4E 03 08 
227ED6D0: 00 00 00 00 53 4D 44 48 33 44 53 58 2C 00 0A 0E 

Code:
0804D1A0: 12800001 131308FF 12800001 E12FFF1E 
0804D1B0: E3520000 0A000020 E92D41F0 E1A07000 
0804D1C0: E1A06001 E0818002 EA000005 E0540005 
0804D1D0: 1A000014 E3550000 0A000014 E1580006 
0804D1E0: 0A000012 E4D74001 EBFFFB93 E0800004 
0804D1F0: E5D03001 E2033003 E3530001 02844020 
0804D200: E4D65001 EBFFFB8C E0800005 E5D03001 
0804D210: E2033003 E3530001 1AFFFFEB E2850020",No problem!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,504,2019-07-06T23:24:40Z,2019-07-07T04:12:03Z,2019-07-07T17:39:21Z,MERGED,True,2,174,2,https://github.com/dratini0,Get rid of extra copy of readme,1,[],https://github.com/d0k3/GodMode9/pull/504,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/504,See 9ab9c01,See 9ab9c01,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,504,2019-07-06T23:24:40Z,2019-07-07T04:12:03Z,2019-07-07T17:39:21Z,MERGED,True,2,174,2,https://github.com/dratini0,Get rid of extra copy of readme,1,[],https://github.com/d0k3/GodMode9/pull/504,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/504#issuecomment-508970065,See 9ab9c01,Well that was a dumb bug. Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/509,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/509#issuecomment-511613827,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","What are potential implementation pitfalls? For example, I remember if you didn't have any title installed then FBI would fail to install any CIAs until you installed something from the eShop - something about internal databases not existing yet.
Also, how well has this been tested? The code looks great from a quick glance, but could it misbehave on something exotic like developer consoles?
Finally, could you add a sort of ""BDRI Context"" feature? Just for performance reasons, that way you don't have to keep opening and closing files, which incur in costly FAT and flash operations. A possibility would be to have that context keep a pointer to the open file handle, plus any other needed data and functions to create the context (open the file, retrieve any data), manipulate it (ReadTitleInfoEntryFromDB, ...) and finally flush/destroy it. Just an idea.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/ihaveamac,3,https://github.com/d0k3/GodMode9/pull/509#issuecomment-511618616,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","if you didn't have any title installed then FBI would fail to install any CIAs until you installed something from the eShop

FBI calls AM_InitializeExternalTitleDatabase(false) to create the database if it doesn't exist.
Until there's a way to generate the title database, one lazy method would be for something to include an empty title.db for use. 3DS Hacks Guide could do this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,4,https://github.com/d0k3/GodMode9/pull/509#issuecomment-511622391,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Yeah, this code is currently unable to create a DISA/DIFF file from scratch or initialize the inner FAT from scratch, so any feature to install a title (such as the ""CartInstall"" fork I made using this code) would currently have the pitfall you described. One way to fix that would be to just embed a blank title.db that gets copied into the proper location if one doesn't already exist, but that's not really a proper solution. A proper solution would involve being able to create an artificial DIFF file of an arbitrary internal size and initialize a BDRI filesystem with arbitrary values for pretty much everything in the FS header, which is all doable, but would require a non-negligible amount of additional development and testing.
This code has only been tested on retail consoles, but it has been tested on them enough times that I'm reasonably confident there aren't any major bugs in its functionality on them. The only part of it that has not been tested is writing to DISA files; when designing that code I only had DIFF in mind, but later realized there was no reason it wouldn't also work with DISA. As for developer systems, I have almost no experience or knowledge on what's different about them and their database files, so I have no idea if this code would work on them, as I don't know if there's something fundamentally different about their version of DIFF and BDRI.
I agree opening and closing the file every time an entry read, removed, or added isn't optimal, but I think a better overall solution would be to add support to mount arbitrary DISA/DIFF files, resulting in a virtual file to represent the contents of IVFC lvl 4, then change the BDRI code to operate on a file using fvx_ calls rather than DisaDiff ones. I'll start looking at implementing that within couple days.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,5,https://github.com/d0k3/GodMode9/pull/509#issuecomment-511952673,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Also, as I already mentioned in IRC but forgot to mention here, this code isn't able to work with a couple special case tickets which are not the usual 0x350 bytes, so the Ticket struct in GodMode9 wouldn't apply to them. The functions in my code that use that struct are effectively just wrappers for ones that can handle entries of arbitrary sizes, though, so modifying my code to handle such special case tickets would be trivial.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/wwylele,6,https://github.com/d0k3/GodMode9/pull/509#issuecomment-512046191,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Glad to see the work here is being done. Sadly I don't have time to help code reviews in detail. As one who has implemented DISA/DIFF/InnerFAT stuff three times, I want to give some high-level advise:

Write unit tests early, as this stuff is too complicated to get right on the first try. You want to find mistakes early before screwing up user's 3DS data. I wrote my unit test as a program that randomly reads/writes/adds/removes items in the file system and verify the content.
Think optimization early. The DPFS+IVFC(+upper layer AES encryption) data format can cause really bad performance if the program is written in a naive way. For example, avoid fixing the IVFC hash chain on every write operation, because adjacent write operations will result in fixing the same hash multiple times on the upper levels. Try clustering them to, for example, when closing the file.

For reference, my latest attempt is here if you didn't know yet: https://github.com/wwylele/save3ds/tree/master/libsave3ds/src (Sorry for coding in rust). I hope it can help.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,7,https://github.com/d0k3/GodMode9/pull/509#issuecomment-512066695,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","I appreciate the advice, and all your work in reverse engineering the files initially and writing a working tool to modify them. Your tools were very helpful in testing this code.
To the first point: I definitely agree with that there would be no way to get this right on the first try. There was a long cycle of trial and error and silly mistakes with both the DIFF and the inner FAT side of things. This code being in only two commits is the result of a lot of squashing and a lot of not committing things till they worked.
To the second point: I admittedly did not have optimization as a huge priority when writing this. I did exactly the thing you just advised not to do, just because at that time I didn't foresee this code being used for anything more than a few writes at a time, and @Wolfvak already pointed out another way in which it could be better optimized. I intend to implement both of those suggestions now that this code is looking at going into a context where it could be used for any number of things of various intensity, so I'm going to ask that this not be merged until I do that (or someone else does it faster, as I tend to be rather slow in working on things).
And yeah, I know of save3ds; its existence was the inspiration for me to attempt to write this in the first place. I don't know any rust, though, which I'm actually kind of glad about because it forced me to write this just from 3DBrew rather than sloppily porting half of another tool's code to work for this context.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/509#issuecomment-517452505,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","@aspargas2 - you get back once you deem it ready to merge, alright? I'll miss it otherwise. I definitely want this in the next GM9 release.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,9,https://github.com/d0k3/GodMode9/pull/509#issuecomment-517459227,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","@d0k3 Will do. I've just had a lot of IRL stuff going on this week and the last, but I should have a lot more free time next week to work on this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/509#issuecomment-522734516,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Any news @aspargas2 ? This is still not ready to merge, right?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,11,https://github.com/d0k3/GodMode9/pull/509#issuecomment-522761306,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","@d0k3 Yeah, it's still not ready. I'll let you know when it's ready for another review. Really sorry about all the delays; my 3DS is not in a working state right now and with school starting I haven't had a lot of time to work on this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,12,https://github.com/d0k3/GodMode9/pull/509#issuecomment-533806408,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","@d0k3 @Wolfvak I think this is ready for another review. It currently only caches 32 writes, but changing that is just changing the number on line 9 of vdisadiff.c. Your wish is my command on what number you want to put there.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/aspargas2,13,https://github.com/d0k3/GodMode9/pull/509#issuecomment-536212325,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Ok, should be ready now (third time's the charm, right?)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,509,2019-07-15T21:14:16Z,2019-09-29T18:01:21Z,2019-11-27T17:33:32Z,CLOSED,False,1483,179,18,https://github.com/aspargas2,DISA/DIFF writing and title database inner FAT support,10,[],https://github.com/d0k3/GodMode9/pull/509,https://github.com/d0k3,14,https://github.com/d0k3/GodMode9/pull/509#issuecomment-536325552,"This adds support for writing to DISA and DIFF containers, and for manipulating the inner FAT filesystem of title database files (this includes ticket.db). This does not directly add anything usable to the end user, just the code to make such things. I imagine this could eventually be turned into things like having an Install as title option on CCI, NCCH, and CIA files, and support for mounting title database files with full write access. This code could also be modified to work with the inner FAT filesystems of savegames and extdata, which I may do myself at some point.
If master is not the appropriate branch to which to be making the PR, given its nature of not adding any immediately useful functionality, just let me know what would be appropriate.
Also, credits go entirely to @wwylele for reverse engineering and documenting the title database stuff on 3DBrew.","Alright, merged to master. Thanks a lot, that's real good stuff! Looking forward to additional work you may be doing on this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/517,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515650435,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, wow, that's a lot of changes.
Gotta say, thanks for starting this on your own! Now, onto the problems...


There's a lot of repeated/dead code. why is there a type for every single type of flash there's been? Could it not just be condensed to a few types (9bit EEPROM, 16bit EEPROM, 24bit FLASH, ...), and have a simple size or pagecount variable? GM9 is already pretty big as it is, so the least amount of unneeded code/data that's added, the better.


The SPICARD code is essentially a duplicate of the same code already present for the ARM11. I was planning to have both processors share the same source code by putting it into the common folder, just like the PXI code (that's what f74c9bb was for).


The first point mostly applies to NDS carts - dunno if 3DS carts added so many different flash types where it actually becomes saner to include function ops for each type before trying to code a routine that can handle anything.
Other than that, this looks pretty darn good.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515673316,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, nice!
But, try to make a clean pull request, don't do a pull request with merge conflicts (even resolved ones). And, as @Wolfvak said, the code may still need some cleanup, don't duplicate code.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,4,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515674668,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@Wolfvak :
1: I thought it would make sense to have an object for every type of flash there was in an NTR cart, as they are a bloody mess. Using block write on a 256K Sanyo is incredibly slow, while not so much on the ST chips. Then there is the mysterious 8M chip inside Art Academy, which likely doesn't support page write at all. In contrast, CTR flash chips (at least in card1 titles) are pretty regular, I have only ever seen three chips in one series. (Out of which one happens to actually be officially documented). What would make sense to me is getting rid of the CTR save types not sighted in the wild, and making infrared orthogonal to the actual save type (as in struct CardType { const CardTypeData *chip; bool infrared; })
2: Good point.
@d0k3: Would rebasing it upon master work? Squashing it into one commit doesn't seem right.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/Wolfvak,5,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515701286,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Merged SPI driver looks okay to me. I'd still like to look a bit further into savegame chip management, but that's one of two problems solved.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515702382,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@dratini0 - yeah, maybe rebasing on master works. We just don't want a borked commit history. You can also redo my ""historical"" commits yourself if you want to.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/aspargas2,7,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515705352,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","So, I tested a few carts building from commit 5b757f0. Here's what I found:

Mariokart DS works perfectly: dumped saves match with those from Checkpoint, and changing a save then restoring it reflects the change when dumping again with Checkpoint.
Pokemon Black, Pokemon Omega Ruby, and Pokemon X (the foremost of which has builtin IR) all exhibit the same behavior: no .sav file appears in the virtual gamecart drive. The 4 byte jedecid_and_sreg.bin file does appear, but attempting to open the file action menu on it or copy it to anywhere yields a data abort. The exception dump for each of these carts is attached to this comment.
Pokemon Black 2, another IR cart, appears to have inconsistent behavior: most of the time it exhibited the same behavior described in the previous point (its exception dump is also attached), but one time the .sav file actually did appear in the gamecart mount, and jedecid_and_sreg.bin was readable. However, the .sav file was only 512 bytes, and did not show any semblance of the actual save of the game when opened in the hex editor. I was unable to replicate this latter behavior, and it only occurred once, seemingly randomly, when mounting the virtual cart drive.
Mariokart 7, Tetris Axis, Rayman 3D, Super Mario 3D Land, and Paper Mario Sticker Star all seem to work in that the .sav file properly appears and is readable, but I did not do any testing beyond that with them. If I ever do, I will comment again with an update.

All of this testing was done on a New 2DS XL, if that's at all relevant.
exception_dump_pkmn_black2.txt
exception_dump_pkmn_or.txt
exception_dump_pkmn_x.txt
exception_dump_pkmn_black.txt
Edit: ignore the fact I accidentally named the exception dump with ""oras"". It was only tested with Omega Ruby, though I imagine Alpha Sapphire would probably have similar behavior.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,8,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515714240,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@aspargas2 :
Amazing, thank you for the data. I think I have an idea why Omega Ruby and X crash: IIRC they are card2 titles (not yet supported), and I messed up the NO_CHIP case. Ooops.
For black and black2, I will have to investigate.
@Wolfvak : Yup, working on that.
@d0k3 : Thank you, I will do that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,9,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515725691,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@aspargas2 :
I think I have fixed the crashes now, it should be possible to read the JEDEC ID file now, even if the chip is not recognized (which happens to be the very reason I made that file...) Reading the IR cards may or may not have been fixed, sadly I do not have one at hand. Do you want to test it? If so, I will attach a couple of test builds, from two different commits. If not, I will have an IR cart myself in a week or two.
57fb0cd is the tip of dratini0:cartsave, 59c2f51 is the tip dratini0:cartsave_test, if you want to compile it yourself.
GodMode9.zip",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/aspargas2,10,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515729462,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","The 57fb0cd build you posted and the 59c2f51 build you posted (which still identifies itself as GodMode9 v1.8.0-93-g57fb0cd8 for some reason) appear to have the same behavior across the board:

The system crashing when selecting jedecid_and_sreg.bin has been fixed for all carts I tested, but other strange issues have arisen with that file, described in the following points.
For Pokemon Omega Ruby and Pokemon X, opening the file action menu on the jedecid_and_sreg.bin file or performing any operation on it (copying it somewhere, opening it in the hex editor, or calculating the SHA256) hangs the system for about one second, then appears to successfully perform the operation. However, calculating the SHA256 of the file directly, copying the file with the Y button to the SD then calculating the SHA256, and copying the file with the ""copy to gm9/out/"" option then calculating the SHA256 all yield different hashes, so something is obviously wrong with reading whatever data this file represents. Also, this file's hash directly in the virtual mount, hash after copying with the Y button, and hash after copying with the ""copy to gm9/out/"" option are each the same between Omega Ruby and X, which I don't think is supposed to happen. Only these two carts exhibited the hanging the system for one second behavior.
For Pokemon Black and Black 2, the .sav file was still not present, and repeatedly calculating the SHA256 of jedecid_and_sreg.bin yielded a different hash every time. Different data was also present every time when repeatedly opening the hex editor for that file, and the byte 0xFF seemed to be commonly appearing.
Everything else appears to be working the same as with 5b757f0.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,11,https://github.com/d0k3/GodMode9/pull/517#issuecomment-515749897,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Thank you, that seems par for the course in most cases. The wrong commit hash in the build is because I built it before committing. So for each of your observations:

Yay, I guess
I forgot to add error handling code, thank you. If I did it right, it would be a read error or all just FFs.
Okay, that is still pretty broken. I think we are at the point where I need to get my own IR cart, thank you for all your help!
Good, thank you for testing those too!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/517#issuecomment-522734326,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Alright, what's the state of this pull request @dratini0 ? Anything I can help with? Think it's ready to merge?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,13,https://github.com/d0k3/GodMode9/pull/517#issuecomment-522763887,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Sorry for essentially disappearing for a while, I have been a bit busy. As things stand now, support for infrared carts is broken, and so is support for 8MB flash chips. I have had Art Academy for a while, (which is how I know it's broken), and I just got Active Health. (Curiously, it is broken in TWLSaveTool too)

I think I will have more to show in two weeks or so.
On 19 August 2019 21:10:18 BST, d0k3 ***@***.***> wrote:
Alright, what's the state of this pull request @dratini0 ? Anything I
can help with? Think it's ready to merge?

--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#517 (comment)

Bálint Kovács",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,14,https://github.com/d0k3/GodMode9/pull/517#issuecomment-524652567,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.",@dratini0 - I'd suggest you just get back once you think it's ready to be reviewed and merged.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,15,https://github.com/d0k3/GodMode9/pull/517#issuecomment-534267239,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@dratini0 - well, don't want to harass you, but any news? And, don't worry, it will take as long as you need. A small update on the current state of things would be nice, though (I really want this inside GM9, if that's not obvious).",True,{'LAUGH': ['https://github.com/legoj15']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,16,https://github.com/d0k3/GodMode9/pull/517#issuecomment-536327518,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Oops, accidential close. Sorry!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,17,https://github.com/d0k3/GodMode9/pull/517#issuecomment-536336107,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Hi!

I don't think I will get it finished to my complete satisfaction anytime soon. I have fixed 8MB games, like Art Academy, but I have been making little progress on IR titles. However, I did get a full logic analyzer trace from the actual hardware.

How about I just disable support for IR titles for now? That seems pretty mergable, and would take pressure off of me.
On 25 August 2019 19:21:37 BST, d0k3 ***@***.***> wrote:
@dratini0 - I'd suggest you just get back once you think it's ready to
be reviewed and merged.

--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#517 (comment)

Bálint Kovács",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,18,https://github.com/d0k3/GodMode9/pull/517#issuecomment-536340848,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Yup, that's a pretty good solution. Fully acceptable. And, you may continue at any point in the future. Thanks a lot!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,19,https://github.com/d0k3/GodMode9/pull/517#issuecomment-536358609,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Rebasing this onto staging was not my brightest moments, so I rebased it again against master. Should be ready for review and merge.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/Wolfvak,20,https://github.com/d0k3/GodMode9/pull/517#issuecomment-538121976,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, assuming all the magic hardware functions work correctly I'd say this is ready to merge, I've just reviewed it and other than a super minor issue, it looks fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/Wolfvak,21,https://github.com/d0k3/GodMode9/pull/517#issuecomment-538164229,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.",Last request from me - add yourself to the credits and list what exactly you implemented.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,22,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540690752,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, just so everyone is on the same page: The code looks very good to me, and I'd have merged it by now, but there's one thing missing. I want someone but the dev (no offense meant, @dratini0, devs miss stuff), someone who preferable has a large amount of carts at their disposal (DS and 3DS) to test this before merging.
@TurdPooCharger maybe?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,23,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540711026,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@dratini0 - a quick question - do you also handle card2 saves? Like Animal Crossing New Leaf? I'd just test, but I can't rn.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,24,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540730760,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Sorry, not yet. I think I can implement reading (since it is just the card's main memory), but I don't really have an idea on how to write them yet.
On 10 October 2019 19:23:01 BST, d0k3 ***@***.***> wrote:
@dratini0 - a quick question - do you also handle card2 saves? Like
Animal Crossing New Leaf? I'd just test, but I can't rn.

--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#517 (comment)

Bálint Kovács",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/TurdPooCharger,25,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540793570,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@d0k3, sorry bud. None of my 3DS game collection are cartridges..",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,26,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540840459,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","@dratini0 don't worry too much. As long as it fails gracefully, it's all good.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,27,https://github.com/d0k3/GodMode9/pull/517#issuecomment-540847998,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Yeah, it just classifies it as NO_CHIP, much like NTR ""retail NAND"" cards and other odd stuff.
On 11 October 2019 00:34:49 BST, d0k3 ***@***.***> wrote:
@dratini0 don't worry too much. As long as it fails gracefully, it's
all good.

--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#517 (comment)

Bálint Kovács",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,28,https://github.com/d0k3/GodMode9/pull/517#issuecomment-541088253,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, merged. Thank you, @dratini0! Looking forward to any other improvements you may add.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/d0k3,29,https://github.com/d0k3/GodMode9/pull/517#issuecomment-541934143,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, we got a minor complaint. Pokemon X may be wrongly detected. There is a softlock when trying to open the ""jedecid_and_sreg.bin"" file. There is also a timeout here (arm9/source/gamecart/card_spi.c:126), but that takes 10 seconds, which is quite long. Would you recommend just shortening the delay, @dratini0? Maybe some better solution?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,30,https://github.com/d0k3/GodMode9/pull/517#issuecomment-541984632,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Hmm, it might cause problems with writing Art Academy, but I will have to test that. If so, it might male sense to make the delay different for different operations.

What is X detected as?
On 14 October 2019 22:32:11 BST, d0k3 ***@***.***> wrote:
Okay, we got a minor complaint. Pokemon X may be wrongly detected.
There is a softlock when trying to open the ""jedecid_and_sreg.bin""
file. There is also a timeout here
(arm9/source/gamecart/card_spi.c:126), but that takes 10 seconds, which
is quite long. Would you recommend just shortening the delay,
@dratini0? Maybe some better solution?

--
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub:
#517 (comment)

Bálint Kovács",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/Wolfvak,31,https://github.com/d0k3/GodMode9/pull/517#issuecomment-542302534,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Sorry for the late reply, I'm the one who reported the Pokemon X issue. It's not that it's wrongly detected (I don't think it is, but how would I check the cart type anyway?), it's more that trying to open jedecid_and_sreg.bin times out the CardSPIWaitWriteEnd function.
By the way, Pokemon X is a card2 type, so the savegame is stored in a NAND. Don't think those should have the jedecid_and_sreg.bin file available to them.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,517,2019-07-27T00:44:51Z,2019-10-11T14:29:17Z,2019-10-19T23:30:58Z,CLOSED,False,874,540,19,https://github.com/dratini0,"Implement save management, closes #40",22,[],https://github.com/d0k3/GodMode9/pull/517,https://github.com/dratini0,32,https://github.com/d0k3/GodMode9/pull/517#issuecomment-544205790,"I have made some progress with the save management feature for #40 . Here is what I have so far:

 Read/Write saves on NTR carts, with code borrowed from TWLSaveTool (and from Fastboot3DS)
 Read/write encrypted saves on CTR carts by extending the code from TWLSaveTool

I would still like to do the following things before merging:

 Test the code I have for Art Academy (FLASH_8MB)
 Test with a cartridge with infrared in it
 Format the borrowed code to match the rest of GodMode9
 Get rid of the old EEPROM.c

It would be nice to have the following:

 Decrypting the CTR saves
 Figuring out card2 saves (as far as I know, it is read just fine, as part of the untrimmed ROM, but we can't write it. It would also make sense to get it out into a separate file.)
 Figuring out what is going on with WarioWare DIY (that one has been bugging me!) See here

Any input on the code so far would be appreciated.","Okay, yes, that is fair enough - if we know for sure that a game has no SPI flash, there is no use in trying to find out what SPI flash it has. To get around this, I would need to add some logic to identify card2 and retail NAND games. (Also, sad times, card2 games are more complicated than I thought)
As for d0k3's idea of shortening the timeout it does seem to mess with 8MB writing, but it would still be beneficial for games (IIRC there are a handful) with no saving whatsoever.
I will come up with patches for these things Thursday-Friday-ish",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/GlaZedBelmont,1,https://github.com/d0k3/GodMode9/pull/519,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/519#issuecomment-518398782,,"That's not so good, actually. If essential.exefs is not present, this prevents you from dumping the bootroms. Maybe dumping essential.exefs via another menu entry would be better? I'd also like to read @annson24 's take on this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/519#issuecomment-524655082,,@GlaZedBelmont - I can't take that pull request without the changes I requested. Want to still do them?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/GlaZedBelmont,4,https://github.com/d0k3/GodMode9/pull/519#issuecomment-526282455,,"yeah, hold up, ill do the changes real quick.
something like if it doesnt find essential.exefs, it asks you if you still want to dump the bootroms",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/519#issuecomment-536328533,,"Okay, sorry to have kept you waiting that long!
It would still be better to have a separate entry for dumping essential.exefs. Can you do that?
Normal course of action would be to first do a pull request on @annson24's repo.
https://github.com/annson24/GM9Megascript
Dunno if @annson24 (pingpingping) is still active, so it's okay to do pull requests here, too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/519#issuecomment-541336266,,"Okay, I had a look over your changes and also tested the script. Your changes introduced some display errors ( strings too long) and, well, it should have been a separate entry all along. I tried to separate your changes into a new menu entry myself, but failed.
As we're nearing a new release and I actually want that feature in, I went ahead and added the menu entry and code myself. I still want to thank you for your contribution, we just couldn't merge it this time.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/GlaZedBelmont,7,https://github.com/d0k3/GodMode9/pull/519#issuecomment-541360200,,"No problem, I PRed the script itself instead of PRing GM9",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,519,2019-08-05T18:24:56Z,2019-10-12T15:42:28Z,2019-10-12T20:50:40Z,CLOSED,False,23,6,1,https://github.com/GlaZedBelmont,added essential.exefs dump to the boot9&11 script,3,[],https://github.com/d0k3/GodMode9/pull/519,https://github.com/GlaZedBelmont,8,https://github.com/d0k3/GodMode9/pull/519#issuecomment-541360445,,"also, if you could add me and win9x to the script's credits, we both worked on the idea and creation of the script 😃",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,533,2019-09-08T17:52:44Z,2019-09-08T18:08:57Z,2019-09-08T18:08:57Z,CLOSED,False,7,2,1,https://github.com/aspargas2,fix #532,1,[],https://github.com/d0k3/GodMode9/pull/533,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/533,"Fixes a NULL pointer dereference when cancelling ticket.db mounting, fixing issue #532","Fixes a NULL pointer dereference when cancelling ticket.db mounting, fixing issue #532",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,533,2019-09-08T17:52:44Z,2019-09-08T18:08:57Z,2019-09-08T18:08:57Z,CLOSED,False,7,2,1,https://github.com/aspargas2,fix #532,1,[],https://github.com/d0k3/GodMode9/pull/533,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/533#issuecomment-529227641,"Fixes a NULL pointer dereference when cancelling ticket.db mounting, fixing issue #532","Er, wait a sec, now this is compiling as an unbootable firm if I rebase pull staging, should have checked to make sure I had pulled before making this",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,533,2019-09-08T17:52:44Z,2019-09-08T18:08:57Z,2019-09-08T18:08:57Z,CLOSED,False,7,2,1,https://github.com/aspargas2,fix #532,1,[],https://github.com/d0k3/GodMode9/pull/533,https://github.com/aspargas2,3,https://github.com/d0k3/GodMode9/pull/533#issuecomment-529228076,"Fixes a NULL pointer dereference when cancelling ticket.db mounting, fixing issue #532",Closing this for now until I can figure out why that's happening,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,534,2019-09-08T19:36:35Z,2019-09-09T21:21:52Z,2019-09-21T13:26:27Z,MERGED,True,5,2,1,https://github.com/aspargas2,fix #523 - take 2,1,[],https://github.com/d0k3/GodMode9/pull/534,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/534,Hopefully without breaking everything this time,Hopefully without breaking everything this time,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,534,2019-09-08T19:36:35Z,2019-09-09T21:21:52Z,2019-09-21T13:26:27Z,MERGED,True,5,2,1,https://github.com/aspargas2,fix #523 - take 2,1,[],https://github.com/d0k3/GodMode9/pull/534,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/534#issuecomment-529672227,Hopefully without breaking everything this time,Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,535,2019-09-13T01:28:25Z,2019-09-14T14:33:13Z,2019-09-14T17:33:20Z,MERGED,True,2,2,1,https://github.com/ihaveamac,Makefile: call firmtool as a PY3 module,1,[],https://github.com/d0k3/GodMode9/pull/535,https://github.com/ihaveamac,1,https://github.com/d0k3/GodMode9/pull/535,"Calling firmtool directly may not work as expected on Windows, where
Python is not added to PATH by default. However, the py launcher is
always added to a directory in PATH by default.
The only downside is that firmtool with Python 2 will not automatically
be called. Since Python 3.5 is required for add2tar, however, this
shouldn't be an issue.","Calling firmtool directly may not work as expected on Windows, where
Python is not added to PATH by default. However, the py launcher is
always added to a directory in PATH by default.
The only downside is that firmtool with Python 2 will not automatically
be called. Since Python 3.5 is required for add2tar, however, this
shouldn't be an issue.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,544,2019-10-09T23:32:17Z,2019-10-09T23:36:12Z,2019-10-09T23:36:12Z,MERGED,True,2,0,1,https://github.com/knight-ryu12,Travis: Enable Sudo-safe container,1,[],https://github.com/d0k3/GodMode9/pull/544,https://github.com/knight-ryu12,1,https://github.com/d0k3/GodMode9/pull/544,"Use latest ubuntu distribution, this time Bionic.","Use latest ubuntu distribution, this time Bionic.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/545,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541274425,,"honestly, wouldn't it be easier to just merge the script used to do this instead of having to ask you each time there's a release with an updated readme?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Nemris,3,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541285324,,"Sure, but I'm in no way proficient enough with make to risk submitting a pull request to the Makefile, at the moment.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Wolfvak,4,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541329607,,if you use a python script just merge that into the utils dir and I'll add it to the makefile,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541335468,,"Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/Nemris']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Nemris,6,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541343522,,"@Wolfvak The Python script is what does the job, but there's also a ""patch database"" consisting of a gzipped .json, which takes care of the more advanced search and replaces. Is there a way to handle that?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Wolfvak,7,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541343700,,I suppose it could be placed in the same dir as the script?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,545,2019-10-12T02:18:26Z,2019-10-12T15:33:12Z,2019-10-12T17:47:48Z,CLOSED,False,4,2,1,https://github.com/Nemris,Update user manual,1,[],https://github.com/d0k3/GodMode9/pull/545,https://github.com/Nemris,8,https://github.com/d0k3/GodMode9/pull/545#issuecomment-541346853,,@Wolfvak #546.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,546,2019-10-12T17:44:43Z,2019-10-13T16:33:31Z,2019-10-13T16:33:31Z,MERGED,True,142,0,2,https://github.com/Nemris,Add Unmark as an external tool,1,[],https://github.com/d0k3/GodMode9/pull/546,https://github.com/Nemris,1,https://github.com/d0k3/GodMode9/pull/546,"unmark is a tool to produce an user manual from the README.md.
The patch.json.gz file contains a list of patterns to match and
their replacements.
If unmark complains about being unable to match a pattern, please open
an issue with the warning and your README.md at
upstream.","unmark is a tool to produce an user manual from the README.md.
The patch.json.gz file contains a list of patterns to match and
their replacements.
If unmark complains about being unable to match a pattern, please open
an issue with the warning and your README.md at
upstream.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,546,2019-10-12T17:44:43Z,2019-10-13T16:33:31Z,2019-10-13T16:33:31Z,MERGED,True,142,0,2,https://github.com/Nemris,Add Unmark as an external tool,1,[],https://github.com/d0k3/GodMode9/pull/546,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/546#issuecomment-541433803,"unmark is a tool to produce an user manual from the README.md.
The patch.json.gz file contains a list of patterns to match and
their replacements.
If unmark complains about being unable to match a pattern, please open
an issue with the warning and your README.md at
upstream.","looks sane, will merge and add to the makefile to regenerate the readme on release target",True,{'THUMBS_UP': ['https://github.com/Nemris']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,547,2019-10-12T22:02:18Z,2019-10-13T16:45:32Z,2019-10-13T16:45:32Z,MERGED,True,1,1,1,https://github.com/GlaZedBelmont,added credits from the essential.exefs script,1,[],https://github.com/d0k3/GodMode9/pull/547,https://github.com/GlaZedBelmont,1,https://github.com/d0k3/GodMode9/pull/547,"we both thought and wrote the script, so I thought the addition of the names would be great","we both thought and wrote the script, so I thought the addition of the names would be great",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,547,2019-10-12T22:02:18Z,2019-10-13T16:45:32Z,2019-10-13T16:45:32Z,MERGED,True,1,1,1,https://github.com/GlaZedBelmont,added credits from the essential.exefs script,1,[],https://github.com/d0k3/GodMode9/pull/547,https://github.com/Nemris,2,https://github.com/d0k3/GodMode9/pull/547#issuecomment-541391941,"we both thought and wrote the script, so I thought the addition of the names would be great","Unrelated, but it seems ""8bitwonder"" is mentioned twice.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,547,2019-10-12T22:02:18Z,2019-10-13T16:45:32Z,2019-10-13T16:45:32Z,MERGED,True,1,1,1,https://github.com/GlaZedBelmont,added credits from the essential.exefs script,1,[],https://github.com/d0k3/GodMode9/pull/547,https://github.com/Wolfvak,3,https://github.com/d0k3/GodMode9/pull/547#issuecomment-541434731,"we both thought and wrote the script, so I thought the addition of the names would be great","Merged. Also, thanks for noticing that @DMSalesman, will fix up in the next commit.",True,{'THUMBS_UP': ['https://github.com/Nemris']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,1,https://github.com/d0k3/GodMode9/pull/548,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,2,https://github.com/d0k3/GodMode9/pull/548#issuecomment-543144999,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","@d0k3, the nandcmac.c I worked on does not include this commit you made several days ago.
My computer setup is having issues compiling the latest hourlies, so the coding and testing was done on a slightly older build where make outputs working FIRM. I'll probably nuke my Manjaro and start fresh again, even though it and devkitarm was installed less than a month ago.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/Wolfvak,3,https://github.com/d0k3/GodMode9/pull/548#issuecomment-543266045,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","This should probably be merged into it's own branch in the GM9 repo, not staging.
If this fixes #494 please edit the title to reflect so.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/548#issuecomment-543328163,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","@TurdPooCharger - don't bother too much about stuff like missing commits now. You pr needs some refactoring, though, as @Wolfvak wrote. That could be done in a lot less code. Also, this will be in the next release.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,5,https://github.com/d0k3/GodMode9/pull/548#issuecomment-544139787,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","About the insanity code with too many if and else if, the only programming I do these days
is GM9 scripting. The basics like for and while loops are overlooked when one is terribly
out of practice and does not code with real or more advanced languages on a consistent basis.

I can't think of a good way for the CheckAgbSaveHeader and FindAgbSaveSlotOffset functions
calling from another function that shares the same list of offsets when testing or finding the
newer save slots.
For CheckAgbSaveHeader, the top slot at 0x0 is (usually) the first available slot that fits the
agbsave criterias for all save types. The bottom offsets are checked in case the game has made only one save where the top slot doesn't exist yet.
For FindAgbSaveSlotOffset, the top slot's offset is already a given. Because of that rare scenario
where the top slot hasn't been filled in yet, there is no reliable way of knowing ahead of time where
that bottom slot is located other than to search for the .SAV header at those possible bottom offsets.
I suppose there's a way to look for save type info in the *.app that has the .CCA footer, which is
super messy looking in the *.tmd to find that game *.app. Both of those files can be missing..
One approach is to adjust CheckAgbSaveHeader to only search for bottom slots to match the offset list found in FindAgbSaveSlotOffset, so that they can share the same list. I don't recommend this as ignoring the top slot increases wasteful computing.
Another approach is to the find bottom slot in CheckAgbSaveHeader, compare which slot has the higher counter, and then return or pass the offset value back to CalculateFileCmac and ReadWriteFileCmac along with the cmac_type. This basically eliminates FindAgbSaveSlotOffset but now has CheckAgbSaveHeader returning two outputs. I don't believe this can done in a clean fashion without some rewrite to CalculateFileCmac and ReadWriteFileCmac to accept the additional input.

For the magic_check variable regarding the & operator, I kept the * in place as any combination of &magic_check kept giving a compiling error saying mismatch between pointer and integer.
Referring to my digital copy of The C Programming Language, 2nd Edition by Kernighan and Ritchie,
under Section 5.1 Pointers and Addresses, page 94:

The & operator only applies to objects in memory: variables and array elements. It
cannot be applied to expressions, constants, or register variables.

None of the online examples I've seen has &example_variable used in conjunction with the (Section 2.6) equality operator: ==.
To be honest, I never completely grasped the concepts of C/C++ pointers.

About the return 1 used in FindAgbSaveSlotOffset, I was going off by how the fvx_qread used in other functions seem to be pair return 1 for read failure(?). They're now all changed to return 0.
For CheckAgbSaveHeader, the return 1 were kept in place as, if I'm interpreting that function correctly, return 1 states cmac_type is not CMAC_AGBSAVE_SD while return 0 does.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/Wolfvak,6,https://github.com/d0k3/GodMode9/pull/548#issuecomment-544140001,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","Maybe we can merge it as is and fix it on our side, I'll look into it later. As long as the algorithm does what it's supposed to do it should be fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/Wolfvak,7,https://github.com/d0k3/GodMode9/pull/548#issuecomment-544257708,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","Ok, recent changes made the PR acceptable.
Do you have any test cases for us to try? After those are confirmed to work, we'll merge this to the staging branch.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,8,https://github.com/d0k3/GodMode9/pull/548#issuecomment-544275223,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","About test cases (quick refresher)


Structure of the gba vc save: Diagram A
Note: The statement about the (purple) highlighted bottom slot being unimportant is incorrect.


The five (5) save sizes: Diagram B


How they change as the saves are made: Diagram C



Procedure

Install a fresh example GBA VC game. Don't launch the game.
Go to GodMode9 and try to Calculate CMAC its 00000001.sav. The option should not be available.
Go to HOME Menu. Launch the game and make a quick save.
Go back to GodMode9 and try Calculate CMAC. This time, the bottom slot should be picked up.
Repeat step 3.
Repeat step 4.

There should be an observation where the calculated cmac alternates between the slots from continual testing.

Manually comparing the CMACs between the slots

00000001.sav → Show in Hexeditor
Hold (R)-shoulder and press (Y) to change to 16 columns view.
Press (X) → Search for string → double tap CAPS and type in .SAV.
Hold (R)-shoulder and press (X).


Issue # 494 was originally started because of interest in ""SDTransfer"" or moving the Nintendo 3DS folder between different 3DS systems without doing a System Transfer (ie, exchanging movable.sed).
If you have a second 3DS system, make several saves for gba vc games. Extract copies of the dbs, extdata, and title folders from [A:] SYSNAND SD. Drop them in the SD card for the target system and paste to its [A:] drive. Do Fix CMACs for drive. If successful, the latest saves should be picked up on the target system.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/548#issuecomment-545614421,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","I'll review this as quick as I can. In the meantime - @TurdPooCharger, did you also consider custom GBA VC titles with the extra large saves (forgot which games this applies for). I think in these cases, the SD save actually grows in size.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,10,https://github.com/d0k3/GodMode9/pull/548#issuecomment-546651076,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","@d0k3, can you clarify by what you mean about gba vc titles with extra large saves? Are you referring to titles that have FLASH 1Mbit saves? The pr nandcmac.c does handle that size.

[r/3dshacks, AuroraWright] 1 Mbit AGB_FIRM lennies ( ͡° ͜ʖ ͡°)

Maybe you mean games with SRAM patched saves? I have not checked those, but could find out if injection and cmac testing would be any different than games that originally have SRAM.

In the latest staging for commit c38c99e on gameutil.c, am I checking for a difference in how the raw *.sav are injected to the slots found in 0000001.sav?

agbsave.bin → Inject GBA VC save

Is this commit to be used in conjunction with the pr nandcmac.c, to see if cmacs are fixed for both slots for an individual 0000001.sav?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/548#issuecomment-547136635,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","@d0k3, can you clarify by what you mean about gba vc titles with extra large saves? Are you referring to titles that have FLASH 1Mbit saves? The pr nandcmac.c does handle that size.

I meant FLASH 1Mbit saves. There is no original GBA VC title (as in, available on the eShop) that has this.

In the latest staging for commit c38c99e on gameutil.c, am I checking for a difference in how the raw *.sav are injected to the slots found in 0000001.sav?

agbsave.bin → Inject GBA VC save


I'm not sure if I got that right... The GBA VC save injector needs to recalculate the CMAC cause the number (of times saved) changed between the slots, thus the CMAC changed as well.

Is this commit to be used in conjunction with the pr nandcmac.c, to see if cmacs are fixed for both slots for an individual 0000001.sav?

Also not sure if I got that right. Sure, it would be best to fix both slots. Fixing only the current one is an option, too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/548#issuecomment-547153926,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","Okay, merging this on a new staging branch, thus closing. @TurdPooCharger - you can still continue the discussion in the closed pr.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,548,2019-10-17T11:54:41Z,2019-10-28T21:28:22Z,2019-11-03T03:01:40Z,CLOSED,False,59,13,1,https://github.com/TurdPooCharger,Add handling for SD GBA VC .sav CMAC. (Fixes issue #494).,5,[],https://github.com/d0k3/GodMode9/pull/548,https://github.com/TurdPooCharger,13,https://github.com/d0k3/GodMode9/pull/548#issuecomment-549100328,"When identifying a selected 00000001.sav, cmac type testing is first attempted for 3DS saves with the DISA format. If a 3DS save data is not detected, the search continues at expected offsets for gba vc bottom slots in increasingly larger save sizes. For the GBA VC saves, this only calculates and corrects whichever of the two slots is newer or has the higher counter. There are five additional CMAC_AGBSAVE_ types to differentiate the different gba save sizes. If a bottom slot was found but determined to be older based on comparing the counter values, the search defaults to CMAC_AGBSAVE_SD.
For the save counters, there are two scenarios where the value 00 is considered bigger than FF depending which slot has what. If clarification is required, I will post a diagram at issue #494 explaining what is meant by 00 bigger than FF.
Please make corrections and improvements to the coding as you see fit in your peer review. I am not well versed or efficient in the C/C++ programming language.","Not sure whether to open another pull request, so I'll post this instead.
TurdPooCharger@28bf7f8

On a slightly related note about nandutil.c in commit 624ac57, here's a proposed injection method.
When doing the Inject GBA VC save,

Record the counter value in the agbsave.bin.
Take a look in the A:/title/<TID_LOW>/<TID_HIGH>/data/00000001.sav.
Compare the agbsave.bin counter against the SD slots' top and bottom counters.
Edit - The top slot alone should be enough.

Whichever slot is newer should match value with the agbsave.bin.
(A) If the agbsave.bin and top slot counters are equal, increase the agbsave's counter by +1 and inject in the bottom slot.
(B) If the agbsave.bin and top slot are not equal, increase the agbsave's counter by +1 and inject in the top slot.
In the event this single slot injection somehow fails (maybe due to incompatible ARM7 registers??), that gba vc title should be able to load its last made savedata as a safety net.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,552,2019-10-19T12:38:21Z,2019-10-19T13:05:00Z,2019-10-19T13:05:12Z,CLOSED,False,44,0,2,https://github.com/d0k3,Update issue templates,1,[],https://github.com/d0k3/GodMode9/pull/552,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/552,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,557,2019-10-26T01:13:51Z,2019-10-26T12:12:18Z,2019-10-26T12:12:32Z,MERGED,True,8,8,2,https://github.com/dratini0,Change timeout on CardSPIWaitWriteEnd to improve responsiveness,1,[],https://github.com/d0k3/GodMode9/pull/557,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/557,"Allows long waits for erase on things like Art Academy, but fails faster
elsewhere. In particular initialization fails almost instantly.","Allows long waits for erase on things like Art Academy, but fails faster
elsewhere. In particular initialization fails almost instantly.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,557,2019-10-26T01:13:51Z,2019-10-26T12:12:18Z,2019-10-26T12:12:32Z,MERGED,True,8,8,2,https://github.com/dratini0,Change timeout on CardSPIWaitWriteEnd to improve responsiveness,1,[],https://github.com/d0k3/GodMode9/pull/557,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/557#issuecomment-546597277,"Allows long waits for erase on things like Art Academy, but fails faster
elsewhere. In particular initialization fails almost instantly.",I'm trusting this has been well tested...,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,561,2019-10-28T17:16:36Z,2019-10-28T17:16:56Z,2019-10-28T21:28:48Z,MERGED,True,30,21,6,https://github.com/Wolfvak,Merge current staging commits,6,[],https://github.com/d0k3/GodMode9/pull/561,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/561,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,569,2019-11-27T17:57:44Z,2019-12-10T22:10:49Z,2019-12-10T22:10:49Z,CLOSED,False,4,2,1,https://github.com/aspargas2,fix #563,1,[],https://github.com/d0k3/GodMode9/pull/569,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/569,This was a very simple oversight that resulted in a stack-uninitialized pointer variable being used as if it was a pointer to a heap buffer.,This was a very simple oversight that resulted in a stack-uninitialized pointer variable being used as if it was a pointer to a heap buffer.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,569,2019-11-27T17:57:44Z,2019-12-10T22:10:49Z,2019-12-10T22:10:49Z,CLOSED,False,4,2,1,https://github.com/aspargas2,fix #563,1,[],https://github.com/d0k3/GodMode9/pull/569,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/569#issuecomment-559197587,This was a very simple oversight that resulted in a stack-uninitialized pointer variable being used as if it was a pointer to a heap buffer.,"Apparently that pointer was being initialized to 0, upon further investigation. In any case, it was being left as something that wasn't the heap buffer it was supposed to be.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,569,2019-11-27T17:57:44Z,2019-12-10T22:10:49Z,2019-12-10T22:10:49Z,CLOSED,False,4,2,1,https://github.com/aspargas2,fix #563,1,[],https://github.com/d0k3/GodMode9/pull/569,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/569#issuecomment-564282385,This was a very simple oversight that resulted in a stack-uninitialized pointer variable being used as if it was a pointer to a heap buffer.,"Merged, thankyou!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,570,2019-11-28T21:50:56Z,2019-12-10T22:13:58Z,2020-04-28T01:47:56Z,CLOSED,False,13,3,1,https://github.com/aspargas2,add a9lh stage2 payload removal to the uninstall hax script,2,[],https://github.com/d0k3/GodMode9/pull/570,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/570,"This code will check if the hash of NAND sector 0x5BFFF matches the hash of NAND sector 0x5C000, and fill 0x89C00 bytes starting at sector 0x5BFFF with the byte at the beginning of sector 0x5BFFF if the hash does not match. Under unmodified circumstances, both of these sectors will be filled with 0xFF or 0x00. Sector 0x5C000 is where the stage2 payload gets written when installing a9lh, with a maximum size of 0x89A00 bytes. If this payload is not removed when uninstalling CFW, then attempting to reinstall it later using any method which involves b9stool will cause a false positive a9lh warning to be given.
I also changed a couple minor things to be consistent between the uninstall code for new models and old models.","This code will check if the hash of NAND sector 0x5BFFF matches the hash of NAND sector 0x5C000, and fill 0x89C00 bytes starting at sector 0x5BFFF with the byte at the beginning of sector 0x5BFFF if the hash does not match. Under unmodified circumstances, both of these sectors will be filled with 0xFF or 0x00. Sector 0x5C000 is where the stage2 payload gets written when installing a9lh, with a maximum size of 0x89A00 bytes. If this payload is not removed when uninstalling CFW, then attempting to reinstall it later using any method which involves b9stool will cause a false positive a9lh warning to be given.
I also changed a couple minor things to be consistent between the uninstall code for new models and old models.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,570,2019-11-28T21:50:56Z,2019-12-10T22:13:58Z,2020-04-28T01:47:56Z,CLOSED,False,13,3,1,https://github.com/aspargas2,add a9lh stage2 payload removal to the uninstall hax script,2,[],https://github.com/d0k3/GodMode9/pull/570,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/570#issuecomment-564283542,"This code will check if the hash of NAND sector 0x5BFFF matches the hash of NAND sector 0x5C000, and fill 0x89C00 bytes starting at sector 0x5BFFF with the byte at the beginning of sector 0x5BFFF if the hash does not match. Under unmodified circumstances, both of these sectors will be filled with 0xFF or 0x00. Sector 0x5C000 is where the stage2 payload gets written when installing a9lh, with a maximum size of 0x89A00 bytes. If this payload is not removed when uninstalling CFW, then attempting to reinstall it later using any method which involves b9stool will cause a false positive a9lh warning to be given.
I also changed a couple minor things to be consistent between the uninstall code for new models and old models.","Merged to staging, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,574,2019-12-24T05:26:06Z,2019-12-27T13:32:17Z,2019-12-27T19:28:27Z,CLOSED,False,9,0,2,https://github.com/TurdPooCharger,Disarm anti savegame restore (scripts).,5,[],https://github.com/d0k3/GodMode9/pull/574,https://github.com/TurdPooCharger,1,https://github.com/d0k3/GodMode9/pull/574,I can also adjust the scripts where the user is explained what is the 00010011/00000000 and asked whether they would like to continue deleting it.,I can also adjust the scripts where the user is explained what is the 00010011/00000000 and asked whether they would like to continue deleting it.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,574,2019-12-24T05:26:06Z,2019-12-27T13:32:17Z,2019-12-27T19:28:27Z,CLOSED,False,9,0,2,https://github.com/TurdPooCharger,Disarm anti savegame restore (scripts).,5,[],https://github.com/d0k3/GodMode9/pull/574,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/574#issuecomment-569251752,I can also adjust the scripts where the user is explained what is the 00010011/00000000 and asked whether they would like to continue deleting it.,"Okay, that's quite a few commits. Can I consider this finished and tested, @TurdPooCharger ?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,574,2019-12-24T05:26:06Z,2019-12-27T13:32:17Z,2019-12-27T19:28:27Z,CLOSED,False,9,0,2,https://github.com/TurdPooCharger,Disarm anti savegame restore (scripts).,5,[],https://github.com/d0k3/GodMode9/pull/574,https://github.com/TurdPooCharger,3,https://github.com/d0k3/GodMode9/pull/574#issuecomment-569266742,I can also adjust the scripts where the user is explained what is the 00010011/00000000 and asked whether they would like to continue deleting it.,"I meant to push a single commit that edited both scripts at the same time. Edits were done directly on github to the patch-1 forked repo and not on github desktop client. Online editing doesn't allow pushing a single commit with multiple files, and I couldn't be bother swapping back to my other SSD with the Linux setup that has the client as I felt the edits were simple enough. The last three commits were a mistake on my part due to forgetting emunand ctrnand uses 4:/ drive.
Edits were done to these options.
GM9Megascript.gm9

SysNAND Restore (full)
SysNAND Restore (safe)
EmuNAND Restore
CTRNAND Transfer

NANDManager.gm9

Y Restore EmuNAND
L Restore SysNAND (Full)
R Restore SysNAND (Safe)
LEFT Transfer Emu to Sys
RIGHT Transfer Sys to Emu

The Lazarus3DS option found in GM9Megascript.gm9 was left out because anyone resorting to that level of 3DS firmware repair is probably starting from scratch without preinstalled games to recover from.
Lastly, I did not personally test the individual options with the edits simply because I'm all too familiar with nand / firmware repair in GodMode9 by both manual and script methods.

The commits as they stand will make the scripts function no differently than if they weren't included, except for the fact their respective X:/data/XXXID0/sysdata/00010011/00000000 gets automatically deleted.
If you rather have the users using these scripts to decide for themselves whether or not they want to keep or delete that file, I can go back and readjust with ask command.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,574,2019-12-24T05:26:06Z,2019-12-27T13:32:17Z,2019-12-27T19:28:27Z,CLOSED,False,9,0,2,https://github.com/TurdPooCharger,Disarm anti savegame restore (scripts).,5,[],https://github.com/d0k3/GodMode9/pull/574,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/574#issuecomment-569270294,I can also adjust the scripts where the user is explained what is the 00010011/00000000 and asked whether they would like to continue deleting it.,"Okay, squashed and merged to staging. Thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,576,2019-12-31T05:28:13Z,2020-01-02T20:04:27Z,2020-04-28T01:47:55Z,CLOSED,False,2,1,1,https://github.com/aspargas2,minor changes to megascript luma3ds ctrnand setup,1,[],https://github.com/d0k3/GodMode9/pull/576,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/576,add copying luma/payloads and remove the unneeded -a in the allow command because only lvl 1 perms are needed here,add copying luma/payloads and remove the unneeded -a in the allow command because only lvl 1 perms are needed here,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,576,2019-12-31T05:28:13Z,2020-01-02T20:04:27Z,2020-04-28T01:47:55Z,CLOSED,False,2,1,1,https://github.com/aspargas2,minor changes to megascript luma3ds ctrnand setup,1,[],https://github.com/d0k3/GodMode9/pull/576,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/576#issuecomment-570326950,add copying luma/payloads and remove the unneeded -a in the allow command because only lvl 1 perms are needed here,"Merged to staging, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,577,2020-01-06T23:55:27Z,2020-01-07T00:30:47Z,2020-04-28T01:49:28Z,MERGED,True,3,2,1,https://github.com/aspargas2,fix config save dumping for citra in megascript,1,[],https://github.com/d0k3/GodMode9/pull/577,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/577,Fixes #566,Fixes #566,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,577,2020-01-06T23:55:27Z,2020-01-07T00:30:47Z,2020-04-28T01:49:28Z,MERGED,True,3,2,1,https://github.com/aspargas2,fix config save dumping for citra in megascript,1,[],https://github.com/d0k3/GodMode9/pull/577,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/577#issuecomment-571368015,Fixes #566,@wwylele Does this look good? I tested it on my system and the output is identical to extracting my config save with 3ds-save-tool.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,577,2020-01-06T23:55:27Z,2020-01-07T00:30:47Z,2020-04-28T01:49:28Z,MERGED,True,3,2,1,https://github.com/aspargas2,fix config save dumping for citra in megascript,1,[],https://github.com/d0k3/GodMode9/pull/577,https://github.com/wwylele,3,https://github.com/d0k3/GodMode9/pull/577#issuecomment-571375636,Fixes #566,Looks good to me.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,586,2020-02-05T22:28:31Z,2020-03-28T10:05:43Z,2020-03-28T10:05:43Z,MERGED,True,447,218,27,https://github.com/luigoalma,Support to variable sized tickets.,10,[],https://github.com/d0k3/GodMode9/pull/586,https://github.com/luigoalma,1,https://github.com/d0k3/GodMode9/pull/586,"Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.","Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.",True,"{'HEART': ['https://github.com/redunka-zver', 'https://github.com/knight-ryu12']}"
d0k3/GodMode9,https://github.com/d0k3/GodMode9,586,2020-02-05T22:28:31Z,2020-03-28T10:05:43Z,2020-03-28T10:05:43Z,MERGED,True,447,218,27,https://github.com/luigoalma,Support to variable sized tickets.,10,[],https://github.com/d0k3/GodMode9/pull/586,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/586#issuecomment-582696220,"Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.","Took a very brief look over the changes to my code and they look fine. I'll look at them in more detail whenever I get back to working on the virtual mounting thing; for right now I trust that they work fine. That code is unused at the moment, anyway.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,586,2020-02-05T22:28:31Z,2020-03-28T10:05:43Z,2020-03-28T10:05:43Z,MERGED,True,447,218,27,https://github.com/luigoalma,Support to variable sized tickets.,10,[],https://github.com/d0k3/GodMode9/pull/586,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/586#issuecomment-594207108,"Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.","Alright, I had a look - sorry this took so long, I've been very busy these days. Your changes look good to me. I'd rather avoid the pointers to pointers thing, cause it increses the risk of forgetting a free somewhere, but I understand this is required now with variable sized tickets.
Before I merge this, I'll wait until @aspargas2 had a closer look (no pressure, take your time). Maybe @Wolfvak can have a look, too, as this is a rather large one?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,586,2020-02-05T22:28:31Z,2020-03-28T10:05:43Z,2020-03-28T10:05:43Z,MERGED,True,447,218,27,https://github.com/luigoalma,Support to variable sized tickets.,10,[],https://github.com/d0k3/GodMode9/pull/586,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/586#issuecomment-598624108,"Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.","@aspargas2 - I suggest we merge this and you give it another look when you add your future changes. Both, @Wolfvak and me already reviewed it, and if we don't merge it now we will be facing bad merge conflicts in the future.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,586,2020-02-05T22:28:31Z,2020-03-28T10:05:43Z,2020-03-28T10:05:43Z,MERGED,True,447,218,27,https://github.com/luigoalma,Support to variable sized tickets.,10,[],https://github.com/d0k3/GodMode9/pull/586,https://github.com/aspargas2,5,https://github.com/d0k3/GodMode9/pull/586#issuecomment-598697038,"Support to tickets of variable sizes added when processed individually or on ticket.db.
Lacking support on CIA building and mounting without the common ticket size as for currently, just added detection and error on building if found ticket is not of supported size.
Also a lot of indentation fixes. As well some memory related fix-ups.
A few notes:

Ticket struct now has a content_index as a flexible array, should be used with malloc/calloc/realloc or a pointer cast to a predefined buffer length that can fit the needs of the ticket needed to load.
TicketMinimum is available for the bare minimum ticket size, usable to check for it's real size, or content index is not required in full for a task.
TicketCommon is currently for the CIA mount and build, with the common 0xAC context index size, while variable size isn't supported.
Both a TicketMinimum pointer and a TicketCommon pointer can be safely casted to a Ticket pointer, as long for TicketMinimum the usage of this pointer doesn't exceed it's length, and TicketCommon has a properly set 0xAC content index size after load or fabrication.
TicketRightsCheck_InitContext and TicketRightsCheck_CheckIndex expect ticket loaded completely in memory.
TicketRightsCheck_InitContext can recycle the same context variable safely with a new ticket.
TicketRightsCheck_CheckIndex is not to be called after used ticket on context as been unloaded from memory.","@d0k3 Yeah, definitely go ahead and merge if you've looked it over and it's fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,592,2020-03-29T23:24:15Z,2020-03-30T04:08:07Z,2020-04-28T01:47:59Z,MERGED,True,20,0,1,https://github.com/aspargas2,Always inject correct sighax signatures when installing b9s in the megascript,2,[],https://github.com/d0k3/GodMode9/pull/592,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/592,Someone just bricked by accidentally using the dev b9s firm because there was no check for it and this was not being done. Please don't merge this yet as it has not been tested; I will undraft it once I get around to testing.,Someone just bricked by accidentally using the dev b9s firm because there was no check for it and this was not being done. Please don't merge this yet as it has not been tested; I will undraft it once I get around to testing.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,592,2020-03-29T23:24:15Z,2020-03-30T04:08:07Z,2020-04-28T01:47:59Z,MERGED,True,20,0,1,https://github.com/aspargas2,Always inject correct sighax signatures when installing b9s in the megascript,2,[],https://github.com/d0k3/GodMode9/pull/592,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/592#issuecomment-605768907,Someone just bricked by accidentally using the dev b9s firm because there was no check for it and this was not being done. Please don't merge this yet as it has not been tested; I will undraft it once I get around to testing.,"Ok, tested now. Should be ready to merge, and hopefully save someone from bricking down the road.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,597,2020-04-26T08:25:58Z,2020-04-27T07:54:07Z,2020-04-29T15:24:09Z,MERGED,True,5,0,1,https://github.com/aspargas2,remove usm files in sd cleanup script,1,[],https://github.com/d0k3/GodMode9/pull/597,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/597,The unSAFE_MODE exploit that will be soon added to the 3ds guide adds a few more files that can be removed.,The unSAFE_MODE exploit that will be soon added to the 3ds guide adds a few more files that can be removed.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/604,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.",True,{'THUMBS_UP': ['https://github.com/NWPlayer123']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/604#issuecomment-642811950,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.",This should now be ready for final review and merge.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,3,https://github.com/d0k3/GodMode9/pull/604#issuecomment-642813343,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","Oh, I guess I should also mention this fixes #596.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/604#issuecomment-645182234,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.",@aspargas2 sorry about the radio silence. I'll look though your changes this week and will hopefully be able to merge it.,True,{'THUMBS_UP': ['https://github.com/aspargas2']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/TurdPooCharger,5,https://github.com/d0k3/GodMode9/pull/604#issuecomment-647089187,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","Does this PR rejects or filters out nonlegit or fake tickets?
If they're visible, is it possible to distinguish and separate these from system and eshop/update tickets like this?

000400000123ABC0.FFFFFFFF.tik",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,6,https://github.com/d0k3/GodMode9/pull/604#issuecomment-647098502,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","It adds a homebrew directory to the virtual ticket db mount where everything that would've gone into the eshop directory but had a bad signature goes. The old system just rejected anything with a bad signature, so the files shown in the eshop directory should be the same as with the old system, save for this code finding tickets the old system missed entirely. However, regarding system tickets, this PR simply sorts everything with a common keyY index of 1 into the system directory without checking its signature. Though I can't think of any way this could happen without intentional creation of this situation, if there was a case of there being tickets with ck_idk==1 and invalid signatures, there would be no way to distinguish them from signed system tickets just by filename. Hope that answered the question.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/TurdPooCharger,7,https://github.com/d0k3/GodMode9/pull/604#issuecomment-647986981,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","@aspargas2, there is a specific scenario that I am worried about regarding system tickets.
Let's say there's a noob who's clueless about not knowing that it's a bad idea to randomly delete system titles or tickets off from FBI. The thought process behind this action is that those supposedly random red colored TitleIDs are not needed (haha! yikes..) because they kinda remind him of preinstalled bloatware on Windows.
Maybe this noob knows a thing or two about firmware or data recovery techniques, such as faketik app being able to restore missing tickets...
Anyway, noob keeps noobing to the point he softbricks his 3DS firmware. And to make matters worse, he never backed up a SysNAND *.bin image because (surprise, surprise!) his 3DS was hacked using a YouTube tutorial that didn't cover that subject.
If said noob was to visit Nintendo Homebrew discord, this scenario would likely play out where the locals there suggest that he fixes his 3DS with CTRTransfer.
However, if the noob was to look for help on GBAtemp, there is a good chance I might be the one he encounters where he's instead told to fix the 3DS with CTRTransfer (Type D9).

The reason for my asking is that there's a potential pitfall in how CTRTransfer (Type D9) currently works. Unlike standard CTRTransfer, CTRTransfer (Type D9) leaves in place the user's original ticket.db. System tickets (*.00000000.tik) from the donor ctrtransfer image are first dumped and then system tickets from the original ticket.db are dumped on top of those. These tickets later go on to be installed in FBI. Any fake system ticket that's presented to the CDN server will result in a failed system update. Not good for the end user. :/

I found out when system titles with missing tickets are restored with faketik, the Index to the common KeyY at offset 0x1F1 is set to 00 instead of 01.
Here's a mini tutorial on how to produce a fresh ticket.db restored with fake system tickets.

In the 1:/dbs, rename ticket.db → ticket.bak.
Boot to HOME Menu. System titles will be missing.
Rosalina menu inject Homebrew Launcher like this.
Save the Rosalina settings, reboot, and try again.
If injection is successful, access to Homebrew Launcher → faketik should be gained.
Go back to GM9, dump the ticket.db's partitionA.bin, and hex examine the fake system tickets. Note the values for Index to the common keyY.
Delete the (fake) ticket.db. Rename ticket.bak → ticket.db.


I want to be certain those changes to how ticket.db is handled retains the ability to distinguish legitimate vs fake tickets, even for system titles. This is in case tweaks to the script are required to work in tune with this PR.
When the PR encounters fake system tickets, are these also separately sorted to homebrew instead of system?
Side Note: I don't expect GodMode9 to sort out fake tickets that look convincingly real, or are mostly real but off edited by one or few points. Anyone who bothers to put that much effort purposely trying to install and pass off fake system tickets as real ones to the CDN probably at that point deserves to keep their softbrick.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,8,https://github.com/d0k3/GodMode9/pull/604#issuecomment-648313340,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","@TurdPooCharger Yeah, that story you told of the noob deleting system titles is painfully familiar. The only thing about a ticket that this code uses to decide whether a ticket is said system ticket or an eshop/homebrew ticket is the Index to the common KeyY (can I just call that cky_idx?) field. This was the case with the old ticket.db code as well. When considering the potential implications of only distinguishing between legit and non-legit tickets for a cky_idx of 0, I had thought of this specific case. As you mentioned, faketik sets the cky_idx of these fake system tickets to 0, so this PR thinks they aren't system tickets at all, checks their signatures, and sorts them into the homebrew folder. I just tested the exact steps you described, and all the tickets appeared in the homebrew folder as expected.
However, the more I think about it, the more I think it makes more sense to sort all unsigned tickets (aside from those with a cky_idx > 1) into the homebrew directory, regardless of whether or not we can see it causing any issues in any practical circumstances. This would be more consistent with the behavior of the original ticket.db mounting system in any case, and would ensure no scripts would need adjustment. I would like to hear @d0k3's take on this, but if you and I are in agreement, I'll go ahead and change this behavior and push the commit, as it's a very simple logic change.
Regarding your side note, this PR will actually be able to sort out tickets whose signatures are invalid in any way, no matter how small the edit from a ticket's legit form was. GodMode9 already had a function implemented which uses the 3DS's RSA hardware to verify a ticket's signature (ValidateTicketSignature), so this PR just calls that to decide if a ticket is legit.
On an unrelated note, I've just found another bug in this PR, so be expecting a commit to fix that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/TurdPooCharger,9,https://github.com/d0k3/GodMode9/pull/604#issuecomment-649301218,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","Sounds good to me. I have no further questions with the cky_idx and (ValidateTicketSignature) regarding the read aspect of tickets. It is very reassuring those two measures and this PR's sorting nonvalid tickets to homebrew will keep them separate from the other legit eshop, hidden, system, and unknown. @aspargas2, thank you.

Now about the write aspect. Hadn't had time to compile your PR fork yet and try this on my n3DSXL, but does [CLIPBOARD] selecting *.tik files with the (Y) button, navigating to the [T:] TICKET.DB IMAGE, and pressing (Y) again in one of those subfolders allows for installing tickets?
Or, is installing tickets done by doing something like pressing (A) on the *.tik file → Ticket options... → Install ticket?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,10,https://github.com/d0k3/GodMode9/pull/604#issuecomment-649728650,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","@TurdPooCharger I'm not sure if you saw this, but I removed the hidden directory in this PR, as per discussion with d0k3. Although it technically would have been possible to keep it, it didn't lend itself to being done very easily, and we didn't see a very common practical use for it.
Regarding the write aspect, you can indeed install tickets by using the Y button to copy them into the T: drive. It expects the ticket to be named in the same format as other tickets in the mount: <TitleID>.<ConsoleID>.tik. However, the console ID field in the filename is ignored and immediately changed to the console ID in the ticket itself. Similarly, it doesn't matter what folder you paste the ticket into (you can even paste it into the root of the mount); it will immediately be sorted to the appropriate folder. I did not add any additional options to the Ticket Options menu.
Here's a build of commit 226ea9c if you'd like to try any of this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,11,https://github.com/d0k3/GodMode9/pull/604#issuecomment-649830494,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","OK, that should finally be the last commit unless anyone else has things that need to be fixed or changed. Here's a build of 519f2ea.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/604#issuecomment-651942218,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","Reviewed it and found no issues - it's working great, too. So I already merged it to master. Thanks a lot @aspargas2, and thanks a lot @TurdPooCharger for always helpful comments, too.
I of course agree about all tickets with invalid signature being shown inside the homebrew folder. system tickets shouldn't be the exception.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/TurdPooCharger,13,https://github.com/d0k3/GodMode9/pull/604#issuecomment-652098301,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","Sorry, late reporting back. Was still undergoing testing while coming up with ideas of unintended usage. I wanted to present potential pitfalls that were found and possible solutions to noob proof them.
Here's an informal write-up of build 519f2ea.
Issues Found


When copying backing eshop tickets, they lose their Console/DeviceID tag appearance. These will restore after unmounting and remounting the ticket.db.
Ex: Paste as 0004000E00021800.4F81D8C7.tik → shows up as 0004000E00021800.00000000.tik
Unmount and remount ticket.db → reappears as 0004000E00021800.4F81D8C7.tik


The name of the ticket <TID_HIGH><TID_LOW>.<DEVICEID>.tik should not be trusted to match what it really is.
Renamed file name of 0004001000021200.00000000.tik → 0004001000021300.00000000.tik.
Copy and paste into [T:] BDRI IMAGE. Name is kept as 0004001000021300.00000000.tik.


Following up on issue # 2, when not renaming the ticket, It is possible to double install the same ticket.
Installed (actual) 0004001000021200.00000000.tik. Sneaky 212 renamed 213 also there too.
Applies for any category of tickets including homebrew.


It is possible to install tickets named with characters that are not hex values (0-9, A-F, a-f).
Ex: 000400000003W100.00000000.tik gets added as 0000000400000003.00000000.tik
Solution: Only accept installing tickets that match between file names and raw hex values in those fields shown in the Structure of the Ticket diagram.


It is possible to inject someone else's private legit tickets.
Ex: My n3DSXL has the DeviceID of 4F81D8C7. I can dump and install my cousin's o3DSXL tickets that are *.FB027FC8.tik.
Discussion topics: (1) How this differs from FBI installing tickets. (2) eShop piracy and ban risks.
Note: The DeviceIDs of my n3DSXL and cousin's o3DSXL presented here are not really those.


Strong Points / Noted observation


If you try to paste something renamed like trollol.tik, GodMode9 will prevent you and warn you.
T:/trollol.tik
Error: Cannot open destination file.


When trying to inject a garbage fake ticket (848 bytes filled with random hex values), the injection will fail with this message.
Failed copying path:
<TID_HIGH><TID_LOW>.00000000.tik


How does it handle when the ticket file is TOO BIG?
When trying to inject a (mostly) real ticket but with one extra byte (849 bytes), the injection will fail with this message.
T:/<TID_HIGH><TID_LOW>.00000000.tik
Error: Cannot open destination file.


How does it handle when the ticket file is TOO SMALL?
T:/<TID_HIGH><TID_LOW>.00000000.tik
Error: Cannot open destination file.


How does it handle injecting tickets of the same <TID_HIGH><TID_LOW> but different <DEVICE_ID>?
Already installed in the ticket.db - 0004000000021800.4F81D8C7.tik
Try to inject this in the ticket.db - 0004000000021800.FB027FC8.tik
T:/0004000000021800.FB027FC8.tik
Error: Cannot open destination file.


To be tested / unanswered

What happens if you inject arbitrary ticket A into already installed ticket B?


garbage (not valid format) tickets
universal legit tickets {system titles & prebundled games from special editions}
private legit tickets {eShop purchases, update titles}
fake/nonlegit (valid format) tickets {faketik, TIKdevil, freeshop/related CDN downloaders, GM9, homebrew generated}



Following the above point 1, can ticket.db be broken from badly hex editing?


Test gm9 script commands and stability.


Comment / suggestion

That previously mentioned idea about installing tickets this way,


<ticketname>.tik file → Ticket options... → Install ticket

, should not be implemented or considered at this time. If considered, does ease of installation outweigh the risk of bricking ticket.db? Maybe put restrictions for TitleIDs of known system tickets?

Talk about something along the lines of making the hex editor read only mode when viewing the tickets already installed in ticket.db. Limit allowable edits to only copying and deleting. No injecting ticket A → ticket B at this moment; trying to come up with how injection could be made to work smoothly.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,604,2020-06-11T06:08:54Z,2020-06-30T17:39:56Z,2020-07-02T06:24:28Z,CLOSED,False,663,504,21,https://github.com/aspargas2,Add writeable virtual mounting of BDRI filesystems,14,[],https://github.com/d0k3/GodMode9/pull/604,https://github.com/aspargas2,14,https://github.com/d0k3/GodMode9/pull/604#issuecomment-652807268,"This replaces the old brute-force parsing system for ""mounting"" ticket.db files, but maintains backwards compatibility with any scripts and tutorials assuming the old directory structure of the T: drive, aside from the hidden directory. These changes are fully functional as is; this PR is only a draft PR because there are still some remaining features that use the old brute-force ticket.db parsing method, and I wish to move away from that completely before this is merged. Feel free to go ahead and review the changes I've already pushed, as those parts shouldn't be changing any further from here.","@TurdPooCharger
Issues 1 and 4 are certainly bugs; I'm not sure why either of those happen, but I will look into them and get them sorted out ASAP.
My take on issues 2, 3 and 5 is this: ticket.db and title.db/variants are fully-fledged FAT filesystems, so I'm trying to treat them as such. When deciding what to allow and what to disallow for safety, I thought of it in terms of what gm9 protects you from wrongly doing to important files in ctrnand, which is basically nothing. The title ID is like a filename in this filesystem, so similarly to how you can, for example, modify the name of a .app file to not match its internal content ID or make another copy of the exact same .app file with a different filename, you can have a ticket under an improper name or two of the same ticket installed with different names. Similarly to how you can replace your LocalFriendCodeSeed_A/B or any other unique files with that of another system's, you can install a ticket that's only meant for another system. I think of copying something into the T: drive less as installing a ticker or title info entry and more as copying a file into a filesystem just like one would to any file. I understand wanting noob-proofing, but I would argue that it's no more likely that a noob will do something improper with a mounted ticket.db than with any other important system files.
With that said, there are some restrictions that disallow copying literally anything into there, as you have observed. Going through the noted strong points/observations:
1 happens because it needs some way to know what title ID to give the ticket as a ""name"" in the filesystem. In hindsight, I could've pulled this from the ticket data itself, but I don't see much point to allowing malformed ticket names in.
2, 3 and 4 all happen for the same reason. This code doesn't only accept one size of ticket, but it expects the second u32 of the ticket's content index to be appropriate for the size of ticket being imported.
5 happens because the console the code doesn't allow two tickets of with the same title ID ""name,"" and the console ID isn't actually part of the name within the filesystem; it's just in the virtual name to maintain backwards compatibility.
There's no reason that injecting one ticket to another to replace the ticket shouldn't work fine, but please do let me know if you find any problems with it. At the present time, I see no reason to disallow it.
The worst hex editing one ticket could do is break that one ticket in the same way you can break any file anywhere. I should note that because of the aforementioned reason about ticket size, hexediting the second u32 of the content index is disallowed. I don't see any reason to disallow hexediting on files in the T: drive any more than there would be a reason to disallow hexediting on any other system file.
I agree that more testing of gm9 scripting functionality would be good. Though I can't see any way it could go wrong, I didn't do a comprehensive test.
I actually like the idea of also adding a context menu ""install"" option on ticket files. I don't know what you mean regarding potential bricking of the entire title.db. Setting aside the fact that I can't see anything one could do with one ticket that would affect any other ticket (again, this is a proper FAT filesystem), I would consider it more appropriate to put more FBI-like restrictions/warnings on such an install option. I'm all for having noob-proofing in what the noobs are going to be instructed to use; I just don't feel like it needs to be in the virtual mounting layer.
Of course, none of this up to me anyway. I'll go ahead and start working on issues 1 and 4, and if @d0k3 wants anything else changed, I'll do that too.
PS: Sorry that my posts aren't as nicely markdown-formatted as yours; I'm just bad at organizing things like that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,610,2020-07-21T22:22:20Z,2020-08-02T13:45:22Z,2020-08-05T19:48:55Z,CLOSED,False,868,170,19,https://github.com/d0k3,Allow installation of game files,30,[],https://github.com/d0k3/GodMode9/pull/610,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/610,"Should work for NCCH, NCSD, CIA, TMD from NUS/CDN and DSi eShop titles in NDS format.
This is not finished, and trying it may cause anything to happen. I warned you. Have fun.
When finished this will fix #580","Should work for NCCH, NCSD, CIA, TMD from NUS/CDN and DSi eShop titles in NDS format.
This is not finished, and trying it may cause anything to happen. I warned you. Have fun.
When finished this will fix #580",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,610,2020-07-21T22:22:20Z,2020-08-02T13:45:22Z,2020-08-05T19:48:55Z,CLOSED,False,868,170,19,https://github.com/d0k3,Allow installation of game files,30,[],https://github.com/d0k3/GodMode9/pull/610,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/610#issuecomment-667676054,"Should work for NCCH, NCSD, CIA, TMD from NUS/CDN and DSi eShop titles in NDS format.
This is not finished, and trying it may cause anything to happen. I warned you. Have fun.
When finished this will fix #580",Merged with master!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,611,2020-07-24T00:02:30Z,2020-08-02T13:45:01Z,2020-08-20T12:47:04Z,MERGED,True,367,399,56,https://github.com/Wolfvak,Revert back to using Thumb mode + other misc size reduction optimizations,7,[],https://github.com/d0k3/GodMode9/pull/611,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/611,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,613,2020-07-26T18:44:35Z,2020-07-31T08:00:38Z,2020-07-31T08:05:47Z,CLOSED,False,170,149,11,https://github.com/aspargas2,Gameinstaller and vBDRI improvements & fixes,7,[],https://github.com/d0k3/GodMode9/pull/613,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/613,Going ahead and making a draft PR for this for easier discussion. There's a lot more stuff that needs to be done here.,Going ahead and making a draft PR for this for easier discussion. There's a lot more stuff that needs to be done here.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,613,2020-07-26T18:44:35Z,2020-07-31T08:00:38Z,2020-07-31T08:05:47Z,CLOSED,False,170,149,11,https://github.com/aspargas2,Gameinstaller and vBDRI improvements & fixes,7,[],https://github.com/d0k3/GodMode9/pull/613,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/613#issuecomment-666991028,Going ahead and making a draft PR for this for easier discussion. There's a lot more stuff that needs to be done here.,"Merged with current gameinstaller branch. I know this is still a draft pr, but I had to combine our branches, so we can continue work together.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,617,2020-08-04T19:40:57Z,2020-08-04T19:41:11Z,2020-08-05T05:30:43Z,MERGED,True,4,0,1,https://github.com/Wolfvak,add a needed delay for new 3ds consoles,1,[],https://github.com/d0k3/GodMode9/pull/617,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/617,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/618,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,2,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669513844,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Copied and pasted from PM.

Alright, so after spending a better part of last night trying to fix my devkitarm setup, I finally got my computer to compile the GameInstaller fork. For some reason, my computer did not have firmtool installed and updating devkitarm through pacman did not find this to be missing.
Test Setup

Old 3DS XL (borrowed from cousin)
4 GB Toshiba SD card (FAT32 + 32 KB cluster size, H2testw passed)
boot9strap v1.3 (both FIRM0/FIRM1)
Sys 11.13.0-45U
Luma3DS v10.1.3
sdmc:/luma/payloads/

GodMode9_GameInstaller.firm (last commit: 70031d9)
GodMode9_v1.9.1.firm


Homebrew Launcher v2.1.2
All unused tickets were deleted. Only system tickets retained.
etc.

Initial Observations (Internal Notes)


To install a CIA,

[0:] SDCARD (NOLABEL) → example.cia → CIA image options... → Install game file



GameInstaller requires the Nintendo 3DS folder to be present with these SD database file(s).

sdmc:/Nintendo 3DS/<ID0>/<ID1>/dbs/

import.db
title.db





Not having the title.db will result in a 'Install fail' message.
Not having the import.db will cause HOME Menu to not list installed titles.

Test No.1 - Can GameInstaller install an SD title?
For this test, I booted the o3DSXL without the Nintendo 3DS folder on the SD card. Upon seeing HOME Menu, the 3DS firmware would create a new Nintendo 3DS folder with just the extdata subfolder. I visited Nintendo 3DS Camera → Homebrew Launcher →  FBI (3dsx) to create the missing (empty) import.db and title.db. CIAs are not installed at this point.
I boot to GM9_v1.9.1 and make a copy of the Nintendo 3DS folder named as Nintendo 3DS (reference). In the [1:] SYSNAND CTRNAND directory, I also make a copy of the dbs folder and name this as dbs_nand (reference).
Exiting GM9, I revisit FBI (3dsx) and install FBI.cia (v2.6.0 / 1.09 MB / 7DC5B2B1) to HOME Menu. Pressing the (HOME) button to go back to HOME Menu, the FBI (cia) gift icon is unwrapped but not launched. The icon and spinning cube banner are observed to be present.
I boot to GameInstaller and extract the decrypted contents of FBI's <TID_LOW> subfolder. The title entry in the title.db and the ticket in ticket.db are also extracted.

[A:] SYSNAND SD/title/00040000 → hold (R)-shoulder and press (A) on 0f800100 → Copy to 0:/gm9/out
[A:]SYSNAND SD/dbs/title.db → Mount as DIFF image
[T:] BDRI IMAGE/000400000F800100 → Copy to 0:/gm9/out
[1:] SYSNAND CTRNAND/dbs/ticket.db → Ticket.db options... → Mount image to drive
[T:] BDRI IMAGE/homebrew/000400000F800100.00000000.tik → Copy to 0:/gm9/out

The 0f800100 , 000400000F800100 , and 000400000F800100.00000000.tik are placed in a parent folder called FBI (FBI installed).
The Nintendo 3DS folder is renamed to Nintendo 3DS (FBI installed), and a copy of the Nintendo 3DS (reference) is pasted as a replacement Nintendo 3DS folder.
The six (6) .DB files within dbs_nand (reference) are copied and pasted into 1:/dbs directory.

There was some difficulties replacing the folders and files where GameInstaller mentioned 'Out of memory.' and would fail to recognize the replacement Nintendo 3DS folder. A quick press (START) and hold (START) reboot to GameInstaller was needed to continue the test.

I install the FBI.cia in GameInstaller and repeat the above five steps extracting those output files to a folder called Nintendo 3DS (GM9 installed) and FBI (GM9 installed).
Exiting GameInstaller, booting to HOME Menu, and unwrapping FBI's gift icon, the icon was observed to be black and the banner was missing. Launching the title results in this error.

An error occurred (ErrDisp)
Error type: card removed
The card was removed.
Press any button to reboot.

Results
Cross comparing the hashes between the two output folders,

FBI (FBI installed)
FBI (GM9 installed)

, there was a difference between the title entry and .CMD files.

I have no understanding of the title entry's data fields and the only comment I can add is that GameInstaller always writes block 0x50–52 block as 'GM9'.
The 00000001.cmd from GameInstaller appears to be creating the version meant for system titles without the CMACs. Here's a course refresher if needed.

#340 (comment)

If I swap a copy of just the .CMD from (FBI installed) over to (GM9 installed), that Nintendo 3DS (GM9 installed) folder will successfully launch FBI (cia).
Overlooking the NAND vs SD *.cmd bug and assuming the title entry's discrepancy are just placeholder values for testing purposes, I consider this CIA installation relatively successfully.
NOTE
As I report back my findings for more test, I will not repeat writing down the exact/similar procedures as detailed as this first test. This one was to establish or making clear the testing methodology and to help jump start overcoming my writer's block.
I will continue simple install tests for dsiware and system title next on this (70031d9) build before trying more complex arrangements or prodding hard for bugs (ie, pitfalls, stress limits) will come much later.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,3,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669527727,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Test No.2 - Can GameInstaller install a CTRNAND title?
I chose Health & Safety as the test system title.


GodMode9 (v1.9.1) → hold (R)-shoulder and press (A) on [1:] SYSNAND CTRNAND → Search for titles

0004001000021300 Health and Safety Information (CTR-N-HACE) (U).legit.cia
Renamed this file to H&S.legit.cia.



Copied these files and folders.

1:/title/00040010 → hold (R)-shoulder and press (A) on 00021300 → Copy to 0:/gm9/out
1:/dbs/ticket.db → T:/system → 0004001000021300.00000000.tik → Copy to 0:/gm9/out
1:/dbs/title.db →  T:/ → 0004001000021300 → Copy to 0:/gm9/out
These items are placed in a folder called: 1 - original



FBI (3dsx) → Titles → Health and Safety Information → Delete Title And Ticket
FBI → SD → H&S.legit.cia → Install CIA


GameInstaller → Copied these files and folders.

1:/title/00040010 → 00021300
1:/dbs/ticket.db → T:/system → 0004001000021300.00000000.tik
1:/dbs/title.db → T:/ → 0004001000021300
These items are placed in a folder called: 2 - FBI



dbs_nand (reference) → restore the six (6) .db files to 1:/dbs

1:/title/00040000 → press (X) to delete 00021300
1 - original → press (Y) to [CLIPBOARD] select 00021300
1:/title/00040000 → press (Y) → Copy path(s) → etc.



Press (START) → HOME Menu → Health & Safety (verify the title launches)


FBI → Titles → Health and Safety Information → Delete Title And Ticket


GameInstaller → H&S.legit.cia → CIA image options... → Install game file


Repeat step 4, but put the items in a folder called: 3 - GM9


Repeat step 6. GameInstaller installed H&S has the system title appear and launch.


Repeat step 5.


Repeat step 3, except no deleting Health & Safety.

FBI → SD → H&S.legit.cia → Install CIA



Repeat step 4, but put the items in a folder called: 4 - FBI (no delete)


Repeat step 5.


Repeat step 8, except Health & Safety not deleted beforehand.


Repeat step 9, but put the items in a folder called:  5 - GM9 (no delete)


Results

BUG
When installing a CIA, GameInstaller does not erase the <TID_LOW> folder. Anything that is currently installed will either be overwritten, replaced, or left untouched. This can result in orphaned files (usually leftover TMD, CMD, and/or APP files) that can later interfere with backing up CIAs or verifying intact installed titles (TMD file options... → Verify file).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/aspargas2,4,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669533757,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Regarding the out of memory error, it's possible that there's a memory leak somewhere. I'll look into this when I get the chance.
Regarding the ""GM9"" string in the title info entry, that's fully intentional to mark a title info entry built my gm9. We have no idea what those 4 bytes are and their value doesn't seem to affect anything.
The bug with the .cmd files for SD titles should be fixed in commit 5f3ac47.
Regarding the old contents, tmd, and cmd not be overwritten, I agree that this needs to change. Unconditionally erasing the content folder for the title being installed if it exists should be fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,5,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669551015,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","@aspargas2, what are the data fields in block 0x00–0F for the title entry? Is the total install size of that title (the reported blocks in Data Management) contained here?
Why does GameInstaller has the offset 0x0E set to the value 02 versus FBI having it as 00 ?
These I'm guessing are...

0x14–17: contentID for the TMD(?)
0x18–1B: contentID for the CMD(?)

For the random nature of block 0x50–53, I'll ignore this from now on. Maybe it relates to date and time when the title was installed?

I'll continue on Test No.3 - Can GameInstaller install TWL title(s)? with a compile of the latest gameinstaller_next fork.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/aspargas2,6,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669554804,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","The format of the title info entry is documented here. Offset 0xC is the 4-byte title version. If I recall correctly, there was some issue related to generation of this field in the past, but I'll have to remind myself about the details of that. Thanks for pointing out that gameinstaller did this incorrectly; I had missed that.
You would be correct in your assumptions regarding the u32 fields at 0x14 and 0x18.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/aspargas2,7,https://github.com/d0k3/GodMode9/pull/618#issuecomment-669563847,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Also, I had meant to mention this earlier, but firmtool isn't considered to be part of devkitARM, so dkp-pacman wont get it for you. GodMode9's readme lists it as a requirement seperately from devkitARM.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,8,https://github.com/d0k3/GodMode9/pull/618#issuecomment-670810419,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Test No.3 - Can GameInstaller install TWL system titles?

This test follows the same procedures of Test No.2 but with the four (4) TWL system titles from the [2:] SYSNAND TWLN.

00048005484E4441 - DS Download Play
0004800542383841 - Nintendo DSi™ (DS INTERNET)
0004800F484E4841 - Nintendo DS Cart Whitelist
0004800F484E4C41 - TWL Version Data


The gameinstaller_next fork that was used was compiled with the last commit (ee061e4).
The '3 - GM9 (yes delete)' case folder refers to deleting that title and its ticket in FBI before installing the CIA with GameInstaller. The leftover files bug found in Test No.2 hasn't been addressed in the compiled build.
unrelated bug: Pulling up the keyboard when creating a new folder or renaming a file freezes GameInstaller.

Results

In the title entries, the Title Size (block 0x00–07) differs slightly between original and FBI/GM9.
DS INTERNET

original: 0x140B34 bytes (1313588 bytes ≈ 1.25 MB)
FBI/GM9: 0x154000 bytes (1392640 bytes ≈ 1.32 MB)

I think the slight size differences boils down to how the titles were installed (ie: nand flashed at factory, eShop download, system update, cia).
That mystery block 0x50–53 is all zeros for 3 of the 4 TWL system titles. ¯\(ツ)/¯
The original's title entry for TWL Version Data was the most baffling, having a Product Code (block 0x30–3F) with random(?) values and a Title Size of 0x4B34 bytes vs FBI/GM9's 0x18000 bytes.
As far as functionality goes, the GM9 installed DS Internet launches without a hitch.

System Settings → Internet Settings → Nintendo DS Connections


Test No.4 - Can GameInstaller (re-)install a legit DSiWare game?
This test was made possible because my cousin purchased this game from eShop.

000300044B513945 Zelda Four Swords (TWL-KQ9E) (DSi Exclusive) (U).legit.cia

The title was dumped in GM9 v1.9.1 with the 'Use personalized ticket (legit)' option. CIA checker tool verifies both the Ticket/TMD as legit/legit.
Results

FBI was excluded from this test because it failed to install the legit dumped CIA with this error. I'm not sure if the error stems from FBI or that the CIA is a false legit.

While the GM9 installed game does launch, not having the SAV in place will cause in-game saving issues.

When installing a private legit CIA, GameInstaller strips out the ConsoleID data field in the ticket.

Here's a quick refresher on the ticket structure.

#604 (comment)

I think that editing measure is okay when installing the CIA on a different 3DS system than the one the CIA was sourced from. Maybe also strip out the eShop accountID (block 0x21C–21F) for extra safety.
When installing a private legit CIA back onto the source system, the legit ticket should be kept intact. Compare the ticket's ConsoleID against the [M:] MEMORY VIRTUAL/otp_dec.mem (block 0x04–08).
Side Notes

Not all DSiWare titles have saves.
The save file for DSiWare games are named either public.sav or private.sav.
Unlike NATIVE and AGB games, DSiWare saves are not un-initialized where the first 0x20 bytes are zeros. They are FAT images.
The public.sav for Zelda4Swords is FAT12.
I can't recall if I saw some games with saves as FAT16 or if they're all FAT12. Will need to double check later.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,9,https://github.com/d0k3/GodMode9/pull/618#issuecomment-673643644,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Test No. 5 - Can GameInstaller install an SD game title straight from cartridge and its various derived .3DS & .CIA?

The gameinstaller_next fork that was used for this test was the previous one from Tests No.3-4 with commit (ee061e4).
I compiled a build with newer commit (85d83d7) but failed to switch over to this when changing from my 4 GB Toshiba to 32 GB Samsung SD card.
This lapse in notice came too later after collecting all the raw data. Some of the findings presented here might not reflect bugs that are in the more current build.
minor bug: GameInstaller will crash if the screens are closed when 'Install success' is reached with the green blinking LED indicator.

This test puts GameInstaller to grueling rounds of installing the same game but in different formats. Alongside the o3DSXL, my cousin also lent his cart copy of Pokémon Sun. I would have preferred a smaller sized game; you work with what you got.
The exact game in question.

[DAT-o-MATIC] 1609 - Pokemon Sun (USA) (En,Ja,Fr,De,Es,It,Zh,Ko)

Because of the FAT32 storage size limit, here are the actual hashes when adjusting for the -1 byte.

ENCRYPTED - 4.00 GB (0x100000000 bytes) - CRC32: 9B7AEABA
ENCRYPTED - 3.99 GB ( 0xFFFFFFFF bytes) - CRC32: 11427A19
DECRYPTED - 4.00 GB (0x100000000 bytes) - CRC32: 5C4780E8
DECRYPTED - 3.99 GB ( 0xFFFFFFFF bytes) - CRC32: FB809C62


Here comes the tricky part explaining what is what for each case.


[C:] GAMECART (CTR<private_header>)/0004000000164800_v00.3ds → NCSD image options... → Install game file


[C:] GAMECART (CTR<private_header>)/0004000000164800_v00.trim.3ds → NCSD image options... → Install game file


C:/0004000000164800_v00.3ds → Copy to 0:/gm9/out → ... → Install game file


C:/0004000000164800_v00.trim.3ds → Copy to 0:/gm9/out → ... → Install game file


Taking the *_v00.3ds from cases 1 or 3 → NCSD image options... → Decrypt file (0:/gm9/out) → ... → Install game file


Taking the *_v00.trim.3ds from cases 2 or 4 → NCSD image options... → Decrypt file (0:/gm9/out) → ... → Install game file


7/8/17/18. Taking any *.3ds from cases 1–6 → NCSD image options... → Build CIA from file → Install output decrypted *.cia with program or app of choice.
9/10. Taking the decrypted *.cia from cases [7/8/17/18] → CIA image options... → Encrypt file (...) → Encrypt to 0:/gm9/out → Install output re-encrypted *.cia with program or app of choice.
11/12. Taking the decrypted *.3ds from cases 5 or 6, convert this into a *.cia with 3dsconv. Install the output decrypted *.cia with program or app of choice.
13/14. Taking the encrypted *.3ds from cases 3 or 4, convert this into a *.cia with 3dsconv. Install the output encrypted *.cia with program or app of choice.
15/16. Taking the encrypted *.3ds from cases 3 or 4, decrypt this with Batch CIA 3DS Decryptor. Convert the output *-decrypted.3ds into a *.cia with 3dsconv. Install the output decrypted *.cia with program or app of choice.

Results



The hashes listed in each case column are the decrypted versions of the files. In GodMode9, this would normally be pulled out of the [A:] SYSNAND SD. For the sake of efficiency, I used Duplicate Cleaner Pro (by DigitalVolcano) to find files with the same hashes in encrypted form and then back searched the unique decrypted hash values with ninfs and 7-Zip (right mouse click on file → CRC SHA).


Cases 17 & 18 were done last and almost as a last moment afterthought. They were included for reassurance on whether the outputs for (7) FBI and (8) GM9 could be trusted and to check against something comparable (17) DevMenu and (18) custom-install as references. I placed these out of order next to 7 and 8 for easier examining.


For cases 11–16, certain files such as the *.tmd and *.tik from the converted *.3ds → *.cia are not directly comparable by hash only due to different conversion conventions between GodMode9 vs 3dsconv. However, other files when grouped together as a set like the two *.app and *.cmd can be cross compared between cases.


The re-encrypted *.cia (D5642572) for cases 9 and 10 is a bit weird. The encryption process reverted the manual (0000001.app) from (47DB3F6B) back to (0C5A2919) as one might expect. The game (0000000.app) on the other hand did not likewise return from (89C4BFCF) to (EFCBA9CC). Similar mismatch of expected vs actual hash was observed for the encrypted .3ds → decrypted .cia for cases 15 and 16. I did not find these discrepancies worth pursing for closer examination as they fall outside the purview of this PR.


All sixteen cases produced 00000001.sav in that size with the first 0x20 bytes un-initialized or filled with 00's.


I launched both manual and game for cases [2/6/8/10/12/14/16]. For the game portion, I stopped short of the language selection screen. No dummy profile saves were made. I considered a case to be successful (function-wise) if the extdata subfolder was produced upon returning to GodMode9 for check-up. Each case produced the A:/extdata/00000000/00001648. 👍



BUGS


[3dbrew.org] Title Database

We already touched base about the differences in Title Version (block 0xC–F). Because I did this test on an older build, (@aspargas2) you might have already fixed this. For GameInstaller, the title entry's Title Version is not consistent depending whether the source rom was *.3ds and *.cia. When installing the same *.cia, that inconsistency extends between FBI/DevMenu vs GameInstaller and custom-install. Calling @ihaveamac for tag along if this something to look into.
The ExtdataID_LOW (block 0x20-23) is missing. I took a brief look in the custom-install's source code. This appears to be pulled from the game's 00000000.app → extheader.bin at block 0x230–233.


[3dbrew.org] Ticket

I understand there isn't a formal standard in how to go about producing fake or nonlegit tickets. For GameInstaller, the trailing end of the ticket in block 0x2F0–34F when installing *.3ds is different than installing *.cia. I chalk this up to holdover source code from the original Cart Installer fork.
I'm guessing the difference in Ticket Title Version (block 0x1E6–1E7) in tickets probably relates to the Title Version found in the title entries.


[3dbrew.org] Title metadata

Ditto for Title Version (block 0x1DC–1DD) for the *.tmd.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/ihaveamac,10,https://github.com/d0k3/GodMode9/pull/618#issuecomment-673757821,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","The title version block at 0xc should be more like 2 fields, title version (from tmd) and NCCH version (offset 0x112). This is apparently needed to fix DLP child contents (maybe manual too but I haven't looked into it). I don't know why installing through the OS doesn't set this field though, unless the version is actually 0 or it doesn't do this for titles without extra contents.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/ihaveamac,11,https://github.com/d0k3/GodMode9/pull/618#issuecomment-673795885,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Seems like the NCCH version field is empty if the title has no DLP child, but title version is always set. Observed in Mario Kart 7 (0004000000030800) and Tri Force Heroes (00040000001b5000) which have an NCCH version set and have a DLP child, and Pokémon Ultra Sun (00040000001b5000) and Update for Mario Kart 7 (0004000e00030800) which have an NCCH version set to 0 and no DLP child. All 4 titles have NCCH version = 2 in the main content.
tie.zip",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/618#issuecomment-674104665,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Okay, as you see, I worked quite a bit on this. Just a few remarks:

I can explain the differences in original 00000000.app from the cart dump vs 00000000.app inside a CIA or installed. As you know, carts are not really intended for installing. To make them work we need to change a small thing in the extended header. Of course we don't revert that change, as we can't really tell if the CIA was build from a cart dump or digital content afterwards.
The differences in the tickets are acceptable, they still need some looking into. Maybe @aspargas2 can help (https://user-images.githubusercontent.com/35666439/90171611-be2dc380-dd6f-11ea-9761-7da47016fc2a.png)
The NDS save file pita will need a little more time. We will manage, of course.
I'm not 100% sure if all my fixes work as they should in all cases. Further testing may be required, but a reduced setup is more than acceptable of course.

To be honest, I somehow lost track and I don't know if I didn't miss anything. If you can, can you provide us with a list of issues that we haven't adressed? Or issues with an unknown state (adressed, but fix untested)? I will be able to do quite a lot next week, hoping to improve this a lot.
Anyways, thanks a lot, @TurdPooCharger! Bug reports such as this, and really thorough testing is highly appreciated and helps us make features such as this possible.
Also, thanks, @ihaveamac - you also know without all your research we would never have gotten this far.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/TurdPooCharger,13,https://github.com/d0k3/GodMode9/pull/618#issuecomment-674454447,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","[3dbrew.org] Title metadata

The above example *.tmd is a fictitious title. There are a handful I've seen that have two saves. While I haven't come across a real DSiWare game that has all three saves, I think having any save type is independent of each other.
Example 1 - This game has both public.sav and private.sav.
000480044B344B56
Trailblaze™: Puzzle Incinerator
TWL-N-K4KV
Example 2 - This game has both public.sav and banner.sav.
000480044B4E4445
Brain Age™ Express: Arts & Letters
TWL-N-KNDE

This should help in your programming when creating FAT12 images for the public.sav and private.sav. Use these as reference for comparison. Just know that the examples provided in the archive does not encompass all the possible save sizes.

dsiware_save_sizes.7z

Test installing those titles with banner.sav on both FBI and DevMenu, they all appears to be 0x4000 bytes filled with randomly generated values.
Edit - Forgot to add. I've seen TWL system titles (those sourced and converted from Nintendo DSi) have the SRL Flag set to 01. These seem to install the same as if the value was set to 00 like most other dsiware; did not observe any directory changes unlike 02 → banner.sav.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,14,https://github.com/d0k3/GodMode9/pull/618#issuecomment-674459111,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Thanks a ton, @TurdPooCharger! That info, and especially the archive with those savegames will help me a lot. To be honest, I was already searching for something like this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,15,https://github.com/d0k3/GodMode9/pull/618#issuecomment-674574623,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Alright, I had to rebase this on master because of a very important fix done by @Wolfvak (renaming functions should work again now). Everyone working with this will have to clone fresh. Sorry about the trouble, everyone!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,16,https://github.com/d0k3/GodMode9/pull/618#issuecomment-675150666,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","@TurdPooCharger - just a quick one. The SRL flag and banner.sav was a good find. There's more info on what the SRL flag actually means on GBATEK. 1 means ""requires EULA"". I guess I'll just have to take that over from somewhere in the TWL header.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,618,2020-08-05T19:55:23Z,2020-08-20T17:54:59Z,2020-08-24T09:03:01Z,CLOSED,False,553,156,16,https://github.com/d0k3,Finishing game installer functionality,19,[],https://github.com/d0k3/GodMode9/pull/618,https://github.com/d0k3,17,https://github.com/d0k3/GodMode9/pull/618#issuecomment-677811156,"This is a draft pull request, intended for testing and continued development (fixing bugs, adding missing feature) of the game image installing feature.
Here's a non-conclusive list of stuff still left to do:

Identify and properly test all possible cases, fix any bug that comes up
Implement cleanup on failed install (this needs uninstaller functionality first)
Better handling for common issues (not enough space, title.db / import.db missing) with error messages
Installer function for tickets(?)

Thanks go to @TurdPooCharger who has already started testing, looking forward to further bug reports.","Merged to master and closed, continued in #621",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,620,2020-08-20T02:13:13Z,2020-08-20T11:47:43Z,2020-08-20T12:46:46Z,MERGED,True,13,4,5,https://github.com/Wolfvak,add another pxi barrier for firmlaunch,1,[],https://github.com/d0k3/GodMode9/pull/620,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/620,"fixes a race condition when booting gm9 from itself (especially noticeable on new3DS consoles)
submitted as a PR for testing/debugging/commenting/reviewing/etc, will be merged to master when confirmed fully working","fixes a race condition when booting gm9 from itself (especially noticeable on new3DS consoles)
submitted as a PR for testing/debugging/commenting/reviewing/etc, will be merged to master when confirmed fully working",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/621,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,2,https://github.com/d0k3/GodMode9/pull/621#issuecomment-678606829,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","The gameinstaller_next fork that was used had the last commit (6a18d07).
FIXED: Opening the keyboard and renaming folders/files works again.
FIXED: Installing CIA with screens closed, GM9 does not crash after finishing / green blinking LED indicator.

Test No. 6 -  Can GameInstaller install a universal legit game CIA? Is the universal legit state retain-able?
I'm adding this tidbit here so public readers who are not familiar about the difference will know what are private legit CIAs versus universal legit CIAs.

A legit CIA is any title that can be backed up and reinstalled where it will launch and function without the assistance of custom firmware.
Private legit CIAs are digital eShop titles that were personally purchased with one's own money. (Without CFW), a private legit title only works on the 2DS/3DS system that it was downloaded to due to console unique encryption (ie, ticket signature).
Universal legit CIAs are either intact system titles or the few games that came prebundled on some special edition 2DS/3DS models.
Standard / nonlegit CIAs are all the 3DS homebrew apps and the majority of shared SD dumps floating out there on the Internet.
There are no homebrew means of building or up-converting a standard CIA into a legit CIA.


The example title that was used comes preinstalled on select Old 2DS models.

New Super Mario Bros. 2: Gold Edition (USA)
0004000000137E00
CTR-P-BMAE

CIA checker tool verified the source CIA I used has both the Ticket/TMD as legit/legit.
For the installation to be considered successful, the title's manual and game has to launch and function in open firmware. Running the 3DS firmware as if having no custom firmware can be achieved as described in:

[3ds.hacks.guide] Uninstall CFW , Section I - Safety Test 
1:/title/00040138/00000002/content/000000##.app → NCCH image options... → Mount image to drive → G:/exefs/.firm → FIRM image options... → Boot FIRM → Try to boot anyways

This test isn't an in-depth A vs B comparison, but both FBI and GM9 installs on the o3DSXL work fine. 👍

Just to make sure this wasn't a fluke, I re-dumped the GM9 installed copy of the game,

A:/title/00040000/00137E00/content/00000000.tmd → TMD file options... → Build CIA (legit)

, took the microSD card and that re-dumped legit CIA,

0:/gm9/out/0004000000137E00 NSMB 2 Gold Edition (CTR-P-BMAE) (U).legit.cia

, and GM9 installed the game on my n3DSXL. Under open firmware condition, I played up til the first world's castle stage. 👍

Test No. 7 - Does GameInstaller imports the seeds when installing CIAs?
For the casual readers, many eShop CIAs out there that originated from homebrew CDN downloaders such as CIAngel, tikShop, and Villain3DS were dumped with a last layer of encryption. Nintendo added this encryption with the intention of allowing users to purchase and download eShop games before their official release dates but prevent early spoilers by restricting access to actual game play. The seed (encryption key to unlock that last layer) would be publicly released upon that game's official release date.
For this test, the two (2) games listed here were chosen for their small sizes and difference in what contents were encrypted.
Example 1
Pokémon Gold Version (GBC VC) (USA)
0004000000172600
CTR-N-QBPA
Example 2
Bloodstained: Curse of the Moon (JPN)
00040000001D3A00
CTR-N-BLMJ

The source CIA for Example 1 has both its game and manual *.app encrypted.
The source CIA for Example 2 only has its manual *.app encrypted.

This test also isn't a direct FBI vs GM9 comparison.
My first batch installs with FBI was to determine if the games fail to launch, which they did.
When launching Pokemon's game, the o3DSXL crashes with this message.

An exception occurred
Processor: Arm 11 (Core 1)
Exception type: undefined instruction
Current process: loader (0000000000000000)
.
.
Press A to save the crash dump
Press any other button to shutdown

Bloodstained installed as-is has no problem reaching the menu screen.
When launch either games' manuals, this happens.

An error occurred (ErrDisp)
Error type: card removed
The card was removed.
Press any button to reboot.

I backup the o3DSXL's SysNAND *.bin image before proceeding to FBI reinstall the CIAs again on top of the already installed games to check if they still crash (which they do). Next, I connect to the Internet and import the seeds by going to:

FBI → Titles → Game 1 / Game 2 → Import Seed

Both have their respective manuals and games play fine after online importing the seeds. I then restore the sysnand and recheck if the games go back to crashing (they do).
The seed importing process is repeated again but this time using the offline method with the seeds as individual .DAT files.

sdmc:/fbi/seed/0004000000172600.dat
sdmc:/fbi/seed/00040000001D3A00.dat

These *.dat are extracted from ihaveamac's seedDB list seeddb.bin using hydroseed program.
The games have no problem here either with the offline importing method.
I restore the sysnand once more, delete the Nintendo 3DS folder of those two games, and restore the six (6) *.db files from the dbs_nand (reference) folder mentioned far back from Test No. 1.

For GameInstaller's first batch install, I will note that this directory did not contain any files.

sdmc:/gm9/support/(empty)

The installed games function or crash exactly as expected without their seeds.
On GameInstaller's second batch install, I added this and then restarted the session by pressing and holding (POWER) → Luma3DS chainloader → GameInstaller (6a18d07).firm.

sdmc:/gm9/support/seeddb.bin

BUG: A little background explanation for the readers who are not familiar with GodMode9. You can fully decrypt problematic CIAs that require seeds if the seeddb.bin is put in place and has the seed for that title.

0:/.../game.cia → CIA image options... → Decrypt file (0:/gm9/out)

This one bummed me out a bit as I was anticipating in glee that GameInstaller would easily crush this test hand downs. But then that lead to another pressing question. How does FBI import the seeds in the first place? Surely, there is no way it can instantaneously decrypt the *.app contents because if these games were decrypted, they would not fail to launch after restoring the sysnand.
At first, I thought seeds were imported to the 1:/dbs/import.db. Back and forth seed import, backup import.db, sysnand restore, and then manually restoring the import.db revealed this was not the case. I looked through some entries on 3dbrew.org but couldn't find info about where those seeds were imported to.
After some trail and error deleting folders and files within CTRNAND, I strongly suspect FBI imports the seeds to,

1:/data/<ID0>/sysdata/0001000f/00000000

Further confirmation will be needed, and if this happens to be true, a wiki edit may be in order.

[3dbrew.org] System SaveData

Edit - Found one entry regarding seeds.

[3dbrew.org] Filesystem services#SEEDDB


There was a Test No. 8, but I'll be conserving and gathering energy to write that one tomorrow.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,3,https://github.com/d0k3/GodMode9/pull/621#issuecomment-678758671,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Test No. 8 - Install a bunch of update CIAs.
I subjected both FBI and GameInstaller to batch install updates (0004000e). The collection totaled to 93 USA and region free titles obtained from Nintendo eShop over the years.
FBI refused to install these three (3) titles on the o3DSXL.

0004000E0F70CC00 Fire Emblem Warriors (KTR-U-CFME) (U)
0004000E0F700100 Xenoblade Chronicles 3D (KTR-U-CAFE) (U)
0004000E001B8700 Minecraft (KTR-U-BD3E) (U)

GM9 did not mind installing the above New 3DS exclusives. Depending on the intended level of flexibility, this could be considered a potential bug for Old 3DS users who don't know or may end up having a false sense that N3DS exclusive titles are compatible. I suppose a warning or reminder message can be added at time of installation if GodMode9 comes across such a title, giving a choice for o3DS users if they wish to continue.
This might not ultimately matter because even if you manage to install a N3DS-only game on an O3DS system, HOME Menu will prevent the user from launching the game with this message.


BUG
After eliminating the same files between the two by hash comparison, leftovers were found in the GM9 set. There were extraneous save files for 85 titles that weren't found in the FBI set.

sdmc:/Nintendo 3DS/<ID0>/<ID1>/title/0004000e/<TID_LOW>/data/00000001.sav

I was able to pinpoint that the saves (of a certain size for a given title) were being made by:

first content/game 000000##.app → extheader.bin at block 0x1C0–1C3.

Before you guys write this off that update CIAs can never have *.sav, this is not true. I have personally witness on two rare occasions where FBI can and will install update CIAs with the 00000001.sav; see (Type D9)'s v1.6 release note under Rebuild 3DS Database.
I don't know for sure if these were flukes or malformed dumps, but they were really early releases of Pokémon Moon Update v1.2 (*.sav not recreate-able for v1.2 downloaded now on eShop) and a first day download of Shovel Knight: Treasure Trove (USA) Update v4.0A. I still have the CIAs for these two weird updates. These would have been the 'haha, gotcha' part behind Test No. 8, but the opportunity did not present itself.


Other observation. THIS IS NOT A BUG.
There were three (3) titles that did not have matching 00000001.cmd between FBI and GM9.
Metroid Prime™: Federation Force Update Ver. 1.1.0

0004000E0016E300 FEDERATION FORCE (CTR-U-BCAE) (U)

Metroid Prime™: Federation Force Blast Ball Update

0004000E0016F600 BLAST BALL (CTR-U-JA5E) (U)

The Legend of Zelda™: Tri Force Heroes Update

0004000E00176F00 Tri Force Heroes (CTR-U-EA3E) (U)


From what I've gathered, they are patches for the:

0000.0000000#.app = game or application
0001.0000000#.app = manual
0002.0000000#.app = DLPchild(?)

The *.cmd never turns out the same when FBI reinstalling these updates that has the DLPchild but no manual. A random CMAC is always generated for the skipped over or nonexistent 0001.0000000#.app.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,4,https://github.com/d0k3/GodMode9/pull/621#issuecomment-683207556,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","gameinstaller_finalize compiled with last commit (f13b468).

Test No. 9 - Install DLC CIAs.
I won't specify how many or which DLCs were involved in this test. Both the FBI versus GM9 sets produced matching *.app contents with identical hashes. The only minor differences between the two were the ContentIDs of the *.cmd and their title entries.

FBI names a title's *.cmd by the total number of installed *.app. For example, if there are 100 (0x64) *.app files within the A:/title/0004008c/<TID_LOW>/content/00000000, the CMD will be named 00000064.cmd.
GM9 always names the CMD as 00000001.cmd.
The title entries will likewise reflect the ContentID of their respect CMD at block 0x18–1C.
Of the DLCs that were installed, one CIA had a TMD that specify a Content Count of 11 (00 00 00 0B). In actuality, there were only 10 *.app within the archive. After FBI installing this DLC, the output CMD was named 0000000a.cmd.
The installed DLC with one less APP was checked with TMD file options... → Verify file. The result was Verification failed or a 'bad or incomplete dump'. I actually like that GodMode9 catches this outlier. It lets the user know whether his/her backups are intact. 👍

As was noted by @d0k3 in the above reply, the difference in CMD naming convention is not categorized as a bug. If there is a later change of mind or an exception made for DLCs to closer follow FBI/Dev Menu/custom-install, could the CMD's ContentID be copied from the CMD's final value for block 0x8–C?
Test No. 10 - Can GameInstaller fix a fairly badly softbricked 3DS firmware? How does this compare to CTRTransfer?
This test is brutal, pitting GM9 against a noob's folly of messing with the NAND. Here's how it was conducted.

Download the 2.1.0-4U_ctrtransfer_o3ds.bin image from quantumcat1.github.io, and put this on the SD card. Insert the SD card to o3DSXL, and boot to GameInstaller.
Delete the dbs and title folders within [1:] SYSNAND CTRNAND.
Mount the 2.1.0 ctrtransfer image. Copy and paste its dbs and title folders to CTRNAND. Fix the six (6) *.db CMACs.
Backup the system titles into legit CIAs. There are 136 in total.
Safely eject the SD card. Press (START) to exit. Observe that the o3DSXL can boot to HOME Menu under firmware 2.1.0.
Return to GameInstaller. Except for certs.db, delete the other five (5) *.db files.
Press (START) to exit. Observe the o3DSXL now boots to Black Screens of Death.
Return to GameInstaller. Observe those previously deleted *.db files have been restored with dummy copies.
Delete the title folder. Press (START) to exit. Observe the luma error for missing NATIVE_FIRM,


An error has occurred:
Unable to mount CTRNAND or load the CTRNAND FIRM.
Please use an external one.
Press any button to shutdown


Return to GameInstaller. Install those CIAs created from step 4.
Press (START) to exit. Observe the o3DSXL boots to HOME Menu again.
(Attempt to) update to 11.13U: System Settings → Other Settings → System Update.

While my expectation of a successful outcome was one where the o3DSXL does update all the way, I wasn't going label to this as a bug or hold this against GameInstaller if it didn't. Rest assure the o3DSXL updated to 11.13U. 👍
Some weird observations after the update.

Search for titles found 160 titles/TMDs. A lot of the original versions for titles in 00040130 (System Modules) were not deleted or replaced. System updating kept the old copies and installed the newest versions alongside those. These excess titles are effectively orphaned or leftovers. Why this happens and how to fix this is not within the scoop of this PR.
Titles that were updated had their title entries adjusted with those mystery bytes (block 0x50–53) blanked out (00 00 00 00). This is strange because this doesn't happen when system updating from a higher (but not latest) version firmware.

I repeated the test again but this time with just the manual 2.1.0 ctrtransfer (skipping steps 1& 4–10). When I try to system update, this is the outcome.

An error has occurred.
Unable to update.
The system will
now be restarted.

The 3DS firmware semibricks/frankenfirm where Search for titles find 183 titles. The ones that fail in midupdate had lingering *.ctx.
The test is repeated once more where step 1 has substituted 11.5.0-38U_ctrtransfer_o3ds.bin from [3ds.hacks.guide] CTRTransfer.

The number of titles in 11.5U image also totaled 125.
GameInstaller (all steps 1–12) was found to have 132 titles after the update.
Manual transfer (only steps 2 & 11–12) managed to complete the system update. This too was found to have 132 titles.

Barring a messed up file system for the CTRNAND's FAT16 partition and noob stupidity limited to deleting/uninstalling the system titles (other nand files are not considered here), GameInstaller is a perfectly capable and acceptable tool/function when it comes to repairing the 3DS firmware matching and in rare instances, exceeding what standard CTRTransfer can do. 👍
EDIT - I probably should a have added something about sysUpdater updating/downgrading the firmware, certain system titles can't be safely installed under FBI, and repairs can done be selectively with those individual system CIAs packaged at a certain site.
Test No. 11 - Homebrew system title(s)? SDK? CCI? CSU?
Yes.
example homebrew system title

FBI v2.6.0 (Full Dark Theme)

dev titles

[3dbrew.org] 3DS Development Unit Software

GameInstaller can install other, less common NCSD and NCCH containers. Whether a specific title launches and runs is another story.

The write-up for Test No. 12 will be presented tomorrow. After starting, stopping, and deleting the first sentence several times, this one is proving rather difficult in how to best present the findings.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,5,https://github.com/d0k3/GodMode9/pull/621#issuecomment-684134556,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Test No. 12 - Are bad dumps/corrupt CIAs rejected?
Using the CIA version of FBI v2.6.0, I hex edit an arbitrary location at block 0x3C76–3C78 from (00 00 00) → (42 41 43) or 'BAD'. This region is found within the extheader.bin for the title's EE360966.app.

The SHA-256 for the original *.app: 2603335FD7BFDD13C92C17A9653A597651DEDD55A7CC3355281C66D24BEA5976
The hash for the edited *.app: 937545E80AE0BEEF3DDF3DA7E89A5E48F912BDFF2E9042492925F80CD3822CCA

I rename this corrupted CIA to FBI (bad).cia. As can be expected when checking this file,

GodMode9 → FBI (bad).cia → CIA image options... → CIA checker tool → <A> yes → Result: Verification failed
... → Verify file → Result: Verification failed

, this is a bad dump.
I attempt installing FBI (bad).cia with the 3DSX version of FBI and DevMenu. The results are as follows.

Next, I try installing FBI (bad).cia with custom-install... The PC program allows the installation to go through. I eject the SD card, reinsert it to the o3DSXL, and check if the installed title is still considered a bad dump.

GodMode9 → [A:] SYSNAND SD → hold (R)-shoulder and press (A) → Search for titles → ... FBI (CTR-P-CFBI) (W).tmd → TMD file options... → Verify file → Result: Verification failed

The Nintendo 3DS folder is set aside and renamed as Nintendo 3DS (custom-install). A fresh copy of the Nintendo 3DS (reference) is pulled and renamed as the replacement Nintendo 3DS. The folder will later be referred to as Nintendo 3DS (GameInstaller).

BUG
Just like @ihaveamac's custom-install, I was able to install FBI (bad).cia with GameInstaller. Some people may have a different opinion than I do on this and in certain exceptions where it's acceptable (like the above Test No. 9 for the DLC with the missing *.app), I find it rather more important that the CIAs are hashed and verified against the TMD's content chunk records than that they can be installed at all. If a CIA in question is found to be a bad dump, it should be rejected and not installed. Save everyone the headache in the long run trying to troubleshoot why their games crash or aren't stable.
SERIOUS BUG
After installing the CIA to Nintendo 3DS (GameInstaller), I checked the title. What I saw was very troubling.

Result: Verification success

The TMD's chunk record had the hash data field adjusted to the corrupt APP's SHA-256: 937545E80AE0BEEF3DDF3DA7E89A5E48F912BDFF2E9042492925F80CD3822CCA
This bad installation of FBI could be dumped back into a CIA again where CIA checker tool and Verify file stated it to be Verification: passed and Verification success.
In certain instances like encrypting or decrypting CIAs or romhacking, I can see where it would be necessary to edit those hash records to reflect the (proper) changes that have occurred to the APPs.
No exceptions should be made for corrupt titles! All this leads to is propagating bad dumps disguised as good ones.
(Another) SERIOUS BUG
This bug is not directly related to GameInstaller, but finding this broke the preservationist's heart within me. :-(
I image mounted an original intact copy of FBI.cia, [CLIPBOARD] selected the tmd.bin, navigated to the A:/title/0004000/0f800100/content directory where bad FBI is installed to, pressed (A) on the 00000000.tmd, and Inject data @offset → |00000000|.
After overwriting the *.tmd, I checked if the installation was now seen as bad.

TMD file options...* → Verify file → Result: Verification failed

This is a very handy feature to have when one has their library corrupted by a fake SD card and would like to salvage any titles that are still intact after migrating to a replacement card.
Despite the failed verification, I was able to build a CIA from this corrupted title. That CIA had its TMD chunk record's hash adjusted to the bad APP's hash, giving a misleading impression that the dump is intact. The ability to back up bad titles into CIAs has been present in older versions of GodMode9.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,6,https://github.com/d0k3/GodMode9/pull/621#issuecomment-684139389,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Except for the possibility of (Test No. 13) Citra decrypted *.3ds rom set to the wrong crypto flag and (Test No. 14) SD card that doesn't have enough free space, I have no other scenarios in mind to try out.
If anyone has any suggestions or believe something is missed, any further testing (other than maybe 13&14) will focus on revisiting bugs from earlier.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/621#issuecomment-685667718,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Sorry about the radio silence! I'm on vacation right now, I don't even have any dev hardware with me (will be back in 2.5 weeks). Thanks a lot for all the testing! I'll get to all of it eventually.
For now, I wonder about the seeds. Isn't that something the 3DS OS should take care of? Ie, aren't seeds autodownloaded when the system is connected to the internet?
I'm also full aware we can't rely on Nintendo keeping their servers running for eternity (see: Wii servers and Miiverse), so we may need to find a solution one way or another.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/luigoalma,8,https://github.com/d0k3/GodMode9/pull/621#issuecomment-685861484,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","For now, I wonder about the seeds. Isn't that something the 3DS OS should take care of? Ie, aren't seeds autodownloaded when the system is connected to the internet?

I can something about that.
NIM handles downloading seeds outside the eshop (can't confirm if eshop itself does that too when opened or if or when it prompts NIM).
It downloads for a selected title id and country id at nim:u IPC 0x002D by registering for download on the background daemon thread or nim:s IPC 0x005F the same way on the spot by demand.
Also nim:u IPC 0x002E by registering for download on the background daemon, downloading all seeds only registered on FS's TITLETAG file (stored in sysdata 0x0001000F) as a prepurchase install (NIM handles, registers and updates these also). Or while the console is sleep mode (still for prepurchase registered titles only) after being awake by SRV notification 0x107 and PTM, if there are no background downloads left waiting to be performed.
I've not seen seed autodownloading asides what is registered as a prepurchase just from the home menu alone (if someone wants to test that further though, feel free).
If you don't install in the seed itself to SEEDDB, you may install the TITLETAG entry, it will make it look like a prepurchase install too on the home menu, so it will download when user tries to open it, or user leave console in sleep mode long enough.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/621#issuecomment-686378294,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Thanks a lot, @luigoalma, I wasn't aware of this. I guess we need to provide some way of injecting seeds in the long run. Servers won't run forever.
Is there a complete listing of which games use seed crypto? We're mainly interested in the numbers right now.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/luigoalma,10,https://github.com/d0k3/GodMode9/pull/621#issuecomment-686429070,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","It was mentioned here before, ihaveamac's SeedDB List.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,11,https://github.com/d0k3/GodMode9/pull/621#issuecomment-686466209,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",I can *later provide comparison files of the 0001000f/00000000 of before and after importing the seeds for example games.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/TurdPooCharger,12,https://github.com/d0k3/GodMode9/pull/621#issuecomment-703052940,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Sorry for ghosting on you guys this past month.

[Spoiler] not relevant to this commit. What I've been up to.
A bunch of random stuff came up that dampened my time, energy, and mood spent online. 


Despite wearing gloves, KN95 + surgical masks, chemical splash goggles, separate set of PPE style clothing [hoodie, khaki pants, shoes, socks, shirt, etc.] and having a +70% alcohol sanitizer spray bottle carried at all times whenever going out to public for groceries and food pick-up, I managed to get the tiniest of sickness and went into self-quarantine.


Jerry rigged my 12 years old Samsung laundry machine. The washer tub had a terrible balance where it would violently shake the house during a fast spin cycle. Not even a new set of shock absorbers fixed the problem. Because my family's broke as shit and we didn't feel like replacing an otherwise perfectly fine washer, I decided to put my engineering degree to good use by retrofitting the washer with moar dampers! Instead of 4 shocks found on a typical washer, mine is rocking 8. :-) Take that planned obsolescence!





Sold off two of our clunker cars. Fixed a third car with a snapped serpentine belt that was way past overdue on its 100K miles change interval. Opps on keeping up with basic maintenance. Looking to trade in our 4th car as down payment for a Japan-built 2021 Toyota Corolla SE.


This Atlantic hurricane season has been waaay more active than other years and has made us reconsider getting home insurance. My Floridian house, made of concrete walls and concrete tiled roof, has survived so far. Luck will run out sooner or later... :-/ Blah, the joy of wading through scheduling appointments for home inspections and paperwork. Fun stuff.




Attached in this ZIP are before and after changes for the 0001000f/00000000, their partitionA.bin, and the individual seed DAT files for the below example games.

import seed stuff.zip

Order of seeds imported.
0 - No imported seeds (empty).
1 - 1st game: Pokémon - Gold Version VC (USA) (0004000000172600)
2 - 2nd game: Bloodstained: Curse of the Bloodmoon (JPN) (00040000001D3A00)
3 - 3rd game: Pokémon - Silver Version VC (USA) (0004000000172700)

Here are the data fields I could gather for the partitionA.bin.

0x3004–???? = The counter value for the number of seeds contained within. I don't know which direction it rolls over (towards 0x3003 or 0x3005?) when you have more than 255 (FF) seeds. I'll see if I can mass import 255 seeds through a custom gm9 script, import one more seed in FBI, and then report back which way it goes.

EDIT - It's likely 0x3000–3004 BUT just to be sure, I'll check anyways.
TitleID of the games (endian) in the order they were imported.

0x4000–4007 = 1st game.
0x4008–400F = 2nd game.
0x4010–4017 = 3rd game.
.
.
etc.

Seeds of the games in the order they were imported.

0x7E80–7E8F = 1st game.
0x7E90–7E9F = 2nd game.
0x7EA0–7EAF = 3rd game.
.
.
etc.


For my 4th attempt, I tried to import the seed for Pokémon - Gold Version again. No changes observed for the 0001000f/00000000's partitionA.bin; FBI does not allow you to import redundant copies of the same seed.

LATE EDIT - I did the 255 imported seeds by script. On the 256th with FBI, the counter rolls over towards the right.

0x3004–0x3005 = 00 01",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,13,https://github.com/d0k3/GodMode9/pull/621#issuecomment-707375377,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Alright, sorry bout the radio silence, too. I've been pretty busy these last few weeks, slowly finding my way back into GM9 development. Thanks a lot for all of your help! I'll try to review everything that was tested so far and will make a new list during the next few days.
As for unrelated stuff, I guess there is no way to escape the common cold, no amount of desinfectant, gloves, masks will achieve that for us. Hope all is well! I like what you did to that washing machine, too.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,14,https://github.com/d0k3/GodMode9/pull/621#issuecomment-707692676,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Alright, after going through each test, here's my summary.
1. Is that stuff fixed for good?
I'm just taking over the list from the op here. I think everything here is fixed, but maybe @TurdPooCharger can have a second look.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required here. Can you help @TurdPooCharger ?
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

2. Stuff that may need further looking into (not high priority)
Also a copy from the op. Nothing here has high priority. Just a quick reminder.

title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. Maybe @aspargas2 has a better understanding of how this happens than me.

3. Stuff that must be looked into
That's the stuff from tests #6 and upwards (I'm glad GM9 passed at least a few of these tests). I need to have a closer look here, and there's also some open questions (which I'll add to the list).

installing games and handling seeds (see test 7): I think GM9 should at least import seeds from a user provided seeddb.bin. That should solve this issue for good. When the required seed is not available, we can at least try to install the TITLETAG entry (thanks @luigoalma), so the 3DS OS can look for the seed itself. @TurdPooCharger's pull request is also a great way of approaching this issue.
update CIAs creating save files (see test 8): Some update CIAs have the save flag set, thus GM9 creates a save file for them (which it should not). I need ideas on how to solve this. Should we disable generating save games for update CIAs in general? And can we properly recognise update CIAs?
installing N3DS exclusives on O3DS (see test 8): I personally don't think that's an issue. GM9 does what the user wants after all. I'd be okay with putting out a warning (if we're able to recognise N3DS exclusives properly), but I don't think it's required.
leftovers when installing system titles (see test 10): Oooof. Tbh I'm not really sure I understand what happens there. You were able to restore the system titles from GM9, then, after the update, you noticed there were some leftover titles (older versions), right? There may actually be no solution to this, as the problem seems to be in the 3DS OS update and we do not completely know how this works. May be related to TMD numbering (which defaults to 1 in GM9). Can you give some more info, @TurdPooCharger ? Do you think this needs work?
handling corrupt game images (see test 12): I agree, we at least need to make the user aware of corrupt game data. I'll look into it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/luigoalma,15,https://github.com/d0k3/GodMode9/pull/621#issuecomment-708031270,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Also, I should note as well. SEEDDB cap is 2000 seeds, in system modules (like NIM processing lists) and physically in space too. 0x3000 is where file usually starts on the partitionA.bin Inner FAT, although it can be elsewhere, its a filesystem.
SEEDDB is exactly 0xCB80 (52096) bytes in length.
Using offsets relative to SEEDDB, not partitionA.bin, based on information given by @TurdPooCharger and double checked by making a few tests and copying out SEEDDB with FBI:

The first 0x1000 bytes are unknown (usually 0?) except at offset 0x4, which has a little endian u16 or u32 (unknown which, could be u16 since its big enough for 2000, that requires checking how FS reads it to know which data type).
At 0x1000, title id list starts, fits 2000 little endian u64 entries. This is 0x3E80 (16000) bytes.
At 0x4E80, seed list starts, fits 2000 u8[16] entries. This is 0x7D00 (32000) bytes.

Might as well also tell the structure of TITLETAG file on the same Inner FAT too.
It is exactly 0x43680 (276096) bytes in size.
Follows the same format as SEEDDB, 2000 entries as well, except:

At 0x4E80, title tag list start, fits 2000 titletag structure entries (0x80 bytes each). This is 0x3E800 (256000) bytes.

The structure of a title tag entry goes as it follows:
// This structure is 0x80 bytes
typedef struct {
  char magic[4]; // ""PREP"" for prepurchase install. NIM excepts ""PREP"" to do seed downloads on the background.
  // playable date parameters
  // 2000-01-01 is a safe bet for a stub entry
  s32 year;
  u8 month;
  u8 day;
  u16 country_code; // enum list of values, this will affect seed downloading, just requires at least one valid enum value. 1 == Japan, it's enough.
  // everything after this point can be 0 padded
  u32 seed_status; // 0 == not tried, 1 == last attempt failed, 2 == seed downloaded successfully
  Result seed_result; // result related to last download attempt
  s32 seed_support_error_code; // support code derived from the result code 
  // after this point, all is unused or padding. NIM wont use or access this at all.
  // It's memset to 0 by NIM
  u8 unknown_filling[0x68];
} FS_TitleTagEntry;",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,16,https://github.com/d0k3/GodMode9/pull/621#issuecomment-708647212,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",Thanks @luigoalma - just the info I need when I need it!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,17,https://github.com/d0k3/GodMode9/pull/621#issuecomment-713891793,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",@luigoalma - can you also tell me to usual start of the TITLETAG file inside partitionA?,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/luigoalma,18,https://github.com/d0k3/GodMode9/pull/621#issuecomment-713909668,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","TITLETAG I believe, usually, 0x10000.
These offsets are if given the fact the user or homebrew did not try to delete and restore SEEDDB and TITLETAG files, or tried to do some other misc file adding or removable into syssave 0x1000f.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,19,https://github.com/d0k3/GodMode9/pull/621#issuecomment-716868527,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",The last few commits should handle all the issues found in test 7 and test 12.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,20,https://github.com/d0k3/GodMode9/pull/621#issuecomment-716869468,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!",Any ideas about update CIAs creating save files? (see test 8),True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,621,2020-08-20T17:53:37Z,2020-10-27T23:04:23Z,2020-10-27T23:04:24Z,CLOSED,False,330,158,9,https://github.com/d0k3,Finalize game installer functionality,5,[],https://github.com/d0k3/GodMode9/pull/621,https://github.com/d0k3,21,https://github.com/d0k3/GodMode9/pull/621#issuecomment-717591834,"This is a followup pull request to already merged #618. Based on the tests done previously by @TurdPooCharger (again, thanks a lot!), this is the current state:
Presumably fixed
Fixed, and tested at least once. Further testing makes sense here, cause we may still have missed something.

bad CMD file without CMACs (see test 1): Should be fixed for good. Only system CMDs have no CMACs.
title.db entry, bytes 0x0C...0x0 (see test 1): ""title version"" - takes over NCCH title version too for NCCH with DLP only (thanks @ihaveamac)
cleanup of orphaned files from earlier installs (see test 2): Before an install, we wipe the content/data folder now. Existing saves with the correct size are left untouched.
ticket device ID is always set to zero (see test 3): We keep the device ID if it matches the system now. It is zeroed only where required.
savegames for TWL are not auto-created (see test 4): This is implemented now. The save files won't match system created ones exactly (in fact, only the first 0x200 byte should be identical for public.sav and private.sav), but it should still work. We are unsure if banner.sav also work. Further testing is required.
title.db entry, bytes 0x20...0x23 (see test 5): ""extdata id low"" - this is now properly taken over

Unfixed / Unfixable
Stuff that we lack the knowledge for fixing. Some of these are ""non-errors"" and rather stuff that system / FBI does different from GM9. None of these has an effect on functionality.

title.db entry, bytes 0x50...0x53 (see test 1): ""mystery bytes"" - we just write ""GM9"" there. Causes no problems at all. We'd very much like to do this proper, though.
title.db entry, bytes 0x14...0x1D (see test 2): ""TMD ID"" and ""CMD ID"" - we always use 0 / 1 for this. This is not an error, but rather a slightly different approach. Won't be fixed.
title.db entry, bytes 0x00...0x03 and 0x30...0x3F for DS INTERNET (see test 3) - we have no clue what happens here. Values seem random.
Difference in ticket between CIA install and .3DS install (see test 5): No clue what happens here yet, but no effect on functionality. I think @aspargas2 may have a better understanding of how this happens than me.

Other
This category is for other stuff that was observed during the tests.

Out of memory error when swapping out the Nintendo 3DS folder (see test 1): This can cause problems. We will research this, but it does not have high priority.
Software keyboard does not work (see test 3): Fixed by @Wolfvak - thanks!","Alright, as @TurdPooCharger will be unavailable for a while, I merged this to master. The remaining issues and tests will be handled in an issue.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,623,2020-08-25T02:42:33Z,2020-08-25T02:42:56Z,2020-08-25T02:43:01Z,MERGED,True,1,1,1,https://github.com/gemarcano,"Fix GCC warning, snprintf limit too long",1,[],https://github.com/d0k3/GodMode9/pull/623,https://github.com/gemarcano,1,https://github.com/d0k3/GodMode9/pull/623,"One snprintf in arm9/source/godmode.c call had a limit that was past
the size of the datestr variable it was writing into. Fixed to match
the size of the variable.","One snprintf in arm9/source/godmode.c call had a limit that was past
the size of the datestr variable it was writing into. Fixed to match
the size of the variable.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,623,2020-08-25T02:42:33Z,2020-08-25T02:42:56Z,2020-08-25T02:43:01Z,MERGED,True,1,1,1,https://github.com/gemarcano,"Fix GCC warning, snprintf limit too long",1,[],https://github.com/d0k3/GodMode9/pull/623,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/623#issuecomment-679468974,"One snprintf in arm9/source/godmode.c call had a limit that was past
the size of the datestr variable it was writing into. Fixed to match
the size of the variable.",thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,624,2020-08-25T04:37:47Z,2020-08-26T21:01:59Z,2020-08-26T21:01:59Z,MERGED,True,1888,1888,81,https://github.com/gemarcano,Remove trailing white space,1,[],https://github.com/d0k3/GodMode9/pull/624,https://github.com/gemarcano,1,https://github.com/d0k3/GodMode9/pull/624,"Removed trailing whitespace from all source code files (.c, .h. and
.s) and the README.md","Removed trailing whitespace from all source code files (.c, .h. and
.s) and the README.md",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,624,2020-08-25T04:37:47Z,2020-08-26T21:01:59Z,2020-08-26T21:01:59Z,MERGED,True,1888,1888,81,https://github.com/gemarcano,Remove trailing white space,1,[],https://github.com/d0k3/GodMode9/pull/624,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/624#issuecomment-681108110,"Removed trailing whitespace from all source code files (.c, .h. and
.s) and the README.md","Merged, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,625,2020-08-25T13:52:15Z,2021-02-21T14:08:05Z,2021-02-21T14:08:06Z,CLOSED,False,382,310,18,https://github.com/Wolfvak,MCU Event implementation,5,[],https://github.com/d0k3/GodMode9/pull/625,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/625,"add an atomic MCU event system to be used by the GFX code (and maybe anything else that could need it)
also refactors a bunch of other code that should've been cleaned up and simplified long ago","add an atomic MCU event system to be used by the GFX code (and maybe anything else that could need it)
also refactors a bunch of other code that should've been cleaned up and simplified long ago",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,625,2020-08-25T13:52:15Z,2021-02-21T14:08:05Z,2021-02-21T14:08:06Z,CLOSED,False,382,310,18,https://github.com/Wolfvak,MCU Event implementation,5,[],https://github.com/d0k3/GodMode9/pull/625,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/625#issuecomment-730062792,"add an atomic MCU event system to be used by the GFX code (and maybe anything else that could need it)
also refactors a bunch of other code that should've been cleaned up and simplified long ago","Alright, this PR adds an ""event interface"" for the ARM11 and changes most of how it works - instead of having an interrupt do its work (in a non-interruptible context) it now simply marks itself as ""pending"" in software.
The main PXI loop (and other pieces of code) can then check whether there are pending interrupts and act upon them. Although we lose in timing predictability, we gain in stability because all hardware management is done in an interruptible system context: for example, now we don't have to worry about a PXI call to read/write I2C interfering with the same call happening on a VBlank handler.
Although there's still a few more features left to implement/things to fix, this PR is now ready for testing and review.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,625,2020-08-25T13:52:15Z,2021-02-21T14:08:05Z,2021-02-21T14:08:06Z,CLOSED,False,382,310,18,https://github.com/Wolfvak,MCU Event implementation,5,[],https://github.com/d0k3/GodMode9/pull/625,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/625#issuecomment-782863813,"add an atomic MCU event system to be used by the GFX code (and maybe anything else that could need it)
also refactors a bunch of other code that should've been cleaned up and simplified long ago","Merged to current master, merge conflicts fixed",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/TurdPooCharger,1,https://github.com/d0k3/GodMode9/pull/634,Set it and forget it.,Set it and forget it.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/luigoalma,2,https://github.com/d0k3/GodMode9/pull/634#issuecomment-705772294,Set it and forget it.,"I feel like this could be done a bit more delicately. 0001000f/00000000 is a DISA wrapper with a savegame file in it, given the SAVE header. GM9 can mount the DISA wrapper but not the Inner FAT savegame yet. Although most systems will have SEEDDB and TITLETAG positioned about equally the same place, its not strictly set to be always the same place. With the right type of tampering and SEEDDB file from the save is elsewhere.
Although be it most users likely wouldn't tamper with the save file.
But just putting it out there",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/TurdPooCharger,3,https://github.com/d0k3/GodMode9/pull/634#issuecomment-705834073,Set it and forget it.,"@luigoalma, I see the SEEDDB at 0x2034–203A and the TITLETAG at 0x2064–206C in the partitionA.bin on my n3DSXL and o3DSXL,. Are you saying that the data fields around this area can shift from those locations? I've seen this occurrence before in the 00010017/00000000 (configsave.bin) where the offsets of the user info will depend on which 3DS firmware version the user created his/her profile.
Or are you referring to the effect where the 3DS falls back on the second partition partitionB.bin(?) when the active partition (partitionA.bin) is no longer valid due to broken chain of trust?
As for the PR itself, the proposed changes does not edit anything before 0x3000 in the seedsave.bin's partitionA.bin so the SEEDDB and TITLETAG stuff around 0x2000-208F are left alone.
Do you know if the initial entries for the first TitleID and its seed is ever written elsewhere other than 0x4000 (TitleID) and 0x7E80 (seed)?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/luigoalma,4,https://github.com/d0k3/GodMode9/pull/634#issuecomment-706349380,Set it and forget it.,"It's essentially a filesystem. Fuzz around the file tree with just FS on userland and things can out of place than expected.
Not talking about partitionB.bin, this one happens to not have it.
Most users will have it the same place, but it's doing a guess.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/634#issuecomment-707375599,Set it and forget it.,"I guess I'll wait a bit before I merge this. Let me know when it's ready, @TurdPooCharger !",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/634#issuecomment-717572513,Set it and forget it.,"Okay, a new commit allows handling seeds from seeddb.bin now when installing titles: 8e3a5b4
So, do we still need seed importer functionality in the megascript? If we do I at least suggest we get rid of the hardcoding. I can provide a scripting function that would import the seeds from seeddb.bin in that case.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/TurdPooCharger,7,https://github.com/d0k3/GodMode9/pull/634#issuecomment-719824836,Set it and forget it.,"Back from a long break.
I no longer believe this mass importing seeds method is necessary.
I opened this PR as a backup plan in case adding a built-in import seed functionality in GodMode9 never materialized.
After @luigoalma shared that key tidbit but before the break, I was in the beginning of research studying differences in the seedsave.bin between initial 9.6 and latest firmware versions. System title CIAs were being collected for the eventual downgrade and incremental updates. This was in hopes of finding all the possibility offsets of the SEEDDB and TITLETAG.
If there wasn't an exact pattern locating those stuff around the 0x2000–2100 area, one approach I had in mind to remedy this would have been to blank them out and hard code inject them back at the previous mentioned typical 0x2034–203A and 0x2064–206C.
There are two potential issues to this mass import idea.


(1) Any leftover or new seeds added to ihaveamac's updated seeddb.bin would mean having to go back and manually edit the script to include those stragglers. This may or may not be a problem depending if Nintendo eShop(s) of JPN, EUR, USA, etc. are still releasing new digital 3DS titles.


(2) After importing all the seeds, I noticed that my/cousin's o3DSXL when booting to HOME Menu that the screens tend to stay black with background music longer than usual, like up to 3-5 secs before the screens load up. This doesn't always happen, but this may lead users with a good eye to worry and think the slower loading than usual could be something wrong with their 2DS/3DS.


I'll close/rescind this PR once I get around to testing commit 8e3a5b4.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/634#issuecomment-750312181,Set it and forget it.,"Don't want to nag, @TurdPooCharger. As I'm going through the repo right now, I just wanted to give you a quick reminder that you wanted to close this one once 8e3a5b4 is tested.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,634,2020-10-05T12:58:05Z,2020-12-25T01:22:31Z,2020-12-25T01:22:31Z,CLOSED,False,384,0,1,https://github.com/TurdPooCharger,Add new function: import all seeds.,2,[],https://github.com/d0k3/GodMode9/pull/634,https://github.com/TurdPooCharger,9,https://github.com/d0k3/GodMode9/pull/634#issuecomment-751141214,Set it and forget it.,"@d0k3, no worries. I needed the reminder. Sorry about completely dropping the ball bug testing GM9/GameInstaller. I'll close this PR and report findings for seed stuff at the other issue.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,645,2020-11-13T01:38:15Z,2020-12-09T20:58:02Z,2020-12-09T20:58:02Z,CLOSED,False,53,7,3,https://github.com/GerbilSoft,Fix dumping of TWL ROM images flashed to NTR dev carts,3,[],https://github.com/d0k3/GodMode9/pull/645,https://github.com/GerbilSoft,1,https://github.com/d0k3/GodMode9/pull/645,"We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.","We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,645,2020-11-13T01:38:15Z,2020-12-09T20:58:02Z,2020-12-09T20:58:02Z,CLOSED,False,53,7,3,https://github.com/GerbilSoft,Fix dumping of TWL ROM images flashed to NTR dev carts,3,[],https://github.com/d0k3/GodMode9/pull/645,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/645#issuecomment-728202798,"We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.","Okay, this already looks pretty good! It may also fix #457. Will this have any adverse effects on carts that previously worked?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,645,2020-11-13T01:38:15Z,2020-12-09T20:58:02Z,2020-12-09T20:58:02Z,CLOSED,False,53,7,3,https://github.com/GerbilSoft,Fix dumping of TWL ROM images flashed to NTR dev carts,3,[],https://github.com/d0k3/GodMode9/pull/645,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/645#issuecomment-728224899,"We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.","Test build here:
https://f.secretalgorithm.com/SPO0o/godmode9-v1.9.2pre1-21-titleman-devcartdump.zip",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,645,2020-11-13T01:38:15Z,2020-12-09T20:58:02Z,2020-12-09T20:58:02Z,CLOSED,False,53,7,3,https://github.com/GerbilSoft,Fix dumping of TWL ROM images flashed to NTR dev carts,3,[],https://github.com/d0k3/GodMode9/pull/645,https://github.com/GerbilSoft,4,https://github.com/d0k3/GodMode9/pull/645#issuecomment-728238318,"We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.","This shouldn't affect other carts that worked before:

NTR carts usually don't have the TWL flag set in the chip ID. Kirby Mass Attack does, but it doesn't have the TWL flag set in the header, so it'll still be handled as NTR.
TWL carts do have the TWL flag set in both the chip ID and the header.

I don't think it'll fix dumping TWL dev carts. That requires using the TWL secure init command, but with a different Blowfish key. I did extract the Blowfish key, but I'm not sure if it can be included in GM9 directly, or if there's any way to properly distinguish between retail and dev carts.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,645,2020-11-13T01:38:15Z,2020-12-09T20:58:02Z,2020-12-09T20:58:02Z,CLOSED,False,53,7,3,https://github.com/GerbilSoft,Fix dumping of TWL ROM images flashed to NTR dev carts,3,[],https://github.com/d0k3/GodMode9/pull/645,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/645#issuecomment-742045038,"We've encountered a few NTR dev cartridges that have TWL-enhanced ROM images flashed to them. These cartridges work fine on a Nintendo DS, and on some 3DS units. Attempting to dump them with GodMode9 (and wooddumper) fails because the ROM header indicates that the cartridge is TWL-enhanced, but the NTR dev cart doesn't support the TWL secure area init command (0x3D), so TWL key exchange fails.
This PR checks the TWL flag in the chip ID. If it's not present, then it won't attempt to use TWL secure area init, even if the TWL flag is set in the ROM header.
We're also using the ROM size value in the chip ID now for the full cartridge size if it's present. If not, it falls back to using the ROM header value.","Partially merged. The gamecart ID will be added to the filename, thus the additional file is not required. Everything else is included.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,652,2020-11-16T17:48:45Z,2020-12-24T14:55:38Z,2020-12-24T14:56:05Z,MERGED,True,158,31,10,https://github.com/d0k3,Add title manager (replaces title search),5,[],https://github.com/d0k3/GodMode9/pull/652,https://github.com/d0k3,1,https://github.com/d0k3/GodMode9/pull/652,"For anyone who wants to try this: This adds a new title manager, replacing the old title search. It includes a better listing of all your installed titles, batch uninstallation and more.
Ideas and bug reports are welcome!","For anyone who wants to try this: This adds a new title manager, replacing the old title search. It includes a better listing of all your installed titles, batch uninstallation and more.
Ideas and bug reports are welcome!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,652,2020-11-16T17:48:45Z,2020-12-24T14:55:38Z,2020-12-24T14:56:05Z,MERGED,True,158,31,10,https://github.com/d0k3,Add title manager (replaces title search),5,[],https://github.com/d0k3/GodMode9/pull/652,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/652#issuecomment-728225070,"For anyone who wants to try this: This adds a new title manager, replacing the old title search. It includes a better listing of all your installed titles, batch uninstallation and more.
Ideas and bug reports are welcome!","Test build here:
https://f.secretalgorithm.com/SPO0o/godmode9-v1.9.2pre1-21-titleman-devcartdump.zip",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,652,2020-11-16T17:48:45Z,2020-12-24T14:55:38Z,2020-12-24T14:56:05Z,MERGED,True,158,31,10,https://github.com/d0k3,Add title manager (replaces title search),5,[],https://github.com/d0k3/GodMode9/pull/652,https://github.com/aspargas2,3,https://github.com/d0k3/GodMode9/pull/652#issuecomment-728646359,"For anyone who wants to try this: This adds a new title manager, replacing the old title search. It includes a better listing of all your installed titles, batch uninstallation and more.
Ideas and bug reports are welcome!","Just want to point out that GitHub also now builds every commit as soon as it's pushed and leaves an artifact, which hopefully will make everyone's lives here easier if/when more commits are added.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,662,2020-12-17T16:44:39Z,2020-12-23T13:57:00Z,2020-12-23T13:57:00Z,CLOSED,False,1,1,1,https://github.com/Wolfvak,Fix uninitialized variable on unaligned SPI Xfer,1,[],https://github.com/d0k3/GodMode9/pull/662,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/662,"We use a stack-allocated u32 to store a temporary word that gets memcpy'd from a potentially unaligned buffer, but the size of the copy could be less than 4 bytes, therefore leaving garbage in the upper bits of said word. This fixes CODEC in Corgi3DS.","We use a stack-allocated u32 to store a temporary word that gets memcpy'd from a potentially unaligned buffer, but the size of the copy could be less than 4 bytes, therefore leaving garbage in the upper bits of said word. This fixes CODEC in Corgi3DS.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,662,2020-12-17T16:44:39Z,2020-12-23T13:57:00Z,2020-12-23T13:57:00Z,CLOSED,False,1,1,1,https://github.com/Wolfvak,Fix uninitialized variable on unaligned SPI Xfer,1,[],https://github.com/d0k3/GodMode9/pull/662,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/662#issuecomment-750311269,"We use a stack-allocated u32 to store a temporary word that gets memcpy'd from a potentially unaligned buffer, but the size of the copy could be less than 4 bytes, therefore leaving garbage in the upper bits of said word. This fixes CODEC in Corgi3DS.",Merged,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/670,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/670#issuecomment-770466716,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","Glad to see progress on this one! I had a look through the code, looks good to me. I guess I'll still wait with merging until @wwylele comments, as there may be more changes needed.
About the card2 save size - my cart reading code assumes the card2 save actually stretches until the end of the cart storage. For cart reading, that's a save assumption, as there can't be anything else but save data or padding there, and we don't want save data in cart dumps. That may not be the case for save writing, as I'm not sure about the size of the writable area. I don't know about any info inside the cart header that would specify the actual size of the header, but I may also have missed it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,3,https://github.com/d0k3/GodMode9/pull/670#issuecomment-770498083,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","I don't know about any info inside the cart header that would specify the actual size of the header, but I may also have missed it.
I will assume you mean ""actual size of the save"" here.

I have some code that parses the header for the save size on my other branch here: https://github.com/dratini0/GodMode9/blob/ctr-generic-flash/arm9/source/gamecart/gamecart.c#L96

It boils down to the following:
1. Read the first two sectors of the first partition on the cartridge (NCCH and first sector of ExHeader)
2. Decrypt the ExHeader using the NCCH
3. Look up offset 0x1C0 in the ExHeader

It does seem to arrive at the right result, but it just seems like a very roundabout way to do it for SPI flash based saves.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/profi200,4,https://github.com/d0k3/GodMode9/pull/670#issuecomment-772088457,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)",The only way to get the CARD2 save size (for 3DS cards) is via the exheader. The offset where the save is stored is in this header: https://www.3dbrew.org/wiki/NCSD#Card_Info_Header,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/670#issuecomment-782864441,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","@dratini0 - I assume this is ready to be merged (also in regards to the coming release, as mentioned in that other pr discussion)?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,6,https://github.com/d0k3/GodMode9/pull/670#issuecomment-783787158,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","I am quite happy with it. That said I haven't tested it with any of the 0x6226XX games, because I don't have any and I am quite concerned that they don't keep the save chip consistent between production runs of the same cartridge. The best I can say that it still works with the 0xC222XX cartridges I have.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,7,https://github.com/d0k3/GodMode9/pull/670#issuecomment-784618176,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","I got my hands on a bootleg copy of Pokemon Diamond, and it turns out that that has a previously unsupported type of flash chip. (ST M25PE40VP) So I added support for that too (not that bootlegs working/not working for any particular purpose isn't a bit of a crapshoot anyway). It does look pretty fast and versatile to me.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,8,https://github.com/d0k3/GodMode9/pull/670#issuecomment-804422233,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)",I have rebased this as per the discussion on #672,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,9,https://github.com/d0k3/GodMode9/pull/670#issuecomment-808984057,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","I pushed my changes to fix #690 here, as I don't feel like starting a zillion merge requests and rebasing them again.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/670#issuecomment-810480579,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","Alright, that means it's good to merge now?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/dratini0,11,https://github.com/d0k3/GodMode9/pull/670#issuecomment-810632883,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","Thank you. Yes, that should be fine",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,670,2021-01-31T21:03:52Z,2021-03-31T15:04:47Z,2021-03-31T15:04:47Z,CLOSED,False,55,61,3,https://github.com/dratini0,"Save management: Detect save size by the last byte of JEDEC id, if possible",5,[],https://github.com/d0k3/GodMode9/pull/670,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/670#issuecomment-811139349,"This makes progress on #553, but not complete closure. Not by a long way...
The long and short of this is that this commit now only compares the first two bytes of the JEDEC ID of the flash chip when looking it up. When looking up the size, if the lookup table has a size, it uses that, otherwise it checks the last byte of the JEDEC ID. Additionally, the auto-detection for type is now skipped for card1 3DS cards, and all the flash chips are handled the same way.
I have also tried another approach on the branch ctr-generic-flash, in which I read from the ExHeader instead. I think I prefer this approach, as this doesn't involve going deep into the cartridge header. Then again, that might be needed for card2 games. (Unless I can just assume the save area just stretches to the end of the cartridge?...)
@wwylele , Thank you again for the pointer! Would you mind trying this one out, especially the writing, if you feel brave enough? Reading is practically guaranteed to work, and if the datasheets are to be believed, the writing will be just fine, too. (It now uses the same parameters it uses for the Macronix chips)","Merged with current master. Thanks a lot, @dratini0 !",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/672,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/672#issuecomment-773897070,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Changes look good to me. I'd personally would have handled the card2 save reading in a different way (by providing a new function and not modifying ReadCartSectors), but it's still a sane and plausible change.
Should I merge the first pull request while you're still working on this one?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,3,https://github.com/d0k3/GodMode9/pull/672#issuecomment-774301283,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Sure, if you don't want to wait much more for wwylele. There is going to be a merge conflict between these two merge requests either way.
On a side note, the good news is that I have discovered two new commands on the 3ds cartridge. The bad news is that I am fumbling around in the dark. Do you know what the different values of the latency parameter do on CTR_SendCommand? And how they interact with the value of pageSize? (the commands I seem to have stumbled upon return different data depending on what I set these values to)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/672#issuecomment-774564817,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","I'll just quote @profi200 from IRC here, something to consider:
| 19:29 profi200 https://github.com/dok3/GodMode9/pull/672 Not a good idea sending random cmds.
| 19:30 profi200 Remember Datel Power Saves? (I like to call it Power Bricks)
| 19:31 profi 200 It destroyed CARD2 games in rare cases for unknown reason.
| 19:32 profi200 The cmds to write are known now but it requires some changes to allow writing instead of reading.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,5,https://github.com/d0k3/GodMode9/pull/672#issuecomment-774773235,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Oh, fun... Thank you for your concern. Honestly, I was willing to risk my copy of Pokemon X to find out something that hasn't been done before.
One thing I somewhat expected is that the boundaries of the writable area wouldn't line up with the boundaries of the actual save - I can see that causing bricks. If so, those would be recoverable. But then again, I don't know if that is anywhere near true. (Maybe there is a chip erase command that erases the non-writable region too. That would be terrible)
On the other hand, does this mean that I shouldn't attempt to implement CARD2 save writing for the risk of bricking user's cartridges?
@profi200 - Oooh, care to share that source? I would love to mess with it, even if it will never be merged. The best information I found on the cartridge commands is 3dbrew, which is remarkably scant on information about command set. (GBATEK has roughly the same data, curiously)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/profi200,6,https://github.com/d0k3/GodMode9/pull/672#issuecomment-774779648,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game",Pretty much all you need to know (except timeout params) is in this commit. Again be careful. We don't know what caused these bricks. It may be timing or bad communication between the Power Saves device and card.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,7,https://github.com/d0k3/GodMode9/pull/672#issuecomment-775139610,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Thank you! Another piece of really cool software I knew nothing about! And yes, that should be enough for me to figure it out. I can hopefully guess the timeout parameters, and if not, I can always try running NATIVE_FIRM in Corgi3DS, now that I know it exists.

As for bricking, now I kinda want to replicate the brick, to see what might have caused it, and if it's recoverable (and if my theories hold any water). Though on a second thought, I think I should find something cheaper to deliberately attempt to brick than a Pokemon game...

As for Corgi3DS, I am wondering if it would make a good test harness for gm9? Though it would require the usual dumps to run, so running it in CI might be difficult. I will have to play around with that later.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/profi200,8,https://github.com/d0k3/GodMode9/pull/672#issuecomment-775170480,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game",Corgi3DS works mostly but it's in a pretty buggy state. And slow it is. Even with an i7 you are not getting 1 fps. FIRMs not using the GPU or heavy graphics are usable.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,9,https://github.com/d0k3/GodMode9/pull/672#issuecomment-776337841,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Okay, slight update. I have ordered a cheap Card2 game (Animal Crossing: Happy Home Designer) and I will resume card2 experiments once that arrives, using the information from Corgi3DS. This should be later this week or early next week. In the meantime I will implement save size reading.
@profi200 Oh, boy, what a sight is Corgi3DS. I have managed to get to home menu, and even into checkpoint, but it froze after its splash screen (IDK if this had to do with me booting without Luma). On the other hand, every bit of homebew .firm I threw at it fell over one way or another. Most notably, Luma got stuck, I am think waiting for an I2C device to do something.
Honestly, just the fact that I could boot to the home menu using just a bunch of memory dumps is impressive in itself. On the other hand, I find the lack of a GDB stub quite odd. It really makes me wonder what the author's intent was. Either way, I am glad it exists.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/profi200,10,https://github.com/d0k3/GodMode9/pull/672#issuecomment-776637402,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game",Corgi is pretty buggy as said but this is to be expected for an emulator still in development. gdb surely is on PSI's list but but not the highest priority.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/672#issuecomment-782864205,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","@dratini0 - just some quick info: I intend to make a new release very soon. There will be a prerelease in the coming days, intended for testing, and a new main release a while after that.
You don't necessarily need to finish this pr until then, if not it will go into the next release. If you want it, in the next release, though, there's still some time to finish it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/dratini0,12,https://github.com/d0k3/GodMode9/pull/672#issuecomment-783778100,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Sure thing. Card2 writing isn't done, but at least the sacrificial game is here now. I wouldn't count on that being done ""very soon"" and reading is fully functional already.
As a footnote, I am pretty sure it will merge conflict with the other one, because I was a bit silly - I recall you wanting me to rebase my branch in a similar situation. Should I do that in this case again?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,672,2021-02-04T19:28:57Z,2021-03-17T23:36:47Z,2021-03-17T23:36:47Z,CLOSED,False,192,109,5,https://github.com/dratini0,Save management: Card2 reading,4,[],https://github.com/d0k3/GodMode9/pull/672,https://github.com/d0k3,13,https://github.com/d0k3/GodMode9/pull/672#issuecomment-801510143,"This is some initial support for reading card2 saves. At the moment it reads to the end of the cartridge. It also does a few other things:

Somewhat refactors the SPI flash autodetection code
Removes jedecid-and-sreg.bin
Lays groundwork for support of other save types (i. e. WarioWare DIY ""Retail NAND"")
 Add the save type (and if SPI, the JEDEC ID) to the card info file
 Implement reading the save size from the ExHeader

I still want to do the following in the near future:

Implement card2 writing based on Corgi3DS
Figure out the exact boundaries of the writable area on a card2 game
Attempt to brick a card2 game","Merged with current master, thank you! As for that otehr pull request: Yes, pull request based on current master are always preferred, if possible.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,674,2021-02-15T07:43:37Z,2021-03-14T13:59:05Z,2021-03-14T17:37:54Z,MERGED,True,6,7,1,https://github.com/Margen67,ci.yml: changes,1,[],https://github.com/d0k3/GodMode9/pull/674,https://github.com/Margen67,1,https://github.com/d0k3/GodMode9/pull/674,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,674,2021-02-15T07:43:37Z,2021-03-14T13:59:05Z,2021-03-14T17:37:54Z,MERGED,True,6,7,1,https://github.com/Margen67,ci.yml: changes,1,[],https://github.com/d0k3/GodMode9/pull/674,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/674#issuecomment-779548390,,"One problem with this: because the devkitarm docker image comes with an older version of git (or at least I think that's why), checkout v2 can't properly clone the repo and instead does it with github's rest API, which leaves out the entire .git folder. This in turn prevents gm9's Makefile from having any information on what commit is being built, so the resulting build artifact will be missing everything derived from that (this can be seen in the artifact produced by the CI build run on this pull request).
Other than that, these changes are fine. I would recommend simply leaving it using checkout v1, as I do no know of any downside to doing so.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,674,2021-02-15T07:43:37Z,2021-03-14T13:59:05Z,2021-03-14T17:37:54Z,MERGED,True,6,7,1,https://github.com/Margen67,ci.yml: changes,1,[],https://github.com/d0k3/GodMode9/pull/674,https://github.com/Margen67,3,https://github.com/d0k3/GodMode9/pull/674#issuecomment-787802122,,"One problem with this: because the devkitarm docker image comes with an older version of git (or at least I think that's why), checkout v2 can't properly clone the repo and instead does it with github's rest API, which leaves out the entire .git folder. This in turn prevents gm9's Makefile from having any information on what commit is being built, so the resulting build artifact will be missing everything derived from that (this can be seen in the artifact produced by the CI build run on this pull request).
Other than that, these changes are fine. I would recommend simply leaving it using checkout v1, as I do no know of any downside to doing so.

@aspargas2 Checkout v2 does a shallow clone by default:
# Number of commits to fetch. 0 indicates all history for all branches and tags.
# Default: 1
fetch-depth: ''",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,674,2021-02-15T07:43:37Z,2021-03-14T13:59:05Z,2021-03-14T17:37:54Z,MERGED,True,6,7,1,https://github.com/Margen67,ci.yml: changes,1,[],https://github.com/d0k3/GodMode9/pull/674,https://github.com/Margen67,4,https://github.com/d0k3/GodMode9/pull/674#issuecomment-797505869,,"One small change needed, then we can merge this.

@d0k3 Fixed.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,678,2021-02-24T10:21:16Z,2021-03-08T17:31:41Z,2021-03-08T17:31:45Z,MERGED,True,4,1,1,https://github.com/gholms,Include scripts in ntr firms,1,[],https://github.com/d0k3/GodMode9/pull/678,https://github.com/gholms,1,https://github.com/d0k3/GodMode9/pull/678,"Unless the SD card happens to both be accessible and contain a
gm9/scripts directory, a system booted with a NTR cartridge isn't going
to have access to the stock scripts and will just show an error upon
going to the menu and selecting Scripts....  This patch adds scripts
to the vram tarball only for ntr builds so they can be available even
on completely untouched systems.  It shouldn't be necessary when we've
booted from something else because in those cases we've already written
GodMode9.firm to flash using some other means and could have copied all
the scripts then.
One might argue this is sub-optimal because the menu will point there
even if a scripts directory happens to exist on the SD card.  One might
instead argue that that behavior is preferable because there's no telling
what gm9 version the scripts on the SD card were intended for.","Unless the SD card happens to both be accessible and contain a
gm9/scripts directory, a system booted with a NTR cartridge isn't going
to have access to the stock scripts and will just show an error upon
going to the menu and selecting Scripts....  This patch adds scripts
to the vram tarball only for ntr builds so they can be available even
on completely untouched systems.  It shouldn't be necessary when we've
booted from something else because in those cases we've already written
GodMode9.firm to flash using some other means and could have copied all
the scripts then.
One might argue this is sub-optimal because the menu will point there
even if a scripts directory happens to exist on the SD card.  One might
instead argue that that behavior is preferable because there's no telling
what gm9 version the scripts on the SD card were intended for.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,678,2021-02-24T10:21:16Z,2021-03-08T17:31:41Z,2021-03-08T17:31:45Z,MERGED,True,4,1,1,https://github.com/gholms,Include scripts in ntr firms,1,[],https://github.com/d0k3/GodMode9/pull/678,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/678#issuecomment-792930402,"Unless the SD card happens to both be accessible and contain a
gm9/scripts directory, a system booted with a NTR cartridge isn't going
to have access to the stock scripts and will just show an error upon
going to the menu and selecting Scripts....  This patch adds scripts
to the vram tarball only for ntr builds so they can be available even
on completely untouched systems.  It shouldn't be necessary when we've
booted from something else because in those cases we've already written
GodMode9.firm to flash using some other means and could have copied all
the scripts then.
One might argue this is sub-optimal because the menu will point there
even if a scripts directory happens to exist on the SD card.  One might
instead argue that that behavior is preferable because there's no telling
what gm9 version the scripts on the SD card were intended for.","Taken over, thankyou!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,682,2021-03-09T03:11:08Z,2021-03-09T17:04:27Z,2021-03-29T02:09:34Z,MERGED,True,1,0,1,https://github.com/MechanicalDragon0687,fix clear friendlist script missing end statement,1,[],https://github.com/d0k3/GodMode9/pull/682,https://github.com/MechanicalDragon0687,1,https://github.com/d0k3/GodMode9/pull/682,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,682,2021-03-09T03:11:08Z,2021-03-09T17:04:27Z,2021-03-29T02:09:34Z,MERGED,True,1,0,1,https://github.com/MechanicalDragon0687,fix clear friendlist script missing end statement,1,[],https://github.com/d0k3/GodMode9/pull/682,https://github.com/MechanicalDragon0687,2,https://github.com/d0k3/GodMode9/pull/682#issuecomment-793312148,,fixes #681,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,682,2021-03-09T03:11:08Z,2021-03-09T17:04:27Z,2021-03-29T02:09:34Z,MERGED,True,1,0,1,https://github.com/MechanicalDragon0687,fix clear friendlist script missing end statement,1,[],https://github.com/d0k3/GodMode9/pull/682,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/682#issuecomment-794169599,,Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,684,2021-03-10T23:15:05Z,2021-03-11T07:39:29Z,2021-03-13T00:05:39Z,MERGED,True,1,1,1,https://github.com/Moire9,Update Discord Link,1,[],https://github.com/d0k3/GodMode9/pull/684,https://github.com/Moire9,1,https://github.com/d0k3/GodMode9/pull/684,,,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,684,2021-03-10T23:15:05Z,2021-03-11T07:39:29Z,2021-03-13T00:05:39Z,MERGED,True,1,1,1,https://github.com/Moire9,Update Discord Link,1,[],https://github.com/d0k3/GodMode9/pull/684,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/684#issuecomment-796533772,,Thanks!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,684,2021-03-10T23:15:05Z,2021-03-11T07:39:29Z,2021-03-13T00:05:39Z,MERGED,True,1,1,1,https://github.com/Moire9,Update Discord Link,1,[],https://github.com/d0k3/GodMode9/pull/684,https://github.com/Moire9,3,https://github.com/d0k3/GodMode9/pull/684#issuecomment-797822316,,Gladly!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,692,2021-03-26T22:27:43Z,2021-03-31T15:07:01Z,2021-04-03T20:55:53Z,MERGED,True,1,1,1,https://github.com/clach04,issue #691 - helper text for SysNAND backup size,1,[],https://github.com/d0k3/GodMode9/pull/692,https://github.com/clach04,1,https://github.com/d0k3/GodMode9/pull/692,"https://3ds.hacks.guide/finalizing-setup Section VIII, 3 - recommends 1.3 Gb free
On a Japanese firmware 11.10.0-43J - needed 950Mb free.","https://3ds.hacks.guide/finalizing-setup Section VIII, 3 - recommends 1.3 Gb free
On a Japanese firmware 11.10.0-43J - needed 950Mb free.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/luigoalma,1,https://github.com/d0k3/GodMode9/pull/704,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/704#issuecomment-829465000,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","Also, sorry about the radio silence. Real life and stuff :^).",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/luigoalma,3,https://github.com/d0k3/GodMode9/pull/704#issuecomment-829468143,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.",No problems on the silent! Alright lets see about some of these change requests,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/luigoalma,4,https://github.com/d0k3/GodMode9/pull/704#issuecomment-833211178,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","There's still something I'd like to implement before merge.
Saying in case change requests and reviews pass before I do.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/luigoalma,5,https://github.com/d0k3/GodMode9/pull/704#issuecomment-833740046,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","I believe I done all the edits I can think of, now its just waiting review, and extra code change requests if any. Also testing by anyone interested in testing it too, even if tests seem to pass correctly on my side, extra testing is welcome.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/704#issuecomment-835773704,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","Alright, after another review, this looks good to me. Would you be okay with squashing this to fewer commits before the merge? Sorry about being a bit slow these days, too.
So, @luigoalma, is this ready to be merged?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/luigoalma,7,https://github.com/d0k3/GodMode9/pull/704#issuecomment-835802315,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.","It's now squashed to 7 commits, it's about as much as I can safely rewrite history and squash them, unless you'd like them to be squashed to 1 commit. And yes, at least by me, it's ready to merge.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,704,2021-04-22T13:48:34Z,2021-05-22T12:46:03Z,2021-05-22T12:46:03Z,CLOSED,False,898,96,6,https://github.com/luigoalma,Loading from certs.db more accordingly + extra Certificate functions,7,[],https://github.com/d0k3/GodMode9/pull/704,https://github.com/d0k3,8,https://github.com/d0k3/GodMode9/pull/704#issuecomment-846403331,"Instead of guessing offsets, we can load more accordingly by reading the DIFF image and parsing the partitionA data.
This ensures we can find cert, given its imported on the db and the partitionA data is sane.
Even in the cases of imported custom cert names, or dev and retail imported certs mixed in, like in a dev console installing homebrew with the retail certs on cia installs.
Before merge, this could be possibly optimized to not look every time for certs and only once, at least for the default dev and retail certs, but right now, its put up for testing and ensuring it works generally.
A bit of testing appears to show it being functional, however further testing by anyone would be always welcomed.",Merged with current master. Thanks for your contribution!,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,708,2021-05-31T22:14:07Z,2021-06-01T18:07:02Z,2021-06-01T18:07:08Z,MERGED,True,5,3,1,https://github.com/Wolfvak,"add a ""contact info"" section in readme",1,[],https://github.com/d0k3/GodMode9/pull/708,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/708,"contains both irc and discord links, and removes the discord link at the bottom","contains both irc and discord links, and removes the discord link at the bottom",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,708,2021-05-31T22:14:07Z,2021-06-01T18:07:02Z,2021-06-01T18:07:08Z,MERGED,True,5,3,1,https://github.com/Wolfvak,"add a ""contact info"" section in readme",1,[],https://github.com/d0k3/GodMode9/pull/708,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/708#issuecomment-852337674,"contains both irc and discord links, and removes the discord link at the bottom","Merged! You could have commited this directly, I agree with all changes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,709,2021-06-02T12:03:25Z,2021-06-02T12:03:37Z,2021-06-02T12:03:42Z,MERGED,True,2,2,1,https://github.com/Wolfvak,"fix the ""conact"" typo",1,[],https://github.com/d0k3/GodMode9/pull/709,https://github.com/Wolfvak,1,https://github.com/d0k3/GodMode9/pull/709,also adds a direct link to the irc channel,also adds a direct link to the irc channel,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/RayyanAnsari,1,https://github.com/d0k3/GodMode9/pull/710,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/710#issuecomment-855217150,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:",Wouldn't it be better to set that pixel to black? (same as the GodMode9 background color),True,{'THUMBS_UP': ['https://github.com/NightScript370']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/RayyanAnsari,3,https://github.com/d0k3/GodMode9/pull/710#issuecomment-855224181,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","Wouldn't it be better to set that pixel to black? (same as the GodMode9 background color)

@d0k3 we could, but in my opinion it would be better to show icons how they are displayed on the 3DS (and DSi) home screen. On the DS, it is transparent, but behind it is a white/grey gradient.
I don't know any icons like this, but some icons may not look good on a black background with (fake) transparency because the icons were designed to be in front of a white-ish background.",True,{'THUMBS_UP': ['https://github.com/Serpensin']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/aspargas2,4,https://github.com/d0k3/GodMode9/pull/710#issuecomment-855267445,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","For what it's worth, I'm inclined to agree with setting them to white for consistency with the home menu.",True,{'THUMBS_UP': ['https://github.com/Wolfvak']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/Wolfvak,5,https://github.com/d0k3/GodMode9/pull/710#issuecomment-859176296,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","@WaluigiWare64 in the interest of consistency, can you preserve the palette[0] value and restore it before returning? Thanks!",True,{'THUMBS_UP': ['https://github.com/RayyanAnsari']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/d0k3,6,https://github.com/d0k3/GodMode9/pull/710#issuecomment-863547795,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","Alright ,sorry, I know this took long. I'm requesting one small change...",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,710,2021-06-04T12:22:01Z,2021-06-29T16:01:02Z,2021-06-29T17:03:08Z,MERGED,True,13,5,1,https://github.com/RayyanAnsari,Set transparent pixels in DS icon to white,1,[],https://github.com/d0k3/GodMode9/pull/710,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/710#issuecomment-870724638,"This PR sets the first entry in the DS icon palette to white (like in the 3DS Home Screen).
Example with my Dr. Kawashima's Brain Training: How Old Is Your Brain? cart.
Before:

After:

Here is an image of how it looks on the 3DS Home Screen:","Merged to master. Thanks for your contribution! (and sorry this, again, took so long)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,717,2021-07-05T08:41:26Z,2021-07-06T15:14:44Z,2021-07-06T15:14:52Z,MERGED,True,8,1,1,https://github.com/ZeroSkill1,Fix NDS / DSi names being cut off when renaming to good name,1,[],https://github.com/d0k3/GodMode9/pull/717,https://github.com/ZeroSkill1,1,https://github.com/d0k3/GodMode9/pull/717,"To better understand what this fixes, let's take a look at what happens when renaming this NDS file to good name:


The result is a cut-off name, because currently, the name is copied only until the first newline.
NDS/DSi Names consist of Title + Publisher in one string. However, to avoid overlapping, parts of the Title and the Publisher are separated by newlines, as seen here:

and this is what the Title looks like, if we were to interpret it as a string:
""Professor Kageyama's\nMaths Training\nNINTENDO""
Therefore, every character until the last newline is still part of the Title, because what comes after the last newline is the Publisher.
I have implemented it like this:

Instead of checking for the first occurrence of a newline, I'm checking for the last ocurrence of a newline, to know where the Title stops and the Publisher starts.
Looping through the Title and replacing every remaining newline with a space to merge all possible parts together, forming the correct Title.

And as a result:


It now correctly renames the Title, it is no longer cut off.","To better understand what this fixes, let's take a look at what happens when renaming this NDS file to good name:


The result is a cut-off name, because currently, the name is copied only until the first newline.
NDS/DSi Names consist of Title + Publisher in one string. However, to avoid overlapping, parts of the Title and the Publisher are separated by newlines, as seen here:

and this is what the Title looks like, if we were to interpret it as a string:
""Professor Kageyama's\nMaths Training\nNINTENDO""
Therefore, every character until the last newline is still part of the Title, because what comes after the last newline is the Publisher.
I have implemented it like this:

Instead of checking for the first occurrence of a newline, I'm checking for the last ocurrence of a newline, to know where the Title stops and the Publisher starts.
Looping through the Title and replacing every remaining newline with a space to merge all possible parts together, forming the correct Title.

And as a result:


It now correctly renames the Title, it is no longer cut off.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,717,2021-07-05T08:41:26Z,2021-07-06T15:14:44Z,2021-07-06T15:14:52Z,MERGED,True,8,1,1,https://github.com/ZeroSkill1,Fix NDS / DSi names being cut off when renaming to good name,1,[],https://github.com/d0k3/GodMode9/pull/717,https://github.com/ZeroSkill1,2,https://github.com/d0k3/GodMode9/pull/717#issuecomment-873936618,"To better understand what this fixes, let's take a look at what happens when renaming this NDS file to good name:


The result is a cut-off name, because currently, the name is copied only until the first newline.
NDS/DSi Names consist of Title + Publisher in one string. However, to avoid overlapping, parts of the Title and the Publisher are separated by newlines, as seen here:

and this is what the Title looks like, if we were to interpret it as a string:
""Professor Kageyama's\nMaths Training\nNINTENDO""
Therefore, every character until the last newline is still part of the Title, because what comes after the last newline is the Publisher.
I have implemented it like this:

Instead of checking for the first occurrence of a newline, I'm checking for the last ocurrence of a newline, to know where the Title stops and the Publisher starts.
Looping through the Title and replacing every remaining newline with a space to merge all possible parts together, forming the correct Title.

And as a result:


It now correctly renames the Title, it is no longer cut off.","After some more testing, it seems that it works fine with DSiWare CIAs, too.
before:
00030015534C524E TWiLight Menu++ (TWL-SLRN) (DSi Exclusive) (W) (v0.0.0).standard.cia
after:
00030015534C524E TWiLight Menu++ Last-run ROM (TWL-SLRN) (DSi Exclusive) (W) (v0.0.0).standard.cia",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,717,2021-07-05T08:41:26Z,2021-07-06T15:14:44Z,2021-07-06T15:14:52Z,MERGED,True,8,1,1,https://github.com/ZeroSkill1,Fix NDS / DSi names being cut off when renaming to good name,1,[],https://github.com/d0k3/GodMode9/pull/717,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/717#issuecomment-874849271,"To better understand what this fixes, let's take a look at what happens when renaming this NDS file to good name:


The result is a cut-off name, because currently, the name is copied only until the first newline.
NDS/DSi Names consist of Title + Publisher in one string. However, to avoid overlapping, parts of the Title and the Publisher are separated by newlines, as seen here:

and this is what the Title looks like, if we were to interpret it as a string:
""Professor Kageyama's\nMaths Training\nNINTENDO""
Therefore, every character until the last newline is still part of the Title, because what comes after the last newline is the Publisher.
I have implemented it like this:

Instead of checking for the first occurrence of a newline, I'm checking for the last ocurrence of a newline, to know where the Title stops and the Publisher starts.
Looping through the Title and replacing every remaining newline with a space to merge all possible parts together, forming the correct Title.

And as a result:


It now correctly renames the Title, it is no longer cut off.","Thanks, good addition!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,1,https://github.com/d0k3/GodMode9/pull/722,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.",True,{'THUMBS_UP': ['https://github.com/mitchellmebane']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,2,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881320560,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.",Force push was to change the author email. Nothing else changed.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,3,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881341703,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","There have been some points brought up mid-testing with some members in the community as to whether it is actually worthwhile to keep the appended 0x88 in TWL carts. There isn't a known TWL cart (as in DSi Enhanced or DSi Exclusive) that utilizes cloneboot at all, so it may just be unneeded extra data (and may not actually contain valid data) which goes against the purpose of trim dumps.
In GodMode9i, where this was first implemented (mentioned in the related issue), I don't think there is a particular check for NTR or TWL dumps. In my opinion if it'll be done on one cart it should be done for all, but I think it's better for someone else to decide this.
I've left this ability intact to dump the 0x88 in TWL dumps. If this is to be removed, let me know, or feel free to directly commit before merge.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/SNBeast,4,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881437185,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","There is a check for NTR vs. TWL dumps in GodMode9i, and it's in the code snippet in the linked issue above: ndsCardHeader.unitCode != 0. The unit code is 0 for NTR, 2 for TWL with NTR support, and 3 for TWL only.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,5,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881461214,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","I see, so the trim+0x88 only applies when the unit code is 0, then? I may have misunderstood the code the first time I saw.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/SNBeast,6,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881467583,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Yes. + has a higher operator precedence than ? and :, so the choices read ""ndsCardHeader.twlRomSize if true, ndsCardHeader.romSize + 0x88 if false.""",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,7,https://github.com/d0k3/GodMode9/pull/722#issuecomment-881481570,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.",Yeah not sure how I messed that up. It's gone now.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,8,https://github.com/d0k3/GodMode9/pull/722#issuecomment-885722539,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","At the moment, this commit freezes GodMode9, though it is implemented as described in the issue. I'll try again.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/d0k3,9,https://github.com/d0k3/GodMode9/pull/722#issuecomment-885762645,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.",Should not freeze GM9. Make sure you've got the latest master as base. Also take note that appending + 0x88 to that exact location is what I did earlier. According to @SNBeast this is not correct.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,10,https://github.com/d0k3/GodMode9/pull/722#issuecomment-885767908,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Should not freeze GM9. Make sure you've got the latest master as base. Also take note that appending + 0x88 to that exact location is what I did earlier. According to @SNBeast this is not correct.

Apparently, it doesn't work when reading from C: GAMECART. It does however, preserve the key on an existing ROM on the SD.
So the trim size operation is not working straight off the cart.
The crash issue I've found was just a weird build quirk. After a make clean it didn't crash.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/d0k3,11,https://github.com/d0k3/GodMode9/pull/722#issuecomment-886103718,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Alright, I forgot about that one actually, that's a different place in the code. Maybe your initial fix wasn't so bad. You need to make sure, tough, that the data size never exceeds the cart size.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/d0k3,12,https://github.com/d0k3/GodMode9/pull/722#issuecomment-892772496,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Don't want to bother, but do you by any chance have a new build that can be tested? Sorry about the earlier confusion, your initial fix was actually the correct way, it just needs an additional sanity check build in. If you need more info, just ask.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,13,https://github.com/d0k3/GodMode9/pull/722#issuecomment-892792121,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","I haven't had time to do more commits. It's been on my mind for quite a while though, I might revert the changes again.
I have absolutely no idea where I'd place the checks, though.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/d0k3,14,https://github.com/d0k3/GodMode9/pull/722#issuecomment-892812620,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","It belongs right below where you made the data_size change. data_size + 32 may, in some rare cases, exceed cart_size, causing a lot of trouble. You just make sure data_size is never more than cart_size.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,15,https://github.com/d0k3/GodMode9/pull/722#issuecomment-892875092,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Isn't that check already done in 
  
    
      GodMode9/arm9/source/gamecart/gamecart.c
    
    
         Line 274
      in
      4dc96d3
    
  
  
    

        
          
           if (cdata->data_size > cdata->cart_size) return 1; 
        
    
  

 ? Or do you want more safety checks?
I ask because that line is exactly the safety check I was going to write, and then I saw that.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/lifehackerhansol,16,https://github.com/d0k3/GodMode9/pull/722#issuecomment-893765690,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Kind of off-topic, but I noticed local builds seem to produce smaller binaries... but I assume the end result would be the same, so.
The check is removed, and yeah, I did a poor job of it first time. Here goes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,722,2021-07-16T09:42:37Z,2021-08-19T19:32:43Z,2021-08-20T02:05:11Z,CLOSED,False,1,1,1,https://github.com/lifehackerhansol,Preserve RSA keys in trimmed NTR dumps,3,[],https://github.com/d0k3/GodMode9/pull/722,https://github.com/d0k3,17,https://github.com/d0k3/GodMode9/pull/722#issuecomment-902184539,"Fixes #721, implemented exactly as described in the issue.
This was tested on a Mario Kart DS (Korea) cartridge, while being played on nds-bootstrap and an original R4, where cloneboot requires the RSA key. It is useful for real hardware NDS playback as a whole.
I unfortunately do not have a TWL cart to test the fix there. If anyone else is willing to test, or have any suggestions about what to add to this PR, feel free to let me know or directly commit.","Merged, thank you!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,1,https://github.com/d0k3/GodMode9/pull/723,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/723#issuecomment-890979389,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687",could you add a macro definition for something like UTF_MAX_BYTES_PER_RUNE and UTF_BUFFER_BYTESIZE(rune_count) or something? the * 4 in most buffers comes across a bit weird if you don't know about UTF and I wouldn't be surprised if someone eventually ignores it,True,{'THUMBS_UP': ['https://github.com/Epicpkmn11']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,3,https://github.com/d0k3/GodMode9/pull/723#issuecomment-892770512,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Alright, I had a look. Sorry this took a few days. What I see looks already very good, and the code seems clean, too.
My thoughts:

These old hex escapes (\x1B) need to keep working, even in scripts, otherwise we'll have a lot of unhappy script users very soon. Luckily, there are not many escapes that people actually use, I myself only ever used the arrows (I think). Is there some way to catch these escapes and redirect them to the correct symbol? Not necessarily for all of them, but for the most commonly used ones.
Not too happy with the RIFF format, but I understand the old PBM format won't work with Unicode, and the RIFF format seems to work well. .frf may be a good extension, so these font files can be clearly recognized. Is there some way the script can just handle all these old PBMs without a provided codepage and length / width? You know, these PBMs are always 8x8 symbols, so you could determine the width / height. Maybe just try to do that when no length / width / codepage is given? It's just an idea, though.
I'm not completely sure, but did you actually manage to cram all these japanese symbols into 6x10? If so, it's pretty impressive. Maybe a variable width font would be a project for the future (just thinking aloud). If you want to, you can of course add more of those missing symbols. I don't know if stuff like cyrillic or hebrew is used in title names, though.
That's one I will need to doublecheck later, but did you actually catch all places were unicode symbols are used? Did you increase the size of all filename arrays? If some are missed, we're in for some nasty surprises at some point in the future.

That's it for now. Before I forget: Thanks a lot for your contribution, it's highly appreciated!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Wolfvak,4,https://github.com/d0k3/GodMode9/pull/723#issuecomment-892772623,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687",Point 1 could simply be fixed by extending the ascii lut to the 0x10-0x80 range and force-mapping a few special entries,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,5,https://github.com/d0k3/GodMode9/pull/723#issuecomment-892774692,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687",Yeah and about that - it's good the code uses Unicode now - please don't revert that. It's just important those escapes work in scripts.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,6,https://github.com/d0k3/GodMode9/pull/723#issuecomment-892982608,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","These old hex escapes (\x1B) need to keep working, even in scripts, otherwise we'll have a lot of unhappy script users very soon. Luckily, there are not many escapes that people actually use, I myself only ever used the arrows (I think). Is there some way to catch these escapes and redirect them to the correct symbol? Not necessarily for all of them, but for the most commonly used ones.

Is it alright to just do 0x00-0x1F? Just added doing that, doing 0x7F-0xFF though is more problematic as most of those are also valid Unicode codepoints.

Not too happy with the RIFF format, but I understand the old PBM format won't work with Unicode, and the RIFF format seems to work well. .frf may be a good extension, so these font files can be clearly recognized. Is there some way the script can just handle all these old PBMs without a provided codepage and length / width? You know, these PBMs are always 8x8 symbols, so you could determine the width / height. Maybe just try to do that when no length / width / codepage is given? It's just an idea, though.

Changed the script to default to CP-437 and try guess the width height. 👍
I also realized it's not that hard to just leave in PBM font support, really just needs to be sorted for the binary search and have its mapping table so I also just re-added PBM font support. You'll need to convert to RIFF if you want Unicode support but now all existing fonts will still work.
Edit: Actually now that I think about it making the script default like that and re-adding PBM support kinda contradict each other's point lol, might revert the script change

I'm not completely sure, but did you actually manage to cram all these japanese symbols into 6x10? If so, it's pretty impressive. Maybe a variable width font would be a project for the future (just thinking aloud). If you want to, you can of course add more of those missing symbols. I don't know if stuff like cyrillic or hebrew is used in title names, though.

I did all of Hiragana and Katakana, the two Japanese syllabaries, I didn't do any Kanji (Chinese characters) though. So Japanese text won't be perfectly readable, but should usually be enough that you can at least tell what game titles are and such. DS game titles are even entirely Kana as well so they'll all show fully correctly, I think 3DS game titles are allowed to have Kanji though.
And yeah, the 3DS was never translated to Russian, Greek, Hebrew, etc so unless you plan on making GM9 itself translatable the only benefit to having that in the font would be like file/folder names and such which is why I left it Japanese and a bit more extended Latin only. Maybe I'll make an alternate font for the resources folder that's more complete, I think this is probably fine for the default though.
It would be kinda nice to get Korean and Chinese characters in it as the 3DS is actually translated to those languages, but those'll both require at least a couple thousand characters each and 6x10 is just too small for me to want to even think about doing either lol. Maybe I'll do an 8x10 or so extra font for them, would want to find some other font to copy for them though as while I don't mind doing a hundred or two doing a few thousand is a lot ;P

That's one I will need to doublecheck later, but did you actually catch all places were unicode symbols are used? Did you increase the size of all filename arrays? If some are missed, we're in for some nasty surprises at some point in the future.

I belive so as I think the only place that changes is the outputs of ResizeString() and TruncateString() since everywhere else was already storing UTF-8 just not displaying it correctly. Those ones need to be bigger now though as I changed them so that it resizes/truncates to an amount of characters instead of an amount of bytes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,7,https://github.com/d0k3/GodMode9/pull/723#issuecomment-897886868,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Is it alright to just do 0x00-0x1F? Just added doing that, doing 0x7F-0xFF though is more problematic as most of those are also valid Unicode codepoints.


Yup, that's perfectly okay. No one uses anything beyound that.


I belive so as I think the only place that changes is the outputs of ResizeString() and TruncateString() since everywhere else was already storing UTF-8 just not displaying it correctly. Those ones need to be bigger now though as I changed them so that it resizes/truncates to an amount of characters instead of an amount of bytes.


If I got that right, having the proper macro everywhere isn't as critical as I thought. However, I wonder if we're wasting memory here. As you wrote, everything besides these two functions was already using UTF-8. Everything else doesn't need bigger buffers. Might not be that bad, unsure.
Anyways, sorry about this taking so long. This is a lot of code to check, so may still need a few days to fully approve it.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,8,https://github.com/d0k3/GodMode9/pull/723#issuecomment-897939348,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","If I got that right, having the proper macro everywhere isn't as critical as I thought. However, I wonder if we're wasting memory here. As you wrote, everything besides these two functions was already using UTF-8. Everything else doesn't need bigger buffers. Might not be that bad, unsure.

It's not a waste of memory since like if you're copying ゲーム.nds around you'll need a 14 byte buffer for the file name, not 8, but that's already taken care of by path limits I believe as those would be based on byte count not letter count. The only time you should really need to be concerned about UTF-8 is when you're doing something based on the amount of letters in something instead of the amount of bytes.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/redunka-zver,9,https://github.com/d0k3/GodMode9/pull/723#issuecomment-898893560,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","And yeah, the 3DS was never translated to Russian

It was, though?

Games with actual Russian titles are indeed rare (even if said games do have official Russian localization), but some certainly exist, plus there's a bunch of system apps with translated titles as well.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,10,https://github.com/d0k3/GodMode9/pull/723#issuecomment-898894269,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Oh, my bad, I didn't realize they did as I haven't seen people talk about the 3DS in Russian like at all and I know the DSi wasn't translated to Russian. I'll try do some Cyrillic for the font then too.",True,{'THUMBS_UP': ['https://github.com/redunka-zver']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,11,https://github.com/d0k3/GodMode9/pull/723#issuecomment-898903215,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","ЁЄІЇ
АБВГДЕЖЗИЙКЛМНОП
РСТУФХЦЧШЩЪЫЬЭЮЯ
абвгдежзийклмноп
рстуфхцчшщъыьэюя
ёєії

Added all of the Cyrillic characters that Russian uses and also the dotted i letters for Ukranian since why not, probably not needed but I've needed them for Ukranian in TWiLight and bootstrap and such. I can't read any Cyrillic languages so feedback is appreciated, this is heavily based on nds-bootstrap's font with just a few tweaks to fit in 6px or just generally fit in better with the existing latin. The one I'm least sure on is Б as I copied the style of latin B and D, but I'm not sure if that's appropriate for Б.
I also added □△▽◆◇◎●★ since those are in the DS firmware font and can be used by DS games, I know □ is used in Polarium's title (□■ POLARIUM ■□), not 100% sure if the rest are, but they could be.
Edit: Screenshot from within GM9:

Edit 2: Sorry about all the editing lol, but I realized the Я was a bit off compared to this font's latin R so I changed it a bit, font at the top has been updated but the screenshot still has the old one.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/redunka-zver,12,https://github.com/d0k3/GodMode9/pull/723#issuecomment-898909669,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","I can't read any Cyrillic languages so feedback is appreciated

I would say that everything looks really nice and perfectly readable, too!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,13,https://github.com/d0k3/GodMode9/pull/723#issuecomment-902184012,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Alright, great work. I just had my second go through all of your changes.  Your code does look very clean, and I'm pretty sure if I missed something, it will at least not be bad. At this point, one remaing concern is the bigger sizes of path strings, and with that, higher stack memory usage. Even that shouldn't be too bad, though. Maybe it would still make sense if @Wolfvak had a look, cause this is quite a lot of changes.
One last thing I'm wondering about:  Can you think about any way to integrate all that stuff in the software keyboard? Maybe in a separate section. I guess it would be too much work for too little gain and simply not worth it.
So, I'm basically ready to merge. Is there anything you still want to add?
Cyrillic looks great, by the way!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,14,https://github.com/d0k3/GodMode9/pull/723#issuecomment-902410147,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Good thing you mentioned the keyboard, I hadn't thought to test that yet and it was super broken with multi-byte letters. Just fixed that up so now I'm pretty sure both the keyboard and prompt should handle multi-byte letters correctly now. I don't think there's any major bugs in it but let me know if y'all find anything I need to fix. I did notice that naming a file the max length fails, but that's not a regression (v2.0.0 is the same) so I just left that as is.
It's currently still limited to ASCII for typing as at least it's not a regression now and I'm getting tired lol (it's almost 23:00 for me), but it should be relatively simple to add a Russian layout and not too bad to add a Japanese layout. Japanese does take a bit more effort though as it'll require some new special keys to modify letters (ex は+゛→ば, つ+small→っ, etc). I might try do that in the morning or maybe better to save that for another PR after this is merged.
Do you think it'd be worthwhile to add the ability to specify custom keyboard layouts somehow or just hardcode like QWERTY, some kinda Kana layout (probably like the 3DS keyboard is good), whatever's popular for Russian, and maybe something with accented latin?
I also gave the Kana in the font another look over and made several tweaks that should make it a bit easier to read. (comparison)
Other than potentially adding more keyboard layouts I think this is good to merge as far as I can tell.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Wolfvak,15,https://github.com/d0k3/GodMode9/pull/723#issuecomment-902665166,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687",IMO we should just give users the option to input a custom Unicode character through its (decimal) codepoint and that's it. Most people don't really need the foreign characters.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,16,https://github.com/d0k3/GodMode9/pull/723#issuecomment-903181736,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Added a button to the number input mode on the keyboard that lets you convert the previous 4 characters to that Unicode codepoint if it's a valid hex number (otherwise it does nothing). (ex. 3041 → ぁ, 0041 → A, 0411 -> Б)
Is that a good way to do it? It seemed like the simplest way as there's already a hex number pad and I don't think it's too cramped with the one more button there.
Didn't bother with codepoints outside of the basic multilingual plane (above U+FFFF) since there's basically no reason to ever need those here and it's simpler to just keep it 4 hex characters = 1 codepoint as that's the normal way to represent Unicode up to U+FFFF.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,17,https://github.com/d0k3/GodMode9/pull/723#issuecomment-907296008,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","@Epicpkmn11 - the solution you chose for inputing Unicode chars is pretty nice. I like it!
I just had a discussion with @Wolfvak and we decided to merge, but keep it in a separate branch for now (which will then be merged to master at a later point). We just want to make sure there are no problems in yet unexpected places, so more testing is still required. For any bugs found, we may tag you, and if there's stuff you want to add at a later point, you could also make a pr to that new branch.
Just one small request, before merging - this is 21 commits now, which is a lot. I'm pretty sure it wouldn't make much sense to squash it into just one commit, but could you reduce the number of commits a little bit by squashing what belongs together?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/Epicpkmn11,18,https://github.com/d0k3/GodMode9/pull/723#issuecomment-907392563,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Alright, squashed it down to 7 commits. I hope I didn't break anything, I've never really done manual squashing before, it still seems to work fine though so I think it should be fine.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,723,2021-08-02T05:11:29Z,2021-08-31T11:44:04Z,2021-08-31T11:44:05Z,CLOSED,False,735,202,21,https://github.com/Epicpkmn11,Unicode font support,7,[],https://github.com/d0k3/GodMode9/pull/723,https://github.com/d0k3,19,https://github.com/d0k3/GodMode9/pull/723#issuecomment-909159408,"This adds proper handling of UTF-8 and a slightly expanded font. Specifically I added Kana (Japanese) and a bit more extended Latin as that covers most of what you see on 3DS. I could also add some other simpler scripts like Cyrillic and Greek if you want. I only changed the default 6x10 font, the other ones should all behave identically, but with the proper number of ?.
I did change the font from directly using PBM images to using a RIFF format. With the PBM images I couldn't think of a good way to handle the character mappings, you'd need to like put some kinda mapping file next to it or something which just feels like a confusing way to do it imo, and knowing the character sizes in the PBM is a lot trickier too when it's not a fixed size.
All you need to do to convert an existing font is run:
python3 utils/fontriff.py input.pbm output.riff [W] [H] -m resources/fonts/cp_437.txt
where [W] is the width of the letters and [H] is the height. cp_437.txt has the mapping for code page 437, which is what the existing fonts are in. I don't think the script needs any non-standard packages and it should work in most anything Python 3, it's only slightly broken in 2. I've only tested in 3.9.6 though.
I'm open to suggestions on a better way to handle this but I figured this seemed the simplest, it just needs a PBM image, the size of the tiles, and a txt file with the character mappings and it generates a RIFF file that has all that neatly packed in. Could maybe change the extension from just generic "".riff"" though, maybe "".frf"" (Font RiFf) or so.
Another potential concern is if scripts can use the character escapes, things like the arrows need to be changed from \x1B to their proper UTF-8 (←). I did that for everything in GM9 itself, but it's possible some scripts might be broken by that.
Updated font:

Not the prettiest Japanese font I've done lol, but for how tiny it is I think it's plenty readable.
Screenshots

The ? are kanji, only kana are supported. Kanji is bad enough in nds-bootstrap's 7x7 font I don't even want to think about 5x7 lol.

Titles like ""Pokémon"" and ""LEGO® Star Wars™"" also show correctly now.


Tested on a New 3DS (U), I've tested fairly thoroughly but please let me know if I missed anything
Closes #687","Merged to the unicode branch. We'll use that for testing and to continue work on this. Feel free to add more pull requests, should you see the need. And, a big thank you! You'll be in the next release notes for sure.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,728,2021-09-01T21:00:29Z,2021-09-02T09:47:49Z,2021-09-08T23:47:50Z,MERGED,True,90,4,4,https://github.com/Epicpkmn11,Allow loading FRF fonts up to 0x20000 bytes and add Misaki Gothic 8x8 font to resources,2,[],https://github.com/d0k3/GodMode9/pull/728,https://github.com/Epicpkmn11,1,https://github.com/d0k3/GodMode9/pull/728,"0x10000 bytes is a bit too small for complete coverage of JIS X 0201 and probably similar for a reasonably complete Chinese font

I think 0x20000 should be fine for any single language at least and it doesn't seem to cause any issues for me, sorry if this breaks anything I'm not noticing 😅


Adds 美咲ゴシック (Misaki Gothic) 8x8 Japanese font to the resources folder

Didn't want to do a full Japanese font with Kanji for the default since it's quite large, I think it's probably good to have in the resources folder though
This font is 0x11308 bytes, so just a bit over the old limit
I put the FRF, PBM, and TXT files all in resources so it can both be easily used and edited, would it be better to only do some of them or is that good?
It has complete coverage of JIS X 0208, which I think is basically everything you could want for Japanese and also partial Cyrillic and Greek (Greek is missing the Tonos letters and I think Cyrillic is missing a couple too)
I also edited it slightly to have a copy of the full width latin and katakana for ASCII and half-width katakana as while the font does have proper half-width letters since GodMode9 is monospace it looks better with the full-width ones (the first two rows in the PBM)
There is also a 6x8 version, I went with the 8x8 version though as while the Latin is rather spaced out the Kanji is more readable and if you're using this font it's probably because you want kanji
License is here: https://littlelimit.net/font.htm#license


If someone knows some good Korean or Chinese bitmap fonts that are the right size I could do those too, I don't know enough of those languages to find one easily

Images
Font: (blank areas are ignored as I have them all mapped to duplicates of space or full-width space in the mapping file)

Screenshot:","0x10000 bytes is a bit too small for complete coverage of JIS X 0201 and probably similar for a reasonably complete Chinese font

I think 0x20000 should be fine for any single language at least and it doesn't seem to cause any issues for me, sorry if this breaks anything I'm not noticing 😅


Adds 美咲ゴシック (Misaki Gothic) 8x8 Japanese font to the resources folder

Didn't want to do a full Japanese font with Kanji for the default since it's quite large, I think it's probably good to have in the resources folder though
This font is 0x11308 bytes, so just a bit over the old limit
I put the FRF, PBM, and TXT files all in resources so it can both be easily used and edited, would it be better to only do some of them or is that good?
It has complete coverage of JIS X 0208, which I think is basically everything you could want for Japanese and also partial Cyrillic and Greek (Greek is missing the Tonos letters and I think Cyrillic is missing a couple too)
I also edited it slightly to have a copy of the full width latin and katakana for ASCII and half-width katakana as while the font does have proper half-width letters since GodMode9 is monospace it looks better with the full-width ones (the first two rows in the PBM)
There is also a 6x8 version, I went with the 8x8 version though as while the Latin is rather spaced out the Kanji is more readable and if you're using this font it's probably because you want kanji
License is here: https://littlelimit.net/font.htm#license


If someone knows some good Korean or Chinese bitmap fonts that are the right size I could do those too, I don't know enough of those languages to find one easily

Images
Font: (blank areas are ignored as I have them all mapped to duplicates of space or full-width space in the mapping file)

Screenshot:",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,728,2021-09-01T21:00:29Z,2021-09-02T09:47:49Z,2021-09-08T23:47:50Z,MERGED,True,90,4,4,https://github.com/Epicpkmn11,Allow loading FRF fonts up to 0x20000 bytes and add Misaki Gothic 8x8 font to resources,2,[],https://github.com/d0k3/GodMode9/pull/728,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/728#issuecomment-911472608,"0x10000 bytes is a bit too small for complete coverage of JIS X 0201 and probably similar for a reasonably complete Chinese font

I think 0x20000 should be fine for any single language at least and it doesn't seem to cause any issues for me, sorry if this breaks anything I'm not noticing 😅


Adds 美咲ゴシック (Misaki Gothic) 8x8 Japanese font to the resources folder

Didn't want to do a full Japanese font with Kanji for the default since it's quite large, I think it's probably good to have in the resources folder though
This font is 0x11308 bytes, so just a bit over the old limit
I put the FRF, PBM, and TXT files all in resources so it can both be easily used and edited, would it be better to only do some of them or is that good?
It has complete coverage of JIS X 0208, which I think is basically everything you could want for Japanese and also partial Cyrillic and Greek (Greek is missing the Tonos letters and I think Cyrillic is missing a couple too)
I also edited it slightly to have a copy of the full width latin and katakana for ASCII and half-width katakana as while the font does have proper half-width letters since GodMode9 is monospace it looks better with the full-width ones (the first two rows in the PBM)
There is also a 6x8 version, I went with the 8x8 version though as while the Latin is rather spaced out the Kanji is more readable and if you're using this font it's probably because you want kanji
License is here: https://littlelimit.net/font.htm#license


If someone knows some good Korean or Chinese bitmap fonts that are the right size I could do those too, I don't know enough of those languages to find one easily

Images
Font: (blank areas are ignored as I have them all mapped to duplicates of space or full-width space in the mapping file)

Screenshot:","Merged to the unicode branch. 0x20000 should be perfectly okay, even that's just 8kiB, so no worries. Thanks for the ultra-quick response and your work in this!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/ZeroSkill1,1,https://github.com/d0k3/GodMode9/pull/733,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/aspargas2,2,https://github.com/d0k3/GodMode9/pull/733#issuecomment-914450979,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Overall I think this is a probably a good idea to have as a feature, but I think there's a bug in this implementation: consider the case that replace is passed as false to AddTicketToDB, and there is an existing ticket in the filesystem with the passed title ID. The expected behavior would then be for the function to change nothing in the ticket.db and return failure. This code, if I am reading it correctly, will always make AddBDRIEntry return 2 in the described case, meaning the new logic in AddTicketToDB will try to remove the existing ticket and add the new one. This is easy to fix and will make the logic just a little messier in one place or another, but I'm not sure there's any cleaner way to implement this without changing a bunch of other stuff.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/ZeroSkill1,3,https://github.com/d0k3/GodMode9/pull/733#issuecomment-914489826,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Yeah... I kinda missed that.
So we need the following logic:
When a ticket already exists with the same Title ID,

Only replace if replace is true and the existing entry size matches the size of the entry that is being installed.
Return failure if an entry was found and replace was not true or the entry sizes mismatch.

To that, I'd say this should do it:
if (!replace) {
    return 1;
}
else if (file_entry.size != size) {
    return 2;
}
else {
    do_replace = true;
    break;
}
It should immediately fail when replace is false so this should no longer apply:

Consider the case that replace is passed as false to AddTicketToDB, and there is an existing ticket in the filesystem with the passed title ID.

As the first check is seeing whether the caller wants replacing or not.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/aspargas2,4,https://github.com/d0k3/GodMode9/pull/733#issuecomment-914859708,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Looks good, that should work fine. Pretty sure this would be good to merge with that code changed to what you just proposed (and the elses in that code block moved on the same line as the }s to match the formatting of the rest of the repo, lol). Though I'd like @d0k3 or @Wolfvak to also look over this before merging to make sure nothing else is being missed, and that there's nothing that uses these functions and assumes the current behavior.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/eku,5,https://github.com/d0k3/GodMode9/pull/733#issuecomment-914929718,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","For better readability, I would better define constants instead of numeric literals.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/ZeroSkill1,6,https://github.com/d0k3/GodMode9/pull/733#issuecomment-915256781,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.",Should all be good now.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/eku,7,https://github.com/d0k3/GodMode9/pull/733#issuecomment-915779479,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Should all be good now.

Any reason you did not define constants for 0 and 1, but for 2?",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/aspargas2,8,https://github.com/d0k3/GodMode9/pull/733#issuecomment-915791925,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Because 0 and 1 are used to for success and failure returns all throughout the repo without defines. IMO, it's a little weird that we're using a special return value at all here, but it would be more weird to define 0 and 1 as generic success and failure to only use those defines in this one function.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/eku,9,https://github.com/d0k3/GodMode9/pull/733#issuecomment-915819651,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Because 0 and 1 are used to for success and failure returns all throughout the repo without defines. IMO, it's a little weird that we're using a special return value at all here, but it would be more weird to define 0 and 1 as generic success and failure to only use those defines in this one function.

Yes, I understood that. But for the one function that returns three different values, I would define the three values as constants, precisely because this function acts differently from the rest. For this one case, it also increases the readability of the code.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,733,2021-09-07T11:06:58Z,2021-10-23T11:19:13Z,2021-10-24T17:40:49Z,MERGED,True,10,3,1,https://github.com/ZeroSkill1,Fixed inability to install a larger/smaller ticket when a smaller/large one is installed,2,[],https://github.com/d0k3/GodMode9/pull/733,https://github.com/d0k3,10,https://github.com/d0k3/GodMode9/pull/733#issuecomment-950137374,"If you have a ticket installed that is smaller or larger than the ticket you're trying to overwrite it with, the process will fail.
Realistically this won't happen but if it does this should handle it.
This involves deleting the installed ticket, then installing the one the user wants to install, separately.","Also merged, thanks for your continued contributions!",True,{'THUMBS_UP': ['https://github.com/ZeroSkill1']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,736,2021-09-16T23:23:44Z,2021-09-17T08:08:53Z,2021-09-17T08:08:54Z,CLOSED,False,1,1,1,https://github.com/fox8091,Make TWL MBR check actually give useful info,1,[],https://github.com/d0k3/GodMode9/pull/736,https://github.com/fox8091,1,https://github.com/d0k3/GodMode9/pull/736,"Currently, if TWL MBR is corrupt, the error shows ""Error: MBR MBR is corrupt"", while CTR MBR being incorrect shows ""Error: CTR MBR is corrupt"". This changes this to match the error style given for CTR MBR errors.","Currently, if TWL MBR is corrupt, the error shows ""Error: MBR MBR is corrupt"", while CTR MBR being incorrect shows ""Error: CTR MBR is corrupt"". This changes this to match the error style given for CTR MBR errors.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,736,2021-09-16T23:23:44Z,2021-09-17T08:08:53Z,2021-09-17T08:08:54Z,CLOSED,False,1,1,1,https://github.com/fox8091,Make TWL MBR check actually give useful info,1,[],https://github.com/d0k3/GodMode9/pull/736,https://github.com/fox8091,2,https://github.com/d0k3/GodMode9/pull/736#issuecomment-921596637,"Currently, if TWL MBR is corrupt, the error shows ""Error: MBR MBR is corrupt"", while CTR MBR being incorrect shows ""Error: CTR MBR is corrupt"". This changes this to match the error style given for CTR MBR errors.","Don't actually merge this, a better solution is being worked on that overhauls the NAND validation function to allow checking for multiple problems, as well as to fix a few other bugs that affect devkits.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,737,2021-09-16T23:47:05Z,2021-09-26T14:36:19Z,2021-09-26T14:37:16Z,MERGED,True,4,1,1,https://github.com/dratini0,"Add a new type of flash chip, from Art Academy",1,[],https://github.com/d0k3/GodMode9/pull/737,https://github.com/dratini0,1,https://github.com/d0k3/GodMode9/pull/737,"Yesterday evening, Discord user FerozElMejor has discovered a new kind of save chip in a copy of Art Academy. With @Epicpkmn11's help, we have surmised its JEDEC ID is 0xC22017, and based on that it's manufactured by Macronix. We have tested the write settings as in the commit, and they seem to work too.
The one other notable change is changing the timeout on the program operation. This seemed necessary for FerozElMajor's cartridge.","Yesterday evening, Discord user FerozElMejor has discovered a new kind of save chip in a copy of Art Academy. With @Epicpkmn11's help, we have surmised its JEDEC ID is 0xC22017, and based on that it's manufactured by Macronix. We have tested the write settings as in the commit, and they seem to work too.
The one other notable change is changing the timeout on the program operation. This seemed necessary for FerozElMajor's cartridge.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,737,2021-09-16T23:47:05Z,2021-09-26T14:36:19Z,2021-09-26T14:37:16Z,MERGED,True,4,1,1,https://github.com/dratini0,"Add a new type of flash chip, from Art Academy",1,[],https://github.com/d0k3/GodMode9/pull/737,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/737#issuecomment-927316555,"Yesterday evening, Discord user FerozElMejor has discovered a new kind of save chip in a copy of Art Academy. With @Epicpkmn11's help, we have surmised its JEDEC ID is 0xC22017, and based on that it's manufactured by Macronix. We have tested the write settings as in the commit, and they seem to work too.
The one other notable change is changing the timeout on the program operation. This seemed necessary for FerozElMajor's cartridge.","Merged, thanks a lot!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,740,2021-09-26T18:46:42Z,2021-10-09T10:29:59Z,2021-10-10T19:48:40Z,CLOSED,False,43,2,8,https://github.com/pokemaniac05,Improved markdown viewer feature,6,[],https://github.com/d0k3/GodMode9/pull/740,https://github.com/pokemaniac05,1,https://github.com/d0k3/GodMode9/pull/740,"I added markdown viewer (referred as MD ToC Viewer) feature, as seen in HOME -> More... -> Show ReadME to every .md file in sdcard and other partitions. To view these file, user has to press A and select View in MD ToC Viewer. I also added a Markdown... menu to view files inside 0:/gm9/markdown (like Scripts... and Payloads... menus).
Finally I edited Show ReadME to enter .md file name via soft keyboard (to let user view other .md files added to VRAM at compile time).
I tested code changes on Old2DS and they work.","I added markdown viewer (referred as MD ToC Viewer) feature, as seen in HOME -> More... -> Show ReadME to every .md file in sdcard and other partitions. To view these file, user has to press A and select View in MD ToC Viewer. I also added a Markdown... menu to view files inside 0:/gm9/markdown (like Scripts... and Payloads... menus).
Finally I edited Show ReadME to enter .md file name via soft keyboard (to let user view other .md files added to VRAM at compile time).
I tested code changes on Old2DS and they work.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,740,2021-09-26T18:46:42Z,2021-10-09T10:29:59Z,2021-10-10T19:48:40Z,CLOSED,False,43,2,8,https://github.com/pokemaniac05,Improved markdown viewer feature,6,[],https://github.com/d0k3/GodMode9/pull/740,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/740#issuecomment-939273463,"I added markdown viewer (referred as MD ToC Viewer) feature, as seen in HOME -> More... -> Show ReadME to every .md file in sdcard and other partitions. To view these file, user has to press A and select View in MD ToC Viewer. I also added a Markdown... menu to view files inside 0:/gm9/markdown (like Scripts... and Payloads... menus).
Finally I edited Show ReadME to enter .md file name via soft keyboard (to let user view other .md files added to VRAM at compile time).
I tested code changes on Old2DS and they work.","There are several issues with this, the most important is: That ToC viewer is not designed for universal support (it does even say so in the source code comments). So, with any given .md file, anything could happen - even if all the files you tested caused no trouble. You also used tabs instead of spaces (GodMode9 uses spaces) and the MD support directory plus the additional HOME menu entry is too much for something that's not a ""main"" feature (this is still GodMode9, not MarkDown9 now).
That being said, I'm not against a universal Markdown viewer, but it also needs universal compatibility then, and it would need no more integration but the A button menu. Can't merge this like it is, so I'm closing it for now.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,741,2021-09-30T17:19:47Z,2021-10-09T09:59:09Z,2021-10-09T09:59:09Z,CLOSED,False,79,53,5,https://github.com/aspargas2,Add user-facing SHA1 support,2,[],https://github.com/d0k3/GodMode9/pull/741,https://github.com/aspargas2,1,https://github.com/d0k3/GodMode9/pull/741,"This PR adds an option in the GUI to calculate the SHA-1 hash of any file, and adds a -1 flag to the sha, shaget, and cp -h scripting commands to use SHA-1 instead of the default SHA-256. It also allows for characters '0' through '5' to be used as flags for scripting commands, and fixes a bug in the scripting engine where err_str would not be set if an invalid character was passed as a flag.","This PR adds an option in the GUI to calculate the SHA-1 hash of any file, and adds a -1 flag to the sha, shaget, and cp -h scripting commands to use SHA-1 instead of the default SHA-256. It also allows for characters '0' through '5' to be used as flags for scripting commands, and fixes a bug in the scripting engine where err_str would not be set if an invalid character was passed as a flag.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,741,2021-09-30T17:19:47Z,2021-10-09T09:59:09Z,2021-10-09T09:59:09Z,CLOSED,False,79,53,5,https://github.com/aspargas2,Add user-facing SHA1 support,2,[],https://github.com/d0k3/GodMode9/pull/741,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/741#issuecomment-939269207,"This PR adds an option in the GUI to calculate the SHA-1 hash of any file, and adds a -1 flag to the sha, shaget, and cp -h scripting commands to use SHA-1 instead of the default SHA-256. It also allows for characters '0' through '5' to be used as flags for scripting commands, and fixes a bug in the scripting engine where err_str would not be set if an invalid character was passed as a flag.",Merged to master. I only slightly changed the display of SHA-1 checksums via an additional commit.,True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,744,2021-10-09T13:11:32Z,2021-10-23T11:14:53Z,2021-10-24T17:41:12Z,MERGED,True,12,8,2,https://github.com/ZeroSkill1,fix #729,2,[],https://github.com/d0k3/GodMode9/pull/744,https://github.com/ZeroSkill1,1,https://github.com/d0k3/GodMode9/pull/744,"Because ticket.db is not mounted soon enough, any time you try to build (dec/enc)TitleKeys.bin from a ticket database, it will fail. I've rearranged the code to resolve this.","Because ticket.db is not mounted soon enough, any time you try to build (dec/enc)TitleKeys.bin from a ticket database, it will fail. I've rearranged the code to resolve this.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,744,2021-10-09T13:11:32Z,2021-10-23T11:14:53Z,2021-10-24T17:41:12Z,MERGED,True,12,8,2,https://github.com/ZeroSkill1,fix #729,2,[],https://github.com/d0k3/GodMode9/pull/744,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/744#issuecomment-950136907,"Because ticket.db is not mounted soon enough, any time you try to build (dec/enc)TitleKeys.bin from a ticket database, it will fail. I've rearranged the code to resolve this.","Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/ZeroSkill1']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,745,2021-10-10T19:50:30Z,2021-10-14T21:31:14Z,2021-10-14T21:31:14Z,CLOSED,False,47,2,8,https://github.com/pokemaniac05,Improved markdown viewer (fixed #740),9,[],https://github.com/d0k3/GodMode9/pull/745,https://github.com/pokemaniac05,1,https://github.com/d0k3/GodMode9/pull/745,"This PR is a fixed version of #740
I resolved the bug reported by @aspargas2 (now the buffer is initialized with VRAM0_README_MD, as everyone might except) and added security check if given .md file has no captions (that file will be opened by TextViewer instead ToC). I think that @d0k3 was referring to that.
Regarding indentation, I noticed that a lot of code (also files that I have not touched) uses, for example, 8 char tabs and two spaces instead of 10 spaces and I have not changed that aspect.","This PR is a fixed version of #740
I resolved the bug reported by @aspargas2 (now the buffer is initialized with VRAM0_README_MD, as everyone might except) and added security check if given .md file has no captions (that file will be opened by TextViewer instead ToC). I think that @d0k3 was referring to that.
Regarding indentation, I noticed that a lot of code (also files that I have not touched) uses, for example, 8 char tabs and two spaces instead of 10 spaces and I have not changed that aspect.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,745,2021-10-10T19:50:30Z,2021-10-14T21:31:14Z,2021-10-14T21:31:14Z,CLOSED,False,47,2,8,https://github.com/pokemaniac05,Improved markdown viewer (fixed #740),9,[],https://github.com/d0k3/GodMode9/pull/745,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/745#issuecomment-939550248,"This PR is a fixed version of #740
I resolved the bug reported by @aspargas2 (now the buffer is initialized with VRAM0_README_MD, as everyone might except) and added security check if given .md file has no captions (that file will be opened by TextViewer instead ToC). I think that @d0k3 was referring to that.
Regarding indentation, I noticed that a lot of code (also files that I have not touched) uses, for example, 8 char tabs and two spaces instead of 10 spaces and I have not changed that aspect.","What's exactly the point of this? Our MD reader isn't compliant at all, it barely implements the most minimal subset it can to work with the standard README, and even that has to be modified when building GM9 in order to make it look acceptable?
If you were to implement the full spec then it would make more sense, but it would also be unbearably huge and not worth the effort. Again - GM9 is not designed as a reader, it's only there for some kind of ""quick reference""",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,745,2021-10-10T19:50:30Z,2021-10-14T21:31:14Z,2021-10-14T21:31:14Z,CLOSED,False,47,2,8,https://github.com/pokemaniac05,Improved markdown viewer (fixed #740),9,[],https://github.com/d0k3/GodMode9/pull/745,https://github.com/pokemaniac05,3,https://github.com/d0k3/GodMode9/pull/745#issuecomment-939555280,"This PR is a fixed version of #740
I resolved the bug reported by @aspargas2 (now the buffer is initialized with VRAM0_README_MD, as everyone might except) and added security check if given .md file has no captions (that file will be opened by TextViewer instead ToC). I think that @d0k3 was referring to that.
Regarding indentation, I noticed that a lot of code (also files that I have not touched) uses, for example, 8 char tabs and two spaces instead of 10 spaces and I have not changed that aspect.","I'm having problems with git and a commit is missing -------- Messaggio originale --------Da: Wolfvak ***@***.***>Data: dom 10 ott 2021, 22:48A: d0k3/GodMode9 ***@***.***>Cc: pokemaniac05 ***@***.***>, Author ***@***.***>Oggetto: Re: [d0k3/GodMode9] Improved markdown viewer (fixed #740) (#745)
What's exactly the point of this? Our MD reader isn't compliant at all, it barely implements the most minimal subset it can to work with the standard README, and even that has to be modified when building GM9 in order to make it look acceptable?
If you were to implement the full spec then it would make more sense, but it would also be unbearably huge and not worth the effort. Again - GM9 is not designed as a reader, it's only there for some kind of ""quick reference""

—You are receiving this because you authored the thread.Reply to this email directly, view it on GitHub, or unsubscribe.Triage notifications on the go with GitHub Mobile for iOS or Android.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,745,2021-10-10T19:50:30Z,2021-10-14T21:31:14Z,2021-10-14T21:31:14Z,CLOSED,False,47,2,8,https://github.com/pokemaniac05,Improved markdown viewer (fixed #740),9,[],https://github.com/d0k3/GodMode9/pull/745,https://github.com/d0k3,4,https://github.com/d0k3/GodMode9/pull/745#issuecomment-943750625,"This PR is a fixed version of #740
I resolved the bug reported by @aspargas2 (now the buffer is initialized with VRAM0_README_MD, as everyone might except) and added security check if given .md file has no captions (that file will be opened by TextViewer instead ToC). I think that @d0k3 was referring to that.
Regarding indentation, I noticed that a lot of code (also files that I have not touched) uses, for example, 8 char tabs and two spaces instead of 10 spaces and I have not changed that aspect.","What @Wolfvak wrote - we can't merge this to GodMode9 because the included markdown viewer does not have the compatibility or was ever intended to be a universal markdown viewer. It just works with the readme and provides a convenient way to navigate it, but that's that. Even though I'll have to close this, know that contributions are always appreciated.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,759,2022-01-28T09:07:16Z,,2022-01-31T15:16:50Z,OPEN,False,49,20,4,https://github.com/ZeroSkill1,add created/modified/last accessed date,3,[],https://github.com/d0k3/GodMode9/pull/759,https://github.com/ZeroSkill1,1,https://github.com/d0k3/GodMode9/pull/759,"I know this isn't exactly a good idea.
As mentioned in issue #758, GodMode9 currently does not show file creation date. It shows whatever FatFs returns in FILINFO, which is creation date (in case of directories) and modification date (in case of files).
According to this document, it's possible to get:

Creation Date + Time
Modification Date + Time
Last Accessed Date (no Time here)

This may not seem like a good idea at first, but I got it working by modifying FatFs a tiny bit.
I made sure not to mess with anything that isn't related. I also made sure the dates are correct for drives and virtual drives, keeping the date that was previously intended to be shown.
FILINFO only stored one Date and Time, so the first thing I did was adding new fields to store the other Dates/Times.
Then, I made sure the Dates/Times were updated accordingly (for writes, file/dir creation, etc.).
This is what I got after that:

The data shown is identical to the data shown in the Windows Explorer ""Properties"" menu, so it is at the very least correct.
I have also tested the modified date, by creating a file, modifying it in the built in hex editor and saving it. The modified date/last access date is updated accordingly.
Overall it's a pretty minimal change. I understand that it may not be something you wish to add, but if it works, IMO, why not.
Let me know what you think.","I know this isn't exactly a good idea.
As mentioned in issue #758, GodMode9 currently does not show file creation date. It shows whatever FatFs returns in FILINFO, which is creation date (in case of directories) and modification date (in case of files).
According to this document, it's possible to get:

Creation Date + Time
Modification Date + Time
Last Accessed Date (no Time here)

This may not seem like a good idea at first, but I got it working by modifying FatFs a tiny bit.
I made sure not to mess with anything that isn't related. I also made sure the dates are correct for drives and virtual drives, keeping the date that was previously intended to be shown.
FILINFO only stored one Date and Time, so the first thing I did was adding new fields to store the other Dates/Times.
Then, I made sure the Dates/Times were updated accordingly (for writes, file/dir creation, etc.).
This is what I got after that:

The data shown is identical to the data shown in the Windows Explorer ""Properties"" menu, so it is at the very least correct.
I have also tested the modified date, by creating a file, modifying it in the built in hex editor and saving it. The modified date/last access date is updated accordingly.
Overall it's a pretty minimal change. I understand that it may not be something you wish to add, but if it works, IMO, why not.
Let me know what you think.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,759,2022-01-28T09:07:16Z,,2022-01-31T15:16:50Z,OPEN,False,49,20,4,https://github.com/ZeroSkill1,add created/modified/last accessed date,3,[],https://github.com/d0k3/GodMode9/pull/759,https://github.com/Wolfvak,2,https://github.com/d0k3/GodMode9/pull/759#issuecomment-1025873994,"I know this isn't exactly a good idea.
As mentioned in issue #758, GodMode9 currently does not show file creation date. It shows whatever FatFs returns in FILINFO, which is creation date (in case of directories) and modification date (in case of files).
According to this document, it's possible to get:

Creation Date + Time
Modification Date + Time
Last Accessed Date (no Time here)

This may not seem like a good idea at first, but I got it working by modifying FatFs a tiny bit.
I made sure not to mess with anything that isn't related. I also made sure the dates are correct for drives and virtual drives, keeping the date that was previously intended to be shown.
FILINFO only stored one Date and Time, so the first thing I did was adding new fields to store the other Dates/Times.
Then, I made sure the Dates/Times were updated accordingly (for writes, file/dir creation, etc.).
This is what I got after that:

The data shown is identical to the data shown in the Windows Explorer ""Properties"" menu, so it is at the very least correct.
I have also tested the modified date, by creating a file, modifying it in the built in hex editor and saving it. The modified date/last access date is updated accordingly.
Overall it's a pretty minimal change. I understand that it may not be something you wish to add, but if it works, IMO, why not.
Let me know what you think.","Honestly I'd feel far more comfortable if this were pushed to http://elm-chan.org/fsw/ff/bd/ and the original author merged it in themselves, then we can update the library and use it too.",True,{'THUMBS_UP': ['https://github.com/eku']}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,761,2022-02-22T06:01:59Z,2022-03-08T16:27:36Z,2022-03-08T16:27:41Z,MERGED,True,16,12,1,https://github.com/Epicpkmn11,Improve DSiWare save generation,1,[],https://github.com/d0k3/GodMode9/pull/761,https://github.com/Epicpkmn11,1,https://github.com/d0k3/GodMode9/pull/761,"The sector/track/head count calculation for DSiWare saves was a bit off resulting in some DSiWare refusing to boot because the save 'didn't have enough room' or such. If you want to test, Dragon Quest Wars (EUR) is one game that was broken, theoretically any game with a 32 KiB save (or like half the other sizes) should be broken but most probably don't bother checking.
I've tested this calculation against all 25 sizes that TWiLight Menu++ has (it has hardcoded template files at the moment) and everything seems to generate correctly with this change.","The sector/track/head count calculation for DSiWare saves was a bit off resulting in some DSiWare refusing to boot because the save 'didn't have enough room' or such. If you want to test, Dragon Quest Wars (EUR) is one game that was broken, theoretically any game with a 32 KiB save (or like half the other sizes) should be broken but most probably don't bother checking.
I've tested this calculation against all 25 sizes that TWiLight Menu++ has (it has hardcoded template files at the moment) and everything seems to generate correctly with this change.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,761,2022-02-22T06:01:59Z,2022-03-08T16:27:36Z,2022-03-08T16:27:41Z,MERGED,True,16,12,1,https://github.com/Epicpkmn11,Improve DSiWare save generation,1,[],https://github.com/d0k3/GodMode9/pull/761,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/761#issuecomment-1061963706,"The sector/track/head count calculation for DSiWare saves was a bit off resulting in some DSiWare refusing to boot because the save 'didn't have enough room' or such. If you want to test, Dragon Quest Wars (EUR) is one game that was broken, theoretically any game with a 32 KiB save (or like half the other sizes) should be broken but most probably don't bother checking.
I've tested this calculation against all 25 sizes that TWiLight Menu++ has (it has hardcoded template files at the moment) and everything seems to generate correctly with this change.","Merged, thanks a lot for this!",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,768,2022-03-22T23:24:50Z,,2022-03-29T21:04:10Z,OPEN,False,233,65,6,https://github.com/Epicpkmn11,WIP: Make translatable,2,[],https://github.com/d0k3/GodMode9/pull/768,https://github.com/Epicpkmn11,1,https://github.com/d0k3/GodMode9/pull/768,"Currently only the start of godmode.c is done as an example and with a hardcoded Japanese translation. If this seems good I can continue on it, might take a bit since there are a lot of strings but it's mostly just copy string to .inl, give it a name, use STR_name in the source. Only a couple places have actually needed any real code changes where I changed it to avoid concatenation (always better to use a format string, never assume all languages have the same sentence structure as English) or maybe a couple other similar changes.
For using the strings I did it like TWiLight Menu++/GodMode9i do where you define as string as say PATH_FIRM_TOO_BIG in the .inl file, then to use it you simply do STR_PATH_FIRM_TOO_BIG. If preferred I could also do it like getString(""PATH_FIRM_TO_BIG"") or such, I kinda like the way TWiLight does it because it means you get a compile error if you misspell a string instead of it simply not showing up or having a runtime warning.
I added -Wno-format-nonliteral and -Wno-format-security to the Makefile since they were throwing a lot of warnings and I wasn't sure a way to actually fix them, there might be a better way to fix that though.

source/godmode.c: In function 'BootFirmHandler':
source/godmode.c:62:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
   62 |         if (verbose) ShowPrompt(false, STR_PATH_FIRM_TOO_BIG, pathstr); // unlikely
      |  

Edit: Fixed -Wformat-security, I don't think -Wformat-nonliteral is really fixable though since well, the whole point is that we're formatting non-literals as defined by the translation.
Closes #766.
(Note: The Japanese translation isn't usable with the current default font. Use misaki gothic or GodMode9i's font to test it properly, I'll probably copy the additions I made to GodMode9i back over to here later)","Currently only the start of godmode.c is done as an example and with a hardcoded Japanese translation. If this seems good I can continue on it, might take a bit since there are a lot of strings but it's mostly just copy string to .inl, give it a name, use STR_name in the source. Only a couple places have actually needed any real code changes where I changed it to avoid concatenation (always better to use a format string, never assume all languages have the same sentence structure as English) or maybe a couple other similar changes.
For using the strings I did it like TWiLight Menu++/GodMode9i do where you define as string as say PATH_FIRM_TOO_BIG in the .inl file, then to use it you simply do STR_PATH_FIRM_TOO_BIG. If preferred I could also do it like getString(""PATH_FIRM_TO_BIG"") or such, I kinda like the way TWiLight does it because it means you get a compile error if you misspell a string instead of it simply not showing up or having a runtime warning.
I added -Wno-format-nonliteral and -Wno-format-security to the Makefile since they were throwing a lot of warnings and I wasn't sure a way to actually fix them, there might be a better way to fix that though.

source/godmode.c: In function 'BootFirmHandler':
source/godmode.c:62:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
   62 |         if (verbose) ShowPrompt(false, STR_PATH_FIRM_TOO_BIG, pathstr); // unlikely
      |  

Edit: Fixed -Wformat-security, I don't think -Wformat-nonliteral is really fixable though since well, the whole point is that we're formatting non-literals as defined by the translation.
Closes #766.
(Note: The Japanese translation isn't usable with the current default font. Use misaki gothic or GodMode9i's font to test it properly, I'll probably copy the additions I made to GodMode9i back over to here later)",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,768,2022-03-22T23:24:50Z,,2022-03-29T21:04:10Z,OPEN,False,233,65,6,https://github.com/Epicpkmn11,WIP: Make translatable,2,[],https://github.com/d0k3/GodMode9/pull/768,https://github.com/d0k3,2,https://github.com/d0k3/GodMode9/pull/768#issuecomment-1082226067,"Currently only the start of godmode.c is done as an example and with a hardcoded Japanese translation. If this seems good I can continue on it, might take a bit since there are a lot of strings but it's mostly just copy string to .inl, give it a name, use STR_name in the source. Only a couple places have actually needed any real code changes where I changed it to avoid concatenation (always better to use a format string, never assume all languages have the same sentence structure as English) or maybe a couple other similar changes.
For using the strings I did it like TWiLight Menu++/GodMode9i do where you define as string as say PATH_FIRM_TOO_BIG in the .inl file, then to use it you simply do STR_PATH_FIRM_TOO_BIG. If preferred I could also do it like getString(""PATH_FIRM_TO_BIG"") or such, I kinda like the way TWiLight does it because it means you get a compile error if you misspell a string instead of it simply not showing up or having a runtime warning.
I added -Wno-format-nonliteral and -Wno-format-security to the Makefile since they were throwing a lot of warnings and I wasn't sure a way to actually fix them, there might be a better way to fix that though.

source/godmode.c: In function 'BootFirmHandler':
source/godmode.c:62:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
   62 |         if (verbose) ShowPrompt(false, STR_PATH_FIRM_TOO_BIG, pathstr); // unlikely
      |  

Edit: Fixed -Wformat-security, I don't think -Wformat-nonliteral is really fixable though since well, the whole point is that we're formatting non-literals as defined by the translation.
Closes #766.
(Note: The Japanese translation isn't usable with the current default font. Use misaki gothic or GodMode9i's font to test it properly, I'll probably copy the additions I made to GodMode9i back over to here later)","Alright, I had a look. Sorry this took a bit. I'll still have to discuss this with @Wolfvak and @aspargas2 (you may want to chime in here). Looks good, though.
For now:
It's absolutely important you make 100% sure no english strings are changed by accident in the process and nothing breaks. For english, this will be a pure under-the-hood-change. Exceptions: If you find typos in the process (of course). Do you have anything to double check the required manual changes or even, automate them?
Also, speaking names are important (which. Meaning: From the strings name, I should be able to somewhat conclude what's behind them. Maybe some scheme, which would convert the strings content to a define would make things easier. With all the strings scattered among all these source files, that may be a bit of work.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,768,2022-03-22T23:24:50Z,,2022-03-29T21:04:10Z,OPEN,False,233,65,6,https://github.com/Epicpkmn11,WIP: Make translatable,2,[],https://github.com/d0k3/GodMode9/pull/768,https://github.com/Wolfvak,3,https://github.com/d0k3/GodMode9/pull/768#issuecomment-1082252215,"Currently only the start of godmode.c is done as an example and with a hardcoded Japanese translation. If this seems good I can continue on it, might take a bit since there are a lot of strings but it's mostly just copy string to .inl, give it a name, use STR_name in the source. Only a couple places have actually needed any real code changes where I changed it to avoid concatenation (always better to use a format string, never assume all languages have the same sentence structure as English) or maybe a couple other similar changes.
For using the strings I did it like TWiLight Menu++/GodMode9i do where you define as string as say PATH_FIRM_TOO_BIG in the .inl file, then to use it you simply do STR_PATH_FIRM_TOO_BIG. If preferred I could also do it like getString(""PATH_FIRM_TO_BIG"") or such, I kinda like the way TWiLight does it because it means you get a compile error if you misspell a string instead of it simply not showing up or having a runtime warning.
I added -Wno-format-nonliteral and -Wno-format-security to the Makefile since they were throwing a lot of warnings and I wasn't sure a way to actually fix them, there might be a better way to fix that though.

source/godmode.c: In function 'BootFirmHandler':
source/godmode.c:62:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
   62 |         if (verbose) ShowPrompt(false, STR_PATH_FIRM_TOO_BIG, pathstr); // unlikely
      |  

Edit: Fixed -Wformat-security, I don't think -Wformat-nonliteral is really fixable though since well, the whole point is that we're formatting non-literals as defined by the translation.
Closes #766.
(Note: The Japanese translation isn't usable with the current default font. Use misaki gothic or GodMode9i's font to test it properly, I'll probably copy the additions I made to GodMode9i back over to here later)","This looks like a good start, but I have to mention a few things:


The GM9 binary is already pretty large and adding more langs on top is only going to make it larger, so decompressing the wanted lang at runtime might help things out. Even a very simple LZ scheme goes a long way. We'd also need to keep all the characters in the font file, but that's just something we have to live with. Making a separate binary for each language does sound doable but it's just not sane. Keeping languages as a loadable binary file (like the fonts) might be a better choice, then each user can pick only the ones they need.


Proper i18n goes beyond just changing the strings, the date format, decimal places, units and other stuff also change. Most importantly, when doing formatted strings the wanted parameter order can change and the ""classic"" printf style formatting can't cope with that, so maybe it'd be a good idea to use positional arguments with formatting (""The format can contain either numbered argument conversion specifications (that is, ""%n$"" and ""*m$)"", from https://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html).


Regardless of how the language data is handled at the binary level, perhaps using a preprocessor written in python (we already depend on it anyways) might be a better way to get things done, dunno. The current method basically assumes you will compile GM9 with a certain fixed language, and that'll be the only lang available.


Dunno if any of these are a real problem, iirc @Epicpkmn11 has already helped with translations of GM9i and can clear up whether any of these will be real issues, or maybe mention others that can pop up.",True,{}
d0k3/GodMode9,https://github.com/d0k3/GodMode9,768,2022-03-22T23:24:50Z,,2022-03-29T21:04:10Z,OPEN,False,233,65,6,https://github.com/Epicpkmn11,WIP: Make translatable,2,[],https://github.com/d0k3/GodMode9/pull/768,https://github.com/Epicpkmn11,4,https://github.com/d0k3/GodMode9/pull/768#issuecomment-1082371805,"Currently only the start of godmode.c is done as an example and with a hardcoded Japanese translation. If this seems good I can continue on it, might take a bit since there are a lot of strings but it's mostly just copy string to .inl, give it a name, use STR_name in the source. Only a couple places have actually needed any real code changes where I changed it to avoid concatenation (always better to use a format string, never assume all languages have the same sentence structure as English) or maybe a couple other similar changes.
For using the strings I did it like TWiLight Menu++/GodMode9i do where you define as string as say PATH_FIRM_TOO_BIG in the .inl file, then to use it you simply do STR_PATH_FIRM_TOO_BIG. If preferred I could also do it like getString(""PATH_FIRM_TO_BIG"") or such, I kinda like the way TWiLight does it because it means you get a compile error if you misspell a string instead of it simply not showing up or having a runtime warning.
I added -Wno-format-nonliteral and -Wno-format-security to the Makefile since they were throwing a lot of warnings and I wasn't sure a way to actually fix them, there might be a better way to fix that though.

source/godmode.c: In function 'BootFirmHandler':
source/godmode.c:62:9: warning: format not a string literal, argument types not checked [-Wformat-nonliteral]
   62 |         if (verbose) ShowPrompt(false, STR_PATH_FIRM_TOO_BIG, pathstr); // unlikely
      |  

Edit: Fixed -Wformat-security, I don't think -Wformat-nonliteral is really fixable though since well, the whole point is that we're formatting non-literals as defined by the translation.
Closes #766.
(Note: The Japanese translation isn't usable with the current default font. Use misaki gothic or GodMode9i's font to test it properly, I'll probably copy the additions I made to GodMode9i back over to here later)","It's absolutely important you make 100% sure no english strings are changed by accident in the process and nothing breaks. For english, this will be a pure under-the-hood-change. Exceptions: If you find typos in the process (of course). Do you have anything to double check the required manual changes or even, automate them?

The strings being #defines helps a bit in that I think, you can't have a typo in a string name to make it not show up, the only way to have issues is if you use the wrong string. For making sure the right strings were used everywhere I can't really think of a simple way to automate that, but I do always make sure to look over everything again before committing.

Also, speaking names are important (which. Meaning: From the strings name, I should be able to somewhat conclude what's behind them. Maybe some scheme, which would convert the strings content to a define would make things easier. With all the strings scattered among all these source files, that may be a bit of work.

For the names how I generally do it is to just take the string but drop any less important words to try keep it a reasonable size. The printf % parameters are probably trickiest thing to make look good, what I've ended up generally doing is N for any number and either what it is (ex. PATH) or just X for strings, that makes reasonably understandable names like COPIED_N_FILES_TO_PATH or whatnot. Could also do like COPIED_LU_FILES_TO_S but that just doesn't look as good imo, I suppose it is a little more clear what the string is though.
And yeah, being understandable in the code so you're not constantly looking back and forth with the definitions is something I try to prioritize. Looking back on what I did so far I'll probably change a couple to be a bit more specific as a few are a little unclear.


The GM9 binary is already pretty large and adding more langs on top is only going to make it larger, so decompressing the wanted lang at runtime might help things out. Even a very simple LZ scheme goes a long way. We'd also need to keep all the characters in the font file, but that's just something we have to live with. Making a separate binary for each language does sound doable but it's just not sane. Keeping languages as a loadable binary file (like the fonts) might be a better choice, then each user can pick only the ones they need.

Since GodMode9 is already shipped in a zip and all decent guides should simply tell people to copy gm9 to the SD root I think storing them in sdmc:/gm9/languages/ or so would probably be the best solution for minimizing impact on the binary size while still bundling languages, would also make it extremely easy for testing new translations and such.
Assuming there's some way to get the system language, Japanese*, English, French, German, Italian, Spanish, Chinese (Simplified)**, Korean**, Dutch, Portuguese, Russian, and Chinese (Traditional)** at minimum should probably be included in some way, though ideally any language people are willing to translate to can be included.
*Requires a large expansion to the font or to be written using only Kana (GodMode9i does both since the 6x10 Kanji are nearly unreadable)
**Requires a large expansion to the font, also I haven't even been able to find 6x10 fonts so will require a separate 8x8 font
Compression would probably help a good bit, though if they're not in the binary itself it might be worth keeping them plain text for ease of use with testing new ones and such, the files might not even exceed 32 KB (typical SD cluster size) anyways, though we'll have to see on that. Might also be worth making a revision to the fonts to LZ compress them since those do get quite large for proper CJK support, I wish I'd thought of that in the first place as I didn't really put any method into the file for making an updated version of the format 😅
It also might be a good idea to prompt the user to select their language immediately on first load (like TWiLight Menu++), since I'm pretty sure using GodMode9 is required to do a region change so that'll avoid getting too many complaints about ""help my GodMode9 is stuck in Japanese"" with all the people who buy cheap Japanese consoles but can't read Japanese. Also makes it easier for people who speak a language the 3DS doesn't support.

Proper i18n goes beyond just changing the strings, the date format, decimal places, units and other stuff also change. Most importantly, when doing formatted strings the wanted parameter order can change and the ""classic"" printf style formatting can't cope with that, so maybe it'd be a good idea to use positional arguments with formatting (""The format can contain either numbered argument conversion specifications (that is, ""%n$"" and ""*m$)"", from https://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html).

first just... wow, this is the first time I've heard about %n$ and... how have I not heard of this before, that's so useful xD. I honestly thought you had to use C++'s bloated modern formatting to get that.
The format string order isn't usually too big a deal, but I'll be sure to try to inform translators of that from now on as there are definitely situations where that'll help. I think it should be fine to just leave that to the translations as it seems you can mix normal args and positional args without issues. For date formats and such it'd probably work to either define the formats as translatable strings or simply use YYYY-MM-DD. For anything not used for file naming and such at least I'll probably try make them translatable. For decimal places I think it should be as simple as having strings for DECIMAL_SEPARATOR and THOUSANDS_SEPARATOR, though I'll have to see how GodMode9 does that.

Regardless of how the language data is handled at the binary level, perhaps using a preprocessor written in python (we already depend on it anyways) might be a better way to get things done, dunno. The current method basically assumes you will compile GM9 with a certain fixed language, and that'll be the only lang available.

How it's done right now is purely because GodMode9 doesn't seem to have any INI or similar parser at the moment so in the interest of a simple example I just put it in the code. My plan is to include just English as language.inl then read the rest from an INI or such. If there's no preferences on file type I'd probably just use INI and it's both very simple and very human readable. Probably just copy Wood's INI parser that TWiLight and such all use but adapt it to C since that's GPL 3 unless there's a better idea.
I guess the other main things I'd say need to be watched out for in my experience are:

Avoid concatenation, never assume all languages have the same sentence structure even in the simplest cases. Colons are probably the safest thing to concatenate onto a string but even then I'd avoid it. (Not such an issue since it's not as common in C, but ex. ""Copy to "" + path would suck in Japanese where it should be ""%sにコピー"")
Avoid ""clever tricks"" to reduce strings, just make multiple strings (ex. ""A %s is inserted"" would be a bad idea in English since if you did ""SD card"" it would need to be an, not a)
Avoid re-using strings in different contexts, some simple ones like ""Yes"" and ""No"" are probably fine, but other words/short phrases may vary slightly even if they don't in English
Either always or never make two strings for plural and non-plural, even if the plural and singular are the same in English. (ex. - and %d more... is the same in English regardless of the number, but in French it's either - et %d autre… or - et %d autres… depending on if the number is 1) If plurals are never accounted for and you just do file(s) that works too, but if you do it right for some strings best to do it for all

I'll make sure everything's good as I go through, just some things I watch for since you asked.",True,{'THUMBS_UP': ['https://github.com/Wolfvak']}
