open-mpi/hwloc,https://github.com/open-mpi/hwloc,152,2016-03-08T14:08:31Z,,2018-03-26T08:02:46Z,OPEN,False,43,5,2,https://github.com/bgoglin,[RFC] Insert right objects before the left ones,2,[],https://github.com/open-mpi/hwloc/pull/152,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/152,"Not really useful as long as we don't have hundreds of children within a single object. The quadratic complexity is negligible on current machines since we usually have tens of children max. Mostly useful for large synthetic topologies so far.
Check whether the first commit in the PR decreases performance before merging.
Otherwise just keep that code here until machines really need that sort of optimization. The Linux backend will need a reverse foreach loop.","Not really useful as long as we don't have hundreds of children within a single object. The quadratic complexity is negligible on current machines since we usually have tens of children max. Mostly useful for large synthetic topologies so far.
Check whether the first commit in the PR decreases performance before merging.
Otherwise just keep that code here until machines really need that sort of optimization. The Linux backend will need a reverse foreach loop.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,189,2016-05-31T23:42:06Z,2016-06-01T08:07:36Z,2016-06-01T14:01:02Z,CLOSED,False,11,3,1,https://github.com/jsquyres,hwloc.m4: only check for hwloc in non-embedded mode,1,[],https://github.com/open-mpi/hwloc/pull/189,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/189,"This fixes open-mpi/ompi#1732: i.e., the case where the outer project has its own check for <valgrind/valgrind.h>, but also supplements CPPFLAGS (to find Valgrind's header files) before doing that check.
Signed-off-by: Jeff Squyres jsquyres@cisco.com
@bgoglin If you're ok with this, I'll make PR's to the release branches.","This fixes open-mpi/ompi#1732: i.e., the case where the outer project has its own check for <valgrind/valgrind.h>, but also supplements CPPFLAGS (to find Valgrind's header files) before doing that check.
Signed-off-by: Jeff Squyres jsquyres@cisco.com
@bgoglin If you're ok with this, I'll make PR's to the release branches.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,191,2016-06-26T10:56:35Z,,2017-12-11T13:26:04Z,OPEN,False,81,6,7,https://github.com/bgoglin,[RFC] stop distributing some tests,5,['Build'],https://github.com/open-mpi/hwloc/pull/191,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/191,"Our release tarballs are currently about 4MB, with about 700kB of tests/hwloc/linux tarballs. Not too bad. But things are expected to get worse with KNL tarballs for different MCDRAM/Clustering configs (100kB each), newer x86 CPUID tarballs, netloc stuff, etc.
This PR makes tests/hwloc/{linux,xml,x86}/ and utils/hwloc/test-hwloc-dump-hwdata/ support running optional tests under an ""extra"" subdirectory. Those tests would be in GIT but not in tarballs.
The same code could be used to move tests to another repository if git clones become too heavy (currently 35MB). Something like cloning hwloc-extra/ at the root the main hwloc clone and having tests subdirectories tests/hwloc/linux run additional tests in hwloc-extra/tests/hwloc/linux. We would warn at the end of configure when building from GIT without that extra repository.","Our release tarballs are currently about 4MB, with about 700kB of tests/hwloc/linux tarballs. Not too bad. But things are expected to get worse with KNL tarballs for different MCDRAM/Clustering configs (100kB each), newer x86 CPUID tarballs, netloc stuff, etc.
This PR makes tests/hwloc/{linux,xml,x86}/ and utils/hwloc/test-hwloc-dump-hwdata/ support running optional tests under an ""extra"" subdirectory. Those tests would be in GIT but not in tarballs.
The same code could be used to move tests to another repository if git clones become too heavy (currently 35MB). Something like cloning hwloc-extra/ at the root the main hwloc clone and having tests subdirectories tests/hwloc/linux run additional tests in hwloc-extra/tests/hwloc/linux. We would warn at the end of configure when building from GIT without that extra repository.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,191,2016-06-26T10:56:35Z,,2017-12-11T13:26:04Z,OPEN,False,81,6,7,https://github.com/bgoglin,[RFC] stop distributing some tests,5,['Build'],https://github.com/open-mpi/hwloc/pull/191,https://github.com/jsquyres,2,https://github.com/open-mpi/hwloc/pull/191#issuecomment-228600941,"Our release tarballs are currently about 4MB, with about 700kB of tests/hwloc/linux tarballs. Not too bad. But things are expected to get worse with KNL tarballs for different MCDRAM/Clustering configs (100kB each), newer x86 CPUID tarballs, netloc stuff, etc.
This PR makes tests/hwloc/{linux,xml,x86}/ and utils/hwloc/test-hwloc-dump-hwdata/ support running optional tests under an ""extra"" subdirectory. Those tests would be in GIT but not in tarballs.
The same code could be used to move tests to another repository if git clones become too heavy (currently 35MB). Something like cloning hwloc-extra/ at the root the main hwloc clone and having tests subdirectories tests/hwloc/linux run additional tests in hwloc-extra/tests/hwloc/linux. We would warn at the end of configure when building from GIT without that extra repository.","Does the size of the tarball and/or git clone really matter?
Random data point: out of the ~7,500 MP3s in my music collection, the average size is 4.2MB.  The Open MPI web site reports that the hwloc 1.11.3 bz2 tarball is 4.11MB.  Meaning: hwloc is still smaller than an average MP3 file.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,191,2016-06-26T10:56:35Z,,2017-12-11T13:26:04Z,OPEN,False,81,6,7,https://github.com/bgoglin,[RFC] stop distributing some tests,5,['Build'],https://github.com/open-mpi/hwloc/pull/191,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/191#issuecomment-228681191,"Our release tarballs are currently about 4MB, with about 700kB of tests/hwloc/linux tarballs. Not too bad. But things are expected to get worse with KNL tarballs for different MCDRAM/Clustering configs (100kB each), newer x86 CPUID tarballs, netloc stuff, etc.
This PR makes tests/hwloc/{linux,xml,x86}/ and utils/hwloc/test-hwloc-dump-hwdata/ support running optional tests under an ""extra"" subdirectory. Those tests would be in GIT but not in tarballs.
The same code could be used to move tests to another repository if git clones become too heavy (currently 35MB). Something like cloning hwloc-extra/ at the root the main hwloc clone and having tests subdirectories tests/hwloc/linux run additional tests in hwloc-extra/tests/hwloc/linux. We would warn at the end of configure when building from GIT without that extra repository.","Not sure about the git clone size.
Yes, the tarball size matters. There are people with slow internet access. And there are people who care about wasting power for downloading useless tests that they won't run :)
The current size is OK. But there are 15 possible KNL configs, which would add 180kB each. Testing all of them before a release is good. But that testing all of them on many different machines isn't very useful. The issue will get bigger as we add newer bigger sysfs tarballs (their size seems to increase between in n*log(n) with n=number of cores). And much bigger for netloc dumps of IB fabrics.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,192,2016-06-26T12:24:53Z,2018-03-21T16:03:55Z,2018-03-21T16:03:55Z,CLOSED,False,3,2,1,https://github.com/jsquyres,"plugins.h: fix ""might be uninitialized"" compiler warning",1,['minor'],https://github.com/open-mpi/hwloc/pull/192,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/192,"This commit fixes a warning from clang/OS X:
  CC       topology.lo
In file included from /Users/jsquyres/git/hwloc/include/private/components.h:19:0,
                 from /Users/jsquyres/git/hwloc/include/private/private.h:28,
                 from topology.c:29:
topology.c: In function ‘hwloc_topology_load’:
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:439:6: warning: ‘filter’ may be used uninitialized in this function [-Wmaybe-uninitialized]
   if (filter == HWLOC_TYPE_FILTER_KEEP_IMPORTANT) {
      ^
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:435:28: note: ‘filter’ was declared here
   enum hwloc_type_filter_e filter;
                            ^

Which is interesting, because the issue is in a .h file, but it only shows up when compiling one particular .c file (because the function in question that might initialize the variable in question is in that .c file).
In short:
hwloc_topology_get_type_filter(topology, type, &filter);
may actually leave filter uninitialized if type is out of range.  This commit simply ensures to initialize filter to NONE before calling hwloc_topology_get_type_filter().
Signed-off-by: Jeff Squyres jsquyres@cisco.com","This commit fixes a warning from clang/OS X:
  CC       topology.lo
In file included from /Users/jsquyres/git/hwloc/include/private/components.h:19:0,
                 from /Users/jsquyres/git/hwloc/include/private/private.h:28,
                 from topology.c:29:
topology.c: In function ‘hwloc_topology_load’:
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:439:6: warning: ‘filter’ may be used uninitialized in this function [-Wmaybe-uninitialized]
   if (filter == HWLOC_TYPE_FILTER_KEEP_IMPORTANT) {
      ^
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:435:28: note: ‘filter’ was declared here
   enum hwloc_type_filter_e filter;
                            ^

Which is interesting, because the issue is in a .h file, but it only shows up when compiling one particular .c file (because the function in question that might initialize the variable in question is in that .c file).
In short:
hwloc_topology_get_type_filter(topology, type, &filter);
may actually leave filter uninitialized if type is out of range.  This commit simply ensures to initialize filter to NONE before calling hwloc_topology_get_type_filter().
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,192,2016-06-26T12:24:53Z,2018-03-21T16:03:55Z,2018-03-21T16:03:55Z,CLOSED,False,3,2,1,https://github.com/jsquyres,"plugins.h: fix ""might be uninitialized"" compiler warning",1,['minor'],https://github.com/open-mpi/hwloc/pull/192,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/192#issuecomment-374995085,"This commit fixes a warning from clang/OS X:
  CC       topology.lo
In file included from /Users/jsquyres/git/hwloc/include/private/components.h:19:0,
                 from /Users/jsquyres/git/hwloc/include/private/private.h:28,
                 from topology.c:29:
topology.c: In function ‘hwloc_topology_load’:
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:439:6: warning: ‘filter’ may be used uninitialized in this function [-Wmaybe-uninitialized]
   if (filter == HWLOC_TYPE_FILTER_KEEP_IMPORTANT) {
      ^
/Users/jsquyres/git/hwloc/include/hwloc/plugins.h:435:28: note: ‘filter’ was declared here
   enum hwloc_type_filter_e filter;
                            ^

Which is interesting, because the issue is in a .h file, but it only shows up when compiling one particular .c file (because the function in question that might initialize the variable in question is in that .c file).
In short:
hwloc_topology_get_type_filter(topology, type, &filter);
may actually leave filter uninitialized if type is out of range.  This commit simply ensures to initialize filter to NONE before calling hwloc_topology_get_type_filter().
Signed-off-by: Jeff Squyres jsquyres@cisco.com",Looks like I pushed this to master 21 months ago as bd3bc91,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,193,2016-06-26T13:32:07Z,2016-06-26T17:39:33Z,2016-06-27T21:03:11Z,MERGED,True,14,2,1,https://github.com/jsquyres,"docs: print helpful error when ""make dist"" should fail",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/193,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/193,"If you try to run ""make dist"" when you don't have all the right
documentation generation tools, you currently get a misleading error
about a file being missing.  This commit adds a helpful message
specifically telling you that you are missing some tools that hwloc
needs, and therefore ""make dist"" will fail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","If you try to run ""make dist"" when you don't have all the right
documentation generation tools, you currently get a misleading error
about a file being missing.  This commit adds a helpful message
specifically telling you that you are missing some tools that hwloc
needs, and therefore ""make dist"" will fail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,193,2016-06-26T13:32:07Z,2016-06-26T17:39:33Z,2016-06-27T21:03:11Z,MERGED,True,14,2,1,https://github.com/jsquyres,"docs: print helpful error when ""make dist"" should fail",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/193,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/193#issuecomment-228625091,"If you try to run ""make dist"" when you don't have all the right
documentation generation tools, you currently get a misleading error
about a file being missing.  This commit adds a helpful message
specifically telling you that you are missing some tools that hwloc
needs, and therefore ""make dist"" will fail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","@jsquyres Can you look/try commit bgoglin@d6b8f4e?
I had failures in jenkins when building with VPATH from a tarball with prebuilt doc on systems without doxygen. Adding !HWLOC_INSTALL_DOCS means that the error only appears when doxygen isn't available and there aren't prebuilt docs.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,193,2016-06-26T13:32:07Z,2016-06-26T17:39:33Z,2016-06-27T21:03:11Z,MERGED,True,14,2,1,https://github.com/jsquyres,"docs: print helpful error when ""make dist"" should fail",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/193,https://github.com/jsquyres,3,https://github.com/open-mpi/hwloc/pull/193#issuecomment-228873373,"If you try to run ""make dist"" when you don't have all the right
documentation generation tools, you currently get a misleading error
about a file being missing.  This commit adds a helpful message
specifically telling you that you are missing some tools that hwloc
needs, and therefore ""make dist"" will fail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Am checking...
Do you want a github webhook call to your Jenkins (so that it can build pull requests, etc.)?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,193,2016-06-26T13:32:07Z,2016-06-26T17:39:33Z,2016-06-27T21:03:11Z,MERGED,True,14,2,1,https://github.com/jsquyres,"docs: print helpful error when ""make dist"" should fail",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/193,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/193#issuecomment-228874669,"If you try to run ""make dist"" when you don't have all the right
documentation generation tools, you currently get a misleading error
about a file being missing.  This commit adds a helpful message
specifically telling you that you are missing some tools that hwloc
needs, and therefore ""make dist"" will fail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Yes, I was going to look at this but our Jenkins platform is under maintenance today.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,196,2016-07-12T16:59:22Z,2016-07-12T18:07:15Z,2016-07-12T18:07:18Z,CLOSED,False,2,2,1,https://github.com/jsquyres,bind.c: enusre p is always initialized,1,"['bug', 'minor']",https://github.com/open-mpi/hwloc/pull/196,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/196,"Fix compiler warning that p may be uninitialized.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Fix compiler warning that p may be uninitialized.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,196,2016-07-12T16:59:22Z,2016-07-12T18:07:15Z,2016-07-12T18:07:18Z,CLOSED,False,2,2,1,https://github.com/jsquyres,bind.c: enusre p is always initialized,1,"['bug', 'minor']",https://github.com/open-mpi/hwloc/pull/196,https://github.com/jsquyres,2,https://github.com/open-mpi/hwloc/pull/196#issuecomment-232130212,"Fix compiler warning that p may be uninitialized.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Disregard this PR, my v1.11 branch was accidentally way behind...",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,198,2016-07-13T13:47:44Z,2016-07-13T13:54:41Z,2016-07-13T13:54:43Z,MERGED,True,2,0,1,https://github.com/jsquyres,hwloc.m4: fix compiler warning in embedded mode,1,['bug'],https://github.com/open-mpi/hwloc/pull/198,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/198,"Ensure that HAVE_DECL_RUNNING_ON_VALGRIND is always defined, even when
we're in embedded mode.  Fixes #197.
Signed-off-by: Jeff Squyres jsquyres@cisco.com
@bgoglin Have a look","Ensure that HAVE_DECL_RUNNING_ON_VALGRIND is always defined, even when
we're in embedded mode.  Fixes #197.
Signed-off-by: Jeff Squyres jsquyres@cisco.com
@bgoglin Have a look",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,198,2016-07-13T13:47:44Z,2016-07-13T13:54:41Z,2016-07-13T13:54:43Z,MERGED,True,2,0,1,https://github.com/jsquyres,hwloc.m4: fix compiler warning in embedded mode,1,['bug'],https://github.com/open-mpi/hwloc/pull/198,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/198#issuecomment-232360390,"Ensure that HAVE_DECL_RUNNING_ON_VALGRIND is always defined, even when
we're in embedded mode.  Fixes #197.
Signed-off-by: Jeff Squyres jsquyres@cisco.com
@bgoglin Have a look",Didn't test but looks fine.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,199,2016-07-13T13:51:22Z,2016-10-26T08:30:18Z,2016-10-26T08:30:18Z,CLOSED,False,2,4,2,https://github.com/jsquyres,netloc: fix minor compiler warnings,1,[],https://github.com/open-mpi/hwloc/pull/199,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/199,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Signed-off-by: Jeff Squyres jsquyres@cisco.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,199,2016-07-13T13:51:22Z,2016-10-26T08:30:18Z,2016-10-26T08:30:18Z,CLOSED,False,2,4,2,https://github.com/jsquyres,netloc: fix minor compiler warnings,1,[],https://github.com/open-mpi/hwloc/pull/199,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/199#issuecomment-232362053,Signed-off-by: Jeff Squyres jsquyres@cisco.com,I'd rather keep this PR open until the big netloc rework lands in master. I can't be sure we'll still need this code.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,199,2016-07-13T13:51:22Z,2016-10-26T08:30:18Z,2016-10-26T08:30:18Z,CLOSED,False,2,4,2,https://github.com/jsquyres,netloc: fix minor compiler warnings,1,[],https://github.com/open-mpi/hwloc/pull/199,https://github.com/jsquyres,3,https://github.com/open-mpi/hwloc/pull/199#issuecomment-232362423,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Cool.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,199,2016-07-13T13:51:22Z,2016-10-26T08:30:18Z,2016-10-26T08:30:18Z,CLOSED,False,2,4,2,https://github.com/jsquyres,netloc: fix minor compiler warnings,1,[],https://github.com/open-mpi/hwloc/pull/199,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/199#issuecomment-256282579,Signed-off-by: Jeff Squyres jsquyres@cisco.com,These lines don't exist anymore in the new netloc revamp that was just pushed to master. Thanks ;),True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,1,https://github.com/open-mpi/hwloc/pull/200,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,2,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234297857,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"@bgoglin
I'm using hwloc in our project here:
https://github.com/geopm/geopm
We are getting a segfault in our tests on fedora 24:
https://build.opensuse.org/build/home:cmcantalupo/Fedora_24/x86_64/geopm/_log
Electric fence turned up the issue fixed by this patch and I think this is causing the segmentation fault in our tests.  If the patch looks good, please accept the pull request.
The error can be reproduced with the following command if hwloc is installed with the prefix $HOME/build/hwloc and the command is run in the git root.
LD_PRELOAD=/usr/lib64/libefence.so LD_LIBRARY_PATH=$HOME/build/hwloc/lib:$LD_LIBRARY_PATH tests/hwloc/.libs/hwloc_topology_dup
Thanks,
Chris",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234308896,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"Why does malloc(0) fail on Fedora 24? My glibc manual says that malloc(0) is valid.
Anyway, the patch is fine, but I don't see why it would cause a segfault. Your link to build.opensuse.org is unaccessible to anonymous users unfortunately.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,4,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234320575,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"Agreed that malloc(0) is not strictly invalid, however, is it possible that the object created in this way is misused later in the code?  I'm just validating that the patch fixes the problem I am seeing on the geopm fedora 24 tests in OBS.  I'll get back here when I have the result.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,5,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234334336,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"The patch does not change the geopm test failure on fedora 24, but it does stop electric fence from complaining.  Thanks for the feedback.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234335024,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,Can you send more details about how to reproduce the failure or make the build log public ?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,7,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234352291,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"Until I can prove otherwise I will assume the failure I'm looking into is due to a bug in geopm.  The hwloc tests only fail when electric fence is monitoring for malloc(0) occurrences.  The patch provided by this pull request does alleviate this issue, but as you mentioned, malloc(0) is not necessarily incorrect.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234389829,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"I applied your patch to master and v1.11 branches, so I am closing this PR. If you find a deeper issue causing the GEOPM segfault, feel free to reopen and/or open a new PR or issue.
As a thank you, I added GEOPM to the list of hwloc users on the website :)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,200,2016-07-21T15:46:55Z,2016-07-21T21:28:56Z,2016-07-22T19:34:39Z,CLOSED,False,11,9,1,https://github.com/cmcantalupo,Do not allocate zero size buffer.,1,[],https://github.com/open-mpi/hwloc/pull/200,https://github.com/cmcantalupo,9,https://github.com/open-mpi/hwloc/pull/200#issuecomment-234635747,Signed-off-by: Christopher M. Cantalupo christopher.m.cantalupo@intel.com,"Thanks!  Found the bug, in the end it was a bad interaction between googletest 1.7 and gcc6:
google/googletest#705
The fix is here:
cmcantalupo/geopm@bc1ba0b",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bryonglodencissp,1,https://github.com/open-mpi/hwloc/pull/202,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/202#issuecomment-238339903,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","Thanks, I'll apply this. That said, there are many places where we don't check the malloc return value anyway...
Does your cppcheck tool find any other issue in hwloc?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bryonglodencissp,3,https://github.com/open-mpi/hwloc/pull/202#issuecomment-238347035,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","Greetings @bgoglin. My tool has found 14 other instances of the same error...
[hwloc/topology-linux.c:2450]: (error) Common realloc mistake: 'ret' nulled but not freed upon failure
[hwloc/topology-linux.c:3679]: (error) Common realloc mistake: 'Lprocs' nulled but not freed upon failure
[hwloc/topology-solaris.c:526]: (error) Common realloc mistake: 'Pproc' nulled but not freed upon failure
[hwloc/topology-solaris.c:538]: (error) Common realloc mistake: 'Lproc' nulled but not freed upon failure
[hwloc/topology-solaris.c:587]: (error) Common realloc mistake: 'Lpkg' nulled but not freed upon failure
[hwloc/topology-solaris.c:633]: (error) Common realloc mistake: 'Lcore' nulled but not freed upon failure
[hwloc/topology-synthetic.c:995]: (error) Common realloc mistake: 'loops' nulled but not freed upon failure
[hwloc/topology-windows.c:756]: (error) Common realloc mistake: 'procInfo' nulled but not freed upon failure
[hwloc/topology-windows.c:875]: (error) Common realloc mistake: 'procInfoTotal' nulled but not freed upon failure
[hwloc/topology-xml-nolibxml.c:353]: (error) Common realloc mistake: 'buffer' nulled but not freed upon failure
[hwloc/topology-xml-nolibxml.c:687]: (error) Common realloc mistake: 'buffer' nulled but not freed upon failure
[hwloc/topology-xml-nolibxml.c:779]: (error) Common realloc mistake: 'buffer' nulled but not freed upon failure
[hwloc/topology.c:290]: (error) Common realloc mistake: 'infos' nulled but not freed upon failure
[hwloc/topology.c:320]: (error) Common realloc mistake: 'dst_infos' nulled but not freed upon failure

I believe it is a good idea to try fixing one before I trying anymore of them.  This way, if there was a problem with collaboration, at least I wouldn't sacrifice too much time.  Plus, I believe that sometimes people download the tool for themselves and use it to fix error themselves. Unfortunately, one of the obstacles on my end is that I'm unable to test my code changes. For example, when I changed this one file, topology-linux.c, and I ran the build process:
./autogen.sh
./configure
make
make install
lstopo

my system, an iMac running OS X El Capitan, just didn't compile the file. I'm not sure I know enough to know why it didn't compile, I just know that when I introduced a programming error into the file, and then rerun the previous commands, I wasn't presented with a build error (which is what I was expecting). I presume it didn't compile this ""linux"" file because I'm running a different OS.
All that being said. I'm happy to dive in and start fixing some of these, but I believe I need someone else to review my code changes (for my sanity and yours)!!!
For what it's worth, this tool also found this:
[hwloc/topology-solaris.c:431]: (error) Memory leak: glob_lgrps
I haven't look at the file yet, but these are usually easy to fix. I just wanted to get this comment out while I still had your attention 👍",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/202#issuecomment-238720654,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","@bryongloden I already have patches in my local tree for most realloc() calls including that one in nolibxml.c, I'll push everything to master and v1.11 tomorrow after more testing.",True,{'THUMBS_UP': ['https://github.com/bryonglodencissp']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bryonglodencissp,5,https://github.com/open-mpi/hwloc/pull/202#issuecomment-238723313,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","Bonjour @bgoglin! Sorry I don't speak French, so bear with me through my English 👍
I was interested in testing the idea in your comment from #204. Namely, updating a branch via the GitHub GUI. Now that I know that works, I'll stop patching realloc() errors in the hwloc/hwloc directory 👍
Also, when you asked earlier if my tool found any more errors in hwloc, did you mean specifically in the hwloc/hwloc directory? Because that is/was the way I interpreted your question.
I've run the tool now across the entire hwloc repository and I've discovered errors/bugs inside hwloc/netloc, hwloc/tests, and hwloc/utils.
If you ping me tomorrow after you push your local edits, I'll sync up with master, rerun my tool, and open a new issue that includes a full list of all the errors I see. I believe this is the most efficient way for me to report the bugs to you (otherwise just download and build cppcheck yourself... and I'll go away) 👍",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,202,2016-08-08T18:19:19Z,2016-08-10T09:04:56Z,2016-08-10T09:04:56Z,CLOSED,False,39,16,2,https://github.com/bryonglodencissp,Properly handle realloc() failures,4,[],https://github.com/open-mpi/hwloc/pull/202,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/202#issuecomment-238808129,"[hwloc/topology-linux.c:1787]: (error) Common realloc mistake: 'maps' nulled but not freed upon failure
Passing one pointer into realloc() and assigning the result directly into that same pointer variable can cause a memory leak if the reallocation fails, because the original allocation will still exist. The correct way to do this is to use a temporary pointer variable.
Credit 1: http://stackoverflow.com/a/11548901
Credit 2: RRZE-HPC/likwid#44
Found by https://github.com/bryongloden/cppcheck","I pushed all realloc() fixes.
Some realloc() remain unfixed in the netloc lib and utils but this code is going to be deeply revamped, so fixing realloc() there is useless right now.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,203,2016-08-08T19:54:54Z,2016-08-08T21:21:55Z,2016-08-08T21:59:58Z,CLOSED,False,2,0,1,https://github.com/bryonglodencissp,Update topology-solaris.c,1,[],https://github.com/open-mpi/hwloc/pull/203,https://github.com/bryonglodencissp,1,https://github.com/open-mpi/hwloc/pull/203,"On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck","On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,203,2016-08-08T19:54:54Z,2016-08-08T21:21:55Z,2016-08-08T21:59:58Z,CLOSED,False,2,0,1,https://github.com/bryonglodencissp,Update topology-solaris.c,1,[],https://github.com/open-mpi/hwloc/pull/203,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/203#issuecomment-238358394,"On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck",Looks good. I am trying to install valgrind on my Solaris Jenkins slave for actual testing.,True,{'THUMBS_UP': ['https://github.com/bryonglodencissp']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,203,2016-08-08T19:54:54Z,2016-08-08T21:21:55Z,2016-08-08T21:59:58Z,CLOSED,False,2,0,1,https://github.com/bryonglodencissp,Update topology-solaris.c,1,[],https://github.com/open-mpi/hwloc/pull/203,https://github.com/bryonglodencissp,3,https://github.com/open-mpi/hwloc/pull/203#issuecomment-238389763,"On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck","Hi @bgoglin, curious why you didn't merge my commit? Or maybe you did, but it just doesn't appear that way on the GitHub GUI. I'm asking because I've got an internal tracking system I'm using to classify my commits in categories like False Positives, Merges, etc. Because this doesn't appear to be merged, I'll mark it as Kudos. I was just wondering why because I may get the itch to fix some of the other errors I mentioned in #202. It's always nice to see a merge, but the name of the game is bug bounty hunting, and I'm ultimately in it for the Kudos. Cheers.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,203,2016-08-08T19:54:54Z,2016-08-08T21:21:55Z,2016-08-08T21:59:58Z,CLOSED,False,2,0,1,https://github.com/bryonglodencissp,Update topology-solaris.c,1,[],https://github.com/open-mpi/hwloc/pull/203,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/203#issuecomment-238390140,"On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck",I amended the commit message before pushing it.,True,{'THUMBS_UP': ['https://github.com/bryonglodencissp']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,203,2016-08-08T19:54:54Z,2016-08-08T21:21:55Z,2016-08-08T21:59:58Z,CLOSED,False,2,0,1,https://github.com/bryonglodencissp,Update topology-solaris.c,1,[],https://github.com/open-mpi/hwloc/pull/203,https://github.com/bryonglodencissp,5,https://github.com/open-mpi/hwloc/pull/203#issuecomment-238390966,"On line #431 'glob_lgrps' has a memory leak, which is an error. However, I'm not able to test this, so I'd appreciate a second pair of eyes, i.e. code review.
Found by https://github.com/bryongloden/cppcheck",I learn something new everyday. Thank you 👍,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,204,2016-08-08T23:47:55Z,2016-08-09T07:56:30Z,2016-08-09T07:58:05Z,CLOSED,False,3,2,1,https://github.com/bryonglodencissp,Update topology-synthetic.c,1,[],https://github.com/open-mpi/hwloc/pull/204,https://github.com/bryonglodencissp,1,https://github.com/open-mpi/hwloc/pull/204,"Hey there @bgoglin, I am able to test this locally, and my patch is building. This is one of the 14 realloc() errors I mentioned in #202. I realize this may not be the most efficient way to propose a file change, but I'm unable to edit https://github.com/open-mpi/hwloc/blob/master/hwloc/topology-synthetic.c and amend it to #202 using the website GUI. If this is an issue, give me a shout out, and maybe we can come up with something different for future patches related to #202.","Hey there @bgoglin, I am able to test this locally, and my patch is building. This is one of the 14 realloc() errors I mentioned in #202. I realize this may not be the most efficient way to propose a file change, but I'm unable to edit https://github.com/open-mpi/hwloc/blob/master/hwloc/topology-synthetic.c and amend it to #202 using the website GUI. If this is an issue, give me a shout out, and maybe we can come up with something different for future patches related to #202.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,204,2016-08-08T23:47:55Z,2016-08-09T07:56:30Z,2016-08-09T07:58:05Z,CLOSED,False,3,2,1,https://github.com/bryonglodencissp,Update topology-synthetic.c,1,[],https://github.com/open-mpi/hwloc/pull/204,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/204#issuecomment-238481067,"Hey there @bgoglin, I am able to test this locally, and my patch is building. This is one of the 14 realloc() errors I mentioned in #202. I realize this may not be the most efficient way to propose a file change, but I'm unable to edit https://github.com/open-mpi/hwloc/blob/master/hwloc/topology-synthetic.c and amend it to #202 using the website GUI. If this is an issue, give me a shout out, and maybe we can come up with something different for future patches related to #202.","You can update a PR by pushing/updating the corresponding remote branch on github.
I fixed this issue after adding a missing line to your patch. I am looking at the remaining fixes for #202 now.
Thanks.",True,{'THUMBS_UP': ['https://github.com/bryonglodencissp']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,210,2016-09-20T09:02:13Z,2016-09-26T20:34:04Z,2016-09-26T20:34:21Z,MERGED,True,11611,15254,135,https://github.com/bgoglin,[RFC] New distances API for hwloc 2.0,16,['API'],https://github.com/open-mpi/hwloc/pull/210,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/210,"Everything is in the new dedicated header:
https://github.com/open-mpi/hwloc/blob/distances/include/hwloc/distances.h
The main reason for this big change is that the old API was a pain in the internal implementation. Things are much more simple now.
Main changes:

Distances are not public structures attached to the topology anymore. They have to be explicitly queried with hwloc_distances_get() functions.
The public API manipulates objects (instead of indexes that can change, be duplicated, or be missing in corner cases).
Distance values are uint64_t instead of floats. Users didn't like floats. Values are integer in the vast majority of cases (NUMA distances reported by the BIOS). uint64_t should give a wide-enough range in case users really need to input custom values. We could also support both integers and floats but I am not sure it's really useful.

The main drawback is that hwloc 1.x won't be able to import distances from XMLs generated by hwloc 2.x. This may be a problem if two components such as the resource manager and the MPI implementation use different hwloc releases. One idea is to add a flag to hwloc_topology_export_xml() to specify whether we want to export for hwloc 1.x or 2.x. Still to be discussed.","Everything is in the new dedicated header:
https://github.com/open-mpi/hwloc/blob/distances/include/hwloc/distances.h
The main reason for this big change is that the old API was a pain in the internal implementation. Things are much more simple now.
Main changes:

Distances are not public structures attached to the topology anymore. They have to be explicitly queried with hwloc_distances_get() functions.
The public API manipulates objects (instead of indexes that can change, be duplicated, or be missing in corner cases).
Distance values are uint64_t instead of floats. Users didn't like floats. Values are integer in the vast majority of cases (NUMA distances reported by the BIOS). uint64_t should give a wide-enough range in case users really need to input custom values. We could also support both integers and floats but I am not sure it's really useful.

The main drawback is that hwloc 1.x won't be able to import distances from XMLs generated by hwloc 2.x. This may be a problem if two components such as the resource manager and the MPI implementation use different hwloc releases. One idea is to add a flag to hwloc_topology_export_xml() to specify whether we want to export for hwloc 1.x or 2.x. Still to be discussed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,210,2016-09-20T09:02:13Z,2016-09-26T20:34:04Z,2016-09-26T20:34:21Z,MERGED,True,11611,15254,135,https://github.com/bgoglin,[RFC] New distances API for hwloc 2.0,16,['API'],https://github.com/open-mpi/hwloc/pull/210,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/210#issuecomment-249431448,"Everything is in the new dedicated header:
https://github.com/open-mpi/hwloc/blob/distances/include/hwloc/distances.h
The main reason for this big change is that the old API was a pain in the internal implementation. Things are much more simple now.
Main changes:

Distances are not public structures attached to the topology anymore. They have to be explicitly queried with hwloc_distances_get() functions.
The public API manipulates objects (instead of indexes that can change, be duplicated, or be missing in corner cases).
Distance values are uint64_t instead of floats. Users didn't like floats. Values are integer in the vast majority of cases (NUMA distances reported by the BIOS). uint64_t should give a wide-enough range in case users really need to input custom values. We could also support both integers and floats but I am not sure it's really useful.

The main drawback is that hwloc 1.x won't be able to import distances from XMLs generated by hwloc 2.x. This may be a problem if two components such as the resource manager and the MPI implementation use different hwloc releases. One idea is to add a flag to hwloc_topology_export_xml() to specify whether we want to export for hwloc 1.x or 2.x. Still to be discussed.","@ggouaillardet IIRC you wondered why we used floats for distances. FWIW, we'll use uint64_t instead of float in hwloc 2.0.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,212,2016-10-21T11:55:05Z,2017-02-16T14:13:08Z,2017-02-16T14:19:06Z,MERGED,True,414,39,16,https://github.com/bgoglin,Get the list of allowed resources from thissystem,3,[],https://github.com/open-mpi/hwloc/pull/212,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/212,"XML is useful for improving discovery time, but it doesn't work
when the XML should be adapted to different cgroups for different
jobs on the same machine.
The new THISSYSTEM_ALLOWED_RESOURCES flag (combined with IS_THISSYSTEM) (or the corresponding env var) loads normal XML or synthetic and apply cpu/cgroup restrictions that the actual machine reports on Linux (and BGQ).","XML is useful for improving discovery time, but it doesn't work
when the XML should be adapted to different cgroups for different
jobs on the same machine.
The new THISSYSTEM_ALLOWED_RESOURCES flag (combined with IS_THISSYSTEM) (or the corresponding env var) loads normal XML or synthetic and apply cpu/cgroup restrictions that the actual machine reports on Linux (and BGQ).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/216,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com","Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/jsquyres,2,https://github.com/open-mpi/hwloc/pull/216#issuecomment-258144982,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com","@bgoglin Give this a quick review and make sure it works for you, then we can merge it and see if it works tonight.  If so, we can spread it to the relevant release branches.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/216#issuecomment-258147543,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com","I don't see anything bad. I don't use that script outside of your nightly script, so go ahead and test it tonight.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/216#issuecomment-258595656,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com","For some reason, it didn't run last night?!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/jsquyres,5,https://github.com/open-mpi/hwloc/pull/216#issuecomment-258621331,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com","Ok, I just ran it manually and the output looks good:
https://www.open-mpi.org/software/hwloc/nightly/master/
I think I fixed the problem that prevented it from running.  Also, we still seem to not be getting emails from the build server -- haven't figured that out yet.  ☹️
But the change looks good here, so I'll PR the convention to v1.11.  Do you want it on other branches, too?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,216,2016-11-03T13:41:04Z,2016-11-03T13:54:59Z,2016-11-05T16:20:58Z,MERGED,True,19,14,1,https://github.com/jsquyres,make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/216,https://github.com/jsquyres,6,https://github.com/open-mpi/hwloc/pull/216#issuecomment-258622086,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com",PR filed for v1.11: #218,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,217,2016-11-04T23:55:02Z,2016-11-05T12:47:05Z,2016-11-05T12:47:05Z,CLOSED,False,2,1,1,https://github.com/cota,Just a couple of .gitignore fixes. Thanks!,2,[],https://github.com/open-mpi/hwloc/pull/217,https://github.com/cota,1,https://github.com/open-mpi/hwloc/pull/217,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,217,2016-11-04T23:55:02Z,2016-11-05T12:47:05Z,2016-11-05T12:47:05Z,CLOSED,False,2,1,1,https://github.com/cota,Just a couple of .gitignore fixes. Thanks!,2,[],https://github.com/open-mpi/hwloc/pull/217,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/217#issuecomment-258609411,,"I merged those into a single commit with additional updates and pushed to master (with the wrong PR id), thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,218,2016-11-05T16:20:31Z,2016-11-05T17:38:40Z,2016-11-05T17:41:15Z,MERGED,True,19,14,1,https://github.com/jsquyres,v1.11: make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/218,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/218,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com
(cherry picked from commit db9eb54)","Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com
(cherry picked from commit db9eb54)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,218,2016-11-05T16:20:31Z,2016-11-05T17:38:40Z,2016-11-05T17:41:15Z,MERGED,True,19,14,1,https://github.com/jsquyres,v1.11: make_snapshot_tarball: update nightly filename,1,['enhancement'],https://github.com/open-mpi/hwloc/pull/218,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/218#issuecomment-258628888,"Nightly snapshots will now be named:
hwloc-${BRANCHNAME}-${YYYYMMDDHHMM}-${SHORTHASH}.tar.${COMPRESSION}.
Essentially cherry-picked from Open MPI:

open-mpi/ompi@78d1e4e
open-mpi/ompi@a47ad86

Signed-off-by: Jeff Squyres jsquyres@cisco.com
(cherry picked from commit db9eb54)","Thanks, I pushed this as well as the followup fix and my jenkins job update.
Previous stable branches are too old now (last 1.10 release in 2015/01).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,222,2017-01-24T14:30:32Z,2017-02-09T16:26:32Z,2018-02-27T22:15:17Z,CLOSED,False,18,2,2,https://github.com/jyvet,V1.11 coverity,5,[],https://github.com/open-mpi/hwloc/pull/222,https://github.com/jyvet,1,https://github.com/open-mpi/hwloc/pull/222,"Hi,
Please find a few patches for fixing some minor issues.
These errors were detected by a Static Code Analysis tool (Coverity).
Thanks","Hi,
Please find a few patches for fixing some minor issues.
These errors were detected by a Static Code Analysis tool (Coverity).
Thanks",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,222,2017-01-24T14:30:32Z,2017-02-09T16:26:32Z,2018-02-27T22:15:17Z,CLOSED,False,18,2,2,https://github.com/jyvet,V1.11 coverity,5,[],https://github.com/open-mpi/hwloc/pull/222,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/222#issuecomment-274927185,"Hi,
Please find a few patches for fixing some minor issues.
These errors were detected by a Static Code Analysis tool (Coverity).
Thanks","Thanks, I'll look at this. I wonder why our nightly coverity runs didn't report these.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,222,2017-01-24T14:30:32Z,2017-02-09T16:26:32Z,2018-02-27T22:15:17Z,CLOSED,False,18,2,2,https://github.com/jyvet,V1.11 coverity,5,[],https://github.com/open-mpi/hwloc/pull/222,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/222#issuecomment-278693434,"Hi,
Please find a few patches for fixing some minor issues.
These errors were detected by a Static Code Analysis tool (Coverity).
Thanks","Thanks, I push all this to the 1.11 stable branch (will be released in 1.11.6 next week) and the only relevant commit to git master as well.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,225,2017-02-07T15:14:41Z,2017-02-07T15:14:53Z,2017-02-07T15:14:55Z,MERGED,True,2,2,1,https://github.com/jsquyres,hwloc.m4: minor english fixes,1,[],https://github.com/open-mpi/hwloc/pull/225,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/225,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Signed-off-by: Jeff Squyres jsquyres@cisco.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,234,2017-04-10T08:26:29Z,2017-04-10T11:31:22Z,2017-04-10T11:31:22Z,MERGED,True,2,2,1,https://github.com/ggouaillardet,configury: do not require util directory when configuring in embedded…,1,[],https://github.com/open-mpi/hwloc/pull/234,https://github.com/ggouaillardet,1,https://github.com/open-mpi/hwloc/pull/234,"… mode
Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp","… mode
Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,234,2017-04-10T08:26:29Z,2017-04-10T11:31:22Z,2017-04-10T11:31:22Z,MERGED,True,2,2,1,https://github.com/ggouaillardet,configury: do not require util directory when configuring in embedded…,1,[],https://github.com/open-mpi/hwloc/pull/234,https://github.com/ggouaillardet,2,https://github.com/open-mpi/hwloc/pull/234#issuecomment-292882588,"… mode
Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp",Refs open-mpi/ompi#3302,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,1,https://github.com/open-mpi/hwloc/pull/235,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,2,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293155333,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,Refs open-mpi/ompi#3302,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,3,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293160575,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"with this PR, it is pretty trivial to untar and add an embedded hwloc tarball into ompi and as a standalone package (a la libevent, pmix or romio)
do you have any recollection on why hwloc is currently not a full standalone component in ompi ?
(e.g. ompi configury uses hwloc m4 file and has its own configure.m4, instead of directly invoking hwloc configure)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293182573,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,@jsquyres Can you answer above?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293184027,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"@ggouaillardet How would you generate this ""embedded"" tarball? What's the avantage against bringing a normal full hwloc tarball, running autogen, and then running a script that removes unneeded directories?
I am trying to simplify your commit. For instance, I don't like having the netloc script explictly listed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,6,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293185013,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"./configure --enable-embedded-mode
make dist

then the tarball can be untarred and renamed into opal/mca/hwloc/hwloc2x/hwloc
the pro is from ompi, you can
./autogen.sh
./configure ...
make dist
tar xvf openmpi-gitclone.tar.gz
cd openmpi-gitclone
./autogen.sh
...

without this PR, some steps do not complete successfully",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293262809,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"@ggouaillardet Your hunk about adding netloc_ib_gather_raw.in to EXTRA_DIST shouldn't be needed. This file shouldn't be required in embedded anyway, just like everything else under utils/.
What I didn't get yet is why your procedure requires patches that the current procedure doesn't. We are creating dummy directories manually to make automake happy. But why is your automake also looking for Makefiles that the current procedure doesn't require?
By the way the status of netloc vs embedding is unclear. OMPI won't use it anytime soon. You likely want to disable netloc everywhere for now.
I agree with @jsquyres about not listing tons of Makefiles in the embedded distscript.
I am fine with stopping the embedding. I don't know if anybody else is using it outside of OMPI, I'll ping the devel list.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,8,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293270436,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"i will make the requested changes sometimes this week
let me emphasize i claim no insightful knowledge on how autotools work.
so what i did is (my builddir is not my srcdir)
cd build/hwloc-embedded
../../src/hwloc/configure --enable-embedded-mode
make dist
tar xvfz hwloc-xxx.tar.gz
cd hwloc-xxx
./autogen.sh

autogen.sh fails with various error (missing files) and this PR is enough to get the job done
(this is how i found the list of hard coded paths)
keep in mind in ompi we do not run autogen.sh based on the full hwloc configure.ac,
but we run it vs a trimmed-for-ompi configure.m4 that hence requires less files.
if i follow the hwloc1116 logic of ompi, i am not able to have both hwloc 1.11.6 and hwloc 2.x, so i had to find a way to have a truly standalone hwloc 2.x
there could be a better and more elegant way to do it, but i do not know it.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293273500,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"""I am not able to have both hwloc 1.11.6 and hwloc 2.x,""
Did you try with 2 different components or a single one?
I think you will need 2 to cope with ABI differences.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/ggouaillardet,10,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293276159,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"what i meant is i cannot embedded two components in the ompi source tree (e.g. hwloc1116 and hwloc2x)
(so enduser/CI can configure with --with-hwloc=internal (for embedded 1.11.6) or --with-hwloc=future (for embedded v2.x) to test both API without the need to install any external hwloc)
hwloc framework has only one static component, so only one is built and there is no need
to worry about ABI difference here.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/jsquyres,11,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293399389,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"Yes, I think we've had that limitation in OMPI for quite a while (you can't have multiple hwloc components simultaneously in the tree -- there's esoteric m4 reasons why, and I don't remember the details at the moment).  So moving to a ""invoke the configure script in the hwloc component"" model would alleviate that issue, too.
But remember -- this does come at a cost (which we may or may not care about): the extra files and space used in git cloning.  It would probably be a good idea to look at the resulting size of the ompi source trees (and tarballs) with and without all the extra hwloc files (e.g., the hwloc bz2 tarball is ~4MB, expands out to 16MB, of which the PDF docs alone are about 1.7MB).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293474454,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"The size can be easily reduced to 1.5MB tarball and 8MB expanded (by removing docs PDF, html and man, while keeping the doxygen tag, and by removing tarballs and xmls in tests/linux and tests/xml). You can still autoreconf, configure and build from the root after that. But we cannot go much lower than that without a careful look at makefiles and configure.
Note that there's still another solution: stop including hwloc in OMPI and use the system-provided hwloc. It seems to me that hwloc is very often installed on clusters nowadays. Versions are somehow old, but does it really matter for OMPI?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,13,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293476920,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"We could try generating the explicit list of dummy makefiles by grepping for AC_CONFIG_FILES and AC_CONFIG_LINKS in configure and config/*.m4
There might be a way to add a regression test just like the current tests/hwloc/embedded
By the way, lstopo-windows.c is only needed because of AC_CONFIG_LINKS. So links are only used for non-Linux testing on Linux. We could manually symlink on Linux to simplify this.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/jsquyres,14,https://github.com/open-mpi/hwloc/pull/235#issuecomment-293537377,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"We've discussed exactly this idea (not embedding hwloc in Open MPI any more) recently.  We all agree that this is the Right long-term solution.  However, there still appear to be some barriers in the short term:

We updated Open MPI to easily be able to handle hwloc >= v1.5 (open-mpi/ompi@7e01be6).  Supporting < v1.5  will require a bunch of work that we didn't really want to do.
Some old-but-still-not-unpopular Linux distros ship older versions of hwloc (e.g., RHEL 6.3 has hwloc 1.1).
Other old-but-still-not-unpopular Linux distros don't ship hwloc by default (e.g., SLES 12).
Using the system-installed hwloc means that a secondary package frequently has to be installed (e.g., hwloc-devel), which is never installed by default.
OS X does not have hwloc by default (it's available by MacPorts and Homebrew, but just like the other issues above, this is an additional step).
We need to adjust Open MPI to be able to handle platforms where hwloc is not available.  Open MPI used to be able to handle this, but it was a whole pile of #if statements, and we inadvertently broke OMPI on hwloc-less platforms on a not-infrequent basis.  We need to resurrect this support, but somehow make it more robust.

All of these things, taken together, made it a bit too scary for us to remove the embedded hwloc from Open MPI -- at least for now.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,235,2017-04-11T05:39:34Z,,2020-03-24T08:34:19Z,OPEN,False,19,1,2,https://github.com/ggouaillardet,configury: enable autogen.sh from an embedded hwloc dist tarball,1,[],https://github.com/open-mpi/hwloc/pull/235,https://github.com/bgoglin,15,https://github.com/open-mpi/hwloc/pull/235#issuecomment-603101853,Signed-off-by: Gilles Gouaillardet gilles@rist.or.jp,"Note to open pull requests: some things changed in the CI yesterday, you'll need to rebase on top of master to avoid total CI failure.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,244,2017-06-22T09:21:02Z,2017-06-22T09:22:42Z,2017-06-22T09:24:50Z,MERGED,True,2,1,1,https://github.com/clementFoyer,Fix utarray_eltptr returned value casting,1,[],https://github.com/open-mpi/hwloc/pull/244,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/244,Signed-off-by: Clement Foyer clement.foyer@inria.fr,Signed-off-by: Clement Foyer clement.foyer@inria.fr,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,1,https://github.com/open-mpi/hwloc/pull/247,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,True,{'THUMBS_UP': ['https://github.com/mofr']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319284941,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Just for fun: Did you actually observe those exact crashes? There are other places where we don't check allocations but I am too lazy to fix all of them...,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,3,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319286192,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"Yes, we really observed these crashes and to be honest only places where it was really crashing have been fixed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319287312,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,I'd like to reproduce that to make sure we don't need other more important allocation checks later in the discovery process in topology.c. Did you use a fuzzer to generate false allocation failures? Or did you really fill your entire address space to make malloc fail?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319287712,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"Please squash your commits into a single one (and push -f) so that the review process doesn't appear in the git history. And please revert the other int/unsigned changes, those are unrelated to malloc failures.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,6,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319289526,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,hwloc_linux_find_kernel_max_numnodes now returns -1 on error that is why max_os_index type was changed from unsigned to int. Any suggestion how hwloc_linux_find_kernel_max_numnodes can report an error without returning -1? Thanks in advance.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319290514,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Just testing whether max_os_index == (unsigned)-1 should work fine without changing the non-error case (that piece of code is hard to test for regressions).,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,8,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319290849,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Regarding to the reproducibility in tests allocations are failed synthetically using simple library which is preloaded using LD_PRELOAD and DYLD_INSERT_LIBRARIES. Allocations are failed randomly using different strategies to cover as much as possible cases inclusing completelly abnormal. But in any case due to strict requirements in our case all situations must be handled. Application shall never crash.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319291322,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,OK that's what I called a fuzzer. I am surprised that no other problem appeared outside of this file but I am not going to complain about it.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,10,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319293388,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Such crazy test exists only for Linux and Mac OS X now. Windows in plans. Maybe other issues will be found there later.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,11,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319308677,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Single commit has been kept. All int/unsigned changes have been reverted.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319309401,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"Thanks, I'll merge this to master and v1.11 once the testing infrastructure is fixed (hopefully before the end of the week).
If you can share your way to perform this malloc fuzzing testing and maybe even some way to automatize it, that'd be nice.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,13,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319320620,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"Thank You. About sharing the approach I will be honest and will not promise that I will provide the working solution immediately. In fact all I can share is library which fails allocations when preloaded. Still not sure that there is high value in this library, it contains ~200 lines of quite simple code. If you still interested in it I can prepare an example application which is tested using such approach, but it will take some time in any case.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/mofr,14,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319556651,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Why using (unsigned)-1 was considered as a better approach?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,15,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319891742,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"After digging deeper we found (as was predicted) other places where hwloc fails. For example hwloc_topology_init crashes in some cases. As there are more failures that we may want to see simple project which can demonstrate the problem has been created. You can find it there: https://github.com/kutelev/hwlocoverthrower/tree/master/hwlocoverthrower. In the .travis.yml file you can sequence of command using which problem can be reproduced. It uses a simple library (overthrower) which was mentioned earlier. Test application itself is extremely simple, all it does is:
for (i = 0; i < 1000; ++i) {
    if (hwloc_topology_init(&topology) != 0)
        continue;
    hwloc_topology_destroy(topology);
}
When overthrower is not preloaded this code finishes correctly, but when is overthrower preloaded this code crashes with probability which is close to 100%. Build on Travis CI can be found there: https://travis-ci.org/kutelev/hwlocoverthrower. Now I shared all I can.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,16,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319919540,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"hwloc_topology_init() would be easy to fix. If you had load() between init() and destroy(), it would be a lot harder.
I can't find the code for liboverthrower. But we could use something else like libfuzzer anyway.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/kutelev,17,https://github.com/open-mpi/hwloc/pull/247#issuecomment-319921337,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,"In real life we have hwloc_topology_load after hwloc_topology_init. Regarding to the liboverthrower it is stored in separate a repository.
Full list of commands which can be executed to retrieve and all necessary dependencies:
git clone https://github.com/kutelev/hwlocoverthrower.git
cd hwlocoverthrower
git clone --depth 1 https://github.com/open-mpi/hwloc.git
git clone --depth 1 https://github.com/kutelev/overthrower.git
cd hwloc
./autogen.sh
./configure --disable-libxml2 --enable-static --disable-shared --disable-libudev --disable-pci
make
cd ../overthrower
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=1 .
cmake --build . --config Release
cd ../hwlocoverthrower
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=1 .
cmake --build . --config Release
cd ..
python ./tests/test.py",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,247,2017-08-01T03:16:18Z,2017-08-10T09:31:31Z,2017-08-22T03:49:48Z,CLOSED,False,28,0,1,https://github.com/kutelev,Fix evident lack of memory allocations handling in topology-linux.c,1,[],https://github.com/open-mpi/hwloc/pull/247,https://github.com/bgoglin,18,https://github.com/open-mpi/hwloc/pull/247#issuecomment-321501281,Due to not checking return values of some functions hwloc crashes in some cases when memory allocation (malloc) fails. To prevent such crashes there few checks have been added.,Replaced by #248,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,248,2017-08-10T09:29:35Z,2017-10-18T05:13:03Z,2017-10-18T05:13:03Z,CLOSED,False,635,180,15,https://github.com/kutelev,Prevent crashes and memory leaks in out-of-memory cases,3,[],https://github.com/open-mpi/hwloc/pull/248,https://github.com/kutelev,1,https://github.com/open-mpi/hwloc/pull/248,This pull request is a successor of a previous one: #247. Current set of changes fixes more problems. Current test which performs 200000 (or more) iterations of hwloc_topology_init/hwloc_topology_destroy does not crash and does not leak. Memory allocations are failed randomly during the test execution. Please review made changes when you have time.,This pull request is a successor of a previous one: #247. Current set of changes fixes more problems. Current test which performs 200000 (or more) iterations of hwloc_topology_init/hwloc_topology_destroy does not crash and does not leak. Memory allocations are failed randomly during the test execution. Please review made changes when you have time.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,248,2017-08-10T09:29:35Z,2017-10-18T05:13:03Z,2017-10-18T05:13:03Z,CLOSED,False,635,180,15,https://github.com/kutelev,Prevent crashes and memory leaks in out-of-memory cases,3,[],https://github.com/open-mpi/hwloc/pull/248,https://github.com/kutelev,2,https://github.com/open-mpi/hwloc/pull/248#issuecomment-337462407,This pull request is a successor of a previous one: #247. Current set of changes fixes more problems. Current test which performs 200000 (or more) iterations of hwloc_topology_init/hwloc_topology_destroy does not crash and does not leak. Memory allocations are failed randomly during the test execution. Please review made changes when you have time.,"I am closing this pull request. I think in the nearest future there will be no chance to resolve all conflicts and make these changes applicable.
Thanks.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,265,2017-09-28T11:18:25Z,2017-11-19T15:43:01Z,2017-11-19T15:43:02Z,CLOSED,False,10,0,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: hardcode KNL MCDRAM size,1,[],https://github.com/open-mpi/hwloc/pull/265,https://github.com/grzegorz-andrejczuk,1,https://github.com/open-mpi/hwloc/pull/265,"When numactl shows 16 GB of MCDRAM and hwloc-dump-hwdata shows less this
points to buggy BIOS reporting some of the MCDRAM controllers as fused
in DMI entries.
In this commit we try to workaround this by simply
hard-coding MCDRAM size and using it when detection fails.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","When numactl shows 16 GB of MCDRAM and hwloc-dump-hwdata shows less this
points to buggy BIOS reporting some of the MCDRAM controllers as fused
in DMI entries.
In this commit we try to workaround this by simply
hard-coding MCDRAM size and using it when detection fails.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,265,2017-09-28T11:18:25Z,2017-11-19T15:43:01Z,2017-11-19T15:43:02Z,CLOSED,False,10,0,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: hardcode KNL MCDRAM size,1,[],https://github.com/open-mpi/hwloc/pull/265,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/265#issuecomment-332812325,"When numactl shows 16 GB of MCDRAM and hwloc-dump-hwdata shows less this
points to buggy BIOS reporting some of the MCDRAM controllers as fused
in DMI entries.
In this commit we try to workaround this by simply
hard-coding MCDRAM size and using it when detection fails.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","Pushed to master and v1.11, thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,265,2017-09-28T11:18:25Z,2017-11-19T15:43:01Z,2017-11-19T15:43:02Z,CLOSED,False,10,0,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: hardcode KNL MCDRAM size,1,[],https://github.com/open-mpi/hwloc/pull/265,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/265#issuecomment-345526049,"When numactl shows 16 GB of MCDRAM and hwloc-dump-hwdata shows less this
points to buggy BIOS reporting some of the MCDRAM controllers as fused
in DMI entries.
In this commit we try to workaround this by simply
hard-coding MCDRAM size and using it when detection fails.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","This was fixed in master as 58a5801, closing for real.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,266,2017-10-05T15:30:52Z,2018-01-08T15:51:39Z,2018-01-08T15:51:54Z,CLOSED,False,77,44,9,https://github.com/bgoglin,always insert OpenCL osdev even when we cannot find their locality,5,[],https://github.com/open-mpi/hwloc/pull/266,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/266,"All devices get their Vendor/Model names as GPUVendor/GPUModel, which looks wrong for CPU OpenCL devices (htird item below), and things like ""Accelerator"" and ""Custom"" that are already listed in the OpenCL specs.
Co-Processor(OpenCL) L#11 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla M2075"" OpenCLPlatformIndex=0 OpenCLPlatformName=""NVIDIA CUDA"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=14 OpenCLGlobalMemorySize=5428224) ""opencl0d0""
Co-Processor(OpenCL) L#6 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""Advanced Micro Devices, Inc."" GPUModel=""AMD Radeon R9 200 / HD 7900 Series"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=1 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=3087360) ""opencl0d1""
Co-Processor(OpenCL) L#7 (Backend=OpenCL OpenCLDeviceType=CPU GPUVendor=GenuineIntel GPUModel=""Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=32869688) ""opencl0d2""
Changing GPUVendor/GPUModel to Vendor/Model as explained in #280 may be annoying for backward compat. Maybe just keep GPU prefix for GPUs and remove it for others (we never exposed anything but GPUs in v1.x).","All devices get their Vendor/Model names as GPUVendor/GPUModel, which looks wrong for CPU OpenCL devices (htird item below), and things like ""Accelerator"" and ""Custom"" that are already listed in the OpenCL specs.
Co-Processor(OpenCL) L#11 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla M2075"" OpenCLPlatformIndex=0 OpenCLPlatformName=""NVIDIA CUDA"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=14 OpenCLGlobalMemorySize=5428224) ""opencl0d0""
Co-Processor(OpenCL) L#6 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""Advanced Micro Devices, Inc."" GPUModel=""AMD Radeon R9 200 / HD 7900 Series"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=1 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=3087360) ""opencl0d1""
Co-Processor(OpenCL) L#7 (Backend=OpenCL OpenCLDeviceType=CPU GPUVendor=GenuineIntel GPUModel=""Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=32869688) ""opencl0d2""
Changing GPUVendor/GPUModel to Vendor/Model as explained in #280 may be annoying for backward compat. Maybe just keep GPU prefix for GPUs and remove it for others (we never exposed anything but GPUs in v1.x).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,266,2017-10-05T15:30:52Z,2018-01-08T15:51:39Z,2018-01-08T15:51:54Z,CLOSED,False,77,44,9,https://github.com/bgoglin,always insert OpenCL osdev even when we cannot find their locality,5,[],https://github.com/open-mpi/hwloc/pull/266,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/266#issuecomment-356005236,"All devices get their Vendor/Model names as GPUVendor/GPUModel, which looks wrong for CPU OpenCL devices (htird item below), and things like ""Accelerator"" and ""Custom"" that are already listed in the OpenCL specs.
Co-Processor(OpenCL) L#11 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla M2075"" OpenCLPlatformIndex=0 OpenCLPlatformName=""NVIDIA CUDA"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=14 OpenCLGlobalMemorySize=5428224) ""opencl0d0""
Co-Processor(OpenCL) L#6 (Backend=OpenCL OpenCLDeviceType=GPU GPUVendor=""Advanced Micro Devices, Inc."" GPUModel=""AMD Radeon R9 200 / HD 7900 Series"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=1 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=3087360) ""opencl0d1""
Co-Processor(OpenCL) L#7 (Backend=OpenCL OpenCLDeviceType=CPU GPUVendor=GenuineIntel GPUModel=""Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz"" OpenCLPlatformIndex=0 OpenCLPlatformName=""AMD Accelerated Parallel Processing"" OpenCLPlatformDeviceIndex=2 OpenCLComputeUnits=32 OpenCLGlobalMemorySize=32869688) ""opencl0d2""
Changing GPUVendor/GPUModel to Vendor/Model as explained in #280 may be annoying for backward compat. Maybe just keep GPU prefix for GPUs and remove it for others (we never exposed anything but GPUs in v1.x).",Pushed as 1a05ec3,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,267,2017-10-06T21:07:45Z,2019-03-06T13:40:02Z,2019-03-06T13:40:02Z,CLOSED,False,13536,6468,288,https://github.com/bgoglin,[WIP DNM] Add native svg support to lstopo,370,[],https://github.com/open-mpi/hwloc/pull/267,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/267,"This code has been maintained by @svalat for several years. It exports SVG natively instead of using Cairo. The aim is to be able to add tags to the SVG format, so that we can play with those tags later, for instance using javascript.
Lots of things to update since this is against 1.11.2.","This code has been maintained by @svalat for several years. It exports SVG natively instead of using Cairo. The aim is to be able to add tags to the SVG format, so that we can play with those tags later, for instance using javascript.
Lots of things to update since this is against 1.11.2.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,269,2017-10-23T09:18:20Z,2017-10-23T09:49:20Z,2017-10-23T13:55:39Z,CLOSED,False,42,40,1,https://github.com/clementFoyer,hwloc: Use XML_PARSE_NOBLANKS option,1,[],https://github.com/open-mpi/hwloc/pull/269,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/269,"Simplify the XML parsing using libxml2 by enabling the XML_PARSE_NOBLANKS option.
This option remove the useless XML_TEST_NODE inserted because of the indentation.
Signed-off-by: Clement Foyer clement.foyer@inria.fr","Simplify the XML parsing using libxml2 by enabling the XML_PARSE_NOBLANKS option.
This option remove the useless XML_TEST_NODE inserted because of the indentation.
Signed-off-by: Clement Foyer clement.foyer@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,269,2017-10-23T09:18:20Z,2017-10-23T09:49:20Z,2017-10-23T13:55:39Z,CLOSED,False,42,40,1,https://github.com/clementFoyer,hwloc: Use XML_PARSE_NOBLANKS option,1,[],https://github.com/open-mpi/hwloc/pull/269,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/269#issuecomment-338606658,"Simplify the XML parsing using libxml2 by enabling the XML_PARSE_NOBLANKS option.
This option remove the useless XML_TEST_NODE inserted because of the indentation.
Signed-off-by: Clement Foyer clement.foyer@inria.fr",Pushed in master as ad30f69,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,273,2017-11-07T18:27:35Z,2017-11-09T10:30:40Z,2017-11-09T10:30:40Z,CLOSED,False,319,207,4,https://github.com/bgoglin,update lstopo graphical output to memory children,19,[],https://github.com/open-mpi/hwloc/pull/273,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/273,"NUMA nodes don't contain packages/cores/caches/PUs anymore. They don't have a double box anymore. They are on the side, just like other PUs.
To simplify reading in most cases, we actually display memory children above other children (unless --children-order=plain is given). When the parent is a cache, we even display memory children above that cache.
Example with a fake mini-KNL in SNC4/Hybrid:","NUMA nodes don't contain packages/cores/caches/PUs anymore. They don't have a double box anymore. They are on the side, just like other PUs.
To simplify reading in most cases, we actually display memory children above other children (unless --children-order=plain is given). When the parent is a cache, we even display memory children above that cache.
Example with a fake mini-KNL in SNC4/Hybrid:",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,273,2017-11-07T18:27:35Z,2017-11-09T10:30:40Z,2017-11-09T10:30:40Z,CLOSED,False,319,207,4,https://github.com/bgoglin,update lstopo graphical output to memory children,19,[],https://github.com/open-mpi/hwloc/pull/273,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/273#issuecomment-343113318,"NUMA nodes don't contain packages/cores/caches/PUs anymore. They don't have a double box anymore. They are on the side, just like other PUs.
To simplify reading in most cases, we actually display memory children above other children (unless --children-order=plain is given). When the parent is a cache, we even display memory children above that cache.
Example with a fake mini-KNL in SNC4/Hybrid:",Pushed as ea4537a,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,274,2017-11-10T10:45:16Z,2017-12-01T09:43:38Z,2017-12-01T10:31:50Z,MERGED,True,270,260,27,https://github.com/bgoglin,Move local_memory to NUMA node specific attrs,3,[],https://github.com/open-mpi/hwloc/pull/274,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/274,"Only NUMA nodes have memory, so it makes sense to change obj->memory into obj->attr->numanode
However obj->memory.total_memory is used for all objects (especially root), so that one becomes obj->total_memory.","Only NUMA nodes have memory, so it makes sense to change obj->memory into obj->attr->numanode
However obj->memory.total_memory is used for all objects (especially root), so that one becomes obj->total_memory.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,275,2017-11-10T10:52:10Z,2017-12-06T10:45:24Z,2017-12-06T12:16:21Z,MERGED,True,109,233,20,https://github.com/bgoglin,"Remove the ""System"" object type",7,[],https://github.com/open-mpi/hwloc/pull/275,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/275,"We don't support topologies made of multiple machines anymore (kerrighed is dead, we removed its support, and custom assembly of topologies has been removed too). Therefore, the only way to get a topology with a System object above Machine is synthetic.
I don't think we will ever again support a single topology made of different/independent operating system instances, at least because binding isn't possible there. But we still support assembly of multiple machines managed by a single OS (SGI NumaLink, ScaleMP vSMP, etc). So maybe Machine isn't the right name, but I am not sure it's worth changing it.
Anyway, once we remove System, we can now clarify that root is always Machine. This means the ""network drawing"" code isn't needed in lstopo anymore.","We don't support topologies made of multiple machines anymore (kerrighed is dead, we removed its support, and custom assembly of topologies has been removed too). Therefore, the only way to get a topology with a System object above Machine is synthetic.
I don't think we will ever again support a single topology made of different/independent operating system instances, at least because binding isn't possible there. But we still support assembly of multiple machines managed by a single OS (SGI NumaLink, ScaleMP vSMP, etc). So maybe Machine isn't the right name, but I am not sure it's worth changing it.
Anyway, once we remove System, we can now clarify that root is always Machine. This means the ""network drawing"" code isn't needed in lstopo anymore.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,276,2017-11-13T11:38:59Z,2017-11-29T14:08:45Z,2017-11-29T14:09:28Z,MERGED,True,109,107,30,https://github.com/bgoglin,API: change level depth to signed int,1,[],https://github.com/open-mpi/hwloc/pull/276,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/276,"Change obj->depth to signed int, and all relevant function manipulating
object depths.
We have negative depth for special levels so we cast in lots of places.
This is becoming even more common with the NUMAnode special level.
Also change hwloc_topology_get_depth() to signed to avoid signedness
comparison warnings when iterating over depths.
That one is less obvious since it's always >0 and even an unsigned internally.
Cache/Bridge/Group specific depth attr are still unsigned,
those are never negative.
It's not clear whether mixing signed depth for object and unsigned
for attribute could cause confusion.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","Change obj->depth to signed int, and all relevant function manipulating
object depths.
We have negative depth for special levels so we cast in lots of places.
This is becoming even more common with the NUMAnode special level.
Also change hwloc_topology_get_depth() to signed to avoid signedness
comparison warnings when iterating over depths.
That one is less obvious since it's always >0 and even an unsigned internally.
Cache/Bridge/Group specific depth attr are still unsigned,
those are never negative.
It's not clear whether mixing signed depth for object and unsigned
for attribute could cause confusion.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,277,2017-11-19T16:12:47Z,2017-11-29T13:40:46Z,2017-11-29T13:51:06Z,MERGED,True,8486,8460,66,https://github.com/bgoglin,Only maintain allowed_cpuset and allowed_nodeset for the entire topology,3,[],https://github.com/open-mpi/hwloc/pull/277,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/277,"Remove obj->allowed_cpuset and obj->allowed_nodeset since they increase the memory footprint for a rarely-used corner-case (when the WHOLE_SYSTEM topology flag is passed). In the normal case, they are identical to obj->cpuset and obj->nodeset.
Now we only have allowed sets for the entire topology, available through
hwloc_topology_get_allowed_cpuset() and hwloc_topology_get_allowed_nodeset().
Those functions are still in hwloc/helper.h but they should likely move to the main hwloc.h file now. Not sure what to do about hwloc_topology_get_complete_cpuset() and others (identical to the root->cpuset and others).
Topology allowed sets can be combined with obj->cpuset and obj->nodeset using hwloc_bitmap_and() or hwloc_bitmap_intersects() to find out if some PUs or NUMAs are available inside a given object obj.
These sets are stored as root object attributes in XML. Could be moved to a topology attributes if really necessary.","Remove obj->allowed_cpuset and obj->allowed_nodeset since they increase the memory footprint for a rarely-used corner-case (when the WHOLE_SYSTEM topology flag is passed). In the normal case, they are identical to obj->cpuset and obj->nodeset.
Now we only have allowed sets for the entire topology, available through
hwloc_topology_get_allowed_cpuset() and hwloc_topology_get_allowed_nodeset().
Those functions are still in hwloc/helper.h but they should likely move to the main hwloc.h file now. Not sure what to do about hwloc_topology_get_complete_cpuset() and others (identical to the root->cpuset and others).
Topology allowed sets can be combined with obj->cpuset and obj->nodeset using hwloc_bitmap_and() or hwloc_bitmap_intersects() to find out if some PUs or NUMAs are available inside a given object obj.
These sets are stored as root object attributes in XML. Could be moved to a topology attributes if really necessary.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,278,2017-12-28T04:46:57Z,2017-12-28T04:57:40Z,2017-12-28T04:57:40Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin x86 cpu,1,[],https://github.com/open-mpi/hwloc/pull/278,https://github.com/mormenthan,1,https://github.com/open-mpi/hwloc/pull/278,"lstopo will core dump when run on zhaoxin x86 platform because of wrong cache information; add support for zhaoxin x86 cpu to fix this problem
Signed-off-by: Jeff Zhao <jeffzhao@zhaoxin.com>","lstopo will core dump when run on zhaoxin x86 platform because of wrong cache information; add support for zhaoxin x86 cpu to fix this problem
Signed-off-by: Jeff Zhao <jeffzhao@zhaoxin.com>",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/mormenthan,1,https://github.com/open-mpi/hwloc/pull/279,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354250806,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","Hello.
The code looks good.
Can you add give information and/or links about the supported processor models since we are not familiar with them?
I see ""CentaurHauls"" and ""Shanghai"" in the vendor name in cpuid outputs, and google also talks about VIA. What are those vs Zhaoxin?
Also it would be good to have a test under tests/hwloc/x86/ for future regression testing. Please send the cpuid directory generated by hwloc-gather-cpuid, I'll create the test. If you cannot share that information yet, I'd still like to have it for my own private testing.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/mormenthan,3,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354392845,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","Thxs for your reply !


Here is some information of zhaoxin x86 cpu ids, which are compatible with Intel processors. You can visit http://en.zhaoxin.com/ for more information.



VIA and Shanghai United Investment Co.,Ltd.(SUI) found Shanghai ZhaoXin, which is a fabless x86 CPU IC design company. ZhaoXin has issued ZX-C, ZX-D x86 processors, which have CentaurHalus and Shanghai CPU vendor ids.


I pull the latest hwloc code to run hwloc-gather-cpuid on Intel and ZhaoXin platform, it core dumped.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354415925,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","The hwloc-gather-cpuid assert failure should disappear if you remove --enable-debug at configure time.
But I'd need the full textual output with debug enabled to debug the actual issue.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354419161,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com",The segfault should be fixed with bgoglin@8ac71cf,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/mormenthan,6,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354430039,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","Thxs for comment.
I already run hwloc-gather-cpuid on ZhaoXin platform, and the attachments are CentaurHauls and Shanghai cpuid directory.

centahauls-cpuid.tar.gz
shanghai-cpuid.tar.gz",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354433668,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","Thanks. I'll push your code and add your cpuid dumps to regression testing inside the repo.
So (just to be sure) can you confirm that the output is correct: both CPUs have 8 cores with 32kB L1i and 32kB L1d each. The Shanghai CPU has a 2MB shared L2 between 8 cores. The CentauHauls has two 4MB L2 shared by 4 cores.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/mormenthan,8,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354693195,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","I'm sorry for late response because of on holiday.
Yes, I'm sure the information is correct.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/279#issuecomment-354773672,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com","Pushed to git master (commit 142f3e4) and v1.11 stable branch (a55ebba).
This will be in the upcoming 2.0 and 1.11.9 releases.
Current snapshot tarballs are available from https://ci.inria.fr/hwloc/job/master-0-tarball/ and https://ci.inria.fr/hwloc/job/v1.11-0-tarball/
Thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,279,2017-12-28T05:02:12Z,2018-01-02T14:09:01Z,2018-01-04T02:03:44Z,CLOSED,False,21,6,1,https://github.com/mormenthan,support for zhaoxin cpu id,1,[],https://github.com/open-mpi/hwloc/pull/279,https://github.com/mormenthan,10,https://github.com/open-mpi/hwloc/pull/279#issuecomment-355180062,"lstopo will core dump when run on zhaoxin platform because of wrong cache information, add support for zhaoxin cpu id to fix it.
Signed-off-by: Jeff Zhao jeffzhao@zhaoxin.com",Thank you very much.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,286,2018-01-23T12:47:35Z,2018-01-31T18:47:05Z,2018-01-31T18:47:05Z,CLOSED,False,14,15,2,https://github.com/dawid-lukwinski,Consistent naming of Intel(R) Xeon Phi(TM) processors in messages and documentation,1,[],https://github.com/open-mpi/hwloc/pull/286,https://github.com/dawid-lukwinski,1,https://github.com/open-mpi/hwloc/pull/286,"For both Knights Landing (KNL) and Knights Mill (KNM) processors mostly
the same code and documentation is used. Therefore text regarding these
processors has to be consistent and appropriate for both KNL and KNM.
Signed-off-by: Dawid Łukwiński dawid.lukwinski@intel.com","For both Knights Landing (KNL) and Knights Mill (KNM) processors mostly
the same code and documentation is used. Therefore text regarding these
processors has to be consistent and appropriate for both KNL and KNM.
Signed-off-by: Dawid Łukwiński dawid.lukwinski@intel.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,286,2018-01-23T12:47:35Z,2018-01-31T18:47:05Z,2018-01-31T18:47:05Z,CLOSED,False,14,15,2,https://github.com/dawid-lukwinski,Consistent naming of Intel(R) Xeon Phi(TM) processors in messages and documentation,1,[],https://github.com/open-mpi/hwloc/pull/286,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/286#issuecomment-359792598,"For both Knights Landing (KNL) and Knights Mill (KNM) processors mostly
the same code and documentation is used. Therefore text regarding these
processors has to be consistent and appropriate for both KNL and KNM.
Signed-off-by: Dawid Łukwiński dawid.lukwinski@intel.com","By the way, I pushed a big doc update this morning with at least another instance of ""KNL"" in doc/hwloc.doxy
I have to say I am not a big fan of writing ""Intel(R) Xeon Phi(TM)"" everywhere, even in debug messages from tools that automatically run during boot without any human ever looking at the output.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,288,2018-01-29T07:04:11Z,2018-01-29T09:09:39Z,2018-01-29T09:09:47Z,MERGED,True,2,2,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: fix the lookup for KNL SMBIOS entries,1,[],https://github.com/open-mpi/hwloc/pull/288,https://github.com/grzegorz-andrejczuk,1,https://github.com/open-mpi/hwloc/pull/288,"We always matched because the last iteration would strncmp() with
len=0.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","We always matched because the last iteration would strncmp() with
len=0.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,288,2018-01-29T07:04:11Z,2018-01-29T09:09:39Z,2018-01-29T09:09:47Z,MERGED,True,2,2,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: fix the lookup for KNL SMBIOS entries,1,[],https://github.com/open-mpi/hwloc/pull/288,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/288#issuecomment-361182392,"We always matched because the last iteration would strncmp() with
len=0.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","Applied, thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,289,2018-01-31T15:00:26Z,2018-01-31T15:17:39Z,2018-01-31T18:01:15Z,CLOSED,False,7,5,1,https://github.com/dawid-lukwinski,KNM (Knights Mill) SMBIOS detection fix.,1,[],https://github.com/open-mpi/hwloc/pull/289,https://github.com/dawid-lukwinski,1,https://github.com/open-mpi/hwloc/pull/289,"KNM can use the same code as KNL, except the different SMBIOS string.
This commit adds a separate SMBIOS group string for KNM.","KNM can use the same code as KNL, except the different SMBIOS string.
This commit adds a separate SMBIOS group string for KNM.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,289,2018-01-31T15:00:26Z,2018-01-31T15:17:39Z,2018-01-31T18:01:15Z,CLOSED,False,7,5,1,https://github.com/dawid-lukwinski,KNM (Knights Mill) SMBIOS detection fix.,1,[],https://github.com/open-mpi/hwloc/pull/289,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/289#issuecomment-361963588,"KNM can use the same code as KNL, except the different SMBIOS string.
This commit adds a separate SMBIOS group string for KNM.","Applied, thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,294,2018-02-08T15:22:07Z,2018-02-08T16:03:44Z,2018-02-08T18:57:50Z,MERGED,True,15,12,1,https://github.com/jsquyres,github issue template: minor tweaks,1,[],https://github.com/open-mpi/hwloc/pull/294,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/294,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Signed-off-by: Jeff Squyres jsquyres@cisco.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,294,2018-02-08T15:22:07Z,2018-02-08T16:03:44Z,2018-02-08T18:57:50Z,MERGED,True,15,12,1,https://github.com/jsquyres,github issue template: minor tweaks,1,[],https://github.com/open-mpi/hwloc/pull/294,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/294#issuecomment-364158867,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Thanks,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/grzegorz-andrejczuk,1,https://github.com/open-mpi/hwloc/pull/295,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/295#issuecomment-364454114,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","It works on both Dell BIOS, thanks. I'll apply it and send a mail to users for testing on other vendors' platforms. Do you only have Intel-specific chassis/motherboards/BIOS, or do you also test on vendors' product?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/grzegorz-andrejczuk,3,https://github.com/open-mpi/hwloc/pull/295#issuecomment-364458316,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com",I do not have machines from other vendors. I have tested this on Intel only.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/295#issuecomment-364463115,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","How about we add some printf to ease debugging (and addition of other vendor-specific strings). We'd see this when matched:
Dumping KNL SMBIOS Memory-Side Cache information:
  File = /home/bgoglin/Bureau/hwloc/knl-snc4h50//sys/firmware/dmi/entries/14-0/raw, size = 4096
    Looking for ""Group: Knights Landing Information"" in group string ""Group: Knights Landing Information""
   Found phi group
  Found KNL type = 160
[...]

and this when not matched (I changed the strings to emulate a failure):
Dumping KNL SMBIOS Memory-Side Cache information:
  File = /home/bgoglin/Bureau/hwloc/knl4//sys/firmware/dmi/entries/14-0/raw, size = 4096
    Looking for ""Group: Knights Landing Information"" in group string ""Knights Landing Association""
    Looking for ""Group: Knights Mill Information"" in group string ""Knights Landing Association""
    Looking for ""Knights Landing Associatiooooon"" in group string ""Knights Landing Association""
  Failed to find phi group
SMBIOS table does not contain KNL entries",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/grzegorz-andrejczuk,5,https://github.com/open-mpi/hwloc/pull/295#issuecomment-364488085,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","I added logging, fixed off-by-one error and created new PR
#296",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,295,2018-02-09T14:42:11Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,17,4,1,https://github.com/grzegorz-andrejczuk,hwloc-dump-hwdata: add Dell SMBIOS Group string,1,[],https://github.com/open-mpi/hwloc/pull/295,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/295#issuecomment-364489474,"This commit makes SMBIOS groups string easier to extend.
This way it will be possible to easily add requested vendor
string to be matched in SMBIOS Group.
SMBIOS was replaced with vendor name in existing strings,
because whole name might be too long.
Signed-off-by: Grzegorz Andrejczuk grzegorz.andrejczuk@intel.com","Thanks. By the way, you can update an existing PR by just pushing to the same branch.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,296,2018-02-09T16:41:03Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,26,7,1,https://github.com/grzegorz-andrejczuk,Gandrejc hwdata improvements,3,[],https://github.com/open-mpi/hwloc/pull/296,https://github.com/grzegorz-andrejczuk,1,https://github.com/open-mpi/hwloc/pull/296,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,296,2018-02-09T16:41:03Z,2018-02-11T08:59:41Z,2018-02-11T08:59:41Z,CLOSED,False,26,7,1,https://github.com/grzegorz-andrejczuk,Gandrejc hwdata improvements,3,[],https://github.com/open-mpi/hwloc/pull/296,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/296#issuecomment-364489247,,"I just pushed something very similar to another branch :) I'll merge things.
https://github.com/bgoglin/hwloc/commits/hdh",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,302,2018-04-06T11:01:48Z,,2020-03-24T14:34:32Z,OPEN,False,5,6,4,https://github.com/bgoglin,[WIP DNM] Allow libnetloc build in embedded mode,1,[],https://github.com/open-mpi/hwloc/pull/302,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/302,This PR will also serve as a test for jenkins pipeline PR support,This PR will also serve as a test for jenkins pipeline PR support,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,302,2018-04-06T11:01:48Z,,2020-03-24T14:34:32Z,OPEN,False,5,6,4,https://github.com/bgoglin,[WIP DNM] Allow libnetloc build in embedded mode,1,[],https://github.com/open-mpi/hwloc/pull/302,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/302#issuecomment-379221946,This PR will also serve as a test for jenkins pipeline PR support,"@KavithaTipturMadhu this revert seems to be enough for getting libnetloc_embedded.la
Only tested on git master but hopefully it'll work with 2.0 too.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,302,2018-04-06T11:01:48Z,,2020-03-24T14:34:32Z,OPEN,False,5,6,4,https://github.com/bgoglin,[WIP DNM] Allow libnetloc build in embedded mode,1,[],https://github.com/open-mpi/hwloc/pull/302,https://github.com/KavithaTipturMadhu,3,https://github.com/open-mpi/hwloc/pull/302#issuecomment-379262876,This PR will also serve as a test for jenkins pipeline PR support,"Great, thank you.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,308,2018-05-03T12:14:24Z,2018-05-03T12:20:58Z,2018-05-03T12:20:58Z,CLOSED,False,85,55,5,https://github.com/bgoglin,WIP DNM,9,[],https://github.com/open-mpi/hwloc/pull/308,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/308,demo of jenkins pipeline,demo of jenkins pipeline,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,1,https://github.com/open-mpi/hwloc/pull/311,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/jsquyres,2,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387474181,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","Per https://github.com/open-mpi/ompi/wiki/Admistrative-rules#contributors-declaration, can you add a signed-off-by line in your commit message (use git commit -s)?  This line indicates your agreement with our contributor's declaration.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,3,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387476938,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","Signed-off-by added, sorry about that.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/jsquyres,4,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387478530,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","@evan-charmworks Thanks!  I'm sorry to be a little picky: can you add a little more rationale to the commit message?  Someday, someone will be spelunking through git logs and find this commit -- it just says that it has re-added something that was deleted; it doesn't say why.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,5,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387479323,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.",Rationale added to commit message.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387482440,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","What bothers me is that your patch will likely break make check under tests/hwloc/rename (because those symbols aren't defined in any header, and that test looks for missing and unneeded renames).
I need to think about a proper way to make this work without having to hardwire the whitelist in the test.
Do you actually see a real-life issue without your patch? I am trying to see why we never had this issue before.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,7,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387483373,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","Symbol conflicts were reported by a user of Charm++, which uses hwloc. You can see the thread here: https://lists.cs.illinois.edu/lists/arc/charm/2018-05/msg00000.html",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387506883,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","I combined your patch with some moving of declarations and pushed it to my fork for testing.
bgoglin@d0c2a33
The only non-trivial difference with your rename.h is the removal of hwloc_fake_components (it's never linked with libhwloc, it's only built for tests).
I think your patch is enough for Charm++ since you're embedding. My additional changes shouldn't matter to you.
If that's OK for you, I'll push my patch to master and stable branches later tonight.
Thanks for your work. By the way, good to know that Charm++ is also using embedding.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,9,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387531714,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.",Sounds good to me. Thanks for looking at this.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,10,https://github.com/open-mpi/hwloc/pull/311#issuecomment-387535135,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.","If it's any help, this is the one-liner I used to generate the definitions for my commit:
grep -Eroh ""hwloc_component hwloc_[a-zA-Z0-9_]+_component"" | sort | uniq | awk '{print ""#define "" $NF "" HWLOC_NAME("" $NF "")""}' | sed 's/(hwloc_/(/'",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/311#issuecomment-394279950,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well."," @evan-charmworks Do you need an official release with this fix in the near future? It's the only user-visible fix since 1.11.10 and 2.0.0 were released, I'd like to know if it's enough to deserve new stable releases. If you're OK with the patch on top of your embedded hwloc, I'll wait for more fixes before releasing.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,311,2018-05-08T16:18:25Z,2018-05-08T21:41:12Z,2018-06-04T17:20:54Z,CLOSED,False,23,0,1,https://github.com/evan-charmworks,hwloc/rename: re-add components symbols,1,[],https://github.com/open-mpi/hwloc/pull/311,https://github.com/evan-charmworks,12,https://github.com/open-mpi/hwloc/pull/311#issuecomment-394432265,"These definitions were originally removed in git commit 93abf09, aka SVN r5097.
They are needed to avoid symbol conflicts, for example between Open MPI's copy of hwloc and something that uses both Open MPI and its own copy of hwloc. Conflicts can occur both at binary link time and at runtime, during dynamic component lookup.
If this is acceptable, I can create PRs for the v1.11 and v2.0 branches as well.",Charm++ will be fine with the patch to our embedded copy of hwloc. No need to push a release for our sake. Thanks!,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,316,2018-06-23T13:25:29Z,2018-06-23T21:23:32Z,2018-07-03T09:50:05Z,MERGED,True,5,5,1,https://github.com/jsquyres,lstopo-ascii.c: fix minor compiler warnings,1,[],https://github.com/open-mpi/hwloc/pull/316,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/316,"Compiler whined about set-but-unused variables.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Compiler whined about set-but-unused variables.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,317,2018-07-16T14:43:48Z,2018-07-23T14:09:38Z,2018-07-23T17:05:11Z,CLOSED,False,17,14,2,https://github.com/wesbland,Check for freed memory before using it,1,[],https://github.com/open-mpi/hwloc/pull/317,https://github.com/wesbland,1,https://github.com/open-mpi/hwloc/pull/317,"The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project","The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,317,2018-07-16T14:43:48Z,2018-07-23T14:09:38Z,2018-07-23T17:05:11Z,CLOSED,False,17,14,2,https://github.com/wesbland,Check for freed memory before using it,1,[],https://github.com/open-mpi/hwloc/pull/317,https://github.com/wesbland,2,https://github.com/open-mpi/hwloc/pull/317#issuecomment-405272576,"The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project","I'm sure there's a commit prefix that I should be using here, but I couldn't figure out the scheme. I'm happy to update the patch if you can give me a pointer in the right direction.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,317,2018-07-16T14:43:48Z,2018-07-23T14:09:38Z,2018-07-23T17:05:11Z,CLOSED,False,17,14,2,https://github.com/wesbland,Check for freed memory before using it,1,[],https://github.com/open-mpi/hwloc/pull/317,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/317#issuecomment-406816665,"The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project",I requested access to ch4's coverity since hwloc's coverity doesn't complain (and I don't understand the issue so far).,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,317,2018-07-16T14:43:48Z,2018-07-23T14:09:38Z,2018-07-23T17:05:11Z,CLOSED,False,17,14,2,https://github.com/wesbland,Check for freed memory before using it,1,[],https://github.com/open-mpi/hwloc/pull/317,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/317#issuecomment-407071079,"The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project","185546 and 185552 are false positives, root and root->nodeset are only freed in hwloc__xml_import_object() when the input object isn't the root (parent!=NULL).
185542 is also a false positive. The object is freed in hwloc__insert_object_by_cpuset() only when insertion fails (return NULL) or the object gets merged with another one (return != obj). Both these conditions are verified before dereferencing the object again.
They were already marked as false-positive in hwloc's coverity. I guess you can ignore everything hwloc related in MPICH's coverity.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,317,2018-07-16T14:43:48Z,2018-07-23T14:09:38Z,2018-07-23T17:05:11Z,CLOSED,False,17,14,2,https://github.com/wesbland,Check for freed memory before using it,1,[],https://github.com/open-mpi/hwloc/pull/317,https://github.com/wesbland,5,https://github.com/open-mpi/hwloc/pull/317#issuecomment-407130408,"The error case of hwloc_convert_from_v1dist_floats cleans up memory
which might have previously been freed if the right set of error
branches occur. By explicitly setting the memory pointer to NULL after
freeing it, we can later check that value and make sure we don't
dereference an freed pointer.
See Coverity defects 185552, 185546, and 185542 in MPICH-CH4 project",Sounds good. I'll clear those out then.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,320,2018-08-07T17:30:03Z,2018-08-08T12:35:21Z,2018-08-09T17:17:32Z,MERGED,True,42,42,5,https://github.com/jsquyres,Miscellaneous compiler warning fixes,1,[],https://github.com/open-mpi/hwloc/pull/320,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/320,"Signed-off-by: Jeff Squyres jsquyres@cisco.com
Fix 2 kinds of compiler warnings:

Uninitialized variables
Local symbols shadowing global symbols","Signed-off-by: Jeff Squyres jsquyres@cisco.com
Fix 2 kinds of compiler warnings:

Uninitialized variables
Local symbols shadowing global symbols",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,320,2018-08-07T17:30:03Z,2018-08-08T12:35:21Z,2018-08-09T17:17:32Z,MERGED,True,42,42,5,https://github.com/jsquyres,Miscellaneous compiler warning fixes,1,[],https://github.com/open-mpi/hwloc/pull/320,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/320#issuecomment-411148156,"Signed-off-by: Jeff Squyres jsquyres@cisco.com
Fix 2 kinds of compiler warnings:

Uninitialized variables
Local symbols shadowing global symbols","Thanks, I'll merge tomorrow once jenkins is back online",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,324,2018-08-14T20:29:33Z,2018-08-15T08:15:40Z,2018-08-15T08:16:02Z,MERGED,True,55,14,13,https://github.com/bgoglin,Define HWLOC_VERSION* in hwloc/autogen/config.h public header,6,[],https://github.com/open-mpi/hwloc/pull/324,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/324,"OMPI would like a way to check the hwloc library version (not API version) from external configure scripts (open-mpi/ompi#5395). We currently have HWLOC_VERSION defined in private/autogen/config.h
It's only there because it wasn't prefixed with HWLOC_ in the past. Now that it's properly prefixed, there's no reason to keep it private.
Also add HWLOC_VERSION_{MAJOR,MINOR,RELEASE,GREEK} to avoid external parsing.","OMPI would like a way to check the hwloc library version (not API version) from external configure scripts (open-mpi/ompi#5395). We currently have HWLOC_VERSION defined in private/autogen/config.h
It's only there because it wasn't prefixed with HWLOC_ in the past. Now that it's properly prefixed, there's no reason to keep it private.
Also add HWLOC_VERSION_{MAJOR,MINOR,RELEASE,GREEK} to avoid external parsing.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,324,2018-08-14T20:29:33Z,2018-08-15T08:15:40Z,2018-08-15T08:16:02Z,MERGED,True,55,14,13,https://github.com/bgoglin,Define HWLOC_VERSION* in hwloc/autogen/config.h public header,6,[],https://github.com/open-mpi/hwloc/pull/324,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/324#issuecomment-413006043,"OMPI would like a way to check the hwloc library version (not API version) from external configure scripts (open-mpi/ompi#5395). We currently have HWLOC_VERSION defined in private/autogen/config.h
It's only there because it wasn't prefixed with HWLOC_ in the past. Now that it's properly prefixed, there's no reason to keep it private.
Also add HWLOC_VERSION_{MAJOR,MINOR,RELEASE,GREEK} to avoid external parsing.",@ggouaillardet Do you want this in hwloc 2.0.2? My understanding is that there's no need to put this in hwloc 1.11.11 since OMPI will never use the system-wide 1.11.x unless forced to.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,324,2018-08-14T20:29:33Z,2018-08-15T08:15:40Z,2018-08-15T08:16:02Z,MERGED,True,55,14,13,https://github.com/bgoglin,Define HWLOC_VERSION* in hwloc/autogen/config.h public header,6,[],https://github.com/open-mpi/hwloc/pull/324,https://github.com/ggouaillardet,3,https://github.com/open-mpi/hwloc/pull/324#issuecomment-413106024,"OMPI would like a way to check the hwloc library version (not API version) from external configure scripts (open-mpi/ompi#5395). We currently have HWLOC_VERSION defined in private/autogen/config.h
It's only there because it wasn't prefixed with HWLOC_ in the past. Now that it's properly prefixed, there's no reason to keep it private.
Also add HWLOC_VERSION_{MAJOR,MINOR,RELEASE,GREEK} to avoid external parsing.","@bgoglin thanks a lot !
as you said, starting from hwloc 2.0.2 is far enough
(and I will add a #ifdef HWLOC_VERSION this is only tested when available)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,325,2018-08-15T07:11:12Z,2018-08-15T07:24:46Z,2018-08-15T07:33:44Z,MERGED,True,4,4,1,https://github.com/bgoglin,contrib/ci.inria.fr: keep the full branch name for the snapshot version,1,[],https://github.com/open-mpi/hwloc/pull/325,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/325,"There's no reason to remove it.
At least now we'll keep ""PR-xyz"" instead of ""PR"" in the name.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr
Also use that PR to debug failures to configure on openindiana when building the version branch as a PR and not as a normal branch.","There's no reason to remove it.
At least now we'll keep ""PR-xyz"" instead of ""PR"" in the name.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr
Also use that PR to debug failures to configure on openindiana when building the version branch as a PR and not as a normal branch.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,1,https://github.com/open-mpi/hwloc/pull/327,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/327#issuecomment-423851380,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","What is your wrapper? Our windows support isn't in very good shape. We basically try to support MinGW and MSVC, only versions we have in CI VMs, and I don't know if that's very useful and/or enough. So feedback about what you are doing with clang and why might be useful. We might even add a clang Windows regression testing if it works well.
Regarding the fix of pid_t in one example, I don't think it's appropriate. That test won't work on Windows anyway (there's a FIXME in there). If you're fixing a warning, I'd rather keep the warning to make it clear the code isn't ready for Windows. If you're fixing a build failure, I'd rather disable that test on Windows.
You should use #ifdef HAVE_UNISTD_H for avoiding #include <unistd.h> just like we do everywhere else. We don't do it in tests because we only build these on Windows uisng MinGW (which seems to provide unistd.h) but we can certainly add #ifdef there.
Missing definitions such as S_IRWXU should go to include/private/misc.h (look for HWLOC_WIN_SYS).
Regarding -Xlinker, any idea how to detect this? Should we detection the model of compiler during configure? Have you seen any other project support both cases like this?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,3,https://github.com/open-mpi/hwloc/pull/327#issuecomment-423863734,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Thanks for your detailed reply and interest.

What is your wrapper? Our windows support isn't in very good shape. We basically try to support MinGW and MSVC, only versions we have in CI VMs, and I don't know if that's very useful and/or enough. So feedback about what you are doing with clang and why might be useful. We might even add a clang Windows regression testing if it works well.

I wanted to build hwloc with MSVC or clang-cl so that it is ABI compatible with MSVC C runtime. I first tried the Visual Studio solution files which didn't work for me with VS2017. (Also tests were not built with it). Here's a simple script that I use, https://github.com/conda-forge/libhwloc-feedstock/blob/58c8b31a5dc2ccb58354e11f61bcc73469a4e900/recipe/cl_wrapper.sh so that I can use autotools with it.
clang-cl has the same interface as MSVC's cl and the libraries built are ABI compatible with libraries built with MSVC's cl.

Regarding the fix of pid_t in one example, I don't think it's appropriate. That test won't work on Windows anyway (there's a FIXME in there). If you're fixing a warning, I'd rather keep the warning to make it clear the code isn't ready for Windows. If you're fixing a build failure, I'd rather disable that test on Windows.

It's a build failure.

You should use #ifdef HAVE_UNISTD_H for avoiding #include <unistd.h> just like we do everywhere else. We don't do it in tests because we only build these on Windows uisng MinGW (which seems to provide unistd.h) but we can certainly add #ifdef there.

Will do

Regarding -Xlinker, any idea how to detect this? Should we detection the model of compiler during configure? Have you seen any other project support both cases like this?

I haven't seen the need for --output-def. That whole line can be dropped in the case of clang-cl (and I'm pretty sure, MinGW too, but that means libhwloc.def is not installed, but I don't see the need to install the .def file) . configure scripts checks for dependency style of the compiler and clang-cl gives msvc7 while MinGW gives gcc3. This can be used for checking, but I'm not sure how to access this variable CCDEPMODE in hwloc/Makefile.am",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/327#issuecomment-423880698,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Given that there's not a single comment in your wrapper, can you explain what it does?
There's another good thing about using clang on Windows, it's C99 compliant. MSVC is really a pain on that side. However I was rather thinking of using clang inside a VS solution (but didn't try). If our VS solution isn't compatible with recent VS, it's really annoying to maintain...
@sthibaul Do you remember why you used that def file for Windows 9 years ago? :)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/sthibaul,5,https://github.com/open-mpi/hwloc/pull/327#issuecomment-423899620,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","The .def file is needed to build the .lib file using MS' lib.exe. If clang already builds the .lib file itself, there is no need for the intermediate .def file.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/327#issuecomment-423912012,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","I just pushed 3 patches that take care of unistd.h, pid_t and S_IRWXU
For strcasecmp, AC_INCLUDES_DEFAULT already includes strings.h, and it should be enabled because we have AC_CHECK_HEADERS([strings.h]) above in the configure. Check your config.log to find out whether strings.h is found and HAVE_STRINGS_H is defined for the strcasecmp test.
For diff CR, I am looking for a smaller way to fix it.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,7,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424008691,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Given that there's not a single comment in your wrapper, can you explain what it does?

Will do tonight. (It was inspired by https://github.com/swig/cccl, but since it didn't work for me, I wrote one myself.)

I just pushed 3 patches that take care of unistd.h, pid_t and S_IRWXU

Thanks for doing this.

For strcasecmp, AC_INCLUDES_DEFAULT already includes strings.h, and it should be enabled because we have AC_CHECK_HEADERS([strings.h]) above in the configure. Check your config.log to find out whether strings.h is found and HAVE_STRINGS_H is defined for the strcasecmp test.

I looked into the config.log. ""strings.h"" is not found and HAVE_STRINGS_H is not defined because it is not available on windows/msvc. clang-cl choose to give a warning saying strcasecmp is implicitly defined instead of erroring out and the configure script thinks that strcasecmp is defined. Maybe the check for strcasecmp should happen only if strings.h is found ?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,8,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424074709,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","The compiler wrapper I'm using extract out all the link arguments and converts them to link.exe format and adds them at the end after -link
-lgdi32 -> gdi32.lib
-Lfolder -> -libpath:folder
-Wl,-DLL,IMPLIB:hwloc.lib -> -DLL IMPLIB:hwloc.lib
So, something like clang-cl asd.obj -Lfolder -Wl,-DLL,IMPLIB:hwloc.lib -lgdi32 becomes
clang-cl asd.obj -link gdi32.lib -libpath:folder -DLL IMPLIB:hwloc.lib",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,9,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424080014,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","The .def file is needed to build the .lib file using MS' lib.exe. If clang already builds the .lib file itself, there is no need for the intermediate .def file.

libtool generates .def file for clang-cl and then clang-cl uses MS' lib.exe to create the .lib file. I imagine this would be the same for a MinGW build, but I don't know your exact setup. Can you try removing that line and use a newer libtool?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,10,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424102028,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Indeed after installing libtool in my MSYS and removing all the Xlinker and mslib stuff from the Makefile, I get a working install. The install dir contains:
bin/:                                                                           
-rwxr-xr-x 1 ci None  487255 24 sept. 21:41 hwloc-annotate.exe                  
[...]
-rwxr-xr-x 1 ci None  401594 24 sept. 21:41 hwloc-patch.exe                     
-rwxr-xr-x 1 ci None 1452511 24 sept. 21:41 libhwloc-0.dll                      
-rwxr-xr-x 1 ci None  788655 24 sept. 21:41 lstopo-no-graphics.exe              
-rwxr-xr-x 1 ci None  835268 24 sept. 21:41 lstopo-win.exe                      
-rwxr-xr-x 1 ci None  835268 24 sept. 21:41 lstopo.exe                          
                                                                                
lib/:                                                                           
-rw-r--r-- 1 ci None 1299780 24 sept. 21:41 libhwloc.a                          
-rw-r--r-- 1 ci None  158616 24 sept. 21:41 libhwloc.dll.a                      
-rw-r--r-- 1 ci None    1046 24 sept. 21:41 libhwloc.la                         
drwxr-xr-x 1 ci None       0 24 sept. 21:41 pkgconfig                           

(The -0 suffix comes from this tarball not being an official release).
A normal hwloc release would have these additional files:
-rw-r--r-- 1 ci None    7995  2 sept. 14:59 libhwloc.def                        
-rw-r--r-- 1 ci None   35279  2 sept. 14:59 libhwloc.exp                        
-rw-r--r-- 1 ci None   59608  2 sept. 14:59 libhwloc.lib

Are they needed for external programs that would want to link to libhwloc?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/sthibaul,11,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424104345,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Are they needed for external programs that would want to link to libhwloc?

Yes, MSVC wants the .lib file",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424112419,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","@isuruf You might to try this patch. Hopefully, it will properly detect strcasecmp as missing.
bgoglin@f1531fa",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,13,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424145550,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Thanks @bgoglin, that works for me.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,14,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424212439,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","I pushed that fix too.
Now for diff CR/LF, we use -w in some tests because of CR/LF issues according to git log. But we don't use it in all tests. Can you check whether your added diff options is needed everywhere or only in tests that don't already have -w?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,15,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424218881,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.",You are right. They are needed only in tests that don't already have -w,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,16,https://github.com/open-mpi/hwloc/pull/327#issuecomment-424247739,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.",Hopefully diff CR/LF will be fixed with bgoglin@a4f6d41 (currently under testing in my clone),True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,17,https://github.com/open-mpi/hwloc/pull/327#issuecomment-425380627,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Thinking more about the Xlinker issue, I think the proper solution would be to have your wrapper replace -Xlinker --output-def -Xlinker .libs/libhwloc.def with -Xlinker -def:.libs/libhwloc.def
Can't you dequeue all arguments behind a -Xlinker, than apply a regexp to replace ""--output-def X"" with -def:X and then requeue the result behind one -Xlinker per word?
Did you have a chance to test the diff -u -w patch?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,18,https://github.com/open-mpi/hwloc/pull/327#issuecomment-425651192,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.",I did use the diff -u -w patch and it works. There's an issue with S_IRWXU because private/misc.h header is not included hwloc_backends.c test file,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/bgoglin,19,https://github.com/open-mpi/hwloc/pull/327#issuecomment-425653928,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.","Thanks, I pushed the diff -w patch to git master and v2.0, and I pushed the addition of #include <private/misc.h> in hwloc_backends.c",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,327,2018-09-23T21:20:12Z,2018-09-29T16:39:49Z,2018-09-29T16:44:53Z,CLOSED,False,44,16,18,https://github.com/isuruf,Support for clang-cl on windows,4,[],https://github.com/open-mpi/hwloc/pull/327,https://github.com/isuruf,20,https://github.com/open-mpi/hwloc/pull/327#issuecomment-425658307,"I'm using a simple wrapper around clang-cl for making the configure script work.
There are few things that I need to change that I need help with,


Line 
  
    
      hwloc/hwloc/Makefile.am
    
    
         Line 170
      in
      f3ba1fe
    
  
  
    

        
          
           ldflags += -Xlinker --output-def -Xlinker .libs/libhwloc.def 
        
    
  

 needs to be changed as clang-cl doesn't understand --output-def and libtool creates it. It needs to be changed to -Xlinker -def:.libs/libhwloc.def depending on whether we are using clang-cl or gnu tools like mingw and cygwin.


strcasecmp check goes through with a warning of implicit declaration.",I checked latest master with bgoglin@ace7c21 and all tests passed except for x86 tests which I've disabled when building. Thanks for all your help.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,331,2018-10-11T12:04:12Z,2018-10-11T12:19:26Z,2018-10-11T12:19:26Z,MERGED,True,66,4,5,https://github.com/vhoyet,cygwin fixes,3,[],https://github.com/open-mpi/hwloc/pull/331,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/331,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,332,2018-10-11T12:25:48Z,2018-10-11T12:27:24Z,2018-10-11T12:27:24Z,CLOSED,False,66,4,5,https://github.com/vhoyet,v.2.0 cygwin,3,[],https://github.com/open-mpi/hwloc/pull/332,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/332,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,333,2018-10-11T12:31:41Z,2018-10-11T13:04:57Z,2018-10-11T13:04:57Z,MERGED,True,66,4,5,https://github.com/vhoyet,V2.0 cygwin,3,[],https://github.com/open-mpi/hwloc/pull/333,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/333,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,334,2018-10-11T12:35:00Z,2018-10-11T13:05:13Z,2018-10-11T13:05:13Z,MERGED,True,2,2,2,https://github.com/vhoyet,v1.11 cygwin,1,[],https://github.com/open-mpi/hwloc/pull/334,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/334,"Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr
(cherry picked from commit 6fbf73f)","Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr
(cherry picked from commit 6fbf73f)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,341,2018-12-14T09:57:04Z,2018-12-14T10:05:46Z,2018-12-14T10:08:30Z,CLOSED,False,130919,0,636,https://github.com/hannesweisbach,Fix documentation on API version,1,[],https://github.com/open-mpi/hwloc/pull/341,https://github.com/hannesweisbach,1,https://github.com/open-mpi/hwloc/pull/341,"The documentation used a right-shift operator to construct HWLOC_API_VERSION from a release version. This made no sense and the left-shift operator should be used.
Signed-off-by: Hannes Weisbach hannes.weisbach@gmail.com","The documentation used a right-shift operator to construct HWLOC_API_VERSION from a release version. This made no sense and the left-shift operator should be used.
Signed-off-by: Hannes Weisbach hannes.weisbach@gmail.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,342,2018-12-14T10:09:02Z,2018-12-14T10:12:53Z,2018-12-14T10:33:57Z,MERGED,True,1,1,1,https://github.com/hannesweisbach,Fix documentation on API version,1,[],https://github.com/open-mpi/hwloc/pull/342,https://github.com/hannesweisbach,1,https://github.com/open-mpi/hwloc/pull/342,"The documentation used a right-shift operator to construct HWLOC_API_VERSION from a release version. This made no sense and the left-shift operator should be used.
Signed-off-by: Hannes Weisbach hannes.weisbach@gmail.com","The documentation used a right-shift operator to construct HWLOC_API_VERSION from a release version. This made no sense and the left-shift operator should be used.
Signed-off-by: Hannes Weisbach hannes.weisbach@gmail.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,342,2018-12-14T10:09:02Z,2018-12-14T10:12:53Z,2018-12-14T10:33:57Z,MERGED,True,1,1,1,https://github.com/hannesweisbach,Fix documentation on API version,1,[],https://github.com/open-mpi/hwloc/pull/342,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/342#issuecomment-447279297,"The documentation used a right-shift operator to construct HWLOC_API_VERSION from a release version. This made no sense and the left-shift operator should be used.
Signed-off-by: Hannes Weisbach hannes.weisbach@gmail.com","Thanks, I found another similar typo in the doxy file, I'll fix it.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,344,2018-12-19T15:27:54Z,2020-09-14T09:08:24Z,2021-02-08T13:52:56Z,MERGED,True,3,1071,8,https://github.com/bgoglin,linux: remove powerpc device-tree parsing,2,[],https://github.com/open-mpi/hwloc/pull/344,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/344,"This code was contributed by Alexey Kardashevskiy from IBM in 2010/09 (hwloc 1.1)
when the Linux kernel on powerpc didn't use the device-tree to discover
cores/caches and expose them in sysfs. This was fixed in 2.6.29 in 2009
(93197a36a9c16a85fb24cf5a8639f7bf9af838a3) which is deployed everywhere now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","This code was contributed by Alexey Kardashevskiy from IBM in 2010/09 (hwloc 1.1)
when the Linux kernel on powerpc didn't use the device-tree to discover
cores/caches and expose them in sysfs. This was fixed in 2.6.29 in 2009
(93197a36a9c16a85fb24cf5a8639f7bf9af838a3) which is deployed everywhere now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,344,2018-12-19T15:27:54Z,2020-09-14T09:08:24Z,2021-02-08T13:52:56Z,MERGED,True,3,1071,8,https://github.com/bgoglin,linux: remove powerpc device-tree parsing,2,[],https://github.com/open-mpi/hwloc/pull/344,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/344#issuecomment-448635988,"This code was contributed by Alexey Kardashevskiy from IBM in 2010/09 (hwloc 1.1)
when the Linux kernel on powerpc didn't use the device-tree to discover
cores/caches and expose them in sysfs. This was fixed in 2.6.29 in 2009
(93197a36a9c16a85fb24cf5a8639f7bf9af838a3) which is deployed everywhere now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","@gpaulsen @jjhursey I'll merge this in hwloc 2.1 or 2.2 unless you're aware of any POWER platform where the Linux kernel topology isn't fine, but POWER7/8/9 looks OK for my quick testing.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,344,2018-12-19T15:27:54Z,2020-09-14T09:08:24Z,2021-02-08T13:52:56Z,MERGED,True,3,1071,8,https://github.com/bgoglin,linux: remove powerpc device-tree parsing,2,[],https://github.com/open-mpi/hwloc/pull/344,https://github.com/jjhursey,3,https://github.com/open-mpi/hwloc/pull/344#issuecomment-449043988,"This code was contributed by Alexey Kardashevskiy from IBM in 2010/09 (hwloc 1.1)
when the Linux kernel on powerpc didn't use the device-tree to discover
cores/caches and expose them in sysfs. This was fixed in 2.6.29 in 2009
(93197a36a9c16a85fb24cf5a8639f7bf9af838a3) which is deployed everywhere now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",This sounds ok to me.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,344,2018-12-19T15:27:54Z,2020-09-14T09:08:24Z,2021-02-08T13:52:56Z,MERGED,True,3,1071,8,https://github.com/bgoglin,linux: remove powerpc device-tree parsing,2,[],https://github.com/open-mpi/hwloc/pull/344,https://github.com/gpaulsen,4,https://github.com/open-mpi/hwloc/pull/344#issuecomment-449069388,"This code was contributed by Alexey Kardashevskiy from IBM in 2010/09 (hwloc 1.1)
when the Linux kernel on powerpc didn't use the device-tree to discover
cores/caches and expose them in sysfs. This was fixed in 2.6.29 in 2009
(93197a36a9c16a85fb24cf5a8639f7bf9af838a3) which is deployed everywhere now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","Yes, it's power9 with the more exotic architecture.  sounds okay to me too, thanks.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,345,2018-12-19T15:31:14Z,2019-03-21T21:08:52Z,2019-06-24T08:40:47Z,MERGED,True,8,1210,16,https://github.com/bgoglin,linux: remove /proc/cpuinfo-based topology detection,1,[],https://github.com/open-mpi/hwloc/pull/345,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/345,"sysfs topology is available since 2.6.16,
stop parsing core/package information in /proc/cpuinfo
/proc/cpuinfo is still used for getting CPUModel etc.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","sysfs topology is available since 2.6.16,
stop parsing core/package information in /proc/cpuinfo
/proc/cpuinfo is still used for getting CPUModel etc.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,345,2018-12-19T15:31:14Z,2019-03-21T21:08:52Z,2019-06-24T08:40:47Z,MERGED,True,8,1210,16,https://github.com/bgoglin,linux: remove /proc/cpuinfo-based topology detection,1,[],https://github.com/open-mpi/hwloc/pull/345,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/345#issuecomment-448636523,"sysfs topology is available since 2.6.16,
stop parsing core/package information in /proc/cpuinfo
/proc/cpuinfo is still used for getting CPUModel etc.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",I'll likely merge this in 2.1 unless we find an architecture where /proc/cpuinfo still has more info than sysfs.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,351,2019-02-22T13:42:12Z,2019-05-10T13:18:38Z,2019-05-10T13:19:07Z,MERGED,True,774,241,26,https://github.com/bgoglin,[WIP DNM] Add memory-side caches,14,[],https://github.com/open-mpi/hwloc/pull/351,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/351,"Add a new object type for memory-side caches placed above NUMA nodes.
Support in Linux isn't totally finalized, I'll add a test a fix the code once it's merged upstream.","Add a new object type for memory-side caches placed above NUMA nodes.
Support in Linux isn't totally finalized, I'll add a test a fix the code once it's merged upstream.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,352,2019-02-26T09:41:55Z,2019-05-30T05:58:26Z,2019-06-24T08:40:47Z,CLOSED,False,1082,386,23,https://github.com/bgoglin,"Add ""Die"" object for upcoming x86 processors with multiple dies per package",14,[],https://github.com/open-mpi/hwloc/pull/352,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/352,"CPUID.1f and Linux are going to expose them, we'll make them Groups in v1.11 and v2.0, and a new Die object in 2.1.
TODO wait for kernel patches renaming sysfs files to be accepted
TODO add x86 and linux test cases","CPUID.1f and Linux are going to expose them, we'll make them Groups in v1.11 and v2.0, and a new Die object in 2.1.
TODO wait for kernel patches renaming sysfs files to be accepted
TODO add x86 and linux test cases",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,352,2019-02-26T09:41:55Z,2019-05-30T05:58:26Z,2019-06-24T08:40:47Z,CLOSED,False,1082,386,23,https://github.com/bgoglin,"Add ""Die"" object for upcoming x86 processors with multiple dies per package",14,[],https://github.com/open-mpi/hwloc/pull/352,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/352#issuecomment-497213715,"CPUID.1f and Linux are going to expose them, we'll make them Groups in v1.11 and v2.0, and a new Die object in 2.1.
TODO wait for kernel patches renaming sysfs files to be accepted
TODO add x86 and linux test cases",Merged in git master as commit 3c7f140,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,355,2019-03-15T09:37:48Z,,2020-05-10T05:54:35Z,OPEN,False,3,3,2,https://github.com/cniethammer,Minor typos in hwloc readme and netloc doxygen,1,[],https://github.com/open-mpi/hwloc/pull/355,https://github.com/cniethammer,1,https://github.com/open-mpi/hwloc/pull/355,Fixed a view minor typos in the hwloc readme and netloc intro doxygen.,Fixed a view minor typos in the hwloc readme and netloc intro doxygen.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,355,2019-03-15T09:37:48Z,,2020-05-10T05:54:35Z,OPEN,False,3,3,2,https://github.com/cniethammer,Minor typos in hwloc readme and netloc doxygen,1,[],https://github.com/open-mpi/hwloc/pull/355,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/355#issuecomment-473224134,Fixed a view minor typos in the hwloc readme and netloc intro doxygen.,@rools32 Do you touch these files in your upcoming netloc rework? Don't want to cause useless conflicts by merging this too early.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,355,2019-03-15T09:37:48Z,,2020-05-10T05:54:35Z,OPEN,False,3,3,2,https://github.com/cniethammer,Minor typos in hwloc readme and netloc doxygen,1,[],https://github.com/open-mpi/hwloc/pull/355,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/355#issuecomment-603101031,Fixed a view minor typos in the hwloc readme and netloc intro doxygen.,"Note to open pull requests: some things changed in the CI yesterday, you'll need to rebase on top of master to avoid total CI failure.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,355,2019-03-15T09:37:48Z,,2020-05-10T05:54:35Z,OPEN,False,3,3,2,https://github.com/cniethammer,Minor typos in hwloc readme and netloc doxygen,1,[],https://github.com/open-mpi/hwloc/pull/355,https://github.com/cniethammer,4,https://github.com/open-mpi/hwloc/pull/355#issuecomment-626278050,Fixed a view minor typos in the hwloc readme and netloc intro doxygen.,@bgoglin: Just rebased PR on top of latest master,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,356,2019-03-19T13:16:50Z,2019-03-19T13:32:47Z,2019-03-19T13:36:21Z,MERGED,True,2,3,1,https://github.com/clementFoyer,Silence warnings when compiled on macOS Sierra 10.12.6,1,[],https://github.com/open-mpi/hwloc/pull/356,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/356,"* Remove unused variable
* Change string by format to comply with -Wformat-security","* Remove unused variable
* Change string by format to comply with -Wformat-security",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,356,2019-03-19T13:16:50Z,2019-03-19T13:32:47Z,2019-03-19T13:36:21Z,MERGED,True,2,3,1,https://github.com/clementFoyer,Silence warnings when compiled on macOS Sierra 10.12.6,1,[],https://github.com/open-mpi/hwloc/pull/356,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/356#issuecomment-474370910,"* Remove unused variable
* Change string by format to comply with -Wformat-security","Pulled, thanks.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,357,2019-03-25T16:10:15Z,2019-04-12T20:26:35Z,2019-06-24T08:40:47Z,CLOSED,False,401,118,10,https://github.com/bgoglin,[WIP DNM] Ignore NVIDIA GPU memory NUMA nodes by default,7,[],https://github.com/open-mpi/hwloc/pull/357,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/357,"Remove them from the topology so that we don't allocate there by mistake. Another option would be to mark them as disallowed by default.
If we keep them, we should say which GPU corresponds to which NUMA node (subtype + PCIBusID info attr).
TODO add a test
We're not supposed to have NUMA nodes inside I/O devices right now. We fixed the locality to attach to the correct socket, but not to the GPU itself.
We may have a similar question when we'll have NVDIMM-like persistent memory regions on future NVMe.","Remove them from the topology so that we don't allocate there by mistake. Another option would be to mark them as disallowed by default.
If we keep them, we should say which GPU corresponds to which NUMA node (subtype + PCIBusID info attr).
TODO add a test
We're not supposed to have NUMA nodes inside I/O devices right now. We fixed the locality to attach to the correct socket, but not to the GPU itself.
We may have a similar question when we'll have NVDIMM-like persistent memory regions on future NVMe.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,357,2019-03-25T16:10:15Z,2019-04-12T20:26:35Z,2019-06-24T08:40:47Z,CLOSED,False,401,118,10,https://github.com/bgoglin,[WIP DNM] Ignore NVIDIA GPU memory NUMA nodes by default,7,[],https://github.com/open-mpi/hwloc/pull/357,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/357#issuecomment-482711381,"Remove them from the topology so that we don't allocate there by mistake. Another option would be to mark them as disallowed by default.
If we keep them, we should say which GPU corresponds to which NUMA node (subtype + PCIBusID info attr).
TODO add a test
We're not supposed to have NUMA nodes inside I/O devices right now. We fixed the locality to attach to the correct socket, but not to the GPU itself.
We may have a similar question when we'll have NVDIMM-like persistent memory regions on future NVMe.",Merged in master 4c37b1d,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,1,https://github.com/open-mpi/hwloc/pull/359,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/sthibaul,2,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495065764,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Interesting :)
In cpuaffinity_exec, I believe you need to add a synchronization between the child and the parent. Otherwise the child might have the time to clone() before the parent manages to call ptrace().",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495112166,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Options -i and --input should use the existing helpers in utils.h so that they handle XML/CPUID/Synthetic etc.
There's also some duplication in hwloc_obj_from_string() which already exists as generic helpers in hwloc-calc.h with support for ranges etc.
If it's only needed for --restrict obj:X, we should extend --restrict in other tools to also support object specifications. Things should be uniform there. Unfortunately, once you start doing that, it means you need to support both physical and logical specification with command-line options. I wonder if we should just use --restrict cpuset and keep telling people to use hwloc-calc for generating the cpuset. Or we should support foo:Px and foo:Lx for logical and physical indexes.
The scatter policy already exists in hwloc-distrib, which could also be extended to export objects and/or indexes.
I think this should be split into two parts:

one for generating list of objects, and this should be integrated in hwloc-calc. It's just a matter of adding new output options. We already have options for exporting with different separators, physical or logical index, etc. Those will be needed for your code anyway.
Also -i and --input are already supported there.
one for binding new threads using such a list, which doesn't have -i or --input since it uses binding",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,4,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495351043,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Options -i and --input should use the existing helpers in utils.h so that they handle XML/CPUID/Synthetic etc.

Done

There's also some duplication in hwloc_obj_from_string() which already exists as generic helpers in hwloc-calc.h with support for ranges etc.

Painfully done :)

If it's only needed for --restrict obj:X, we should extend --restrict in other tools to also support object specifications. Things should be uniform there. Unfortunately, once you start doing that, it means you need to support both physical and logical specification with command-line options. I wonder if we should just use --restrict cpuset and keep telling people to use hwloc-calc for generating the cpuset. Or we should support foo:Px and foo:Lx for logical and physical indexes.

Done, logical option will work both for input and output.
As a user myself I enjoy the feature allowing to name object and indexes. It significantly shorten command lines. I referred to hwloc-calc(1) for details about input format.

The scatter policy already exists in hwloc-distrib, which could also be extended to export objects and/or indexes.
I think this should be split into two parts:

Yet to be done",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,5,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495353533,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Interesting :)
In cpuaffinity_exec, I believe you need to add a synchronization between the child and the parent. Otherwise the child might have the time to clone() before the parent manages to call ptrace().

I tried to fix this by attaching inside child instead of parent before calling execvp. However, I remember having issue with way of doing it. No errors are showing up but it should be tested.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,6,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495408034,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"The scatter policy already exists in hwloc-distrib, which could also be extended to export objects and/or indexes.

I looked at the code of hwloc-distrib. It is mainly based on hwloc_distrib() function in helper.h
I think that enumeration of topology objects of a same depth is what is done in this function.
It is possible to extend it to implement the tleaf as it is done in hwloc-tbind-obj.c. It does a very similar work. The interface can nearly remains the same (instead of providing a starting and ending depths, provide a list of depths) and will output distributions with policy.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,7,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495771689,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Interesting :)
In cpuaffinity_exec, I believe you need to add a synchronization between the child and the parent. Otherwise the child might have the time to clone() before the parent manages to call ptrace().

I think this is properly fixed now with synchronization through signals.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/sthibaul,8,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495792865,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Interesting :)
In cpuaffinity_exec, I believe you need to add a synchronization between the child and the parent. Otherwise the child might have the time to clone() before the parent manages to call ptrace().

I think this is properly fixed now with synchronization through signals.

Perhaps using semaphores would be simpler?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/jsquyres,9,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495796959,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,Did something go wrong with this PR?  There are currently 256 commits listed here...?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/bgoglin,10,https://github.com/open-mpi/hwloc/pull/359#issuecomment-495800141,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"@jsquyres I'd say many fixup commits are not squashed, and most of them are duplicated because the branch was merged with a rebased version of itself.
@NicolasDenoyelle Note that PRs are automatically updated if rebase/squash and push --force to cleanup your history",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/359#issuecomment-496813200,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"You should likely split this PR in small and easier-to-review pieces to ease its converging/merging. One first good step would be to just add hwloc-bind-threads, with this as a possible usage:
hwloc-bind-threads -t core -- myprog

Where -t core means we're binding the first thread to first core, second thread to second core, etc. And last threads are not bound if there aren't enough cores. Or option to wrap-around.
hwloc-bind-threads <location> ... -- myprog

This would bind each thread to its respective location if any, where location is implemented exactly as in hwloc-calc/bind/...
Add --single and --strict just like in hwloc-bind.
Unless I am mistaken, Linux is the only OS where a process can bind a thread of another process, hence all this can be made Linux-specific.
And add a basic test that counts the number of cores, spawns N+1 threads with pthread_create and they check their own binding once ptrace had time to bind them. Not sure testing with OpenMP is a good idea because the way OS threads are created and given to user OpenMP tasks can vary from one implementation to another.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/sthibaul,12,https://github.com/open-mpi/hwloc/pull/359#issuecomment-496821045,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Actually I believe windows can as well, by using OpenThread to get a handle on the thread to be bound",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,13,https://github.com/open-mpi/hwloc/pull/359#issuecomment-502278409,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Actually I believe windows can as well, by using OpenThread to get a handle on the thread to be bound

In order to call OpenThread, you have to know which thread to open. ptrace allow to hook on threads
creation. I can't find such a thing on windows documentation.
I found this: https://docs.microsoft.com/en-us/windows/desktop/Dlls/dllmain
which will notify you when a DLL will create a thread. However you can't get the thread ID to further call OpenThread.
Edit: Nevermind I found this: https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntddk/nf-ntddk-pssetcreatethreadnotifyroutine. This probably what is needed to hook on thread creation.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/bgoglin,14,https://github.com/open-mpi/hwloc/pull/359#issuecomment-502288339,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Forget about Windows for now, there are too many missing pieces there. Make all your thread-binding stuff Linux-specific as I said 17 days ago.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/jsquyres,15,https://github.com/open-mpi/hwloc/pull/359#issuecomment-502698147,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Thanks for all the updates.
Taking a step back, though, I see a lot of other pthread tests in configure already, and I see pthread code used throughout the rest of hwloc.  Is there really a need for your new configure test?  Or does your new pthread-using C code just need to be protected by existing macros?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/NicolasDenoyelle,16,https://github.com/open-mpi/hwloc/pull/359#issuecomment-502707634,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"it looks like this test is only run from hwloc's configure.ac. Is this macro also defined if hwloc is embedded?

ptrace configure tests are running in the scope of macros used for hwloc utilities.
pthread tests are running indeed from configure.ac. I guess it does run in embedded mode.
From configure.ac and config/hwloc_internal.m4 I could not find anything preventing it.

Is there really a need for your new configure test? Or does your new pthread-using C code just need to be protected by existing macros?

hwloc does not define macro HAVE_PTHREAD. pthread is required to enable some tests at make check. If it is not defined then tests do not run. I think there is a need for this test in order to
have pthread-using C protected by this macro which has a different meaning than existing C macros.

Make all your thread-binding stuff Linux-specific as I said 17 days ago.

I am working on it. I'll do one branche and one PR per feature as you proposed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/jsquyres,17,https://github.com/open-mpi/hwloc/pull/359#issuecomment-502717864,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"@NicolasDenoyelle Thanks for investigating the configury stuff (embedded, etc.).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,359,2019-05-22T21:04:56Z,2020-04-29T14:42:08Z,2020-04-29T14:42:09Z,CLOSED,False,2359,4,10,https://github.com/NicolasDenoyelle,hwloc-affinity,282,[],https://github.com/open-mpi/hwloc/pull/359,https://github.com/bgoglin,18,https://github.com/open-mpi/hwloc/pull/359#issuecomment-603100903,Extend hwloc utilities with a tool to bind threads to single processing units with a policy.,"Note to open pull requests: some things changed in the CI yesterday, you'll need to rebase on top of master to avoid total CI failure.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,361,2019-06-17T20:47:03Z,,2020-04-29T15:41:02Z,OPEN,False,1057,3,7,https://github.com/NicolasDenoyelle,add tool and tests for binding threads according to a set of locations,15,[],https://github.com/open-mpi/hwloc/pull/361,https://github.com/NicolasDenoyelle,1,https://github.com/open-mpi/hwloc/pull/361,"Decomposing Pull Request (PR) #359 into several PRs.
This PR adds a linux specific utility to bind threads in the order of their creation according to a user
defined list of cpusets.","Decomposing Pull Request (PR) #359 into several PRs.
This PR adds a linux specific utility to bind threads in the order of their creation according to a user
defined list of cpusets.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,361,2019-06-17T20:47:03Z,,2020-04-29T15:41:02Z,OPEN,False,1057,3,7,https://github.com/NicolasDenoyelle,add tool and tests for binding threads according to a set of locations,15,[],https://github.com/open-mpi/hwloc/pull/361,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/361#issuecomment-603100768,"Decomposing Pull Request (PR) #359 into several PRs.
This PR adds a linux specific utility to bind threads in the order of their creation according to a user
defined list of cpusets.","Note to open pull requests: some things changed in the CI yesterday, you'll need to rebase on top of master to avoid total CI failure.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,370,2019-10-21T21:49:46Z,,2020-03-24T08:31:39Z,OPEN,False,6920,2109,172,https://github.com/NicolasDenoyelle,Distrib,135,[],https://github.com/open-mpi/hwloc/pull/370,https://github.com/NicolasDenoyelle,1,https://github.com/open-mpi/hwloc/pull/370,"This branch is an addition to exisitng hwloc_distrib() method to distribute cpusets of the topology.
It adds a new way to iterate over topology objects of a single level with a hierarchical policy.
Utility hwloc-distrib has been modified to reflect the new capabilities.
This branch purpose is to bring thread binding policies to hwloc toolset by using it with hwloc-thread-bind branch.","This branch is an addition to exisitng hwloc_distrib() method to distribute cpusets of the topology.
It adds a new way to iterate over topology objects of a single level with a hierarchical policy.
Utility hwloc-distrib has been modified to reflect the new capabilities.
This branch purpose is to bring thread binding policies to hwloc toolset by using it with hwloc-thread-bind branch.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,370,2019-10-21T21:49:46Z,,2020-03-24T08:31:39Z,OPEN,False,6920,2109,172,https://github.com/NicolasDenoyelle,Distrib,135,[],https://github.com/open-mpi/hwloc/pull/370,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/370#issuecomment-561583728,"This branch is an addition to exisitng hwloc_distrib() method to distribute cpusets of the topology.
It adds a new way to iterate over topology objects of a single level with a hierarchical policy.
Utility hwloc-distrib has been modified to reflect the new capabilities.
This branch purpose is to bring thread binding policies to hwloc toolset by using it with hwloc-thread-bind branch.",@NicolasDenoyelle can you rebase/squash these commits to ease review?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,370,2019-10-21T21:49:46Z,,2020-03-24T08:31:39Z,OPEN,False,6920,2109,172,https://github.com/NicolasDenoyelle,Distrib,135,[],https://github.com/open-mpi/hwloc/pull/370,https://github.com/NicolasDenoyelle,3,https://github.com/open-mpi/hwloc/pull/370#issuecomment-561671324,"This branch is an addition to exisitng hwloc_distrib() method to distribute cpusets of the topology.
It adds a new way to iterate over topology objects of a single level with a hierarchical policy.
Utility hwloc-distrib has been modified to reflect the new capabilities.
This branch purpose is to bring thread binding policies to hwloc toolset by using it with hwloc-thread-bind branch.","Yes.
I am busy at the moment.
I'll let you know as soon as I am done!
…
On Wed, Dec 4, 2019, 04:39 Brice Goglin ***@***.***> wrote:
 @NicolasDenoyelle <https://github.com/NicolasDenoyelle> can you
 rebase/squash these commits to ease review?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#370?email_source=notifications&email_token=ACMX3MFMTQLBZTOITDJAVYLQW6CEXA5CNFSM4JDFSQ5KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEF4RM4A#issuecomment-561583728>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACMX3MCNJKP2SI7CKTDMHM3QW6CEXANCNFSM4JDFSQ5A>
 .",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,370,2019-10-21T21:49:46Z,,2020-03-24T08:31:39Z,OPEN,False,6920,2109,172,https://github.com/NicolasDenoyelle,Distrib,135,[],https://github.com/open-mpi/hwloc/pull/370,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/370#issuecomment-603100623,"This branch is an addition to exisitng hwloc_distrib() method to distribute cpusets of the topology.
It adds a new way to iterate over topology objects of a single level with a hierarchical policy.
Utility hwloc-distrib has been modified to reflect the new capabilities.
This branch purpose is to bring thread binding policies to hwloc toolset by using it with hwloc-thread-bind branch.","Note to open pull requests: some things changed in the CI yesterday, you'll need to rebase on top of master to avoid total CI failure.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,375,2019-12-10T15:48:35Z,2019-12-11T09:44:07Z,2019-12-11T09:44:07Z,MERGED,True,323,23,8,https://github.com/vhoyet,FreeBSD : Add NUMA support,1,[],https://github.com/open-mpi/hwloc/pull/375,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/375,"FreeBSD 11 : NUMA discovery with distances
FreeBSD 12 : Binding
Fixes #340
Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr","FreeBSD 11 : NUMA discovery with distances
FreeBSD 12 : Binding
Fixes #340
Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,376,2019-12-13T20:02:15Z,2019-12-13T20:04:41Z,2019-12-13T20:04:41Z,CLOSED,False,3,1,1,https://github.com/senior7515,topology.c: fix undefined behavior of passing null to qsort(),1,[],https://github.com/open-mpi/hwloc/pull/376,https://github.com/senior7515,1,https://github.com/open-mpi/hwloc/pull/376,"stdlib.h:828 defines qsort as:
/* Sort NMEMB elements of BASE, of SIZE bytes each,
using COMPAR to perform the comparisons.  */
extern void qsort (void *__base, size_t __nmemb, size_t __size,
__compar_fn_t __compar) __nonnull ((1, 4));
Explicitly marking arg1 and arg4 as nonnull which is caught by
the undefined behavior sanitizer -fsanitize=undefined
and running any program with environment variable set
UBSAN_OPTIONS=""print_stacktrace=1""
This error was reported by clang-9.
Fixes: #373","stdlib.h:828 defines qsort as:
/* Sort NMEMB elements of BASE, of SIZE bytes each,
using COMPAR to perform the comparisons.  */
extern void qsort (void *__base, size_t __nmemb, size_t __size,
__compar_fn_t __compar) __nonnull ((1, 4));
Explicitly marking arg1 and arg4 as nonnull which is caught by
the undefined behavior sanitizer -fsanitize=undefined
and running any program with environment variable set
UBSAN_OPTIONS=""print_stacktrace=1""
This error was reported by clang-9.
Fixes: #373",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,376,2019-12-13T20:02:15Z,2019-12-13T20:04:41Z,2019-12-13T20:04:41Z,CLOSED,False,3,1,1,https://github.com/senior7515,topology.c: fix undefined behavior of passing null to qsort(),1,[],https://github.com/open-mpi/hwloc/pull/376,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/376#issuecomment-565589339,"stdlib.h:828 defines qsort as:
/* Sort NMEMB elements of BASE, of SIZE bytes each,
using COMPAR to perform the comparisons.  */
extern void qsort (void *__base, size_t __nmemb, size_t __size,
__compar_fn_t __compar) __nonnull ((1, 4));
Explicitly marking arg1 and arg4 as nonnull which is caught by
the undefined behavior sanitizer -fsanitize=undefined
and running any program with environment variable set
UBSAN_OPTIONS=""print_stacktrace=1""
This error was reported by clang-9.
Fixes: #373","Please use 2.1, 1.11 is basically dead now. There's likely a similar warning there, but I am not sure I want to fix this almost-false-positive",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,377,2020-01-01T13:04:55Z,2020-01-01T13:07:07Z,2020-01-01T13:21:30Z,CLOSED,False,20,8,2,https://github.com/sthibaul,bsd: Make hwloc_get_sysctl able to return 64bit values,1,[],https://github.com/open-mpi/hwloc/pull/377,https://github.com/sthibaul,1,https://github.com/open-mpi/hwloc/pull/377,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,377,2020-01-01T13:04:55Z,2020-01-01T13:07:07Z,2020-01-01T13:21:30Z,CLOSED,False,20,8,2,https://github.com/sthibaul,bsd: Make hwloc_get_sysctl able to return 64bit values,1,[],https://github.com/open-mpi/hwloc/pull/377,https://github.com/sthibaul,2,https://github.com/open-mpi/hwloc/pull/377#issuecomment-570051810,,"Mmm, after a merge update it doesn't start the CI??",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,378,2020-01-01T13:07:16Z,2020-01-01T13:07:26Z,2020-01-01T13:21:30Z,CLOSED,False,20,8,2,https://github.com/sthibaul,bsd: Make hwloc_get_sysctl able to return 64bit values,1,[],https://github.com/open-mpi/hwloc/pull/378,https://github.com/sthibaul,1,https://github.com/open-mpi/hwloc/pull/378,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,379,2020-01-01T13:07:55Z,2020-01-01T13:21:08Z,2020-01-01T13:21:26Z,MERGED,True,20,8,2,https://github.com/sthibaul,bsd: Make hwloc_get_sysctl able to return 64bit values,1,[],https://github.com/open-mpi/hwloc/pull/379,https://github.com/sthibaul,1,https://github.com/open-mpi/hwloc/pull/379,Signed-off-by: Samuel Thibault samuel.thibault@ens-lyon.org,Signed-off-by: Samuel Thibault samuel.thibault@ens-lyon.org,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,379,2020-01-01T13:07:55Z,2020-01-01T13:21:08Z,2020-01-01T13:21:26Z,MERGED,True,20,8,2,https://github.com/sthibaul,bsd: Make hwloc_get_sysctl able to return 64bit values,1,[],https://github.com/open-mpi/hwloc/pull/379,https://github.com/sthibaul,2,https://github.com/open-mpi/hwloc/pull/379#issuecomment-570052182,Signed-off-by: Samuel Thibault samuel.thibault@ens-lyon.org,"Ah, ok, it was just waiting for an available worker. It's however dangerous that the PR list shows it as green even when the CI run hasn't proceeded yet.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,380,2020-01-01T13:31:32Z,2020-01-01T13:50:55Z,2020-01-01T13:50:55Z,MERGED,True,79,48,8,https://github.com/sthibaul,local_memory: Factorize and generalize memory size retrieval,1,[],https://github.com/open-mpi/hwloc/pull/380,https://github.com/sthibaul,1,https://github.com/open-mpi/hwloc/pull/380,Signed-off-by: Samuel Thibault samuel.thibault@ens-lyon.org,Signed-off-by: Samuel Thibault samuel.thibault@ens-lyon.org,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,383,2020-01-27T15:53:27Z,2020-01-27T16:17:09Z,2020-01-27T16:17:09Z,MERGED,True,8,8,3,https://github.com/dtaskoff,Execute hwloc_get_version.sh with sh,1,[],https://github.com/open-mpi/hwloc/pull/383,https://github.com/dtaskoff,1,https://github.com/open-mpi/hwloc/pull/383,"Long story short - I'm using hwloc on a system, on which I lose executable permissions, and since I have no control over this, I came to this solution, which, I thought, might be beneficial to someone else using hwloc.","Long story short - I'm using hwloc on a system, on which I lose executable permissions, and since I have no control over this, I came to this solution, which, I thought, might be beneficial to someone else using hwloc.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,383,2020-01-27T15:53:27Z,2020-01-27T16:17:09Z,2020-01-27T16:17:09Z,MERGED,True,8,8,3,https://github.com/dtaskoff,Execute hwloc_get_version.sh with sh,1,[],https://github.com/open-mpi/hwloc/pull/383,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/383#issuecomment-578819240,"Long story short - I'm using hwloc on a system, on which I lose executable permissions, and since I have no control over this, I came to this solution, which, I thought, might be beneficial to someone else using hwloc.","Looks good to me, I'll merge (and backport to 2.1) after CI is done building/testing this.
Thanks a lot to both of you.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,387,2020-03-03T10:10:54Z,2020-03-03T12:43:53Z,2020-03-03T12:43:53Z,MERGED,True,121,4,8,https://github.com/vhoyet,FreeBSD : add last_cpu_location hooks,1,[],https://github.com/open-mpi/hwloc/pull/387,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/387,Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr,Signed-off-by: Valentin Hoyet valentin.hoyet@inria.fr,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,389,2020-03-11T10:30:08Z,2020-03-11T12:11:22Z,2020-04-06T08:54:10Z,MERGED,True,27,9,7,https://github.com/vhoyet,32 bits pci domain support ,2,[],https://github.com/open-mpi/hwloc/pull/389,https://github.com/vhoyet,1,https://github.com/open-mpi/hwloc/pull/389,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,395,2020-04-02T14:50:42Z,2020-04-02T14:53:49Z,2020-04-02T14:53:49Z,MERGED,True,23,24,8,https://github.com/jsquyres,Update various text URL references to https,1,['Doc'],https://github.com/open-mpi/hwloc/pull/395,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/395,Signed-off-by: Jeff Squyres jsquyres@cisco.com,Signed-off-by: Jeff Squyres jsquyres@cisco.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,397,2020-04-09T03:15:43Z,2020-04-10T09:33:59Z,2020-04-10T19:41:43Z,MERGED,True,1,1,1,https://github.com/rbellamy,Fix bash completion for zsh,1,[],https://github.com/open-mpi/hwloc/pull/397,https://github.com/rbellamy,1,https://github.com/open-mpi/hwloc/pull/397,"Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.","Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,397,2020-04-09T03:15:43Z,2020-04-10T09:33:59Z,2020-04-10T19:41:43Z,MERGED,True,1,1,1,https://github.com/rbellamy,Fix bash completion for zsh,1,[],https://github.com/open-mpi/hwloc/pull/397,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/397#issuecomment-611371978,"Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.","Hello
My zsh still complains after your change:
contrib/completion/hwloc-completion.bash:131: command not found: complete

Is there anything to enable in zsh for this to work?
Brice",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,397,2020-04-09T03:15:43Z,2020-04-10T09:33:59Z,2020-04-10T19:41:43Z,MERGED,True,1,1,1,https://github.com/rbellamy,Fix bash completion for zsh,1,[],https://github.com/open-mpi/hwloc/pull/397,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/397#issuecomment-611958948,"Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.","Ok somebody told me about bashcompinit, I am merging this and I will see if we need to document bashcompinit in the completion file itself.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,397,2020-04-09T03:15:43Z,2020-04-10T09:33:59Z,2020-04-10T19:41:43Z,MERGED,True,1,1,1,https://github.com/rbellamy,Fix bash completion for zsh,1,[],https://github.com/open-mpi/hwloc/pull/397,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/397#issuecomment-611959050,"Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.","By the way, thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,397,2020-04-09T03:15:43Z,2020-04-10T09:33:59Z,2020-04-10T19:41:43Z,MERGED,True,1,1,1,https://github.com/rbellamy,Fix bash completion for zsh,1,[],https://github.com/open-mpi/hwloc/pull/397,https://github.com/rbellamy,5,https://github.com/open-mpi/hwloc/pull/397#issuecomment-612187243,"Currently the bash completion script breaks for zsh since test ${BASH_VERSINFO[0]} -lt 4 && return gives the error /etc/bash_completion.d/hwloc-completion.bash:test:7: unknown condition: -lt because BASH_VERSINFO is empty.
I'm not a shell wizard, so my fix is probably not idiomatic. I did make sure it works on Bash 3, 4, 5 and zsh.","Sorry, I didn't see your question until just now! You're welcome.
About bashcompinit - it's a pretty standard install for folks using zsh who want to leverage the large ecosystem of bash completions.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,1,https://github.com/open-mpi/hwloc/pull/398,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,2,https://github.com/open-mpi/hwloc/pull/398#issuecomment-622592816,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Install rocm-smi library pkg following
https://rocm-documentation.readthedocs.io/en/latest/Installation_Guide/Installation-Guide.html
Then
cd hwloc
./autogen.sh
./configure --enable-rsmi --enable-plugins='rsmi' CPPFLAGS=-I/opt/rocm/rocm_smi/include/rocm_smi LDFLAGS=-L/opt/rocm/rocm_smi/lib --enable-shared",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,3,https://github.com/open-mpi/hwloc/pull/398#issuecomment-623480500,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Thanks, Brice
Let me go through the comments and come back to you.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/398#issuecomment-623944374,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Should we also call rsmi_dev_memory_total_get() to annotate the hwloc object with information like we do for opencl and cuda?
OpenCLGlobalMemorySize=3087360
OpenCLComputeUnits=68
CUDAGlobalMemorySize=16548352
CUDAL2CacheSize=6144
CUDAMultiProcessors=80
CUDACoresPerMP=64
CUDASharedMemorySizePerMP=48",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,5,https://github.com/open-mpi/hwloc/pull/398#issuecomment-624096627,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,We can add those in phase 2.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/398#issuecomment-624102068,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"OK
Feel free to add some words in doc/hwloc.dox (when we list dependencies, info attributes, OS device names, and interoperability helpers). Look for NVIDIA and add RSMI things nearby :)
I still haven't figured out whether it's better to name your info attribute AMDFoo or just a generic Foo.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,7,https://github.com/open-mpi/hwloc/pull/398#issuecomment-624656102,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,I will go ahead and make update based on what we discussed. Are you OK with that?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/398#issuecomment-624694504,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Yes sure, go ahead. You may even force push to replace your previous commit with a better one.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,9,https://github.com/open-mpi/hwloc/pull/398#issuecomment-625506842,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I'm multitasking right now. It will take some time for me to come back.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,10,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632730346,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Sorry about delay. I'm working on this task now. The good news is that they have added a ref count for rocm-smi library.
I have an issue after merged with latest code.
It used to show plugin (rsmi), now shows dlopen(rsmi) after configuration. When I run lstopo, I got segmentation fault. It has something to do with recent change for AIX. I'm debug it. Maybe you can point me to right direction.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,11,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632763405,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I fixed the issue by disable dlopen.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632901386,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Can you clarify what you meant by ""recent change for AIX""?
I review the code next week, thanks.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,13,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632901916,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"CI failed, looks like you need to add rsmi_status_string to tests/hwloc/ports/include/rsmi/rocm_smi.h
In file included from topology-rsmi.c:17:
/builds/workspace/basic_PR-398/hwloc-PR-398-20200522.2236.git60689bb/tests/hwloc/ports/include/rsmi/rocm_smi.h:37: error: ‘RSMI_MAX_NUM_FREQUENCIES’ undeclared here (not in a function)
topology-rsmi.c: In function ‘get_device_name’:
topology-rsmi.c:32: warning: implicit declaration of function ‘rsmi_status_string’",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,14,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632903619,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"It's related to the following check in
commit 9c02aa1
Author: Brice Goglin Brice.Goglin@inria.fr
Date:   Mon Feb 24 17:11:46 2020 +0100
configure: use dlopen instead of ltdl by default

I have to disable dlopen to use ltdl.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,15,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632903877,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,I fix the compile issue.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,16,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632931815,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,Which Linux distribution do you use? I'll see if I can test the dlopen code on a similar one here.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,17,https://github.com/open-mpi/hwloc/pull/398#issuecomment-632940603,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Ubuntu 18.04, I have to do the following:
./configure --disable-plugin-dlopen --enable-rsmi --enable-plugins='rsmi' CPPFLAGS=""-I/opt/rocm/rocm_smi/include/rocm_smi -I/opt/rocm/rocm_smi/include"" LDFLAGS=-L/opt/rocm/rocm_smi/lib --enable-shared
to disable dlopen",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,18,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633543719,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"We're trying to reproduce the dlopen issue here, and installing RSMI to test the code. In the meantime, here are a couple minor changes:

Remove #include dlfcn.h
Change all small get_device_foo() helper function to return 0/-1 on success error, or set the buffer to sane default values on error (e.g. set the linkspeed to 0).
Change back UUID to AMDUUID since you still have AMDSerial, and we cannot easily change NVIDIA info key names anymore. Sorry for changing my mind here.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,19,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633610228,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Have updated base on the comments.
thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,20,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633633601,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Thanks. Is the kernel driver in the upstream Linux kernel? Which minimal kernel version do we need? We couldn't reproduce the dlopen crash so far, but rsmi_init() fails because of the missing kernel driver :)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,21,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633672239,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"We should be able to use any version of driver, but lets try with latest up steamed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,22,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633687203,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I am preparing some documentation updates. They raised 2 questions:

did you consider using OSDEV subtype COPROC instead of GPU? The difference is small but I assume ROCm is not only about graphics but also about computing. CUDA uses COPROC. NVML uses GPU because it's really for management, and they create separate OS devices. I'd like to cleanup those subtypes in the future but it's not feasible for now
I found the Debian packages name 'librocm-smi-dev"" (Debian will ship official ROCm packages soon) but I am not sure about RPM package names. I found rocm_smi.h in ""rocm-smi-lib64"" in the AMD repo but this name looks a bit awkward to me. Do you know if that's what RHEL might ship in the future?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,23,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633701211,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"For the first question, I would use GPU. RSMI is used to manager GPU, similar to NVML. The compute API is provided by HIP, similar to CUDA.
For the second question, I will ask the developer and come back to you.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,24,https://github.com/open-mpi/hwloc/pull/398#issuecomment-633878994,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Here's the doc update I was talking about. Feel free to include them in your commit, or I 'll push them after merging your PR.
bgoglin@6c501ad",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,25,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634085538,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Updated based on your last comments.
For 1.st question, I have asked some high level architects and is waiting for comments.
For 2nd question,  it should be the same for both deb and rpm.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,26,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634557643,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I am finally testing this on a real machine with a radeon fiji nano. The plugin works fine with dlopen here on Centos7 with rocm-smi-lib64.x86_64 package version 2.2.0.3.rocm_rel_3.3_19_a482394-1
get_uuid fails (I added a status string printf but it's NULL).
get_serial returns an empty string.
name, linkspeed and BDF look correct.
Can you change the code to do these?

not set AMDSerial and AMDUUID when you get an error (instead of setting to empty string)
fix the if for PCI BDF in the main function, it should check for ==0 instead of -1
not set the BFD to 0 when you get an error. just set parent to hwloc_get_root_obj(topology); too, in that case.
by the way, the status string variable may move to inside the ifs
why do you printf in some cases and not others? people running apps over MPI over hwloc might wonder why they get these error even if they don't care about hwloc. The core hwloc has a way to hide such messages when HWLOC_HIDE_ERRORS=1 in the env (but it's not available to plugins, so we'd to duplicate getenv here).

I can take care of these changes now that I can test things. But I'd need your help about why rocm_smi return empty serial and fails to return the uuid.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,27,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634696686,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"get_uuid fails (I added a status string printf but it's NULL).
get_serial returns an empty string.
uuid and serial are supported only by newer GPU's, Fiji doesn't support it.
I made fix for other things. You can change it if it's minor.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,28,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634707487,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I think I am ready to merge this beside the small change I just put in the review.
Is it ready to merge on your side too? After this, I'll add envvars HWLOC_HIDE_ERRORS=1 (to optionally silence error messages) and HWLOC_RSMI_NO_SHUTDOWN=1 (to optionally disable rsmi_shutdown() if it breaks things when running a librsmi without refcounting).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,29,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634732606,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Added type check. If you ready, you can merge. I don't have more to change.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,30,https://github.com/open-mpi/hwloc/pull/398#issuecomment-634733437,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,I just put yet another comment in review. Otherwise testing looks good here.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,31,https://github.com/open-mpi/hwloc/pull/398#issuecomment-635409198,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@miketxli Now that we merged this, I seem to remember you had a hwloc/rsmi.h and a test case in the first submission? Can you push them back to a branch so that we look at them now?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,32,https://github.com/open-mpi/hwloc/pull/398#issuecomment-635416481,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Ok, let me take a look. Can you tell me how to compile and test that?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,33,https://github.com/open-mpi/hwloc/pull/398#issuecomment-635435065,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,Tarballs of git master are updated here after each commit/push https://ci.inria.fr/hwloc/job/basic/job/master/,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,34,https://github.com/open-mpi/hwloc/pull/398#issuecomment-637482465,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"@miketxli Hello, 2 questions.
hwloc/rsmi doesn't build over a manually-built rocm_smi_lib from github master because rocm_smi.h now includes rocm_smi/kfd_ioctl.h. It looks like to include rocm_smi/rocm_smi.h instead of rocm_smi.h (and remove the ending ""rocm_smi/"" from the include path). Can you confirm this?
I tried on a machine with 2 tahiti GPUs, rocm_smi doesn't seem to report any GPU. Are these cards too old?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,35,https://github.com/open-mpi/hwloc/pull/398#issuecomment-637566166,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"For 1.st question, yes, they have added one more header file with another path. I have made it work by doing this:
./configure --disable-plugin-dlopen --enable-rsmi --enable-plugins='rsmi' CPPFLAGS=""-I/opt/rocm/rocm_smi/include/rocm_smi -I/opt/rocm/rocm_smi/include"" LDFLAGS=-L/opt/rocm/rocm_smi/lib --enable-shared
For 2nd question, I haven't tested with any GPU older than Fiji. I will get the information for you.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,36,https://github.com/open-mpi/hwloc/pull/398#issuecomment-637635460,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"For 1.st question, they will take out the extra include later.
For 2nd question, the tahiti GPUs may not be supported by default through the kernel driver. How many AMD cards do you have? If you need newer cards, AMD can send you some sample cards.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,37,https://github.com/open-mpi/hwloc/pull/398#issuecomment-637656108,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"Given that rocm_smi_lib uses rocm_smi/rocm_smi.h everywhere, including in its own example, I changed the code to do the same. So now we configure with rocm_smi/include instead of rocm_smi/include/rocm_smi
We only have 2 very old tahiti (bought in 2012) and 2 fiji nano xt (sent by AMD a couple years ago when we started looking at HSA). If AMD can send some newer cards, it would be great. We'll need cards whose cooling is compatible with rack servers.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/bgoglin,38,https://github.com/open-mpi/hwloc/pull/398#issuecomment-641124005,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,Hello @miketxli Don't you have your original submission somewhere where you included hwloc/rsmi.h and tests/hwloc/rsmi.c? I will be able to test those now.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,398,2020-05-01T22:09:11Z,2020-05-28T08:23:44Z,2020-06-09T14:36:56Z,MERGED,True,386,2,11,https://github.com/miketxli,Add rsmi plugin for AMD GPU,1,[],https://github.com/open-mpi/hwloc/pull/398,https://github.com/miketxli,39,https://github.com/open-mpi/hwloc/pull/398#issuecomment-641339497,Signed-off-by: Mike Li Tianxinmike.Li@amd.com,"I have created pull request 404, have tested under Ubuntu 18.04",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/401,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634077464,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Good, I saved the similar OMPI commit and wanted to ping you about it. Unfortunately, looks like we still have troubles with long filenames:
tar: hwloc-PR-401-20200526.1649.gitddf75fd/doc/doxygen-doc/man
/man3/hwloc_topology_diff_u_hwloc_topology_diff_generic_s.3: file name is too long (max 99); not dumped",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634086528,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",The failure occured on a Centos6 box (where we build the tarball before passing it to other slaves for make check) with the AM 1.15 LT 246 AC 269 tar 1.23.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/jsquyres,4,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634141462,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","CentOS 6: that makes sense -- it's an older version of tar.
That being said, would it be possible to move the create-tarballs machine to be a more modern distro?  FWIW, I see:



Distro
GNU Tar version
Works / doesn't work




RHEL 6 / Centos 6
1.23
Doesn't work


RHEL 7 / Centos 7
1.26
Doesn't work


RHEL 8 / Centos 8
1.30
Works


Ubuntu 18
1.29
Works


Ubuntu 20
1.30
Works


MacOS 10.15 (Catalina)
bsdtar 3.3.2
Works



I did test making a tarball on MacOS and untarring it on RHEL 6 -- that seemed to work fine.  So it's just the creation of tarballs with long filenames that is the problem.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634144322,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",I'll build a more recent tar on those machines.,True,{'THUMBS_UP': ['https://github.com/jsquyres']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634316842,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Don't know why it still fails. It has tar 1.32 now, and I also changed the config so that it takes recent autotools even on the non-stable branches. The log is https://ci.inria.fr/hwloc/job/basic/view/change-requests/job/PR-401/3/consoleFull",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/jsquyres,7,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634317301,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",You might need to ./configure TAR=/path/to/tar (or maybe AM_TAR)...?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634321290,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","I added TAR=/path/to/new/tar in the env, the full path now appears in the log, it's using the right tar but still failing because of long filenames. Am I supposed to see some new options on the tar command line ?
tardir=hwloc-PR-401-20200527.0045.gitddf75fd && ${TAR-tar} chof - ""$tardir"" | BZIP2=${BZIP2--9} bzip2 -c >hwloc-PR-401-20200527.0045.gitddf75fd.tar.bz2
/builds/local/bin/tar: hwloc-PR-401-20200527.0045.gitddf75fd/utils/hwloc/test-hwloc-dump-hwdata/test-hwloc-dump-hwdata.sh.in: file name is too long (max 99); not dumped",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/jsquyres,9,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634340314,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Ok, here's the key:
${TAR-tar} chof - ""$tardir"" ...

The o option is equivalent to --old-archive, which means --format=o7.
Hence, it's defaulting back down to the ancient tar format (even though you have the new tar).
How does this work on Ubuntu 16?  I don't know, and I'm out of time at the moment.  ☹️",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,10,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634452695,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",I fails on Ubuntu 16.04 too (tar 1.28 and am 1.15).,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634455258,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","It actually fails on my bleeding-edge Debian too, I am getting the ""o"" option too.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634459203,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com",And it fails on ubuntu 18.04 too (automake 1.15.1 tar 1.29). I can't test Ubuntu 20 or RHEL 8 right now.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,401,2020-05-26T14:49:33Z,2020-05-27T20:57:31Z,2020-05-27T20:57:34Z,CLOSED,False,1,1,1,https://github.com/jsquyres,"configure.ac: remove ""tar-ustar""",1,['enhancement'],https://github.com/open-mpi/hwloc/pull/401,https://github.com/jsquyres,13,https://github.com/open-mpi/hwloc/pull/401#issuecomment-634935240,"Commit ba3ba61 introduced ""tar-ustar"" into the AM_INIT_AUTOMAKE line, citing the need for filenames longer than 99 characters in the dist tarball.
On MacOS 10.15.x (Catalina), the default ""tar"" option seems to allow for filenames longer than 99 characters (e.g., hwloc-2.3.0a1/doc/doxygen-doc/man/man3/hwloc_topology_diff_obj_attr_u_hwloc_topology_diff_obj_attr_generic_s.3, which is 111 characters long).  Hence, the need for tar-ustar does not seem to exist any longer.
Indeed, we have actually run into a developer who has run into a documented problem with the ustar format: it doesn't support UIDs greater than 21 bits in length, causing make dist to fail (and his UID is greater than 21 bits).  This developer was working in another Open MPI project (not hwloc), but we thought we'd bring this learned knowledge over to hwloc as well.
After some testing, it looks like not specifying a tar-* option to AM_INIT_AUTOMAKE causes Automake to not pass the --format option to tar, which -- at least with GNU tar -- defaults to --format=gnu.  This format has wide portability -- e.g., it works on old versions of NetBSD where tarballs created with the tar-pax Automake option do not work.
See openpmix/prrte#579 (comment) for a little more detail.
Signed-off-by: Jeff Squyres jsquyres@cisco.com","I must have previously tested incorrectly on Ubuntu 18.04 -- I confirm what you said above: it doesn't work, either.
I don't see a public interface to override the chof that Automake puts in as arguments to tar.
So perhaps the PR is just a loser; we should close it, because hwloc definitely has filenames that are over 99 characters in length, and the old v7 tar format doesn't allow them.  Of the options that Automake allows, it seems that hwloc needs ustar or newer.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/miketxli,1,https://github.com/open-mpi/hwloc/pull/404,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/404#issuecomment-641426658,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Did you test this on a machine with multiple GPUs? We want to make sure we identify GPUs correctly from different ways, but I don't have a working server with more than one AMD GPU.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/miketxli,3,https://github.com/open-mpi/hwloc/pull/404#issuecomment-641473740,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Yes, I did test it with two GPU's. I have requested to send new cards to you. They have to find out how to it.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/miketxli,4,https://github.com/open-mpi/hwloc/pull/404#issuecomment-641477094,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","After this I will work on to add more new features including XGMI connection. XGMI connects multiple GPU's. Any suggestion for how to add XGMI functionality? I have to go through the list like you mentioned before i.e.:
OpenCLGlobalMemorySize=3087360
OpenCLComputeUnits=68
CUDAGlobalMemorySize=16548352
CUDAL2CacheSize=6144
CUDAMultiProcessors=80
CUDACoresPerMP=64
CUDASharedMemorySizePerMP=48",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/404#issuecomment-641502874,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Thanks a lot for the shipment. In case it helps, Brad Benton from AMD Research@Austin was my contact who made AMD send some Fiji cards to us in May 2016. We should rather discuss this on my inria.fr email address.
Regarding XGMI, what do you want to expose? That's the interconnect between GPUs, right? If you want to expose the individual links between GPUs, it sound similar to what we want to do for NVLink between NVIDIA GPUs. The current plan (in the nvlink branch) is to expose that through a bandwidth matrix between GPU objects. The big question is which GPU objects. It could be PCI devices, which works very well, but PCI devices isn't what applications actually refer to. It could be OS devices such as rsmiX or nvmlX, but why would those get a distance matrix while cuda and OpenCL OS corresponding OS devices wouldn't? I am tempted to think of doing PCI and having helpers functions to translate those into OS devices.
If you have other information that is purely local to a single GPU, info attribute like those in OpenCL or CUDA are usually the generic way to expose them.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/miketxli,6,https://github.com/open-mpi/hwloc/pull/404#issuecomment-641531001,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Let me take a look of that branch.
Thanks
Mike",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,404,2020-06-09T14:35:25Z,2020-06-10T15:20:06Z,2020-06-10T15:20:06Z,MERGED,True,309,0,7,https://github.com/miketxli,Add tests for RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/404,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/404#issuecomment-642072916,"Change-Id: I600e7ea6f4b7e0b71722bca98c605c436316ac51
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","The test works as expected here too, and valgrind doesn't report any leak inside hwloc. I was even able to verify that things indeed break if hwloc calls rsmi_shut_down() inside the plugin when forcing an old rsmi lib to shutdown (using HWLOC_RSMI_SHUTDOWN=1). In short, everything looks good, I'll commit this and add some notes in the doc.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,1,https://github.com/open-mpi/hwloc/pull/406,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/406#issuecomment-655374796,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Hello. Can you clarify what information is added here for an example of platform, and if you plan to add more in the future?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,3,https://github.com/open-mpi/hwloc/pull/406#issuecomment-655531575,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","With this change I have added the information regarding the XGMI connection of the GPUs for RSMI plugin. If GUP's are connected through XGMI, it will show the HIVE ID and the GPU's connected to this each GPU. The following is an example with 2 GPU connected with XGMI:
PCIBridge L#6 (busid=0000:3c:04.0 id=10b5:9797 class=0604(PCIBridge) link=15.75GB/s buses=0000:[3d-3f])
PCIBridge L#7 (busid=0000:3d:00.0 id=1002:14a0 class=0604(PCIBridge) link=15.75GB/s buses=0000:[3e-3f])
PCIBridge L#8 (busid=0000:3e:00.0 id=1002:14a1 class=0604(PCIBridge) link=31.51GB/s buses=0000:[3f-3f])
PCI L#3 (busid=0000:3f:00.0 id=1002:66a1 class=0380(Display) link=15.00GB/s)
GPU L#1 (Backend=RSMI GPUVendor=AMD GPUModel=""Vega 20"" AMDSerial=PCB026064-0052 AMDUUID=61f2504172da5ee8 XGMIHIVEID=b7f9f50f7508bf17 XGMILinks=""rsmi1 "") ""rsmi0""
PCIBridge L#9 (busid=0000:3c:0c.0 id=10b5:9797 class=0604(PCIBridge) link=15.75GB/s buses=0000:[41-43])
PCIBridge L#10 (busid=0000:41:00.0 id=1002:14a0 class=0604(PCIBridge) link=15.75GB/s buses=0000:[42-43])
PCIBridge L#11 (busid=0000:42:00.0 id=1002:14a1 class=0604(PCIBridge) link=31.51GB/s buses=0000:[43-43])
PCI L#4 (busid=0000:43:00.0 id=1002:66a1 class=0380(Display) link=15.00GB/s)
GPU L#2 (Backend=RSMI GPUVendor=AMD GPUModel=""Vega 20"" AMDSerial=PCB026064-0121 AMDUUID=c3c4606172dc76b7 XGMIHIVEID=b7f9f50f7508bf17 XGMILinks=""rsmi0 "") ""rsmi1""
I'm planing to add GlobalMemorySize, ComputeUnits, and CacheSize in next step, since it require some changes from ROCm-SMI library.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/406#issuecomment-655592836,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","What's a hive?
Can you have things like a switch between multiple GPUs? Or are all these links only between GPUs? Is it possible to have multiple XGMI links between same GPUs?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,5,https://github.com/open-mpi/hwloc/pull/406#issuecomment-655666859,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","A Hive is group of GPU's connected together. It's similar like a switch between 2 or 4 GPU's. Within the group, they have same hive id.  Only one link for same GPUs.  links are only between GPU's. It may extent to CPU in the future.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/406#issuecomment-664904134,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Sorry for the delay, I was on vacation. And thanks for the info.
If I have a hive with 3 GPUs, should XGMILinks contain two rsmiX names separated by a space? It seems to me your code would just keep the last one.
Also wouldn't XGMIPeers be better than XGMILinks for the info name?
Do you have some info about the XGMI link speed/width? Either from the API or hardwired from the hardware doc. It's something we'll put in the distance matrix (next thing on my TODO list).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,7,https://github.com/open-mpi/hwloc/pull/406#issuecomment-665058324,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","If I have a hive with 3 GPUs, should XGMILinks contain two rsmiX names separated by a space? It seems to me your code would just keep the last one.
That's a bug, I will fix it.
Also wouldn't XGMIPeers be better than XGMILinks for the info name?
Ok
Do you have some info about the XGMI link speed/width? Either from the API or hardwired from the hardware doc. It's something we'll put in the distance matrix (next thing on my TODO list).
Vega 20 has 2 Infinity Fabric(tm) links per chip, each supports a bidirectional bandwidth of up to 100 GB/s (1x 25 Gbps x16 link upstream and 1x 25 Gbps x16 link downstream). That's from hardware and is a theoretical numbers.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,8,https://github.com/open-mpi/hwloc/pull/406#issuecomment-669160302,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","I have requested the remove access for you a long time ago and still waiting for it. There are very limited spots available, in external network. I'm using a remove test machine, but it's in internal network. Let me push again. Will look the comments and make change.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,9,https://github.com/open-mpi/hwloc/pull/406#issuecomment-669487030,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com",Have updated the code based on comments.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,10,https://github.com/open-mpi/hwloc/pull/406#issuecomment-670068308,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com",Rebased and updated,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/406#issuecomment-670359101,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Merged, thanks a lot !",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/406#issuecomment-726816220,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","@miketxli I asm asked whether we're going to expose memory information and maybe some stuff about the number of GPU tiles/cores whatever it's called. We expose those for CUDA, and we're going yo expose them for Intel OneAPI too. Do you have plans for these?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,406,2020-07-07T19:14:47Z,2020-08-07T06:51:57Z,2020-11-16T14:40:24Z,MERGED,True,79,1,2,https://github.com/miketxli,Add XGMI Info to RSMI plugin,1,[],https://github.com/open-mpi/hwloc/pull/406,https://github.com/miketxli,13,https://github.com/open-mpi/hwloc/pull/406#issuecomment-728104399,"Change-Id: I95524183adee7730a53ec505505045e480a75132
Signed-off-by: Mike Li Tianxinmike.Li@amd.com","Hi Brice, nice to hear from you. Yes, I do have plans for that. Let me talk to my manager and come back to you.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,409,2020-07-22T00:17:37Z,2020-07-23T14:57:51Z,2020-07-23T14:57:52Z,MERGED,True,214,3,14,https://github.com/clementFoyer,Lstopo tikz,1,"['enhancement', 'Tools', 'help wanted']",https://github.com/open-mpi/hwloc/pull/409,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/409,"I wanted a proper output for inclusion into a LaTeX document and from how straight forward it was to change from a SVG to a tikz picture, I thought it would be useful to have it directly available.
However, I have two issues:

How can I enable the colors? I tried to define the declare_color function, but it seems to never be called.
Where can I add a flag that insert a backslash in front of the sharp character to have it escaped for tikz?

The result file creates a standalone tex file which can be compiled and depends on tikz and xcolor. The file can be also be easily included into a latex project.","I wanted a proper output for inclusion into a LaTeX document and from how straight forward it was to change from a SVG to a tikz picture, I thought it would be useful to have it directly available.
However, I have two issues:

How can I enable the colors? I tried to define the declare_color function, but it seems to never be called.
Where can I add a flag that insert a backslash in front of the sharp character to have it escaped for tikz?

The result file creates a standalone tex file which can be compiled and depends on tikz and xcolor. The file can be also be easily included into a latex project.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,409,2020-07-22T00:17:37Z,2020-07-23T14:57:51Z,2020-07-23T14:57:52Z,MERGED,True,214,3,14,https://github.com/clementFoyer,Lstopo tikz,1,"['enhancement', 'Tools', 'help wanted']",https://github.com/open-mpi/hwloc/pull/409,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/409#issuecomment-662259303,"I wanted a proper output for inclusion into a LaTeX document and from how straight forward it was to change from a SVG to a tikz picture, I thought it would be useful to have it directly available.
However, I have two issues:

How can I enable the colors? I tried to define the declare_color function, but it seems to never be called.
Where can I add a flag that insert a backslash in front of the sharp character to have it escaped for tikz?

The result file creates a standalone tex file which can be compiled and depends on tikz and xcolor. The file can be also be easily included into a latex project.","Hello Clement. Your output_tikz() function should call declare_colors() so that your declare_color() backend function is called before using those colors.
I am not sure we want to hack the core lstopo to insert specific escape characters. XML escapes in its own output functions, can't you do the same by modifying the text buffer before outputting it?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,409,2020-07-22T00:17:37Z,2020-07-23T14:57:51Z,2020-07-23T14:57:52Z,MERGED,True,214,3,14,https://github.com/clementFoyer,Lstopo tikz,1,"['enhancement', 'Tools', 'help wanted']",https://github.com/open-mpi/hwloc/pull/409,https://github.com/clementFoyer,3,https://github.com/open-mpi/hwloc/pull/409#issuecomment-662595647,"I wanted a proper output for inclusion into a LaTeX document and from how straight forward it was to change from a SVG to a tikz picture, I thought it would be useful to have it directly available.
However, I have two issues:

How can I enable the colors? I tried to define the declare_color function, but it seems to never be called.
Where can I add a flag that insert a backslash in front of the sharp character to have it escaped for tikz?

The result file creates a standalone tex file which can be compiled and depends on tikz and xcolor. The file can be also be easily included into a latex project.","Not sure whether the output extension should be .tex or .tikz, any? Both?
Otherwise the changes are complete, with the additional remarks.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,409,2020-07-22T00:17:37Z,2020-07-23T14:57:51Z,2020-07-23T14:57:52Z,MERGED,True,214,3,14,https://github.com/clementFoyer,Lstopo tikz,1,"['enhancement', 'Tools', 'help wanted']",https://github.com/open-mpi/hwloc/pull/409,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/409#issuecomment-662724420,"I wanted a proper output for inclusion into a LaTeX document and from how straight forward it was to change from a SVG to a tikz picture, I thought it would be useful to have it directly available.
However, I have two issues:

How can I enable the colors? I tried to define the declare_color function, but it seems to never be called.
Where can I add a flag that insert a backslash in front of the sharp character to have it escaped for tikz?

The result file creates a standalone tex file which can be compiled and depends on tikz and xcolor. The file can be also be easily included into a latex project.","I don't know, it's really up to you, depending on what convenient way you find to use the output file in latex later.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,410,2020-07-23T15:22:59Z,2020-07-23T16:02:47Z,2020-07-23T16:02:47Z,MERGED,True,5,1,1,https://github.com/bgoglin,contrib/ci.inria.fr: support PR URLs with slashes as branch names,1,[],https://github.com/open-mpi/hwloc/pull/410,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/410,"PR to test the script that handles PR in the CI.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","PR to test the script that handles PR in the CI.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,413,2020-08-05T02:07:11Z,,2020-08-05T08:23:12Z,OPEN,False,507,498,3,https://github.com/kloczek,Move bash completion file to rignt place and reformat to use tabs,4,[],https://github.com/open-mpi/hwloc/pull/413,https://github.com/kloczek,1,https://github.com/open-mpi/hwloc/pull/413,"Move bash completion file to $(datadir)/bash-completion/completions
Reformat to use only tabs (to make taht file a bit smaller)
sort OPTIONS entries
Rename bash completion file to just hwloc","Move bash completion file to $(datadir)/bash-completion/completions
Reformat to use only tabs (to make taht file a bit smaller)
sort OPTIONS entries
Rename bash completion file to just hwloc",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,413,2020-08-05T02:07:11Z,,2020-08-05T08:23:12Z,OPEN,False,507,498,3,https://github.com/kloczek,Move bash completion file to rignt place and reformat to use tabs,4,[],https://github.com/open-mpi/hwloc/pull/413,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/413#issuecomment-668989817,"Move bash completion file to $(datadir)/bash-completion/completions
Reformat to use only tabs (to make taht file a bit smaller)
sort OPTIONS entries
Rename bash completion file to just hwloc","Hello
We'll need some rationale for all this:

renaming: isn't it better to keep the bash suffix for non-bash users that may want to import it? (zsh has a way to import bash completion)
reformat with tabs: we actually try to avoid tabs entirely in the repository now.
sort: if I remember correctly, we tried to keep options in a logical order
datadir: isn't /etc/bash-completion.d the actual correct location? if you use datadir, users won't be able to install there directly anymore",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,413,2020-08-05T02:07:11Z,,2020-08-05T08:23:12Z,OPEN,False,507,498,3,https://github.com/kloczek,Move bash completion file to rignt place and reformat to use tabs,4,[],https://github.com/open-mpi/hwloc/pull/413,https://github.com/kloczek,3,https://github.com/open-mpi/hwloc/pull/413#issuecomment-669019574,"Move bash completion file to $(datadir)/bash-completion/completions
Reformat to use only tabs (to make taht file a bit smaller)
sort OPTIONS entries
Rename bash completion file to just hwloc","Hello
We'll need some rationale for all this:

renaming: isn't it better to keep the bash suffix for non-bash users that may want to import it? (zsh has a way to import bash completion)


I'm not using zsh. If that syntax is acceptable and it imports bash files it should be no problem.


reformat with tabs: we actually try to avoid tabs entirely in the repository now.


That is understandable for source code however this file is kind of ""executable"" form and it should be as short as possible. Using tabs allows reduce size of that file. When file is installed no one should be looking on that file as long as it will have no any bugs. Installed form should be as small as possible.


sort: if I remember correctly, we tried to keep options in a logical order


Sorting alphabetically is logical.
Order of the OPTIONS has no impact on speed. Sorting alphabetically should allow avoid in the future add accidentally duplicates.


datadir: isn't /etc/bash-completion.d the actual correct location? if you use datadir, users won't be able to install there directly anymore


$ cat /usr/share/pkgconfig/bash-completion.pc
prefix=/usr
datadir=/usr/share
sysconfdir=/etc

compatdir=${sysconfdir}/bash_completion.d
completionsdir=${datadir}/bash-completion/completions
helpersdir=${datadir}/bash-completion/helpers

Name: bash-completion
Description: programmable completion for the bash shell
URL: https://github.com/scop/bash-completion
Version: 2.11

As you see you been using compatdir is for local completion. All packages should be installing own resources in completionsdir which is ${datadir}/bash-completion/completions. The best way should be instead hardcoding ${datadir}/bash-completion/completions just use pkgconfig to read completionsdir variable and install in path provided by it hwloc file.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,413,2020-08-05T02:07:11Z,,2020-08-05T08:23:12Z,OPEN,False,507,498,3,https://github.com/kloczek,Move bash completion file to rignt place and reformat to use tabs,4,[],https://github.com/open-mpi/hwloc/pull/413,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/413#issuecomment-669055838,"Move bash completion file to $(datadir)/bash-completion/completions
Reformat to use only tabs (to make taht file a bit smaller)
sort OPTIONS entries
Rename bash completion file to just hwloc","datadir: ok, thanks.
zsh/bash: there are two different issues here. I think you're talking about the installed file (no need for suffix if going to a bash specific directory) while I was talking about the file in the source code (having the suffix in the source code is more clear, and better if some people provide a zsh-specific file). I am fine with renaming to hwloc in the bash install directory but I'd like to keep hwloc.bash in the source.
ordering: what I meant by logical is keeping related options together, like we do in usage (ideally the manpage would use the same ordering/grouping but it doesn't really yet). bash reorders alphabetically anyway.
tabs: I am not convinced it will change anything (the file still spans 3 pages, and I hope bash is able to parse spaces quickly) but ok. However you have 2 lines to fix because spaces are mixed with tabs:

312: 	local OPTIONS=(--ci --ri --cu --cd -h --help)
475:			  	COMPREPLY=( ""<index of cpu to operate on>"" """" )

By the way, we'll need a Signed-off-by line in each commit (that's why the PR is currently marked as not successful). See the last section of https://github.com/open-mpi/ompi/wiki/Administrative-rules
Thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/415,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/415#issuecomment-672827866,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","@rhc54 Would this help for OMPI, even if it comes way too late?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/rhc54,3,https://github.com/open-mpi/hwloc/pull/415#issuecomment-672863776,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","😄 Yes! Still useful for PMIx, so thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/415#issuecomment-672940844,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","One thing I am wondering: if we pass the flag in hwloc 2.3 import, but the XML was exported by hwloc 2.2 (without support bits), we'll get no support bits (meaning nothing is supported). You'd need to know you have to fallback on your own code.
I need to find a way to report that clearly, either by failing to load, or by adding something else (could be another support bit, but it doesn't really fit in the current arrays).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/rhc54,5,https://github.com/open-mpi/hwloc/pull/415#issuecomment-672945743,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","True, but I thought you were going to add something to the XML string that identified its source version? People could use that anyway as the string has changed a couple of times - might help going forward.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/415#issuecomment-679015789,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","The XML versioning is only used internally for 1.x/2.x compatibility on import. There's no versioning between 2.[0123] so far, as everybody may import from everybody (they'll just ignore what they don't understand).
Application may read the hwlocVersion string in info attribute but parsing it isn't very convenient (could be ""2.1.1rc1-git"").
I think I am going to add a new support->misc array with ""imported_support"" feature flag.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,415,2020-08-12T11:58:55Z,2020-08-28T10:40:56Z,2021-02-08T13:55:40Z,MERGED,True,389,30,56,https://github.com/bgoglin,Allow to import support bits from XML topology,4,[],https://github.com/open-mpi/hwloc/pull/415,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/415#issuecomment-682457519,"With this PR, the ""support"" bits are always exported to hwloc XML, and they may be imported if new flag HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT is set with hwloc_topology_set_flags().","This will be in 2.3. the way to use it is:
#if HWLOC_API_VERSION >= 0x20300
   hwloc_topology_set_flags(topo, <other flags> | HWLOC_TOPOLOGY_FLAG_IMPORT_SUPPORT):
#endif
[...]
   hwloc_topology_load(topo);
[...]
   support = hwloc_topology_get_support(topo);
#if HWLOC_API_VERSION >= 0x20300
   if (support->misc->imported_support)
      <you got the remote support bits>
#endif",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,1,https://github.com/open-mpi/hwloc/pull/417,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","On my system hwloc never detects ncurses, because tparm lives in libtinfo.so",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678329500,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so",What OS/distribution is this?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,3,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678332271,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","$ lsb_release -a
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Pop!_OS 18.04 LTS
Release:	18.04
Codename:	bionic

ncurses is installed using spack.
$ nm /home/hstoppels/spack/opt/spack/linux-ubuntu18.04-skylake/gcc-8.4.0/ncurses-6.2-ta3dl2dosafilqaxkft3fjwasj526plc/lib/libtinfo.so | grep tparm
000000000001e1e0 t getparm
0000000000016040 T _nc_tparm_analyze
000000000023c020 B _nc_tparm_err
0000000000016510 T tparm",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,4,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678334206,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","See https://github.com/mirror/ncurses/blob/master/ncurses/tinfo/lib_tparm.c#L976, it lives in tinfo, i guess it ends up in that lib when --with-termlib is enabled?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,5,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678337796,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","Yup, if I do spack install ncurses ~termlib, i.e. without --with-termlib, the symbol ends up in libcurses.so.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,6,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678424674,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","FWIW, on Ubuntu 18.04 when linking against libcurses.so you are in fact linking against libtinfo.so:
$ apt-get install libncurses5-dev gcc binutils
$ cat example.c 
#include <curses.h>
int main() { tparm(NULL, 0, 0, 0); }
$ gcc example.c -lcurses
$ readelf -d a.out | grep NEEDED
 0x0000000000000001 (NEEDED)             Shared library: [libtinfo.so.5]
 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]

Turns out libcurses.so is really just a linker script:
$ cat /usr/lib/x86_64-linux-gnu/libcurses.so
INPUT(libncurses.so.5 -ltinfo)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678604250,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","On my Ubuntu 18.04 x86_64, /usr/lib/x86_64-linux-gnu/libcurses.so is a symlink to libncurses.so provided by libncurses5-dev 6.1-1 (same with Debian testing with 6.2-1). Where does your /usr/lib/x86_64-linux-gnu/libcurses.so come from? Did you upgrade the system-wide ncurses to something not from ubuntu 18.04 ?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,8,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678608292,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","The commands from last comment were run in a bare ubuntu 18.04 docker container, with the c source mounted into it.
Fwiw, in LLVM the ncurses detection checks libtinfo first, it's been there for more than 5 years: https://github.com/llvm/llvm-project/blob/3812919dc0588eeb74d440d3e3d8b1a097756f95/llvm/cmake/config-ix.cmake#L119",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678744712,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","OK I couldn't reproduce this but I think this should be fine. Can you extend your commit message with some info your posted in the comments before I merged this PR? Spack details might not be very useful, but the Ubuntu version and ncurses packages + libcurses.so contents + LLVM patch link might be good to keep in the commit log.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/haampie,10,https://github.com/open-mpi/hwloc/pull/417#issuecomment-678746424,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","OK I couldn't reproduce this but I think this should be fine.

Here's a one-liner that should be reproducible:
$ docker run ubuntu:18.04 /bin/bash -c 'apt-get update -qq &> /dev/null && apt-get install -qq libncurses5-dev &> /dev/null && cat /usr/lib/x86_64-linux-gnu/libcurses.so'
INPUT(libncurses.so.5 -ltinfo)

Let me add that to the commit message then :)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/417#issuecomment-679118557,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","Sorry I forgot to ask earlier: can you add to the commit message a Signed-off-by line with your employer email address if relevant, or your personal address otherwise?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,417,2020-08-21T14:13:34Z,2020-08-24T18:21:35Z,2021-03-15T13:19:49Z,MERGED,True,1,1,1,https://github.com/haampie,Look for tinfo too,1,[],https://github.com/open-mpi/hwloc/pull/417,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/417#issuecomment-679289175,"On my system hwloc never detects ncurses, because tparm lives in libtinfo.so","Merged, thanks. This will be in the upcoming 2.3.",True,{'HOORAY': ['https://github.com/haampie']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,418,2020-08-24T08:44:46Z,2020-08-24T09:04:34Z,2020-08-24T09:06:10Z,MERGED,True,1,1,1,https://github.com/clementFoyer,lstopo/tikz: Update auto-completion with tikz output format,1,[],https://github.com/open-mpi/hwloc/pull/418,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/418,"The PR from July 23, was lacking the update of the auto-completion of the output format. This commit fixes it. As the man page states both tikz and tex, should tex be added as well?","The PR from July 23, was lacking the update of the auto-completion of the output format. This commit fixes it. As the man page states both tikz and tex, should tex be added as well?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,418,2020-08-24T08:44:46Z,2020-08-24T09:04:34Z,2020-08-24T09:06:10Z,MERGED,True,1,1,1,https://github.com/clementFoyer,lstopo/tikz: Update auto-completion with tikz output format,1,[],https://github.com/open-mpi/hwloc/pull/418,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/418#issuecomment-679005599,"The PR from July 23, was lacking the update of the auto-completion of the output format. This commit fixes it. As the man page states both tikz and tex, should tex be added as well?","Thanks. tikz is enough for me, tex is only here for convenience.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,419,2020-08-25T10:01:45Z,2020-08-25T10:15:51Z,2020-08-25T10:15:51Z,MERGED,True,8,8,8,https://github.com/clementFoyer,Update HPE copyrights,1,[],https://github.com/open-mpi/hwloc/pull/419,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/419,The previous HPE copyrights were not complying with the company's policy format. This PR fixes the issue.,The previous HPE copyrights were not complying with the company's policy format. This PR fixes the issue.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/fj40bryan,1,https://github.com/open-mpi/hwloc/pull/420,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/420#issuecomment-684483015,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","Merged, thanks!",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/fj40bryan,3,https://github.com/open-mpi/hwloc/pull/420#issuecomment-684828016,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","Thank you!
…
Sent from my iPhone

On Sep 1, 2020, at 12:52 AM, Brice Goglin <notifications@github.com> wrote:

﻿

Merged, thanks!

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#420 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AADDXZWPC4RBKHSRK2CJLXLSDSK4DANCNFSM4QQX4LQA>.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/fj40bryan,4,https://github.com/open-mpi/hwloc/pull/420#issuecomment-685112998,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","Hi @bgoglin, is there a link to a release schedule? Im not in a rush, but just curious.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/420#issuecomment-685148075,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","Hello @fj40bryan
There's no clear release schedule. I'd like to release 2.3 before end of September but I usually fail to meet deadlines :/",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,420,2020-08-31T17:20:02Z,2020-09-01T06:52:26Z,2020-09-21T13:26:19Z,MERGED,True,2,2,1,https://github.com/fj40bryan,Update libhwloc.vcxproj to support static linking,1,[],https://github.com/open-mpi/hwloc/pull/420,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/420#issuecomment-696113499,"Fix Windows static linking for libhwloc
Signed-off-by: Bryan Hunt bryanjhunt@msn.com","@fj40bryan I just released 2.3.0rc1. Unless some bugs appear, it means 2.3.0 final within a week.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,422,2020-09-18T08:06:33Z,2020-09-18T08:34:15Z,2020-09-18T08:36:34Z,MERGED,True,3951,107,52,https://github.com/bgoglin,Memory attributes,21,[],https://github.com/open-mpi/hwloc/pull/422,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/422,"API

Add hwloc/memattrs.h for exposing latency/bandwidth information between
initiators (CPU sets for now) and target NUMA nodes.

When available, bandwidths and latencies are read from the ACPI HMAT
table exposed by Linux kernel 5.2+.
Attributes may also be customized to expose user-defined performance
information.


Add hwloc_get_local_numanode_objs() for listing NUMA nodes that are
local to some locality.


Tools

hwloc-info and hwloc-calc have new --local-memory --local-memory-flags
and --best-memattr options for reporting local memory nodes and filtering
by memory attributes.
hwloc-bind has a new --best-memattr option for filtering by memory attributes
among the memory binding set.","API

Add hwloc/memattrs.h for exposing latency/bandwidth information between
initiators (CPU sets for now) and target NUMA nodes.

When available, bandwidths and latencies are read from the ACPI HMAT
table exposed by Linux kernel 5.2+.
Attributes may also be customized to expose user-defined performance
information.


Add hwloc_get_local_numanode_objs() for listing NUMA nodes that are
local to some locality.


Tools

hwloc-info and hwloc-calc have new --local-memory --local-memory-flags
and --best-memattr options for reporting local memory nodes and filtering
by memory attributes.
hwloc-bind has a new --best-memattr option for filtering by memory attributes
among the memory binding set.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,422,2020-09-18T08:06:33Z,2020-09-18T08:34:15Z,2020-09-18T08:36:34Z,MERGED,True,3951,107,52,https://github.com/bgoglin,Memory attributes,21,[],https://github.com/open-mpi/hwloc/pull/422,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/422#issuecomment-694736409,"API

Add hwloc/memattrs.h for exposing latency/bandwidth information between
initiators (CPU sets for now) and target NUMA nodes.

When available, bandwidths and latencies are read from the ACPI HMAT
table exposed by Linux kernel 5.2+.
Attributes may also be customized to expose user-defined performance
information.


Add hwloc_get_local_numanode_objs() for listing NUMA nodes that are
local to some locality.


Tools

hwloc-info and hwloc-calc have new --local-memory --local-memory-flags
and --best-memattr options for reporting local memory nodes and filtering
by memory attributes.
hwloc-bind has a new --best-memattr option for filtering by memory attributes
among the memory binding set.","We usually rebase before merge, but this branch has 21 commits and the summary in the merge commit might be useful to see in the log.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,426,2020-10-06T21:03:24Z,2020-10-06T22:17:44Z,2020-10-06T22:17:49Z,MERGED,True,7,7,1,https://github.com/bertwesarg,doc: minor fixes,1,[],https://github.com/open-mpi/hwloc/pull/426,https://github.com/bertwesarg,1,https://github.com/open-mpi/hwloc/pull/426,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,426,2020-10-06T21:03:24Z,2020-10-06T22:17:44Z,2020-10-06T22:17:49Z,MERGED,True,7,7,1,https://github.com/bertwesarg,doc: minor fixes,1,[],https://github.com/open-mpi/hwloc/pull/426,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/426#issuecomment-704582689,,Thanks!,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,427,2020-10-15T15:49:00Z,2020-10-15T15:55:23Z,2020-10-15T17:18:42Z,MERGED,True,25,2,2,https://github.com/jsquyres,"docs: add ""hwloc-calc -H"" examples",1,[],https://github.com/open-mpi/hwloc/pull/427,https://github.com/jsquyres,1,https://github.com/open-mpi/hwloc/pull/427,"Add some examples using the ""-H"" option to hwloc-calc to hwloc-bind(1)
and hwloc-calc(1).
Signed-off-by: Jeff Squyres jsquyres@cisco.com","Add some examples using the ""-H"" option to hwloc-calc to hwloc-bind(1)
and hwloc-calc(1).
Signed-off-by: Jeff Squyres jsquyres@cisco.com",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,427,2020-10-15T15:49:00Z,2020-10-15T15:55:23Z,2020-10-15T17:18:42Z,MERGED,True,25,2,2,https://github.com/jsquyres,"docs: add ""hwloc-calc -H"" examples",1,[],https://github.com/open-mpi/hwloc/pull/427,https://github.com/jsquyres,2,https://github.com/open-mpi/hwloc/pull/427#issuecomment-709432937,"Add some examples using the ""-H"" option to hwloc-calc to hwloc-bind(1)
and hwloc-calc(1).
Signed-off-by: Jeff Squyres jsquyres@cisco.com",Want me to cherry-pick this commit to v2.[0123]?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,427,2020-10-15T15:49:00Z,2020-10-15T15:55:23Z,2020-10-15T17:18:42Z,MERGED,True,25,2,2,https://github.com/jsquyres,"docs: add ""hwloc-calc -H"" examples",1,[],https://github.com/open-mpi/hwloc/pull/427,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/427#issuecomment-709471169,"Add some examples using the ""-H"" option to hwloc-calc to hwloc-bind(1)
and hwloc-calc(1).
Signed-off-by: Jeff Squyres jsquyres@cisco.com","I pushed to v2.3 already, should be enough. Other branches are likely dead, I am just backporting CI related patches there, in case we ever need to revive them.",True,{'THUMBS_UP': ['https://github.com/jsquyres']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,428,2020-10-20T16:43:11Z,2020-10-20T16:55:01Z,2020-10-20T20:50:52Z,MERGED,True,6,5,1,https://github.com/jjhursey,Move PGI compiler check before GNU,1,[],https://github.com/open-mpi/hwloc/pull/428,https://github.com/jjhursey,1,https://github.com/open-mpi/hwloc/pull/428,"PGI compiler has a GNU compatability mode so __GNUC__ is defined by
pgcc. So first check for __PGI before checking for GNU.","PGI compiler has a GNU compatability mode so __GNUC__ is defined by
pgcc. So first check for __PGI before checking for GNU.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,428,2020-10-20T16:43:11Z,2020-10-20T16:55:01Z,2020-10-20T20:50:52Z,MERGED,True,6,5,1,https://github.com/jjhursey,Move PGI compiler check before GNU,1,[],https://github.com/open-mpi/hwloc/pull/428,https://github.com/jjhursey,2,https://github.com/open-mpi/hwloc/pull/428#issuecomment-712995561,"PGI compiler has a GNU compatability mode so __GNUC__ is defined by
pgcc. So first check for __PGI before checking for GNU.","Configured with ./configure --prefix=$HOME/local/hwloc-pgi CC=pgcc CXX=pgc++ FC=pgfortran (on ppc64le, but that shouldn't matter for this check).
Before the change configure detected the PGI compiler as ""gnu""
###
### Configuring hwloc core
###
checking hwloc building mode... standalone
configure: hwloc builddir: /smpi_dev/mpiczar/local/src/hwloc-2.2.0
configure: hwloc srcdir: /smpi_dev/mpiczar/local/src/hwloc-2.2.0
checking for hwloc version... 2.2.0
checking if want hwloc maintainer support... disabled
checking for hwloc directory prefix... (none)
checking for hwloc symbol prefix... hwloc_
checking for pgcc option to accept ISO C99... (cached) none needed
checking size of void *... 8
checking which OS support to include... Linux
checking which CPU support to include... unknown
checking size of unsigned long... 8
checking size of unsigned int... 4
checking for the C compiler vendor... gnu

After this commit, it correctly detects it as ""portland group""
###
### Configuring hwloc core
###
checking hwloc building mode... standalone
configure: hwloc builddir: /tmp/jjhursey/hwloc
configure: hwloc srcdir: /tmp/jjhursey/hwloc
checking for hwloc version... 2.4.0a1-git
checking if want hwloc maintainer support... disabled
checking for hwloc directory prefix... (none)
checking for hwloc symbol prefix... hwloc_
checking for pgcc option to accept ISO C99... (cached) none needed
checking size of void *... 8
checking which OS support to include... Linux
checking which CPU support to include... unknown
checking size of unsigned long... 8
checking size of unsigned int... 4
checking for the C compiler vendor... portland group",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,428,2020-10-20T16:43:11Z,2020-10-20T16:55:01Z,2020-10-20T20:50:52Z,MERGED,True,6,5,1,https://github.com/jjhursey,Move PGI compiler check before GNU,1,[],https://github.com/open-mpi/hwloc/pull/428,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/428#issuecomment-712996381,"PGI compiler has a GNU compatability mode so __GNUC__ is defined by
pgcc. So first check for __PGI before checking for GNU.",Thanks Josh. Is this a new feature in pgcc? Or something most people never enable?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,428,2020-10-20T16:43:11Z,2020-10-20T16:55:01Z,2020-10-20T20:50:52Z,MERGED,True,6,5,1,https://github.com/jjhursey,Move PGI compiler check before GNU,1,[],https://github.com/open-mpi/hwloc/pull/428,https://github.com/jjhursey,4,https://github.com/open-mpi/hwloc/pull/428#issuecomment-712999107,"PGI compiler has a GNU compatability mode so __GNUC__ is defined by
pgcc. So first check for __PGI before checking for GNU.","I think it's been there for a few releases at least. In Open MPI we made the change a while back to the similar m4 file. I just noticed it today because of an odd configuration/setup I had with Open MPI's new 3rd party configure logic. It was trying to pass down GNU only warning CLI options into hwloc, which PGI doesn't handle.
It might be more apparent when using the new v20.x pgcc or the older v19.x pgcc18, but I would need to dig into that a bit further to confirm.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,432,2020-11-05T11:40:14Z,2020-11-23T16:51:13Z,2021-02-08T13:50:58Z,CLOSED,False,58,4,6,https://github.com/bgoglin,API for CPU kinds aka heterogeneous/hybrid CPUs,3,[],https://github.com/open-mpi/hwloc/pull/432,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/432,"Most of this code was merged in 7301168
Remaining stuff include support for upcoming Linux sysfs cpu types files. Those patches are merged in upstream Linux yet but it looks like we'll be able to include that support anyway, I am just waiting in case the sysfs layout is modified in newer patches.","Most of this code was merged in 7301168
Remaining stuff include support for upcoming Linux sysfs cpu types files. Those patches are merged in upstream Linux yet but it looks like we'll be able to include that support anyway, I am just waiting in case the sysfs layout is modified in newer patches.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,432,2020-11-05T11:40:14Z,2020-11-23T16:51:13Z,2021-02-08T13:50:58Z,CLOSED,False,58,4,6,https://github.com/bgoglin,API for CPU kinds aka heterogeneous/hybrid CPUs,3,[],https://github.com/open-mpi/hwloc/pull/432,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/432#issuecomment-732286258,"Most of this code was merged in 7301168
Remaining stuff include support for upcoming Linux sysfs cpu types files. Those patches are merged in upstream Linux yet but it looks like we'll be able to include that support anyway, I am just waiting in case the sysfs layout is modified in newer patches.",Entirely merged in master in commit 8ef4029,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/435,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/435#issuecomment-734377765,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","Here's what I see for NVLink:
$ utils/lstopo/lstopo-no-graphics --only osdev -v | grep nvml
GPU L#5 (Backend=NVML GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla P100-SXM2-16GB"" NVIDIASerial=0322816175083 NVIDIAUUID=GPU-81504486-a0dc-e7c9-4a2e-2a1077df8a42) ""nvml0""
GPU L#7 (Backend=NVML GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla P100-SXM2-16GB"" NVIDIASerial=0322716069829 NVIDIAUUID=GPU-7c2fa792-8540-b761-a5d9-41769fe906d8) ""nvml1""
GPU L#17 (Backend=NVML GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla P100-SXM2-16GB"" NVIDIASerial=0322816175517 NVIDIAUUID=GPU-f633f2f8-1587-fa7e-a77f-fd3b7498e16b) ""nvml2""
GPU L#19 (Backend=NVML GPUVendor=""NVIDIA Corporation"" GPUModel=""Tesla P100-SXM2-16GB"" NVIDIASerial=0322816174491 NVIDIAUUID=GPU-953bb196-b5f9-81cf-1601-c0d90c795ea0) ""nvml3""

Hence GPUs are logical indexes 5/7/17/19 for hwloc.
$ utils/lstopo/lstopo-no-graphics -v
[...]
Relative bandwidth matrix (name NVLinkBandwidth kind 9) between 4 OSDevs (depth -6) by logical indexes:
  index     5     7    17    19
      5     0  40000     0     0
      7  40000     0     0     0
     17     0     0     0  40000
     19     0     0  40000     0

(there two pairs of GPUs, one near each CPU)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,3,https://github.com/open-mpi/hwloc/pull/435#issuecomment-734866638,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","Thanks for update. Harish, my manager will setup a meeting with you to discuss, probably next week after US thanksgiving.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/435#issuecomment-777356785,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","@miketxli The core changes for adding GPU distances are pretty much ready. I updated the nvml and rsmi code to insert insert-GPU bandwidth matrices. Can you test the tarball at https://ci.inria.fr/hwloc/job/basic/job/PR-435/ and report what ""lstopo --distances"" shows?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,5,https://github.com/open-mpi/hwloc/pull/435#issuecomment-777603714,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","@bgoglin Hi Brice, Thanks for the contributions. I'm working on some urgent issues right now and will get to this after that.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,6,https://github.com/open-mpi/hwloc/pull/435#issuecomment-786088005,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","@bgoglin Hi Brice, sorry about delay. I finally get chance to do this task. I'm setting up a testing system and will test this.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,7,https://github.com/open-mpi/hwloc/pull/435#issuecomment-790997332,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","@bgoglin Hi Brice. Sorry about delay. This is the busy time. I'm working on multiple projects at same time. I final get a working system with two GPUs connected with xGMI. I have done test, but got the following results:
Relative latency matrix (name NUMALatency kind 5) between 2 NUMANodes (depth -3) by logical indexes:
index     0     1
0    10    21
1    21    10
The number and description don't seems correct.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/435#issuecomment-791015388,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","Hello @miketxli. It looks like no XGMIBandwidth matrix was created. Can you post ""lstopo -v | grep -i rsmi"" to check whether bandwidth were added in the rsmi object ""XGMIPeers"" attribute?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,9,https://github.com/open-mpi/hwloc/pull/435#issuecomment-791031180,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","It seems  that a lstopo-no-graphics without rsmi was called, even so I have called from utils/lstopo with ./lstopo-no-graphics -v. I have to do sudo make install to fix it. It works now.
Relative bandwidth matrix (name XGMIBandwidth kind 9) between 2 OSDevs (depth -6) by logical indexes:
index   rsmi0   rsmi1
rsmi0 1000000     100
rsmi1     100 1000000",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,10,https://github.com/open-mpi/hwloc/pull/435#issuecomment-791034929,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.",I think I like a bit more to use 0 instead 1000000 and 1 for 100 as you have suggested. Then we can put number of links if there are multiple links between 2 GPUs.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/435#issuecomment-791246786,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.","Thanks for testing, it looks like the core works, at least.
I think I am going to keep GB/s (and make it 200 if there are 2 links) because it's more flexible if we ever create larger matrices involving different interconnects (PCI, NUMA, etc). But I'll provide a helper to convert this raw matrix into the number of links since it's quite easy to do : put 0 on the diagonal, divide other values by the greatest common divisor (if all links are doubled, we'll report single links but that's OK).
By the way,  my 1000000 on the diagonal is wrong, it should have been 1000 (I am going to use GB/s for this bandwidth).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,435,2020-11-26T13:06:37Z,2021-04-13T13:01:27Z,2021-04-13T13:01:31Z,MERGED,True,73,7,4,https://github.com/bgoglin,XGMIBandwidth matrix,1,[],https://github.com/open-mpi/hwloc/pull/435,https://github.com/miketxli,12,https://github.com/open-mpi/hwloc/pull/435#issuecomment-791464580,"@miketxli Here's a totally untested draft of XGMI distance matrix. I just put 100 in the matrix when your code found a XGMI peer (you said InfinityFabric links are 100GB/s, right). The code isn't ready to merge (I'd need to export the distances_add() function to plugins, right now it will only work when the RSMI backend is not a separate plugin), but I'd like you to test/fix/discuss the code in the meantime. I am working on NVLink and oneAPI support at the same time.
If you run lstopo -v, you should get a distance matrix between OSDev at the bottom of the output. The numbers on the first row and first column are the OS Devices logical indexes (those you see as L#1 in lstopo --only osdev -v | grep rsmi).
The diagonal would keep 0 which is a normal because because there's no XGMI link to myself, but also a bit strange since the bandwidth to myself is likely higher than the XGMI link bandwidth. I don't see what else to put in there. UINT64_MAX would case horribly large ugly values to be displayed in lstopo.
Instead of 100 or 100000 for bandwidth in GB/s or MB/s, we could also just put 1 in the matrix when there's a link. If XGMI ever support multiple links between a pair of GPUs (looks like NVLink already does), we'd still be able to put 2 instead of 1. The question is whether we could have something more complicated with different kinds of links at some point. That's why I used 100 for a 100GB/s single link here, seemed more flexible than 0 or 1.",I'm good with GB/s too. Thanks,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,436,2020-12-02T10:25:12Z,2021-04-13T12:59:11Z,2021-04-13T12:59:53Z,MERGED,True,342,15,11,https://github.com/bgoglin,NVLink bandwidth matrix,5,[],https://github.com/open-mpi/hwloc/pull/436,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/436,"TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug","TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,436,2020-12-02T10:25:12Z,2021-04-13T12:59:11Z,2021-04-13T12:59:53Z,MERGED,True,342,15,11,https://github.com/bgoglin,NVLink bandwidth matrix,5,[],https://github.com/open-mpi/hwloc/pull/436,https://github.com/sthibaul,2,https://github.com/open-mpi/hwloc/pull/436#issuecomment-794506715,"TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug","Looking at the support for NVLink, I'm thinking that the information I'd like to have is whether two GPUs are connected directly, or with others (and which ones) through an NVSwitch.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,436,2020-12-02T10:25:12Z,2021-04-13T12:59:11Z,2021-04-13T12:59:53Z,MERGED,True,342,15,11,https://github.com/bgoglin,NVLink bandwidth matrix,5,[],https://github.com/open-mpi/hwloc/pull/436,https://github.com/sthibaul,3,https://github.com/open-mpi/hwloc/pull/436#issuecomment-794517610,"TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug","I see that the bandwidth matrix provides the information: when a direct link is available, a bandwidth is there, but for indirect links, AIUI there is another entry in the matrix for the NVSwitch, but also for GPU-to-CPU PowerNVL bridge, we'd need to have something to distinguish the two.
Probably people will like to also have a transitive-closure matrix, to directly get the available bandwidth between two GPUs (even if it goes through a switch shared with other GPUs)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,436,2020-12-02T10:25:12Z,2021-04-13T12:59:11Z,2021-04-13T12:59:53Z,MERGED,True,342,15,11,https://github.com/bgoglin,NVLink bandwidth matrix,5,[],https://github.com/open-mpi/hwloc/pull/436,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/436#issuecomment-795125301,"TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug","The discussion is split between this issue and the other one about XGMI but here are the ideas gathered so far. After you get the distances structure with get(), you'll have some functions to transform it:

switch from bandwidth to 1 for direct link and 0 for no link
merge NVswitch objects into a single object. By default we see 2 sets of subswitches without connections between them. I wonder if I should merge them by default (the PCI locality of the switch would be wrong, but it doesn't really matter).
remove NVswitch and/or CPU ports (generic API to filter distances with a bitmask of object indexes)
replace objects: nvml/rsmi -> cuda/opencl/PCI. Could also be a generic API to replace any object given by type/name with another type/name with same locality.

Transitive closure requires a careful definition because GPUs cannot route NVLink traffic (you need an intermediate kernel for forwarding). We may want a strict mode where only things that can route traffic are considered (NVSwitches), and a more relaxed mode where user may have to help.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,436,2020-12-02T10:25:12Z,2021-04-13T12:59:11Z,2021-04-13T12:59:53Z,MERGED,True,342,15,11,https://github.com/bgoglin,NVLink bandwidth matrix,5,[],https://github.com/open-mpi/hwloc/pull/436,https://github.com/sthibaul,5,https://github.com/open-mpi/hwloc/pull/436#issuecomment-795248265,"TODO official plugin API for adding matrices
TODO is it ok to consider non-PCI bridges as PCI devices?
TODO helper to translates matrice from nvml objects to cuda objects, with flag to remove non-GPU objects?
TODO switch some current printf to hwloc_debug","Transitive closure requires a careful definition because GPUs cannot route NVLink traffic (you need an intermediate kernel for forwarding). We may want a strict mode where only things that can route traffic are considered (NVSwitches),

Yes, I meant closure through whatever can actually route (thus a NVSwitch for instance, possibly something else in the future)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,437,2020-12-07T18:18:03Z,2020-12-07T22:57:31Z,2020-12-07T22:57:35Z,MERGED,True,2,0,1,https://github.com/maneex,Fixed a memory leak when destroying hwloc_linux_cpufreqs objects.,1,[],https://github.com/open-mpi/hwloc/pull/437,https://github.com/maneex,1,https://github.com/open-mpi/hwloc/pull/437,"Running hwloc-ls with valgrind shows two memory leak when bailling out.
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 1 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E45: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E45: look_sysfscpu (topology-linux.c:4236)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)
  ==21928== 
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 2 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E5F: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E5F: look_sysfscpu (topology-linux.c:4237)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)

the hwloc_linux_cpufreqs_init () does allocate cpufreqs->sets, but hwloc_linux_cpufreqs_destroy () does not call free () on this member, which leads to a memory leak. By security, this patch also set the nr_sets_allocated member to zero.","Running hwloc-ls with valgrind shows two memory leak when bailling out.
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 1 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E45: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E45: look_sysfscpu (topology-linux.c:4236)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)
  ==21928== 
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 2 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E5F: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E5F: look_sysfscpu (topology-linux.c:4237)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)

the hwloc_linux_cpufreqs_init () does allocate cpufreqs->sets, but hwloc_linux_cpufreqs_destroy () does not call free () on this member, which leads to a memory leak. By security, this patch also set the nr_sets_allocated member to zero.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,437,2020-12-07T18:18:03Z,2020-12-07T22:57:31Z,2020-12-07T22:57:35Z,MERGED,True,2,0,1,https://github.com/maneex,Fixed a memory leak when destroying hwloc_linux_cpufreqs objects.,1,[],https://github.com/open-mpi/hwloc/pull/437,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/437#issuecomment-740231512,"Running hwloc-ls with valgrind shows two memory leak when bailling out.
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 1 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E45: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E45: look_sysfscpu (topology-linux.c:4236)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)
  ==21928== 
  ==21928== 64 bytes in 1 blocks are definitely lost in loss record 2 of 2
  ==21928==    at 0x4835753: malloc (vg_replace_malloc.c:309)
  ==21928==    by 0x4895E5F: hwloc_linux_cpufreqs_init (topology-linux.c:4078)
  ==21928==    by 0x4895E5F: look_sysfscpu (topology-linux.c:4237)
  ==21928==    by 0x4899584: hwloc_linuxfs_look_cpu (topology-linux.c:5309)
  ==21928==    by 0x4899584: hwloc_look_linuxfs (topology-linux.c:6538)
  ==21928==    by 0x4865DED: hwloc_discover_by_phase.isra.0 (topology.c:3229)
  ==21928==    by 0x486DE06: hwloc_discover (topology.c:3309)
  ==21928==    by 0x486DE06: hwloc_topology_load (topology.c:3958)
  ==21928==    by 0x40510A: main (lstopo.c:1484)

the hwloc_linux_cpufreqs_init () does allocate cpufreqs->sets, but hwloc_linux_cpufreqs_destroy () does not call free () on this member, which leads to a memory leak. By security, this patch also set the nr_sets_allocated member to zero.",Thanks. I wonder why coverity and cppcheck didn't find this bug.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,439,2020-12-30T17:06:58Z,2021-01-07T16:15:31Z,2021-01-07T18:47:13Z,MERGED,True,4,3,1,https://github.com/jjhursey,Fix GCC checks to use the vendor name,1,[],https://github.com/open-mpi/hwloc/pull/439,https://github.com/jjhursey,1,https://github.com/open-mpi/hwloc/pull/439,"The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.","The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,439,2020-12-30T17:06:58Z,2021-01-07T16:15:31Z,2021-01-07T18:47:13Z,MERGED,True,4,3,1,https://github.com/jjhursey,Fix GCC checks to use the vendor name,1,[],https://github.com/open-mpi/hwloc/pull/439,https://github.com/jjhursey,2,https://github.com/open-mpi/hwloc/pull/439#issuecomment-752692882,"The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.","I stumbled on this one by accident today while bouncing between GNU and PGI compilers. It shouldn't impact too many folks, but good cleanup to do.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,439,2020-12-30T17:06:58Z,2021-01-07T16:15:31Z,2021-01-07T18:47:13Z,MERGED,True,4,3,1,https://github.com/jjhursey,Fix GCC checks to use the vendor name,1,[],https://github.com/open-mpi/hwloc/pull/439,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/439#issuecomment-753002561,"The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.","Hello Josh, can you remove the existing call to _HWLOC_C_COMPILER_VENDOR([hwloc_c_vendor]) a bit later in the same HWLOC_SETUP_CORE?",True,{'THUMBS_UP': ['https://github.com/jjhursey']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,439,2020-12-30T17:06:58Z,2021-01-07T16:15:31Z,2021-01-07T18:47:13Z,MERGED,True,4,3,1,https://github.com/jjhursey,Fix GCC checks to use the vendor name,1,[],https://github.com/open-mpi/hwloc/pull/439,https://github.com/jjhursey,4,https://github.com/open-mpi/hwloc/pull/439#issuecomment-756206577,"The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.",Done. I just repushed.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,439,2020-12-30T17:06:58Z,2021-01-07T16:15:31Z,2021-01-07T18:47:13Z,MERGED,True,4,3,1,https://github.com/jjhursey,Fix GCC checks to use the vendor name,1,[],https://github.com/open-mpi/hwloc/pull/439,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/439#issuecomment-756218592,"The PGI compiler is identified as a GCC compiler (so $GCC == yes)
This can cause problems if the user accidentally adds --enable-picky
or if the $GCC variable is used to check if it is safe to add GCC
specific compiler flags.
Instead of using $GCC we can use the vendor string returned by
_HWLOC_C_COMPILER_VENDOR.","Thanks Josh, I backported to v2.4 too. If you want it in OMPI, you can take the whole v2.4 branch (there 4 bugfixes since 2.4.0, other commits don't touch the library code). If you need it in another stable branch, let me know.",True,{'THUMBS_UP': ['https://github.com/jjhursey']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,440,2021-01-04T14:27:11Z,2021-01-05T08:12:12Z,2021-01-05T08:12:36Z,MERGED,True,77,23,5,https://github.com/bgoglin,configure: add --with-cuda=<dir>,1,[],https://github.com/open-mpi/hwloc/pull/440,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/440,"Specifies where CUDA is installed to avoid having to pass
C_INCLUDE_PATH and LIBRARY_PATH at build time.
LD_LIBRARY_PATH is still required at runtime.
The CUDA directory is also used for looking for OpenCL and NVML
subcomponents.
Thanks to Andrea Bocci for the suggestion.
Refs #392.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","Specifies where CUDA is installed to avoid having to pass
C_INCLUDE_PATH and LIBRARY_PATH at build time.
LD_LIBRARY_PATH is still required at runtime.
The CUDA directory is also used for looking for OpenCL and NVML
subcomponents.
Thanks to Andrea Bocci for the suggestion.
Refs #392.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,448,2021-02-03T20:23:31Z,2021-02-04T08:12:30Z,2021-02-04T08:12:30Z,MERGED,True,6,6,1,https://github.com/awlauria,Fix xl compiler check,2,[],https://github.com/open-mpi/hwloc/pull/448,https://github.com/awlauria,1,https://github.com/open-mpi/hwloc/pull/448,"By default newer xlc compilers only define ibmxl now.

https://www.ibm.com/support/knowledgecenter/en/SSXVZZ_13.1.6/com.ibm.xlcpp1316.lelinux.doc/compiler_ref/xlmacros.html

Most compilers define the GNU macro, so put it at the bottom
as a catch-all.

Tested with gcc, xlc, pgi and clang.","By default newer xlc compilers only define ibmxl now.

https://www.ibm.com/support/knowledgecenter/en/SSXVZZ_13.1.6/com.ibm.xlcpp1316.lelinux.doc/compiler_ref/xlmacros.html

Most compilers define the GNU macro, so put it at the bottom
as a catch-all.

Tested with gcc, xlc, pgi and clang.",True,{'THUMBS_UP': ['https://github.com/jjhursey']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,448,2021-02-03T20:23:31Z,2021-02-04T08:12:30Z,2021-02-04T08:12:30Z,MERGED,True,6,6,1,https://github.com/awlauria,Fix xl compiler check,2,[],https://github.com/open-mpi/hwloc/pull/448,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/448#issuecomment-772890775,"By default newer xlc compilers only define ibmxl now.

https://www.ibm.com/support/knowledgecenter/en/SSXVZZ_13.1.6/com.ibm.xlcpp1316.lelinux.doc/compiler_ref/xlmacros.html

Most compilers define the GNU macro, so put it at the bottom
as a catch-all.

Tested with gcc, xlc, pgi and clang.","Thanks, I'll merge tomorrow and backport to 2.4. I don't think it even deserves a 2.4.1rc3 before actual release.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,451,2021-02-09T09:03:05Z,2021-02-10T08:12:16Z,2021-02-10T08:13:43Z,MERGED,True,55,0,1,https://github.com/bgoglin,linux: fix support for CPU0 being hotplugged,1,[],https://github.com/open-mpi/hwloc/pull/451,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/451,"Linux kernel with CONFIG_BOOTPARAM_HOTPLUG_CPU0 as compile time
allow offlining CPU0. The Linux early discovery used CPU0 to detect
whether we should use /sys/bus/cpu or /sys/devices/system/cpu,
and whether new core/package_cpus are available.
If this fails, read the first online CPU number at look at it.
The overhead for the normal case (CPU0 online) is 0.
Thanks to Garrett Clay for the report.
Fixes #450
For hwloc 2.5, we should moderniez this code:
/sys/devices/system/cpu is unlikely going away because many
files were added in there since /sys/bus/cpu was added.
Kernels without sysfs cpu topology files are also too old now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","Linux kernel with CONFIG_BOOTPARAM_HOTPLUG_CPU0 as compile time
allow offlining CPU0. The Linux early discovery used CPU0 to detect
whether we should use /sys/bus/cpu or /sys/devices/system/cpu,
and whether new core/package_cpus are available.
If this fails, read the first online CPU number at look at it.
The overhead for the normal case (CPU0 online) is 0.
Thanks to Garrett Clay for the report.
Fixes #450
For hwloc 2.5, we should moderniez this code:
/sys/devices/system/cpu is unlikely going away because many
files were added in there since /sys/bus/cpu was added.
Kernels without sysfs cpu topology files are also too old now.
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/452,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/452#issuecomment-781390315,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","@ivankochin Tarballs from this PR is available at https://ci.inria.fr/hwloc/job/basic/job/PR-452/
lstopo doesn't display processor groups by default anymore, you have to pass --windows-processor-groups (or pass -v if there are multiple processor groups in the system).
The API now enforces that the current topology matches the system topology (i.e. not loaded from another machine through XML). This should be fine since the goal of this API is to help binding anyway.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/ivankochin,3,https://github.com/open-mpi/hwloc/pull/452#issuecomment-782601855,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","I can't find HWLOC packages for Windows by the link shared above.
Could you please provide such packages or share the build instructions to compile the HWLOC on Windows using the right environment?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/452#issuecomment-782942139,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","Sorry, I forgot that the PR builder doesn't build windows binaries. I made those available in https://ci.inria.fr/hwloc/job/extended-customPR/14/",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/ivankochin,5,https://github.com/open-mpi/hwloc/pull/452#issuecomment-788228765,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","I tested this patch on several machines and it seems good. Thanks for providing this custom build.
Could you please estimate when this feature is planned to be released? Do you have plans to release it as a part of HWLOC 2.5?
Also, I have the same questions regards #366.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,452,2021-02-18T14:04:35Z,2021-03-02T12:20:32Z,2021-05-18T13:41:21Z,CLOSED,False,405,15,23,https://github.com/bgoglin,hwloc/windows.h for querying Windows processor groups,3,[],https://github.com/open-mpi/hwloc/pull/452,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/452#issuecomment-788869256,"Windows processor groups are not a physical hierarchical level (although it may be exposed by hwloc if it's different from NUMA nodes, packages, etc) but it has an impact of application because binding must remain inside a single group. Expose those groups explicitly so that applications know what their binding masks should be restricted to.","I just merged this in master for 2.5. The plan for 2.5 isn't totally clear yet, but it should be released in April. The plan is to have some NVIDIA/AMD GPU interconnect matrices (pretty much ready) and the new topology flag to avoid binding issues (#366). There are corner cases in cpukinds that are not ready for 2.5 yet, and they are mitigated by the binding fixes anyway, hence I don't plan to delay 2.5 because of them.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,458,2021-03-11T11:21:20Z,2021-03-24T14:24:16Z,2021-03-24T14:46:49Z,MERGED,True,317,3,8,https://github.com/bgoglin,NEC vector engine OS devs on Linux,4,[],https://github.com/open-mpi/hwloc/pull/458,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/458,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,459,2021-03-29T12:42:08Z,2021-03-31T13:55:31Z,2021-03-31T13:57:49Z,MERGED,True,724,5,23,https://github.com/bgoglin,oneAPI LevelZero backend,5,[],https://github.com/open-mpi/hwloc/pull/459,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/459,"This backend exposes ""ze0"" OS devices for GPU/accelerator exposed by L0 (the low-level layer of oneAPI). It currently doesn't get much information but we'll add memory, ports, etc later when supported by L0/hardware.
As usual, we add a hwloc/levelzero.h with helpers for converting between L0 devices and hwloc cpusets/objects.
One big caveat of this backend is that it requires L0 to be initialized with ""Sysman"" enabled, which may only be done through an environment variable during the first ze_init() in the entire process. That's why we use a constructor attribute to set this envvar at startup (and DllMain on Windows).","This backend exposes ""ze0"" OS devices for GPU/accelerator exposed by L0 (the low-level layer of oneAPI). It currently doesn't get much information but we'll add memory, ports, etc later when supported by L0/hardware.
As usual, we add a hwloc/levelzero.h with helpers for converting between L0 devices and hwloc cpusets/objects.
One big caveat of this backend is that it requires L0 to be initialized with ""Sysman"" enabled, which may only be done through an environment variable during the first ze_init() in the entire process. That's why we use a constructor attribute to set this envvar at startup (and DllMain on Windows).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,461,2021-04-05T11:56:43Z,2021-04-05T14:25:00Z,2021-04-05T21:48:58Z,MERGED,True,1,1,1,https://github.com/haampie,Make -ltermcap the last option for ncurses,1,[],https://github.com/open-mpi/hwloc/pull/461,https://github.com/haampie,1,https://github.com/open-mpi/hwloc/pull/461,"On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.","On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,461,2021-04-05T11:56:43Z,2021-04-05T14:25:00Z,2021-04-05T21:48:58Z,MERGED,True,1,1,1,https://github.com/haampie,Make -ltermcap the last option for ncurses,1,[],https://github.com/open-mpi/hwloc/pull/461,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/461#issuecomment-813417952,"On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.",@sthibaul Does this look fine to you?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,461,2021-04-05T11:56:43Z,2021-04-05T14:25:00Z,2021-04-05T21:48:58Z,MERGED,True,1,1,1,https://github.com/haampie,Make -ltermcap the last option for ncurses,1,[],https://github.com/open-mpi/hwloc/pull/461,https://github.com/sthibaul,3,https://github.com/open-mpi/hwloc/pull/461#issuecomment-813419481,"On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.","That should be fine, yes.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,461,2021-04-05T11:56:43Z,2021-04-05T14:25:00Z,2021-04-05T21:48:58Z,MERGED,True,1,1,1,https://github.com/haampie,Make -ltermcap the last option for ncurses,1,[],https://github.com/open-mpi/hwloc/pull/461,https://github.com/bgoglin,4,https://github.com/open-mpi/hwloc/pull/461#issuecomment-813466724,"On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.","@haampie Thanks, this will be in 2.5.0 (not sure there will be a 2.4.2 before).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,461,2021-04-05T11:56:43Z,2021-04-05T14:25:00Z,2021-04-05T21:48:58Z,MERGED,True,1,1,1,https://github.com/haampie,Make -ltermcap the last option for ncurses,1,[],https://github.com/open-mpi/hwloc/pull/461,https://github.com/haampie,5,https://github.com/open-mpi/hwloc/pull/461#issuecomment-813670532,"On macOS there seems to be a symlink from /usr/lib/libtermcap.dylib to
libncurses.5.4.dylib, which is the first option hwloc currently
considers for detecting ncurses. If you install ncurses with brew or
spack, you don't get this symlink, so hwloc will always link to the
system ncurses instead of the brew/spack version.
By considering libncurses first this should be fixed.",Thanks!,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,462,2021-04-13T12:23:49Z,2021-04-13T12:27:59Z,2021-04-13T12:34:28Z,MERGED,True,733,240,16,https://github.com/bgoglin,New API for adding distances,8,[],https://github.com/open-mpi/hwloc/pull/462,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/462,"hwlc_distances_add() is split into add_create()+add_values()+add_commit() to allow specifying a name argument without having yet another function with too many arguments. Splitting will also let us add intermediate calls if we ever need to add more parameters.
The main end-user API in hwloc/distances is deprecated in favor of this new API. And a plugin-specific one is added because GPU backends will need it (only non-plugin backends could add distances before).","hwlc_distances_add() is split into add_create()+add_values()+add_commit() to allow specifying a name argument without having yet another function with too many arguments. Splitting will also let us add intermediate calls if we ever need to add more parameters.
The main end-user API in hwloc/distances is deprecated in favor of this new API. And a plugin-specific one is added because GPU backends will need it (only non-plugin backends could add distances before).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,463,2021-04-13T12:55:34Z,2021-04-13T12:56:18Z,2021-04-13T12:59:59Z,MERGED,True,202,13,5,https://github.com/bgoglin,Distances transform annotate,4,[],https://github.com/open-mpi/hwloc/pull/463,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/463,Update hwloc-annotate to support specifying distances name and transforming distances matrices using the new add API,Update hwloc-annotate to support specifying distances name and transforming distances matrices using the new add API,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,464,2021-04-15T09:46:29Z,2021-05-10T14:56:25Z,2021-05-10T14:57:10Z,MERGED,True,762,19,18,https://github.com/bgoglin,merge-switch-ports and transitive-closure distances transformation,7,[],https://github.com/open-mpi/hwloc/pull/464,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/464,"Waiting for a testcase before merging, either from NVIDIA DGX-2 or manually generated.","Waiting for a testcase before merging, either from NVIDIA DGX-2 or manually generated.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,469,2021-06-02T10:02:00Z,2021-06-02T11:08:43Z,2021-09-21T13:22:45Z,MERGED,True,155,12,7,https://github.com/bgoglin,Topology flags to avoid binding modification during loads,2,[],https://github.com/open-mpi/hwloc/pull/469,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/469,"Add topology flags to mitigate binding modifications during
hwloc discovery, especially on Windows:

HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING and _MEMBINDING
restrict discovery to PUs and NUMA nodes inside the binding.
HWLOC_TOPOLOGY_FLAG_DONT_CHANGE_BINDING prevents from ever
changing the binding during discovery.","Add topology flags to mitigate binding modifications during
hwloc discovery, especially on Windows:

HWLOC_TOPOLOGY_FLAG_RESTRICT_TO_CPUBINDING and _MEMBINDING
restrict discovery to PUs and NUMA nodes inside the binding.
HWLOC_TOPOLOGY_FLAG_DONT_CHANGE_BINDING prevents from ever
changing the binding during discovery.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,470,2021-06-02T10:41:16Z,2021-06-02T11:05:47Z,2021-06-02T11:05:47Z,MERGED,True,1,1,1,https://github.com/clementFoyer,utils/hwloc-calc: Fix erroneous index in help message,1,[],https://github.com/open-mpi/hwloc/pull/470,https://github.com/clementFoyer,1,https://github.com/open-mpi/hwloc/pull/470,"The cores are being counted from 0 so core:2-3 should correspond to the third and fourth cores. Also, core is missing the plural 's'.","The cores are being counted from 0 so core:2-3 should correspond to the third and fourth cores. Also, core is missing the plural 's'.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,475,2021-06-23T12:37:41Z,2021-06-29T16:39:08Z,2021-06-30T08:47:28Z,MERGED,True,415,4,9,https://github.com/bgoglin,Detect cpukinds on Mac OS X for Apple M1 hybrid CPU support,1,[],https://github.com/open-mpi/hwloc/pull/475,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/475,"$ lstopo --cpukinds
CPU kind #0 efficiency 0 cpuset 0x0000000f
  DarwinCompatible = apple,icestorm;ARM,v8
CPU kind #1 efficiency 1 cpuset 0x000000f0
  DarwinCompatible = apple,firestorm;ARM,v8

$ utils/hwloc/hwloc-calc --cpukind 1 -N core all
4","$ lstopo --cpukinds
CPU kind #0 efficiency 0 cpuset 0x0000000f
  DarwinCompatible = apple,icestorm;ARM,v8
CPU kind #1 efficiency 1 cpuset 0x000000f0
  DarwinCompatible = apple,firestorm;ARM,v8

$ utils/hwloc/hwloc-calc --cpukind 1 -N core all
4",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,476,2021-06-24T08:41:13Z,2021-06-30T08:43:42Z,2021-06-30T08:47:36Z,MERGED,True,92,106,7,https://github.com/bgoglin,linux/cpukinds: use sysfs cpu_capacity to find core efficiencies,4,[],https://github.com/open-mpi/hwloc/pull/476,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/476,"It looks like this ""cpu_capacity"" file will be the official way to expose core efficiencies, already used by the kernel scheduler, hence likely reliable enough for us. cpu ""types"" sysfs support has been abandoned without being merged in the kernel.
This improves cpukinds on some ARM platforms where frequencies couldn't separate kinds. And it looks like this will be used by other vendors in the future.","It looks like this ""cpu_capacity"" file will be the official way to expose core efficiencies, already used by the kernel scheduler, hence likely reliable enough for us. cpu ""types"" sysfs support has been abandoned without being merged in the kernel.
This improves cpukinds on some ARM platforms where frequencies couldn't separate kinds. And it looks like this will be used by other vendors in the future.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,479,2021-08-20T13:21:27Z,2021-09-15T07:49:22Z,2021-09-15T07:49:26Z,MERGED,True,48,1,2,https://github.com/bgoglin,linux: use MPOL_PREFERRED_MANY when available,1,[],https://github.com/open-mpi/hwloc/pull/479,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/479,"MPOL_PREFERRED is less strict than MPOL_BIND since it falls back
to other node if the given one is full. But it works only with
a single node. Other (non-first physical index) are just ignored.
MPOL_PREFERRED_MANY in 5.15 fixes this.
Use MPOL_PREFERRED_MANY by default for membind. If it fails,
try MPOL_PREFERRED. If it works, assume MPOL_PREFERRED_MANY isn't
supported in the current kernel.
Closes #236
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","MPOL_PREFERRED is less strict than MPOL_BIND since it falls back
to other node if the given one is full. But it works only with
a single node. Other (non-first physical index) are just ignored.
MPOL_PREFERRED_MANY in 5.15 fixes this.
Use MPOL_PREFERRED_MANY by default for membind. If it fails,
try MPOL_PREFERRED. If it works, assume MPOL_PREFERRED_MANY isn't
supported in the current kernel.
Closes #236
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,479,2021-08-20T13:21:27Z,2021-09-15T07:49:22Z,2021-09-15T07:49:26Z,MERGED,True,48,1,2,https://github.com/bgoglin,linux: use MPOL_PREFERRED_MANY when available,1,[],https://github.com/open-mpi/hwloc/pull/479,https://github.com/bgoglin,2,https://github.com/open-mpi/hwloc/pull/479#issuecomment-919099216,"MPOL_PREFERRED is less strict than MPOL_BIND since it falls back
to other node if the given one is full. But it works only with
a single node. Other (non-first physical index) are just ignored.
MPOL_PREFERRED_MANY in 5.15 fixes this.
Use MPOL_PREFERRED_MANY by default for membind. If it fails,
try MPOL_PREFERRED. If it works, assume MPOL_PREFERRED_MANY isn't
supported in the current kernel.
Closes #236
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",MPOL_PREFERRED was merged in Linux 5.15-rc1 (commit b27abaccf8e8b012f126da0c2a1ab32723ec8b9f). I'll merge this PR once I get a chance to test that kernel.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,479,2021-08-20T13:21:27Z,2021-09-15T07:49:22Z,2021-09-15T07:49:26Z,MERGED,True,48,1,2,https://github.com/bgoglin,linux: use MPOL_PREFERRED_MANY when available,1,[],https://github.com/open-mpi/hwloc/pull/479,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/479#issuecomment-919198409,"MPOL_PREFERRED is less strict than MPOL_BIND since it falls back
to other node if the given one is full. But it works only with
a single node. Other (non-first physical index) are just ignored.
MPOL_PREFERRED_MANY in 5.15 fixes this.
Use MPOL_PREFERRED_MANY by default for membind. If it fails,
try MPOL_PREFERRED. If it works, assume MPOL_PREFERRED_MANY isn't
supported in the current kernel.
Closes #236
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","hwloc before this PR or running on kernel < 5.15 on machine with 4+ NUMA nodes:
$ hwloc-bind --membind node:2-3 -- hwloc-bind --get --membind --nodeset
0x00000040 (bind)

(we request binding on 2 nodes, the kernel only remembers the first one)
hwloc after this PR on 5.15-rc1:
$ hwloc-bind --membind node:2-3 -- hwloc-bind --get --membind --nodeset
0x000000c0 (bind)

(both nodes are used for real)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,480,2021-08-20T14:04:44Z,,2021-11-15T15:22:04Z,OPEN,False,34,1,2,https://github.com/bgoglin,"[WIP DNM] Windows Die, Module and NumaNodeEx",2,[],https://github.com/open-mpi/hwloc/pull/480,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/480,"Some future Windows release (TBD) will expose ""Die"" and ""Module"" information as well as NUMA nodes spanning mulitple processor groups. Bits are appearing in the onlie doc, we don't know all the details yet, and we don't have a way to test yet.","Some future Windows release (TBD) will expose ""Die"" and ""Module"" information as well as NUMA nodes spanning mulitple processor groups. Bits are appearing in the onlie doc, we don't know all the details yet, and we don't have a way to test yet.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,482,2021-09-14T15:51:51Z,2021-09-15T12:25:35Z,2021-09-15T12:25:48Z,MERGED,True,305,285,7,https://github.com/bgoglin,linux: expose cache os_index when available,2,[],https://github.com/open-mpi/hwloc/pull/482,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/482,"x86 and arm (with PPTT ACPI table) have a ""hardware"" cache ID
that is exposed in sysfs. Expose that ID as the os_index.
It is useful for ""resctrl"" since you need to know which cache
to configure (for partitioning, monitoring, etc).
From the resctrl documentation (section 20.3.3) at
https://www.kernel.org/doc/html/latest/x86/resctrl.html
""[...] instead of using “socket” or “core” to define the set
of logical cpus sharing a resource we use a “Cache ID”.
At a given cache level this will be a unique number across
the whole system (but it isn’t guaranteed to be a contiguous
sequence, there may be gaps). To find the ID for each logical
CPU look in /sys/devices/system/cpu/cpu*/cache/index*/id""
We could also expose it in the x86 backend but we'd need to
be sure our way to compute id is identical to what the kernel
does so that resctrl still works. And that computation is made
on many vendor/model-specific quirks, so don't do it for now.
The only issue with that is if we ever use the x86 backend
to work around linux bugs, while using resctrl.
Thanks to Clement Foyer for the suggestion.
Closes #343
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr","x86 and arm (with PPTT ACPI table) have a ""hardware"" cache ID
that is exposed in sysfs. Expose that ID as the os_index.
It is useful for ""resctrl"" since you need to know which cache
to configure (for partitioning, monitoring, etc).
From the resctrl documentation (section 20.3.3) at
https://www.kernel.org/doc/html/latest/x86/resctrl.html
""[...] instead of using “socket” or “core” to define the set
of logical cpus sharing a resource we use a “Cache ID”.
At a given cache level this will be a unique number across
the whole system (but it isn’t guaranteed to be a contiguous
sequence, there may be gaps). To find the ID for each logical
CPU look in /sys/devices/system/cpu/cpu*/cache/index*/id""
We could also expose it in the x86 backend but we'd need to
be sure our way to compute id is identical to what the kernel
does so that resctrl still works. And that computation is made
on many vendor/model-specific quirks, so don't do it for now.
The only issue with that is if we ever use the x86 backend
to work around linux bugs, while using resctrl.
Thanks to Clement Foyer for the suggestion.
Closes #343
Signed-off-by: Brice Goglin Brice.Goglin@inria.fr",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,484,2021-10-21T12:18:50Z,2021-10-25T11:39:15Z,2021-10-25T11:39:19Z,MERGED,True,345,13,9,https://github.com/bgoglin,Add a CMakeLists under contrib/windows-cmake/,4,[],https://github.com/open-mpi/hwloc/pull/484,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/484,,,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,490,2021-10-26T11:18:24Z,2021-10-27T08:08:41Z,2021-10-27T08:08:44Z,MERGED,True,16,70,8,https://github.com/bgoglin,Stop using dolib.c for Unix-like Windows builds,3,[],https://github.com/open-mpi/hwloc/pull/490,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/490,"Work around MSYS2 path conversion between Unix and Windows and just call Microsoft lib.exe directly.
Closes #489","Work around MSYS2 path conversion between Unix and Windows and just call Microsoft lib.exe directly.
Closes #489",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,1,https://github.com/open-mpi/hwloc/pull/493,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,2,https://github.com/open-mpi/hwloc/pull/493#issuecomment-960468259,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",The WinCmake CI appears to be missing the files I added. Is it extracting some autotools-generated source archive I need to add the new files to a manifest of?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/493#issuecomment-960521628,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","Your files are missing because they are not in make dist (generated by automake on one Unix CI slave before passing the resulting tarball to many different CI slaves). For contrib/windows/private_config.h.in, move it to contrib/windows-cmake/, it will be auto-added (contrib/windows/ is only for the MSVC solution). For tests/hwloc/CMakeLists.txt, add it to EXTRA_DIST at the end of tests/hwloc/Makefile.am",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,4,https://github.com/open-mpi/hwloc/pull/493#issuecomment-960930992,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",OK now it works in Jenkins too,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/493#issuecomment-961749076,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","Thanks. Can you actually run the tests from contrib/ci.inria.fr/job-1-wincmake.bat ?
/entry:mainCRTStartup is needed for lstopo-win with MSVC but we also need -mwindows instead when building with other compilers (it works with gcc, I don't know about icc on windows). The idea is that lstopo-win is a native windows program (only opens the lstopo window) while lstopo and lstopo-no-graphics use a console and then run lstopo inside it.
On the cosmetic side, can you use a real email instead of scivision@users.noreply.github.com in your signed-off-by lines? And prefix your commit first lines with ""windows-cmake:"" instead of ""windows:"" or nothing.
Also add a sentence saying that you don't use stop using windows/private_config.h anymore but your own private_config.h.in for CMake.
Put ""fixes"" near the __cpuidex line in the commit message too.
Finally, I am not very familiar with CMake and I'll likely forget about all the details within a month. Hence I'd like a bit more explanation in either the commit log or in the CMakeLists.txt. Maybe explain why/how you use target_include_directories, add_library, target_link_library, target_compile_definitions instead of set_target_properties.",True,{'EYES': ['https://github.com/scivision']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,6,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962558260,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",It looks like the GUIs work without the -mwindows for GCC ?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,7,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962568801,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","It looks like the GUIs work without the -mwindows for GCC ?

Yes, the GUI works, but there are two versions: lstopo opens a console that launches the GUI. lstopo-win is a native windows program that directly launches the GUI without opening a console first. That's what -mwindows does in gcc mingw/cygwin and /entry:mainCRTStartup in MSVC. Not sure it exists for ICC. If not, there are other ways to configure this.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,8,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962624822,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","OK thanks by using Windows Start>Run menu I can confirm that -mwindows opens GUI without a console, while omitting that flag also opens a console on invocation. This is for MSYS2/MinGW GCC.
However, Clang silently accepts -mwindows but it has no effect--a console window still opens.
CMake has a target property WIN32_EXECUTABLE that automatically sets the correct flags for this instead--which works for Clang etc.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962640303,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","I see that you're conditionally adding some backends to the build. Note sure if you saw that it requires to update the the array of components in static-components.h. OpenCL and libXML lines just look like others. The order doesn't matter:
&hwloc_opencl_component,
&hwloc_xml_libxml_component,",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,10,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962657612,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",so static-components.h should become dynamically configured and use #ifdef conditions in it?,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,11,https://github.com/open-mpi/hwloc/pull/493#issuecomment-962667199,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","so static-components.h should become dynamically configured and use #ifdef conditions in it?

Either use some new #ifdef, or just create the entire file manually (configure does that).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,12,https://github.com/open-mpi/hwloc/pull/493#issuecomment-968786462,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","Assuming this PR is ready, I tested it manually on a machine with CMake 3.21.3, by running the commands from the CI test that you modified, but I got this error:
> cmake --install-prefix=%cd%/prefix -DCMAKE_BUILD_TYPE=Release -B build
[...]
CMake Warning:
  Manually-specified variables were not used by the project:
    CMAKE_BUILD_TYPE
[...]
> cmake --build build --parallel
[...]
> cmake --install build
-- Install configuration: ""Release""
CMake Error at build/cmake_install.cmake:39 (file):
  file INSTALL cannot find
  ""C:/Users/goglin/Downloads/hwloc-PR-493-20211108.1613.git3fa9157e/contrib/windows-cmake/build/Release/hwloc.lib"":
  File exists.

I don't have a build/Release directory, only a build/Debug (with hwloc.lib). Is there an issue with the way CMAKE_BUILD_TYPE is specified in contrib/ci.inria.fr/job-1-wincmake.bat?
It's not the first time I see some differences between the CI slave and my machine with respect to using Debug or Release builds and how to specify that on the command-line, but I never understood why.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/Neumann-A,13,https://github.com/open-mpi/hwloc/pull/493#issuecomment-968836683,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","I tested it manually on a machine with CMake 3.23.1

hmm a person from the future CMake 3.22 is not even released.
Looking at the batch file i am wondering:
a) What generator is used? Probably better to be verbose here instead of assuming CMake chooses something which makes sense.
b) cmake --build build --parallel probably needs to set --config if a Visual Studio generator is selected. (Debug is the default/first config for multi config generators)
c) CMAKE_BUILD_TYPE will only be used by single configuration generators (e.g. ninja/make)
TL;DR provide -G <Generator> to make sure your generator selection is correct.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,14,https://github.com/open-mpi/hwloc/pull/493#issuecomment-968856338,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","Obviously it was cmake 3.21.3 instead of 3.23.1 :)
-- Building for: Visual Studio 16 2019
-- Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.17763.
-- The C compiler identification is MSVC 19.28.29915.0

while the CI slave where things work:
-- Building for: NMake Makefiles
-- The C compiler identification is MSVC 19.27.29112.0

With --config Release during build, make install works (and ctest with -C Release). Thanks for the explanation, now I understand why I had troubles with Debug/Release on these two hosts.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,15,https://github.com/open-mpi/hwloc/pull/493#issuecomment-969314899,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","yes I just rebased on master for convenience. I think there were some naming/stylistic topics noted above, and the desire to make a CMake and Pkg-config script, but they might be handled in another PR to avoid further overloading this PR?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,16,https://github.com/open-mpi/hwloc/pull/493#issuecomment-970013823,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","yes I just rebased on master for convenience. I think there were some naming/stylistic topics noted above, and the desire to make a CMake and Pkg-config script, but they might be handled in another PR to avoid further overloading this PR?

Yes, feel free to keep pkg-config for another PR later.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,17,https://github.com/open-mpi/hwloc/pull/493#issuecomment-971617146,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","Are we ready for merge then?
3 questions from the non-windows guy:

I get hwloc.lib instead of libhwloc.lib in our MSVC builds, does this matter anyhow?
we don't get any DLL because only static libraries are built by default? that's OK for external projects that will link to hwloc?
are usual warnings enabled during the build (the equivalent of -Wall, etc)? I usually see some warnings when building on Windows, but I don't see any here.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/Neumann-A,18,https://github.com/open-mpi/hwloc/pull/493#issuecomment-971660422,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","I get hwloc.lib instead of libhwloc.lib in our MSVC builds, does this matter anyhow?

the autotool build will also generated hwloc.lib

we don't get any DLL because only static libraries are built by default? that's OK for external projects that will link to hwloc?

just set https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html to ON via the cmake cmd line (e.g. -DBUILD_SHARED_LIBS=ON)?

are usual warnings enabled during the build (the equivalent of -Wall, etc)?

Warning flags don't belong in build scripts. They belong in the toolchain files or should be set via the cmake cmd line.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,19,https://github.com/open-mpi/hwloc/pull/493#issuecomment-971679851,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","I get hwloc.lib instead of libhwloc.lib in our MSVC builds, does this matter anyhow?

the autotool build will also generated hwloc.lib

I don't know about MSVC but current GCC builds generate libhwloc.lib. But that's not the question anyway. The question is whether it's normal.


we don't get any DLL because only static libraries are built by default? that's OK for external projects that will link to hwloc?

just set https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html to ON via the cmake cmd line (e.g. -DBUILD_SHARED_LIBS=ON)?

Again, I want to know if that's normal and fine for most external projects.


are usual warnings enabled during the build (the equivalent of -Wall, etc)?

Warning flags don't belong in build scripts. They belong in the toolchain files or should be set via the cmake cmd line.

Default flags should be sane. Building with GCC without -Wall would be insane. What are the default flags?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/Neumann-A,20,https://github.com/open-mpi/hwloc/pull/493#issuecomment-971701828,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","The question is whether it's normal.

depends on your view. I would say for windows not having the lib prefix is normal. (there is already a .lib suffix ...)

Again, I want to know if that's normal and fine for most external projects.

It doesn't matter. Projects which require shared libraries due to e.g. license issues can simply pass -DBUILD_SHARED_LIBS=ON.  (or do you supply prebuild libraries?)

Default flags should be sane. Building with GCC without -Wall would be insane. What are the default flags?

Again depends on the view. -Wall might be useful for you as a developer of hwloc but for consumers of the library building hwloc with Wall is meaningless. If the build is successful it is assumed that the library can be used without issues. Default flags on linux for cmake are mainly defined by the environment or given via the cmd line or a toolchain.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,21,https://github.com/open-mpi/hwloc/pull/493#issuecomment-971707411,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",We supplied prebuilt libraries until now because building was difficult. We may stop at some point in the future since things are much easier now.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,22,https://github.com/open-mpi/hwloc/pull/493#issuecomment-972041702,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()","target naming
We can make the library file prefix ""lib"" with MSVC as well, but this is unconventional for MSVC.
It's up to project preference.
It's a simple option in CMake to do this.  CMake default is for all compilers except MSVC to have library filename prefix ""lib"".
shared/static
We could set BUILD_SHARED_LIBS, a special CMake variable, to the desired default. The default is false, which makes static hwloc.
Compiler flags
There are a few different philosophies on this. My personal practice is to have CMake script contain the per-compiler flags for Debug and Release, etc. selected by if(CMAKE_C_COMPILER_ID ...)   elseif(...)
Another approach is with CMakePresets.json, to specify variables like CC and CFLAGS. This is a simple way to specify sets of configurations to use from CI.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/bgoglin,23,https://github.com/open-mpi/hwloc/pull/493#issuecomment-979252239,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",@scivision I am going to merge this later today unless somebody complains. I am thinking of releasing 2.7 with this very soon because we have many additional changes for Windows that don't deserve to wait several months before public release.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,493,2021-11-04T04:43:48Z,2021-11-26T09:54:44Z,2021-11-26T16:16:20Z,MERGED,True,902,49,6,https://github.com/scivision,WIndows CMake: work with non-MSVC compilers too,15,[],https://github.com/open-mpi/hwloc/pull/493,https://github.com/scivision,24,https://github.com/open-mpi/hwloc/pull/493#issuecomment-979437178,"fixes #492
This was tested with GCC, Clang, and Intel oneAPI on Windows.
adds numerous tests as in Autotools-based builds.
This is also the foundation for using CMake on any platform instead of autotools.
Avoids the constant full rebuilding by using configure_file() instead of explicit file()",OK Brice--I think this is a good milestone as we've incorporated many helpful improvements suggested by yourself and Alexander. Certainly can be more done to improve in the future.,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,495,2021-11-08T13:28:34Z,2021-11-10T16:36:17Z,2021-11-10T16:36:22Z,MERGED,True,785,3,7,https://github.com/bgoglin,"linux: add support for ""cluster"" topology level",4,[],https://github.com/open-mpi/hwloc/pull/495,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/495,"Linux kernel 5.16+ exposes a new ""cluster"" level in sysfs topology files for cpus that share some internal cache or bus. They can be equivalent to the L2 Cache level on some platforms (e.g. x86) or a specific level between L2 and L3 on others (e.g. ARM Kungpeng 920). Thanks to Jonathan Cameron for the help.
Expose those as ""Cluster"" group objects in hwloc.
HWLOC_DONT_MERGE_CLUSTER_GROUPS=1 may be set in the environment to prevent these groups from being merged with identical caches, etc.","Linux kernel 5.16+ exposes a new ""cluster"" level in sysfs topology files for cpus that share some internal cache or bus. They can be equivalent to the L2 Cache level on some platforms (e.g. x86) or a specific level between L2 and L3 on others (e.g. ARM Kungpeng 920). Thanks to Jonathan Cameron for the help.
Expose those as ""Cluster"" group objects in hwloc.
HWLOC_DONT_MERGE_CLUSTER_GROUPS=1 may be set in the environment to prevent these groups from being merged with identical caches, etc.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,496,2021-11-09T10:58:18Z,2021-11-15T11:14:39Z,2021-11-15T11:14:43Z,MERGED,True,80,46,6,https://github.com/bgoglin,Support for NUMA nodes and caches spanning multiple Windows processor groups,5,[],https://github.com/open-mpi/hwloc/pull/496,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/496,"Recent windows 10 builds (and windows 11) can expose the locality of NUMA nodes and caches across multiple processor groups. Support is backward compatible, no need to wait for all users to upgrade to those recent windows releases.
There's still an issue about processor groups spanning across multiple sockets/NUMAs #497 but it's not clear if that's a Windows bug (all this Windows changes are fairly recent and documentation is not finalized yet) or if that's expected.","Recent windows 10 builds (and windows 11) can expose the locality of NUMA nodes and caches across multiple processor groups. Support is backward compatible, no need to wait for all users to upgrade to those recent windows releases.
There's still an issue about processor groups spanning across multiple sockets/NUMAs #497 but it's not clear if that's a Windows bug (all this Windows changes are fairly recent and documentation is not finalized yet) or if that's expected.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,499,2021-11-23T21:18:19Z,2021-11-24T13:25:31Z,2021-11-24T13:25:36Z,MERGED,True,318,112,13,https://github.com/bgoglin,lstopo: improve color management and add grey and white palettes,10,[],https://github.com/open-mpi/hwloc/pull/499,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/499,"Define ""palette"" structures instead of hardwiring lots of color structures.
Cleanup the actual list of colors.
Add ""--grey"" to switch lstopo to greyscale output.
Add ""--palette white"" to disable all color backgrounds.
Add ""--palette core=#ff00ff"" to change the color of ""Core"" boxes.
Adding a colorblind palette will be easy.","Define ""palette"" structures instead of hardwiring lots of color structures.
Cleanup the actual list of colors.
Add ""--grey"" to switch lstopo to greyscale output.
Add ""--palette white"" to disable all color backgrounds.
Add ""--palette core=#ff00ff"" to change the color of ""Core"" boxes.
Adding a colorblind palette will be easy.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,504,2021-12-06T21:33:15Z,2021-12-07T06:33:43Z,2021-12-07T06:55:28Z,MERGED,True,4,0,1,https://github.com/philippemilink,autogen: exit on first error,1,[],https://github.com/open-mpi/hwloc/pull/504,https://github.com/philippemilink,1,https://github.com/open-mpi/hwloc/pull/504,"Currently, if autoreconf is missing on the building system, the autogen.sh script will continue, in a buggy way:
$ ./autogen.sh 
./autogen.sh: line 9: autoreconf: command not found
Checking whether configure needs patching for MacOS Big Sur libtool.m4 bug... grep: configure: No such file or directory
grep: configure: No such file or directory
yes
Trying to patch configure...
can't find file to patch at input line 9
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|Updated from libtool.m4 patch:
|
|[PATCH] Improve macOS version detection to support macOS 11 and simplify legacy logic
|
|Signed-off-by: Jeremy Huddleston Sequoia <jeremyhu@apple.com>
|
|--- hwloc/configure.old	2020-11-25 16:03:04.225097149 +0100
|+++ hwloc/configure	2020-11-25 16:02:29.368995613 +0100
--------------------------
File to patch: ^C

This PR fixes this problem:
$ ./autogen.sh 
./autogen.sh: line 11: autoreconf: command not found","Currently, if autoreconf is missing on the building system, the autogen.sh script will continue, in a buggy way:
$ ./autogen.sh 
./autogen.sh: line 9: autoreconf: command not found
Checking whether configure needs patching for MacOS Big Sur libtool.m4 bug... grep: configure: No such file or directory
grep: configure: No such file or directory
yes
Trying to patch configure...
can't find file to patch at input line 9
Perhaps you used the wrong -p or --strip option?
The text leading up to this was:
--------------------------
|Updated from libtool.m4 patch:
|
|[PATCH] Improve macOS version detection to support macOS 11 and simplify legacy logic
|
|Signed-off-by: Jeremy Huddleston Sequoia <jeremyhu@apple.com>
|
|--- hwloc/configure.old	2020-11-25 16:03:04.225097149 +0100
|+++ hwloc/configure	2020-11-25 16:02:29.368995613 +0100
--------------------------
File to patch: ^C

This PR fixes this problem:
$ ./autogen.sh 
./autogen.sh: line 11: autoreconf: command not found",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/jjhursey,1,https://github.com/open-mpi/hwloc/pull/514,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/jjhursey,2,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024379555,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","We found this when moving from hwloc 2.4.0 to hwloc 2.7.0 and building OpenPMIx. One of the OpenPMIx tests was crashing here but only when processing the ZES_ENABLE_SYSMAN envar.

strdup'ing the ZES_ENABLE_SYSMAN envar allowed it to pass, but the core problem was how it was being set.
Another workaround is to set that envar before running a program: export ZES_ENABLE_SYSMAN=1 && ./a.out
Changing hwloc from using putenv (which will put the string constant in the environ) to using setenv (which puts a copy of the string in the environ) fixed this issue without any changes to the OpenPMIx codebase.

It looks like this commit introduced the ZES_ENABLE_SYSMAN in the hwloc constructor.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024402443,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","Thanks Josh, I'll verify this still works fine with oneAPI L0. Hopefully Intel will fix their API at some point and we'll remove these ugly hacks in constructors.",True,{'THUMBS_UP': ['https://github.com/jjhursey']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/rhc54,4,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024522901,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","@bgoglin You might want to scrub the HWLOC code and replace all instances of ""putenv"" with ""setenv"". Per the man page:
 The putenv() function takes an argument of the form ``name=value'' and is equivalent to:

       setenv(name, value, 1);

 The string pointed to by string becomes part of the environment.  A program should not

alter or free the string, and should not use stack or other transient
string variables as arguments to putenv().  The setenv() function is strongly preferred to putenv().
Emphasis is added by me. Other references make stronger statements about that preference as the environ is not protected as ""const"" and is frequently altered by programs.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/rhc54,5,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024528283,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","@bgoglin Just as an FYI - it looks like I'll need to blacklist HWLOC v2.5.0 and above for PMIx and PRRTE as we have two problems:

the one cited here. I could put some code into PMIx/PRRTE to strdup the envars prior to working with them as a workaround, but...
the CUDA library dependency problem. We have tested and found that unless --enable-plugins was used to configure HWLOC, both PMIx and PRRTE will fail to initialize. Neither has a CUDA dependency, but apparently we just can't load HWLOC that way. If we reconfigure HWLOC appropriately, then we are okay - but since we build against external installations of HWLOC that we cannot control, that isn't going to work.

Not sure of the right path forward. For now, we'll just do the blacklist and hopefully come up with a better solution in the future.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024642432,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","@bgoglin You might want to scrub the HWLOC code and replace all instances of ""putenv"" with ""setenv"".

Don't worry, there are no putenv in libhwloc except this new one for L0. Others are in tools and tests, where putenv() is easier because it works on Windows.
Regarding the CUDA issue, it should only be related to the hwloc configury better detecting CUDA. If problems exists now, they likely existed in the past too, but they weren't visible because CUDA was less often detected. There are no change in the hwloc CUDA backend between 2.4 and 2.5 (except some debug printf).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/rhc54,7,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024657644,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","Regarding the CUDA issue, it should only be related to the hwloc configury better detecting CUDA. If problems exists now, they likely existed in the past too, but they weren't visible because CUDA was less often detected. There are no change in the hwloc CUDA backend between 2.4 and 2.5 (except some debug printf).

Gotcha - unfortunately, it's a complete blocker for us. I've added the ""blacklist"" configure code until something can be worked out. Until then, people wanting to use PMIx/PRRTE ((and I guess OMPI v5 by inference) will have to limit themselves to v2.4.x.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/bgoglin,8,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024883804,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","I added some minor bits to your commit and pushed it to master and v2.7, thanks.
I can release 2.7.1 next week, or we can wait for some additional fixes for CUDA, but I have no idea where to start since I don't understand the problem and cannot reproduce it.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/rhc54,9,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1024922457,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","or we can wait for some additional fixes for CUDA, but I have no idea where to start since I don't understand the problem and cannot reproduce it.

I wish I could provide some advice there, but I don't have access to a CUDA-enabled machine and therefore cannot reproduce it myself. Basically, it manifests as a failure when trying to load PMIx with an error about being unable to find libnvidia (I believe that was the library). By enabling plugins, all we really do is allow that plugin to fail to load without the failure impacting core hwloc - and so PMIx can still load.
My suspicion is that you don't quite have your Makefile libs correct - you aren't correctly linking libnvidia into hwloc. Thus, you got better at detecting the CUDA libraries - but unfortunately, they aren't being correctly included in hwloc. It's just a guess, but it probably is something like that. You might talk to Brian or Jeff as they have more experience in it (Brian might have access to CUDA-enabled machines).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,514,2022-01-28T16:21:29Z,2022-01-29T10:23:44Z,2022-01-31T16:43:21Z,CLOSED,False,3,1,1,https://github.com/jjhursey,Set ZES_ENABLE_SYSMAN via setenv instead of putenv,1,[],https://github.com/open-mpi/hwloc/pull/514,https://github.com/jjhursey,10,https://github.com/open-mpi/hwloc/pull/514#issuecomment-1025981305,"Setting ZES_ENABLE_SYSMAN via putenv placed a constant string
in the environ array which cannot be touched. If the user is
manipulating that environ array then touching this envar will
result in a segv.

Instead of using putenv use setenv which will put a copy
of the constant string in the environ array allowing the
end user to manipulate that array as needed.
Note that I could not find a setenv function for windows
so I left a comment and did not touch that code.","@bgoglin Thanks for fixing up that patch and committing! I see the following two commits to master with it (references for those playing at home:

e721487
ed5da56

I think a 2.7.1 with this fix would be good, but maybe wait to see if we can get traction on the CUDA configure stuff. I have an idea I want to play with that might help with the CUDA detection issue that was mentioned. I have a container build box that can reproduce fairly easily. I see you filed #515 to help track that. I'll follow up there.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/jjhursey,1,https://github.com/open-mpi/hwloc/pull/516,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/jjhursey,2,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1026406377,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","Related to Issue #515
This is a specific commit for the libnvidia-ml.so library that I described in the ticket here.
I'm putting this in draft for the moment because I want to see if @bgoglin approves of the direction, and if there is a desire to add a --skip-nvml-runtime-check configure option that will skip the AC_RUN_IFELSE.
Note that this resolves the specific issue that I was able to reproduce. There might be more places where we need a stronger check like this. I'm happy to help with those if folks can test. Just let me know.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/bgoglin,3,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1026653202,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","We need to disable this check when NVML is built as a hwloc plugin, but I have to move lots of things inside configure before that's possible.
Unless I am missing something, the summary would be:

in your case without the NVIDIA driver:
BEFORE: builds with NVML, fails to run
AFTER: builds without NVML and runs
on platforms with login nodes without NVIDIA driver:
BEFORE: builds with NVML, runs on compute nodes, fails on login nodes
AFTER: builds without NVML, runs everywhere
on same platforms with plugins:
BEFORE: builds with NVML, runs everywhere
AFTER: same

I am not sure of the implications of (2). We've been telling people to use plugins for GPU backends for this exact problem but it's not clear they did.
I wonder if we should just disable NVML by default (and maybe even CUDA, NVIDIA OpenCL, and AMD ROCm).",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/jjhursey,4,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1027086529,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","Yeah, that's correct. I'm also thinking about the (2) case. With the patch as it is now, NVML will be disabled in that case, and everything will run everywhere fine. The question is, what if they intend on building on the login node but running on the compute node and expect NVML.
I'm currently thinking we make the runtime check non-excluding of support, and only result in a warning. So if the program cannot run (AC_RUN_IFELSE fails), then we print a big warning message like the following but proceed to build/link in the support.
# WARNING: NVIDIA Management Library (NVML) was detected, but programs
# linked against it cannot run on this machine. This situation often indicates that
# this machine does not have the hardware necessary to run the library.
#
# Sometimes, the machine building hwloc differs from the machine where
# hwloc will be running. As such, this warning can be ignored if you know that the
# library is functional where you intend to run hwloc.
# However, if that is not the situation, you may want to disable NVML support
# in hwloc (with the --disable-nvml option) in configure.

What do you think about that solution?",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/bgoglin,5,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1027382422,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","Sure, we should at least do this. My only question is where to put this message. It should likely be at the end of configure or people will miss it (except if we put a 30 second sleep or the need to hit the keyboard to continue :)). But the end of configure can already be huge (the pkg-config block in the middle isn't very common fortunately):
config.status: linking ../utils/lstopo/lstopo-android.c to tests/hwloc/ports/lstopo-android.c
config.status: executing depfiles commands
config.status: executing libtool commands
config.status: executing chmoding-scripts commands

************************************************************************
Could not detect/enable some features such as libxml2 and Cairo support
because pkg-config isn't available.
************************************************************************

-----------------------------------------------------------------------------
Hwloc optional build support status (more details can be found above):

Probe / display I/O devices: no
Graphical output:            yes (Windows)
XML input / output:          basic
Netloc functionality:        no
Plugin support:              no
-----------------------------------------------------------------------------

When NVML is enabled, it appears in this line:
Probe / display I/O devices: PCI(linux) LinuxIO OpenCL CUDA NVML

Maybe add something short saying that NVML might be broken?
Probe / display I/O devices: PCI(linux) LinuxIO OpenCL CUDA NVML(mis-installed?)",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/bgoglin,6,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1027383869,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","Or add a NVML specific line in the summary table for this case:
config.status: executing chmoding-scripts commands

************************************************************************
Could not detect/enable some features such as libxml2 and Cairo support
because pkg-config isn't available.
************************************************************************

# WARNING: NVIDIA Management Library (NVML) was detected, but programs
# linked against it cannot run on this machine. This situation often indicates that
# this machine does not have the hardware necessary to run the library.
#
# Sometimes, the machine building hwloc differs from the machine where
# hwloc will be running. As such, this warning can be ignored if you know that the
# library is functional where you intend to run hwloc.
# However, if that is not the situation, you may want to disable NVML support
# in hwloc with the --disable-nvml option in configure.

-----------------------------------------------------------------------------
Hwloc optional build support status (more details can be found above):

Probe / display I/O devices: PCI(linux) LinuxIO OpenCL CUDA NVML
NVML support:                mis-installed on current node (see warning above)
Graphical output:            yes (Cairo)
XML input / output:          full
Netloc functionality:        yes (without scotch)
Plugin support:              no
-----------------------------------------------------------------------------",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/jjhursey,7,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1028052918,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","Yeah, that's a good idea. Let me take a pass at it and push up a revision in a little bit.",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/jjhursey,8,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1028106090,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.","I just re-pushed to this branch with the following change.
For a machine in configuration (1) and (2) it will now build with NVML and report:
**** NVML configuration
checking nvml.h usability... yes
checking nvml.h presence... yes
checking for nvml.h... yes
checking for nvmlInit in -lnvidia-ml... yes
checking whether a program linked with -lnvidia-ml can run... no
checking whether nvmlDeviceGetMaxPcieLinkGeneration is declared... yes
**** end of NVML configuration
...
config.status: executing chmoding-scripts commands

************************************************************************
WARNING: NVIDIA Management Library (NVML) was detected, but programs
linked against it cannot run on this machine. This situation often
indicates that this machine does not have the hardware necessary to run
the library.

Sometimes, the machine building hwloc differs from the machine where
hwloc will be running. As such, this warning can be ignored if you know
that the library is functional where you intend to run hwloc.
However, if that is not the situation, you may want to disable NVML
support in hwloc with the --disable-nvml option in configure.
************************************************************************

-----------------------------------------------------------------------------
Hwloc optional build support status (more details can be found above):

Probe / display I/O devices: PCI(linux) LinuxIO CUDA NVML
NVML support:                yes, but not functional on this machine (see warning above)
Graphical output:            no
XML input / output:          full
Netloc functionality:        yes (without scotch)
Plugin support:              no
-----------------------------------------------------------------------------

For a machine in configuration (3) it will continue to build with NVML and report:
**** NVML configuration
checking nvml.h usability... yes
checking nvml.h presence... yes
checking for nvml.h... yes
checking for nvmlInit in -lnvidia-ml... yes
checking whether a program linked with -lnvidia-ml can run... yes
checking whether nvmlDeviceGetMaxPcieLinkGeneration is declared... yes
**** end of NVML configuration
...
config.status: executing chmoding-scripts commands

-----------------------------------------------------------------------------
Hwloc optional build support status (more details can be found above):

Probe / display I/O devices: PCI(linux) LinuxIO CUDA NVML
NVML support:                yes
Graphical output:            no
XML input / output:          full
Netloc functionality:        yes (without scotch)
Plugin support:              no
-----------------------------------------------------------------------------

If they pass --disable-nvml then it looks like the following:
-----------------------------------------------------------------------------
Hwloc optional build support status (more details can be found above):

Probe / display I/O devices: PCI(linux) LinuxIO CUDA
NVML support:                no
Graphical output:            no
XML input / output:          full
Netloc functionality:        yes (without scotch)
Plugin support:              no
-----------------------------------------------------------------------------",True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,516,2022-02-01T01:58:22Z,2022-02-02T21:59:19Z,2022-02-02T22:21:56Z,MERGED,True,51,3,2,https://github.com/jjhursey,Strengthen the NVML check by adding a runtime check,1,[],https://github.com/open-mpi/hwloc/pull/516,https://github.com/bgoglin,9,https://github.com/open-mpi/hwloc/pull/516#issuecomment-1028111999,"The Nvidia ML library is provided by a stub which can fool
the linker into thinking that the actual library is on the system
even when it is not. This can cause a runtime failure on such
systems.

Strengthen the nvidia-ml library check by adding a runtime
check that the resulting program will run not just compile
and link.",Thanks! I'll merge this later today and backport to 2.7,True,{'THUMBS_UP': ['https://github.com/jjhursey']}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,523,2022-02-16T13:32:57Z,2022-02-16T13:45:33Z,2022-02-16T13:45:33Z,MERGED,True,205,87,10,https://github.com/bgoglin,memattrs: add read/write bandwidth/latency attributes and read them on Linux,5,[],https://github.com/open-mpi/hwloc/pull/523,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/523,Available on recent Intel platforms (bandwidth already reports different values for Read and Write).,Available on recent Intel platforms (bandwidth already reports different values for Read and Write).,True,{}
open-mpi/hwloc,https://github.com/open-mpi/hwloc,524,2022-02-21T08:52:55Z,,2022-02-21T08:52:55Z,OPEN,False,39,12,2,https://github.com/bgoglin,[WIP DNM] levelzero: use the core PCI prop extension if available,1,[],https://github.com/open-mpi/hwloc/pull/524,https://github.com/bgoglin,1,https://github.com/open-mpi/hwloc/pull/524,"Wait until we know if this API may still change, may become official (not an extension), etc. before merging.
When available, it gives the PCI locality without requiring Sysman.
If not, we fallback to Sysman as usual.","Wait until we know if this API may still change, may become official (not an extension), etc. before merging.
When available, it gives the PCI locality without requiring Sysman.
If not, we fallback to Sysman as usual.",True,{}
