Kitware/CMake,https://github.com/Kitware/CMake,222,2016-03-08T21:57:50Z,2016-03-09T14:00:39Z,2016-03-09T14:00:39Z,CLOSED,False,15,2,1,https://github.com/olibre,Add support for Ubuntu 15.10,2,[],https://github.com/Kitware/CMake/pull/222,https://github.com/olibre,1,https://github.com/Kitware/CMake/pull/222,"Other Ubuntu-based distros (and Debian-based ones) should benefit from this commit.
Another commit to consider only existing directories.
This module needs further re-factoring : FindJNI currently searches library and include headers within a list of directories. But one may have installed several java versions and plays with update-alternatives to switch java version. A better way is to retrieve the absolute path of the java command and to deduce the JNI library in the same directory tree... But I do not know how java and JNI are installed on various OS :-/
Something easier I can do for next pull request : Add target JNI::jni if you agree... :-)","Other Ubuntu-based distros (and Debian-based ones) should benefit from this commit.
Another commit to consider only existing directories.
This module needs further re-factoring : FindJNI currently searches library and include headers within a list of directories. But one may have installed several java versions and plays with update-alternatives to switch java version. A better way is to retrieve the absolute path of the java command and to deduce the JNI library in the same directory tree... But I do not know how java and JNI are installed on various OS :-/
Something easier I can do for next pull request : Add target JNI::jni if you agree... :-)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,222,2016-03-08T21:57:50Z,2016-03-09T14:00:39Z,2016-03-09T14:00:39Z,CLOSED,False,15,2,1,https://github.com/olibre,Add support for Ubuntu 15.10,2,[],https://github.com/Kitware/CMake/pull/222,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/222#issuecomment-194308127,"Other Ubuntu-based distros (and Debian-based ones) should benefit from this commit.
Another commit to consider only existing directories.
This module needs further re-factoring : FindJNI currently searches library and include headers within a list of directories. But one may have installed several java versions and plays with update-alternatives to switch java version. A better way is to retrieve the absolute path of the java command and to deduce the JNI library in the same directory tree... But I do not know how java and JNI are installed on various OS :-/
Something easier I can do for next pull request : Add target JNI::jni if you agree... :-)","Thanks.  I rebased on master and applied these as commit add2557 and commit 1b029ea.
Adding imported targets would be nice.  See FindPNG for an example.
Please see CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,223,2016-03-10T04:17:12Z,2016-03-10T14:38:29Z,2016-03-10T20:15:19Z,CLOSED,False,4,0,2,https://github.com/tinysun212,Created modules for Cygwin-Clang,1,[],https://github.com/Kitware/CMake/pull/223,https://github.com/tinysun212,1,https://github.com/Kitware/CMake/pull/223,"When building a shared library with clang, the import library was not generated in Cygwin.
The cmake module for GNU can be reused for Clang, because clang accepts almost all of the options for gcc.","When building a shared library with clang, the import library was not generated in Cygwin.
The cmake module for GNU can be reused for Clang, because clang accepts almost all of the options for gcc.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,223,2016-03-10T04:17:12Z,2016-03-10T14:38:29Z,2016-03-10T20:15:19Z,CLOSED,False,4,0,2,https://github.com/tinysun212,Created modules for Cygwin-Clang,1,[],https://github.com/Kitware/CMake/pull/223,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/223#issuecomment-194876058,"When building a shared library with clang, the import library was not generated in Cygwin.
The cmake module for GNU can be reused for Clang, because clang accepts almost all of the options for gcc.",Thanks.  I revised this as commit 517cef8 using a slightly different approach to re-use the GNU information.  Please verify that it still works for you.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,223,2016-03-10T04:17:12Z,2016-03-10T14:38:29Z,2016-03-10T20:15:19Z,CLOSED,False,4,0,2,https://github.com/tinysun212,Created modules for Cygwin-Clang,1,[],https://github.com/Kitware/CMake/pull/223,https://github.com/tinysun212,3,https://github.com/Kitware/CMake/pull/223#issuecomment-195028964,"When building a shared library with clang, the import library was not generated in Cygwin.
The cmake module for GNU can be reused for Clang, because clang accepts almost all of the options for gcc.",It works to me. Thanks.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/borisfom,1,https://github.com/Kitware/CMake/pull/224,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/borisfom,2,https://github.com/Kitware/CMake/pull/224#issuecomment-210268520,,"James, any word on the integration?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/jamesbigler,3,https://github.com/Kitware/CMake/pull/224#issuecomment-210539334,,"I was waiting for the things I asked for to be fixed.  Are they done and I
just didn't notice?
On Thu, Apr 14, 2016 at 9:20 PM Boris Fomitchev notifications@github.com
wrote:

James, any word on the integration?
—
You are receiving this because you commented.
Reply to this email directly or view it on GitHub
#224 (comment)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/borisfom,4,https://github.com/Kitware/CMake/pull/224#issuecomment-210702398,,@jamesbigler : Yes they were all done. I have also added comments for each now.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/jamesbigler,5,https://github.com/Kitware/CMake/pull/224#issuecomment-212026651,,"Just some documentation updates, but after that I think it is ready.
On Fri, Apr 15, 2016 at 7:12 PM Boris Fomitchev notifications@github.com
wrote:

@jamesbigler https://github.com/jamesbigler : Yes they were all done. I
have also added comments for each now.
—
You are receiving this because you were mentioned.
Reply to this email directly or view it on GitHub
#224 (comment)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,224,2016-03-18T10:10:11Z,2016-04-22T18:12:57Z,2016-04-22T18:12:57Z,CLOSED,False,296,54,2,https://github.com/borisfom,Reworked arch detection file. Added new architectures.,38,[],https://github.com/Kitware/CMake/pull/224,https://github.com/borisfom,6,https://github.com/Kitware/CMake/pull/224#issuecomment-212160567,,I have opened #237 from a new branch for clean integration. Hopefully all concerns are now addressed!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,225,2016-03-20T09:54:48Z,2016-03-21T14:52:58Z,2016-03-21T14:52:58Z,CLOSED,False,29,9,6,https://github.com/ak-ambi,Support for Bruce C Compiler (BCC) added.,1,[],https://github.com/Kitware/CMake/pull/225,https://github.com/ak-ambi,1,https://github.com/Kitware/CMake/pull/225,Code for detection of C compiler had to be corrected to be K&R compatible.,Code for detection of C compiler had to be corrected to be K&R compatible.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,225,2016-03-20T09:54:48Z,2016-03-21T14:52:58Z,2016-03-21T14:52:58Z,CLOSED,False,29,9,6,https://github.com/ak-ambi,Support for Bruce C Compiler (BCC) added.,1,[],https://github.com/Kitware/CMake/pull/225,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/225#issuecomment-199324143,Code for detection of C compiler had to be corrected to be K&R compatible.,Thanks.  Applied with minor tweaks as commit 53c0dc2.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,226,2016-03-20T12:39:46Z,2016-03-22T19:18:20Z,2016-03-22T19:18:20Z,CLOSED,False,5,0,1,https://github.com/sergiud,CMakePackageConfigHelpers: allow to specify a relative CMAKE_INSTALL_PREFIX,1,[],https://github.com/Kitware/CMake/pull/226,https://github.com/sergiud,1,https://github.com/Kitware/CMake/pull/226,CMakePackageConfigHelpers fails with an error if CMAKE_INSTALL_PREFIX is a relative path. This pull request fixes the problem.,CMakePackageConfigHelpers fails with an error if CMAKE_INSTALL_PREFIX is a relative path. This pull request fixes the problem.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,226,2016-03-20T12:39:46Z,2016-03-22T19:18:20Z,2016-03-22T19:18:20Z,CLOSED,False,5,0,1,https://github.com/sergiud,CMakePackageConfigHelpers: allow to specify a relative CMAKE_INSTALL_PREFIX,1,[],https://github.com/Kitware/CMake/pull/226,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/226#issuecomment-199334697,CMakePackageConfigHelpers fails with an error if CMAKE_INSTALL_PREFIX is a relative path. This pull request fixes the problem.,"Thanks.  Please try this instead:
diff --git a/Modules/CMakePackageConfigHelpers.cmake b/Modules/CMakePackageConfigHelpers.cmake
index 206ea7a..d79249a 100644
--- a/Modules/CMakePackageConfigHelpers.cmake
+++ b/Modules/CMakePackageConfigHelpers.cmake
@@ -241,8 +241,10 @@ function(CONFIGURE_PACKAGE_CONFIG_FILE _inputFile _outputFile)
     else()
       message(FATAL_ERROR ""INSTALL_PREFIX must be an absolute path"")
     endif()
-  else()
+  elseif(IS_ABSOLUTE ""${CMAKE_INSTALL_PREFIX"")
     set(installPrefix ""${CMAKE_INSTALL_PREFIX}"")
+  else()
+    get_filename_component(installPrefix ""${CMAKE_INSTALL_PREFIX}"" ABSOLUTE)
   endif()

   if(IS_ABSOLUTE ""${CCF_INSTALL_DESTINATION}"")",True,{'THUMBS_UP': ['https://github.com/sergiud']}
Kitware/CMake,https://github.com/Kitware/CMake,226,2016-03-20T12:39:46Z,2016-03-22T19:18:20Z,2016-03-22T19:18:20Z,CLOSED,False,5,0,1,https://github.com/sergiud,CMakePackageConfigHelpers: allow to specify a relative CMAKE_INSTALL_PREFIX,1,[],https://github.com/Kitware/CMake/pull/226,https://github.com/sergiud,3,https://github.com/Kitware/CMake/pull/226#issuecomment-199934354,CMakePackageConfigHelpers fails with an error if CMAKE_INSTALL_PREFIX is a relative path. This pull request fixes the problem.,"Apart from the syntax error in the elseif line (the closing } is missing), the patch works for me.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,226,2016-03-20T12:39:46Z,2016-03-22T19:18:20Z,2016-03-22T19:18:20Z,CLOSED,False,5,0,1,https://github.com/sergiud,CMakePackageConfigHelpers: allow to specify a relative CMAKE_INSTALL_PREFIX,1,[],https://github.com/Kitware/CMake/pull/226,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/226#issuecomment-199971976,CMakePackageConfigHelpers fails with an error if CMAKE_INSTALL_PREFIX is a relative path. This pull request fixes the problem.,Thanks.  Applied as commit fd31feb.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,227,2016-03-21T00:40:37Z,2016-03-21T14:55:36Z,2017-01-01T22:27:29Z,CLOSED,False,1,1,1,https://github.com/ak-ambi,Typo fixed.,1,[],https://github.com/Kitware/CMake/pull/227,https://github.com/ak-ambi,1,https://github.com/Kitware/CMake/pull/227,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,227,2016-03-21T00:40:37Z,2016-03-21T14:55:36Z,2017-01-01T22:27:29Z,CLOSED,False,1,1,1,https://github.com/ak-ambi,Typo fixed.,1,[],https://github.com/Kitware/CMake/pull/227,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/227#issuecomment-199325040,,Thanks.  Applied as commit 8e2aa6c.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,228,2016-03-22T20:55:43Z,2016-03-23T18:00:41Z,2016-03-23T20:06:26Z,CLOSED,False,65,53,21,https://github.com/ak-ambi,Better detection of K&R compilers.,1,[],https://github.com/Kitware/CMake/pull/228,https://github.com/ak-ambi,1,https://github.com/Kitware/CMake/pull/228,"CLASSIC_C was HP-specific definition. STDC should be more portable.
It should be defined to 1 for compilers conforming to ANSI C and newer standards.
Note: Some old compilers has STDC defined to 0 to inform that they do not support function prototypes.","CLASSIC_C was HP-specific definition. STDC should be more portable.
It should be defined to 1 for compilers conforming to ANSI C and newer standards.
Note: Some old compilers has STDC defined to 0 to inform that they do not support function prototypes.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,228,2016-03-22T20:55:43Z,2016-03-23T18:00:41Z,2016-03-23T20:06:26Z,CLOSED,False,65,53,21,https://github.com/ak-ambi,Better detection of K&R compilers.,1,[],https://github.com/Kitware/CMake/pull/228,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/228#issuecomment-200467889,"CLASSIC_C was HP-specific definition. STDC should be more portable.
It should be defined to 1 for compilers conforming to ANSI C and newer standards.
Note: Some old compilers has STDC defined to 0 to inform that they do not support function prototypes.","Thanks.  Applied as commit 71f8c91.
I split the Source/kwsys changes out for separate integration into upstream KWSys.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,228,2016-03-22T20:55:43Z,2016-03-23T18:00:41Z,2016-03-23T20:06:26Z,CLOSED,False,65,53,21,https://github.com/ak-ambi,Better detection of K&R compilers.,1,[],https://github.com/Kitware/CMake/pull/228,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/228#issuecomment-200521929,"CLASSIC_C was HP-specific definition. STDC should be more portable.
It should be defined to 1 for compilers conforming to ANSI C and newer standards.
Note: Some old compilers has STDC defined to 0 to inform that they do not support function prototypes.","I had to revert the change because MS compilers define __STDC__ only when a -Za option is given.  See documentation here.
If you wish to pursue this issue further, please read CONTRIBUTING.rst and come to the mailing list to discuss it.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,229,2016-03-23T10:46:47Z,2016-03-23T17:42:51Z,2016-03-23T17:42:51Z,CLOSED,False,2,0,1,https://github.com/erikzenker,Added support for IBM XL compiler,1,[],https://github.com/Kitware/CMake/pull/229,https://github.com/erikzenker,1,https://github.com/Kitware/CMake/pull/229,This PR enables the boost module file to find shared libraries compiled by the IBM compiler.,This PR enables the boost module file to find shared libraries compiled by the IBM compiler.,True,{'THUMBS_UP': ['https://github.com/ax3l']}
Kitware/CMake,https://github.com/Kitware/CMake,229,2016-03-23T10:46:47Z,2016-03-23T17:42:51Z,2016-03-23T17:42:51Z,CLOSED,False,2,0,1,https://github.com/erikzenker,Added support for IBM XL compiler,1,[],https://github.com/Kitware/CMake/pull/229,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/229#issuecomment-200461593,This PR enables the boost module file to find shared libraries compiled by the IBM compiler.,Thanks.  Applied as commit 4527b9c.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,230,2016-03-26T16:35:49Z,2016-03-28T14:20:13Z,2016-03-28T14:20:13Z,CLOSED,False,355,355,290,https://github.com/DemiMarie,Minor style nitpics,1,[],https://github.com/Kitware/CMake/pull/230,https://github.com/DemiMarie,1,https://github.com/Kitware/CMake/pull/230,"Add quotes around CMake variables, add C++ modeline on .h files, and
replace quoted arguments by argument names in the if() command.","Add quotes around CMake variables, add C++ modeline on .h files, and
replace quoted arguments by argument names in the if() command.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,230,2016-03-26T16:35:49Z,2016-03-28T14:20:13Z,2016-03-28T14:20:13Z,CLOSED,False,355,355,290,https://github.com/DemiMarie,Minor style nitpics,1,[],https://github.com/Kitware/CMake/pull/230,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/230#issuecomment-202412299,"Add quotes around CMake variables, add C++ modeline on .h files, and
replace quoted arguments by argument names in the if() command.","Thanks for your interest in contributing.  Some of these changes may be useful but would be better discussed with a broader audience on the mailing list.  Please read CONTRIBUTING.rst and bring this up for discussion there.

Add quotes around CMake variables

That may change semantics and so should not be done in a sweeping fashion.  Many of the proposed changes are not necessary because the evaluated variables will not contain any ; and therefore not trigger argument separation (spaces in the values don't matter).  Some of the changes may be good precautions, but they should be made as individual commits whose commit message explains the reasoning.

add C++ modeline on .h files

If we are to do this I do not think it should be made part of the copyright notice block.  Options for such marks should be discussed on the mailing list.

replace quoted arguments by argument names in the if() command.

Similar to the above, these changes should be split into separate commits with explanations.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,231,2016-04-04T14:37:22Z,2016-04-05T14:01:01Z,2016-04-05T14:01:01Z,CLOSED,False,1,1,1,https://github.com/PierrickKoch,Update FindGSL.cmake,1,[],https://github.com/Kitware/CMake/pull/231,https://github.com/PierrickKoch,1,https://github.com/Kitware/CMake/pull/231,fix typo in comment s/GSL_CLBAS_LIBRARY/GSL_CBLAS_LIBRARY/,fix typo in comment s/GSL_CLBAS_LIBRARY/GSL_CBLAS_LIBRARY/,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,231,2016-04-04T14:37:22Z,2016-04-05T14:01:01Z,2016-04-05T14:01:01Z,CLOSED,False,1,1,1,https://github.com/PierrickKoch,Update FindGSL.cmake,1,[],https://github.com/Kitware/CMake/pull/231,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/231#issuecomment-205821093,fix typo in comment s/GSL_CLBAS_LIBRARY/GSL_CBLAS_LIBRARY/,Thanks!  Applied as commit 2308764.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,232,2016-04-06T14:41:58Z,2016-04-07T13:47:48Z,2016-04-07T14:43:46Z,CLOSED,False,38,11,5,https://github.com/jimon,Use response files to compile obj files with Ninja,4,[],https://github.com/Kitware/CMake/pull/232,https://github.com/jimon,1,https://github.com/Kitware/CMake/pull/232,"In our case we have so many include paths that we hit 32kb limit on Windows, so compiling with Ninja fails. I guess there is a same story with make, will investigate make generator later.
Would be nice to get feedback so I can improve contribution if needed.","In our case we have so many include paths that we hit 32kb limit on Windows, so compiling with Ninja fails. I guess there is a same story with make, will investigate make generator later.
Would be nice to get feedback so I can improve contribution if needed.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,232,2016-04-06T14:41:58Z,2016-04-07T13:47:48Z,2016-04-07T14:43:46Z,CLOSED,False,38,11,5,https://github.com/jimon,Use response files to compile obj files with Ninja,4,[],https://github.com/Kitware/CMake/pull/232,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/232#issuecomment-206492114,"In our case we have so many include paths that we hit 32kb limit on Windows, so compiling with Ninja fails. I guess there is a same story with make, will investigate make generator later.
Would be nice to get feedback so I can improve contribution if needed.","For the Makefile generator, grep the source tree for USE_RESPONSE_FILE_FOR to see how we conditionally use response files for includes (compiling), object file lists and library lists (linking).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,232,2016-04-06T14:41:58Z,2016-04-07T13:47:48Z,2016-04-07T14:43:46Z,CLOSED,False,38,11,5,https://github.com/jimon,Use response files to compile obj files with Ninja,4,[],https://github.com/Kitware/CMake/pull/232,https://github.com/jimon,3,https://github.com/Kitware/CMake/pull/232#issuecomment-206771753,"In our case we have so many include paths that we hit 32kb limit on Windows, so compiling with Ninja fails. I guess there is a same story with make, will investigate make generator later.
Would be nice to get feedback so I can improve contribution if needed.","@bradking, I've fixed code to address your concerns, please have a look.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,232,2016-04-06T14:41:58Z,2016-04-07T13:47:48Z,2016-04-07T14:43:46Z,CLOSED,False,38,11,5,https://github.com/jimon,Use response files to compile obj files with Ninja,4,[],https://github.com/Kitware/CMake/pull/232,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/232#issuecomment-206912873,"In our case we have so many include paths that we hit 32kb limit on Windows, so compiling with Ninja fails. I guess there is a same story with make, will investigate make generator later.
Would be nice to get feedback so I can improve contribution if needed.",Thanks.  I split the changes into to refactoring commits 24c9106 and f9644a2.  Then I applied the main change as commit 7731e44.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,233,2016-04-06T16:28:39Z,2016-04-06T17:50:26Z,2016-04-06T17:50:26Z,CLOSED,False,1,1,1,https://github.com/dancing-leaves,UseJava: use CMAKE_COMMAND instead of direct cmake call,1,[],https://github.com/Kitware/CMake/pull/233,https://github.com/dancing-leaves,1,https://github.com/Kitware/CMake/pull/233,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,233,2016-04-06T16:28:39Z,2016-04-06T17:50:26Z,2016-04-06T17:50:26Z,CLOSED,False,1,1,1,https://github.com/dancing-leaves,UseJava: use CMAKE_COMMAND instead of direct cmake call,1,[],https://github.com/Kitware/CMake/pull/233,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/233#issuecomment-206486306,,Thanks.  Applied as commit fa382ae.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,234,2016-04-08T08:02:48Z,2016-04-08T12:49:41Z,2016-04-08T12:49:41Z,CLOSED,False,4,0,1,https://github.com/afarbos,GetPrerequisites: add path of visual studio 10 to 14 in order to find dumpbin.exe.,1,[],https://github.com/Kitware/CMake/pull/234,https://github.com/afarbos,1,https://github.com/Kitware/CMake/pull/234,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,234,2016-04-08T08:02:48Z,2016-04-08T12:49:41Z,2016-04-08T12:49:41Z,CLOSED,False,4,0,1,https://github.com/afarbos,GetPrerequisites: add path of visual studio 10 to 14 in order to find dumpbin.exe.,1,[],https://github.com/Kitware/CMake/pull/234,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/234#issuecomment-207420290,,Thanks!  Applied as commit c79f88b.  I also followed up with commit a1c4029 to try to handle non-default install locations.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,235,2016-04-15T17:47:17Z,2016-04-15T17:48:02Z,2016-04-15T17:48:02Z,CLOSED,False,1,1,1,https://github.com/jpark730,Update FindGit.cmake to match latest GitHub,4,[],https://github.com/Kitware/CMake/pull/235,https://github.com/jpark730,1,https://github.com/Kitware/CMake/pull/235,"github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/bin"" is no longer valid, and the new path should be set to github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/cmd""","github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/bin"" is no longer valid, and the new path should be set to github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/cmd""",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,236,2016-04-15T18:04:14Z,2016-04-15T19:04:54Z,2016-04-15T19:04:54Z,CLOSED,False,2,2,1,https://github.com/jpark730,Updated findgit to match latest github version,2,[],https://github.com/Kitware/CMake/pull/236,https://github.com/jpark730,1,https://github.com/Kitware/CMake/pull/236,"github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/bin"" is not longer
valid, and the new path should be set to github_path
""$ENV{LOCALAPPDATA}/Github/PortableGit_/cmd""","github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/bin"" is not longer
valid, and the new path should be set to github_path
""$ENV{LOCALAPPDATA}/Github/PortableGit_/cmd""",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,236,2016-04-15T18:04:14Z,2016-04-15T19:04:54Z,2016-04-15T19:04:54Z,CLOSED,False,2,2,1,https://github.com/jpark730,Updated findgit to match latest github version,2,[],https://github.com/Kitware/CMake/pull/236,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/236#issuecomment-210600178,"github_path ""$ENV{LOCALAPPDATA}/Github/PortableGit_/bin"" is not longer
valid, and the new path should be set to github_path
""$ENV{LOCALAPPDATA}/Github/PortableGit_/cmd""","Thanks.  Applied as commit 19e8752.
We should keep the old path in case users have older versions installed.  Also the git.exe name does not need to be specified explicitly.  CMake will automatically add .exe to each name, and we already look for git.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/borisfom,1,https://github.com/Kitware/CMake/pull/237,Added automatic compute arch detection module.,Added automatic compute arch detection module.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/borisfom,2,https://github.com/Kitware/CMake/pull/237#issuecomment-219603043,Added automatic compute arch detection module.,Removed enviromnent override.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/jamesbigler,3,https://github.com/Kitware/CMake/pull/237#issuecomment-219614511,Added automatic compute arch detection module.,"Aside from the one comment above (which I think was a missed revert), this is good to go.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/jamesbigler,4,https://github.com/Kitware/CMake/pull/237#issuecomment-219614533,Added automatic compute arch detection module.,Great work!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/borisfom,5,https://github.com/Kitware/CMake/pull/237#issuecomment-223144237,Added automatic compute arch detection module.,Rebased. Should be ready to merge.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/jamesbigler,6,https://github.com/Kitware/CMake/pull/237#issuecomment-223698611,Added automatic compute arch detection module.,"This looks great!  The only thing I think I would change would be to make the map between Arch names and SMs configurable, but that could certainly be added in the future.  For now, being able to specify things with the SM number is super convenient.
Please ask Kitware to review it and pull it in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/borisfom,7,https://github.com/Kitware/CMake/pull/237#issuecomment-223720903,Added automatic compute arch detection module.,"Thanks James!
I have adjusted mappings according to the latest guidelines we worked out at NVidia: last commit.
Kitware: please review and pull!",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/bradking,8,https://github.com/Kitware/CMake/pull/237#issuecomment-223944205,Added automatic compute arch detection module.,"Thanks for your work on this, Boris!  James, thanks for reviewing and guiding Boris to this point.  I will take a look at this as soon as I get a chance.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,237,2016-04-19T22:17:19Z,2016-06-09T14:34:59Z,2016-06-09T14:34:59Z,CLOSED,False,290,49,2,https://github.com/borisfom,Refactored Android(Tegra) support. ,6,[],https://github.com/Kitware/CMake/pull/237,https://github.com/bradking,9,https://github.com/Kitware/CMake/pull/237#issuecomment-224914047,Added automatic compute arch detection module.,Thanks.  Applied as commit 7229ae7 (with some whitespace changes split out into a parent commit).,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,238,2016-05-02T14:28:31Z,2016-05-02T15:35:22Z,2016-05-02T15:35:22Z,CLOSED,False,2,2,1,https://github.com/afarbos,fix FindHDF5: add new debug suffix,1,[],https://github.com/Kitware/CMake/pull/238,https://github.com/afarbos,1,https://github.com/Kitware/CMake/pull/238,"My install folder of hdf5 (1.8.16) after compilation in debug.
[root@db1cc796f170 Debug]# ls -R hdf5/1.8.16/
hdf5/1.8.16/:
bin  include  lib  share

hdf5/1.8.16/bin:
gif2h5  h52gif  h5copy  h5debug  h5diff  h5dump  h5import  h5jam  h5ls  h5mkgrp  h5repack  h5repart  h5stat  h5unjam

hdf5/1.8.16/include:
H5ACpkg.h       H5Attribute.h  H5Cpkg.h       H5DataType.h    H5Epkg.h       H5FDlog.h     H5FSpkg.h       H5Gpkg.h      H5HLpublic.h     H5LTpublic.h  H5OcreatProp.h   H5Ppkg.h      H5Spublic.h     H5api_adpt.h    h5tools_ref.h
H5ACpublic.h    H5B2pkg.h      H5Cpp.h        H5DcreatProp.h  H5Epubgen.h    H5FDmpi.h     H5FSpublic.h    H5Gpublic.h   H5IMpublic.h     H5Library.h   H5Opkg.h         H5Ppublic.h   H5StrType.h     H5overflow.h    h5tools_str.h
H5AbstractDs.h  H5B2public.h   H5CppDoc.h     H5Dpkg.h        H5Epublic.h    H5FDmpio.h    H5FaccProp.h    H5Group.h     H5IdComponent.h  H5Location.h  H5Opublic.h      H5PredType.h  H5TBpublic.h    H5pubconf.h     h5tools_utils.h
H5Alltypes.h    H5Bpkg.h       H5Cpublic.h    H5Dpublic.h     H5Eterm.h      H5FDmulti.h   H5FcreatProp.h  H5HFpkg.h     H5Include.h      H5Lpkg.h      H5Oshared.h      H5PropList.h  H5Tpkg.h        H5public.h      h5trav.h
H5Apkg.h        H5Bpublic.h    H5DOpublic.h   H5DxferProp.h   H5Exception.h  H5FDpkg.h     H5File.h        H5HFpublic.h  H5IntType.h      H5Lpublic.h   H5PLextern.h     H5Rpkg.h      H5Tpublic.h     H5version.h     hdf5.h
H5Apublic.h     H5Classes.h    H5DSpublic.h   H5Edefin.h      H5FDcore.h     H5FDpublic.h  H5FloatType.h   H5HGpkg.h     H5Ipkg.h         H5MMpublic.h  H5PLpublic.h     H5Rpublic.h   H5VarLenType.h  h5diff.h        hdf5_hl.h
H5ArrayType.h   H5CommonFG.h   H5DataSet.h    H5Einit.h       H5FDdirect.h   H5FDsec2.h    H5Fpkg.h        H5HGpublic.h  H5Ipublic.h      H5MPpkg.h     H5PTpublic.h     H5SMpkg.h     H5Zpkg.h        h5tools.h
H5AtomType.h    H5CompType.h   H5DataSpace.h  H5EnumType.h    H5FDfamily.h   H5FDstdio.h   H5Fpublic.h     H5HLpkg.h     H5LTparse.h      H5Object.h    H5PacketTable.h  H5Spkg.h      H5Zpublic.h     h5tools_dump.h

hdf5/1.8.16/lib:
libhdf5.settings      libhdf5_cpp_debug.so.1.8.16  libhdf5_debug.so         libhdf5_hl_cpp_debug.a          libhdf5_hl_cpp_debug.so.10.1.0  libhdf5_hl_debug.so.1.8.16  libhdf5_tools_debug.so
libhdf5_cpp_debug.a   libhdf5_cpp_debug.so.10.1.0  libhdf5_debug.so.1.8.16  libhdf5_hl_cpp_debug.so         libhdf5_hl_debug.a              libhdf5_hl_debug.so.10.1.0  libhdf5_tools_debug.so.1.8.16
libhdf5_cpp_debug.so  libhdf5_debug.a              libhdf5_debug.so.10.1.0  libhdf5_hl_cpp_debug.so.1.8.16  libhdf5_hl_debug.so             libhdf5_tools_debug.a       libhdf5_tools_debug.so.10.1.0

hdf5/1.8.16/share:
COPYING  RELEASE.txt  USING_HDF5_CMake.txt  cmake

hdf5/1.8.16/share/cmake:
FindHDF5.cmake  hdf5-config-version.cmake  hdf5-config.cmake  hdf5-targets-debug.cmake  hdf5-targets.cmake","My install folder of hdf5 (1.8.16) after compilation in debug.
[root@db1cc796f170 Debug]# ls -R hdf5/1.8.16/
hdf5/1.8.16/:
bin  include  lib  share

hdf5/1.8.16/bin:
gif2h5  h52gif  h5copy  h5debug  h5diff  h5dump  h5import  h5jam  h5ls  h5mkgrp  h5repack  h5repart  h5stat  h5unjam

hdf5/1.8.16/include:
H5ACpkg.h       H5Attribute.h  H5Cpkg.h       H5DataType.h    H5Epkg.h       H5FDlog.h     H5FSpkg.h       H5Gpkg.h      H5HLpublic.h     H5LTpublic.h  H5OcreatProp.h   H5Ppkg.h      H5Spublic.h     H5api_adpt.h    h5tools_ref.h
H5ACpublic.h    H5B2pkg.h      H5Cpp.h        H5DcreatProp.h  H5Epubgen.h    H5FDmpi.h     H5FSpublic.h    H5Gpublic.h   H5IMpublic.h     H5Library.h   H5Opkg.h         H5Ppublic.h   H5StrType.h     H5overflow.h    h5tools_str.h
H5AbstractDs.h  H5B2public.h   H5CppDoc.h     H5Dpkg.h        H5Epublic.h    H5FDmpio.h    H5FaccProp.h    H5Group.h     H5IdComponent.h  H5Location.h  H5Opublic.h      H5PredType.h  H5TBpublic.h    H5pubconf.h     h5tools_utils.h
H5Alltypes.h    H5Bpkg.h       H5Cpublic.h    H5Dpublic.h     H5Eterm.h      H5FDmulti.h   H5FcreatProp.h  H5HFpkg.h     H5Include.h      H5Lpkg.h      H5Oshared.h      H5PropList.h  H5Tpkg.h        H5public.h      h5trav.h
H5Apkg.h        H5Bpublic.h    H5DOpublic.h   H5DxferProp.h   H5Exception.h  H5FDpkg.h     H5File.h        H5HFpublic.h  H5IntType.h      H5Lpublic.h   H5PLextern.h     H5Rpkg.h      H5Tpublic.h     H5version.h     hdf5.h
H5Apublic.h     H5Classes.h    H5DSpublic.h   H5Edefin.h      H5FDcore.h     H5FDpublic.h  H5FloatType.h   H5HGpkg.h     H5Ipkg.h         H5MMpublic.h  H5PLpublic.h     H5Rpublic.h   H5VarLenType.h  h5diff.h        hdf5_hl.h
H5ArrayType.h   H5CommonFG.h   H5DataSet.h    H5Einit.h       H5FDdirect.h   H5FDsec2.h    H5Fpkg.h        H5HGpublic.h  H5Ipublic.h      H5MPpkg.h     H5PTpublic.h     H5SMpkg.h     H5Zpkg.h        h5tools.h
H5AtomType.h    H5CompType.h   H5DataSpace.h  H5EnumType.h    H5FDfamily.h   H5FDstdio.h   H5Fpublic.h     H5HLpkg.h     H5LTparse.h      H5Object.h    H5PacketTable.h  H5Spkg.h      H5Zpublic.h     h5tools_dump.h

hdf5/1.8.16/lib:
libhdf5.settings      libhdf5_cpp_debug.so.1.8.16  libhdf5_debug.so         libhdf5_hl_cpp_debug.a          libhdf5_hl_cpp_debug.so.10.1.0  libhdf5_hl_debug.so.1.8.16  libhdf5_tools_debug.so
libhdf5_cpp_debug.a   libhdf5_cpp_debug.so.10.1.0  libhdf5_debug.so.1.8.16  libhdf5_hl_cpp_debug.so         libhdf5_hl_debug.a              libhdf5_hl_debug.so.10.1.0  libhdf5_tools_debug.so.1.8.16
libhdf5_cpp_debug.so  libhdf5_debug.a              libhdf5_debug.so.10.1.0  libhdf5_hl_cpp_debug.so.1.8.16  libhdf5_hl_debug.so             libhdf5_tools_debug.a       libhdf5_tools_debug.so.10.1.0

hdf5/1.8.16/share:
COPYING  RELEASE.txt  USING_HDF5_CMake.txt  cmake

hdf5/1.8.16/share/cmake:
FindHDF5.cmake  hdf5-config-version.cmake  hdf5-config.cmake  hdf5-targets-debug.cmake  hdf5-targets.cmake",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,238,2016-05-02T14:28:31Z,2016-05-02T15:35:22Z,2016-05-02T15:35:22Z,CLOSED,False,2,2,1,https://github.com/afarbos,fix FindHDF5: add new debug suffix,1,[],https://github.com/Kitware/CMake/pull/238,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/238#issuecomment-216269673,"My install folder of hdf5 (1.8.16) after compilation in debug.
[root@db1cc796f170 Debug]# ls -R hdf5/1.8.16/
hdf5/1.8.16/:
bin  include  lib  share

hdf5/1.8.16/bin:
gif2h5  h52gif  h5copy  h5debug  h5diff  h5dump  h5import  h5jam  h5ls  h5mkgrp  h5repack  h5repart  h5stat  h5unjam

hdf5/1.8.16/include:
H5ACpkg.h       H5Attribute.h  H5Cpkg.h       H5DataType.h    H5Epkg.h       H5FDlog.h     H5FSpkg.h       H5Gpkg.h      H5HLpublic.h     H5LTpublic.h  H5OcreatProp.h   H5Ppkg.h      H5Spublic.h     H5api_adpt.h    h5tools_ref.h
H5ACpublic.h    H5B2pkg.h      H5Cpp.h        H5DcreatProp.h  H5Epubgen.h    H5FDmpi.h     H5FSpublic.h    H5Gpublic.h   H5IMpublic.h     H5Library.h   H5Opkg.h         H5Ppublic.h   H5StrType.h     H5overflow.h    h5tools_str.h
H5AbstractDs.h  H5B2public.h   H5CppDoc.h     H5Dpkg.h        H5Epublic.h    H5FDmpio.h    H5FaccProp.h    H5Group.h     H5IdComponent.h  H5Location.h  H5Opublic.h      H5PredType.h  H5TBpublic.h    H5pubconf.h     h5tools_utils.h
H5Alltypes.h    H5Bpkg.h       H5Cpublic.h    H5Dpublic.h     H5Eterm.h      H5FDmulti.h   H5FcreatProp.h  H5HFpkg.h     H5Include.h      H5Lpkg.h      H5Oshared.h      H5PropList.h  H5Tpkg.h        H5public.h      h5trav.h
H5Apkg.h        H5Bpublic.h    H5DOpublic.h   H5DxferProp.h   H5Exception.h  H5FDpkg.h     H5File.h        H5HFpublic.h  H5IntType.h      H5Lpublic.h   H5PLextern.h     H5Rpkg.h      H5Tpublic.h     H5version.h     hdf5.h
H5Apublic.h     H5Classes.h    H5DSpublic.h   H5Edefin.h      H5FDcore.h     H5FDpublic.h  H5FloatType.h   H5HGpkg.h     H5Ipkg.h         H5MMpublic.h  H5PLpublic.h     H5Rpublic.h   H5VarLenType.h  h5diff.h        hdf5_hl.h
H5ArrayType.h   H5CommonFG.h   H5DataSet.h    H5Einit.h       H5FDdirect.h   H5FDsec2.h    H5Fpkg.h        H5HGpublic.h  H5Ipublic.h      H5MPpkg.h     H5PTpublic.h     H5SMpkg.h     H5Zpkg.h        h5tools.h
H5AtomType.h    H5CompType.h   H5DataSpace.h  H5EnumType.h    H5FDfamily.h   H5FDstdio.h   H5Fpublic.h     H5HLpkg.h     H5LTparse.h      H5Object.h    H5PacketTable.h  H5Spkg.h      H5Zpublic.h     h5tools_dump.h

hdf5/1.8.16/lib:
libhdf5.settings      libhdf5_cpp_debug.so.1.8.16  libhdf5_debug.so         libhdf5_hl_cpp_debug.a          libhdf5_hl_cpp_debug.so.10.1.0  libhdf5_hl_debug.so.1.8.16  libhdf5_tools_debug.so
libhdf5_cpp_debug.a   libhdf5_cpp_debug.so.10.1.0  libhdf5_debug.so.1.8.16  libhdf5_hl_cpp_debug.so         libhdf5_hl_debug.a              libhdf5_hl_debug.so.10.1.0  libhdf5_tools_debug.so.1.8.16
libhdf5_cpp_debug.so  libhdf5_debug.a              libhdf5_debug.so.10.1.0  libhdf5_hl_cpp_debug.so.1.8.16  libhdf5_hl_debug.so             libhdf5_tools_debug.a       libhdf5_tools_debug.so.10.1.0

hdf5/1.8.16/share:
COPYING  RELEASE.txt  USING_HDF5_CMake.txt  cmake

hdf5/1.8.16/share/cmake:
FindHDF5.cmake  hdf5-config-version.cmake  hdf5-config.cmake  hdf5-targets-debug.cmake  hdf5-targets.cmake",Thanks!  Applied as commit 313676c with a minor tweak to the order.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,239,2016-05-06T12:42:11Z,2016-05-16T14:19:54Z,2016-05-16T14:19:54Z,CLOSED,False,244,20,2,https://github.com/asmorkalov,Set of debian package generator improvements,1,[],https://github.com/Kitware/CMake/pull/239,https://github.com/asmorkalov,1,https://github.com/Kitware/CMake/pull/239,"Implemented DEBIAN/shlibs control file generation if the package contains libraries
Implemented DEBIAN/postinst and DEBAIN/postrm files generation if the package
installs libraries in ldconfig controlled location (/lib/, /usr/lib/)
Implemented dependencies between Debian packages if multi-component setup is used
(breaks compatibility with previous versions)
Implemented proper Debian packages file naming for multi-component setup
(breaks compatibility with previous versions)
Allowed to set per-compoment Debian package architecture for multi-component setup.
Useful, if you distribute documentation (should have ""all architecture"").","Implemented DEBIAN/shlibs control file generation if the package contains libraries
Implemented DEBIAN/postinst and DEBAIN/postrm files generation if the package
installs libraries in ldconfig controlled location (/lib/, /usr/lib/)
Implemented dependencies between Debian packages if multi-component setup is used
(breaks compatibility with previous versions)
Implemented proper Debian packages file naming for multi-component setup
(breaks compatibility with previous versions)
Allowed to set per-compoment Debian package architecture for multi-component setup.
Useful, if you distribute documentation (should have ""all architecture"").",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,239,2016-05-06T12:42:11Z,2016-05-16T14:19:54Z,2016-05-16T14:19:54Z,CLOSED,False,244,20,2,https://github.com/asmorkalov,Set of debian package generator improvements,1,[],https://github.com/Kitware/CMake/pull/239,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/239#issuecomment-217430006,"Implemented DEBIAN/shlibs control file generation if the package contains libraries
Implemented DEBIAN/postinst and DEBAIN/postrm files generation if the package
installs libraries in ldconfig controlled location (/lib/, /usr/lib/)
Implemented dependencies between Debian packages if multi-component setup is used
(breaks compatibility with previous versions)
Implemented proper Debian packages file naming for multi-component setup
(breaks compatibility with previous versions)
Allowed to set per-compoment Debian package architecture for multi-component setup.
Useful, if you distribute documentation (should have ""all architecture"").",Cc: @do-m-en,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,239,2016-05-06T12:42:11Z,2016-05-16T14:19:54Z,2016-05-16T14:19:54Z,CLOSED,False,244,20,2,https://github.com/asmorkalov,Set of debian package generator improvements,1,[],https://github.com/Kitware/CMake/pull/239,https://github.com/do-m-en,3,https://github.com/Kitware/CMake/pull/239#issuecomment-218249980,"Implemented DEBIAN/shlibs control file generation if the package contains libraries
Implemented DEBIAN/postinst and DEBAIN/postrm files generation if the package
installs libraries in ldconfig controlled location (/lib/, /usr/lib/)
Implemented dependencies between Debian packages if multi-component setup is used
(breaks compatibility with previous versions)
Implemented proper Debian packages file naming for multi-component setup
(breaks compatibility with previous versions)
Allowed to set per-compoment Debian package architecture for multi-component setup.
Useful, if you distribute documentation (should have ""all architecture"").","I've split the patch into smaller parts for easier reviewing, made some minor changes and added some functionality:

Extended proper Debian packages file naming to also cover non multi-component packaging,
Added CPACK_DEBIAN_PACKAGE_RELEASE variable to completely cover the deb file name format rules by setting DebianRevisionNumber part (-.deb),
Fixed tests.

Patches applied to next:
https://cmake.org/gitweb?p=cmake.git;a=commit;h=a71b39e
Thanks,
Domen",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,239,2016-05-06T12:42:11Z,2016-05-16T14:19:54Z,2016-05-16T14:19:54Z,CLOSED,False,244,20,2,https://github.com/asmorkalov,Set of debian package generator improvements,1,[],https://github.com/Kitware/CMake/pull/239,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/239#issuecomment-219436829,"Implemented DEBIAN/shlibs control file generation if the package contains libraries
Implemented DEBIAN/postinst and DEBAIN/postrm files generation if the package
installs libraries in ldconfig controlled location (/lib/, /usr/lib/)
Implemented dependencies between Debian packages if multi-component setup is used
(breaks compatibility with previous versions)
Implemented proper Debian packages file naming for multi-component setup
(breaks compatibility with previous versions)
Allowed to set per-compoment Debian package architecture for multi-component setup.
Useful, if you distribute documentation (should have ""all architecture"").",These changes have been merged to master by commit 2b25174.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,240,2016-05-07T19:15:08Z,2016-05-09T13:37:00Z,2016-05-09T13:37:00Z,CLOSED,False,2,0,1,https://github.com/Andersbakken,Make find_package(Lua 5.3) work on homebrew.,1,[],https://github.com/Kitware/CMake/pull/240,https://github.com/Andersbakken,1,https://github.com/Kitware/CMake/pull/240,"Homebrew installs lua 5.3 like this:
./bin/lua-5.3
./bin/lua5.3
./bin/luac-5.3
./bin/luac5.3
./bin/luarocks-5.3
./bin/luarocks-admin-5.3
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua51.cmake
./Cellar/freeciv/2.5.1_1/etc/freeciv/database.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/multiplayer/script.lua
./Cellar/freeciv/2.5.3/etc/freeciv/database.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.3/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/multiplayer/script.lua
./Cellar/llvm36/3.6.2/lib/llvm-3.6/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/llvm37/3.7.1/lib/llvm-3.7/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/lua53
./Cellar/lua53/5.3.2_2
./Cellar/lua53/5.3.2_2/bin
./Cellar/lua53/5.3.2_2/bin/lua-5.3
./Cellar/lua53/5.3.2_2/bin/lua5.3
./Cellar/lua53/5.3.2_2/bin/luac-5.3
./Cellar/lua53/5.3.2_2/bin/luac5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/include
./Cellar/lua53/5.3.2_2/include/lua-5.3
./Cellar/lua53/5.3.2_2/include/lua-5.3/lauxlib.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.hpp
./Cellar/lua53/5.3.2_2/include/lua-5.3/luaconf.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lualib.h
./Cellar/lua53/5.3.2_2/include/lua5.3
./Cellar/lua53/5.3.2_2/INSTALL_RECEIPT.json
./Cellar/lua53/5.3.2_2/lib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.2.dylib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.dylib
./Cellar/lua53/5.3.2_2/lib/pkgconfig
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua-5.3.pc
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua5.3.pc
./Cellar/lua53/5.3.2_2/libexec
./Cellar/lua53/5.3.2_2/libexec/bin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/libexec/share
./Cellar/lua53/5.3.2_2/libexec/share/lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/builtin.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/cmake.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/command.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/cvs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_file.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_ssh.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/sscm.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/svn.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/lua.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/patch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/tar.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/zip.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/api.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/multipart.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/README
./Cellar/lua53/5.3.2_2/share
./Cellar/lua53/5.3.2_2/share/lua
./Cellar/lua53/5.3.2_2/share/lua/5.3
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/share/man
./Cellar/lua53/5.3.2_2/share/man/man1
./Cellar/lua53/5.3.2_2/share/man/man1/lua-5.3.2
./Cellar/lua53/5.3.2_2/share/man/man1/luac-5.3.2
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/source-highlight/3.1.8/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8/share/source-highlight/lua.lang
./Cellar/source-highlight/3.1.8_1/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8_1/share/source-highlight/lua.lang
./etc/freeciv/database.lua
./etc/luarocks52
./etc/luarocks52/config-5.2.lua
./etc/luarocks53
./etc/luarocks53/config-5.3.lua
./include/clang/AST/EvaluatedExprVisitor.h
./include/lua-5.3
./include/lua5.3
./lib/liblua.5.3.2.dylib
./lib/liblua.5.3.dylib
./lib/pkgconfig/lua-5.3.pc
./lib/pkgconfig/lua5.3.pc
./Library/LinkedKegs/lua53
./Library/Taps/homebrew/homebrew-core/Formula/lua.rb
./Library/Taps/homebrew/homebrew-core/Formula/lua51.rb
./Library/Taps/homebrew/homebrew-core/Formula/luabind.rb
./Library/Taps/homebrew/homebrew-core/Formula/luajit.rb
./Library/Taps/homebrew/homebrew-versions/lua53.rb
./opt/lua53
./share/lua
./share/lua/5.3
./share/lua/5.3/luarocks
./share/lua/5.3/luarocks/add.lua
./share/lua/5.3/luarocks/admin_remove.lua
./share/lua/5.3/luarocks/build
./share/lua/5.3/luarocks/build.lua
./share/lua/5.3/luarocks/cache.lua
./share/lua/5.3/luarocks/cfg.lua
./share/lua/5.3/luarocks/command_line.lua
./share/lua/5.3/luarocks/config_cmd.lua
./share/lua/5.3/luarocks/deps.lua
./share/lua/5.3/luarocks/dir.lua
./share/lua/5.3/luarocks/doc.lua
./share/lua/5.3/luarocks/download.lua
./share/lua/5.3/luarocks/fetch
./share/lua/5.3/luarocks/fetch.lua
./share/lua/5.3/luarocks/fs
./share/lua/5.3/luarocks/fs.lua
./share/lua/5.3/luarocks/help.lua
./share/lua/5.3/luarocks/index.lua
./share/lua/5.3/luarocks/install.lua
./share/lua/5.3/luarocks/lint.lua
./share/lua/5.3/luarocks/list.lua
./share/lua/5.3/luarocks/loader.lua
./share/lua/5.3/luarocks/make.lua
./share/lua/5.3/luarocks/make_manifest.lua
./share/lua/5.3/luarocks/manif.lua
./share/lua/5.3/luarocks/manif_core.lua
./share/lua/5.3/luarocks/new_version.lua
./share/lua/5.3/luarocks/pack.lua
./share/lua/5.3/luarocks/path.lua
./share/lua/5.3/luarocks/path_cmd.lua
./share/lua/5.3/luarocks/persist.lua
./share/lua/5.3/luarocks/purge.lua
./share/lua/5.3/luarocks/refresh_cache.lua
./share/lua/5.3/luarocks/remove.lua
./share/lua/5.3/luarocks/repos.lua
./share/lua/5.3/luarocks/require.lua
./share/lua/5.3/luarocks/search.lua
./share/lua/5.3/luarocks/show.lua
./share/lua/5.3/luarocks/site_config.lua
./share/lua/5.3/luarocks/tools
./share/lua/5.3/luarocks/type_check.lua
./share/lua/5.3/luarocks/unpack.lua
./share/lua/5.3/luarocks/upload
./share/lua/5.3/luarocks/upload.lua
./share/lua/5.3/luarocks/util.lua
./share/lua/5.3/luarocks/validate.lua
./share/lua/5.3/luarocks/write_rockspec.lua
./share/man/man1/lua-5.3.2
./share/man/man1/luac-5.3.2
Thus it doesn't find the library (due to the liblua.{$VERSION} scheme).
The one for the include dir isn't necessary to fix the problem but it
seemed more symmetric.","Homebrew installs lua 5.3 like this:
./bin/lua-5.3
./bin/lua5.3
./bin/luac-5.3
./bin/luac5.3
./bin/luarocks-5.3
./bin/luarocks-admin-5.3
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua51.cmake
./Cellar/freeciv/2.5.1_1/etc/freeciv/database.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/multiplayer/script.lua
./Cellar/freeciv/2.5.3/etc/freeciv/database.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.3/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/multiplayer/script.lua
./Cellar/llvm36/3.6.2/lib/llvm-3.6/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/llvm37/3.7.1/lib/llvm-3.7/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/lua53
./Cellar/lua53/5.3.2_2
./Cellar/lua53/5.3.2_2/bin
./Cellar/lua53/5.3.2_2/bin/lua-5.3
./Cellar/lua53/5.3.2_2/bin/lua5.3
./Cellar/lua53/5.3.2_2/bin/luac-5.3
./Cellar/lua53/5.3.2_2/bin/luac5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/include
./Cellar/lua53/5.3.2_2/include/lua-5.3
./Cellar/lua53/5.3.2_2/include/lua-5.3/lauxlib.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.hpp
./Cellar/lua53/5.3.2_2/include/lua-5.3/luaconf.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lualib.h
./Cellar/lua53/5.3.2_2/include/lua5.3
./Cellar/lua53/5.3.2_2/INSTALL_RECEIPT.json
./Cellar/lua53/5.3.2_2/lib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.2.dylib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.dylib
./Cellar/lua53/5.3.2_2/lib/pkgconfig
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua-5.3.pc
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua5.3.pc
./Cellar/lua53/5.3.2_2/libexec
./Cellar/lua53/5.3.2_2/libexec/bin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/libexec/share
./Cellar/lua53/5.3.2_2/libexec/share/lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/builtin.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/cmake.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/command.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/cvs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_file.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_ssh.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/sscm.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/svn.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/lua.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/patch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/tar.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/zip.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/api.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/multipart.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/README
./Cellar/lua53/5.3.2_2/share
./Cellar/lua53/5.3.2_2/share/lua
./Cellar/lua53/5.3.2_2/share/lua/5.3
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/share/man
./Cellar/lua53/5.3.2_2/share/man/man1
./Cellar/lua53/5.3.2_2/share/man/man1/lua-5.3.2
./Cellar/lua53/5.3.2_2/share/man/man1/luac-5.3.2
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/source-highlight/3.1.8/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8/share/source-highlight/lua.lang
./Cellar/source-highlight/3.1.8_1/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8_1/share/source-highlight/lua.lang
./etc/freeciv/database.lua
./etc/luarocks52
./etc/luarocks52/config-5.2.lua
./etc/luarocks53
./etc/luarocks53/config-5.3.lua
./include/clang/AST/EvaluatedExprVisitor.h
./include/lua-5.3
./include/lua5.3
./lib/liblua.5.3.2.dylib
./lib/liblua.5.3.dylib
./lib/pkgconfig/lua-5.3.pc
./lib/pkgconfig/lua5.3.pc
./Library/LinkedKegs/lua53
./Library/Taps/homebrew/homebrew-core/Formula/lua.rb
./Library/Taps/homebrew/homebrew-core/Formula/lua51.rb
./Library/Taps/homebrew/homebrew-core/Formula/luabind.rb
./Library/Taps/homebrew/homebrew-core/Formula/luajit.rb
./Library/Taps/homebrew/homebrew-versions/lua53.rb
./opt/lua53
./share/lua
./share/lua/5.3
./share/lua/5.3/luarocks
./share/lua/5.3/luarocks/add.lua
./share/lua/5.3/luarocks/admin_remove.lua
./share/lua/5.3/luarocks/build
./share/lua/5.3/luarocks/build.lua
./share/lua/5.3/luarocks/cache.lua
./share/lua/5.3/luarocks/cfg.lua
./share/lua/5.3/luarocks/command_line.lua
./share/lua/5.3/luarocks/config_cmd.lua
./share/lua/5.3/luarocks/deps.lua
./share/lua/5.3/luarocks/dir.lua
./share/lua/5.3/luarocks/doc.lua
./share/lua/5.3/luarocks/download.lua
./share/lua/5.3/luarocks/fetch
./share/lua/5.3/luarocks/fetch.lua
./share/lua/5.3/luarocks/fs
./share/lua/5.3/luarocks/fs.lua
./share/lua/5.3/luarocks/help.lua
./share/lua/5.3/luarocks/index.lua
./share/lua/5.3/luarocks/install.lua
./share/lua/5.3/luarocks/lint.lua
./share/lua/5.3/luarocks/list.lua
./share/lua/5.3/luarocks/loader.lua
./share/lua/5.3/luarocks/make.lua
./share/lua/5.3/luarocks/make_manifest.lua
./share/lua/5.3/luarocks/manif.lua
./share/lua/5.3/luarocks/manif_core.lua
./share/lua/5.3/luarocks/new_version.lua
./share/lua/5.3/luarocks/pack.lua
./share/lua/5.3/luarocks/path.lua
./share/lua/5.3/luarocks/path_cmd.lua
./share/lua/5.3/luarocks/persist.lua
./share/lua/5.3/luarocks/purge.lua
./share/lua/5.3/luarocks/refresh_cache.lua
./share/lua/5.3/luarocks/remove.lua
./share/lua/5.3/luarocks/repos.lua
./share/lua/5.3/luarocks/require.lua
./share/lua/5.3/luarocks/search.lua
./share/lua/5.3/luarocks/show.lua
./share/lua/5.3/luarocks/site_config.lua
./share/lua/5.3/luarocks/tools
./share/lua/5.3/luarocks/type_check.lua
./share/lua/5.3/luarocks/unpack.lua
./share/lua/5.3/luarocks/upload
./share/lua/5.3/luarocks/upload.lua
./share/lua/5.3/luarocks/util.lua
./share/lua/5.3/luarocks/validate.lua
./share/lua/5.3/luarocks/write_rockspec.lua
./share/man/man1/lua-5.3.2
./share/man/man1/luac-5.3.2
Thus it doesn't find the library (due to the liblua.{$VERSION} scheme).
The one for the include dir isn't necessary to fix the problem but it
seemed more symmetric.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,240,2016-05-07T19:15:08Z,2016-05-09T13:37:00Z,2016-05-09T13:37:00Z,CLOSED,False,2,0,1,https://github.com/Andersbakken,Make find_package(Lua 5.3) work on homebrew.,1,[],https://github.com/Kitware/CMake/pull/240,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/240#issuecomment-217865905,"Homebrew installs lua 5.3 like this:
./bin/lua-5.3
./bin/lua5.3
./bin/luac-5.3
./bin/luac5.3
./bin/luarocks-5.3
./bin/luarocks-admin-5.3
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.1/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.4.3/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.4.3/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.0/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.0/share/cmake/Modules/FindLua51.cmake
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua50.rst
./Cellar/cmake/3.5.1/share/cmake/Help/module/FindLua51.rst
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua50.cmake
./Cellar/cmake/3.5.1/share/cmake/Modules/FindLua51.cmake
./Cellar/freeciv/2.5.1_1/etc/freeciv/database.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.1_1/share/freeciv/multiplayer/script.lua
./Cellar/freeciv/2.5.3/etc/freeciv/database.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ1/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/civ2civ3/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/classic/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/default/default.lua
./Cellar/freeciv/2.5.3/share/freeciv/experimental/script.lua
./Cellar/freeciv/2.5.3/share/freeciv/multiplayer/script.lua
./Cellar/llvm36/3.6.2/lib/llvm-3.6/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/llvm37/3.7.1/lib/llvm-3.7/include/clang/AST/EvaluatedExprVisitor.h
./Cellar/lua53
./Cellar/lua53/5.3.2_2
./Cellar/lua53/5.3.2_2/bin
./Cellar/lua53/5.3.2_2/bin/lua-5.3
./Cellar/lua53/5.3.2_2/bin/lua5.3
./Cellar/lua53/5.3.2_2/bin/luac-5.3
./Cellar/lua53/5.3.2_2/bin/luac5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/include
./Cellar/lua53/5.3.2_2/include/lua-5.3
./Cellar/lua53/5.3.2_2/include/lua-5.3/lauxlib.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lua.hpp
./Cellar/lua53/5.3.2_2/include/lua-5.3/luaconf.h
./Cellar/lua53/5.3.2_2/include/lua-5.3/lualib.h
./Cellar/lua53/5.3.2_2/include/lua5.3
./Cellar/lua53/5.3.2_2/INSTALL_RECEIPT.json
./Cellar/lua53/5.3.2_2/lib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.2.dylib
./Cellar/lua53/5.3.2_2/lib/liblua.5.3.dylib
./Cellar/lua53/5.3.2_2/lib/pkgconfig
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua-5.3.pc
./Cellar/lua53/5.3.2_2/lib/pkgconfig/lua5.3.pc
./Cellar/lua53/5.3.2_2/libexec
./Cellar/lua53/5.3.2_2/libexec/bin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-5.3
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin
./Cellar/lua53/5.3.2_2/libexec/bin/luarocks-admin-5.3
./Cellar/lua53/5.3.2_2/libexec/share
./Cellar/lua53/5.3.2_2/libexec/share/lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/builtin.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/cmake.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/command.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/cvs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_file.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/git_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_http.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_https.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/hg_ssh.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/sscm.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch/svn.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/lua.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/unix.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32/tools.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs/win32.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/patch.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/tar.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/tools/zip.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/api.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload/multipart.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/libexec/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/README
./Cellar/lua53/5.3.2_2/share
./Cellar/lua53/5.3.2_2/share/lua
./Cellar/lua53/5.3.2_2/share/lua/5.3
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/add.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/admin_remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/build.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/cfg.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/command_line.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/config_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/deps.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/dir.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/doc.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/download.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fetch.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/fs.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/help.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/index.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/install.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/lint.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/list.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/loader.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/make_manifest.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/manif_core.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/new_version.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/pack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/path_cmd.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/persist.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/purge.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/refresh_cache.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/remove.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/repos.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/require.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/search.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/show.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/site_config.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/tools
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/type_check.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/unpack.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/upload.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/util.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/validate.lua
./Cellar/lua53/5.3.2_2/share/lua/5.3/luarocks/write_rockspec.lua
./Cellar/lua53/5.3.2_2/share/man
./Cellar/lua53/5.3.2_2/share/man/man1
./Cellar/lua53/5.3.2_2/share/man/man1/lua-5.3.2
./Cellar/lua53/5.3.2_2/share/man/man1/luac-5.3.2
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.5.1_2/lib/QtXmlPatterns.framework/Versions/5/Headers/5.5.1/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_p.h
./Cellar/qt5/5.6.0/lib/QtXmlPatterns.framework/Versions/5/Headers/5.6.0/QtXmlPatterns/private/qevaluationcache_tpl_p.h
./Cellar/source-highlight/3.1.8/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8/share/source-highlight/lua.lang
./Cellar/source-highlight/3.1.8_1/share/doc/source-highlight/test.lua.html
./Cellar/source-highlight/3.1.8_1/share/source-highlight/lua.lang
./etc/freeciv/database.lua
./etc/luarocks52
./etc/luarocks52/config-5.2.lua
./etc/luarocks53
./etc/luarocks53/config-5.3.lua
./include/clang/AST/EvaluatedExprVisitor.h
./include/lua-5.3
./include/lua5.3
./lib/liblua.5.3.2.dylib
./lib/liblua.5.3.dylib
./lib/pkgconfig/lua-5.3.pc
./lib/pkgconfig/lua5.3.pc
./Library/LinkedKegs/lua53
./Library/Taps/homebrew/homebrew-core/Formula/lua.rb
./Library/Taps/homebrew/homebrew-core/Formula/lua51.rb
./Library/Taps/homebrew/homebrew-core/Formula/luabind.rb
./Library/Taps/homebrew/homebrew-core/Formula/luajit.rb
./Library/Taps/homebrew/homebrew-versions/lua53.rb
./opt/lua53
./share/lua
./share/lua/5.3
./share/lua/5.3/luarocks
./share/lua/5.3/luarocks/add.lua
./share/lua/5.3/luarocks/admin_remove.lua
./share/lua/5.3/luarocks/build
./share/lua/5.3/luarocks/build.lua
./share/lua/5.3/luarocks/cache.lua
./share/lua/5.3/luarocks/cfg.lua
./share/lua/5.3/luarocks/command_line.lua
./share/lua/5.3/luarocks/config_cmd.lua
./share/lua/5.3/luarocks/deps.lua
./share/lua/5.3/luarocks/dir.lua
./share/lua/5.3/luarocks/doc.lua
./share/lua/5.3/luarocks/download.lua
./share/lua/5.3/luarocks/fetch
./share/lua/5.3/luarocks/fetch.lua
./share/lua/5.3/luarocks/fs
./share/lua/5.3/luarocks/fs.lua
./share/lua/5.3/luarocks/help.lua
./share/lua/5.3/luarocks/index.lua
./share/lua/5.3/luarocks/install.lua
./share/lua/5.3/luarocks/lint.lua
./share/lua/5.3/luarocks/list.lua
./share/lua/5.3/luarocks/loader.lua
./share/lua/5.3/luarocks/make.lua
./share/lua/5.3/luarocks/make_manifest.lua
./share/lua/5.3/luarocks/manif.lua
./share/lua/5.3/luarocks/manif_core.lua
./share/lua/5.3/luarocks/new_version.lua
./share/lua/5.3/luarocks/pack.lua
./share/lua/5.3/luarocks/path.lua
./share/lua/5.3/luarocks/path_cmd.lua
./share/lua/5.3/luarocks/persist.lua
./share/lua/5.3/luarocks/purge.lua
./share/lua/5.3/luarocks/refresh_cache.lua
./share/lua/5.3/luarocks/remove.lua
./share/lua/5.3/luarocks/repos.lua
./share/lua/5.3/luarocks/require.lua
./share/lua/5.3/luarocks/search.lua
./share/lua/5.3/luarocks/show.lua
./share/lua/5.3/luarocks/site_config.lua
./share/lua/5.3/luarocks/tools
./share/lua/5.3/luarocks/type_check.lua
./share/lua/5.3/luarocks/unpack.lua
./share/lua/5.3/luarocks/upload
./share/lua/5.3/luarocks/upload.lua
./share/lua/5.3/luarocks/util.lua
./share/lua/5.3/luarocks/validate.lua
./share/lua/5.3/luarocks/write_rockspec.lua
./share/man/man1/lua-5.3.2
./share/man/man1/luac-5.3.2
Thus it doesn't find the library (due to the liblua.{$VERSION} scheme).
The one for the include dir isn't necessary to fix the problem but it
seemed more symmetric.",Thanks.  Applied as commit 25f34de.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/borisfom,1,https://github.com/Kitware/CMake/pull/241,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/241#issuecomment-219534116,,Cc: @jamesbigler,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/borisfom,3,https://github.com/Kitware/CMake/pull/241#issuecomment-219597049,,OK the simple test worked after I have removed extra parens; I have squashed in the fix.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/jamesbigler,4,https://github.com/Kitware/CMake/pull/241#issuecomment-219614107,,Looks good to me.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/borisfom,5,https://github.com/Kitware/CMake/pull/241#issuecomment-220160481,,"So, looks like we have it ready to go - please merge!",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,241,2016-05-13T07:16:10Z,2016-05-19T15:26:54Z,2017-07-13T02:34:39Z,CLOSED,False,7,0,1,https://github.com/borisfom,Added FP16 detection,1,[],https://github.com/Kitware/CMake/pull/241,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/241#issuecomment-220360126,,Thanks.  Applied as commit cc95001.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/stanionascu,1,https://github.com/Kitware/CMake/pull/242,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.","As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/stanionascu,2,https://github.com/Kitware/CMake/pull/242#issuecomment-219253468,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.",As in CB Project spec there's a place for project wide compiler options and include dirs.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/242#issuecomment-219435876,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.",Cc: @neundorf,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/242#issuecomment-226809100,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.",Cc: @hunger,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/242#issuecomment-228167125,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.",There is ongoing work to provide infrastructure to help IDEs get information like this robustly.  See developer mailing list discussion on cmake-daemon.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/stanionascu,6,https://github.com/Kitware/CMake/pull/242#issuecomment-228194065,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.","Yes that's awesome, but I don't quite get it what it has to do with the codeblocks generator ;)
Thanks anyway.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/bradking,7,https://github.com/Kitware/CMake/pull/242#issuecomment-228735022,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.","I'm not familiar enough with CodeBlocks to review this change, and no one else I've Cc'd that has worked on the generator before responded.  You could try posting to the dev mailing list as described in CONTRIBUTING.rst to reach a broader audience.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,242,2016-05-14T21:47:47Z,2016-06-23T20:04:00Z,2016-06-29T13:29:49Z,CLOSED,False,29,0,1,https://github.com/stanionascu,output all cxx flags for CodeBlocks generator,1,[],https://github.com/Kitware/CMake/pull/242,https://github.com/hunger,8,https://github.com/Kitware/CMake/pull/242#issuecomment-229355705,"As CB supports ""Project"" and ""Target"" compiler flags output them as well.
That should make it easier for IDEs to find all compile options w/o greping the Makefiles.","@stanionascu: The daemon-mode has nothing to do with codeblocks:-) It will hopefully make the CodeBlocks extra generator superfluous some day.
The CodeBlocks file is versioned. Nobody ever incremented the version number in it AFAICT, but we should when changing the contents of said file. No idea what CodeBlocks expects there though:-)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,243,2016-05-16T13:37:16Z,2016-05-16T14:17:45Z,2016-05-16T14:17:45Z,CLOSED,False,11,2,1,https://github.com/afarbos,update FindGLEW.cmake in order to be able to find glew from a custom directory,1,[],https://github.com/Kitware/CMake/pull/243,https://github.com/afarbos,1,https://github.com/Kitware/CMake/pull/243,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,243,2016-05-16T13:37:16Z,2016-05-16T14:17:45Z,2016-05-16T14:17:45Z,CLOSED,False,11,2,1,https://github.com/afarbos,update FindGLEW.cmake in order to be able to find glew from a custom directory,1,[],https://github.com/Kitware/CMake/pull/243,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/243#issuecomment-219436303,,"There is no need for a separate GLEW_ROOT and we generally don't have many <pkg>_ROOT variables in find modules.  If you have a custom prefix where things are installed then add it to the CMAKE_PREFIX_PATH, either in the cache or the environment.  This works for all packages.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,244,2016-05-21T09:49:22Z,2016-05-24T17:55:08Z,2016-05-25T12:50:43Z,MERGED,True,2,0,1,https://github.com/fetzerch,"ExternalProject: Fix git stash not using ""--all"" option",1,[],https://github.com/Kitware/CMake/pull/244,https://github.com/fetzerch,1,https://github.com/Kitware/CMake/pull/244,"GIT_VERSION_STRING is unset in _ep_write_gitupdate_script(), hence git stash is not being called with the --all option, even if Git is new enough to support this.
I've found this issue while tracking down the following error that appeared in an external project using git with untracked files.
No stash found.
CMake Error at ...tmp/...-gitupdate.cmake:136 (message):
  Failed to unstash changes in: '...'.
  You will have to resolve the conflicts manually

Without --all the repo apears dirty and the generated -gitupdate.cmake tries to stash files which fails.","GIT_VERSION_STRING is unset in _ep_write_gitupdate_script(), hence git stash is not being called with the --all option, even if Git is new enough to support this.
I've found this issue while tracking down the following error that appeared in an external project using git with untracked files.
No stash found.
CMake Error at ...tmp/...-gitupdate.cmake:136 (message):
  Failed to unstash changes in: '...'.
  You will have to resolve the conflicts manually

Without --all the repo apears dirty and the generated -gitupdate.cmake tries to stash files which fails.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,244,2016-05-21T09:49:22Z,2016-05-24T17:55:08Z,2016-05-25T12:50:43Z,MERGED,True,2,0,1,https://github.com/fetzerch,"ExternalProject: Fix git stash not using ""--all"" option",1,[],https://github.com/Kitware/CMake/pull/244,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/244#issuecomment-220984948,"GIT_VERSION_STRING is unset in _ep_write_gitupdate_script(), hence git stash is not being called with the --all option, even if Git is new enough to support this.
I've found this issue while tracking down the following error that appeared in an external project using git with untracked files.
No stash found.
CMake Error at ...tmp/...-gitupdate.cmake:136 (message):
  Failed to unstash changes in: '...'.
  You will have to resolve the conflicts manually

Without --all the repo apears dirty and the generated -gitupdate.cmake tries to stash files which fails.",Thanks!  Merged to next for testing.  I will merge to master later.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,244,2016-05-21T09:49:22Z,2016-05-24T17:55:08Z,2016-05-25T12:50:43Z,MERGED,True,2,0,1,https://github.com/fetzerch,"ExternalProject: Fix git stash not using ""--all"" option",1,[],https://github.com/Kitware/CMake/pull/244,https://github.com/fetzerch,3,https://github.com/Kitware/CMake/pull/244#issuecomment-221476334,"GIT_VERSION_STRING is unset in _ep_write_gitupdate_script(), hence git stash is not being called with the --all option, even if Git is new enough to support this.
I've found this issue while tracking down the following error that appeared in an external project using git with untracked files.
No stash found.
CMake Error at ...tmp/...-gitupdate.cmake:136 (message):
  Failed to unstash changes in: '...'.
  You will have to resolve the conflicts manually

Without --all the repo apears dirty and the generated -gitupdate.cmake tries to stash files which fails.",Thanks for the quick merge. Is there the possibility to get this backported also to dot releases (if there are any)?,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,244,2016-05-21T09:49:22Z,2016-05-24T17:55:08Z,2016-05-25T12:50:43Z,MERGED,True,2,0,1,https://github.com/fetzerch,"ExternalProject: Fix git stash not using ""--all"" option",1,[],https://github.com/Kitware/CMake/pull/244,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/244#issuecomment-221565692,"GIT_VERSION_STRING is unset in _ep_write_gitupdate_script(), hence git stash is not being called with the --all option, even if Git is new enough to support this.
I've found this issue while tracking down the following error that appeared in an external project using git with untracked files.
No stash found.
CMake Error at ...tmp/...-gitupdate.cmake:136 (message):
  Failed to unstash changes in: '...'.
  You will have to resolve the conflicts manually

Without --all the repo apears dirty and the generated -gitupdate.cmake tries to stash files which fails.","Is there the possibility to get this backported also to dot releases

The freeze for 3.6 is next week.  I don't think there will be a 3.5.3.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,245,2016-05-25T10:33:26Z,2016-05-25T13:54:26Z,2016-05-25T13:54:26Z,CLOSED,False,4,2,1,https://github.com/jsharpe,Add support for finding cublas_device library,1,[],https://github.com/Kitware/CMake/pull/245,https://github.com/jsharpe,1,https://github.com/Kitware/CMake/pull/245,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,245,2016-05-25T10:33:26Z,2016-05-25T13:54:26Z,2016-05-25T13:54:26Z,CLOSED,False,4,2,1,https://github.com/jsharpe,Add support for finding cublas_device library,1,[],https://github.com/Kitware/CMake/pull/245,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/245#issuecomment-221583291,,Thanks.  Applied as commit 81e73b7.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,246,2016-05-25T12:45:00Z,2016-05-25T13:55:55Z,2016-05-25T13:55:55Z,CLOSED,False,14,4,2,https://github.com/hjmallon,Add feature to DragNDrop CPack generator to disable /Applications sym…,1,[],https://github.com/Kitware/CMake/pull/246,https://github.com/hjmallon,1,https://github.com/Kitware/CMake/pull/246,…link with an option,…link with an option,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,246,2016-05-25T12:45:00Z,2016-05-25T13:55:55Z,2016-05-25T13:55:55Z,CLOSED,False,14,4,2,https://github.com/hjmallon,Add feature to DragNDrop CPack generator to disable /Applications sym…,1,[],https://github.com/Kitware/CMake/pull/246,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/246#issuecomment-221565887,…link with an option,Cc: @robertmaynard,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,246,2016-05-25T12:45:00Z,2016-05-25T13:55:55Z,2016-05-25T13:55:55Z,CLOSED,False,14,4,2,https://github.com/hjmallon,Add feature to DragNDrop CPack generator to disable /Applications sym…,1,[],https://github.com/Kitware/CMake/pull/246,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/246#issuecomment-221583712,…link with an option,Thanks.  Applied as commit 3acc29f with minor tweaks.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/247,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/zaufi,2,https://github.com/Kitware/CMake/pull/247#issuecomment-223382455,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","There is a bunch of references to MSVC* in function _Boost_GUESS_COMPILER_PREFIX, maybe they should be fixed too?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/247#issuecomment-223383614,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","There is a bunch of references to MSVC* in function _Boost_GUESS_COMPILER_PREFIX, maybe they should be fixed too?

Yes.  That would be a nice cleanup.  If you do that part, please make it a separate preceding commit (still in this PR is fine).  Thanks!",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/zaufi,4,https://github.com/Kitware/CMake/pull/247#issuecomment-223397334,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","BTW, said

compute the versioned directory name from CMAKE_CXX_COMPILER_VERSION

did you mean using math()?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/zaufi,5,https://github.com/Kitware/CMake/pull/247#issuecomment-223399004,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","Heh, I'm not really proficient w/ git :( ... now there is few ""same"" commits...
I'll do a new clone and apply patches tomorrow opening a new (""clean"") PR...",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/247#issuecomment-223401992,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","did you mean using math()?

Yes.  Note that the IDE version and the cl version differ by 6 prior to VS 2015, at which point they now differ by 5.

I'll do a new clone and apply patches tomorrow opening a new (""clean"") PR...

You can just force-push a branch of the same name to your GitHub fork and this PR will be updated with it.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,247,2016-06-02T17:56:47Z,2016-06-03T06:34:53Z,2016-06-03T06:34:53Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries,4,[],https://github.com/Kitware/CMake/pull/247,https://github.com/zaufi,7,https://github.com/Kitware/CMake/pull/247#issuecomment-223489447,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","@bradking, I don't think it worth to have calculations here... First ""exception"" you've already mention. Here is another one:
...
elseif(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 13.10)
  set(_boost_COMPILER ""-vc71"")
elseif(NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 13)
  set(_boost_COMPILER ""-vc7"")
...

so it wouldn't be as clear as ""naive"" way w/ if/elseif ...
And math also can cause problems and needs maintain when next version of cl would be 19.25 or 20.00... it wouldn't be as easy as adding just one more elseif...",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,248,2016-06-03T06:34:37Z,2016-06-03T15:17:26Z,2016-06-03T17:13:13Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries (#2),2,[],https://github.com/Kitware/CMake/pull/248,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/248,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,248,2016-06-03T06:34:37Z,2016-06-03T15:17:26Z,2016-06-03T17:13:13Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries (#2),2,[],https://github.com/Kitware/CMake/pull/248,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/248#issuecomment-223607825,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/",Thanks. Applied with minor tweaks as commit 3720d5f and commit c3a281f.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,248,2016-06-03T06:34:37Z,2016-06-03T15:17:26Z,2016-06-03T17:13:13Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries (#2),2,[],https://github.com/Kitware/CMake/pull/248,https://github.com/zaufi,3,https://github.com/Kitware/CMake/pull/248#issuecomment-223618525,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","I wonder, what the reason to test strings like in bash?
if(""x${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""xMSVC"")",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,248,2016-06-03T06:34:37Z,2016-06-03T15:17:26Z,2016-06-03T17:13:13Z,CLOSED,False,56,19,1,https://github.com/zaufi,Append a library search path found in official Windows prebuilt binaries (#2),2,[],https://github.com/Kitware/CMake/pull/248,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/248#issuecomment-223637596,"So you don't need to specify BOOST_LIBRARYDIR along with BOOST_ROOT provided.
See also: https://sourceforge.net/projects/boost/files/boost-binaries/","what the reason to test strings like in bash?

That is to support projects that do not set CMP0054 to NEW.  There is a variable called MSVC, so the need for this is unique to checks against that compiler id.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/Bekenn,1,https://github.com/Kitware/CMake/pull/249,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/Bekenn,2,https://github.com/Kitware/CMake/pull/249#issuecomment-223734136,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",I'll be perfectly happy if only the first three commits are accepted; default handling of .mig files may not be desirable since it would be specific to the Xcode back-end.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/249#issuecomment-223949612,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",Cc: @gjasny,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/gjasny,4,https://github.com/Kitware/CMake/pull/249#issuecomment-224075716,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","The first three look sane but would benefit from a test case.
On the fourth I'm not sure if the mf file extension should really map to the MIG language. Brad, what do you think?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/gjasny,5,https://github.com/Kitware/CMake/pull/249#issuecomment-224075852,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",I'll take care of the patches by Sunday.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/Bekenn,6,https://github.com/Kitware/CMake/pull/249#issuecomment-224087845,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",I'll try and find some time for adding a test case.  Should I drop the fourth commit from the PR?,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/gjasny,7,https://github.com/Kitware/CMake/pull/249#issuecomment-224103150,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.",It does not make a difference because CMake does not use GitHub for PR or Patches.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/gjasny,8,https://github.com/Kitware/CMake/pull/249#issuecomment-225460390,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","I polished and pushed the xcode-mig-support topic branch: https://cmake.org/gitweb?p=stage/cmake.git;a=shortlog;h=refs/heads/xcode-mig-support
The Mach Interface Generator (mig) produces a .h and one or two .c files from one .mig file.
@bradking Is b969b09 a sane thing to do? Or should we revert some of the commits and insist in using add_custom_command to invoke the mig generator?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/Bekenn,9,https://github.com/Kitware/CMake/pull/249#issuecomment-225461254,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","I'm happy without b969b09; I can always explicitly set the LANGUAGE property on the mig file to invoke Xcode's usual handling (if I know that the Xcode generator is being used).  On the other hand, the MSVC generator knows how to handle .rc files, so there is some precedent for this sort of thing.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/bradking,10,https://github.com/Kitware/CMake/pull/249#issuecomment-225592544,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","Is b969b09 a sane thing to do?

No.  Its effects are a partial implementation of enable_language(MIG).

the MSVC generator knows how to handle .rc files, so there is some precedent for this sort of thing.

Yes, but that is done with an explicit enable_language(RC) in Modules/Platform/Windows-MSVC.cmake and similar platforms.  The result is that .rc files work not only in the VS IDE generators but also in Makefile and Ninja generators on Windows with the proper toolchains.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/Bekenn,11,https://github.com/Kitware/CMake/pull/249#issuecomment-225653974,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","Ah, OK; that makes a lot more sense.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,249,2016-06-04T02:54:29Z,2016-06-17T15:09:22Z,2016-06-17T15:09:23Z,CLOSED,False,65,22,4,https://github.com/Bekenn,Added support for user-configurable PBXBuildFile attributes and mig files.,4,[],https://github.com/Kitware/CMake/pull/249,https://github.com/bradking,12,https://github.com/Kitware/CMake/pull/249#issuecomment-226795457,"Updated the Xcode back-end so that the following lines:
set_source_files_properties(defs.mig
    PROPERTIES
        XCODE_FILE_ATTRIBUTES ""Client;Server""
)

...produce the following output:
CC05C50A647749C2A8CBD7FA /* /path/to/defs.mig */ = {isa = PBXBuildFile; fileRef = A98241779C4D44C78764B9A3 /* /path-to-defs.mig */; settings = {ATTRIBUTES = (Client,Server); }; };

Additionally, the Xcode back-end now provides default support for mig files, leveraging Xcode's built-in behavior.","After some minor tweaks, these changes have been merged by commit 9e47255.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/exmatrikulator,1,https://github.com/Kitware/CMake/pull/250,,,True,{'THUMBS_UP': ['https://github.com/ruslo']}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/250#issuecomment-224270961,,Cc: @clintonstimpson,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/250#issuecomment-228165946,,"This is a good start.  A few comments:

This should be enabled only for generators where it makes sense.  For Ninja and Makefile generators there is no IDE to open the project.
Whatever API is added to cmGlobalGenerator to indicate whether the generator supports this could also have a similar method for asking the generator to give us the path to the project file.  That way we don't have to glob for *.sln.
Will this work with Xcode on Mac OS?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/exmatrikulator,4,https://github.com/Kitware/CMake/pull/250#issuecomment-229946193,,"The button will be disabled, when no project file will be found
cmGlobalGenerator is only available, if you are configuring your project. If you only select it you can't get any information
I have added Xcode",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/250#issuecomment-231763986,,"cmGlobalGenerator is only available, if you are configuring your project. If you only select it you can't get any information

Ah, you need to support the use case that we've just selected an already-generated project and want to open it without re-configuring.  That makes sense.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/clintonstimpson,6,https://github.com/Kitware/CMake/pull/250#issuecomment-233076185,,"This does not compile for me.

CMake/Source/QtDialog/CMakeSetupDialog.cxx:516:10: error: no viable conversion from 'bool' to 'QString'

return false;

^~~~~",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/clintonstimpson,7,https://github.com/Kitware/CMake/pull/250#issuecomment-235109095,,"The opening of an Xcode project doesn't work.
It will if I have this code:
void CMakeSetupDialog::doOpenProject()
{
QString proj = this->getProjectFilename();
QString open_url = QString(""file://%1"").arg(proj);
QDesktopServices::openURL(open_url);
}
Can you verify that with Visual Studio?  I imagine it will work.
After that fix, I believe this patch can be merged.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/exmatrikulator,8,https://github.com/Kitware/CMake/pull/250#issuecomment-235182935,,"sorry, it doesn't.
does this work with Xcode?
void CMakeSetupDialog::doOpenProject()
{
QDesktopServices::openUrl( QUrl::fromLocalFile( this->getProjectFilename() ) );
}",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/clintonstimpson,9,https://github.com/Kitware/CMake/pull/250#issuecomment-235321509,,"Yes, using QUrl::fromLocalFile() does work with Xcode.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/clintonstimpson,10,https://github.com/Kitware/CMake/pull/250#issuecomment-235327897,,"Also, we need a better author name than ""ex ex@exmatrikulator.de"".  I assume we need a first and last name.
I took your 3 commits, included the QUrl fix, and squashed the commits.
When I tried to submit them, I got an error:
$ git push stage HEAD
...
remote: ----------------------------------------------------------------------
remote: commit b3eeb020 has author name ""ex"" with no space.  Run
remote:   git config --global user.name 'Your Name'
remote:   git config --global user.email 'you@yourdomain.com'
remote: before creating commits.
remote: ----------------------------------------------------------------------
remote: error: hook declined to update refs/heads/open-proj
Without a full name, I assume a Suggested-by: field will work.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/bradking,11,https://github.com/Kitware/CMake/pull/250#issuecomment-247004227,,Applied as commit 1ca2d5d.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/bradking,12,https://github.com/Kitware/CMake/pull/250#issuecomment-258517652,,A problem with this was reported on the CMake mailing list here.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,250,2016-06-07T12:47:18Z,2016-09-14T12:57:46Z,2016-11-10T13:10:18Z,CLOSED,False,47,0,3,https://github.com/exmatrikulator,added OpenProject Button,1,[],https://github.com/Kitware/CMake/pull/250,https://github.com/exmatrikulator,13,https://github.com/Kitware/CMake/pull/250#issuecomment-259685960,,"I would suggest to have only one compiler per folder.
Anything else doesn't make sense to me.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,251,2016-06-09T12:08:46Z,2016-06-09T12:59:01Z,2016-06-09T13:14:19Z,CLOSED,False,4,4,1,https://github.com/mosra,Modules: don't assume that FindOpenSSL version regex finds something.,1,[],https://github.com/Kitware/CMake/pull/251,https://github.com/mosra,1,https://github.com/Kitware/CMake/pull/251,"Makes the find module work with BoringSSL, which doesn't have the info in the opennslv.h header: https://github.com/google/boringssl/blob/82d0ffbac1a892e23b63d055b67b7d93e489af3e/include/openssl/opensslv.h","Makes the find module work with BoringSSL, which doesn't have the info in the opennslv.h header: https://github.com/google/boringssl/blob/82d0ffbac1a892e23b63d055b67b7d93e489af3e/include/openssl/opensslv.h",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,251,2016-06-09T12:08:46Z,2016-06-09T12:59:01Z,2016-06-09T13:14:19Z,CLOSED,False,4,4,1,https://github.com/mosra,Modules: don't assume that FindOpenSSL version regex finds something.,1,[],https://github.com/Kitware/CMake/pull/251,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/251#issuecomment-224886632,"Makes the find module work with BoringSSL, which doesn't have the info in the opennslv.h header: https://github.com/google/boringssl/blob/82d0ffbac1a892e23b63d055b67b7d93e489af3e/include/openssl/opensslv.h",Thanks.  Applied as commit e937b4c.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/mosra,1,https://github.com/Kitware/CMake/pull/252,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.","This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/252#issuecomment-224883522,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.",Cc: @mathstuf,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/252#issuecomment-224883748,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.","Did not encounter any other limitations that would prevent this to work

That note is saying that the call to protobuf_generate_cpp and following calls to add_executable/add_library must be in the same directory.  Otherwise the custom commands won't hook up to cause generation to occur.  This has nothing to do with the locations of the generated files.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/mosra,4,https://github.com/Kitware/CMake/pull/252#issuecomment-224891090,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.","Ah, right, misunderstanding on my side. If I put back the note, the rest is okay?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/252#issuecomment-224896880,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.",Please squash that in and revise the commit message to explain that it is about .proto files in subdirectories.  The change looks okay to me.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/mosra,6,https://github.com/Kitware/CMake/pull/252#issuecomment-224901869,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.",Done.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,252,2016-06-09T12:23:49Z,2016-06-10T13:15:13Z,2016-06-10T13:19:39Z,MERGED,True,8,0,1,https://github.com/mosra,FindProtobuf: make protobuf_generate_*() work with subdirectories.,1,[],https://github.com/Kitware/CMake/pull/252,https://github.com/bradking,7,https://github.com/Kitware/CMake/pull/252#issuecomment-224912757,"This now works flawlessly when I have *.proto files in subdirectories and pass them to protobuf_generate_cpp() like this:
protobuf_generate_cpp(App_PB_SRCS App_PB_HEADERS
    services/general.proto
    services/app.proto)
Did not encounter any other limitations that would prevent this to work, so I also removed the note from the documentation.","LGTM, thanks.  I've merged to next for testing.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/253,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).","Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/253#issuecomment-225685011,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).",Cc: @mathstuf,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/mathstuf,3,https://github.com/Kitware/CMake/pull/253#issuecomment-225699434,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).",Please add docs to Help/manual/cmake.1.rst.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/253#issuecomment-225703507,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).","The name --trace-file= may also be expected to mean an output file to record the trace.  Let's choose a different name for this option.  Perhaps --trace-source=?
Also, this looks like it is intended to match on a file name only.  I don't think that is sufficient because one might want to trace a specific CMakeLists.txt file or something.  I think this should work via absolute path.  Relative paths can be converted to full paths during option parsing by preprending the current working directory (and documenting this behavior).  Also use GetRealPath on the input paths and the executed paths.  Then use an efficient data structure to perform the lookup during tracing.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/zaufi,5,https://github.com/Kitware/CMake/pull/253#issuecomment-225788853,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).","@bradking ,

Perhaps --trace-source=?

Fixed.

I think this should work via absolute path. Relative paths can be converted to full paths during option parsing…

I don't think so… Here is another scenario: you probably don't know the absolute path at the moment of cmake execute. Imagine that you have few Foo packages (different versions) with foo-config.cmake installed, and you don't really care which would be chosen, but want to trace it. Or depending on CMAKE_MODULE_PATH content some modules can (or can not) ""override"" the others (standard). For example until PR #248 not released, I use my ""hacked"" FindBoost.cmake placed in cmake/ directory in my projects. It is why I've implemented matching  filename only.
Ok, here is how it can be done:
0) accept any strings (match patterns) as --trace-source parameter

filename should ends with a given pattern, so at most one may provide an absolute path and it would match. A relative paths, like libfoo/test/CMakeLists.txt also would match, if one interested in tracing any particular CMakeLists.txt. To prevent useless matching of patterns like .cmake or txt, cmSystemTools::GetFilenameName() of both filename and a pattern should be equal as well.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,253,2016-06-13T19:29:24Z,2016-06-17T15:58:26Z,2016-07-01T12:09:23Z,CLOSED,False,54,1,9,https://github.com/zaufi,Add an option to control what files needs to be traced.,5,[],https://github.com/Kitware/CMake/pull/253,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/253#issuecomment-226808850,"Even in a relatively small projects turning --trace (and --trace-expand)
may produce a lot of output. But when developing a custom module
usually you are interested in output only one particular module
(ok, few of them, if they interact somehow).
--trace-file=file allows to user to specify (multiple options accepted)
what he really wants to trace when --trace and/or --trace-expand given.
The final output would be only from requested module(s), ignoring anything
else not matched to given filename(s).",Thanks.  I've applied these changes as commit e63151f and merged to next for testing.  Then it will be integrated into master.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,254,2016-06-15T14:50:52Z,2016-06-17T15:56:57Z,2016-06-17T15:56:57Z,CLOSED,False,1,1,1,https://github.com/afarbos,add debug glew to FindGLEW,1,[],https://github.com/Kitware/CMake/pull/254,https://github.com/afarbos,1,https://github.com/Kitware/CMake/pull/254,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,254,2016-06-15T14:50:52Z,2016-06-17T15:56:57Z,2016-06-17T15:56:57Z,CLOSED,False,1,1,1,https://github.com/afarbos,add debug glew to FindGLEW,1,[],https://github.com/Kitware/CMake/pull/254,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/254#issuecomment-226808429,,"Thanks.  The proper way to use the debug variants is to find both the release and debug libraries and then select one based on the build configuration.  See the SelectLibraryConfigurations module and its uses in some of the other find modules.  See commit b213a7f for an example.
Also, please read CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,255,2016-06-16T15:54:06Z,2016-06-17T14:22:15Z,2016-06-17T14:22:15Z,CLOSED,False,0,1,1,https://github.com/fxb,"The ""/Os"" compiler flag does not map to ""<Optimization>MinSize</Optimization>""",1,[],https://github.com/Kitware/CMake/pull/255,https://github.com/fxb,1,https://github.com/Kitware/CMake/pull/255,"Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.","Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,255,2016-06-16T15:54:06Z,2016-06-17T14:22:15Z,2016-06-17T14:22:15Z,CLOSED,False,0,1,1,https://github.com/fxb,"The ""/Os"" compiler flag does not map to ""<Optimization>MinSize</Optimization>""",1,[],https://github.com/Kitware/CMake/pull/255,https://github.com/fxb,2,https://github.com/Kitware/CMake/pull/255#issuecomment-226529296,"Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.",@mplucinski,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,255,2016-06-16T15:54:06Z,2016-06-17T14:22:15Z,2016-06-17T14:22:15Z,CLOSED,False,0,1,1,https://github.com/fxb,"The ""/Os"" compiler flag does not map to ""<Optimization>MinSize</Optimization>""",1,[],https://github.com/Kitware/CMake/pull/255,https://github.com/fxb,3,https://github.com/Kitware/CMake/pull/255#issuecomment-226529397,"Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.",@bradking,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,255,2016-06-16T15:54:06Z,2016-06-17T14:22:15Z,2016-06-17T14:22:15Z,CLOSED,False,0,1,1,https://github.com/fxb,"The ""/Os"" compiler flag does not map to ""<Optimization>MinSize</Optimization>""",1,[],https://github.com/Kitware/CMake/pull/255,https://github.com/Orphis,4,https://github.com/Kitware/CMake/pull/255#issuecomment-226569870,"Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.",It would be nice if this went into 3.6.0 :),True,{}
Kitware/CMake,https://github.com/Kitware/CMake,255,2016-06-16T15:54:06Z,2016-06-17T14:22:15Z,2016-06-17T14:22:15Z,CLOSED,False,0,1,1,https://github.com/fxb,"The ""/Os"" compiler flag does not map to ""<Optimization>MinSize</Optimization>""",1,[],https://github.com/Kitware/CMake/pull/255,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/255#issuecomment-226782132,"Instead it maps to ""Size"", as already defined in this file.
I'm currently getting the following errors from MSBuild (14.0.25123.0) when using the ""/Os"" flag with CMake:
C:\Program Files (x86)\MSBuild\Microsoft.Cpp\v4.0\V140\Microsoft.CppCommon.targets(356,5): error : Element <Optimization> has an invalid value of ""MinSize"".

After manually fixing the optimization settings in Visual Studio, I can see the *.vcxproj file contains the following:
<ClCompile>
    ...
    <Optimization>Full</Optimization>
    ...
    <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
</ClCompile>

It looks like commit 2c2ec48 broke this.",Thanks.  Fixed by commit 78249be and queued for merge to release for inclusion in 3.6.0 (as this is a regression).  See also issue 16153 for discussion of the underlying problem.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,256,2016-06-20T06:57:15Z,2016-06-20T14:00:43Z,2016-06-20T14:00:43Z,CLOSED,False,2,0,2,https://github.com/FrozenGene,[AIX][Clang] Add Clang on AIX support,1,[],https://github.com/Kitware/CMake/pull/256,https://github.com/FrozenGene,1,https://github.com/Kitware/CMake/pull/256,"Currently, CMake doesn't support Clang on AIX. So, if we use Clang on AIX, we will meet error like this:
-- The C compiler identification is Clang 3.9.0
-- The CXX compiler identification is Clang 3.9.0
-- Check for working C compiler: clang
-- Check for working C compiler: clang -- broken
CMake Error at /opt/freeware/share/cmake/Modules/CMakeTestCCompiler.cmake:61 (message):
...
/usr/bin/clang
CMakeFiles/cmTryCompileExec642976823.dir/testCCompiler.c.o -o
cmTryCompileExec642976823 /opt/freeware/lib /usr/lib /lib
ld: 0711-168 SEVERE ERROR: Input file: /opt/freeware/lib
    Input files must be regular files.

The reason is our CMake doesn't consider Clang on AIX platform, we should support it to make Clang on AiX work.","Currently, CMake doesn't support Clang on AIX. So, if we use Clang on AIX, we will meet error like this:
-- The C compiler identification is Clang 3.9.0
-- The CXX compiler identification is Clang 3.9.0
-- Check for working C compiler: clang
-- Check for working C compiler: clang -- broken
CMake Error at /opt/freeware/share/cmake/Modules/CMakeTestCCompiler.cmake:61 (message):
...
/usr/bin/clang
CMakeFiles/cmTryCompileExec642976823.dir/testCCompiler.c.o -o
cmTryCompileExec642976823 /opt/freeware/lib /usr/lib /lib
ld: 0711-168 SEVERE ERROR: Input file: /opt/freeware/lib
    Input files must be regular files.

The reason is our CMake doesn't consider Clang on AIX platform, we should support it to make Clang on AiX work.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,256,2016-06-20T06:57:15Z,2016-06-20T14:00:43Z,2016-06-20T14:00:43Z,CLOSED,False,2,0,2,https://github.com/FrozenGene,[AIX][Clang] Add Clang on AIX support,1,[],https://github.com/Kitware/CMake/pull/256,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/256#issuecomment-227150331,"Currently, CMake doesn't support Clang on AIX. So, if we use Clang on AIX, we will meet error like this:
-- The C compiler identification is Clang 3.9.0
-- The CXX compiler identification is Clang 3.9.0
-- Check for working C compiler: clang
-- Check for working C compiler: clang -- broken
CMake Error at /opt/freeware/share/cmake/Modules/CMakeTestCCompiler.cmake:61 (message):
...
/usr/bin/clang
CMakeFiles/cmTryCompileExec642976823.dir/testCCompiler.c.o -o
cmTryCompileExec642976823 /opt/freeware/lib /usr/lib /lib
ld: 0711-168 SEVERE ERROR: Input file: /opt/freeware/lib
    Input files must be regular files.

The reason is our CMake doesn't consider Clang on AIX platform, we should support it to make Clang on AiX work.",Thanks.  Applied as commit 5cc3416.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,257,2016-06-22T15:15:29Z,2016-06-22T15:26:59Z,2016-06-22T15:26:59Z,CLOSED,False,27,3,4,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/257,https://github.com/Orphis,1,https://github.com/Kitware/CMake/pull/257,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,257,2016-06-22T15:15:29Z,2016-06-22T15:26:59Z,2016-06-22T15:26:59Z,CLOSED,False,27,3,4,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/257,https://github.com/Orphis,2,https://github.com/Kitware/CMake/pull/257#issuecomment-227778301,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","My guess is that it's too late for 3.6.0 (hence I'm sending to next).
I'm not sure if that's the right way to fix it but it works for me!
Related bug reported 4 years ago: https://cmake.org/Bug/view.php?id=13816
Note that the Xcode and Make generators copy the resources when building the target directly and didn't have that issue (they have other issues though, namely not being Ninja).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,257,2016-06-22T15:15:29Z,2016-06-22T15:26:59Z,2016-06-22T15:26:59Z,CLOSED,False,27,3,4,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/257,https://github.com/Orphis,3,https://github.com/Kitware/CMake/pull/257#issuecomment-227778348,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",@bradking,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,257,2016-06-22T15:15:29Z,2016-06-22T15:26:59Z,2016-06-22T15:26:59Z,CLOSED,False,27,3,4,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/257,https://github.com/Orphis,4,https://github.com/Kitware/CMake/pull/257#issuecomment-227780176,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","And after reading the CONTRIBUTING.rst, I realize I should have pushed to master. Will make a new PR then!",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/Orphis,1,https://github.com/Kitware/CMake/pull/258,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/Orphis,2,https://github.com/Kitware/CMake/pull/258#issuecomment-227780515,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","@bradking
My guess is that it's too late for 3.6.0.
I'm not sure if that's the right way to fix it but it works for me!
Related bug reported 4 years ago: https://cmake.org/Bug/view.php?id=13816
Note that the Xcode and Make generators copy the resources when building the target directly and didn't have that issue (they have other issues though, namely not being Ninja).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/258#issuecomment-227783940,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","Thanks for working on this.  For reference, the issue is now tracked here.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/Orphis,4,https://github.com/Kitware/CMake/pull/258#issuecomment-227784527,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","Thanks for pointing to the new bug tracker, Google didn't return results for me when I searched for this issue :)
What do you think of the approach I took? I'm not a big fan of it but it seemed to be the least hacky one.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/258#issuecomment-228057117,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",The other generators don't need cmOSXBundleGenerator to store anything for them.  The cmMakefileTargetGenerator generator builds an ExtraFiles list to hook up the dependencies.  I think cmNinjaTargetGenerator can do the same.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/Orphis,6,https://github.com/Kitware/CMake/pull/258#issuecomment-228078804,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.","That is indeed much simpler... I wonder why I didn't do that in the first place.
Amended the commit. Is this better now?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/bradking,7,https://github.com/Kitware/CMake/pull/258#issuecomment-228164266,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",Nice.  Applied with minor tweaks as commit 8bbd5db.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,258,2016-06-22T15:26:40Z,2016-06-23T19:53:05Z,2016-06-24T20:46:44Z,CLOSED,False,5,2,2,https://github.com/Orphis,ninja: Have the bundle resources be a dependency of their target,1,[],https://github.com/Kitware/CMake/pull/258,https://github.com/Orphis,8,https://github.com/Kitware/CMake/pull/258#issuecomment-228457787,"Bundle resources were added to the ""all"" target which made it really hard to have OSX bundle resources copied when generating a specific target.
This change adds a dependency on the resources to the target using them.",Great! So we'll have this in 3.7.0 in a few months I guess :),True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/259,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/259#issuecomment-229759999,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.",Cc: @rleigh-dundee,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,None,3,https://github.com/Kitware/CMake/pull/259#issuecomment-229768346,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","My first question would be exactly how you are using FindBoost to get such an error?  We don't expose the internal embedded zlib or bzip2 at the moment; there is no mention of zlib or bzip2 in the iostreams dependencies or anywhere else.  Are you specifically invoking find_package with zlib or bzip2 as component names?
The current design of FindBoost is that each component is a library.  With your build, do you have boost_zlib and boost_bzip2 DLLs or static libs?  If so, I can see that this change would be useful.
However, I would caution that it also makes your program non-portable since these components will not exist on any other platform.  And they might not even exist on Windows.  (I, for example, build zlib and bzip2, then build boost with these DLLs.  This means my use of FindBoost/FindZLib/FindBZip2 works across every platform.  https://github.com/ome/ome-cmake-superbuild/blob/develop/packages/boost-1.61/build.cmake#L51 to L56)
Regarding that portability aim, would it make sense to add support to FindZLib and FindBZip2 to also check for the Boost variant as fallbacks?  If it's drop in compatible with the regular zlib and bzip2 headers and library API/ABI, that would allow you to use find_package with ZLib and BZip2 portably, so that your code will work on Windows with the boost versions, and everywhere else with the regular standalone versions.
I should add that when I originally added the dependency and module header information, I deliberately omitted the Windows-specific stuff because I wasn't sure how to sanely handle it in an acceptable manner, since embedding libraries-inside-libraries is a really nasty thing to do, and I assumed it was purely for convenience on Windows since it's definitely possible to use Boost on Windows with the regular libraries.
That said, the change itself looks completely harmless since it won't be used unless these Windows-specific components are explicitly requested, and so I wouldn't have any reservations about merging this once the question above regarding the intent has been clarified.
Regards,
Roger",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/zaufi,4,https://github.com/Kitware/CMake/pull/259#issuecomment-229862145,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","My first question would be exactly how you are using FindBoost to get such an error? We don't expose the internal embedded zlib or bzip2 at the moment; there is no mention of zlib or bzip2 in the iostreams dependencies or anywhere else. Are you specifically invoking find_package with zlib or bzip2 as component names?

Yes, I do. My project uses iostreams w/ gzip filters, so my find_package() contains it. But, I've faced w/ link errors:

in *nix systems I also have to call find_package(ZLIB) before boost (cuz it uses external implementation) and add it to target_link_libraries() among other boost libs
but in windows, I use BOOST_ALL_NO_LIB, so I've add zlib as a component to search and use Boost::zlib to link with


The current design of FindBoost is that each component is a library. With your build, do you have boost_zlib and boost_bzip2 DLLs or static libs?

I use official Windows prebuilt binaries. And yes, I have that libs:
zaufi@gentop〉…/win/boost/lib64-msvc-14.0〉 ls *zip*
boost_bzip2-vc140-mt-1_59.dll     boost_bzip2-vc140-mt-gd-1_59.lib     libboost_bzip2-vc140-mt-s-1_59.lib    libboost_bzip2-vc140-sgd-1_59.lib
boost_bzip2-vc140-mt-1_59.lib     libboost_bzip2-vc140-mt-1_59.lib     libboost_bzip2-vc140-mt-sgd-1_59.lib
boost_bzip2-vc140-mt-gd-1_59.dll  libboost_bzip2-vc140-mt-gd-1_59.lib  libboost_bzip2-vc140-s-1_59.lib

zaufi@gentop〉…/win/boost/lib64-msvc-14.0〉 ls *zlib* 
boost_zlib-vc140-mt-1_59.dll     boost_zlib-vc140-mt-gd-1_59.lib     libboost_zlib-vc140-mt-s-1_59.lib    libboost_zlib-vc140-sgd-1_59.lib
boost_zlib-vc140-mt-1_59.lib     libboost_zlib-vc140-mt-1_59.lib     libboost_zlib-vc140-mt-sgd-1_59.lib
boost_zlib-vc140-mt-gd-1_59.dll  libboost_zlib-vc140-mt-gd-1_59.lib  libboost_zlib-vc140-s-1_59.lib

But I use only static libraries of Boost…

However, I would caution that it also makes your program non-portable since these components will not exist on any other platform.

Yeah, as I described above, in non Windows, I have to use FindZLIB, but Windows build uses boost_zlib library available in official build -- and thanks to CMake it is easy to define a seamless build process ;)

I, for example, build zlib and bzip2, then build boost with these DLLs. This means my use of FindBoost/FindZLib/FindBZip2 works across every platform.

Unfortunately I can't afford this way… My goal is to minimize efforts on deploy ""build environment"" -- it is why I prefer pre-built binaries.

Regarding that portability aim, would it make sense to add support to FindZLib and FindBZip2 to also check for the Boost variant as fallbacks?

As I told above, I don't have builds of ZLIB/BZIP2 in Windows… its just another dependency which I have to track/build/deploy to compile cluster and inform other developers that they have to get and install ""just another small package"". No reason to do that, if Boost already contains all that I need.

If it's drop in compatible with the regular zlib and bzip2 headers and library API/ABI, that would allow you to use find_package with ZLib and BZip2 portably,

In my case it is ""cheaper"" to use a bit more CMake code to choose depending on platform what to find and what to link with at build time, than having a pure portable way...",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/zaufi,5,https://github.com/Kitware/CMake/pull/259#issuecomment-230324820,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","@rleigh-dundee, @bradking,
Am I answer all questions or smth else remains? (I have another patch to FindBoost.cmake pending for PR and just waiting when this will be closed %)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,None,6,https://github.com/Kitware/CMake/pull/259#issuecomment-230343321,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","@zaufi I have no objections to this being merged.
However, I think there's still a significant missing piece (which can be addressed separately).
Are you using these libraries directly, or are you using them indirectly via boost.iostreams?
For the latter, there's clearly the need for a proper library dependency so that this stuff works automatically by linking with Boost::iostreams.  The complication is that we don't know whether to link with the system zlib/bzip2 or the boost-provided versions (or is there?).  Certainly on Windows, it could be either.  We could certainly add logic to check for the presence of both the system and embedded versions and then add the appropriate dependencies.  We already do this for Boost::threads on Threads::Threads.
Regarding the last question ""Regarding that portability aim, would it make sense to add support to FindZLib and FindBZip2 to also check for the Boost variant as fallbacks?"", to which you answered ""As I told above, I don't have builds of ZLIB/BZIP2 in Windows… its just another dependency which I have to track/build/deploy to compile cluster and inform other developers that they have to get and install ""just another small package"". No reason to do that, if Boost already contains all that I need."" I think you might have misunderstood what I was asking here.  I'd like for this to be completely transparent and work uniformly across all platforms.  I wasn't suggesting that you should install anything.  Merely that the find_package macros could search for both the standalone and boost variants to make this uniform and functional across all platforms, which is what I'm also asking above with regard to exactly how you are using these libraries (direct or indirect via iostreams).  It might be better to do this in the reverse, if the only case to cater for is indirect use via iostreams, by adding the appropriate dependencies to Boost::iostreams.  That would give us a truly portable solution which works everywhere for everyone.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/zaufi,7,https://github.com/Kitware/CMake/pull/259#issuecomment-230346002,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","@rleigh-dundee,

Are you using these libraries directly, or are you using them indirectly via boost.iostreams?

The only way for me is to use them directly. First of all, a project I worked on, uses static Boost libraries and have BOOST_ALL_NO_LIB.
The other side of the ""problem"" -- to use or not to use gzip filters of boost::iostreams is a configuration option of this project, so depending on it, I have to add (or not) boost::zlib to target_link_libraries() (and #define HAVE_GZIP_FEATURE at compile time) . So, I'm really in doubt how FindBoost.cmake can help me here in a ""smart way""… In the case I've described, depending on the project option (and thanks to static libraries) I use boost::iostreams with or without ZLIB/BZIP2, so how the finder could guess: should it (or shouldn't) find that libs for me… -- it looks too complicated, so simplest (easiest and explicit) solution is to find and add that libs when they really needed.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,None,8,https://github.com/Kitware/CMake/pull/259#issuecomment-230346801,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","Sorry, my question was ambiguous.  Are you using the boost zlib or bzip2 headers in your own code or are you using the higher-level iostreams classes?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/zaufi,9,https://github.com/Kitware/CMake/pull/259#issuecomment-230381403,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","@rleigh-dundee, the project uses boost::iostreams headers only, and #include gzip support conditionally.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,259,2016-06-30T17:06:00Z,2016-07-05T18:25:48Z,2016-07-05T18:25:48Z,CLOSED,False,4,0,1,https://github.com/zaufi,Add missed libraries' check headers.,1,[],https://github.com/Kitware/CMake/pull/259,https://github.com/bradking,10,https://github.com/Kitware/CMake/pull/259#issuecomment-230561269,"Official Windows builds of Boost have internal implementation for zlib and bzip2 libraries used by Boost::iostreams. Adding headers check would suppress the ""No header defined for…""
warning.","Thanks, folks.  Applied as commit cb1a434.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/olibre,1,https://github.com/Kitware/CMake/pull/260,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.","My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/260#issuecomment-230564443,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.",Thanks.  I applied the main fix as commit 26d1638 and one of the cleanups as commit 4e11c96.  I've queued the main fix for merge to release for 3.6.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/olibre,3,https://github.com/Kitware/CMake/pull/260#issuecomment-257948065,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.","I will propose a further Pull Request because I have discovered that the tool update-alternatives --config java changes a symbolic links (directory).

/usr/lib/jvm/default-java   (Ubuntu 16.10)
/usr/lib/jvm/default        (Arch)

I will also add in the file the following command to help detecting such directories on other distros:
find -L /usr/ -name jni.h -printf '%h\n' 2>/dev/null | while read dir ; do while [[ -n $dir ]] ; do dir=""${dir%/*}"" ; [[ -L $dir ]] && echo ""$dir""; done; done",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/260#issuecomment-257949923,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.",@olibre thanks.  Please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/olibre,5,https://github.com/Kitware/CMake/pull/260#issuecomment-258315425,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.","@bradking Wonderfull, you have recently changed the CONTRIBUTING.rst process 👍 No need to send a patch on mailing list :-)
Can I still use GitHub or do you prefer I use gitlab.kitware.com?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,260,2016-07-03T20:56:57Z,2016-07-05T18:37:26Z,2016-11-04T12:16:11Z,CLOSED,False,10,6,1,https://github.com/olibre,FindJNI: Fix support for Ubuntu,2,[],https://github.com/Kitware/CMake/pull/260,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/260#issuecomment-258416507,"My previous contribution was buggy.
This commit provide the correct directories for Ubuntu-based distribution in order to find all neccessary libraries.
The pull request proposes also a tiny clean-up commit.",@olibre please use gitlab.kitware.com.  You can register and sign in using your GitHub account (or with a username/password and associate your GitHub account in settings later).,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/261,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.","Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/261#issuecomment-230779799,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.",Cc: @mathstuf @rleigh-dundee,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/mathstuf,3,https://github.com/Kitware/CMake/pull/261#issuecomment-230785648,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.",https://gitlab.kitware.com/cmake/cmake/issues/12955,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/zaufi,4,https://github.com/Kitware/CMake/pull/261#issuecomment-231685521,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.","@bradking, @mathstuf, @rleigh-dundee
… any problems w/ this code?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,None,5,https://github.com/Kitware/CMake/pull/261#issuecomment-231685838,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.","@zaufi Sorry, I haven't had time to review it yet.  I'll try to get to it today.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/261#issuecomment-231769461,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.",@zaufi do you mind submitting this (and future changes) through our GitLab Instance instead?  Your GitHub account can be used to authenticate.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/zaufi,7,https://github.com/Kitware/CMake/pull/261#issuecomment-231791798,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.","@bradking , done...",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,261,2016-07-06T13:45:56Z,2016-07-11T17:12:05Z,2016-07-11T17:12:05Z,CLOSED,False,26,0,1,https://github.com/zaufi,Make it possible to find `Boost::python` w/ various version suffixes,2,[],https://github.com/Kitware/CMake/pull/261,https://github.com/bradking,8,https://github.com/Kitware/CMake/pull/261#issuecomment-231799878,"Linux distributions may use different naming conventions regarding Boost Python library. Here is few cases:

in Gentoo it has libboost_python-X.Y.*, where X.Y is a major+minor  Python version;
Debian/Ubuntu based distros name it as libboost_python-pyXY.*;
some other RPMs can have libboost_pythonX.*

To address that differences a new variable was introduced: Boost_PYTHON_VERSION_TAG, so caller may specify a suffix he has in a target distribution, so finder would be able to find and import Boost::python correctly.",Thanks.  Closing this here in favor of MR 35 on our GitLab instance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,262,2016-07-11T09:50:11Z,2016-07-11T15:25:50Z,2016-07-11T15:25:50Z,CLOSED,False,1,0,1,https://github.com/zaufi,Add missed fallback variable for CPACK_RPM_FILE_NAME,1,[],https://github.com/Kitware/CMake/pull/262,https://github.com/zaufi,1,https://github.com/Kitware/CMake/pull/262,When set CPACK_RPM_FILE_NAME CMake 3.6.0 has missed non uppercased version of CPACK_RPM_<COMPONENT>_FILE_NAME.,When set CPACK_RPM_FILE_NAME CMake 3.6.0 has missed non uppercased version of CPACK_RPM_<COMPONENT>_FILE_NAME.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,262,2016-07-11T09:50:11Z,2016-07-11T15:25:50Z,2016-07-11T15:25:50Z,CLOSED,False,1,0,1,https://github.com/zaufi,Add missed fallback variable for CPACK_RPM_FILE_NAME,1,[],https://github.com/Kitware/CMake/pull/262,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/262#issuecomment-231768878,When set CPACK_RPM_FILE_NAME CMake 3.6.0 has missed non uppercased version of CPACK_RPM_<COMPONENT>_FILE_NAME.,"Cc: @do-m-en
Thanks.  Applied as commit 672e6d2 and queued for merge to release for 3.6.1.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,263,2016-07-13T06:22:39Z,2016-07-14T09:35:53Z,2016-07-14T09:35:53Z,CLOSED,False,11,1,1,https://github.com/trivalik,regression: fix broken space detection after -D on command line,1,[],https://github.com/Kitware/CMake/pull/263,https://github.com/trivalik,1,https://github.com/Kitware/CMake/pull/263,"fix that commandline:
cmake -G ""NMake Makefiles"" -D CMAKE_C_COMPILER=gcc-4.2
will not use the local CMakeList.txt since the space after -D confuses cmake","fix that commandline:
cmake -G ""NMake Makefiles"" -D CMAKE_C_COMPILER=gcc-4.2
will not use the local CMakeList.txt since the space after -D confuses cmake",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,263,2016-07-13T06:22:39Z,2016-07-14T09:35:53Z,2016-07-14T09:35:53Z,CLOSED,False,11,1,1,https://github.com/trivalik,regression: fix broken space detection after -D on command line,1,[],https://github.com/Kitware/CMake/pull/263,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/263#issuecomment-232344357,"fix that commandline:
cmake -G ""NMake Makefiles"" -D CMAKE_C_COMPILER=gcc-4.2
will not use the local CMakeList.txt since the space after -D confuses cmake","If this was a regression, in what version did it last work?  Also, please add a case to Tests/RunCMake/CommandLine/RunCMakeTest.cmake to cover the behavior.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,263,2016-07-13T06:22:39Z,2016-07-14T09:35:53Z,2016-07-14T09:35:53Z,CLOSED,False,11,1,1,https://github.com/trivalik,regression: fix broken space detection after -D on command line,1,[],https://github.com/Kitware/CMake/pull/263,https://github.com/trivalik,3,https://github.com/Kitware/CMake/pull/263#issuecomment-232616190,"fix that commandline:
cmake -G ""NMake Makefiles"" -D CMAKE_C_COMPILER=gcc-4.2
will not use the local CMakeList.txt since the space after -D confuses cmake","I guess I made a mistake, because by default you need to specifiy the path where to look for the CMakeList.txt. Somehow I missed that. Sorry.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/pseyfert,1,https://github.com/Kitware/CMake/pull/264,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.","With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/264#issuecomment-232687235,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",@mathstuf,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/mathstuf,3,https://github.com/Kitware/CMake/pull/264#issuecomment-232692223,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",I like the idea. Documentation improvements would be nice.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/pseyfert,4,https://github.com/Kitware/CMake/pull/264#issuecomment-232933082,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",do you mean in-code comments or the user manual?,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/mathstuf,5,https://github.com/Kitware/CMake/pull/264#issuecomment-232935636,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.","I meant user manual, but it seems we don't document the existing keybindings. I've opened an issue for it.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/pseyfert,6,https://github.com/Kitware/CMake/pull/264#issuecomment-234362957,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.","added my key bindings to the help in ccmake now.
Along, I did some minor fixes to the help:
2791831 was just wrong
858cff9 'd' isn't actually active in insert mode (there it's just the letter 'd') so moved it to the commands section
and then, not in the help but in the command listing at the bottom of the screen, I added the explanation that 'd' is available to delete an entry (c51f801).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/bradking,7,https://github.com/Kitware/CMake/pull/264#issuecomment-236677368,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",Thanks.  Please squash the commits down into the logically distinct changes (or possibly just one commit).,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/pseyfert,8,https://github.com/Kitware/CMake/pull/264#issuecomment-236947157,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.","okay, squashed it into these three:

the VIM binding related changes
update of the [d] documentation
a typo",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/mathstuf,9,https://github.com/Kitware/CMake/pull/264#issuecomment-236949431,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.",LGTM overall; haven't tested it personally though.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,264,2016-07-14T14:39:11Z,2016-08-02T18:57:16Z,2016-08-02T18:57:16Z,CLOSED,False,33,19,3,https://github.com/pseyfert,j/k scrolling and spacebar toggeling for ccmake,3,[],https://github.com/Kitware/CMake/pull/264,https://github.com/bradking,10,https://github.com/Kitware/CMake/pull/264#issuecomment-237006499,"With gmail and facebook supporting j/k scrolling, I was surprised not to find it in ccmake.","Thanks.  I've applied the changes as commits 31b6cf4, 9a1b6c6, and e34e9c2.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,265,2016-07-18T12:12:59Z,2016-07-18T12:53:45Z,2016-07-18T12:56:24Z,CLOSED,False,3,3,1,https://github.com/ThomasVolkert,CPack-STGZ: use correct sub directory,1,[],https://github.com/Kitware/CMake/pull/265,https://github.com/ThomasVolkert,1,https://github.com/Kitware/CMake/pull/265,"This fixes directory naming for me.
Best regards.","This fixes directory naming for me.
Best regards.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,265,2016-07-18T12:12:59Z,2016-07-18T12:53:45Z,2016-07-18T12:56:24Z,CLOSED,False,3,3,1,https://github.com/ThomasVolkert,CPack-STGZ: use correct sub directory,1,[],https://github.com/Kitware/CMake/pull/265,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/265#issuecomment-233315550,"This fixes directory naming for me.
Best regards.",The convention for binary release tarballs is that the extraction directory matches the name of the tarball.  That is why CPACK_PACKAGE_FILE_NAME is used here.  CPACK_PACKAGE_INSTALL_DIRECTORY is documented for use by installer tools like NSIS.  The STGZ generator is meant to create self-extracting tarballs that are otherwise the same as the TGZ generator.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,265,2016-07-18T12:12:59Z,2016-07-18T12:53:45Z,2016-07-18T12:56:24Z,CLOSED,False,3,3,1,https://github.com/ThomasVolkert,CPack-STGZ: use correct sub directory,1,[],https://github.com/Kitware/CMake/pull/265,https://github.com/ThomasVolkert,3,https://github.com/Kitware/CMake/pull/265#issuecomment-233316494,"This fixes directory naming for me.
Best regards.","Okay, but this means that with every new release of the software a new folder name would be used (assuming that CPACK_PACKAGE_FILE_NAME contains some versioning). Is there some way currently available to use the following scheme?:
folder: ${FIXED_NAME}
sh file: ${FIXED_NAME}_${VERSIONING}.sh",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,265,2016-07-18T12:12:59Z,2016-07-18T12:53:45Z,2016-07-18T12:56:24Z,CLOSED,False,3,3,1,https://github.com/ThomasVolkert,CPack-STGZ: use correct sub directory,1,[],https://github.com/Kitware/CMake/pull/265,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/265#issuecomment-233319846,"This fixes directory naming for me.
Best regards.","No, because that breaks the widely-used convention that extracting a tgz produces a directory with the same name.  This convention is not CMake-specific.  It has existed for decades and should be respected.  Among the reasons for this is that extracting different versions in the same working directory should not clobber each other's files.  If one extracts and then manually renames the directory to a version-less name then that latter step will detect such collisions.
If you want a full installer tool then look at the Qt IFW generator.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,265,2016-07-18T12:12:59Z,2016-07-18T12:53:45Z,2016-07-18T12:56:24Z,CLOSED,False,3,3,1,https://github.com/ThomasVolkert,CPack-STGZ: use correct sub directory,1,[],https://github.com/Kitware/CMake/pull/265,https://github.com/ThomasVolkert,5,https://github.com/Kitware/CMake/pull/265#issuecomment-233320434,"This fixes directory naming for me.
Best regards.",Thanks for the feedback. We can skip this patch.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,266,2016-07-25T08:16:32Z,2016-07-26T12:42:25Z,2016-07-26T12:42:33Z,CLOSED,False,9,8,1,https://github.com/josteink,cmake-mode.el: Fix Compilation warning,2,[],https://github.com/Kitware/CMake/pull/266,https://github.com/josteink,1,https://github.com/Kitware/CMake/pull/266,"Currently when installing latest cmake-mode in Emacs, you get the following warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el

In cmake-indent:
cmake-mode.el:141:48:Warning: reference to free variable `cmake-tab-width'
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group

In cmake-command-run:
cmake-mode.el:274:8:Warning: `toggle-read-only' is an obsolete function (as of
    24.3); use `read-only-mode' instead.
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc

These are caused by actual errors, incorrect declaration order and use of obsolete functions.
With this patch there are no compilation warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc","Currently when installing latest cmake-mode in Emacs, you get the following warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el

In cmake-indent:
cmake-mode.el:141:48:Warning: reference to free variable `cmake-tab-width'
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group

In cmake-command-run:
cmake-mode.el:274:8:Warning: `toggle-read-only' is an obsolete function (as of
    24.3); use `read-only-mode' instead.
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc

These are caused by actual errors, incorrect declaration order and use of obsolete functions.
With this patch there are no compilation warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,266,2016-07-25T08:16:32Z,2016-07-26T12:42:25Z,2016-07-26T12:42:33Z,CLOSED,False,9,8,1,https://github.com/josteink,cmake-mode.el: Fix Compilation warning,2,[],https://github.com/Kitware/CMake/pull/266,https://github.com/josteink,2,https://github.com/Kitware/CMake/pull/266#issuecomment-235255501,"Currently when installing latest cmake-mode in Emacs, you get the following warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el

In cmake-indent:
cmake-mode.el:141:48:Warning: reference to free variable `cmake-tab-width'
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group
cmake-mode.el:231:1:Warning: defcustom for `cmake-tab-width' fails to specify
    containing group

In cmake-command-run:
cmake-mode.el:274:8:Warning: `toggle-read-only' is an obsolete function (as of
    24.3); use `read-only-mode' instead.
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc

These are caused by actual errors, incorrect declaration order and use of obsolete functions.
With this patch there are no compilation warnings:
$ emacs -Q -batch -L . -f byte-compile-file
Byte compile file: cmake-mode.el
Wrote d:/Git/CMake/Auxiliary/cmake-mode.elc",Issued on gitlab.kitware.com instead.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,267,2016-08-06T14:36:18Z,2016-08-08T18:09:28Z,2016-08-08T18:09:28Z,CLOSED,False,1,1,1,https://github.com/GamePad64,Fixed grep flag for MinGW with LANG != C,1,[],https://github.com/Kitware/CMake/pull/267,https://github.com/GamePad64,1,https://github.com/Kitware/CMake/pull/267,"Sometimes, grep assumes, that the output is binary (specifically, when LANG is not C). ""-a"" flag suppresses this behavior.","Sometimes, grep assumes, that the output is binary (specifically, when LANG is not C). ""-a"" flag suppresses this behavior.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,267,2016-08-06T14:36:18Z,2016-08-08T18:09:28Z,2016-08-08T18:09:28Z,CLOSED,False,1,1,1,https://github.com/GamePad64,Fixed grep flag for MinGW with LANG != C,1,[],https://github.com/Kitware/CMake/pull/267,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/267#issuecomment-238325839,"Sometimes, grep assumes, that the output is binary (specifically, when LANG is not C). ""-a"" flag suppresses this behavior.",Thanks.  Applied as commit 5f3c8f6.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,268,2016-08-12T21:39:55Z,2016-08-15T13:30:22Z,2016-08-16T17:17:57Z,CLOSED,False,6,1,1,https://github.com/sebiniemann,"fix: Uses Matlab's pre-build libraries for MinGW, if needed.",1,[],https://github.com/Kitware/CMake/pull/268,https://github.com/sebiniemann,1,https://github.com/Kitware/CMake/pull/268,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,268,2016-08-12T21:39:55Z,2016-08-15T13:30:22Z,2016-08-16T17:17:57Z,CLOSED,False,6,1,1,https://github.com/sebiniemann,"fix: Uses Matlab's pre-build libraries for MinGW, if needed.",1,[],https://github.com/Kitware/CMake/pull/268,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/268#issuecomment-239801911,,Thanks.  Applied with minor tweak as commit 8ba204a.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,269,2016-08-18T20:16:21Z,2016-08-23T14:49:20Z,2016-08-23T14:49:20Z,CLOSED,False,4,4,1,https://github.com/borisfom,Fixing bug in regex not accepting 2.1(2.0) notation,1,[],https://github.com/Kitware/CMake/pull/269,https://github.com/borisfom,1,https://github.com/Kitware/CMake/pull/269,"Also, fixed autodetect status message.","Also, fixed autodetect status message.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,269,2016-08-18T20:16:21Z,2016-08-23T14:49:20Z,2016-08-23T14:49:20Z,CLOSED,False,4,4,1,https://github.com/borisfom,Fixing bug in regex not accepting 2.1(2.0) notation,1,[],https://github.com/Kitware/CMake/pull/269,https://github.com/borisfom,2,https://github.com/Kitware/CMake/pull/269#issuecomment-241520166,"Also, fixed autodetect status message.",@jamesbigler : please take a look!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,269,2016-08-18T20:16:21Z,2016-08-23T14:49:20Z,2016-08-23T14:49:20Z,CLOSED,False,4,4,1,https://github.com/borisfom,Fixing bug in regex not accepting 2.1(2.0) notation,1,[],https://github.com/Kitware/CMake/pull/269,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/269#issuecomment-241756483,"Also, fixed autodetect status message.",Thanks.  Applied with minor tweak as commit 2dc9a75.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,270,2016-08-26T06:29:58Z,2016-08-26T14:06:31Z,2016-08-26T14:06:31Z,CLOSED,False,4,5,1,https://github.com/fujii,Buffer overrun of NsightTegraVersion,1,[],https://github.com/Kitware/CMake/pull/270,https://github.com/fujii,1,https://github.com/Kitware/CMake/pull/270,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,270,2016-08-26T06:29:58Z,2016-08-26T14:06:31Z,2016-08-26T14:06:31Z,CLOSED,False,4,5,1,https://github.com/fujii,Buffer overrun of NsightTegraVersion,1,[],https://github.com/Kitware/CMake/pull/270,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/270#issuecomment-242744961,,Thanks.  I've applied this as commit 1f4aeb1.  I've queued this for merge to release for inclusion in 3.6.2.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,271,2016-09-07T08:14:17Z,2016-09-07T13:53:28Z,2016-09-07T13:53:28Z,CLOSED,False,236,13,2,https://github.com/pigei,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple…",3,[],https://github.com/Kitware/CMake/pull/271,https://github.com/pigei,1,https://github.com/Kitware/CMake/pull/271,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple packages have been found in the same location.
When cmFindPackageCommand is build it looks for the two variables FIND_PACKAGE_SORT_ORDER and FIND_PACKAGE_SORT_DIRECTION. These can have the following values:
FIND_PACKAGE_SORT_ORDER : [None, Name, Natural](None by default)
FIND_PACKAGE_SORT_DIRECTION : [Asc, Dec](Asc by default)
Currently sorting by Name and by Natural order have been implemented.

Natural ordering makes use of strverscmpcurrently implemented in cmFindPackageCommand.cxx(might be moved to a common location if needed)
Name ordering makes use of the std library

Sorting is mainly controlled by cmFindPackageCommand::Sort. This method is currently implemented to provide sorting function through lambdas.","Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple packages have been found in the same location.
When cmFindPackageCommand is build it looks for the two variables FIND_PACKAGE_SORT_ORDER and FIND_PACKAGE_SORT_DIRECTION. These can have the following values:
FIND_PACKAGE_SORT_ORDER : [None, Name, Natural](None by default)
FIND_PACKAGE_SORT_DIRECTION : [Asc, Dec](Asc by default)
Currently sorting by Name and by Natural order have been implemented.

Natural ordering makes use of strverscmpcurrently implemented in cmFindPackageCommand.cxx(might be moved to a common location if needed)
Name ordering makes use of the std library

Sorting is mainly controlled by cmFindPackageCommand::Sort. This method is currently implemented to provide sorting function through lambdas.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,271,2016-09-07T08:14:17Z,2016-09-07T13:53:28Z,2016-09-07T13:53:28Z,CLOSED,False,236,13,2,https://github.com/pigei,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple…",3,[],https://github.com/Kitware/CMake/pull/271,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/271#issuecomment-245262311,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple packages have been found in the same location.
When cmFindPackageCommand is build it looks for the two variables FIND_PACKAGE_SORT_ORDER and FIND_PACKAGE_SORT_DIRECTION. These can have the following values:
FIND_PACKAGE_SORT_ORDER : [None, Name, Natural](None by default)
FIND_PACKAGE_SORT_DIRECTION : [Asc, Dec](Asc by default)
Currently sorting by Name and by Natural order have been implemented.

Natural ordering makes use of strverscmpcurrently implemented in cmFindPackageCommand.cxx(might be moved to a common location if needed)
Name ordering makes use of the std library

Sorting is mainly controlled by cmFindPackageCommand::Sort. This method is currently implemented to provide sorting function through lambdas.","Wow, that was fast!  Thanks.  Please submit this as a merge request over on CMake's own GitLab instance instead.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,271,2016-09-07T08:14:17Z,2016-09-07T13:53:28Z,2016-09-07T13:53:28Z,CLOSED,False,236,13,2,https://github.com/pigei,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple…",3,[],https://github.com/Kitware/CMake/pull/271,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/271#issuecomment-245287281,"Adding support for FIND_PACKAGE_SORT_{ORDER, DIRECTION} when multiple packages have been found in the same location.
When cmFindPackageCommand is build it looks for the two variables FIND_PACKAGE_SORT_ORDER and FIND_PACKAGE_SORT_DIRECTION. These can have the following values:
FIND_PACKAGE_SORT_ORDER : [None, Name, Natural](None by default)
FIND_PACKAGE_SORT_DIRECTION : [Asc, Dec](Asc by default)
Currently sorting by Name and by Natural order have been implemented.

Natural ordering makes use of strverscmpcurrently implemented in cmFindPackageCommand.cxx(might be moved to a common location if needed)
Name ordering makes use of the std library

Sorting is mainly controlled by cmFindPackageCommand::Sort. This method is currently implemented to provide sorting function through lambdas.",Closing in favor of GitLab MR 85.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,272,2016-09-12T04:24:07Z,2016-09-12T15:55:48Z,2016-09-12T15:55:48Z,CLOSED,False,5,5,1,https://github.com/Bekenn,Minor editorial changes,1,[],https://github.com/Kitware/CMake/pull/272,https://github.com/Bekenn,1,https://github.com/Kitware/CMake/pull/272,"Escaped backslashes to make them visible in the text.
Renamed VARIABLE to  in second signature for consistency with the first signature.
Added link to referenced MSDN documentation.","Escaped backslashes to make them visible in the text.
Renamed VARIABLE to  in second signature for consistency with the first signature.
Added link to referenced MSDN documentation.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,272,2016-09-12T04:24:07Z,2016-09-12T15:55:48Z,2016-09-12T15:55:48Z,CLOSED,False,5,5,1,https://github.com/Bekenn,Minor editorial changes,1,[],https://github.com/Kitware/CMake/pull/272,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/272#issuecomment-246394792,"Escaped backslashes to make them visible in the text.
Renamed VARIABLE to  in second signature for consistency with the first signature.
Added link to referenced MSDN documentation.",Thanks.  Applied with minor tweaks as commit 4f349a8.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,273,2016-09-13T18:45:50Z,2016-09-13T18:54:46Z,2016-09-13T18:54:46Z,CLOSED,False,167,1,13,https://github.com/zerozez,[CPack] Generate checksum file with selected algorithm,4,[],https://github.com/Kitware/CMake/pull/273,https://github.com/zerozez,1,https://github.com/Kitware/CMake/pull/273,"Often on creating deployment package you also need to write checksum file for it. This PR allows to generate checksum file as soon as package creates without using external tools and stick only with cpack.
Usage is pretty simple: set CPACK_PACKAGE_CHECKSUM by needed algorithm and file will be generated near to package. In case of multiply packages every package will get it own checksum file.","Often on creating deployment package you also need to write checksum file for it. This PR allows to generate checksum file as soon as package creates without using external tools and stick only with cpack.
Usage is pretty simple: set CPACK_PACKAGE_CHECKSUM by needed algorithm and file will be generated near to package. In case of multiply packages every package will get it own checksum file.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,273,2016-09-13T18:45:50Z,2016-09-13T18:54:46Z,2016-09-13T18:54:46Z,CLOSED,False,167,1,13,https://github.com/zerozez,[CPack] Generate checksum file with selected algorithm,4,[],https://github.com/Kitware/CMake/pull/273,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/273#issuecomment-246786036,"Often on creating deployment package you also need to write checksum file for it. This PR allows to generate checksum file as soon as package creates without using external tools and stick only with cpack.
Usage is pretty simple: set CPACK_PACKAGE_CHECKSUM by needed algorithm and file will be generated near to package. In case of multiply packages every package will get it own checksum file.",Thanks.  Please open a merge request over on our GitLab CMake repo instead.  Your GitHub account can be used to sign in.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,274,2016-10-07T13:41:31Z,2016-10-07T14:00:36Z,2016-10-07T14:00:36Z,CLOSED,False,10,6,1,https://github.com/martjoly,FindProtobuf: Fix protobuf_generate_*() to handle subdirs,1,[],https://github.com/Kitware/CMake/pull/274,https://github.com/martjoly,1,https://github.com/Kitware/CMake/pull/274,"The change in commit d4b8e81 incorrectly adds subdirectories to the
path of the generated files when .proto files are passed to
protobuf_generate_() with subdirectories. This behavior is not correct
when PROTOBUF_GENERATE_CPP_APPEND_PATH is True (default behavior) as
protoc will generate output file in the current build directory.","The change in commit d4b8e81 incorrectly adds subdirectories to the
path of the generated files when .proto files are passed to
protobuf_generate_() with subdirectories. This behavior is not correct
when PROTOBUF_GENERATE_CPP_APPEND_PATH is True (default behavior) as
protoc will generate output file in the current build directory.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,274,2016-10-07T13:41:31Z,2016-10-07T14:00:36Z,2016-10-07T14:00:36Z,CLOSED,False,10,6,1,https://github.com/martjoly,FindProtobuf: Fix protobuf_generate_*() to handle subdirs,1,[],https://github.com/Kitware/CMake/pull/274,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/274#issuecomment-252259829,"The change in commit d4b8e81 incorrectly adds subdirectories to the
path of the generated files when .proto files are passed to
protobuf_generate_() with subdirectories. This behavior is not correct
when PROTOBUF_GENERATE_CPP_APPEND_PATH is True (default behavior) as
protoc will generate output file in the current build directory.","Thanks!  I've backported this for merge to the release branch for 3.7.0-rc2.  See commit 2b9dad6.  Once it goes through our nightly testing I'll merge it to master and then to release.
BTW, please see CONTRIBUTING.rst for the preferred contribution path in the future.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,275,2016-10-10T19:18:04Z,2016-10-10T19:58:52Z,2016-10-10T20:33:17Z,CLOSED,False,1,1,1,https://github.com/adam4813,Addes the default for protobuf_DEBUG_POSTFIX when find debug library,1,[],https://github.com/Kitware/CMake/pull/275,https://github.com/adam4813,1,https://github.com/Kitware/CMake/pull/275,"In the call to find_library searching for the debug libraries it doesn't take into account the debug postfix used when building the library using the default provided CMakeLists.txt (example)[https://github.com/google/protobuf/blob/master/cmake/libprotobuf.cmake#L71],
This change adds an alternate name that includes the default postfix of 'd' first in the list of names to find. Since protobuf doesn't use the built-in postfix variable the only choice is to use the default value for the protobuf_DEBUG_POSTFIX variable as that is only set when building protobuf and not when searching for it.","In the call to find_library searching for the debug libraries it doesn't take into account the debug postfix used when building the library using the default provided CMakeLists.txt (example)[https://github.com/google/protobuf/blob/master/cmake/libprotobuf.cmake#L71],
This change adds an alternate name that includes the default postfix of 'd' first in the list of names to find. Since protobuf doesn't use the built-in postfix variable the only choice is to use the default value for the protobuf_DEBUG_POSTFIX variable as that is only set when building protobuf and not when searching for it.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,275,2016-10-10T19:18:04Z,2016-10-10T19:58:52Z,2016-10-10T20:33:17Z,CLOSED,False,1,1,1,https://github.com/adam4813,Addes the default for protobuf_DEBUG_POSTFIX when find debug library,1,[],https://github.com/Kitware/CMake/pull/275,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/275#issuecomment-252730537,"In the call to find_library searching for the debug libraries it doesn't take into account the debug postfix used when building the library using the default provided CMakeLists.txt (example)[https://github.com/google/protobuf/blob/master/cmake/libprotobuf.cmake#L71],
This change adds an alternate name that includes the default postfix of 'd' first in the list of names to find. Since protobuf doesn't use the built-in postfix variable the only choice is to use the default value for the protobuf_DEBUG_POSTFIX variable as that is only set when building protobuf and not when searching for it.","Thanks.  Applied as commit d9190f3.
It looks like their CMake build system provides a protobuf-config.cmake file.  This means one can use find_package(Protobuf CONFIG) to find it if it is known that the version to be found provides the package configuration file.  That will skip the find module and find the package configuration file directly.  It will also make their imported targets available.  See the cmake-packages(7) manual for details.
BTW, please see CONTRIBUTING.rst for the preferred contribution path in the future.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,275,2016-10-10T19:18:04Z,2016-10-10T19:58:52Z,2016-10-10T20:33:17Z,CLOSED,False,1,1,1,https://github.com/adam4813,Addes the default for protobuf_DEBUG_POSTFIX when find debug library,1,[],https://github.com/Kitware/CMake/pull/275,https://github.com/adam4813,3,https://github.com/Kitware/CMake/pull/275#issuecomment-252738245,"In the call to find_library searching for the debug libraries it doesn't take into account the debug postfix used when building the library using the default provided CMakeLists.txt (example)[https://github.com/google/protobuf/blob/master/cmake/libprotobuf.cmake#L71],
This change adds an alternate name that includes the default postfix of 'd' first in the list of names to find. Since protobuf doesn't use the built-in postfix variable the only choice is to use the default value for the protobuf_DEBUG_POSTFIX variable as that is only set when building protobuf and not when searching for it.",Thanks for the heads up.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,276,2016-10-11T15:21:56Z,2016-10-12T13:00:26Z,2016-10-12T14:22:04Z,CLOSED,False,3,4,1,https://github.com/emlai,"FindSDL: Add -mwindows to link flags for MinGW, correct wording",1,[],https://github.com/Kitware/CMake/pull/276,https://github.com/emlai,1,https://github.com/Kitware/CMake/pull/276,"mwindows is not a library. Quoting from https://cygwin.com/ml/cygwin/2007-04/msg00027.html:


What does -mwindows mean?

It just means to set a flag in the PE header that tells the OS not to
allocate a console for the program when started.  This is usually the
desired behavior when the program has a GUI, because you don't want the
console window appearing in that case.  It is really unfortunate that
somebody decided to call this ""-mwindows"", it should really be
-mno-console, which compliments its reciprocal option -mconsole (which
is the default.)

-mwindows is needed to avoid creating an additional console window when starting SDL applications built with MinGW.
This same change was done for the SDL2 find module here: tcbrindle/sdl2-cmake-scripts#6","mwindows is not a library. Quoting from https://cygwin.com/ml/cygwin/2007-04/msg00027.html:


What does -mwindows mean?

It just means to set a flag in the PE header that tells the OS not to
allocate a console for the program when started.  This is usually the
desired behavior when the program has a GUI, because you don't want the
console window appearing in that case.  It is really unfortunate that
somebody decided to call this ""-mwindows"", it should really be
-mno-console, which compliments its reciprocal option -mconsole (which
is the default.)

-mwindows is needed to avoid creating an additional console window when starting SDL applications built with MinGW.
This same change was done for the SDL2 find module here: tcbrindle/sdl2-cmake-scripts#6",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,276,2016-10-11T15:21:56Z,2016-10-12T13:00:26Z,2016-10-12T14:22:04Z,CLOSED,False,3,4,1,https://github.com/emlai,"FindSDL: Add -mwindows to link flags for MinGW, correct wording",1,[],https://github.com/Kitware/CMake/pull/276,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/276#issuecomment-253206539,"mwindows is not a library. Quoting from https://cygwin.com/ml/cygwin/2007-04/msg00027.html:


What does -mwindows mean?

It just means to set a flag in the PE header that tells the OS not to
allocate a console for the program when started.  This is usually the
desired behavior when the program has a GUI, because you don't want the
console window appearing in that case.  It is really unfortunate that
somebody decided to call this ""-mwindows"", it should really be
-mno-console, which compliments its reciprocal option -mconsole (which
is the default.)

-mwindows is needed to avoid creating an additional console window when starting SDL applications built with MinGW.
This same change was done for the SDL2 find module here: tcbrindle/sdl2-cmake-scripts#6","Thanks.  Applied as commit 632326a.
BTW, please see CONTRIBUTING.rst for the preferred contribution path in the future.",True,{'THUMBS_UP': ['https://github.com/emlai']}
Kitware/CMake,https://github.com/Kitware/CMake,277,2016-10-14T23:41:27Z,2016-10-18T12:45:10Z,2016-10-18T12:46:49Z,MERGED,True,1,1,1,https://github.com/armcc,CheckFunctionExists.c: avoid gcc warnings with -Wstrict-prototypes,1,[],https://github.com/Kitware/CMake/pull/277,https://github.com/armcc,1,https://github.com/Kitware/CMake/pull/277,"Avoid warnings (and therefore build failures etc) if a user happens
to add -Wstrict-prototypes to CFLAGS.
| $ gcc --version
| gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
|
| $ gcc -Wstrict-prototypes -Werror -DCHECK_FUNCTION_EXISTS=pthread_create -o foo.o -c Modules/CheckFunctionExists.c
| Modules/CheckFunctionExists.c:7:3: error: function declaration isn't a prototype [-Werror=strict-prototypes]
|    CHECK_FUNCTION_EXISTS();
|    ^
| cc1: all warnings being treated as errors
|
Signed-off-by: Andre McCurdy armccurdy@gmail.com","Avoid warnings (and therefore build failures etc) if a user happens
to add -Wstrict-prototypes to CFLAGS.
| $ gcc --version
| gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
|
| $ gcc -Wstrict-prototypes -Werror -DCHECK_FUNCTION_EXISTS=pthread_create -o foo.o -c Modules/CheckFunctionExists.c
| Modules/CheckFunctionExists.c:7:3: error: function declaration isn't a prototype [-Werror=strict-prototypes]
|    CHECK_FUNCTION_EXISTS();
|    ^
| cc1: all warnings being treated as errors
|
Signed-off-by: Andre McCurdy armccurdy@gmail.com",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,277,2016-10-14T23:41:27Z,2016-10-18T12:45:10Z,2016-10-18T12:46:49Z,MERGED,True,1,1,1,https://github.com/armcc,CheckFunctionExists.c: avoid gcc warnings with -Wstrict-prototypes,1,[],https://github.com/Kitware/CMake/pull/277,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/277#issuecomment-254496171,"Avoid warnings (and therefore build failures etc) if a user happens
to add -Wstrict-prototypes to CFLAGS.
| $ gcc --version
| gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
|
| $ gcc -Wstrict-prototypes -Werror -DCHECK_FUNCTION_EXISTS=pthread_create -o foo.o -c Modules/CheckFunctionExists.c
| Modules/CheckFunctionExists.c:7:3: error: function declaration isn't a prototype [-Werror=strict-prototypes]
|    CHECK_FUNCTION_EXISTS();
|    ^
| cc1: all warnings being treated as errors
|
Signed-off-by: Andre McCurdy armccurdy@gmail.com",Thanks.  Merged.  For future changes please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/congzhangzh,1,https://github.com/Kitware/CMake/pull/278,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.","swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/278#issuecomment-254195195,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.","Thanks.  From the name of the option CMAKE_SWIG_ODIR I did not understand its meaning at first.  Also, the use of a CMAKE_SWIG_ prefix instead of just SWIG_ is a long-outdated convention.  Let's call the option something like SWIG_OUTFILE_DIR.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/congzhangzh,3,https://github.com/Kitware/CMake/pull/278#issuecomment-254237540,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.","SWIG_OUTFILE_DIR seems better, maybe we can change the old CMAKE_SWIG_OUTDIR to SWIG_OUTDIR at the same time?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/278#issuecomment-254239543,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.",We need to remain compatible with the old option names.  What we can do is honor SWIG_OUTDIR if it is set and if not then also check the old CMAKE_SWIG_OUTDIR name.  In both cases the documentation should be updated accordingly.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/278#issuecomment-254496662,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.",@congzhangzh when a revision is ready please open a merge request over in our GitLab repository.  That is the preferred contribution path documented in CONTRIBUTING.rst.  Your GitHub account can be used to register/authenticate.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,278,2016-10-16T04:56:58Z,2016-10-18T12:49:01Z,2016-10-18T13:22:02Z,CLOSED,False,9,1,1,https://github.com/congzhangzh,add support for CMAKE_SWIG_ODIR to specific output dir for wrap file,1,[],https://github.com/Kitware/CMake/pull/278,https://github.com/congzhangzh,6,https://github.com/Kitware/CMake/pull/278#issuecomment-254505549,"swig has two output related param:
-o     - Set name of C/C++ output file to 
-outdir    - Set language specific files output directory to 
as CMAKE_SWIG_OUTDIR is just for language specific files output directory, we need another for wrap file.",Ok,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,279,2016-11-01T09:44:11Z,2016-11-01T14:59:52Z,2016-11-01T15:00:01Z,MERGED,True,6,2,2,https://github.com/fetzerch,"Help: Improve documentation (execute_process, file(REMOVE))",2,[],https://github.com/Kitware/CMake/pull/279,https://github.com/fetzerch,1,https://github.com/Kitware/CMake/pull/279,"This improves the documentation with two issues I ran into recently.
The behavior of execute_process is already explained, but I think it would be a good idea to specifically mention that processes are started in parallel (to make the pipes work) and how to achieve sequential execution. Especially because the behavior is different to add_custom_target/comamnd. This was recently also reported (by someone else) in http://public.kitware.com/pipermail/cmake/2016-March/063074.html.","This improves the documentation with two issues I ran into recently.
The behavior of execute_process is already explained, but I think it would be a good idea to specifically mention that processes are started in parallel (to make the pipes work) and how to achieve sequential execution. Especially because the behavior is different to add_custom_target/comamnd. This was recently also reported (by someone else) in http://public.kitware.com/pipermail/cmake/2016-March/063074.html.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,279,2016-11-01T09:44:11Z,2016-11-01T14:59:52Z,2016-11-01T15:00:01Z,MERGED,True,6,2,2,https://github.com/fetzerch,"Help: Improve documentation (execute_process, file(REMOVE))",2,[],https://github.com/Kitware/CMake/pull/279,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/279#issuecomment-257589029,"This improves the documentation with two issues I ran into recently.
The behavior of execute_process is already explained, but I think it would be a good idea to specifically mention that processes are started in parallel (to make the pipes work) and how to achieve sequential execution. Especially because the behavior is different to add_custom_target/comamnd. This was recently also reported (by someone else) in http://public.kitware.com/pipermail/cmake/2016-March/063074.html.",Thanks. Merged. For future changes please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,280,2016-11-22T19:58:25Z,2016-11-30T13:31:00Z,2016-11-30T13:31:00Z,CLOSED,False,9,2,1,https://github.com/jeking3,Allow FindZLIB to find static libraries made by the zlib project (v1.2.8) cmake build,1,[],https://github.com/Kitware/CMake/pull/280,https://github.com/jeking3,1,https://github.com/Kitware/CMake/pull/280,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,280,2016-11-22T19:58:25Z,2016-11-30T13:31:00Z,2016-11-30T13:31:00Z,CLOSED,False,9,2,1,https://github.com/jeking3,Allow FindZLIB to find static libraries made by the zlib project (v1.2.8) cmake build,1,[],https://github.com/Kitware/CMake/pull/280,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/280#issuecomment-262357027,,"Thanks.  That project has this line that makes the library file be just libz.a on UNIX platforms, so IIUC this is only for Windows.  Perhaps instead this should just be listed as an alternative name unconditionally.
BTW, please see CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,281,2016-12-14T21:11:47Z,2016-12-15T14:43:31Z,2016-12-15T14:44:01Z,MERGED,True,1,1,1,https://github.com/MaximeMorel,FindPNG.cmake : small typo fix in module help,1,[],https://github.com/Kitware/CMake/pull/281,https://github.com/MaximeMorel,1,https://github.com/Kitware/CMake/pull/281,Fix small typo in FindPNG.cmake,Fix small typo in FindPNG.cmake,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,281,2016-12-14T21:11:47Z,2016-12-15T14:43:31Z,2016-12-15T14:44:01Z,MERGED,True,1,1,1,https://github.com/MaximeMorel,FindPNG.cmake : small typo fix in module help,1,[],https://github.com/Kitware/CMake/pull/281,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/281#issuecomment-267344140,Fix small typo in FindPNG.cmake,Thanks!  For future changes please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,282,2016-12-16T15:27:58Z,2016-12-16T17:58:23Z,2016-12-16T17:58:23Z,CLOSED,False,2,6,1,https://github.com/thehungarian,Update cmExtraSublimeTextGenerator.cxx,1,[],https://github.com/Kitware/CMake/pull/282,https://github.com/thehungarian,1,https://github.com/Kitware/CMake/pull/282,Stop forcing make into verbose mode for sublime text projects,Stop forcing make into verbose mode for sublime text projects,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,282,2016-12-16T15:27:58Z,2016-12-16T17:58:23Z,2016-12-16T17:58:23Z,CLOSED,False,2,6,1,https://github.com/thehungarian,Update cmExtraSublimeTextGenerator.cxx,1,[],https://github.com/Kitware/CMake/pull/282,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/282#issuecomment-267622270,Stop forcing make into verbose mode for sublime text projects,"Thanks.  It looks like that behavior has been there since the generator was first added, so we have no clearly recorded reason for it to be there.
We prefer to use Your Name <...> in authorship rather than a handle, if you are willing.
Also, please see CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,282,2016-12-16T15:27:58Z,2016-12-16T17:58:23Z,2016-12-16T17:58:23Z,CLOSED,False,2,6,1,https://github.com/thehungarian,Update cmExtraSublimeTextGenerator.cxx,1,[],https://github.com/Kitware/CMake/pull/282,https://github.com/thehungarian,3,https://github.com/Kitware/CMake/pull/282#issuecomment-267653096,Stop forcing make into verbose mode for sublime text projects,"Sorry for my clumsy use to github, it's not my natural environment.
I think I've raised the correct merge request on gitlab.kitware.com.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,282,2016-12-16T15:27:58Z,2016-12-16T17:58:23Z,2016-12-16T17:58:23Z,CLOSED,False,2,6,1,https://github.com/thehungarian,Update cmExtraSublimeTextGenerator.cxx,1,[],https://github.com/Kitware/CMake/pull/282,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/282#issuecomment-267656113,Stop forcing make into verbose mode for sublime text projects,Thanks.  Closing in favor of MR 339.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,283,2017-01-05T17:51:43Z,2017-01-09T14:53:24Z,2017-01-09T14:53:24Z,CLOSED,False,16,1,1,https://github.com/o01eg,Add support for boost 1.63.0.,1,[],https://github.com/Kitware/CMake/pull/283,https://github.com/o01eg,1,https://github.com/Kitware/CMake/pull/283,Add support for new boost version but I'm not sure about dependencies.,Add support for new boost version but I'm not sure about dependencies.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,283,2017-01-05T17:51:43Z,2017-01-09T14:53:24Z,2017-01-09T14:53:24Z,CLOSED,False,16,1,1,https://github.com/o01eg,Add support for boost 1.63.0.,1,[],https://github.com/Kitware/CMake/pull/283,https://github.com/sergiud,2,https://github.com/Kitware/CMake/pull/283#issuecomment-271011160,Add support for new boost version but I'm not sure about dependencies.,"It's a bit silly that Boost imported targets and their dependencies must be defined for each Boost release. There are hardly any changes between most releases.
My suggestion would be to always define Boost imported targets regardless of the version and in doubt leave it to the user to specify the dependencies.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,283,2017-01-05T17:51:43Z,2017-01-09T14:53:24Z,2017-01-09T14:53:24Z,CLOSED,False,16,1,1,https://github.com/o01eg,Add support for boost 1.63.0.,1,[],https://github.com/Kitware/CMake/pull/283,https://github.com/purpleKarrot,3,https://github.com/Kitware/CMake/pull/283#issuecomment-271300516,Add support for new boost version but I'm not sure about dependencies.,There is already a merge request here: https://gitlab.kitware.com/cmake/cmake/merge_requests/361,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,283,2017-01-05T17:51:43Z,2017-01-09T14:53:24Z,2017-01-09T14:53:24Z,CLOSED,False,16,1,1,https://github.com/o01eg,Add support for boost 1.63.0.,1,[],https://github.com/Kitware/CMake/pull/283,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/283#issuecomment-271303791,Add support for new boost version but I'm not sure about dependencies.,Closing in favor of the GitLab MR 361.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,284,2017-01-10T06:47:23Z,2017-01-10T13:30:57Z,2017-01-10T20:19:32Z,CLOSED,False,2,2,1,https://github.com/mtbrobotanist,added lib64 to find_library search PATH_SUFFIXES,1,[],https://github.com/Kitware/CMake/pull/284,https://github.com/mtbrobotanist,1,https://github.com/Kitware/CMake/pull/284,"Hi, i recently had to add this fix to my system installed FindOpenThreads.cmake module. I had a custom installation of OpenSceneGraph (and OpenThreads) in my home directory. it installed to lib64 and the system supplied FindOpenSceneGraph.cmake was using the system supplied FindOpenThreads.cmake module, which didn't check lib64. after i added lib64, everything compiled fine.","Hi, i recently had to add this fix to my system installed FindOpenThreads.cmake module. I had a custom installation of OpenSceneGraph (and OpenThreads) in my home directory. it installed to lib64 and the system supplied FindOpenSceneGraph.cmake was using the system supplied FindOpenThreads.cmake module, which didn't check lib64. after i added lib64, everything compiled fine.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,284,2017-01-10T06:47:23Z,2017-01-10T13:30:57Z,2017-01-10T20:19:32Z,CLOSED,False,2,2,1,https://github.com/mtbrobotanist,added lib64 to find_library search PATH_SUFFIXES,1,[],https://github.com/Kitware/CMake/pull/284,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/284#issuecomment-271575804,"Hi, i recently had to add this fix to my system installed FindOpenThreads.cmake module. I had a custom installation of OpenSceneGraph (and OpenThreads) in my home directory. it installed to lib64 and the system supplied FindOpenSceneGraph.cmake was using the system supplied FindOpenThreads.cmake module, which didn't check lib64. after i added lib64, everything compiled fine.","What distro are you using?  The find_library command automatically searches lib64 in place of lib on distros that package things that way.  If you're using a custom install please configure it to follow the conventions of the host system (e.g. lib) or be prepared to set the library cache entries in your client build with -DOPENTHREADS_LIBRARY=/path/to/lib64/....
We have many find modules that search lib directories, and lib64 is not an appropriate place to search on 32-bit hosts, so hard-coding lib64 for a specific package is not a good solution.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,284,2017-01-10T06:47:23Z,2017-01-10T13:30:57Z,2017-01-10T20:19:32Z,CLOSED,False,2,2,1,https://github.com/mtbrobotanist,added lib64 to find_library search PATH_SUFFIXES,1,[],https://github.com/Kitware/CMake/pull/284,https://github.com/mtbrobotanist,3,https://github.com/Kitware/CMake/pull/284#issuecomment-271685662,"Hi, i recently had to add this fix to my system installed FindOpenThreads.cmake module. I had a custom installation of OpenSceneGraph (and OpenThreads) in my home directory. it installed to lib64 and the system supplied FindOpenSceneGraph.cmake was using the system supplied FindOpenThreads.cmake module, which didn't check lib64. after i added lib64, everything compiled fine.","Ubuntu 16.04 64bit. OpenSceneGraph installs everything into lib64 by default regardless of the CMAKE_INSTALL_PREFIX, next to lib. Didn't realize that I had that level of control over the installation directory of the libraries specifically.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,285,2017-01-18T15:18:08Z,2017-01-18T16:14:17Z,2017-01-18T16:31:45Z,CLOSED,False,260,0,5,https://github.com/gusc,Xcode schemes,2,[],https://github.com/Kitware/CMake/pull/285,https://github.com/gusc,1,https://github.com/Kitware/CMake/pull/285,"I've implemented an Xcode shared scheme writer which mimics the way Xcode generates schemes for all the targets in a project generated by CMake. I've tested it on Xcode 7.0.1, 7.3.1, 8.0, 8.1 and 8.2.1.
This is necessary for automated building and testing using xcodebuild command line instead of Xcode GUI application. The xcodebuild itself does not generate neither private nor shared schemes and thus analyze, archive, build-for-testing and test actions are impossible to run.
I chose to generate shared schemes as they don't require knowing the user's login name. And I chose to create an extra class for schemes because it could be later re-used if for example someone implements Xcode workspace generation (which also can host schemes).
I think that current solution could be advanced further with additional CMake options, but for now it would be enough to just generate a project and be able to build it using command line tools that in some cases require schemes.
If I've forgotten something, please, let me know. :)","I've implemented an Xcode shared scheme writer which mimics the way Xcode generates schemes for all the targets in a project generated by CMake. I've tested it on Xcode 7.0.1, 7.3.1, 8.0, 8.1 and 8.2.1.
This is necessary for automated building and testing using xcodebuild command line instead of Xcode GUI application. The xcodebuild itself does not generate neither private nor shared schemes and thus analyze, archive, build-for-testing and test actions are impossible to run.
I chose to generate shared schemes as they don't require knowing the user's login name. And I chose to create an extra class for schemes because it could be later re-used if for example someone implements Xcode workspace generation (which also can host schemes).
I think that current solution could be advanced further with additional CMake options, but for now it would be enough to just generate a project and be able to build it using command line tools that in some cases require schemes.
If I've forgotten something, please, let me know. :)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,285,2017-01-18T15:18:08Z,2017-01-18T16:14:17Z,2017-01-18T16:31:45Z,CLOSED,False,260,0,5,https://github.com/gusc,Xcode schemes,2,[],https://github.com/Kitware/CMake/pull/285,https://github.com/gusc,2,https://github.com/Kitware/CMake/pull/285#issuecomment-273520401,"I've implemented an Xcode shared scheme writer which mimics the way Xcode generates schemes for all the targets in a project generated by CMake. I've tested it on Xcode 7.0.1, 7.3.1, 8.0, 8.1 and 8.2.1.
This is necessary for automated building and testing using xcodebuild command line instead of Xcode GUI application. The xcodebuild itself does not generate neither private nor shared schemes and thus analyze, archive, build-for-testing and test actions are impossible to run.
I chose to generate shared schemes as they don't require knowing the user's login name. And I chose to create an extra class for schemes because it could be later re-used if for example someone implements Xcode workspace generation (which also can host schemes).
I think that current solution could be advanced further with additional CMake options, but for now it would be enough to just generate a project and be able to build it using command line tools that in some cases require schemes.
If I've forgotten something, please, let me know. :)",I'm closing the pull request and moving it to https://gitlab.kitware.com/cmake/cmake/merge_requests/415,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,286,2017-02-03T22:18:31Z,2017-02-06T15:47:04Z,2017-02-06T15:47:04Z,CLOSED,False,6,1,1,https://github.com/ahans,Force generation of folders for Express editions of VS10 and earlier,1,[],https://github.com/Kitware/CMake/pull/286,https://github.com/ahans,1,https://github.com/Kitware/CMake/pull/286,"When for compatibility reasons VS10 compilers need to be used, one can still use a newer VS version (supporting folders) as IDE. This patch allows to force the generation of folders even when an Express edition of VS10 is detected by setting the property FORCE_USE_FOLDERS to true.
See also https://cmake.org/pipermail/cmake/2017-January/064942.html","When for compatibility reasons VS10 compilers need to be used, one can still use a newer VS version (supporting folders) as IDE. This patch allows to force the generation of folders even when an Express edition of VS10 is detected by setting the property FORCE_USE_FOLDERS to true.
See also https://cmake.org/pipermail/cmake/2017-January/064942.html",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,286,2017-02-03T22:18:31Z,2017-02-06T15:47:04Z,2017-02-06T15:47:04Z,CLOSED,False,6,1,1,https://github.com/ahans,Force generation of folders for Express editions of VS10 and earlier,1,[],https://github.com/Kitware/CMake/pull/286,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/286#issuecomment-277722075,"When for compatibility reasons VS10 compilers need to be used, one can still use a newer VS version (supporting folders) as IDE. This patch allows to force the generation of folders even when an Express edition of VS10 is detected by setting the property FORCE_USE_FOLDERS to true.
See also https://cmake.org/pipermail/cmake/2017-January/064942.html","I've responded to your message on-list here.  No force-use-folders feature should be needed.
Please also see CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,287,2017-02-05T05:32:26Z,2017-02-06T15:51:45Z,2017-02-06T15:51:45Z,CLOSED,False,3,0,1,https://github.com/nevion,allow override (OPENCL_ROOT) for where comes from,1,[],https://github.com/Kitware/CMake/pull/287,https://github.com/nevion,1,https://github.com/Kitware/CMake/pull/287,"We can't expect this script to cover all the different vendors of
OpenCL.  So let's just make a unified variable for users to specify
where we should look.","We can't expect this script to cover all the different vendors of
OpenCL.  So let's just make a unified variable for users to specify
where we should look.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,287,2017-02-05T05:32:26Z,2017-02-06T15:51:45Z,2017-02-06T15:51:45Z,CLOSED,False,3,0,1,https://github.com/nevion,allow override (OPENCL_ROOT) for where comes from,1,[],https://github.com/Kitware/CMake/pull/287,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/287#issuecomment-277723606,"We can't expect this script to cover all the different vendors of
OpenCL.  So let's just make a unified variable for users to specify
where we should look.","Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and submit a merge request to our GitLab instance.  You can still authenticate with GitHub if preferred.
Also, please add a Help/release/dev/FindOpenCL-root-var.rst file with a release note for this feature.  See other notes in that directory for examples.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,288,2017-02-06T14:05:29Z,2017-02-06T15:51:41Z,2017-02-06T15:51:41Z,CLOSED,False,27,0,1,https://github.com/sgallou,Fix usage with Protobuf static libraries on Unix,1,[],https://github.com/Kitware/CMake/pull/288,https://github.com/sgallou,1,https://github.com/Kitware/CMake/pull/288,"Hi,
to be able to build an application using Protobuf as static library under Linux, I needed to fix the FindProtobuf.cmake.
I was inpired by FindBoost.cmake to find correctly the static libs. I also add the Protobuf_USE_STATIC_LIBS input variable, that must be set to ON to search for static libs.
I hope these changes will be usefull for other CMake users.
Regards,
S. Gallou","Hi,
to be able to build an application using Protobuf as static library under Linux, I needed to fix the FindProtobuf.cmake.
I was inpired by FindBoost.cmake to find correctly the static libs. I also add the Protobuf_USE_STATIC_LIBS input variable, that must be set to ON to search for static libs.
I hope these changes will be usefull for other CMake users.
Regards,
S. Gallou",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,288,2017-02-06T14:05:29Z,2017-02-06T15:51:41Z,2017-02-06T15:51:41Z,CLOSED,False,27,0,1,https://github.com/sgallou,Fix usage with Protobuf static libraries on Unix,1,[],https://github.com/Kitware/CMake/pull/288,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/288#issuecomment-277723582,"Hi,
to be able to build an application using Protobuf as static library under Linux, I needed to fix the FindProtobuf.cmake.
I was inpired by FindBoost.cmake to find correctly the static libs. I also add the Protobuf_USE_STATIC_LIBS input variable, that must be set to ON to search for static libs.
I hope these changes will be usefull for other CMake users.
Regards,
S. Gallou","Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and submit a merge request to our GitLab instance.  You can still authenticate with GitHub if preferred.
Also, please add a Help/release/dev/FindProtobuf-static-libs.rst file with a release note for this feature.  See other notes in that directory for examples.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,289,2017-02-08T01:38:25Z,2017-02-08T04:57:47Z,2017-02-08T04:57:47Z,CLOSED,False,186,0,1,https://github.com/Falven,Added module for finding SDL2.,4,[],https://github.com/Kitware/CMake/pull/289,https://github.com/Falven,1,https://github.com/Kitware/CMake/pull/289,"Added a module for finding SDL2.
Maintains separation from SDL1.x for people who maintain both versions.
Working on Windows, Not tested on OS-X or Linux
C:\Users\falven\Desktop\cpp-futile-engine-build>C:\Users\falven\Desktop\cmake-build\bin\Debug\cmake.exe C:\Users\falven\Source\Repos\cpp-futile-engine -G ""Visual Studio 14 2015 Win64""
-- Found SDL2: C:/Program Files/SDL2/lib/SDL2.lib (found version ""2.0.5"")
---------> SDL2_LIBRARY: C:/Program Files/SDL2/lib/SDL2.lib <---------
---------> SDL2_INCLUDE_DIR: C:/Program Files/SDL2/include/SDL2 <---------
---------> SDL2_VERSION_STRING: 2.0.5 <---------","Added a module for finding SDL2.
Maintains separation from SDL1.x for people who maintain both versions.
Working on Windows, Not tested on OS-X or Linux
C:\Users\falven\Desktop\cpp-futile-engine-build>C:\Users\falven\Desktop\cmake-build\bin\Debug\cmake.exe C:\Users\falven\Source\Repos\cpp-futile-engine -G ""Visual Studio 14 2015 Win64""
-- Found SDL2: C:/Program Files/SDL2/lib/SDL2.lib (found version ""2.0.5"")
---------> SDL2_LIBRARY: C:/Program Files/SDL2/lib/SDL2.lib <---------
---------> SDL2_INCLUDE_DIR: C:/Program Files/SDL2/include/SDL2 <---------
---------> SDL2_VERSION_STRING: 2.0.5 <---------",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,290,2017-02-16T14:28:21Z,2017-02-16T14:34:57Z,2017-02-16T14:34:57Z,CLOSED,False,1,0,1,https://github.com/eyecreate,Add in another name combo for libcrypto that matches libssl.,1,[],https://github.com/Kitware/CMake/pull/290,https://github.com/eyecreate,1,https://github.com/Kitware/CMake/pull/290,libcrypto should have matching find pattern that libssl has for builds without the prefix on the front.,libcrypto should have matching find pattern that libssl has for builds without the prefix on the front.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,290,2017-02-16T14:28:21Z,2017-02-16T14:34:57Z,2017-02-16T14:34:57Z,CLOSED,False,1,0,1,https://github.com/eyecreate,Add in another name combo for libcrypto that matches libssl.,1,[],https://github.com/Kitware/CMake/pull/290,https://github.com/eyecreate,2,https://github.com/Kitware/CMake/pull/290#issuecomment-280346264,libcrypto should have matching find pattern that libssl has for builds without the prefix on the front.,just read this isn't the right place to submit patches.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,291,2017-02-17T10:08:03Z,2017-02-17T13:01:32Z,2017-03-06T08:37:58Z,CLOSED,False,17,7,1,https://github.com/devcooch,Cache the list of xaml and resx headers to speedup VS project generation,1,[],https://github.com/Kitware/CMake/pull/291,https://github.com/devcooch,1,https://github.com/Kitware/CMake/pull/291,"Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry","Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,291,2017-02-17T10:08:03Z,2017-02-17T13:01:32Z,2017-03-06T08:37:58Z,CLOSED,False,17,7,1,https://github.com/devcooch,Cache the list of xaml and resx headers to speedup VS project generation,1,[],https://github.com/Kitware/CMake/pull/291,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/291#issuecomment-280642938,"Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry","Thanks.  Currently we support C++98 host compilers so please avoid using C++11.  Also, please look at caching in a member rather than a static local.
Please see CONTRIBUTING.rst for the preferred contribution path and submit this as a MR to our GitLab instance instead.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,291,2017-02-17T10:08:03Z,2017-02-17T13:01:32Z,2017-03-06T08:37:58Z,CLOSED,False,17,7,1,https://github.com/devcooch,Cache the list of xaml and resx headers to speedup VS project generation,1,[],https://github.com/Kitware/CMake/pull/291,https://github.com/devcooch,3,https://github.com/Kitware/CMake/pull/291#issuecomment-280782184,"Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry","Clear, thanks! What would you recommend for C++98 compatibility? auto_ptr? Raw pointer deleted in destructor?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,291,2017-02-17T10:08:03Z,2017-02-17T13:01:32Z,2017-03-06T08:37:58Z,CLOSED,False,17,7,1,https://github.com/devcooch,Cache the list of xaml and resx headers to speedup VS project generation,1,[],https://github.com/Kitware/CMake/pull/291,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/291#issuecomment-281104600,"Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry",We use raw pointer deletes in the destructor broadly.  You could try a CM_AUTO_PTR member since cmGeneratorTarget is a non-copyable type.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,291,2017-02-17T10:08:03Z,2017-02-17T13:01:32Z,2017-03-06T08:37:58Z,CLOSED,False,17,7,1,https://github.com/devcooch,Cache the list of xaml and resx headers to speedup VS project generation,1,[],https://github.com/Kitware/CMake/pull/291,https://github.com/devcooch,5,https://github.com/Kitware/CMake/pull/291#issuecomment-284333591,"Hi!
I've realized that for our huge multi-repository project cmake on Windows runs significantly slower than on Linux.
I've run it in standard VS2015 profiler just to check if there are low-hanging fruits.
Surprisingly GetExpectedResxHeaders and GetExpectedXamlHeaders functions were consuming about 38% of whole CPU time. The reason is that they are triggered for each line when you need to put file inside vcxproj (and check whether it is XAML/RESX header) and they populate a list from scratch.
So I decided to put it in local static var to keep content cached.
For our project the improvement with this change is from 4m44s to 4m12s.
Please let me know if I should use some other approach than static vars.
Regards,
Dmitry",The change was merged in GitLab: https://gitlab.kitware.com/cmake/cmake/merge_requests/505,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,292,2017-02-24T14:36:29Z,2017-02-24T14:45:22Z,2017-02-24T14:45:22Z,CLOSED,False,0,27,1,https://github.com/Krysos1991,message,1,[],https://github.com/Kitware/CMake/pull/292,https://github.com/Krysos1991,1,https://github.com/Kitware/CMake/pull/292,message,message,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,292,2017-02-24T14:36:29Z,2017-02-24T14:45:22Z,2017-02-24T14:45:22Z,CLOSED,False,0,27,1,https://github.com/Krysos1991,message,1,[],https://github.com/Kitware/CMake/pull/292,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/292#issuecomment-282308444,message,"Closing as this looks like a mistaken submission.
Please see CONTRIBUTING.rst for the preferred contribution path.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,293,2017-03-01T22:19:12Z,2017-03-02T12:51:32Z,2017-03-02T12:51:32Z,CLOSED,False,4,2,1,https://github.com/jherico,Additional paths for finding the Vulkan link lib,1,[],https://github.com/Kitware/CMake/pull/293,https://github.com/jherico,1,https://github.com/Kitware/CMake/pull/293,"As of at least 1.0.42 of the LunarG SDK, the vulkan-1.lib file for windows is stored in ${VULKAN_SDK}/Lib or ${VULKAN_SDK}/Lib32","As of at least 1.0.42 of the LunarG SDK, the vulkan-1.lib file for windows is stored in ${VULKAN_SDK}/Lib or ${VULKAN_SDK}/Lib32",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,293,2017-03-01T22:19:12Z,2017-03-02T12:51:32Z,2017-03-02T12:51:32Z,CLOSED,False,4,2,1,https://github.com/jherico,Additional paths for finding the Vulkan link lib,1,[],https://github.com/Kitware/CMake/pull/293,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/293#issuecomment-283645416,"As of at least 1.0.42 of the LunarG SDK, the vulkan-1.lib file for windows is stored in ${VULKAN_SDK}/Lib or ${VULKAN_SDK}/Lib32",Thanks.  Closing in favor of MR 541 on our GitLab instance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,294,2017-03-08T18:42:17Z,2017-03-08T18:57:59Z,2017-03-17T23:33:01Z,CLOSED,False,2,1,1,https://github.com/wmamrak,Updated MSVC_VERSION for Visual Studio 2017,1,[],https://github.com/Kitware/CMake/pull/294,https://github.com/wmamrak,1,https://github.com/Kitware/CMake/pull/294,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,294,2017-03-08T18:42:17Z,2017-03-08T18:57:59Z,2017-03-17T23:33:01Z,CLOSED,False,2,1,1,https://github.com/wmamrak,Updated MSVC_VERSION for Visual Studio 2017,1,[],https://github.com/Kitware/CMake/pull/294,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/294#issuecomment-285133793,,Thanks.  Please see CONTRIBUTING.rst and submit this as a MR to our GitLab instance instead.  You can still use your GitHub account to authenticate via OAuth.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,294,2017-03-08T18:42:17Z,2017-03-08T18:57:59Z,2017-03-17T23:33:01Z,CLOSED,False,2,1,1,https://github.com/wmamrak,Updated MSVC_VERSION for Visual Studio 2017,1,[],https://github.com/Kitware/CMake/pull/294,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/294#issuecomment-285144045,,Ported to MR 567.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,295,2017-03-17T20:04:38Z,2017-03-20T14:00:39Z,2017-03-20T14:00:39Z,CLOSED,False,94,20,2,https://github.com/rahmjan,CodeLite - splitting files into folders,3,[],https://github.com/Kitware/CMake/pull/295,https://github.com/rahmjan,1,https://github.com/Kitware/CMake/pull/295,"Splits files into ""VirtualDirectory"" in CodeLite IDE.","Splits files into ""VirtualDirectory"" in CodeLite IDE.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,295,2017-03-17T20:04:38Z,2017-03-20T14:00:39Z,2017-03-20T14:00:39Z,CLOSED,False,94,20,2,https://github.com/rahmjan,CodeLite - splitting files into folders,3,[],https://github.com/Kitware/CMake/pull/295,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/295#issuecomment-287767275,"Splits files into ""VirtualDirectory"" in CodeLite IDE.",Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path through our GitLab instance.  You can still use your GitHub account if desired.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,296,2017-03-19T19:24:54Z,2017-03-20T13:59:22Z,2017-03-21T15:12:34Z,CLOSED,False,1,1,1,https://github.com/jmutkawoa,Operation CR - hackers.mu,1,[],https://github.com/Kitware/CMake/pull/296,https://github.com/jmutkawoa,1,https://github.com/Kitware/CMake/pull/296,"As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.","As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,296,2017-03-19T19:24:54Z,2017-03-20T13:59:22Z,2017-03-21T15:12:34Z,CLOSED,False,1,1,1,https://github.com/jmutkawoa,Operation CR - hackers.mu,1,[],https://github.com/Kitware/CMake/pull/296,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/296#issuecomment-287766827,"As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.",Thanks.  Please submit this to upstream libarchive first.  Once reviewed and integrated there we can update CMake's copy.  Otherwise distros that build CMake against their own libarchive won't have this fix.,True,{'CONFUSED': ['https://github.com/jmutkawoa']}
Kitware/CMake,https://github.com/Kitware/CMake,296,2017-03-19T19:24:54Z,2017-03-20T13:59:22Z,2017-03-21T15:12:34Z,CLOSED,False,1,1,1,https://github.com/jmutkawoa,Operation CR - hackers.mu,1,[],https://github.com/Kitware/CMake/pull/296,https://github.com/jmutkawoa,3,https://github.com/Kitware/CMake/pull/296#issuecomment-287977746,"As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.","Hello, its already sent and committed on libarchive/libarchive",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,296,2017-03-19T19:24:54Z,2017-03-20T13:59:22Z,2017-03-21T15:12:34Z,CLOSED,False,1,1,1,https://github.com/jmutkawoa,Operation CR - hackers.mu,1,[],https://github.com/Kitware/CMake/pull/296,https://github.com/jmutkawoa,4,https://github.com/Kitware/CMake/pull/296#issuecomment-287979132,"As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.",@bradking please see libarchive/libarchive#887 for reference,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,296,2017-03-19T19:24:54Z,2017-03-20T13:59:22Z,2017-03-21T15:12:34Z,CLOSED,False,1,1,1,https://github.com/jmutkawoa,Operation CR - hackers.mu,1,[],https://github.com/Kitware/CMake/pull/296,https://github.com/bradking,5,https://github.com/Kitware/CMake/pull/296#issuecomment-288110197,"As per Cryptographic Requirements published on Wikileaks on Marc 2017.
We discard more bytes (3072 bytes) of the first keystream to reduce the possibility of non-random bytes.",Thanks.  I've applied this in our GitLab MR 598.  That is the preferred contribution path described in CONTRIBUTING.rst.,True,{'THUMBS_UP': ['https://github.com/jmutkawoa']}
Kitware/CMake,https://github.com/Kitware/CMake,297,2017-04-02T13:40:37Z,2017-04-04T12:50:28Z,2017-04-04T12:50:28Z,CLOSED,False,62,17,14,https://github.com/beeble,Extend Visual Studio sln generator to accept MAP_IMPORTED_CONFIG_*.,1,[],https://github.com/Kitware/CMake/pull/297,https://github.com/beeble,1,https://github.com/Kitware/CMake/pull/297,"This allows 3rd party projects added via include_external_msproject,
to compile preferred configuration despite different naming standard.
Inspired by old mail:
http://public.kitware.com/pipermail/cmake/2010-April/036388.html","This allows 3rd party projects added via include_external_msproject,
to compile preferred configuration despite different naming standard.
Inspired by old mail:
http://public.kitware.com/pipermail/cmake/2010-April/036388.html",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,297,2017-04-02T13:40:37Z,2017-04-04T12:50:28Z,2017-04-04T12:50:28Z,CLOSED,False,62,17,14,https://github.com/beeble,Extend Visual Studio sln generator to accept MAP_IMPORTED_CONFIG_*.,1,[],https://github.com/Kitware/CMake/pull/297,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/297#issuecomment-291166685,"This allows 3rd party projects added via include_external_msproject,
to compile preferred configuration despite different naming standard.
Inspired by old mail:
http://public.kitware.com/pipermail/cmake/2010-April/036388.html","Thanks!
Please see CONTRIBUTING.rst and submit this to our GitLab instance instead.  You can still authenticate with GitHub OAuth if you want.
Also, please look at adding a test for this in Tests/RunCMake/include_external_msproject.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,297,2017-04-02T13:40:37Z,2017-04-04T12:50:28Z,2017-04-04T12:50:28Z,CLOSED,False,62,17,14,https://github.com/beeble,Extend Visual Studio sln generator to accept MAP_IMPORTED_CONFIG_*.,1,[],https://github.com/Kitware/CMake/pull/297,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/297#issuecomment-291489529,"This allows 3rd party projects added via include_external_msproject,
to compile preferred configuration despite different naming standard.
Inspired by old mail:
http://public.kitware.com/pipermail/cmake/2010-April/036388.html",Closing in favor of GitLab MR 664.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,298,2017-04-06T07:09:20Z,2017-04-06T15:13:37Z,2017-04-06T15:23:15Z,CLOSED,False,1,1,1,https://github.com/yumetodo,fix(FindBoost): Use list APPEND instead of set,1,[],https://github.com/Kitware/CMake/pull/298,https://github.com/yumetodo,1,https://github.com/Kitware/CMake/pull/298,"When Boost_USE_DEBUG_RUNTIME  is OFF, _boost_RELEASE_NAMES will be cleared at the line so that fail to find library when configure for Visual Studio.","When Boost_USE_DEBUG_RUNTIME  is OFF, _boost_RELEASE_NAMES will be cleared at the line so that fail to find library when configure for Visual Studio.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,298,2017-04-06T07:09:20Z,2017-04-06T15:13:37Z,2017-04-06T15:23:15Z,CLOSED,False,1,1,1,https://github.com/yumetodo,fix(FindBoost): Use list APPEND instead of set,1,[],https://github.com/Kitware/CMake/pull/298,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/298#issuecomment-292174240,"When Boost_USE_DEBUG_RUNTIME  is OFF, _boost_RELEASE_NAMES will be cleared at the line so that fail to find library when configure for Visual Studio.","Thanks.
Please see CONTRIBUTING.rst for the preferred contribution path and submit a merge request to our GitLab instance instead.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,298,2017-04-06T07:09:20Z,2017-04-06T15:13:37Z,2017-04-06T15:23:15Z,CLOSED,False,1,1,1,https://github.com/yumetodo,fix(FindBoost): Use list APPEND instead of set,1,[],https://github.com/Kitware/CMake/pull/298,https://github.com/yumetodo,3,https://github.com/Kitware/CMake/pull/298#issuecomment-292205869,"When Boost_USE_DEBUG_RUNTIME  is OFF, _boost_RELEASE_NAMES will be cleared at the line so that fail to find library when configure for Visual Studio.","@bradking
Oh... I missed to watch it.
Now, I create marge request.
https://gitlab.kitware.com/cmake/cmake/merge_requests/673",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,298,2017-04-06T07:09:20Z,2017-04-06T15:13:37Z,2017-04-06T15:23:15Z,CLOSED,False,1,1,1,https://github.com/yumetodo,fix(FindBoost): Use list APPEND instead of set,1,[],https://github.com/Kitware/CMake/pull/298,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/298#issuecomment-292206020,"When Boost_USE_DEBUG_RUNTIME  is OFF, _boost_RELEASE_NAMES will be cleared at the line so that fail to find library when configure for Visual Studio.",Closing in favor of GitLab MR 673.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,299,2017-04-06T22:21:16Z,2017-04-07T16:25:43Z,2017-04-07T16:25:54Z,CLOSED,False,1,1,1,https://github.com/vadz,FindwxWidgets: link with the new required libs under MSW,1,[],https://github.com/Kitware/CMake/pull/299,https://github.com/vadz,1,https://github.com/Kitware/CMake/pull/299,"Latest wxWidgets git master version and the upcoming 3.1.1 release requires
linking with shlwapi and version DLLs. As this does no harm when using the
previous versions, just do it unconditionally.","Latest wxWidgets git master version and the upcoming 3.1.1 release requires
linking with shlwapi and version DLLs. As this does no harm when using the
previous versions, just do it unconditionally.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,299,2017-04-06T22:21:16Z,2017-04-07T16:25:43Z,2017-04-07T16:25:54Z,CLOSED,False,1,1,1,https://github.com/vadz,FindwxWidgets: link with the new required libs under MSW,1,[],https://github.com/Kitware/CMake/pull/299,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/299#issuecomment-292525979,"Latest wxWidgets git master version and the upcoming 3.1.1 release requires
linking with shlwapi and version DLLs. As this does no harm when using the
previous versions, just do it unconditionally.","Thanks!
Please see CONTRIBUTING.rst for the preferred contribution path and submit a MR to our GitLab instead.  You can still use GitHub OAuth if desired.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,299,2017-04-06T22:21:16Z,2017-04-07T16:25:43Z,2017-04-07T16:25:54Z,CLOSED,False,1,1,1,https://github.com/vadz,FindwxWidgets: link with the new required libs under MSW,1,[],https://github.com/Kitware/CMake/pull/299,https://github.com/vadz,3,https://github.com/Kitware/CMake/pull/299#issuecomment-292583655,"Latest wxWidgets git master version and the upcoming 3.1.1 release requires
linking with shlwapi and version DLLs. As this does no harm when using the
previous versions, just do it unconditionally.","Sorry for not noticing this, replaced with https://gitlab.kitware.com/cmake/cmake/merge_requests/676",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,300,2017-04-11T12:35:45Z,2017-04-11T13:13:59Z,2017-04-11T13:14:27Z,CLOSED,False,1,0,1,https://github.com/Jasper-Bekkers,Small fix in 64-bit path for FindVulkan.cmake,1,[],https://github.com/Kitware/CMake/pull/300,https://github.com/Jasper-Bekkers,1,https://github.com/Kitware/CMake/pull/300,The 32-bit path has it (correctly) but the 64-bit version doesn't include NO_SYSTEM_ENVIRONMENT_PATH making it traverse %PATH% and finding an older version of VulkanSDK,The 32-bit path has it (correctly) but the 64-bit version doesn't include NO_SYSTEM_ENVIRONMENT_PATH making it traverse %PATH% and finding an older version of VulkanSDK,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,300,2017-04-11T12:35:45Z,2017-04-11T13:13:59Z,2017-04-11T13:14:27Z,CLOSED,False,1,0,1,https://github.com/Jasper-Bekkers,Small fix in 64-bit path for FindVulkan.cmake,1,[],https://github.com/Kitware/CMake/pull/300,https://github.com/Jasper-Bekkers,2,https://github.com/Kitware/CMake/pull/300#issuecomment-293257176,The 32-bit path has it (correctly) but the 64-bit version doesn't include NO_SYSTEM_ENVIRONMENT_PATH making it traverse %PATH% and finding an older version of VulkanSDK,Incorrect fix for the problem and wrong place to file it.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,301,2017-04-11T13:37:20Z,2017-04-11T13:48:38Z,2017-04-11T13:48:55Z,CLOSED,False,1,1,1,https://github.com/Timmmm,Add note about cmake -E copy not supporting wildcards,1,[],https://github.com/Kitware/CMake/pull/301,https://github.com/Timmmm,1,https://github.com/Kitware/CMake/pull/301,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,301,2017-04-11T13:37:20Z,2017-04-11T13:48:38Z,2017-04-11T13:48:55Z,CLOSED,False,1,1,1,https://github.com/Timmmm,Add note about cmake -E copy not supporting wildcards,1,[],https://github.com/Kitware/CMake/pull/301,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/301#issuecomment-293267296,,Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and submit this to our GitLab instance instead.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,301,2017-04-11T13:37:20Z,2017-04-11T13:48:38Z,2017-04-11T13:48:55Z,CLOSED,False,1,1,1,https://github.com/Timmmm,Add note about cmake -E copy not supporting wildcards,1,[],https://github.com/Kitware/CMake/pull/301,https://github.com/Timmmm,3,https://github.com/Kitware/CMake/pull/301#issuecomment-293268860,,Moved to gitlab: https://gitlab.kitware.com/cmake/cmake/merge_requests/687,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,302,2017-04-21T06:22:41Z,2017-04-21T12:49:07Z,2017-04-21T12:49:07Z,CLOSED,False,28189,13796,1464,https://github.com/sj0019929,Master,827,[],https://github.com/Kitware/CMake/pull/302,https://github.com/sj0019929,1,https://github.com/Kitware/CMake/pull/302,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,303,2017-04-26T01:52:15Z,2017-04-26T14:42:36Z,2017-04-26T14:42:37Z,CLOSED,False,32,0,2,https://github.com/orzuk-lmj,Orzuk modify,3,[],https://github.com/Kitware/CMake/pull/303,https://github.com/orzuk-lmj,1,https://github.com/Kitware/CMake/pull/303,"We are working on android-nsight with cmake.
This is helpful for us, and lets us to control some options.","We are working on android-nsight with cmake.
This is helpful for us, and lets us to control some options.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,303,2017-04-26T01:52:15Z,2017-04-26T14:42:36Z,2017-04-26T14:42:37Z,CLOSED,False,32,0,2,https://github.com/orzuk-lmj,Orzuk modify,3,[],https://github.com/Kitware/CMake/pull/303,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/303#issuecomment-297430674,"We are working on android-nsight with cmake.
This is helpful for us, and lets us to control some options.","Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and open a MR on our GitLab instance instead.  You can still use your GitHub account to authenticate via OAuth if desired.
Also, please add documentation for these properties in the Help/ directory.  Look at examples like ANDROID_PROCESS_MAX to follow.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,304,2017-05-01T13:42:21Z,2017-05-05T14:35:38Z,2017-05-05T14:35:38Z,CLOSED,False,79,97,33,https://github.com/tclune,Nag version fix,4,[],https://github.com/Kitware/CMake/pull/304,https://github.com/tclune,1,https://github.com/Kitware/CMake/pull/304,Very small change to enable detection of compiler version for NAG Fortran compiler.,Very small change to enable detection of compiler version for NAG Fortran compiler.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,304,2017-05-01T13:42:21Z,2017-05-05T14:35:38Z,2017-05-05T14:35:38Z,CLOSED,False,79,97,33,https://github.com/tclune,Nag version fix,4,[],https://github.com/Kitware/CMake/pull/304,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/304#issuecomment-298336778,Very small change to enable detection of compiler version for NAG Fortran compiler.,"Thanks.  It looks like you accidentally rebased some unrelated commits into this topic.
Also, please see CONTRIBUTING.rst for the preferred contribution path and submit a MR to our GitLab instance instead.  You can use GitHub OAuth to authenticate if desired.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,304,2017-05-01T13:42:21Z,2017-05-05T14:35:38Z,2017-05-05T14:35:38Z,CLOSED,False,79,97,33,https://github.com/tclune,Nag version fix,4,[],https://github.com/Kitware/CMake/pull/304,https://github.com/tclune,3,https://github.com/Kitware/CMake/pull/304#issuecomment-298340678,Very small change to enable detection of compiler version for NAG Fortran compiler.,"On May 1, 2017, at 9:52 AM, Brad King <notifications@github.com<mailto:notifications@github.com>> wrote:


Thanks. It looks like you accidentally rebased some unrelated commits into this topic.

Also, please see CONTRIBUTING.rst for the preferred contribution path and submit a MR to our GitLab instance instead. You can use GitHub OAuth to authenticate if desired.


Sorry about that - was not my intent.   I was trying to just squash the merge message, since I accidentally started from a raw clone rather than a fork.   If I’d had any clue that I’d brought something else in, I would have just started over.     Apparently rebase behaves a bit differently in this context than what I’m familiar with - I did not even actually squash anything which I thought left everything untouched.

- Tom





—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#304 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AF7_4NWH8Ec4jcanfkZuuQBzLDNaaxlxks5r1eOXgaJpZM4NNDL6>.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,304,2017-05-01T13:42:21Z,2017-05-05T14:35:38Z,2017-05-05T14:35:38Z,CLOSED,False,79,97,33,https://github.com/tclune,Nag version fix,4,[],https://github.com/Kitware/CMake/pull/304,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/304#issuecomment-299481733,Very small change to enable detection of compiler version for NAG Fortran compiler.,Closing in favor of GitLab MR 809 where I've ported the change.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,305,2017-05-05T13:07:40Z,2017-05-05T14:21:24Z,2017-05-05T14:21:24Z,CLOSED,False,1,0,1,https://github.com/kpot,Fix missing PATHS keyword in FindOpenCL.cmake,1,[],https://github.com/Kitware/CMake/pull/305,https://github.com/kpot,1,https://github.com/Kitware/CMake/pull/305,"Fixes typo: missing PATHS keyword in find_library(..) call for non-windows platforms.
Without it properly installed AMD APP SDK (OpenCL) cannot be detected.
Tested on Ubuntu 16.04","Fixes typo: missing PATHS keyword in find_library(..) call for non-windows platforms.
Without it properly installed AMD APP SDK (OpenCL) cannot be detected.
Tested on Ubuntu 16.04",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,305,2017-05-05T13:07:40Z,2017-05-05T14:21:24Z,2017-05-05T14:21:24Z,CLOSED,False,1,0,1,https://github.com/kpot,Fix missing PATHS keyword in FindOpenCL.cmake,1,[],https://github.com/Kitware/CMake/pull/305,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/305#issuecomment-299461916,"Fixes typo: missing PATHS keyword in find_library(..) call for non-windows platforms.
Without it properly installed AMD APP SDK (OpenCL) cannot be detected.
Tested on Ubuntu 16.04",Thanks.  This was broken in the code added by MR 792.  Please see CONTRIBUTING.rst and submit a merge request to our GitLab instance instead.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,305,2017-05-05T13:07:40Z,2017-05-05T14:21:24Z,2017-05-05T14:21:24Z,CLOSED,False,1,0,1,https://github.com/kpot,Fix missing PATHS keyword in FindOpenCL.cmake,1,[],https://github.com/Kitware/CMake/pull/305,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/305#issuecomment-299477810,"Fixes typo: missing PATHS keyword in find_library(..) call for non-windows platforms.
Without it properly installed AMD APP SDK (OpenCL) cannot be detected.
Tested on Ubuntu 16.04",Closing in favor of GitLab MR 807.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,306,2017-05-13T21:00:42Z,2017-05-16T03:01:09Z,2017-05-16T03:01:09Z,CLOSED,False,2,0,1,https://github.com/avacar,Added missing path to Windows-Gnu.cmake platform file,1,[],https://github.com/Kitware/CMake/pull/306,https://github.com/avacar,1,https://github.com/Kitware/CMake/pull/306,"Change is necessary to bring back cmake_add_fortran_subdirectory functionality to Visual Studio 2017 (and possibly 2015, which I never got to work historically).  It definitely works now with this path change in the platform file.","Change is necessary to bring back cmake_add_fortran_subdirectory functionality to Visual Studio 2017 (and possibly 2015, which I never got to work historically).  It definitely works now with this path change in the platform file.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,306,2017-05-13T21:00:42Z,2017-05-16T03:01:09Z,2017-05-16T03:01:09Z,CLOSED,False,2,0,1,https://github.com/avacar,Added missing path to Windows-Gnu.cmake platform file,1,[],https://github.com/Kitware/CMake/pull/306,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/306#issuecomment-301470043,"Change is necessary to bring back cmake_add_fortran_subdirectory functionality to Visual Studio 2017 (and possibly 2015, which I never got to work historically).  It definitely works now with this path change in the platform file.",Thanks.  Please see CONTRIBUTING.rst and submit a merge request to our GitLab instance instead.  GitHub OAuth can be used to authenticate if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,306,2017-05-13T21:00:42Z,2017-05-16T03:01:09Z,2017-05-16T03:01:09Z,CLOSED,False,2,0,1,https://github.com/avacar,Added missing path to Windows-Gnu.cmake platform file,1,[],https://github.com/Kitware/CMake/pull/306,https://github.com/avacar,3,https://github.com/Kitware/CMake/pull/306#issuecomment-301662111,"Change is necessary to bring back cmake_add_fortran_subdirectory functionality to Visual Studio 2017 (and possibly 2015, which I never got to work historically).  It definitely works now with this path change in the platform file.",Whoops. Misread the contribution guide.  I've resubmitted this as a pull request via your Gitlab.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,307,2017-05-14T22:08:15Z,2017-05-15T21:09:33Z,2017-05-15T21:09:33Z,CLOSED,False,102,174,7,https://github.com/gruenich,Shorten output for failed package in config mode,3,[],https://github.com/Kitware/CMake/pull/307,https://github.com/gruenich,1,https://github.com/Kitware/CMake/pull/307,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,307,2017-05-14T22:08:15Z,2017-05-15T21:09:33Z,2017-05-15T21:09:33Z,CLOSED,False,102,174,7,https://github.com/gruenich,Shorten output for failed package in config mode,3,[],https://github.com/Kitware/CMake/pull/307,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/307#issuecomment-301470021,,Thanks.  Please see CONTRIBUTING.rst and submit a merge request to our GitLab instance instead.  GitHub OAuth can be used to authenticate if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,307,2017-05-14T22:08:15Z,2017-05-15T21:09:33Z,2017-05-15T21:09:33Z,CLOSED,False,102,174,7,https://github.com/gruenich,Shorten output for failed package in config mode,3,[],https://github.com/Kitware/CMake/pull/307,https://github.com/gruenich,3,https://github.com/Kitware/CMake/pull/307#issuecomment-301605629,,"Sorry, I forgot about your GitLab.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,308,2017-06-12T00:29:36Z,2017-06-12T20:19:09Z,2017-06-12T20:19:09Z,CLOSED,False,6,3,1,https://github.com/ezralanglois,Add -dllimport if has not already been specified,1,[],https://github.com/Kitware/CMake/pull/308,https://github.com/ezralanglois,1,https://github.com/Kitware/CMake/pull/308,"SWIG fails with a redefined macro error when -dllimport is specified more than once.
One case where you want to specify your own -dllimport is when using SWIG with netstandard2.0. .NET Core does not search for shared libraries like Mono or .NET. So you need to add the shared library prefix and suffix.","SWIG fails with a redefined macro error when -dllimport is specified more than once.
One case where you want to specify your own -dllimport is when using SWIG with netstandard2.0. .NET Core does not search for shared libraries like Mono or .NET. So you need to add the shared library prefix and suffix.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,308,2017-06-12T00:29:36Z,2017-06-12T20:19:09Z,2017-06-12T20:19:09Z,CLOSED,False,6,3,1,https://github.com/ezralanglois,Add -dllimport if has not already been specified,1,[],https://github.com/Kitware/CMake/pull/308,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/308#issuecomment-307794795,"SWIG fails with a redefined macro error when -dllimport is specified more than once.
One case where you want to specify your own -dllimport is when using SWIG with netstandard2.0. .NET Core does not search for shared libraries like Mono or .NET. So you need to add the shared library prefix and suffix.",Thanks!  Please see CONTRIBUTING.rst for the preferred contribution path and open a mere request on our GitLab instance instead.  You can use GitHub OAuth to authenticate if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,308,2017-06-12T00:29:36Z,2017-06-12T20:19:09Z,2017-06-12T20:19:09Z,CLOSED,False,6,3,1,https://github.com/ezralanglois,Add -dllimport if has not already been specified,1,[],https://github.com/Kitware/CMake/pull/308,https://github.com/ezralanglois,3,https://github.com/Kitware/CMake/pull/308#issuecomment-307912064,"SWIG fails with a redefined macro error when -dllimport is specified more than once.
One case where you want to specify your own -dllimport is when using SWIG with netstandard2.0. .NET Core does not search for shared libraries like Mono or .NET. So you need to add the shared library prefix and suffix.","My apologies, I did not read it carefully enough. I will move this over to gitlab.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,1,https://github.com/Kitware/CMake/pull/309,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,2,https://github.com/Kitware/CMake/pull/309#issuecomment-312452548,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","I do not know if style matches because style checking script Utilities/Scripts/clang-format.bash quits with ""Unable to locate ''"". I'm new to this code base and I tested only on Xcode so I do not know if I broke anything. Also I do not know if I have to add some tests for this or not?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,3,https://github.com/Kitware/CMake/pull/309#issuecomment-312457300,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",BTW why are so many tests failing when run from Xcode?,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/309#issuecomment-313108117,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","Thanks for working on this.  Please see CONTRIBUTING.rst for the preferred contribution path and open a merge request on our GitLab instance.  One can use GitHub OAuth to authenticate if preferred.

Utilities/Scripts/clang-format.bash quits with ""Unable to locate ''""`

Strange.  Please run bash -x Utilities/Scripts/clang-format.bash to get verbose output from the shell about what it is doing.

why are so many tests failing when run from Xcode?

We have nightly testing with Xcode that passes all tests.  Use ctest -C Debug -R RegexMatchingATestName -V to run a single test with verbose output, where Debug can be whatever configuration of CMake you built.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,5,https://github.com/Kitware/CMake/pull/309#issuecomment-313153760,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",Crap. Now I know why clang-format.bash fails. I do not have clang-format on my machine. Will have to build clang from source... Error message should be improved.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,6,https://github.com/Kitware/CMake/pull/309#issuecomment-313162421,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",I'll fix the error message in clang-format.bash.  You don't necessarily have to build it from source.  Over on our GitLab instance we have a bot that can re-format the topic automatically.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,7,https://github.com/Kitware/CMake/pull/309#issuecomment-313196754,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","As for tests when I run ctest -C Debug -R ^LinkFlags-lib$  -V I get:
test 88
    Start 88: LinkFlags-lib

88: Test command: /Users/someone/OpenSource/CMake/bin/Debug/cmake ""--build"" ""/Users/someone/OpenSource/CMake/Tests/LinkFlags"" ""--target"" ""LinkFlags_lib"" ""--config"" ""Debug""
88: Test timeout computed to be: 1500
88: Error: could not load cache
1/1 Test #88: LinkFlags-lib ....................***Failed  Required regular expression not found.Regex=[BADFLAG
]  0.02 sec

0% tests passed, 1 tests failed out of 1

Total Test time (real) =   0.11 sec

The following tests FAILED:
	 88 - LinkFlags-lib (Failed)
Errors while running CTest

Does it mean that Xcode ignores BADFLAG flag? BTW I'm on Xcode 8.3.3.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,8,https://github.com/Kitware/CMake/pull/309#issuecomment-313389826,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",The LinkFlags tests have a dependency on the LinkFlags-prepare test.  The -R option is meant to help one incrementally re-run specific tests and so dependencies of the matching tests are not automatically included.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,9,https://github.com/Kitware/CMake/pull/309#issuecomment-313495197,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","Looks like I just had to run ALL_BUILD before running RUN_TESTS to make tests pass. Now only two tests fail (+ RunCMake.IfacePaths_INCLUDE_DIRECTORIES timed out for some reason when not run separately):
BundleTest - ""CMake Error at CMakeLists.txt:79 (message): 172: Could not find tcl framework, found /usr/lib/libtcl.dylib"" - Another dependency that I'm not aware of?
CMake.CheckSourceTree - this checks results from previous tests? That's why it failed?
BTW why is java installation prompt (I do not have Java installed) displaying when I run some tests e.g. FindModulesExecuteAll?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,10,https://github.com/Kitware/CMake/pull/309#issuecomment-313499339,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","CheckSourceTree fails if there are any local edits to the source tree.  The purpose is to catch tests that leave behind something in the source tree.


FindModulesExecuteAll tries all find modules, including FindJava, and that tries running the java tool.


BundleTest: I'm not familiar enough with it to answer.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,11,https://github.com/Kitware/CMake/pull/309#issuecomment-313588268,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","CheckSourceTree reports:
""test fails: local source tree non-additions: use git add before committing,
436:   or remove the files from the source tree""
I do not have any local changes but a bunch of untracked files generated by CMake (and tests too).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,12,https://github.com/Kitware/CMake/pull/309#issuecomment-313658852,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","Ah, the CheckSourceTree test makes sense only for an out-of-source build.  It should be conditioned.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,13,https://github.com/Kitware/CMake/pull/309#issuecomment-313721780,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","""Conditioned""? You mean that you should have added prebuild step that checks project location?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/bradking,14,https://github.com/Kitware/CMake/pull/309#issuecomment-313738633,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.","I mean that the CheckSourceTree test should not be added for an in-source build, but currently there is no such condition.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,309,2017-07-01T19:54:24Z,2017-07-05T16:00:48Z,2017-07-09T12:10:15Z,CLOSED,False,7,4,2,https://github.com/ufoxp,Source group regex tweaks.,1,[],https://github.com/Kitware/CMake/pull/309,https://github.com/ufoxp,15,https://github.com/Kitware/CMake/pull/309#issuecomment-313916184,"""Resources"" source group regex now in addition to plists
now matches pdf, png, jpeg, jpg, storyboards and xcassets.
This cleans up more complex Xcode projects a lot.
""Source Files"" and ""Resources"" source group regexes have been
extracted into macros.",...or in-source builds should not be supported and that fact documented somewhere?,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,310,2017-07-23T12:29:56Z,2017-08-02T20:24:05Z,2017-08-02T20:24:05Z,CLOSED,False,1,1,1,https://github.com/SebNag,Corrected little error in manual,1,[],https://github.com/Kitware/CMake/pull/310,https://github.com/SebNag,1,https://github.com/Kitware/CMake/pull/310,serialization is a PRIVATE dependency of archiveExtras and not of archive as stated/written in the current version of the buildsystem cmake manual,serialization is a PRIVATE dependency of archiveExtras and not of archive as stated/written in the current version of the buildsystem cmake manual,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,310,2017-07-23T12:29:56Z,2017-08-02T20:24:05Z,2017-08-02T20:24:05Z,CLOSED,False,1,1,1,https://github.com/SebNag,Corrected little error in manual,1,[],https://github.com/Kitware/CMake/pull/310,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/310#issuecomment-319787486,serialization is a PRIVATE dependency of archiveExtras and not of archive as stated/written in the current version of the buildsystem cmake manual,Thanks.  Ported to GitLab MR 1097.  Please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,311,2017-07-25T15:46:37Z,2017-08-02T20:17:44Z,2017-08-02T20:17:44Z,CLOSED,False,3,1,1,https://github.com/lrineau,"Fix assertion error of std::string, in testValue",1,[],https://github.com/Kitware/CMake/pull/311,https://github.com/lrineau,1,https://github.com/Kitware/CMake/pull/311,"std::string cannot be constructed from nullptr. With libstdc++, that throws an assertion.","std::string cannot be constructed from nullptr. With libstdc++, that throws an assertion.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,311,2017-07-25T15:46:37Z,2017-08-02T20:17:44Z,2017-08-02T20:17:44Z,CLOSED,False,3,1,1,https://github.com/lrineau,"Fix assertion error of std::string, in testValue",1,[],https://github.com/Kitware/CMake/pull/311,https://github.com/lrineau,2,https://github.com/Kitware/CMake/pull/311#issuecomment-317781484,"std::string cannot be constructed from nullptr. With libstdc++, that throws an assertion.",This PR should fix the segfault reported at microsoft/vscode-cmake-tools#210.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,311,2017-07-25T15:46:37Z,2017-08-02T20:17:44Z,2017-08-02T20:17:44Z,CLOSED,False,3,1,1,https://github.com/lrineau,"Fix assertion error of std::string, in testValue",1,[],https://github.com/Kitware/CMake/pull/311,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/311#issuecomment-319785810,"std::string cannot be constructed from nullptr. With libstdc++, that throws an assertion.",Thanks.  Ported to GitLab PR 1096.  Please see CONTRIBUTING.rst for the preferred contribution path.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,312,2017-08-05T00:34:50Z,2017-08-10T13:24:11Z,2017-08-10T13:24:11Z,CLOSED,False,10,2,1,https://github.com/borisfom,CUDA9 added,1,[],https://github.com/Kitware/CMake/pull/312,https://github.com/borisfom,1,https://github.com/Kitware/CMake/pull/312,"Added auto detection for CUDA9 arch flags.
CUDA9 is now in RC.","Added auto detection for CUDA9 arch flags.
CUDA9 is now in RC.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,312,2017-08-05T00:34:50Z,2017-08-10T13:24:11Z,2017-08-10T13:24:11Z,CLOSED,False,10,2,1,https://github.com/borisfom,CUDA9 added,1,[],https://github.com/Kitware/CMake/pull/312,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/312#issuecomment-320657483,"Added auto detection for CUDA9 arch flags.
CUDA9 is now in RC.",Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and open a merge request on our GitLab instance instead.  You can use GitHub OAuth to authenticate if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,312,2017-08-05T00:34:50Z,2017-08-10T13:24:11Z,2017-08-10T13:24:11Z,CLOSED,False,10,2,1,https://github.com/borisfom,CUDA9 added,1,[],https://github.com/Kitware/CMake/pull/312,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/312#issuecomment-321549667,"Added auto detection for CUDA9 arch flags.
CUDA9 is now in RC.",Closing in favor of GitLab MR 1119.  Thanks!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,313,2017-08-10T12:23:46Z,2017-08-10T13:33:40Z,2017-08-10T15:23:08Z,CLOSED,False,1,1,1,https://github.com/scott-vsi,Update select_compute_arch.cmake,1,[],https://github.com/Kitware/CMake/pull/313,https://github.com/scott-vsi,1,https://github.com/Kitware/CMake/pull/313,The compute capability should be 6.1 per the pascal compatibility guide (http://docs.nvidia.com/cuda/pascal-compatibility-guide/#building-pascal-compatible-apps-using-cuda-8-0),The compute capability should be 6.1 per the pascal compatibility guide (http://docs.nvidia.com/cuda/pascal-compatibility-guide/#building-pascal-compatible-apps-using-cuda-8-0),True,{}
Kitware/CMake,https://github.com/Kitware/CMake,313,2017-08-10T12:23:46Z,2017-08-10T13:33:40Z,2017-08-10T15:23:08Z,CLOSED,False,1,1,1,https://github.com/scott-vsi,Update select_compute_arch.cmake,1,[],https://github.com/Kitware/CMake/pull/313,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/313#issuecomment-321548768,The compute capability should be 6.1 per the pascal compatibility guide (http://docs.nvidia.com/cuda/pascal-compatibility-guide/#building-pascal-compatible-apps-using-cuda-8-0),Thanks.  Please see CONTRIBUTING.rst for the preferred contribution path and submit a merge request to our GitLab instance instead.  You can use GitHub OAuth to sign in if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,313,2017-08-10T12:23:46Z,2017-08-10T13:33:40Z,2017-08-10T15:23:08Z,CLOSED,False,1,1,1,https://github.com/scott-vsi,Update select_compute_arch.cmake,1,[],https://github.com/Kitware/CMake/pull/313,https://github.com/scott-vsi,3,https://github.com/Kitware/CMake/pull/313#issuecomment-321553685,The compute capability should be 6.1 per the pascal compatibility guide (http://docs.nvidia.com/cuda/pascal-compatibility-guide/#building-pascal-compatible-apps-using-cuda-8-0),"What about creating a dummy pull request, How to Contribute, that points to CONTRIBUTING.rst. That might cut down on the number of GitHub pull requests you get.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,313,2017-08-10T12:23:46Z,2017-08-10T13:33:40Z,2017-08-10T15:23:08Z,CLOSED,False,1,1,1,https://github.com/scott-vsi,Update select_compute_arch.cmake,1,[],https://github.com/Kitware/CMake/pull/313,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/313#issuecomment-321584626,The compute capability should be 6.1 per the pascal compatibility guide (http://docs.nvidia.com/cuda/pascal-compatibility-guide/#building-pascal-compatible-apps-using-cuda-8-0),@scott-vsi thanks for the suggestion.  See GitLab MR 1125 for addition of a GitHub PR template.  This will cause the text to show up in the PR description box that the user is about to edit.  That will make it more visible in the GitHub workflow.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,314,2017-09-19T13:52:34Z,2017-09-25T15:47:44Z,2017-09-25T19:01:20Z,CLOSED,False,1,0,1,https://github.com/wmamrak,Help update for MSVC_VERSION equal to 1911,1,[],https://github.com/Kitware/CMake/pull/314,https://github.com/wmamrak,1,https://github.com/Kitware/CMake/pull/314,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,314,2017-09-19T13:52:34Z,2017-09-25T15:47:44Z,2017-09-25T19:01:20Z,CLOSED,False,1,0,1,https://github.com/wmamrak,Help update for MSVC_VERSION equal to 1911,1,[],https://github.com/Kitware/CMake/pull/314,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/314#issuecomment-330571869,,Thanks.  Please see CONTRIBUTING.rst and submit a merge request to our GitLab instance instead.  You can use GitHub OAuth to sign in if preferred.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,314,2017-09-19T13:52:34Z,2017-09-25T15:47:44Z,2017-09-25T19:01:20Z,CLOSED,False,1,0,1,https://github.com/wmamrak,Help update for MSVC_VERSION equal to 1911,1,[],https://github.com/Kitware/CMake/pull/314,https://github.com/bradking,3,https://github.com/Kitware/CMake/pull/314#issuecomment-331924263,,Closing in favor of GitLab MR 1310.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,314,2017-09-19T13:52:34Z,2017-09-25T15:47:44Z,2017-09-25T19:01:20Z,CLOSED,False,1,0,1,https://github.com/wmamrak,Help update for MSVC_VERSION equal to 1911,1,[],https://github.com/Kitware/CMake/pull/314,https://github.com/wmamrak,4,https://github.com/Kitware/CMake/pull/314#issuecomment-331979982,,Thanks for taking the initiative!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,315,2018-01-15T20:31:31Z,2018-01-16T14:48:06Z,2018-01-16T14:48:06Z,CLOSED,False,2,0,1,https://github.com/looooo,accept 8.6 libraries with suffix t,1,[],https://github.com/Kitware/CMake/pull/315,https://github.com/looooo,1,https://github.com/Kitware/CMake/pull/315,"This is related to: conda-forge/tk-feedstock#12
Maybe solving it this way is accepted.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","This is related to: conda-forge/tk-feedstock#12
Maybe solving it this way is accepted.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,315,2018-01-15T20:31:31Z,2018-01-16T14:48:06Z,2018-01-16T14:48:06Z,CLOSED,False,2,0,1,https://github.com/looooo,accept 8.6 libraries with suffix t,1,[],https://github.com/Kitware/CMake/pull/315,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/315#issuecomment-357983030,"This is related to: conda-forge/tk-feedstock#12
Maybe solving it this way is accepted.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",Thanks.  Closing in favor of GitLab MR 1663.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,316,2018-01-20T18:52:29Z,2018-01-22T14:13:04Z,2018-01-22T14:13:04Z,CLOSED,False,26,0,1,https://github.com/cpsw,Suggesting changes for source.rst,1,[],https://github.com/Kitware/CMake/pull/316,https://github.com/cpsw,1,https://github.com/Kitware/CMake/pull/316,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion.
At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion.
At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,316,2018-01-20T18:52:29Z,2018-01-22T14:13:04Z,2018-01-22T14:13:04Z,CLOSED,False,26,0,1,https://github.com/cpsw,Suggesting changes for source.rst,1,[],https://github.com/Kitware/CMake/pull/316,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/316#issuecomment-359434469,"I would like to suggest to include some additional information on Code Style. This is a new direction towards avoiding certain patterns of code that might increase the changes of adding runtime errors, in my opinion.
At the same time, I would invite others to share other patterns like these ones with goal of creating a set of guidelines that we could share among open-source projects.","Thanks.  Please see CONTRIBUTING.rst for contribution instructions.  I'll close this in favor of a possible MR over in our GitLab instance.
FWIW, most of the proposed advice is already enforced by lint builds as part of our review and testing infrastructure.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,317,2018-01-21T08:35:25Z,2018-01-22T12:12:56Z,2018-01-22T12:12:56Z,CLOSED,False,6,2,1,https://github.com/pps83,cmSystemTools: use GetRealPath in FindCMakeResources on Windows to resolve symbolic links,1,[],https://github.com/Kitware/CMake/pull/317,https://github.com/pps83,1,https://github.com/Kitware/CMake/pull/317,"If cmake.exe was executed through a symbolic link then GetModuleFileNameW will return location of that symbolic link instead of real path of cmake.exe. This results in the following error output: ""CMake Error: Could not find CMAKE_ROOT !!! CMake has most likely not been installed correctly.""
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","If cmake.exe was executed through a symbolic link then GetModuleFileNameW will return location of that symbolic link instead of real path of cmake.exe. This results in the following error output: ""CMake Error: Could not find CMAKE_ROOT !!! CMake has most likely not been installed correctly.""
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,317,2018-01-21T08:35:25Z,2018-01-22T12:12:56Z,2018-01-22T12:12:56Z,CLOSED,False,6,2,1,https://github.com/pps83,cmSystemTools: use GetRealPath in FindCMakeResources on Windows to resolve symbolic links,1,[],https://github.com/Kitware/CMake/pull/317,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/317#issuecomment-359406352,"If cmake.exe was executed through a symbolic link then GetModuleFileNameW will return location of that symbolic link instead of real path of cmake.exe. This results in the following error output: ""CMake Error: Could not find CMAKE_ROOT !!! CMake has most likely not been installed correctly.""
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",Thanks.  Closing in favor of GitLab MR 1680.  I'll take a look over there when I get a chance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,318,2018-01-27T19:18:20Z,2018-01-29T12:47:07Z,2018-01-29T12:47:07Z,CLOSED,False,18,2,1,https://github.com/ClausKlein,Use as dependency file <objectDir/SourceName>.d if needed.,1,[],https://github.com/Kitware/CMake/pull/318,https://github.com/ClausKlein,1,https://github.com/Kitware/CMake/pull/318,"Use as dependency file name simply <objectDir/SourceName>.d if needed
Motivation
gcov, lcov
I have a particular problem with the cmake generated output file naming
conventions (like myfile.cpp.o, myfile.cpp.gcno, ....).
These naming conventions creating trouble for me to run gcov *.cpp properly
with my -o /objdir option (I had to copy them in the same directory without
the .ccp extensions every time!).
see https://cmake.org/pipermail/cmake/2012-August/051628.html
Ancien cross compiler
The C compiler test fails because CMake insists on createing
testCCompiler.c.r30  and there doesn't seem to be way to tell it to  not
include the source file name extension (here: .c) into the object  file name.
However, the linker takes the first dot as extension (I know that this  is
horribly broken) and only takes files that have "".r30"" as  extension. "".c.r30""
is an illegal extension.
see https://cmake.org/pipermail/cmake/2008-April/021057.html
More proprietary compilers
Ninja generator sets the name to objectpath.d::
cmGlobalNinjaGenerator::EncodeDepfileSpace(objectFileName + "".d"");

WindRiver sets the dependency file name to objectDir/SourceName.d, so the "".obj""
in ""DEP_FILE = path/BaseName.c.obj.d"" must be renamed!
see https://cmake.org/pipermail/cmake/2014-October/058963.html
GHS compiler too
Wenn using the Ninja generator to build with GHS compiler for Integrity targets,
we have the same problem. We can NOT control the name of the generated
dependency "".d"" file while compile step!
""DEP_FILE = path/BaseName.d"" has to be used!
see https://cmake.org/pipermail/cmake-developers/2018-January/030532.html
Solution
If we really want to avoid the extension we can set the undocumented internal
implementation detail variable::
set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)
some time after the project() command call that enables the C and CXX
languages.
Patch needed
Change the Nina generator::
file: Source/cmNinjaTargetGenerator.cxx
function: void cmNinjaTargetGenerator::WriteObjectBuildStatement(...)
// ...
if (!this->NeedDepTypeMSVC(language)) {
bool hasExtension(false);
std::string dependFileName = this->GetLocalGenerator()->
GetObjectFileNameWithoutTarget(*source, objectDir, &hasExtension);
if(hasExtension) {
// use original code
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
objectFileName + "".d"", cmOutputConverter::SHELL);
} else {
// Replace the original source file extension with the
// depend file extension.
std::string::size_type dot_pos = objectFileName.rfind('.');
if (dot_pos != std::string::npos) {
dependFileName = objectFileName.substr(0, dot_pos) + "".d"";
}
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
dependFileName, cmOutputConverter::SHELL);
}
}
Caveat
As the variables are internal details this will not be guaranteed to work in
the future!
Question
Is it possible to make the internal CMAKE__OUTPUT_EXTENSION_REPLACE
option public and support it in future CMake releases including my patch?","Use as dependency file name simply <objectDir/SourceName>.d if needed
Motivation
gcov, lcov
I have a particular problem with the cmake generated output file naming
conventions (like myfile.cpp.o, myfile.cpp.gcno, ....).
These naming conventions creating trouble for me to run gcov *.cpp properly
with my -o /objdir option (I had to copy them in the same directory without
the .ccp extensions every time!).
see https://cmake.org/pipermail/cmake/2012-August/051628.html
Ancien cross compiler
The C compiler test fails because CMake insists on createing
testCCompiler.c.r30  and there doesn't seem to be way to tell it to  not
include the source file name extension (here: .c) into the object  file name.
However, the linker takes the first dot as extension (I know that this  is
horribly broken) and only takes files that have "".r30"" as  extension. "".c.r30""
is an illegal extension.
see https://cmake.org/pipermail/cmake/2008-April/021057.html
More proprietary compilers
Ninja generator sets the name to objectpath.d::
cmGlobalNinjaGenerator::EncodeDepfileSpace(objectFileName + "".d"");

WindRiver sets the dependency file name to objectDir/SourceName.d, so the "".obj""
in ""DEP_FILE = path/BaseName.c.obj.d"" must be renamed!
see https://cmake.org/pipermail/cmake/2014-October/058963.html
GHS compiler too
Wenn using the Ninja generator to build with GHS compiler for Integrity targets,
we have the same problem. We can NOT control the name of the generated
dependency "".d"" file while compile step!
""DEP_FILE = path/BaseName.d"" has to be used!
see https://cmake.org/pipermail/cmake-developers/2018-January/030532.html
Solution
If we really want to avoid the extension we can set the undocumented internal
implementation detail variable::
set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)
some time after the project() command call that enables the C and CXX
languages.
Patch needed
Change the Nina generator::
file: Source/cmNinjaTargetGenerator.cxx
function: void cmNinjaTargetGenerator::WriteObjectBuildStatement(...)
// ...
if (!this->NeedDepTypeMSVC(language)) {
bool hasExtension(false);
std::string dependFileName = this->GetLocalGenerator()->
GetObjectFileNameWithoutTarget(*source, objectDir, &hasExtension);
if(hasExtension) {
// use original code
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
objectFileName + "".d"", cmOutputConverter::SHELL);
} else {
// Replace the original source file extension with the
// depend file extension.
std::string::size_type dot_pos = objectFileName.rfind('.');
if (dot_pos != std::string::npos) {
dependFileName = objectFileName.substr(0, dot_pos) + "".d"";
}
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
dependFileName, cmOutputConverter::SHELL);
}
}
Caveat
As the variables are internal details this will not be guaranteed to work in
the future!
Question
Is it possible to make the internal CMAKE__OUTPUT_EXTENSION_REPLACE
option public and support it in future CMake releases including my patch?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,318,2018-01-27T19:18:20Z,2018-01-29T12:47:07Z,2018-01-29T12:47:07Z,CLOSED,False,18,2,1,https://github.com/ClausKlein,Use as dependency file <objectDir/SourceName>.d if needed.,1,[],https://github.com/Kitware/CMake/pull/318,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/318#issuecomment-361234840,"Use as dependency file name simply <objectDir/SourceName>.d if needed
Motivation
gcov, lcov
I have a particular problem with the cmake generated output file naming
conventions (like myfile.cpp.o, myfile.cpp.gcno, ....).
These naming conventions creating trouble for me to run gcov *.cpp properly
with my -o /objdir option (I had to copy them in the same directory without
the .ccp extensions every time!).
see https://cmake.org/pipermail/cmake/2012-August/051628.html
Ancien cross compiler
The C compiler test fails because CMake insists on createing
testCCompiler.c.r30  and there doesn't seem to be way to tell it to  not
include the source file name extension (here: .c) into the object  file name.
However, the linker takes the first dot as extension (I know that this  is
horribly broken) and only takes files that have "".r30"" as  extension. "".c.r30""
is an illegal extension.
see https://cmake.org/pipermail/cmake/2008-April/021057.html
More proprietary compilers
Ninja generator sets the name to objectpath.d::
cmGlobalNinjaGenerator::EncodeDepfileSpace(objectFileName + "".d"");

WindRiver sets the dependency file name to objectDir/SourceName.d, so the "".obj""
in ""DEP_FILE = path/BaseName.c.obj.d"" must be renamed!
see https://cmake.org/pipermail/cmake/2014-October/058963.html
GHS compiler too
Wenn using the Ninja generator to build with GHS compiler for Integrity targets,
we have the same problem. We can NOT control the name of the generated
dependency "".d"" file while compile step!
""DEP_FILE = path/BaseName.d"" has to be used!
see https://cmake.org/pipermail/cmake-developers/2018-January/030532.html
Solution
If we really want to avoid the extension we can set the undocumented internal
implementation detail variable::
set(CMAKE_C_OUTPUT_EXTENSION_REPLACE 1)
set(CMAKE_CXX_OUTPUT_EXTENSION_REPLACE 1)
some time after the project() command call that enables the C and CXX
languages.
Patch needed
Change the Nina generator::
file: Source/cmNinjaTargetGenerator.cxx
function: void cmNinjaTargetGenerator::WriteObjectBuildStatement(...)
// ...
if (!this->NeedDepTypeMSVC(language)) {
bool hasExtension(false);
std::string dependFileName = this->GetLocalGenerator()->
GetObjectFileNameWithoutTarget(*source, objectDir, &hasExtension);
if(hasExtension) {
// use original code
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
objectFileName + "".d"", cmOutputConverter::SHELL);
} else {
// Replace the original source file extension with the
// depend file extension.
std::string::size_type dot_pos = objectFileName.rfind('.');
if (dot_pos != std::string::npos) {
dependFileName = objectFileName.substr(0, dot_pos) + "".d"";
}
vars[""DEP_FILE""] = this->GetLocalGenerator()->ConvertToOutputFormat(
dependFileName, cmOutputConverter::SHELL);
}
}
Caveat
As the variables are internal details this will not be guaranteed to work in
the future!
Question
Is it possible to make the internal CMAKE__OUTPUT_EXTENSION_REPLACE
option public and support it in future CMake releases including my patch?",Thanks.  Closing in favor of GitLab MR 1712.  We'll take a look at it over there.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,319,2018-02-01T23:04:08Z,2018-02-02T12:03:52Z,2018-02-02T12:03:52Z,CLOSED,False,7,1,1,https://github.com/mlamarre,Fix FindBLAS for Intel MKL 2017 - lib folder doesn't contain either l…,1,[],https://github.com/Kitware/CMake/pull/319,https://github.com/mlamarre,1,https://github.com/Kitware/CMake/pull/319,"…ibguide40 nor openmp - must check for tbb version
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","…ibguide40 nor openmp - must check for tbb version
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,319,2018-02-01T23:04:08Z,2018-02-02T12:03:52Z,2018-02-02T12:03:52Z,CLOSED,False,7,1,1,https://github.com/mlamarre,Fix FindBLAS for Intel MKL 2017 - lib folder doesn't contain either l…,1,[],https://github.com/Kitware/CMake/pull/319,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/319#issuecomment-362568915,"…ibguide40 nor openmp - must check for tbb version
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",Thanks.  Closing in favor of GitLab MR 1742.  We'll look at it over there.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,320,2018-04-10T13:41:04Z,2018-04-11T14:44:39Z,2018-04-11T14:44:39Z,CLOSED,False,1,0,1,https://github.com/aviogit,Fix for bug at FindwxWidgets.cmake:928 file failed to open for reading (No such file or directory),1,[],https://github.com/Kitware/CMake/pull/320,https://github.com/aviogit,1,https://github.com/Kitware/CMake/pull/320,"ERROR without debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- Found wxWidgets: -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0 (found version "".."")

ERROR with DBG_MSG and DBG_MSG_V debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FIND_COMPONENTS :
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_SELECT_OPTIONS=--debug=no
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-I/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;-I/usr/include/wx-3.0;-D_FILE_OFFSET_BITS=64;-DWXUSINGDLL;-D__WXGTK__;-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_DEFINITIONS=_FILE_OFFSET_BITS=64;WXUSINGDLL;WXGTK
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_INCLUDE_DIRS=/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARIES=-L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARY_DIRS=/usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): _filename:  Blob
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_VERSION_STRING:    ..
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FOUND           : TRUE
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_INCLUDE_DIRS    : /usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARY_DIRS    : /usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARIES       : -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_CXX_FLAGS       : -pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_USE_FILE        : /usr/share/cmake-3.5/Modules/UsewxWidgets.cmake
Note that source directory for the cmvision ROS package is: src/blob-tracking/cmvision (maybe it's a regexp problem where 'blob-tracking' is truncated and capitalized?)

Steps to reproduce:

Install ROS Kinetic on Ubuntu 16.04: http://wiki.ros.org/kinetic/Installation/Ubuntu
Create a new workspace: http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment#Create_a_ROS_Workspace
mkdir & cd into src/blob-tracking and clone cmvision: https://github.com/OSUrobotics/cmvision
build with catkin_make","ERROR without debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- Found wxWidgets: -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0 (found version "".."")

ERROR with DBG_MSG and DBG_MSG_V debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FIND_COMPONENTS :
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_SELECT_OPTIONS=--debug=no
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-I/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;-I/usr/include/wx-3.0;-D_FILE_OFFSET_BITS=64;-DWXUSINGDLL;-D__WXGTK__;-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_DEFINITIONS=_FILE_OFFSET_BITS=64;WXUSINGDLL;WXGTK
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_INCLUDE_DIRS=/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARIES=-L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARY_DIRS=/usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): _filename:  Blob
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_VERSION_STRING:    ..
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FOUND           : TRUE
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_INCLUDE_DIRS    : /usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARY_DIRS    : /usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARIES       : -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_CXX_FLAGS       : -pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_USE_FILE        : /usr/share/cmake-3.5/Modules/UsewxWidgets.cmake
Note that source directory for the cmvision ROS package is: src/blob-tracking/cmvision (maybe it's a regexp problem where 'blob-tracking' is truncated and capitalized?)

Steps to reproduce:

Install ROS Kinetic on Ubuntu 16.04: http://wiki.ros.org/kinetic/Installation/Ubuntu
Create a new workspace: http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment#Create_a_ROS_Workspace
mkdir & cd into src/blob-tracking and clone cmvision: https://github.com/OSUrobotics/cmvision
build with catkin_make",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,320,2018-04-10T13:41:04Z,2018-04-11T14:44:39Z,2018-04-11T14:44:39Z,CLOSED,False,1,0,1,https://github.com/aviogit,Fix for bug at FindwxWidgets.cmake:928 file failed to open for reading (No such file or directory),1,[],https://github.com/Kitware/CMake/pull/320,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/320#issuecomment-380478415,"ERROR without debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- Found wxWidgets: -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0 (found version "".."")

ERROR with DBG_MSG and DBG_MSG_V debugging enabled
-- +++ processing catkin package: 'cmvision'
-- ==> add_subdirectory(blob-tracking/cmvision)
-- Using these message generators: gencpp;geneus;genlisp;gennodejs;genpy
-- cmvision: 2 messages, 0 services
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FIND_COMPONENTS :
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_SELECT_OPTIONS=--debug=no
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-I/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;-I/usr/include/wx-3.0;-D_FILE_OFFSET_BITS=64;-DWXUSINGDLL;-D__WXGTK__;-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_DEFINITIONS=_FILE_OFFSET_BITS=64;WXUSINGDLL;WXGTK
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_INCLUDE_DIRS=/usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_CXX_FLAGS=-pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARIES=-L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(181): wxWidgets_LIBRARY_DIRS=/usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): _filename:  Blob
CMake Error at /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake:861 (file):
file failed to open for reading (No such file or directory):
/mnt/data/workspace/ros/src/blob-tracking/cmvision/Blob

Call Stack (most recent call first):
blob-tracking/cmvision/CMakeLists.txt:29 (find_package)
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_VERSION_STRING:    ..
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_FOUND           : TRUE
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_INCLUDE_DIRS    : /usr/lib/arm-linux-gnueabihf/wx/include/gtk2-unicode-3.0;/usr/include/wx-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARY_DIRS    : /usr/lib/arm-linux-gnueabihf
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_LIBRARIES       : -L/usr/lib/arm-linux-gnueabihf;-pthread;;;-lwx_gtk2u_xrc-3.0;-lwx_gtk2u_webview-3.0;-lwx_gtk2u_html-3.0;-lwx_gtk2u_qa-3.0;-lwx_gtk2u_adv-3.0;-lwx_gtk2u_core-3.0;-lwx_baseu_xml-3.0;-lwx_baseu_net-3.0;-lwx_baseu-3.0
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_CXX_FLAGS       : -pthread
-- /usr/share/cmake-3.5/Modules/FindwxWidgets.cmake(177): wxWidgets_USE_FILE        : /usr/share/cmake-3.5/Modules/UsewxWidgets.cmake
Note that source directory for the cmvision ROS package is: src/blob-tracking/cmvision (maybe it's a regexp problem where 'blob-tracking' is truncated and capitalized?)

Steps to reproduce:

Install ROS Kinetic on Ubuntu 16.04: http://wiki.ros.org/kinetic/Installation/Ubuntu
Create a new workspace: http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment#Create_a_ROS_Workspace
mkdir & cd into src/blob-tracking and clone cmvision: https://github.com/OSUrobotics/cmvision
build with catkin_make","Thanks.  I've moved this to GitLab MR 1951.  For future contributions please see CONTRIBUTING.rst for the preferred contribution path.
Meanwhile the project code should be fixed to unset the _filename local variable after finishing with it so that it does not leak into the find_package(wxWidgets) call.  That will fix it for existing CMake releases.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,321,2018-06-22T19:55:26Z,2018-06-22T19:56:06Z,2018-06-22T19:56:20Z,CLOSED,False,27,6,1,https://github.com/SsnL,[FindCUDA] add option to blacklist host flags in propagation,1,[],https://github.com/Kitware/CMake/pull/321,https://github.com/SsnL,1,https://github.com/Kitware/CMake/pull/321,"Add CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST  that specifies a list of flags that shouldn't be propagated when CUDA_PROPAGATE_HOST_FLAGS is ON.
Reasoning: propagation is useful, e.g. when specifying debug/release builds. However, sometimes we want some particular flags to not propagated to NVCC, while keeping others. Currently one can only turn CUDA_PROPAGATE_HOST_FLAGS ON/OFF, but not filter out specific flags. CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST is added to support this.","Add CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST  that specifies a list of flags that shouldn't be propagated when CUDA_PROPAGATE_HOST_FLAGS is ON.
Reasoning: propagation is useful, e.g. when specifying debug/release builds. However, sometimes we want some particular flags to not propagated to NVCC, while keeping others. Currently one can only turn CUDA_PROPAGATE_HOST_FLAGS ON/OFF, but not filter out specific flags. CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST is added to support this.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,321,2018-06-22T19:55:26Z,2018-06-22T19:56:06Z,2018-06-22T19:56:20Z,CLOSED,False,27,6,1,https://github.com/SsnL,[FindCUDA] add option to blacklist host flags in propagation,1,[],https://github.com/Kitware/CMake/pull/321,https://github.com/SsnL,2,https://github.com/Kitware/CMake/pull/321#issuecomment-399564355,"Add CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST  that specifies a list of flags that shouldn't be propagated when CUDA_PROPAGATE_HOST_FLAGS is ON.
Reasoning: propagation is useful, e.g. when specifying debug/release builds. However, sometimes we want some particular flags to not propagated to NVCC, while keeping others. Currently one can only turn CUDA_PROPAGATE_HOST_FLAGS ON/OFF, but not filter out specific flags. CUDA_PROPAGATE_HOST_FLAGS_BLACKLIST is added to support this.",resubmitting to gitlab,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/KOLANICH,1,https://github.com/Kitware/CMake/pull/322,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/322#issuecomment-406609117,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.","I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.

GitLab only requests only the very basic ""Access user email addresses (read-only)"" permission.
Or, you could register an account there with a user name and password independent of GitHub.
As for the change itself, I think the use case should be first discussed in an issue before deciding on a module/function interface for it.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/KOLANICH,3,https://github.com/Kitware/CMake/pull/322#issuecomment-406634558,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.","As for the change itself, I think the use case should be first discussed in an issue before deciding on a module/function interface for it.

Could you create that issue for me (with a notice that I won't come) and attach my patches there?",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/bradking,4,https://github.com/Kitware/CMake/pull/322#issuecomment-406639427,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",Recorded as CMake Issue 18191 with a link to this PR.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/KOLANICH,5,https://github.com/Kitware/CMake/pull/322#issuecomment-406691695,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",Thank you.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/KOLANICH,6,https://github.com/Kitware/CMake/pull/322#issuecomment-752725057,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",@bradking,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/bradking,7,https://github.com/Kitware/CMake/pull/322#issuecomment-755380640,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",@KOLANICH please see the solution posted here.,True,{'THUMBS_UP': ['https://github.com/KOLANICH']}
Kitware/CMake,https://github.com/Kitware/CMake,322,2018-07-20T13:46:55Z,2018-07-20T13:59:55Z,2021-01-06T20:20:24Z,CLOSED,False,37,1,2,https://github.com/KOLANICH,CheckCXXCompilerFlag: Add alternative check that actually runs an executable,2,[],https://github.com/Kitware/CMake/pull/322,https://github.com/KOLANICH,8,https://github.com/Kitware/CMake/pull/322#issuecomment-755633104,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.

Sorry, but I'm not gonna use your gitlab. It's a big problem to authorise there without granting permissions.
So I hope that someone will move my PR there.
This PR is because it makes more sense to check whether the code works than compiles. For example adding -pie to link flags for the latest MinGW-W64 causes the app not work. It compiles, it doesn't crashes, just exits doing no work.",So CheckSourceRuns. Thank you for bringing my attention to this feature.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,323,2018-11-13T21:32:05Z,2018-11-13T21:33:00Z,2018-11-13T21:33:57Z,CLOSED,False,1907,356,95,https://github.com/paulmaybee,Dev/paulmay/jmc,143,[],https://github.com/Kitware/CMake/pull/323,https://github.com/paulmaybee,1,https://github.com/Kitware/CMake/pull/323,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,324,2018-11-28T12:48:15Z,2018-11-28T15:47:55Z,2018-11-28T15:47:55Z,CLOSED,False,2,2,1,https://github.com/antmak,Use a proper way to set FLAGS in UseEcos module,1,[],https://github.com/Kitware/CMake/pull/324,https://github.com/antmak,1,https://github.com/Kitware/CMake/pull/324,"I was learning how to set CMAKE_C_FLAGS in different configurations, including cross-compiling toolchains, when I noticed some odd code in the UseEcos module. I'm not 100% sure about change, but maybe you could review this. Thanks. Feel free to throw out it :)","I was learning how to set CMAKE_C_FLAGS in different configurations, including cross-compiling toolchains, when I noticed some odd code in the UseEcos module. I'm not 100% sure about change, but maybe you could review this. Thanks. Feel free to throw out it :)",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,324,2018-11-28T12:48:15Z,2018-11-28T15:47:55Z,2018-11-28T15:47:55Z,CLOSED,False,2,2,1,https://github.com/antmak,Use a proper way to set FLAGS in UseEcos module,1,[],https://github.com/Kitware/CMake/pull/324,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/324#issuecomment-442438945,"I was learning how to set CMAKE_C_FLAGS in different configurations, including cross-compiling toolchains, when I noticed some odd code in the UseEcos module. I'm not 100% sure about change, but maybe you could review this. Thanks. Feel free to throw out it :)","Thanks.  Please see CONTRIBUTING.rst for contribution instructions and use our gitlab.
Also, please look at using string(APPEND).",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,325,2019-02-12T20:09:35Z,2019-02-13T12:47:26Z,2019-02-13T12:47:26Z,CLOSED,False,24,0,3,https://github.com/nightwizard0,Element StyleSheet has been added to CPack IFW,1,[],https://github.com/Kitware/CMake/pull/325,https://github.com/nightwizard0,1,https://github.com/Kitware/CMake/pull/325,"According to QtIFW documentation, configuration file is able to include style sheet file path (StyleSheet element).
But, unfortunately, current implementation of CPack doesn't support the feature.","According to QtIFW documentation, configuration file is able to include style sheet file path (StyleSheet element).
But, unfortunately, current implementation of CPack doesn't support the feature.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,325,2019-02-12T20:09:35Z,2019-02-13T12:47:26Z,2019-02-13T12:47:26Z,CLOSED,False,24,0,3,https://github.com/nightwizard0,Element StyleSheet has been added to CPack IFW,1,[],https://github.com/Kitware/CMake/pull/325,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/325#issuecomment-463186663,"According to QtIFW documentation, configuration file is able to include style sheet file path (StyleSheet element).
But, unfortunately, current implementation of CPack doesn't support the feature.",@nightwizard0 thanks.  Please see CONTRIBUTING.rst and open a merge request on our GitLab instance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,326,2019-02-27T05:29:31Z,2019-02-27T12:07:49Z,2019-02-27T12:07:49Z,CLOSED,False,5,5,1,https://github.com/agahkarakuzu,Set minimum R2018a --> R2017b for C++API ,2,[],https://github.com/Kitware/CMake/pull/326,https://github.com/agahkarakuzu,1,https://github.com/Kitware/CMake/pull/326,"As described by the official release notes, MATLAB Engine API for C++ is available as of R2017b. However, FindMatlab.cmake sets the requirement threshold at R2018a.
Matlab_ENGINE_LIBRARY and Matlab_DATAARRAY_LIBRARY can be made available for R2017b. After small changes I made in this PR, I was able to link these libraries to my R2017b application.
Please feel free to disregard this PR, in case R2018a limit is on purpose.","As described by the official release notes, MATLAB Engine API for C++ is available as of R2017b. However, FindMatlab.cmake sets the requirement threshold at R2018a.
Matlab_ENGINE_LIBRARY and Matlab_DATAARRAY_LIBRARY can be made available for R2017b. After small changes I made in this PR, I was able to link these libraries to my R2017b application.
Please feel free to disregard this PR, in case R2018a limit is on purpose.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,326,2019-02-27T05:29:31Z,2019-02-27T12:07:49Z,2019-02-27T12:07:49Z,CLOSED,False,5,5,1,https://github.com/agahkarakuzu,Set minimum R2018a --> R2017b for C++API ,2,[],https://github.com/Kitware/CMake/pull/326,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/326#issuecomment-467838048,"As described by the official release notes, MATLAB Engine API for C++ is available as of R2017b. However, FindMatlab.cmake sets the requirement threshold at R2018a.
Matlab_ENGINE_LIBRARY and Matlab_DATAARRAY_LIBRARY can be made available for R2017b. After small changes I made in this PR, I was able to link these libraries to my R2017b application.
Please feel free to disregard this PR, in case R2018a limit is on purpose.",Thanks.  Please see CONTRIBUTING.rst and open a merge request on our gitlab instance.  One can authenticate via GitHub.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,327,2019-03-22T14:34:50Z,2019-03-22T14:48:18Z,2019-03-22T14:48:19Z,CLOSED,False,1188,0,4,https://github.com/dfleury2,Generates Eclipse CDT9 project,6,[],https://github.com/Kitware/CMake/pull/327,https://github.com/dfleury2,1,https://github.com/Kitware/CMake/pull/327,"This is an experimental version of a CDT9 project generator based on the CDT4 one.
This version is used for our projects which have particular layout, so it may not works for everybody.
At least CDT9 recognize the imported project as a CDT project and enable the C++ features.
Some improvements can be done like adding all targets...
May be using a C++ template text engine (like Ginger, Pantor, or Amps) could help to generate the XML.","This is an experimental version of a CDT9 project generator based on the CDT4 one.
This version is used for our projects which have particular layout, so it may not works for everybody.
At least CDT9 recognize the imported project as a CDT project and enable the C++ features.
Some improvements can be done like adding all targets...
May be using a C++ template text engine (like Ginger, Pantor, or Amps) could help to generate the XML.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,327,2019-03-22T14:34:50Z,2019-03-22T14:48:18Z,2019-03-22T14:48:19Z,CLOSED,False,1188,0,4,https://github.com/dfleury2,Generates Eclipse CDT9 project,6,[],https://github.com/Kitware/CMake/pull/327,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/327#issuecomment-475649541,"This is an experimental version of a CDT9 project generator based on the CDT4 one.
This version is used for our projects which have particular layout, so it may not works for everybody.
At least CDT9 recognize the imported project as a CDT project and enable the C++ features.
Some improvements can be done like adding all targets...
May be using a C++ template text engine (like Ginger, Pantor, or Amps) could help to generate the XML.",Thanks.  Please see CONTRIBUTING.rst and open a MR on our GitLab instance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,328,2019-04-04T11:46:15Z,2019-04-04T12:53:20Z,2019-04-04T12:53:21Z,CLOSED,False,1,0,1,https://github.com/hanexthink,FindProtobuf: Search src-root/bin for protoc,1,[],https://github.com/Kitware/CMake/pull/328,https://github.com/hanexthink,1,https://github.com/Kitware/CMake/pull/328,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,328,2019-04-04T11:46:15Z,2019-04-04T12:53:20Z,2019-04-04T12:53:21Z,CLOSED,False,1,0,1,https://github.com/hanexthink,FindProtobuf: Search src-root/bin for protoc,1,[],https://github.com/Kitware/CMake/pull/328,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/328#issuecomment-479884507,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks.  However, Protobuf_SRC_ROOT_FOLDER is documented and implemented to support protobuf builds from source with Visual Studio on Windows.  It is not meant as a general-purpose root specification.  This shouldn't be necessary either: find_program documents several ways to control its search path without modifying the call itself.  Protobuf_ROOT, CMAKE_PREFIX_PATH, and simply PATH are among the options.
For further help please ask on the mailing list.
For future contributions please see CONTRIBUTING.rst for instructions.  To report a bug please use the issue tracker.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,329,2019-04-12T04:34:03Z,2019-04-12T13:50:35Z,2019-04-12T13:50:35Z,CLOSED,False,3,1,1,None,"Add support for Visual Studio 2019, msvc toolset 14.2+",1,[],https://github.com/Kitware/CMake/pull/329,None,1,https://github.com/Kitware/CMake/pull/329,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,329,2019-04-12T04:34:03Z,2019-04-12T13:50:35Z,2019-04-12T13:50:35Z,CLOSED,False,3,1,1,None,"Add support for Visual Studio 2019, msvc toolset 14.2+",1,[],https://github.com/Kitware/CMake/pull/329,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/329#issuecomment-482581995,,Thanks.  I've moved this over to CMake MR 3221.  For future contributions please see CONTRIBUTING.rst and submit a merge request to our Gitlab instance.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,330,2019-06-05T08:17:35Z,2019-06-05T13:34:10Z,2019-06-05T13:34:10Z,CLOSED,False,1,1,1,https://github.com/malaterre,Handle case sensitive system,1,[],https://github.com/Kitware/CMake/pull/330,https://github.com/malaterre,1,https://github.com/Kitware/CMake/pull/330,"There is no need to use a case sensitive executable name, since it will be handled gracefully on windows anyway. This change allow support for Linux system, in particular Debian distribution where:
$ dpkg -L nuget
...
/usr/bin/nuget

Fixes symptoms:
CPackNuGet:Debug: NUGET_EXECUTABLE=`NUGET_EXECUTABLE-NOTFOUND`
CMake Error at /usr/share/cmake-3.13/Modules/Internal/CPack/CPackNuGet.cmake:282 (message):
  NuGet executable not found

Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","There is no need to use a case sensitive executable name, since it will be handled gracefully on windows anyway. This change allow support for Linux system, in particular Debian distribution where:
$ dpkg -L nuget
...
/usr/bin/nuget

Fixes symptoms:
CPackNuGet:Debug: NUGET_EXECUTABLE=`NUGET_EXECUTABLE-NOTFOUND`
CMake Error at /usr/share/cmake-3.13/Modules/Internal/CPack/CPackNuGet.cmake:282 (message):
  NuGet executable not found

Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,330,2019-06-05T08:17:35Z,2019-06-05T13:34:10Z,2019-06-05T13:34:10Z,CLOSED,False,1,1,1,https://github.com/malaterre,Handle case sensitive system,1,[],https://github.com/Kitware/CMake/pull/330,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/330#issuecomment-499084942,"There is no need to use a case sensitive executable name, since it will be handled gracefully on windows anyway. This change allow support for Linux system, in particular Debian distribution where:
$ dpkg -L nuget
...
/usr/bin/nuget

Fixes symptoms:
CPackNuGet:Debug: NUGET_EXECUTABLE=`NUGET_EXECUTABLE-NOTFOUND`
CMake Error at /usr/share/cmake-3.13/Modules/Internal/CPack/CPackNuGet.cmake:282 (message):
  NuGet executable not found

Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",Thanks.  Moved to CMake GitLab MR 3427 as per CONTRIBUTING.rst.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,331,2019-07-17T16:41:42Z,2019-07-17T17:06:33Z,2019-11-03T11:55:32Z,CLOSED,False,75,0,1,https://github.com/jannick0,FindDLLTOOL: add find module for dlltool.,1,[],https://github.com/Kitware/CMake/pull/331,https://github.com/jannick0,1,https://github.com/Kitware/CMake/pull/331,"I hope this PR meets your contribution requirements, as it is my first one for cmake.cmake.
... too bad that I am just minutes late for the v3.15.0 release party.","I hope this PR meets your contribution requirements, as it is my first one for cmake.cmake.
... too bad that I am just minutes late for the v3.15.0 release party.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,331,2019-07-17T16:41:42Z,2019-07-17T17:06:33Z,2019-11-03T11:55:32Z,CLOSED,False,75,0,1,https://github.com/jannick0,FindDLLTOOL: add find module for dlltool.,1,[],https://github.com/Kitware/CMake/pull/331,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/331#issuecomment-512390109,"I hope this PR meets your contribution requirements, as it is my first one for cmake.cmake.
... too bad that I am just minutes late for the v3.15.0 release party.","Thanks.  Please see CONTRIBUTING.rst which explains that the proper contribution path is through our gitlab instance.

I am just minutes late for the v3.15.0 release party.

The freeze for 3.15 features was June 1 :)
As for the change itself, IIUC dlltool is part of the GNU binutils.  Therefore it may be appropriate to add it to CMakeFindBinUtils.  Likely this is best first discussed in an issue.  Please open one in our issue tracker.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,331,2019-07-17T16:41:42Z,2019-07-17T17:06:33Z,2019-11-03T11:55:32Z,CLOSED,False,75,0,1,https://github.com/jannick0,FindDLLTOOL: add find module for dlltool.,1,[],https://github.com/Kitware/CMake/pull/331,https://github.com/jannick0,3,https://github.com/Kitware/CMake/pull/331#issuecomment-549129278,"I hope this PR meets your contribution requirements, as it is my first one for cmake.cmake.
... too bad that I am just minutes late for the v3.15.0 release party.",Further discussion here in cmake issue tracker as requested.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,332,2020-03-16T18:56:21Z,2020-03-17T11:29:36Z,2020-03-17T11:29:36Z,CLOSED,False,1,1,1,https://github.com/jjYBdx4IL,prevent linefeed containment through CMakeVersion.cmake,1,[],https://github.com/Kitware/CMake/pull/332,https://github.com/jjYBdx4IL,1,https://github.com/Kitware/CMake/pull/332,See title. Git clone on cygwin produces DOS linefeeds in Source/CMakeVersion.cmake file.,See title. Git clone on cygwin produces DOS linefeeds in Source/CMakeVersion.cmake file.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,332,2020-03-16T18:56:21Z,2020-03-17T11:29:36Z,2020-03-17T11:29:36Z,CLOSED,False,1,1,1,https://github.com/jjYBdx4IL,prevent linefeed containment through CMakeVersion.cmake,1,[],https://github.com/Kitware/CMake/pull/332,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/332#issuecomment-600020550,See title. Git clone on cygwin produces DOS linefeeds in Source/CMakeVersion.cmake file.,"Thanks.  I've ported this change over to GitLab MR 4491.
For future contributions please see CONTRIBUTING.rst which explains that the proper contribution path is through our gitlab instance.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,333,2020-04-26T08:31:22Z,2020-04-26T09:31:45Z,2020-04-26T19:05:05Z,CLOSED,False,8,4,1,https://github.com/jmalak,cmake-gui: don't pass CMAKE_C_COMPILER and CMAKE_CXX_COMPILER items t…,1,[],https://github.com/Kitware/CMake/pull/333,https://github.com/jmalak,1,https://github.com/Kitware/CMake/pull/333,"…o cmake if empty
If C or C++ compiler is not specified it pass blank value to CMAKE_C_COMPILER or CMAKE_CXX_COMPILER cache entries for cross-compilation setup.
In this case compiler can not be find by find_program.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","…o cmake if empty
If C or C++ compiler is not specified it pass blank value to CMAKE_C_COMPILER or CMAKE_CXX_COMPILER cache entries for cross-compilation setup.
In this case compiler can not be find by find_program.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,334,2020-09-21T20:03:30Z,2020-09-22T12:12:13Z,2020-09-22T12:12:13Z,CLOSED,False,9,0,3,https://github.com/hchilama,[Intel]: Add INTEL Dpcpp compiler identification,1,[],https://github.com/Kitware/CMake/pull/334,https://github.com/hchilama,1,https://github.com/Kitware/CMake/pull/334,"check INTEL_DPCPP_COMPILER via  _compiler_id_pp_test
to deect INTEL DPCPP compiler detection.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","check INTEL_DPCPP_COMPILER via  _compiler_id_pp_test
to deect INTEL DPCPP compiler detection.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,334,2020-09-21T20:03:30Z,2020-09-22T12:12:13Z,2020-09-22T12:12:13Z,CLOSED,False,9,0,3,https://github.com/hchilama,[Intel]: Add INTEL Dpcpp compiler identification,1,[],https://github.com/Kitware/CMake/pull/334,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/334#issuecomment-696680990,"check INTEL_DPCPP_COMPILER via  _compiler_id_pp_test
to deect INTEL DPCPP compiler detection.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks.  However, as mentioned in the PR description template, this repository is not the contribution path for CMake.
Please visit the CMake issue tracker and open an issue to propose addition of an id for this compiler.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,335,2020-11-21T04:22:30Z,2020-11-23T13:14:09Z,2020-11-23T13:14:09Z,CLOSED,False,1201,643,88,https://github.com/clin1234,Merge from upstream repository.,3,[],https://github.com/Kitware/CMake/pull/335,https://github.com/clin1234,1,https://github.com/Kitware/CMake/pull/335,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,335,2020-11-21T04:22:30Z,2020-11-23T13:14:09Z,2020-11-23T13:14:09Z,CLOSED,False,1201,643,88,https://github.com/clin1234,Merge from upstream repository.,3,[],https://github.com/Kitware/CMake/pull/335,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/335#issuecomment-732153749,,This repository is automatically updated from the upstream repository.  See CONTRIBUTING.rst for instructions to contribute a change there.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,336,2020-12-29T10:00:48Z,2021-01-04T17:04:46Z,2021-01-04T17:04:47Z,CLOSED,False,1,1,1,https://github.com/fazl,Fix minor typo in index.rst (s/mqsqrt.h/mysqrt.h/,1,[],https://github.com/Kitware/CMake/pull/336,https://github.com/fazl,1,https://github.com/Kitware/CMake/pull/336,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,336,2020-12-29T10:00:48Z,2021-01-04T17:04:46Z,2021-01-04T17:04:47Z,CLOSED,False,1,1,1,https://github.com/fazl,Fix minor typo in index.rst (s/mqsqrt.h/mysqrt.h/,1,[],https://github.com/Kitware/CMake/pull/336,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/336#issuecomment-754095643,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","@fazl thanks.  I migrated this to GitLab MR 5662.
For future contributions, please see CONTRIBUTING.rst and open a merge request over in our gitlab.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,337,2021-01-15T19:21:14Z,2021-01-18T14:52:31Z,2021-01-18T14:52:31Z,CLOSED,False,47,0,2,https://github.com/qsam1127,Openreqcmake,2,[],https://github.com/Kitware/CMake/pull/337,https://github.com/qsam1127,1,https://github.com/Kitware/CMake/pull/337,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,337,2021-01-15T19:21:14Z,2021-01-18T14:52:31Z,2021-01-18T14:52:31Z,CLOSED,False,47,0,2,https://github.com/qsam1127,Openreqcmake,2,[],https://github.com/Kitware/CMake/pull/337,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/337#issuecomment-762298763,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","@qsam1127 thanks.  However, CMake is not developed in this GitHub repository.  Please see CONTRIBUTING.rst to contribute changes to our upstream gitlab repo.
As for the change itself, we have our own CI over on GitLab, including nightly binaries as explained at the bottom of our download page.  If you'd like to pursue this further, please post over on our discourse forum to explain your proposal.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,339,2021-04-25T21:50:10Z,2021-04-25T21:50:16Z,2021-04-25T21:50:23Z,CLOSED,False,1,1,1,https://github.com/jeroen,Update cmThirdPartyChecks.cmake,1,[],https://github.com/Kitware/CMake/pull/339,https://github.com/jeroen,1,https://github.com/Kitware/CMake/pull/339,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,340,2021-05-23T10:54:24Z,2021-05-23T10:55:27Z,2021-05-23T10:55:27Z,CLOSED,False,13212,7,190,https://github.com/uniHk,Forplay,3,[],https://github.com/Kitware/CMake/pull/340,https://github.com/uniHk,1,https://github.com/Kitware/CMake/pull/340,"Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,341,2021-06-17T23:09:05Z,2021-06-18T13:44:58Z,2021-06-18T16:49:29Z,CLOSED,False,6,6,1,https://github.com/pcanal,Improve compiler_id_detection resilience against variable setting.,1,[],https://github.com/Kitware/CMake/pull/341,https://github.com/pcanal,1,https://github.com/Kitware/CMake/pull/341,"Without this commit setting a variable named CUDA, C, CXX, Fortran, CSharp or ISPC
prevents the function compiler_id_detection for properly detection the compiler.
For example, with a simple project containing only:
cmake_minimum_required(VERSION 3.12...3.20)
project(projectname)
enable_language(CUDA)
The cmake configuration works properly with:
  cmake path_to_source_dir

but fails with
  cmake -DCUDA=ON path_to_source_dir
...
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeDetermineCompilerABI.cmake:48 (try_compile):
  Failed to generate test project build system.
Call Stack (most recent call first):
  /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:19 (CMAKE_DETERMINE_COMPILER_ABI)
  CMakeLists.txt:30 (enable_language)
-- Configuring incomplete, errors occurred!

and without the cmake_minimum_required, I get the equality obscure message:
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - failed
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc - broken
CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:52 (message):
The CUDA compiler
""/srv/software/cuda-toolkits/11.1.1/bin/nvcc""

is not able to compile a simple test program.
It fails with the following output:
Change Dir: /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/gmake cmTC_a3804/fast && /usr/bin/gmake  -f CMakeFiles/cmTC_a3804.dir/build.make CMakeFiles/cmTC_a3804.dir/build
gmake[1]: Entering directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
Building CUDA object CMakeFiles/cmTC_a3804.dir/main.cu.o
/srv/software/cuda-toolkits/11.1.1/bin/nvcc      -c /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/main.cu -o CMakeFiles/cmTC_a3804.dir/main.cu.o
Linking CUDA executable cmTC_a3804
/work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a3804.dir/link.txt --verbose=1
"""" CMakeFiles/cmTC_a3804.dir/main.cu.o -o cmTC_a3804
Error running link command: No such file or directory
gmake[1]: *** [cmTC_a3804] Error 2
gmake[1]: Leaving directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
gmake: *** [cmTC_a3804/fast] Error 2

CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
CMakeLists.txt:30 (enable_language)
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Without this commit setting a variable named CUDA, C, CXX, Fortran, CSharp or ISPC
prevents the function compiler_id_detection for properly detection the compiler.
For example, with a simple project containing only:
cmake_minimum_required(VERSION 3.12...3.20)
project(projectname)
enable_language(CUDA)
The cmake configuration works properly with:
  cmake path_to_source_dir

but fails with
  cmake -DCUDA=ON path_to_source_dir
...
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeDetermineCompilerABI.cmake:48 (try_compile):
  Failed to generate test project build system.
Call Stack (most recent call first):
  /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:19 (CMAKE_DETERMINE_COMPILER_ABI)
  CMakeLists.txt:30 (enable_language)
-- Configuring incomplete, errors occurred!

and without the cmake_minimum_required, I get the equality obscure message:
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - failed
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc - broken
CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:52 (message):
The CUDA compiler
""/srv/software/cuda-toolkits/11.1.1/bin/nvcc""

is not able to compile a simple test program.
It fails with the following output:
Change Dir: /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/gmake cmTC_a3804/fast && /usr/bin/gmake  -f CMakeFiles/cmTC_a3804.dir/build.make CMakeFiles/cmTC_a3804.dir/build
gmake[1]: Entering directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
Building CUDA object CMakeFiles/cmTC_a3804.dir/main.cu.o
/srv/software/cuda-toolkits/11.1.1/bin/nvcc      -c /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/main.cu -o CMakeFiles/cmTC_a3804.dir/main.cu.o
Linking CUDA executable cmTC_a3804
/work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a3804.dir/link.txt --verbose=1
"""" CMakeFiles/cmTC_a3804.dir/main.cu.o -o cmTC_a3804
Error running link command: No such file or directory
gmake[1]: *** [cmTC_a3804] Error 2
gmake[1]: Leaving directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
gmake: *** [cmTC_a3804/fast] Error 2

CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
CMakeLists.txt:30 (enable_language)
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,341,2021-06-17T23:09:05Z,2021-06-18T13:44:58Z,2021-06-18T16:49:29Z,CLOSED,False,6,6,1,https://github.com/pcanal,Improve compiler_id_detection resilience against variable setting.,1,[],https://github.com/Kitware/CMake/pull/341,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/341#issuecomment-864050335,"Without this commit setting a variable named CUDA, C, CXX, Fortran, CSharp or ISPC
prevents the function compiler_id_detection for properly detection the compiler.
For example, with a simple project containing only:
cmake_minimum_required(VERSION 3.12...3.20)
project(projectname)
enable_language(CUDA)
The cmake configuration works properly with:
  cmake path_to_source_dir

but fails with
  cmake -DCUDA=ON path_to_source_dir
...
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error in /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/CMakeLists.txt:
  CUDA_ARCHITECTURES is empty for target ""cmTC_cd788"".

CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeDetermineCompilerABI.cmake:48 (try_compile):
  Failed to generate test project build system.
Call Stack (most recent call first):
  /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:19 (CMAKE_DETERMINE_COMPILER_ABI)
  CMakeLists.txt:30 (enable_language)
-- Configuring incomplete, errors occurred!

and without the cmake_minimum_required, I get the equality obscure message:
-- The CUDA compiler identification is GNU 8.3.0
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - failed
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc
-- Check for working CUDA compiler: /srv/software/cuda-toolkits/11.1.1/bin/nvcc - broken
CMake Error at /work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/share/cmake-3.19/Modules/CMakeTestCUDACompiler.cmake:52 (message):
The CUDA compiler
""/srv/software/cuda-toolkits/11.1.1/bin/nvcc""

is not able to compile a simple test program.
It fails with the following output:
Change Dir: /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/gmake cmTC_a3804/fast && /usr/bin/gmake  -f CMakeFiles/cmTC_a3804.dir/build.make CMakeFiles/cmTC_a3804.dir/build
gmake[1]: Entering directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
Building CUDA object CMakeFiles/cmTC_a3804.dir/main.cu.o
/srv/software/cuda-toolkits/11.1.1/bin/nvcc      -c /work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp/main.cu -o CMakeFiles/cmTC_a3804.dir/main.cu.o
Linking CUDA executable cmTC_a3804
/work1/celeritas/pcanal/geant/gcc8/install/cmake-3.19.3/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a3804.dir/link.txt --verbose=1
"""" CMakeFiles/cmTC_a3804.dir/main.cu.o -o cmTC_a3804
Error running link command: No such file or directory
gmake[1]: *** [cmTC_a3804] Error 2
gmake[1]: Leaving directory `/work1/celeritas/pcanal/geant/gcc8/builds/scalar-cuda11/VecGeom.newcmake/CMakeFiles/CMakeTmp'
gmake: *** [cmTC_a3804/fast] Error 2

CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
CMakeLists.txt:30 (enable_language)
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks.  I've ported this over to CMake MR 6243.
For future contributions, please see CONTRIBUTING.rst and open a merge request in our GitLab.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,342,2021-08-16T11:17:17Z,2021-08-18T14:27:00Z,2021-08-18T17:55:15Z,CLOSED,False,136,0,1,https://github.com/KOLANICH,Improvements in FindDoxygen.cmake.,1,[],https://github.com/Kitware/CMake/pull/342,https://github.com/KOLANICH,1,https://github.com/Kitware/CMake/pull/342,"Allowed importing of contents of a Doxyfile using load_doxyfile
Added doxygen_use_clang_for_target function making it easier to enable CLang-assisted parsing.
Added doxygen_document_target making it easier to setup documentation. A user just provides  the name of a target of generating docs, the name of the target to generate the docs for, and the list of output formats. Other needed info is extracted from CMake variables.","Allowed importing of contents of a Doxyfile using load_doxyfile
Added doxygen_use_clang_for_target function making it easier to enable CLang-assisted parsing.
Added doxygen_document_target making it easier to setup documentation. A user just provides  the name of a target of generating docs, the name of the target to generate the docs for, and the list of output formats. Other needed info is extracted from CMake variables.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,342,2021-08-16T11:17:17Z,2021-08-18T14:27:00Z,2021-08-18T17:55:15Z,CLOSED,False,136,0,1,https://github.com/KOLANICH,Improvements in FindDoxygen.cmake.,1,[],https://github.com/Kitware/CMake/pull/342,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/342#issuecomment-901161533,"Allowed importing of contents of a Doxyfile using load_doxyfile
Added doxygen_use_clang_for_target function making it easier to enable CLang-assisted parsing.
Added doxygen_document_target making it easier to setup documentation. A user just provides  the name of a target of generating docs, the name of the target to generate the docs for, and the list of output formats. Other needed info is extracted from CMake variables.","Thanks.  Please see CONTRIBUTING.rst for contribution instructions, and open a merge request on our GitLab instance.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,342,2021-08-16T11:17:17Z,2021-08-18T14:27:00Z,2021-08-18T17:55:15Z,CLOSED,False,136,0,1,https://github.com/KOLANICH,Improvements in FindDoxygen.cmake.,1,[],https://github.com/Kitware/CMake/pull/342,https://github.com/KOLANICH,3,https://github.com/Kitware/CMake/pull/342#issuecomment-901314059,"Allowed importing of contents of a Doxyfile using load_doxyfile
Added doxygen_use_clang_for_target function making it easier to enable CLang-assisted parsing.
Added doxygen_document_target making it easier to setup documentation. A user just provides  the name of a target of generating docs, the name of the target to generate the docs for, and the list of output formats. Other needed info is extracted from CMake variables.","I am not going to sign up and sign in into your gitlab instance. If you want, you can take the sources, modify them and put into the Modules dir. If not, OK, I'd continue using submodules",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,343,2021-08-16T11:37:08Z,2021-08-18T14:30:30Z,2021-08-18T17:56:08Z,CLOSED,False,144,0,1,https://github.com/KOLANICH,Added a package to generate pkg-config,1,[],https://github.com/Kitware/CMake/pull/343,https://github.com/KOLANICH,1,https://github.com/Kitware/CMake/pull/343,,,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,343,2021-08-16T11:37:08Z,2021-08-18T14:30:30Z,2021-08-18T17:56:08Z,CLOSED,False,144,0,1,https://github.com/KOLANICH,Added a package to generate pkg-config,1,[],https://github.com/Kitware/CMake/pull/343,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/343#issuecomment-901164381,,"Please see CONTRIBUTING.rst for contribution instructions.
FWIW, this change is unlikely to be accepted.  See CMake MR 6363 for work toward pkg-config generation.",True,{'THUMBS_UP': ['https://github.com/KOLANICH']}
Kitware/CMake,https://github.com/Kitware/CMake,343,2021-08-16T11:37:08Z,2021-08-18T14:30:30Z,2021-08-18T17:56:08Z,CLOSED,False,144,0,1,https://github.com/KOLANICH,Added a package to generate pkg-config,1,[],https://github.com/Kitware/CMake/pull/343,https://github.com/KOLANICH,3,https://github.com/Kitware/CMake/pull/343#issuecomment-901314646,,Thanks for the info!,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,345,2021-12-22T19:40:40Z,2022-01-05T16:53:41Z,2022-01-05T16:53:41Z,CLOSED,False,1,1,1,https://github.com/mariuszwawrzonkowski,make rule behave the same on Xcode and ninja,1,[],https://github.com/Kitware/CMake/pull/345,https://github.com/mariuszwawrzonkowski,1,https://github.com/Kitware/CMake/pull/345,"When "" set_source_files_properties( FILE_OR_DIR PROPERTIES MACOSX_PACKAGE_LOCATION Resources ) "" is used on Xcode generator, it will copy file or directory structure, depends if ""FILE_OR_DIR"" is a file or directory. But if you generate ninja, the directory resource will be ignored.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","When "" set_source_files_properties( FILE_OR_DIR PROPERTIES MACOSX_PACKAGE_LOCATION Resources ) "" is used on Xcode generator, it will copy file or directory structure, depends if ""FILE_OR_DIR"" is a file or directory. But if you generate ninja, the directory resource will be ignored.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,345,2021-12-22T19:40:40Z,2022-01-05T16:53:41Z,2022-01-05T16:53:41Z,CLOSED,False,1,1,1,https://github.com/mariuszwawrzonkowski,make rule behave the same on Xcode and ninja,1,[],https://github.com/Kitware/CMake/pull/345,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/345#issuecomment-1005897996,"When "" set_source_files_properties( FILE_OR_DIR PROPERTIES MACOSX_PACKAGE_LOCATION Resources ) "" is used on Xcode generator, it will copy file or directory structure, depends if ""FILE_OR_DIR"" is a file or directory. But if you generate ninja, the directory resource will be ignored.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",@mariuszwawrzonkowski thanks.  Please see CONTRIBUTING.rst and open a merge request in our GitLab.  Please also check if there is an issue for this in the CMake Issue Tracker.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,348,2022-03-15T22:04:59Z,2022-03-15T22:10:45Z,2022-03-15T22:10:45Z,CLOSED,False,1,1,1,https://github.com/stomov,Update FindCUDAToolkit.cmake,1,[],https://github.com/Kitware/CMake/pull/348,https://github.com/stomov,1,https://github.com/Kitware/CMake/pull/348,"Without specifying this to the search path, find_package FindCUDAToolkit can not find the CUDA math libraries (at least this was the case on Perlmutter @ NERSC). I am not sure if
../../math_libs/lib64
should stay in the search path and add this as well:
${CUDAToolkit_TARGET_DIR}/../../math_libs/lib64
or just have the latter.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Without specifying this to the search path, find_package FindCUDAToolkit can not find the CUDA math libraries (at least this was the case on Perlmutter @ NERSC). I am not sure if
../../math_libs/lib64
should stay in the search path and add this as well:
${CUDAToolkit_TARGET_DIR}/../../math_libs/lib64
or just have the latter.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,348,2022-03-15T22:04:59Z,2022-03-15T22:10:45Z,2022-03-15T22:10:45Z,CLOSED,False,1,1,1,https://github.com/stomov,Update FindCUDAToolkit.cmake,1,[],https://github.com/Kitware/CMake/pull/348,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/348#issuecomment-1068517516,"Without specifying this to the search path, find_package FindCUDAToolkit can not find the CUDA math libraries (at least this was the case on Perlmutter @ NERSC). I am not sure if
../../math_libs/lib64
should stay in the search path and add this as well:
${CUDAToolkit_TARGET_DIR}/../../math_libs/lib64
or just have the latter.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",@stomov the path you updated is meant to be a suffix added to other search paths.  Please open an issue to report the problem you're encountering for further discussion.,True,{}
Kitware/CMake,https://github.com/Kitware/CMake,349,2022-03-25T14:21:52Z,2022-03-25T14:36:49Z,2022-03-25T14:46:20Z,CLOSED,False,45,17,1,https://github.com/moyo1997,bindexplib: Exclude entry and exit thunks for arm64EC,1,[],https://github.com/Kitware/CMake/pull/349,https://github.com/moyo1997,1,https://github.com/Kitware/CMake/pull/349,"Merge request on official kitware: https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7112?diff_id=282626&start_sha=de38bd9c8709faa0ce95b855fe4b1c26f275fb2d
Trying to take this bug in earlier in the msft fork for our windows partners","Merge request on official kitware: https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7112?diff_id=282626&start_sha=de38bd9c8709faa0ce95b855fe4b1c26f275fb2d
Trying to take this bug in earlier in the msft fork for our windows partners",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,349,2022-03-25T14:21:52Z,2022-03-25T14:36:49Z,2022-03-25T14:46:20Z,CLOSED,False,45,17,1,https://github.com/moyo1997,bindexplib: Exclude entry and exit thunks for arm64EC,1,[],https://github.com/Kitware/CMake/pull/349,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/349#issuecomment-1079090181,"Merge request on official kitware: https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7112?diff_id=282626&start_sha=de38bd9c8709faa0ce95b855fe4b1c26f275fb2d
Trying to take this bug in earlier in the msft fork for our windows partners","Trying to take this bug in earlier in the msft fork

I think you targeted the wrong repo with this PR.  This repo is an upstream mirror.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,350,2022-04-03T06:27:53Z,2022-04-04T13:59:06Z,2022-04-04T13:59:07Z,CLOSED,False,1,1,1,https://github.com/rdeprera,Building categorie inclusion,1,[],https://github.com/Kitware/CMake/pull/350,https://github.com/rdeprera,1,https://github.com/Kitware/CMake/pull/350,"Add Building categorie on Categories parameters lke suggested by specification https://specifications.freedesktop.org/menu-spec/latest/apas02.html
For better XFCE/GNome/Plasma menu integration.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Add Building categorie on Categories parameters lke suggested by specification https://specifications.freedesktop.org/menu-spec/latest/apas02.html
For better XFCE/GNome/Plasma menu integration.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,350,2022-04-03T06:27:53Z,2022-04-04T13:59:06Z,2022-04-04T13:59:07Z,CLOSED,False,1,1,1,https://github.com/rdeprera,Building categorie inclusion,1,[],https://github.com/Kitware/CMake/pull/350,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/350#issuecomment-1087594292,"Add Building categorie on Categories parameters lke suggested by specification https://specifications.freedesktop.org/menu-spec/latest/apas02.html
For better XFCE/GNome/Plasma menu integration.
Thanks for your interest in contributing to CMake!  The GitHub repository
is a mirror provided for convenience, but CMake does not use GitHub pull
requests for contribution.  Please see
https://gitlab.kitware.com/cmake/cmake/-/tree/master/CONTRIBUTING.rst
for contribution instructions.  GitHub OAuth may be used to sign in.","Thanks.  I moved this to GitLab MR 7141.
For future contributions, please see CONTRIBUTING.rst and open a merge request in our GitLab.",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,351,2022-05-23T10:18:27Z,2022-05-23T14:08:45Z,2022-05-23T14:08:55Z,CLOSED,False,1,2,1,https://github.com/likunyur,Source: cmFileCommandCurlDebugCallback could modify the return value …,1,[],https://github.com/Kitware/CMake/pull/351,https://github.com/likunyur,1,https://github.com/Kitware/CMake/pull/351,"Hello, gitlab doesn't have the permission to submit. The user name is likunyur","Hello, gitlab doesn't have the permission to submit. The user name is likunyur",True,{}
Kitware/CMake,https://github.com/Kitware/CMake,351,2022-05-23T10:18:27Z,2022-05-23T14:08:45Z,2022-05-23T14:08:55Z,CLOSED,False,1,2,1,https://github.com/likunyur,Source: cmFileCommandCurlDebugCallback could modify the return value …,1,[],https://github.com/Kitware/CMake/pull/351,https://github.com/bradking,2,https://github.com/Kitware/CMake/pull/351#issuecomment-1134726997,"Hello, gitlab doesn't have the permission to submit. The user name is likunyur","gitlab doesn't have the permission to submit.

We use the ""fork and merge request"" model.  You need to us the ""Fork"" button on the main repo in Gitlab.  Then push your branch to your fork.  Then open a merge request from the fork to the upstream master branch.
As for the change itself, CURLOPT_DEBUGFUNCTION documents that the callback is supposed to have a return value.  However, we've been using size_t instead of the documented int.
I've opened CMake MR 7288 in our GitLab for that.",True,{}
