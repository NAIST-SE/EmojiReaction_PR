frida/frida-core,https://github.com/frida/frida-core,74,2016-03-08T15:58:47Z,2016-03-13T20:14:08Z,2016-03-13T20:14:08Z,MERGED,True,2,2,1,https://github.com/s1341,Handle zombie processes gracefully,2,[],https://github.com/frida/frida-core/pull/74,https://github.com/s1341,1,https://github.com/frida/frida-core/pull/74,"These are processes which appear in /proc, but which you cannot open a /proc//as for","These are processes which appear in /proc, but which you cannot open a /proc//as for",True,{}
frida/frida-core,https://github.com/frida/frida-core,74,2016-03-08T15:58:47Z,2016-03-13T20:14:08Z,2016-03-13T20:14:08Z,MERGED,True,2,2,1,https://github.com/s1341,Handle zombie processes gracefully,2,[],https://github.com/frida/frida-core/pull/74,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/74#issuecomment-196045686,"These are processes which appear in /proc, but which you cannot open a /proc//as for",üëç,True,{}
frida/frida-core,https://github.com/frida/frida-core,80,2016-06-27T12:01:49Z,2016-06-29T14:03:41Z,2016-06-29T14:03:41Z,MERGED,True,481,12,12,https://github.com/s1341,Add mips support to frida-core,22,[],https://github.com/frida/frida-core/pull/80,https://github.com/s1341,1,https://github.com/frida/frida-core/pull/80,This PR adds mips support to the injector etc. of frida-core.,This PR adds mips support to the injector etc. of frida-core.,True,{}
frida/frida-core,https://github.com/frida/frida-core,83,2016-08-16T09:58:54Z,2016-08-16T09:59:35Z,2016-08-16T09:59:45Z,MERGED,True,1,0,1,https://github.com/s1341,Add missing include,1,[],https://github.com/frida/frida-core/pull/83,https://github.com/s1341,1,https://github.com/frida/frida-core/pull/83,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,83,2016-08-16T09:58:54Z,2016-08-16T09:59:35Z,2016-08-16T09:59:45Z,MERGED,True,1,0,1,https://github.com/s1341,Add missing include,1,[],https://github.com/frida/frida-core/pull/83,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/83#issuecomment-240059255,,Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,85,2016-09-28T17:23:12Z,2016-09-30T01:27:43Z,2016-09-30T01:28:11Z,MERGED,True,581,504,17,https://github.com/oleavr,Add support for multiple agent sessions,9,[],https://github.com/frida/frida-core/pull/85,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/85,"This addresses a long-standing design flaw where each attach() request would return the same object, or more precisely, the same shared session. The result was that clients would need to coordinate so that two clients interested in attaching to the same process wouldn't step on each other in case one decided to detach() once it was done.","This addresses a long-standing design flaw where each attach() request would return the same object, or more precisely, the same shared session. The result was that clients would need to coordinate so that two clients interested in attaching to the same process wouldn't step on each other in case one decided to detach() once it was done.",True,{}
frida/frida-core,https://github.com/frida/frida-core,91,2016-11-09T19:17:46Z,2016-11-09T19:37:40Z,2016-11-09T19:37:40Z,CLOSED,False,1,1,1,https://github.com/s1341,Fix missing dependency on libm for gadget on qnx,1,[],https://github.com/frida/frida-core/pull/91,https://github.com/s1341,1,https://github.com/frida/frida-core/pull/91,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,92,2016-11-09T19:41:58Z,2016-11-09T20:29:07Z,2016-11-09T20:29:07Z,MERGED,True,0,1,1,https://github.com/s1341,Remove -lm hack for QNX,1,[],https://github.com/frida/frida-core/pull/92,https://github.com/s1341,1,https://github.com/frida/frida-core/pull/92,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,93,2016-11-25T02:03:17Z,2016-11-25T17:36:20Z,2016-11-25T17:38:28Z,MERGED,True,714,238,36,https://github.com/oleavr,Expose the raw library injection API,7,[],https://github.com/frida/frida-core/pull/93,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/93,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,96,2016-12-14T05:13:35Z,2016-12-14T05:23:51Z,2016-12-14T14:19:52Z,MERGED,True,986,728,32,https://github.com/oleavr,Improve injectors,15,[],https://github.com/frida/frida-core/pull/96,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/96,"Avoid private APIs on i/macOS
Fix stability issue on i/macOS
Fix Mach port leak on i/macOS
Revise the agent entrypoint API to allow agents to stay resident. The old API was officially:

void
frida_agent_main (const char * data)
{
  /*
   * Agent will stay loaded until this function returns, after which Frida
   * will emit the `uinjected` signal.
   */
}
But it actually had two extra arguments for internal use:
void
frida_agent_main (const char * data,
                  const GumMemoryRange * mapped_range,
                  GumThreadId parent_thread_id)
{
}

mapped_range: was (and is still) used to tell Stalker to ignore our memory range when our shared library was manually mapped into the process. This means it is NULL if it was loaded by e.g. dlopen(), in which case frida-agent walks the loaded libraries to find the memory range.
parent_thread_id: on i/macOS we used to have a Mach thread sticking around, waiting for our POSIX thread to stop. We needed to know its thread ID so we could exclude it from Process.enumerateThreads(). As of this PR, this thread no longer sticks around, so this argument is now gone.

The new API is officially:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident)
{
  /*
   * Uncomment to prevent agent from getting unloaded after returning from this function.
   * This also means the `uninjected` signal is not emitted, and Frida will stop keeping track
   * of this injected thread.
   */
  // *stay_resident = true;
}
But internally it is actually:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident,
                  const GumMemoryRange * mapped_range)
{
  *stay_resident = true;
}
Though I think we should consider the third argument public now, as it's useful for some applications, e.g. using Stalker.
@s1341: I didn't dare to port the Linux/MIPS and QNX/ARM portions as I'm not able to test them, but as those are passing NULL, NULL for the last two arguments, it just means that stay_resident is unavailable for those ports (for now).","Avoid private APIs on i/macOS
Fix stability issue on i/macOS
Fix Mach port leak on i/macOS
Revise the agent entrypoint API to allow agents to stay resident. The old API was officially:

void
frida_agent_main (const char * data)
{
  /*
   * Agent will stay loaded until this function returns, after which Frida
   * will emit the `uinjected` signal.
   */
}
But it actually had two extra arguments for internal use:
void
frida_agent_main (const char * data,
                  const GumMemoryRange * mapped_range,
                  GumThreadId parent_thread_id)
{
}

mapped_range: was (and is still) used to tell Stalker to ignore our memory range when our shared library was manually mapped into the process. This means it is NULL if it was loaded by e.g. dlopen(), in which case frida-agent walks the loaded libraries to find the memory range.
parent_thread_id: on i/macOS we used to have a Mach thread sticking around, waiting for our POSIX thread to stop. We needed to know its thread ID so we could exclude it from Process.enumerateThreads(). As of this PR, this thread no longer sticks around, so this argument is now gone.

The new API is officially:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident)
{
  /*
   * Uncomment to prevent agent from getting unloaded after returning from this function.
   * This also means the `uninjected` signal is not emitted, and Frida will stop keeping track
   * of this injected thread.
   */
  // *stay_resident = true;
}
But internally it is actually:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident,
                  const GumMemoryRange * mapped_range)
{
  *stay_resident = true;
}
Though I think we should consider the third argument public now, as it's useful for some applications, e.g. using Stalker.
@s1341: I didn't dare to port the Linux/MIPS and QNX/ARM portions as I'm not able to test them, but as those are passing NULL, NULL for the last two arguments, it just means that stay_resident is unavailable for those ports (for now).",True,{}
frida/frida-core,https://github.com/frida/frida-core,96,2016-12-14T05:13:35Z,2016-12-14T05:23:51Z,2016-12-14T14:19:52Z,MERGED,True,986,728,32,https://github.com/oleavr,Improve injectors,15,[],https://github.com/frida/frida-core/pull/96,https://github.com/s1341,2,https://github.com/frida/frida-core/pull/96#issuecomment-266951559,"Avoid private APIs on i/macOS
Fix stability issue on i/macOS
Fix Mach port leak on i/macOS
Revise the agent entrypoint API to allow agents to stay resident. The old API was officially:

void
frida_agent_main (const char * data)
{
  /*
   * Agent will stay loaded until this function returns, after which Frida
   * will emit the `uinjected` signal.
   */
}
But it actually had two extra arguments for internal use:
void
frida_agent_main (const char * data,
                  const GumMemoryRange * mapped_range,
                  GumThreadId parent_thread_id)
{
}

mapped_range: was (and is still) used to tell Stalker to ignore our memory range when our shared library was manually mapped into the process. This means it is NULL if it was loaded by e.g. dlopen(), in which case frida-agent walks the loaded libraries to find the memory range.
parent_thread_id: on i/macOS we used to have a Mach thread sticking around, waiting for our POSIX thread to stop. We needed to know its thread ID so we could exclude it from Process.enumerateThreads(). As of this PR, this thread no longer sticks around, so this argument is now gone.

The new API is officially:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident)
{
  /*
   * Uncomment to prevent agent from getting unloaded after returning from this function.
   * This also means the `uninjected` signal is not emitted, and Frida will stop keeping track
   * of this injected thread.
   */
  // *stay_resident = true;
}
But internally it is actually:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident,
                  const GumMemoryRange * mapped_range)
{
  *stay_resident = true;
}
Though I think we should consider the third argument public now, as it's useful for some applications, e.g. using Stalker.
@s1341: I didn't dare to port the Linux/MIPS and QNX/ARM portions as I'm not able to test them, but as those are passing NULL, NULL for the last two arguments, it just means that stay_resident is unavailable for those ports (for now).","@oleavr I don't currently have access to test devices for linux-arm, linux-mips or qnx-arm. I suggest we leave those as is for the moment.",True,{}
frida/frida-core,https://github.com/frida/frida-core,96,2016-12-14T05:13:35Z,2016-12-14T05:23:51Z,2016-12-14T14:19:52Z,MERGED,True,986,728,32,https://github.com/oleavr,Improve injectors,15,[],https://github.com/frida/frida-core/pull/96,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/96#issuecomment-267045039,"Avoid private APIs on i/macOS
Fix stability issue on i/macOS
Fix Mach port leak on i/macOS
Revise the agent entrypoint API to allow agents to stay resident. The old API was officially:

void
frida_agent_main (const char * data)
{
  /*
   * Agent will stay loaded until this function returns, after which Frida
   * will emit the `uinjected` signal.
   */
}
But it actually had two extra arguments for internal use:
void
frida_agent_main (const char * data,
                  const GumMemoryRange * mapped_range,
                  GumThreadId parent_thread_id)
{
}

mapped_range: was (and is still) used to tell Stalker to ignore our memory range when our shared library was manually mapped into the process. This means it is NULL if it was loaded by e.g. dlopen(), in which case frida-agent walks the loaded libraries to find the memory range.
parent_thread_id: on i/macOS we used to have a Mach thread sticking around, waiting for our POSIX thread to stop. We needed to know its thread ID so we could exclude it from Process.enumerateThreads(). As of this PR, this thread no longer sticks around, so this argument is now gone.

The new API is officially:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident)
{
  /*
   * Uncomment to prevent agent from getting unloaded after returning from this function.
   * This also means the `uninjected` signal is not emitted, and Frida will stop keeping track
   * of this injected thread.
   */
  // *stay_resident = true;
}
But internally it is actually:
#include <stdbool.h>

void
frida_agent_main (const char * data,
                  bool * stay_resident,
                  const GumMemoryRange * mapped_range)
{
  *stay_resident = true;
}
Though I think we should consider the third argument public now, as it's useful for some applications, e.g. using Stalker.
@s1341: I didn't dare to port the Linux/MIPS and QNX/ARM portions as I'm not able to test them, but as those are passing NULL, NULL for the last two arguments, it just means that stay_resident is unavailable for those ports (for now).",@s1341 Sounds like a good plan.,True,{}
frida/frida-core,https://github.com/frida/frida-core,100,2017-01-02T19:50:25Z,2017-01-02T19:50:56Z,2017-01-02T19:50:59Z,MERGED,True,439,868,13,https://github.com/oleavr,Rework iOS app launching to avoid CydiaSubstrate,1,[],https://github.com/frida/frida-core/pull/100,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/100,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,105,2017-02-07T11:03:17Z,2017-02-07T11:40:38Z,2017-02-07T11:40:38Z,MERGED,True,8,2,1,https://github.com/mrmacete,Avoid racing on agent thread creation / monitoring,2,[],https://github.com/frida/frida-core/pull/105,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/105,"Resuming the newly created thread only after dispatch_resume greatly decreases the
probability to miss the DISPATCH_MACH_SEND_DEAD event.","Resuming the newly created thread only after dispatch_resume greatly decreases the
probability to miss the DISPATCH_MACH_SEND_DEAD event.",True,{}
frida/frida-core,https://github.com/frida/frida-core,105,2017-02-07T11:03:17Z,2017-02-07T11:40:38Z,2017-02-07T11:40:38Z,MERGED,True,8,2,1,https://github.com/mrmacete,Avoid racing on agent thread creation / monitoring,2,[],https://github.com/frida/frida-core/pull/105,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/105#issuecomment-277969803,"Resuming the newly created thread only after dispatch_resume greatly decreases the
probability to miss the DISPATCH_MACH_SEND_DEAD event.",ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,109,2017-02-18T01:19:38Z,2017-02-18T18:14:30Z,2017-02-18T18:14:32Z,MERGED,True,34456,3490,196,https://github.com/oleavr,Add support for SELinux policy patching on Android N,1,[],https://github.com/frida/frida-core/pull/109,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/109,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,115,2017-03-24T03:29:13Z,2017-03-24T14:05:04Z,2017-03-24T14:05:04Z,MERGED,True,332,49,1,https://github.com/mrmacete,Move hardware breakpoint to libSystem initializer,4,[],https://github.com/frida/frida-core/pull/115,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/115,"find the libSystem.B.dylib module in memory
find its initializer (is the only one in __mod_init_func section)
find the exit point of the initializer by disassembling the function code
place the breakpoint there

This allows earlier instrumentation than before.","find the libSystem.B.dylib module in memory
find its initializer (is the only one in __mod_init_func section)
find the exit point of the initializer by disassembling the function code
place the breakpoint there

This allows earlier instrumentation than before.",True,"{'HEART': ['https://github.com/alvarofe', 'https://github.com/oleavr']}"
frida/frida-core,https://github.com/frida/frida-core,115,2017-03-24T03:29:13Z,2017-03-24T14:05:04Z,2017-03-24T14:05:04Z,MERGED,True,332,49,1,https://github.com/mrmacete,Move hardware breakpoint to libSystem initializer,4,[],https://github.com/frida/frida-core/pull/115,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/115#issuecomment-289025742,"find the libSystem.B.dylib module in memory
find its initializer (is the only one in __mod_init_func section)
find the exit point of the initializer by disassembling the function code
place the breakpoint there

This allows earlier instrumentation than before.","ehehe ooops, i also could have seen those too",True,{}
frida/frida-core,https://github.com/frida/frida-core,115,2017-03-24T03:29:13Z,2017-03-24T14:05:04Z,2017-03-24T14:05:04Z,MERGED,True,332,49,1,https://github.com/mrmacete,Move hardware breakpoint to libSystem initializer,4,[],https://github.com/frida/frida-core/pull/115,https://github.com/mrmacete,3,https://github.com/frida/frida-core/pull/115#issuecomment-289027583,"find the libSystem.B.dylib module in memory
find its initializer (is the only one in __mod_init_func section)
find the exit point of the initializer by disassembling the function code
place the breakpoint there

This allows earlier instrumentation than before.",it's amazing how a diff can look ugly just for an indentation shift,True,{}
frida/frida-core,https://github.com/frida/frida-core,115,2017-03-24T03:29:13Z,2017-03-24T14:05:04Z,2017-03-24T14:05:04Z,MERGED,True,332,49,1,https://github.com/mrmacete,Move hardware breakpoint to libSystem initializer,4,[],https://github.com/frida/frida-core/pull/115,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/115#issuecomment-289031032,"find the libSystem.B.dylib module in memory
find its initializer (is the only one in __mod_init_func section)
find the exit point of the initializer by disassembling the function code
place the breakpoint there

This allows earlier instrumentation than before.",Yeah kinda weird that GitHub's viewer isn't smart enough by now to show indentation changes considering how it's highlighting changed words.,True,{}
frida/frida-core,https://github.com/frida/frida-core,116,2017-03-25T02:28:30Z,2017-03-25T11:31:44Z,2017-03-25T11:31:44Z,MERGED,True,158,43,1,https://github.com/mrmacete,Fix deadlock caused by breaking inside libSystem initialization,2,[],https://github.com/frida/frida-core/pull/116,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/116,"Place a second hardware breakpoint at the end of dylb's ImageLoader::recursiveInitialization to let it release the spinlock and notify the end of libSystem initialization. This is done reusing the live disassembly tool. dyld is found in memory like before, going back from main thread's instruction pointer.","Place a second hardware breakpoint at the end of dylb's ImageLoader::recursiveInitialization to let it release the spinlock and notify the end of libSystem initialization. This is done reusing the live disassembly tool. dyld is found in memory like before, going back from main thread's instruction pointer.",True,{}
frida/frida-core,https://github.com/frida/frida-core,117,2017-03-27T21:48:01Z,2017-03-27T23:41:27Z,2017-03-27T23:41:27Z,MERGED,True,10,0,1,https://github.com/mrmacete,Fix regression on iOS 8.4,2,[],https://github.com/frida/frida-core/pull/117,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/117,"dyld's ImageLoader::recursiveInitialization has a different signature than on following versions of iOS
improve error handling when that symbol cannot be resolved","dyld's ImageLoader::recursiveInitialization has a different signature than on following versions of iOS
improve error handling when that symbol cannot be resolved",True,{}
frida/frida-core,https://github.com/frida/frida-core,117,2017-03-27T21:48:01Z,2017-03-27T23:41:27Z,2017-03-27T23:41:27Z,MERGED,True,10,0,1,https://github.com/mrmacete,Fix regression on iOS 8.4,2,[],https://github.com/frida/frida-core/pull/117,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/117#issuecomment-289618230,"dyld's ImageLoader::recursiveInitialization has a different signature than on following versions of iOS
improve error handling when that symbol cannot be resolved",Thanks! üí•,True,{}
frida/frida-core,https://github.com/frida/frida-core,119,2017-04-01T19:03:01Z,2017-04-01T22:24:22Z,2017-04-01T22:24:22Z,MERGED,True,468,245,1,https://github.com/mrmacete,Rewrite early instrumentation using thread hijacking,1,[],https://github.com/frida/frida-core/pull/119,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/119,"Get hold of the main thread to read its instruction pointer, which will
tell us where dyld is in memory.
Walk backwards to find dyld's Mach-O header.
Walk its symbols and find a function that's called at a point where the
process is sufficiently initialized to load frida-agent, but early enough
so that app's initializer still didn't run. In this case we choose
dyld::initializeMainExecutable(). At the beginning of this function dyld is
initialized but libSystem is still missing.
Set a hardware breakpoint at the beginning of this function.
Swap out the thread's exception ports with our own.
Resume the task.
Wait until we get a message on our exception port, meaning our breakpoint
was hit.
Hijack thread's instruction pointer to call dlopen(""/usr/lib/libSystem.B.dylib"")
and then return back to the beginning of initializeMainExecutable() and restore
previous thread state.
Swap back the thread's orginal exception ports.
Clear the hardware breakpoint by restoring the thread's debug registers.

It's actually more complex than that, because:

This doesn't work on newer versions of dyld because to call dlopen() it's
necessary to registerThreadHelpers() first, which is normally done by libSystem
itself during its initialization.
To overcome this catch-22 we alloc a fake LibSystemHelpers object and register
it (also by hijacking thread's instruction pointer like descripted above).
On older dyld versions, registering helpers before loading libSystem led to
crashes, so we detect this condition and unset the helpers before calling dlopen(),
by writing a NULL directly into the global dyld::gLibSystemHelpers because in
some dyld versions calling registerThreadHelpers(NULL) caused a NULL dereference.
At the end of dlopen(), we set the global libSystemInitialized flag present in
the global dyld::qProcessInfo structure, because on newer dyld versions that doesn't
happen automatically due to the presence of our fake helpers.
One of the functions provided by the helper should return a buffer for the errors,
but since our fake helpers object implements its functions only using a return,
it will not return any buffer. To avoid this to happen, we set a breakpoint also
on dyld:dlerrorClear() function and inject an immediate return,
effectively disabling the function.
At the end of dlopen() we finally deallocate our fake helpers (because now they've
been replaced by real libSystem ones) and the string we used as a parameter for dlopen.","Get hold of the main thread to read its instruction pointer, which will
tell us where dyld is in memory.
Walk backwards to find dyld's Mach-O header.
Walk its symbols and find a function that's called at a point where the
process is sufficiently initialized to load frida-agent, but early enough
so that app's initializer still didn't run. In this case we choose
dyld::initializeMainExecutable(). At the beginning of this function dyld is
initialized but libSystem is still missing.
Set a hardware breakpoint at the beginning of this function.
Swap out the thread's exception ports with our own.
Resume the task.
Wait until we get a message on our exception port, meaning our breakpoint
was hit.
Hijack thread's instruction pointer to call dlopen(""/usr/lib/libSystem.B.dylib"")
and then return back to the beginning of initializeMainExecutable() and restore
previous thread state.
Swap back the thread's orginal exception ports.
Clear the hardware breakpoint by restoring the thread's debug registers.

It's actually more complex than that, because:

This doesn't work on newer versions of dyld because to call dlopen() it's
necessary to registerThreadHelpers() first, which is normally done by libSystem
itself during its initialization.
To overcome this catch-22 we alloc a fake LibSystemHelpers object and register
it (also by hijacking thread's instruction pointer like descripted above).
On older dyld versions, registering helpers before loading libSystem led to
crashes, so we detect this condition and unset the helpers before calling dlopen(),
by writing a NULL directly into the global dyld::gLibSystemHelpers because in
some dyld versions calling registerThreadHelpers(NULL) caused a NULL dereference.
At the end of dlopen(), we set the global libSystemInitialized flag present in
the global dyld::qProcessInfo structure, because on newer dyld versions that doesn't
happen automatically due to the presence of our fake helpers.
One of the functions provided by the helper should return a buffer for the errors,
but since our fake helpers object implements its functions only using a return,
it will not return any buffer. To avoid this to happen, we set a breakpoint also
on dyld:dlerrorClear() function and inject an immediate return,
effectively disabling the function.
At the end of dlopen() we finally deallocate our fake helpers (because now they've
been replaced by real libSystem ones) and the string we used as a parameter for dlopen.",True,"{'HOORAY': ['https://github.com/oleavr', 'https://github.com/dweinstein'], 'HEART': ['https://github.com/oleavr', 'https://github.com/dweinstein']}"
frida/frida-core,https://github.com/frida/frida-core,119,2017-04-01T19:03:01Z,2017-04-01T22:24:22Z,2017-04-01T22:24:22Z,MERGED,True,468,245,1,https://github.com/mrmacete,Rewrite early instrumentation using thread hijacking,1,[],https://github.com/frida/frida-core/pull/119,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/119#issuecomment-290945520,"Get hold of the main thread to read its instruction pointer, which will
tell us where dyld is in memory.
Walk backwards to find dyld's Mach-O header.
Walk its symbols and find a function that's called at a point where the
process is sufficiently initialized to load frida-agent, but early enough
so that app's initializer still didn't run. In this case we choose
dyld::initializeMainExecutable(). At the beginning of this function dyld is
initialized but libSystem is still missing.
Set a hardware breakpoint at the beginning of this function.
Swap out the thread's exception ports with our own.
Resume the task.
Wait until we get a message on our exception port, meaning our breakpoint
was hit.
Hijack thread's instruction pointer to call dlopen(""/usr/lib/libSystem.B.dylib"")
and then return back to the beginning of initializeMainExecutable() and restore
previous thread state.
Swap back the thread's orginal exception ports.
Clear the hardware breakpoint by restoring the thread's debug registers.

It's actually more complex than that, because:

This doesn't work on newer versions of dyld because to call dlopen() it's
necessary to registerThreadHelpers() first, which is normally done by libSystem
itself during its initialization.
To overcome this catch-22 we alloc a fake LibSystemHelpers object and register
it (also by hijacking thread's instruction pointer like descripted above).
On older dyld versions, registering helpers before loading libSystem led to
crashes, so we detect this condition and unset the helpers before calling dlopen(),
by writing a NULL directly into the global dyld::gLibSystemHelpers because in
some dyld versions calling registerThreadHelpers(NULL) caused a NULL dereference.
At the end of dlopen(), we set the global libSystemInitialized flag present in
the global dyld::qProcessInfo structure, because on newer dyld versions that doesn't
happen automatically due to the presence of our fake helpers.
One of the functions provided by the helper should return a buffer for the errors,
but since our fake helpers object implements its functions only using a return,
it will not return any buffer. To avoid this to happen, we set a breakpoint also
on dyld:dlerrorClear() function and inject an immediate return,
effectively disabling the function.
At the end of dlopen() we finally deallocate our fake helpers (because now they've
been replaced by real libSystem ones) and the string we used as a parameter for dlopen.",pushed --force to fix typos in commit message üòä,True,{}
frida/frida-core,https://github.com/frida/frida-core,119,2017-04-01T19:03:01Z,2017-04-01T22:24:22Z,2017-04-01T22:24:22Z,MERGED,True,468,245,1,https://github.com/mrmacete,Rewrite early instrumentation using thread hijacking,1,[],https://github.com/frida/frida-core/pull/119,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/119#issuecomment-290950860,"Get hold of the main thread to read its instruction pointer, which will
tell us where dyld is in memory.
Walk backwards to find dyld's Mach-O header.
Walk its symbols and find a function that's called at a point where the
process is sufficiently initialized to load frida-agent, but early enough
so that app's initializer still didn't run. In this case we choose
dyld::initializeMainExecutable(). At the beginning of this function dyld is
initialized but libSystem is still missing.
Set a hardware breakpoint at the beginning of this function.
Swap out the thread's exception ports with our own.
Resume the task.
Wait until we get a message on our exception port, meaning our breakpoint
was hit.
Hijack thread's instruction pointer to call dlopen(""/usr/lib/libSystem.B.dylib"")
and then return back to the beginning of initializeMainExecutable() and restore
previous thread state.
Swap back the thread's orginal exception ports.
Clear the hardware breakpoint by restoring the thread's debug registers.

It's actually more complex than that, because:

This doesn't work on newer versions of dyld because to call dlopen() it's
necessary to registerThreadHelpers() first, which is normally done by libSystem
itself during its initialization.
To overcome this catch-22 we alloc a fake LibSystemHelpers object and register
it (also by hijacking thread's instruction pointer like descripted above).
On older dyld versions, registering helpers before loading libSystem led to
crashes, so we detect this condition and unset the helpers before calling dlopen(),
by writing a NULL directly into the global dyld::gLibSystemHelpers because in
some dyld versions calling registerThreadHelpers(NULL) caused a NULL dereference.
At the end of dlopen(), we set the global libSystemInitialized flag present in
the global dyld::qProcessInfo structure, because on newer dyld versions that doesn't
happen automatically due to the presence of our fake helpers.
One of the functions provided by the helper should return a buffer for the errors,
but since our fake helpers object implements its functions only using a return,
it will not return any buffer. To avoid this to happen, we set a breakpoint also
on dyld:dlerrorClear() function and inject an immediate return,
effectively disabling the function.
At the end of dlopen() we finally deallocate our fake helpers (because now they've
been replaced by real libSystem ones) and the string we used as a parameter for dlopen.",Thanks! :),True,{}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/esanfelix,1,https://github.com/frida/frida-core/pull/126,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.","This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.",True,{}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/esanfelix,2,https://github.com/frida/frida-core/pull/126#issuecomment-301272937,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.","I think I covered it all. I get some warnings on usage of unassigned variables,  but I believe they should always be assigned if try_get_listen_address() returns true.
Are you fine with that, or do you suggest adding any checks or anything else? Note these are the first few lines of vala code I ever touch, so I might very well not be doing things in the best possible way.",True,{}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/126#issuecomment-301273548,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.","I get some warnings on usage of unassigned variables, but I believe they
should always be assigned if try_get_listen_address() returns true.

Just assign them to null and 0 to make the compiler happy. (We should keep the code warning-free, even if this is a case where the compiler's static analysis isn't adequate.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/126#issuecomment-301273575,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.",Well done btw! üëç,True,{'THUMBS_UP': ['https://github.com/esanfelix']}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/esanfelix,5,https://github.com/frida/frida-core/pull/126#issuecomment-301293384,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.","Btw is there any doc on coding guidelines so we can perhaps save some review rounds in future PRs?
Like where to put/remove white-spaces, ordering of variables in constructors and declarations should match, etc etc.",True,{}
frida/frida-core,https://github.com/frida/frida-core,126,2017-05-13T11:18:39Z,2017-05-14T12:57:48Z,2017-05-14T12:57:48Z,MERGED,True,45,9,1,https://github.com/esanfelix,Add FRIDA_GADGET_LISTEN_ADDRESS environment variable to frida-gadget,5,[],https://github.com/frida/frida-core/pull/126,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/126#issuecomment-301311002,"This change introduces FRIDA_GADGET_LISTEN_ADDRESS environment variable. If the variable is set, frida-gadget will use it as a listen address. Otherwise the default localhost:27042 is used.
For example, the following makes it listen on any interface:
FRIDA_GADGET_LISTEN_ADDRESS=""tcp:host=192.168.178.11,port=27042"" DYLD_INSERT_LIBRARIES=./build/frida-macos-universal/lib/FridaGadget.dylib ./build/frida-macos-universal/bin/frida-server

And then:
‚ûú  Desktop netstat -ant | grep 27042
tcp4       0      0  192.168.178.11.27042   *.*                    LISTEN
‚ûú  Desktop

This allows using frida-gadget with remote systems (e.g. a linux armhf system) that do not have ""USB"" support without doing any network/vm-level forwarding.","Btw is there any doc on coding guidelines so we can perhaps save some review rounds in future PRs?
Like where to put/remove white-spaces, ordering of variables in constructors and declarations should match, etc etc.

There is none I'm afraid, but I've been meaning to write that up, just haven't gotten around to it yet.",True,{'THUMBS_UP': ['https://github.com/esanfelix']}
frida/frida-core,https://github.com/frida/frida-core,129,2017-05-20T01:17:00Z,2017-05-20T01:17:14Z,2017-05-20T01:17:16Z,MERGED,True,2471,358,70,https://github.com/oleavr,Port to Meson,3,[],https://github.com/frida/frida-core/pull/129,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/129,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,136,2017-07-12T18:13:44Z,2017-07-12T18:14:08Z,2017-07-12T18:14:11Z,MERGED,True,654,7,9,https://github.com/oleavr,Implement a JIT allocation server on iOS,2,[],https://github.com/frida/frida-core/pull/136,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/136,"This means Gum can talk to it to allocate RWX pages from non-entitled
processes.
Kudos to qwertyoruiop for the original idea in JITSupport ‚ù§Ô∏è.","This means Gum can talk to it to allocate RWX pages from non-entitled
processes.
Kudos to qwertyoruiop for the original idea in JITSupport ‚ù§Ô∏è.",True,{'THUMBS_UP': ['https://github.com/stek29']}
frida/frida-core,https://github.com/frida/frida-core,144,2017-09-20T11:02:51Z,2017-09-20T11:03:14Z,2017-09-20T11:03:16Z,MERGED,True,254,86,1,https://github.com/oleavr,Read configuration from <gadget>.config if present,4,[],https://github.com/frida/frida-core/pull/144,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/144,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,145,2017-10-01T10:16:15Z,2017-10-11T17:31:27Z,2017-10-11T17:31:27Z,MERGED,True,2,2,2,https://github.com/wallneradam,"On MacOS, create a hidden subdirectory to use for tmp",1,[],https://github.com/frida/frida-core/pull/145,https://github.com/wallneradam,1,https://github.com/frida/frida-core/pull/145,"This way the trash icon can remain empty, so you don't want to always empty it.","This way the trash icon can remain empty, so you don't want to always empty it.",True,{}
frida/frida-core,https://github.com/frida/frida-core,145,2017-10-01T10:16:15Z,2017-10-11T17:31:27Z,2017-10-11T17:31:27Z,MERGED,True,2,2,2,https://github.com/wallneradam,"On MacOS, create a hidden subdirectory to use for tmp",1,[],https://github.com/frida/frida-core/pull/145,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/145#issuecomment-335886739,"This way the trash icon can remain empty, so you don't want to always empty it.","Good idea, thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,150,2017-10-10T20:22:44Z,2017-10-11T17:30:28Z,2017-10-11T20:54:57Z,MERGED,True,36,9,2,https://github.com/stek29,XNU Agent reload.sh and readme improvements,2,[],https://github.com/frida/frida-core/pull/150,https://github.com/stek29,1,https://github.com/frida/frida-core/pull/150,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/viniciusmarangoni,1,https://github.com/frida/frida-core/pull/156,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)","Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/156#issuecomment-353338766,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",Thanks a lot for doing this by the way! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/viniciusmarangoni,3,https://github.com/frida/frida-core/pull/156#issuecomment-354924363,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",I will try to fix the recommendations in this week. Thanks a lot.,True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/viniciusmarangoni,4,https://github.com/frida/frida-core/pull/156#issuecomment-354926664,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",Seems ok now. Could you please check it? Thanks.,True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/viniciusmarangoni,5,https://github.com/frida/frida-core/pull/156#issuecomment-358113956,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",Seems good now :),True,{}
frida/frida-core,https://github.com/frida/frida-core,156,2017-11-13T22:49:55Z,2018-01-16T21:48:45Z,2018-01-16T21:48:45Z,MERGED,True,11,0,1,https://github.com/viniciusmarangoni,Trick to load .config.so file in ANDROID instead of .config,5,[],https://github.com/frida/frida-core/pull/156,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/156#issuecomment-358118132,"Frida gadget looks for a config file with the same name of the lib. In Android, during installation, the files that do not starts with ""lib"" and do not ends with "".so"" are not copied to libs folder. With this workaround the gadget will look to .config.so instead of .config
So, if your gadget file name is ""libfrida-gadget.so"", the gadget will look for ""libfrida-gadget.config.so"" config file.
(Tested in Android 7.0)",Thanks! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/csftech,1,https://github.com/frida/frida-core/pull/160,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.",True,"{'HOORAY': ['https://github.com/snooze6', 'https://github.com/oleavr'], 'HEART': ['https://github.com/snooze6', 'https://github.com/oleavr'], 'THUMBS_UP': ['https://github.com/snooze6', 'https://github.com/oleavr']}"
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/160#issuecomment-354453745,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","Awesome! ü§ò
Did you get a chance to test this on a 64-bit device? Otherwise I can give that a try.",True,{}
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/csftech,3,https://github.com/frida/frida-core/pull/160#issuecomment-354455673,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","I forgot to say, I tested it on iPad mini 3 too, and it works.
It should also work on 64-bit device, but more testing would be better.",True,{}
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/160#issuecomment-354455913,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","Ah, nice! Isn't iPad mini 3 a 64-bit device? Which iOS version did you test on?",True,{}
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/csftech,5,https://github.com/frida/frida-core/pull/160#issuecomment-354457872,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","Yes, it is. iOS 8.1.3.
I have no 64-bit iOS 9+ device.",True,{}
frida/frida-core,https://github.com/frida/frida-core,160,2017-12-29T09:05:15Z,2017-12-29T15:22:11Z,2017-12-30T03:03:19Z,MERGED,True,6,6,1,https://github.com/csftech,Fix legacy iOS 32-bit device(pre-armv8) spawn issue,1,[],https://github.com/frida/frida-core/pull/160,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/160#issuecomment-354458892,"Fix:

frida/frida#376
frida/frida#373
frida/frida#245
frida/frida#211
#159
#102
frida/frida-python#102

Write-up:
Please view the newer iPhoneOS.sdk(e.g. iPhoneOS10.3.sdk) headers and XNU source.
(iPhoneOS.sdk/usr/include/mach/arm/_structs.h,  iPhoneOS.sdk/usr/include/mach/arm/thread_status.h, apple/darwin-xnu/blob/master/osfmk/arm/machine_task.c)
Frida use ARM_DEBUG_STATE32 instead of ARM_DEBUG_STATE, it causes the legacy iOS kernel task switch return KERN_INVALID_ARGUMENT, and make CHECK_MACH_RESULT go to handle_mach_error.
_structs.h:
typedef _STRUCT_ARM_DEBUG_STATE32		arm_debug_state32_t;
typedef _STRUCT_ARM_DEBUG_STATE64		arm_debug_state64_t;

/*
 * Otherwise not ARM64 kernel and we must preserve legacy ARM definitions of
 * arm_debug_state for binary compatability of userland consumers of this file.
 */
#if defined(__arm__)
typedef _STRUCT_ARM_DEBUG_STATE			arm_debug_state_t;
#elif defined(__arm64__)
typedef _STRUCT_ARM_LEGACY_DEBUG_STATE		arm_debug_state_t;
#else
#error Undefined architecture
#endif

...

#define ARM_DEBUG_STATE_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE32_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state32_t)/sizeof(uint32_t)))

#define ARM_DEBUG_STATE64_COUNT ((mach_msg_type_number_t) \
   (sizeof (arm_debug_state64_t)/sizeof(uint32_t)))
thread_status.h:
#define ARM_DEBUG_STATE			4 /* pre-armv8 */

...

/* API */
#define ARM_DEBUG_STATE32		14
#define ARM_DEBUG_STATE64		15
Test:
Tested on iPhone4,1 9.0.2.","Ok, perfect! Let's get this merged. ü§ò",True,{'THUMBS_UP': ['https://github.com/csftech']}
frida/frida-core,https://github.com/frida/frida-core,162,2018-01-12T15:31:32Z,2018-01-16T16:06:51Z,2018-01-16T16:06:52Z,MERGED,True,1,1,1,https://github.com/madushan1000,fixes the frida agent injection bug on android 8 arm 32bit processes,1,[],https://github.com/frida/frida-core/pull/162,https://github.com/madushan1000,1,https://github.com/frida/frida-core/pull/162,This fixed the arm 32bit processes crashing on android 8(O) after the last release.,This fixed the arm 32bit processes crashing on android 8(O) after the last release.,True,{}
frida/frida-core,https://github.com/frida/frida-core,162,2018-01-12T15:31:32Z,2018-01-16T16:06:51Z,2018-01-16T16:06:52Z,MERGED,True,1,1,1,https://github.com/madushan1000,fixes the frida agent injection bug on android 8 arm 32bit processes,1,[],https://github.com/frida/frida-core/pull/162,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/162#issuecomment-358012402,This fixed the arm 32bit processes crashing on android 8(O) after the last release.,Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,165,2018-01-25T06:14:29Z,2018-01-26T18:19:48Z,2018-02-12T13:02:26Z,MERGED,True,2,2,2,https://github.com/csftech,Fix iOS 10 device spawn compatibility,1,[],https://github.com/frida/frida-core/pull/165,https://github.com/csftech,1,https://github.com/frida/frida-core/pull/165,"Issue:
rawIdentifier is a little different(tested on iPhone5,2 iOS 10.3.3), take a look at the following.
$ frida -U -l launchd.js -p 1
     ____
    / _  |   Frida 10.6.40 - A world-class dynamic instrumentation framework
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at http://www.frida.re/docs/home/
Attaching... 
[iPhone::PID::1]-> path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.google.chrome.ios[0xefd8][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.AppStore[0xc73][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.Preferences[0x4443][64]

There is an extra string ""[64]"", and at frida-core/src/darwin/agent/launchd.js line 55, lastIndexOf catch the last '[', thus substring produces incorrect identifier.
Solution:
Simply change lastIndexOf to indexOf.","Issue:
rawIdentifier is a little different(tested on iPhone5,2 iOS 10.3.3), take a look at the following.
$ frida -U -l launchd.js -p 1
     ____
    / _  |   Frida 10.6.40 - A world-class dynamic instrumentation framework
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at http://www.frida.re/docs/home/
Attaching... 
[iPhone::PID::1]-> path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.google.chrome.ios[0xefd8][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.AppStore[0xc73][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.Preferences[0x4443][64]

There is an extra string ""[64]"", and at frida-core/src/darwin/agent/launchd.js line 55, lastIndexOf catch the last '[', thus substring produces incorrect identifier.
Solution:
Simply change lastIndexOf to indexOf.",True,{}
frida/frida-core,https://github.com/frida/frida-core,165,2018-01-25T06:14:29Z,2018-01-26T18:19:48Z,2018-02-12T13:02:26Z,MERGED,True,2,2,2,https://github.com/csftech,Fix iOS 10 device spawn compatibility,1,[],https://github.com/frida/frida-core/pull/165,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/165#issuecomment-360863016,"Issue:
rawIdentifier is a little different(tested on iPhone5,2 iOS 10.3.3), take a look at the following.
$ frida -U -l launchd.js -p 1
     ____
    / _  |   Frida 10.6.40 - A world-class dynamic instrumentation framework
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at http://www.frida.re/docs/home/
Attaching... 
[iPhone::PID::1]-> path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.google.chrome.ios[0xefd8][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.AppStore[0xc73][64]
path = /usr/libexec/xpcproxy
rawIdentifier = UIKitApplication:com.apple.Preferences[0x4443][64]

There is an extra string ""[64]"", and at frida-core/src/darwin/agent/launchd.js line 55, lastIndexOf catch the last '[', thus substring produces incorrect identifier.
Solution:
Simply change lastIndexOf to indexOf.","Awesome, thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,167,2018-02-14T10:53:12Z,2018-02-14T17:29:45Z,2018-02-14T17:29:45Z,CLOSED,False,8,3,1,https://github.com/0xh0b0,support bytecode loading for gadget,1,[],https://github.com/frida/frida-core/pull/167,https://github.com/0xh0b0,1,https://github.com/frida/frida-core/pull/167,"Detects script type by looking for duktape bytecode magic value
closes frida/frida#427","Detects script type by looking for duktape bytecode magic value
closes frida/frida#427",True,{}
frida/frida-core,https://github.com/frida/frida-core,167,2018-02-14T10:53:12Z,2018-02-14T17:29:45Z,2018-02-14T17:29:45Z,CLOSED,False,8,3,1,https://github.com/0xh0b0,support bytecode loading for gadget,1,[],https://github.com/frida/frida-core/pull/167,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/167#issuecomment-365683148,"Detects script type by looking for duktape bytecode magic value
closes frida/frida#427",Thanks a lot! I've merged this fix with two tiny style tweaks. Releasing 10.6.53 right now with this change.,True,{}
frida/frida-core,https://github.com/frida/frida-core,168,2018-02-14T17:23:24Z,2018-02-14T17:23:38Z,2018-02-14T17:23:41Z,MERGED,True,10,3,1,https://github.com/oleavr,Add support for bytecode loading in frida-gadget,1,[],https://github.com/frida/frida-core/pull/168,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/168,Fixes frida/frida#427.,Fixes frida/frida#427.,True,{}
frida/frida-core,https://github.com/frida/frida-core,169,2018-02-15T08:51:34Z,2018-02-15T21:12:24Z,2018-02-15T21:12:24Z,MERGED,True,1,1,1,https://github.com/0xh0b0,FIX: access array out of range,1,[],https://github.com/frida/frida-core/pull/169,https://github.com/0xh0b0,1,https://github.com/frida/frida-core/pull/169,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,169,2018-02-15T08:51:34Z,2018-02-15T21:12:24Z,2018-02-15T21:12:24Z,MERGED,True,1,1,1,https://github.com/0xh0b0,FIX: access array out of range,1,[],https://github.com/frida/frida-core/pull/169,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/169#issuecomment-366062915,,"Oops, I also missed this. :-) Thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,170,2018-02-18T14:03:20Z,2018-02-18T14:03:51Z,2018-02-18T14:13:07Z,CLOSED,False,19,8,2,https://github.com/0xh0b0,Pushed by mistake,5,[],https://github.com/frida/frida-core/pull/170,https://github.com/0xh0b0,1,https://github.com/frida/frida-core/pull/170,pushed by mistake; please delete,pushed by mistake; please delete,True,{}
frida/frida-core,https://github.com/frida/frida-core,174,2018-03-12T16:45:57Z,2018-03-12T19:02:44Z,2018-03-12T19:02:44Z,MERGED,True,12,11,2,https://github.com/mrmacete,Potentially cloak multiple ranges from threads,5,[],https://github.com/frida/frida-core/pull/174,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/174,This uses the api changed in frida/frida-gum#268 to cloak more than one range for threads if implemented in the backend.,This uses the api changed in frida/frida-gum#268 to cloak more than one range for threads if implemented in the backend.,True,{}
frida/frida-core,https://github.com/frida/frida-core,175,2018-03-13T18:25:51Z,2018-03-13T20:04:20Z,2018-03-13T20:04:22Z,MERGED,True,112,4,4,https://github.com/oleavr,Add support for Electra on iOS,2,[],https://github.com/frida/frida-core/pull/175,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/175,"attach()
 spawn()","attach()
 spawn()",True,{}
frida/frida-core,https://github.com/frida/frida-core,177,2018-03-23T17:56:20Z,2018-03-24T10:59:46Z,2018-03-24T10:59:46Z,MERGED,True,44,4,2,https://github.com/mrmacete,Allow mapped_range to be passed on gadget load(),2,[],https://github.com/frida/frida-core/pull/177,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/177,"for proper cloaking
implemented for i/macOS
as a special entry in apple[] array
if that‚Äôs not present, then fallback to usual behavior","for proper cloaking
implemented for i/macOS
as a special entry in apple[] array
if that‚Äôs not present, then fallback to usual behavior",True,{}
frida/frida-core,https://github.com/frida/frida-core,178,2018-03-27T19:10:30Z,2018-03-31T21:29:31Z,2018-03-31T21:29:33Z,MERGED,True,2683,1493,54,https://github.com/oleavr,Add fork()-handling,2,[],https://github.com/frida/frida-core/pull/178,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/178,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,180,2018-04-06T00:20:44Z,2018-04-06T00:33:32Z,2018-04-06T00:33:41Z,MERGED,True,1226,664,25,https://github.com/oleavr,Fix the Linux backend,9,[],https://github.com/frida/frida-core/pull/180,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/180,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,182,2018-04-13T23:17:22Z,2018-04-13T23:18:04Z,2018-04-13T23:18:06Z,MERGED,True,1048,1568,26,https://github.com/oleavr,Improve stability on Android,22,[],https://github.com/frida/frida-core/pull/182,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/182,"By leveraging the new fork()-handling instead of relying on a
specialized agent, i.e. frida-loader-{32,64}.so.","By leveraging the new fork()-handling instead of relying on a
specialized agent, i.e. frida-loader-{32,64}.so.",True,{'HOORAY': ['https://github.com/dweinstein']}
frida/frida-core,https://github.com/frida/frida-core,183,2018-04-18T19:10:06Z,2018-04-26T01:52:55Z,2018-04-26T01:52:59Z,MERGED,True,2608,341,46,https://github.com/oleavr, Wire up child gating for exec*() and subprocesses,1,[],https://github.com/frida/frida-core/pull/183,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/183,"This means it is finally possible to follow subprocesses all the way
through fork(), exec(), posix_spawn(), etc.","This means it is finally possible to follow subprocesses all the way
through fork(), exec(), posix_spawn(), etc.",True,{}
frida/frida-core,https://github.com/frida/frida-core,184,2018-04-23T21:22:02Z,2018-04-24T17:55:02Z,2018-04-24T17:55:02Z,MERGED,True,15,8,1,https://github.com/mrmacete,Keep reference to client alive (WIP),3,[],https://github.com/frida/frida-core/pull/184,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/184,This is needed because latest vala compiler doesn't keep references automatically.,This is needed because latest vala compiler doesn't keep references automatically.,True,{}
frida/frida-core,https://github.com/frida/frida-core,185,2018-05-02T15:34:54Z,2018-05-02T19:53:40Z,2018-05-02T19:53:43Z,MERGED,True,704,252,20,https://github.com/oleavr,Rework spawn() API and tweak child gating metadata,4,[],https://github.com/frida/frida-core/pull/185,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/185,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,186,2018-05-03T01:06:18Z,2018-05-03T01:09:54Z,2018-05-03T01:09:54Z,MERGED,True,4,3,1,https://github.com/radare,Use TMPDIR envvar when not running as root on Android,1,[],https://github.com/frida/frida-core/pull/186,https://github.com/radare,1,https://github.com/frida/frida-core/pull/186,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,189,2018-06-04T09:18:20Z,2018-06-04T18:23:13Z,2018-06-04T18:23:13Z,CLOSED,False,1,1,1,https://github.com/azurda,Improved Windows childgating by attaching to CreateProcessInternal,1,[],https://github.com/frida/frida-core/pull/189,https://github.com/azurda,1,https://github.com/frida/frida-core/pull/189,"CreateProcessA/Wand CreateProcessInternalA end all all calling CreateProcessInternalW in the end.
The flow should be something such as:
CreateProcessA > CreateProcessInternalA > CreateProcessInternalW
CreateProcessW > CreateProcessInternalW
Therefore, we would avoid double hooks with just watching CreateProcessInternalW","CreateProcessA/Wand CreateProcessInternalA end all all calling CreateProcessInternalW in the end.
The flow should be something such as:
CreateProcessA > CreateProcessInternalA > CreateProcessInternalW
CreateProcessW > CreateProcessInternalW
Therefore, we would avoid double hooks with just watching CreateProcessInternalW",True,{'HOORAY': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,189,2018-06-04T09:18:20Z,2018-06-04T18:23:13Z,2018-06-04T18:23:13Z,CLOSED,False,1,1,1,https://github.com/azurda,Improved Windows childgating by attaching to CreateProcessInternal,1,[],https://github.com/frida/frida-core/pull/189,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/189#issuecomment-394451236,"CreateProcessA/Wand CreateProcessInternalA end all all calling CreateProcessInternalW in the end.
The flow should be something such as:
CreateProcessA > CreateProcessInternalA > CreateProcessInternalW
CreateProcessW > CreateProcessInternalW
Therefore, we would avoid double hooks with just watching CreateProcessInternalW","Thanks a lot! Committed as fe815b3 with one small tweak: argument indices were off by one due to CreateProcessInternalW()'s extra argument at index 0, so arguments weren't parsed correctly and the process was not created suspended.
Just tagged Frida 11.0.7 with these changes ‚Äì binaries should be available shortly.
Cheers!",True,{}
frida/frida-core,https://github.com/frida/frida-core,192,2018-07-09T00:11:35Z,2018-07-09T10:55:56Z,2018-07-09T10:56:30Z,MERGED,True,2,2,1,https://github.com/Knight-Ops,"Fix typos in the linux-{arm,arm64} injector codepaths",1,[],https://github.com/frida/frida-core/pull/192,https://github.com/Knight-Ops,1,https://github.com/frida/frida-core/pull/192,"Fixed EMIT_MOV to EMIT_MOVE
This is step one to fixing #190","Fixed EMIT_MOV to EMIT_MOVE
This is step one to fixing #190",True,{}
frida/frida-core,https://github.com/frida/frida-core,192,2018-07-09T00:11:35Z,2018-07-09T10:55:56Z,2018-07-09T10:56:30Z,MERGED,True,2,2,1,https://github.com/Knight-Ops,"Fix typos in the linux-{arm,arm64} injector codepaths",1,[],https://github.com/frida/frida-core/pull/192,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/192#issuecomment-403439916,"Fixed EMIT_MOV to EMIT_MOVE
This is step one to fixing #190",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,194,2018-07-13T15:52:50Z,2018-07-13T18:57:20Z,2018-07-13T18:57:20Z,MERGED,True,201,33,2,https://github.com/mrmacete,Fix i/macOS libc++ initialization on early instrumentation,3,[],https://github.com/frida/frida-core/pull/194,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/194,"Fix libSystem initialization when DYLD_INSERT_LIBRARIES is there
In this case, dlopen() takes a different code path and hits this check in ImageLoaderMachO::doModInitFunctions():
if ( ! dyld::gProcessInfo->libSystemInitialized ) {
  const char* installPath = getInstallPath();
  if ( (installPath == NULL) || (strcmp(installPath, LIBSYSTEM_DYLIB_PATH) != 0) )
    dyld::throwf(""initializer in image (%s) that does not link with libSystem.dylib\n"", this->getPath());
}

When we call it to initialize libSystem it throws an exception when loading libc++.dylib which is a dependency but it‚Äôs not libSystem itself, leaving c++ not initialized and leading to potential crashes.
This solution boils down to hook dyld‚Äôs strcmp() and make it successful in any case when called from the context of the above code.
note: on macOS the issue was there even without using DYLD_INSERT_LIBRARY","Fix libSystem initialization when DYLD_INSERT_LIBRARIES is there
In this case, dlopen() takes a different code path and hits this check in ImageLoaderMachO::doModInitFunctions():
if ( ! dyld::gProcessInfo->libSystemInitialized ) {
  const char* installPath = getInstallPath();
  if ( (installPath == NULL) || (strcmp(installPath, LIBSYSTEM_DYLIB_PATH) != 0) )
    dyld::throwf(""initializer in image (%s) that does not link with libSystem.dylib\n"", this->getPath());
}

When we call it to initialize libSystem it throws an exception when loading libc++.dylib which is a dependency but it‚Äôs not libSystem itself, leaving c++ not initialized and leading to potential crashes.
This solution boils down to hook dyld‚Äôs strcmp() and make it successful in any case when called from the context of the above code.
note: on macOS the issue was there even without using DYLD_INSERT_LIBRARY",True,{}
frida/frida-core,https://github.com/frida/frida-core,195,2018-07-18T20:49:15Z,2018-07-18T21:38:45Z,2018-07-18T21:38:49Z,MERGED,True,19,19,2,https://github.com/Knight-Ops,Fix MIPS regressions,4,[],https://github.com/frida/frida-core/pull/195,https://github.com/Knight-Ops,1,https://github.com/frida/frida-core/pull/195,"This fixes the MIPS ASM syntax errors, as well as changing the syntax for struct field access using uclibc. I am not sure if the latter is a overarching issue, but I had issues while trying to compile.","This fixes the MIPS ASM syntax errors, as well as changing the syntax for struct field access using uclibc. I am not sure if the latter is a overarching issue, but I had issues while trying to compile.",True,{}
frida/frida-core,https://github.com/frida/frida-core,195,2018-07-18T20:49:15Z,2018-07-18T21:38:45Z,2018-07-18T21:38:49Z,MERGED,True,19,19,2,https://github.com/Knight-Ops,Fix MIPS regressions,4,[],https://github.com/frida/frida-core/pull/195,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/195#issuecomment-406082451,"This fixes the MIPS ASM syntax errors, as well as changing the syntax for struct field access using uclibc. I am not sure if the latter is a overarching issue, but I had issues while trying to compile.",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,197,2018-07-20T13:30:14Z,2018-07-20T14:37:49Z,2018-07-20T14:37:54Z,MERGED,True,1,1,1,https://github.com/Knight-Ops,Fix syntax error in the syscall wrapper for MIPS,1,[],https://github.com/frida/frida-core/pull/197,https://github.com/Knight-Ops,1,https://github.com/frida/frida-core/pull/197,This is to complete #195. I missed a register correction.,This is to complete #195. I missed a register correction.,True,{}
frida/frida-core,https://github.com/frida/frida-core,197,2018-07-20T13:30:14Z,2018-07-20T14:37:49Z,2018-07-20T14:37:54Z,MERGED,True,1,1,1,https://github.com/Knight-Ops,Fix syntax error in the syscall wrapper for MIPS,1,[],https://github.com/frida/frida-core/pull/197,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/197#issuecomment-406619913,This is to complete #195. I missed a register correction.,Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,198,2018-07-25T14:30:49Z,2018-07-25T16:22:28Z,2018-07-25T16:24:29Z,MERGED,True,9,9,20,https://github.com/Knight-Ops,Add missing labrats for ARM and MIPS,8,[],https://github.com/frida/frida-core/pull/198,https://github.com/Knight-Ops,1,https://github.com/frida/frida-core/pull/198,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,198,2018-07-25T14:30:49Z,2018-07-25T16:22:28Z,2018-07-25T16:24:29Z,MERGED,True,9,9,20,https://github.com/Knight-Ops,Add missing labrats for ARM and MIPS,8,[],https://github.com/frida/frida-core/pull/198,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/198#issuecomment-407813281,,Thanks! üëç,True,{}
frida/frida-core,https://github.com/frida/frida-core,199,2018-07-26T09:35:51Z,2018-07-26T16:49:29Z,2018-07-26T16:50:56Z,MERGED,True,740,432,1,https://github.com/mrmacete,Fix early instrumentation on iOS 11.3.1 through 11.4.1,9,[],https://github.com/frida/frida-core/pull/199,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/199,"simplify the logic, by having a single interface for setting breakpoints and a single place to set the thread and debug states
implement software breakpoints on iOS versions from 11.3.1 up to and including 11.4.1 where hardware breakpoints are broken in the kernel
use hardware single step to get out of repeatable breakpoint on all platform, saving a call to capstone
implement the getThreadBufferFor_dlerror helpers function using breakpoints,  needed for iOS 11.3.1

Tested on iOS 9.0.2, 9.3.3, 10.2, 11.1.2, 11.3.1.
According to my tests, the performance of software breakpoints seems about the same as hardware breakpoints.
this should fix #193","simplify the logic, by having a single interface for setting breakpoints and a single place to set the thread and debug states
implement software breakpoints on iOS versions from 11.3.1 up to and including 11.4.1 where hardware breakpoints are broken in the kernel
use hardware single step to get out of repeatable breakpoint on all platform, saving a call to capstone
implement the getThreadBufferFor_dlerror helpers function using breakpoints,  needed for iOS 11.3.1

Tested on iOS 9.0.2, 9.3.3, 10.2, 11.1.2, 11.3.1.
According to my tests, the performance of software breakpoints seems about the same as hardware breakpoints.
this should fix #193",True,"{'HEART': ['https://github.com/oleavr'], 'HOORAY': ['https://github.com/oleavr']}"
frida/frida-core,https://github.com/frida/frida-core,199,2018-07-26T09:35:51Z,2018-07-26T16:49:29Z,2018-07-26T16:50:56Z,MERGED,True,740,432,1,https://github.com/mrmacete,Fix early instrumentation on iOS 11.3.1 through 11.4.1,9,[],https://github.com/frida/frida-core/pull/199,https://github.com/AeonLucid,2,https://github.com/frida/frida-core/pull/199#issuecomment-408162455,"simplify the logic, by having a single interface for setting breakpoints and a single place to set the thread and debug states
implement software breakpoints on iOS versions from 11.3.1 up to and including 11.4.1 where hardware breakpoints are broken in the kernel
use hardware single step to get out of repeatable breakpoint on all platform, saving a call to capstone
implement the getThreadBufferFor_dlerror helpers function using breakpoints,  needed for iOS 11.3.1

Tested on iOS 9.0.2, 9.3.3, 10.2, 11.1.2, 11.3.1.
According to my tests, the performance of software breakpoints seems about the same as hardware breakpoints.
this should fix #193",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,201,2018-08-11T09:41:13Z,2018-10-23T00:24:07Z,2018-10-23T00:24:07Z,CLOSED,False,72,0,1,https://github.com/mrmacete,WIP: Add ThreadSuspendMonitor,2,[],https://github.com/frida/frida-core/pull/201,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/201,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,201,2018-08-11T09:41:13Z,2018-10-23T00:24:07Z,2018-10-23T00:24:07Z,CLOSED,False,72,0,1,https://github.com/mrmacete,WIP: Add ThreadSuspendMonitor,2,[],https://github.com/frida/frida-core/pull/201,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/201#issuecomment-432038103,,Tweaked version landed as 3fe24c3. Thanks! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,208,2018-08-31T14:24:02Z,2018-09-03T13:14:54Z,2018-09-03T13:15:20Z,MERGED,True,1,1,1,https://github.com/cbayet,Fix attach() to program with non-executable ELF-header,1,[],https://github.com/frida/frida-core/pull/208,https://github.com/cbayet,1,https://github.com/frida/frida-core/pull/208,"Since binutils 2.31, the options --enable-separate-code is enabled by default for Linux x86 binaries.
(see changelog https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=ld/NEWS;hb=refs/tags/binutils-2_31)
This new version of binutils is the version of last Debian Unstable.
You can still compile your binaries with the option ""-z no-separate-code"" in gcc, but frida should be able to support this.
This breaks frida on several points I have identified for now:

Attaching, frida cannot find entry point, because it search for a RX region
Finding DebugSymbols, but did not find the code that handle this (but probably for the same reason of above). If you could point me the portion of code that handles a simple ""DebugSymbol.fromName()"" I would be glad to fix it.
Probably some other things, but that I have not identify for now

This commit only fix the first point, I hope you can help me finding the other bugs implied, or fix them by yourself.","Since binutils 2.31, the options --enable-separate-code is enabled by default for Linux x86 binaries.
(see changelog https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=ld/NEWS;hb=refs/tags/binutils-2_31)
This new version of binutils is the version of last Debian Unstable.
You can still compile your binaries with the option ""-z no-separate-code"" in gcc, but frida should be able to support this.
This breaks frida on several points I have identified for now:

Attaching, frida cannot find entry point, because it search for a RX region
Finding DebugSymbols, but did not find the code that handle this (but probably for the same reason of above). If you could point me the portion of code that handles a simple ""DebugSymbol.fromName()"" I would be glad to fix it.
Probably some other things, but that I have not identify for now

This commit only fix the first point, I hope you can help me finding the other bugs implied, or fix them by yourself.",True,{}
frida/frida-core,https://github.com/frida/frida-core,208,2018-08-31T14:24:02Z,2018-09-03T13:14:54Z,2018-09-03T13:15:20Z,MERGED,True,1,1,1,https://github.com/cbayet,Fix attach() to program with non-executable ELF-header,1,[],https://github.com/frida/frida-core/pull/208,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/208#issuecomment-418111750,"Since binutils 2.31, the options --enable-separate-code is enabled by default for Linux x86 binaries.
(see changelog https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob_plain;f=ld/NEWS;hb=refs/tags/binutils-2_31)
This new version of binutils is the version of last Debian Unstable.
You can still compile your binaries with the option ""-z no-separate-code"" in gcc, but frida should be able to support this.
This breaks frida on several points I have identified for now:

Attaching, frida cannot find entry point, because it search for a RX region
Finding DebugSymbols, but did not find the code that handle this (but probably for the same reason of above). If you could point me the portion of code that handles a simple ""DebugSymbol.fromName()"" I would be glad to fix it.
Probably some other things, but that I have not identify for now

This commit only fix the first point, I hope you can help me finding the other bugs implied, or fix them by yourself.","Ahh, nice catch! As for the DebugSymbol API, the code is here. Thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,212,2018-10-01T13:02:00Z,2018-10-03T00:15:01Z,2018-10-03T00:15:01Z,CLOSED,False,99,26,2,https://github.com/0x3430D,Add alternative android spawning method with receiver & action,1,[],https://github.com/frida/frida-core/pull/212,https://github.com/0x3430D,1,https://github.com/frida/frida-core/pull/212,"This pull request add an alternative android spawning method with receiver & action instead of activity :
pid = device.spawn(""com.example.package"", receiver="".BootCompletedReceiver"", action=""android.intent.action.BOOT_COMPLETED"")

Which is equivalent to :
adb shell am broadcast -n com.example.package/.BootCompletedReceiver -a android.intent.action.BOOT_COMPLETED","This pull request add an alternative android spawning method with receiver & action instead of activity :
pid = device.spawn(""com.example.package"", receiver="".BootCompletedReceiver"", action=""android.intent.action.BOOT_COMPLETED"")

Which is equivalent to :
adb shell am broadcast -n com.example.package/.BootCompletedReceiver -a android.intent.action.BOOT_COMPLETED",True,{}
frida/frida-core,https://github.com/frida/frida-core,212,2018-10-01T13:02:00Z,2018-10-03T00:15:01Z,2018-10-03T00:15:01Z,CLOSED,False,99,26,2,https://github.com/0x3430D,Add alternative android spawning method with receiver & action,1,[],https://github.com/frida/frida-core/pull/212,https://github.com/0x3430D,2,https://github.com/frida/frida-core/pull/212#issuecomment-425958161,"This pull request add an alternative android spawning method with receiver & action instead of activity :
pid = device.spawn(""com.example.package"", receiver="".BootCompletedReceiver"", action=""android.intent.action.BOOT_COMPLETED"")

Which is equivalent to :
adb shell am broadcast -n com.example.package/.BootCompletedReceiver -a android.intent.action.BOOT_COMPLETED","OK, thanks ! I will take your comments into account tomorrow and come back to you ! ;)",True,{'THUMBS_UP': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,212,2018-10-01T13:02:00Z,2018-10-03T00:15:01Z,2018-10-03T00:15:01Z,CLOSED,False,99,26,2,https://github.com/0x3430D,Add alternative android spawning method with receiver & action,1,[],https://github.com/frida/frida-core/pull/212,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/212#issuecomment-426450623,"This pull request add an alternative android spawning method with receiver & action instead of activity :
pid = device.spawn(""com.example.package"", receiver="".BootCompletedReceiver"", action=""android.intent.action.BOOT_COMPLETED"")

Which is equivalent to :
adb shell am broadcast -n com.example.package/.BootCompletedReceiver -a android.intent.action.BOOT_COMPLETED","I need to make some changes in this area of the code, so I will make the final tweaks now and get this merged.",True,{}
frida/frida-core,https://github.com/frida/frida-core,212,2018-10-01T13:02:00Z,2018-10-03T00:15:01Z,2018-10-03T00:15:01Z,CLOSED,False,99,26,2,https://github.com/0x3430D,Add alternative android spawning method with receiver & action,1,[],https://github.com/frida/frida-core/pull/212,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/212#issuecomment-426472148,"This pull request add an alternative android spawning method with receiver & action instead of activity :
pid = device.spawn(""com.example.package"", receiver="".BootCompletedReceiver"", action=""android.intent.action.BOOT_COMPLETED"")

Which is equivalent to :
adb shell am broadcast -n com.example.package/.BootCompletedReceiver -a android.intent.action.BOOT_COMPLETED",Let's continue this in #213. Cheers!,True,{}
frida/frida-core,https://github.com/frida/frida-core,213,2018-10-03T00:14:03Z,2018-10-03T01:46:32Z,2018-10-03T09:43:56Z,MERGED,True,168,65,2,https://github.com/oleavr,Add support for spawning Android broadcast receivers,1,[],https://github.com/frida/frida-core/pull/213,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/213,"By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)","By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,213,2018-10-03T00:14:03Z,2018-10-03T01:46:32Z,2018-10-03T09:43:56Z,MERGED,True,168,65,2,https://github.com/oleavr,Add support for spawning Android broadcast receivers,1,[],https://github.com/frida/frida-core/pull/213,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/213#issuecomment-426485762,"By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)","@0x3430D FWIW I couldn't get this working ‚Äì no process is spawned so the spawn() eventually times out. I tried this and similar things on Android 8.0/8.1, both on an AVD and a real device:
pid = device.spawn(""com.facebook.katana"",
    receiver=""com.facebook.battery.monitor.ContinuousBatteryMonitorService$BroadcastReceiver"",
    action=""android.intent.action.BOOT_COMPLETED"")
Anyway, I can't go down this rabbit-hole tonight so I'll go ahead and merge this now.",True,{}
frida/frida-core,https://github.com/frida/frida-core,213,2018-10-03T00:14:03Z,2018-10-03T01:46:32Z,2018-10-03T09:43:56Z,MERGED,True,168,65,2,https://github.com/oleavr,Add support for spawning Android broadcast receivers,1,[],https://github.com/frida/frida-core/pull/213,https://github.com/0x3430D,3,https://github.com/frida/frida-core/pull/213#issuecomment-426540921,"By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)","@oleavr Ok, I will take a look at this failure... ! BTW, it worked on my (simple) BroadcastReceiver test (AVD x86 / Android 8.1.0) so maybe I will understand the problem...",True,{}
frida/frida-core,https://github.com/frida/frida-core,213,2018-10-03T00:14:03Z,2018-10-03T01:46:32Z,2018-10-03T09:43:56Z,MERGED,True,168,65,2,https://github.com/oleavr,Add support for spawning Android broadcast receivers,1,[],https://github.com/frida/frida-core/pull/213,https://github.com/0x3430D,4,https://github.com/frida/frida-core/pull/213#issuecomment-426566785,"By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)","Strange, I did the test on AVD x86 / Android 8.1.0 and I got no timeout... It looks like it succeed to spawn... BTW I got a crash (but also with device.spawn(""com.facebook.katana"")) maybe I didn't install facebook correctly (adb pulled from an official google non rooted AVD and install -g it on my non official rooted AVD):
                   ACRA  E  Initializing ANR detector for process: com.facebook.katana
                   libc  F  Fatal signal 11 (SIGSEGV), code 2, fault addr 0xea740008 in tid 5537 (Jit thread pool), pid 5534 (facebook.katana)
                  DEBUG  F  #00 pc 003d4870  /system/lib/libart.so (art::ProfilingInfo::GetInlineCache(unsigned int)+64)
                         F  #01 pc 00123503  /system/lib/libart-compiler.so (_ZN3art8HInliner17GetInlineCacheJITEPNS_7HInvokeEPNS_16StackHandleScopeILj1EEEPNS_6HandleINS_6mirror11ObjectArrayINS7_5ClassEEEEE+211)
                         F  #02 pc 00122b9c  /system/lib/libart-compiler.so (art::HInliner::TryInlineFromInlineCache(art::DexFile const&, art::HInvoke*, art::ArtMethod*)+220)
                         F  #03 pc 001219d7  /system/lib/libart-compiler.so (art::HInliner::TryInline(art::HInvoke*)+2103)
                         F  #04 pc 0012105a  /system/lib/libart-compiler.so (art::HInliner::Run()+890)
                         F  #05 pc 0012de68  /system/lib/libart-compiler.so (art::HInliner::RunOptimizations(art::HGraph*, art::DexFile::CodeItem const*, art::DexCompilationUnit const&)+1112)
                         F  #06 pc 0012ae9a  /system/lib/libart-compiler.so (art::HInliner::TryBuildAndInlineHelper(art::HInvoke*, art::ArtMethod*, art::ReferenceTypeInfo, bool, art::HInstruction**)+4378)
                         F  #07 pc 00127f09  /system/lib/libart-compiler.so (art::HInliner::TryBuildAndInline(art::HInvoke*, art::ArtMethod*, art::ReferenceTypeInfo, art::HInstruction**)+1593)
                         F  #08 pc 0012270c  /system/lib/libart-compiler.so (art::HInliner::TryInlineAndReplace(art::HInvoke*, art::ArtMethod*, art::ReferenceTypeInfo, bool, bool)+124)
                         F  #09 pc 001215c0  /system/lib/libart-compiler.so (art::HInliner::TryInline(art::HInvoke*)+1056)
                         F  #10 pc 0012105a  /system/lib/libart-compiler.so (art::HInliner::Run()+890)
                         F  #11 pc 001809be  /system/lib/libart-compiler.so (art::OptimizingCompiler::MaybeRunInliner(art::HGraph*, art::CodeGenerator*, art::CompilerDriver*, art::DexCompilationUnit const&, art::
                            PassObserver*, art::VariableSizedHandleScope*) const+222)
                         F  #12 pc 001827fd  /system/lib/libart-compiler.so (art::OptimizingCompiler::RunOptimizations(art::HGraph*, art::CodeGenerator*, art::CompilerDriver*, art::DexCompilationUnit const&, art:
                            :PassObserver*, art::VariableSizedHandleScope*) const+7101)
                         F  #13 pc 001840c7  /system/lib/libart-compiler.so (art::OptimizingCompiler::TryCompile(art::ArenaAllocator*, art::CodeVectorAllocator*, art::DexFile::CodeItem const*, unsigned int, art::
                            InvokeType, unsigned short, unsigned int, art::Handle<art::mirror::ClassLoader>, art::DexFile const&, art::Handle<art::mirror::DexCache>, art::ArtMethod*, bool, art::VariableSizedHandl
                            eScope*) const+3383)
                         F  #14 pc 00186173  /system/lib/libart-compiler.so (art::OptimizingCompiler::JitCompile(art::Thread*, art::jit::JitCodeCache*, art::ArtMethod*, bool, art::jit::JitLogger*)+1107)
                         F  #15 pc 000e1d83  /system/lib/libart-compiler.so (art::jit::JitCompiler::CompileMethod(art::Thread*, art::ArtMethod*, bool)+163)
                         F  #16 pc 000e1cd7  /system/lib/libart-compiler.so (jit_compile_method+55)
                         F  #17 pc 003b8b4f  /system/lib/libart.so (art::jit::Jit::CompileMethod(art::ArtMethod*, art::Thread*, bool)+303)
                         F  #18 pc 003bb992  /system/lib/libart.so (art::jit::JitCompileTask::Run(art::Thread*)+626)
                         F  #19 pc 0059856b  /system/lib/libart.so (art::ThreadPoolWorker::Run()+91)
                         F  #20 pc 00597fbb  /system/lib/libart.so (art::ThreadPoolWorker::Callback(void*)+139)
                         F  #21 pc 00050445  /system/lib/libc.so (offset 0x21000)
                         F  #22 pc 000025db  /system/lib/libc.so (offset 0x1e000)
                         F  #23 pc 00000c16  /system/lib/libc.so (offset 0x1e000)
                         F  #24 pc 00050cc8  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #25 pc 0004552d  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #26 pc 0004b656  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #27 pc 0004b6bc  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #28 pc 00051f57  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #29 pc 00017baf  <anonymous:e6df5000>
                         F  #30 pc 0007aaba  /data/local/tmp/re.frida.server/frida-agent-32.so (offset 0x165000)
                         F  #31 pc 0056b320  /system/lib/libart.so (art::GetResolvedMethod(art::ArtMethod*, art::MethodInfo const&, art::InlineInfo const&, art::InlineInfoEncoding const&, unsigned char)+16)",True,{}
frida/frida-core,https://github.com/frida/frida-core,213,2018-10-03T00:14:03Z,2018-10-03T01:46:32Z,2018-10-03T09:43:56Z,MERGED,True,168,65,2,https://github.com/oleavr,Add support for spawning Android broadcast receivers,1,[],https://github.com/frida/frida-core/pull/213,https://github.com/0x3430D,5,https://github.com/frida/frida-core/pull/213#issuecomment-426574443,"By specifying the receiver and action aux options.
Also be as forgiving as the system if the class name is bare and does
not start with a period.
(Based on #212.)","I tried to hook facebook BroadcastReceiver with the following script to determine what could happened :
Java.perform(function () {

    BroadcastReceiver = Java.use('com.facebook.battery.monitor.ContinuousBatteryMonitorService$BroadcastReceiver');

    var onReceive  = BroadcastReceiver.onReceive.overload('android.content.Context', 'android.content.Intent');
    
    onReceive.implementation = function (c, i) {

        send('onReceive '+i);

        return this.onReceive(c, i); 
    }   
});

I never received the hook notification and I got this :
                            Process com.facebook.katana created for broadcast com.facebook.katana/com.facebook.battery.monitor.ContinuousBatteryMonitorService$BroadcastReceiver
                            PID: 8568   UID:    GIDs: 

                 zygote  W  Unexpected CPU variant for X86 using defaults: x86
                         I  The ClassLoaderContext is a special shared library.
     CrashLoopRemedyLog  W  unable to delete remedy log, instaCrash: false
                         W  unable to delete remedy log, instaCrash: true
        facebook.katana  I  type=1400 audit(0.0:86): avc: denied { read } for name=""vmstat"" dev=""proc"" ino=4026532039 scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:object_r:proc:s0 tclass=file permissive=1
                   ACRA  E  Initializing ANR detector for process: com.facebook.katana
        facebook.katana  I  type=1400 audit(0.0:87): avc: denied { open } for path=""/proc/vmstat"" dev=""proc"" ino=4026532039 scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:object_r:proc:s0 tclass=file permissi
                            ve=1
         appstatelogger  V  Registered App State Logger stream with Breakpad
       dalvik-internals  W  ignoring failure to find _ZN3art12FaultManager35EnsureArtActionInFrontOfSignalChainEv: could not hook _ZN3art12FaultManager35EnsureArtActionInFrontOfSignalChainEv
                         V  hooked signal using trap ()
                         V  hooked sysv_signal using trap ()
                         V  hooked bsd_signal using trap ()
                         V  hooked sigaction using trap ()
                 zygote  I  Do partial code cache collection, code=9KB, data=26KB
                         I  After code cache collection, code=9KB, data=26KB
                         I  Increasing code cache capacity to 128KB
     CrashLoopRemedyLog  W  unable to delete remedy log, instaCrash: true
                 zygote  I  Thread[3,tid=8577,WaitingInMainSignalCatcherLoop,Thread*=0xe5ed9c00,peer=0x12e80dd0,""Signal Catcher""]: reacting to signal 3
                   libc  I  Requested dump for tid 8568 (facebook.katana)

                            Process com.facebook.katana (PID: 8568) ended",True,{}
frida/frida-core,https://github.com/frida/frida-core,214,2018-10-22T17:39:48Z,2018-10-23T00:21:14Z,2018-10-23T00:22:51Z,MERGED,True,5,1,1,https://github.com/tobypetrice,Correct stack alignment for ARM targets from 16 bytes to 8 bytes,5,[],https://github.com/frida/frida-core/pull/214,https://github.com/tobypetrice,1,https://github.com/frida/frida-core/pull/214,"It was previously assumed that ARM uses 16 byte stack alignment, it is actually 8 bytes (http://infocenter.arm.com/help/topic/com.arm.doc.faqs/ka4127.html).
This bug results in crashes when trying to hook some 32 bit applications on ARM due to a stack clobbering.
This patch fixes the bug.","It was previously assumed that ARM uses 16 byte stack alignment, it is actually 8 bytes (http://infocenter.arm.com/help/topic/com.arm.doc.faqs/ka4127.html).
This bug results in crashes when trying to hook some 32 bit applications on ARM due to a stack clobbering.
This patch fixes the bug.",True,{}
frida/frida-core,https://github.com/frida/frida-core,214,2018-10-22T17:39:48Z,2018-10-23T00:21:14Z,2018-10-23T00:22:51Z,MERGED,True,5,1,1,https://github.com/tobypetrice,Correct stack alignment for ARM targets from 16 bytes to 8 bytes,5,[],https://github.com/frida/frida-core/pull/214,https://github.com/tobypetrice,2,https://github.com/frida/frida-core/pull/214#issuecomment-432017829,"It was previously assumed that ARM uses 16 byte stack alignment, it is actually 8 bytes (http://infocenter.arm.com/help/topic/com.arm.doc.faqs/ka4127.html).
This bug results in crashes when trying to hook some 32 bit applications on ARM due to a stack clobbering.
This patch fixes the bug.","Agree with your suggestions, this is more elegant.",True,{}
frida/frida-core,https://github.com/frida/frida-core,214,2018-10-22T17:39:48Z,2018-10-23T00:21:14Z,2018-10-23T00:22:51Z,MERGED,True,5,1,1,https://github.com/tobypetrice,Correct stack alignment for ARM targets from 16 bytes to 8 bytes,5,[],https://github.com/frida/frida-core/pull/214,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/214#issuecomment-432037883,"It was previously assumed that ARM uses 16 byte stack alignment, it is actually 8 bytes (http://infocenter.arm.com/help/topic/com.arm.doc.faqs/ka4127.html).
This bug results in crashes when trying to hook some 32 bit applications on ARM due to a stack clobbering.
This patch fixes the bug.","Cool! Merged, will be part of 12.2.18, coming later today. Cheers!",True,{}
frida/frida-core,https://github.com/frida/frida-core,215,2018-10-24T19:57:27Z,2018-11-05T20:13:41Z,2018-11-05T20:27:51Z,MERGED,True,9,1,1,https://github.com/tobypetrice,Add support for systemless root,2,[],https://github.com/frida/frida-core/pull/215,https://github.com/tobypetrice,1,https://github.com/frida/frida-core/pull/215,"A lot of rooted Android devices are doing so called ""systemless root"". One particular example is the Pixel root by Chainfire. In it, the system partition is moved to ""system_root"", so searching for things like ""/system/bin/linker"" fails.
This patch lets Frida work on systemless rooted Android devices.","A lot of rooted Android devices are doing so called ""systemless root"". One particular example is the Pixel root by Chainfire. In it, the system partition is moved to ""system_root"", so searching for things like ""/system/bin/linker"" fails.
This patch lets Frida work on systemless rooted Android devices.",True,{}
frida/frida-core,https://github.com/frida/frida-core,215,2018-10-24T19:57:27Z,2018-11-05T20:13:41Z,2018-11-05T20:27:51Z,MERGED,True,9,1,1,https://github.com/tobypetrice,Add support for systemless root,2,[],https://github.com/frida/frida-core/pull/215,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/215#issuecomment-436018878,"A lot of rooted Android devices are doing so called ""systemless root"". One particular example is the Pixel root by Chainfire. In it, the system partition is moved to ""system_root"", so searching for things like ""/system/bin/linker"" fails.
This patch lets Frida work on systemless rooted Android devices.","Wow, great catch! Thanks a lot for this fix, and sorry for the delay here.",True,{}
frida/frida-core,https://github.com/frida/frida-core,217,2018-10-30T08:50:14Z,2018-10-30T15:33:03Z,2018-10-30T15:33:03Z,MERGED,True,10,3,1,https://github.com/mrmacete,Add retry logic around task_info call,1,[],https://github.com/frida/frida-core/pull/217,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/217,Apparently task_info fails randomly with ‚Äúinvalid argument‚Äù (and sometimes ‚Äúmig server died‚Äù) because we‚Äôre calling it too early in task‚Äôs lifetime. It will now retry at most 3 times before giving up.,Apparently task_info fails randomly with ‚Äúinvalid argument‚Äù (and sometimes ‚Äúmig server died‚Äù) because we‚Äôre calling it too early in task‚Äôs lifetime. It will now retry at most 3 times before giving up.,True,{}
frida/frida-core,https://github.com/frida/frida-core,217,2018-10-30T08:50:14Z,2018-10-30T15:33:03Z,2018-10-30T15:33:03Z,MERGED,True,10,3,1,https://github.com/mrmacete,Add retry logic around task_info call,1,[],https://github.com/frida/frida-core/pull/217,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/217#issuecomment-434348245,Apparently task_info fails randomly with ‚Äúinvalid argument‚Äù (and sometimes ‚Äúmig server died‚Äù) because we‚Äôre calling it too early in task‚Äôs lifetime. It will now retry at most 3 times before giving up.,Awesome! ü§ò Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,219,2018-11-08T12:52:52Z,2018-11-08T14:18:26Z,2018-11-08T14:18:26Z,MERGED,True,2,1,1,https://github.com/mrmacete,Avoid deadlock when a thread suspends itself,2,[],https://github.com/frida/frida-core/pull/219,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/219,By calling thread_suspend right away without getting locks.,By calling thread_suspend right away without getting locks.,True,{}
frida/frida-core,https://github.com/frida/frida-core,220,2018-11-15T14:08:52Z,2018-11-15T17:46:53Z,2018-11-15T17:46:53Z,MERGED,True,4,1,1,https://github.com/psychomario,Add frida-server options to specify the temp subdirectory,1,[],https://github.com/frida/frida-core/pull/220,https://github.com/psychomario,1,https://github.com/frida/frida-core/pull/220,"Tested on x86_64 linux
Option -d allows for changing the frida-server temporary sub-directory, into which frida-helper-{32,64} are dropped, relative to the temporary directory, falling back on the original directory (re.frida.server)
I   ‚û§‚Äã  ./build/frida-linux-x86_64/bin/frida-server -d FRIDA_TEST

Results in:
I   ‚û§‚Äã  ls /tmp/FRIDA_TEST                                                                                                                                                       [~/caps/frida]
frida-helper-32*  frida-helper-64*","Tested on x86_64 linux
Option -d allows for changing the frida-server temporary sub-directory, into which frida-helper-{32,64} are dropped, relative to the temporary directory, falling back on the original directory (re.frida.server)
I   ‚û§‚Äã  ./build/frida-linux-x86_64/bin/frida-server -d FRIDA_TEST

Results in:
I   ‚û§‚Äã  ls /tmp/FRIDA_TEST                                                                                                                                                       [~/caps/frida]
frida-helper-32*  frida-helper-64*",True,{}
frida/frida-core,https://github.com/frida/frida-core,220,2018-11-15T14:08:52Z,2018-11-15T17:46:53Z,2018-11-15T17:46:53Z,MERGED,True,4,1,1,https://github.com/psychomario,Add frida-server options to specify the temp subdirectory,1,[],https://github.com/frida/frida-core/pull/220,https://github.com/psychomario,2,https://github.com/frida/frida-core/pull/220#issuecomment-439074520,"Tested on x86_64 linux
Option -d allows for changing the frida-server temporary sub-directory, into which frida-helper-{32,64} are dropped, relative to the temporary directory, falling back on the original directory (re.frida.server)
I   ‚û§‚Äã  ./build/frida-linux-x86_64/bin/frida-server -d FRIDA_TEST

Results in:
I   ‚û§‚Äã  ls /tmp/FRIDA_TEST                                                                                                                                                       [~/caps/frida]
frida-helper-32*  frida-helper-64*","Apologies, I did not understand how the listen host specification worked. I have removed the commits that change this code and updated the above accordingly.",True,{}
frida/frida-core,https://github.com/frida/frida-core,220,2018-11-15T14:08:52Z,2018-11-15T17:46:53Z,2018-11-15T17:46:53Z,MERGED,True,4,1,1,https://github.com/psychomario,Add frida-server options to specify the temp subdirectory,1,[],https://github.com/frida/frida-core/pull/220,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/220#issuecomment-439129177,"Tested on x86_64 linux
Option -d allows for changing the frida-server temporary sub-directory, into which frida-helper-{32,64} are dropped, relative to the temporary directory, falling back on the original directory (re.frida.server)
I   ‚û§‚Äã  ./build/frida-linux-x86_64/bin/frida-server -d FRIDA_TEST

Results in:
I   ‚û§‚Äã  ls /tmp/FRIDA_TEST                                                                                                                                                       [~/caps/frida]
frida-helper-32*  frida-helper-64*",Thanks! No worries ‚Äì being able to pick the directory is a nice feature though!,True,{}
frida/frida-core,https://github.com/frida/frida-core,221,2018-12-13T13:45:46Z,2018-12-14T15:22:29Z,2018-12-14T15:22:29Z,MERGED,True,4,0,1,https://github.com/mrmacete,Keep a reference to the task port while spawn_instance is alive,2,[],https://github.com/frida/frida-core/pull/221,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/221,To avoid it to be destroyed too early in case the app takes too long to be loaded.,To avoid it to be destroyed too early in case the app takes too long to be loaded.,True,{}
frida/frida-core,https://github.com/frida/frida-core,221,2018-12-13T13:45:46Z,2018-12-14T15:22:29Z,2018-12-14T15:22:29Z,MERGED,True,4,0,1,https://github.com/mrmacete,Keep a reference to the task port while spawn_instance is alive,2,[],https://github.com/frida/frida-core/pull/221,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/221#issuecomment-447038332,To avoid it to be destroyed too early in case the app takes too long to be loaded.,force-pushed with the new attempt to fix this,True,{}
frida/frida-core,https://github.com/frida/frida-core,221,2018-12-13T13:45:46Z,2018-12-14T15:22:29Z,2018-12-14T15:22:29Z,MERGED,True,4,0,1,https://github.com/mrmacete,Keep a reference to the task port while spawn_instance is alive,2,[],https://github.com/frida/frida-core/pull/221,https://github.com/mrmacete,3,https://github.com/frida/frida-core/pull/221#issuecomment-447242374,To avoid it to be destroyed too early in case the app takes too long to be loaded.,right üòÇ! i'm blind,True,{}
frida/frida-core,https://github.com/frida/frida-core,222,2019-01-11T14:44:04Z,2019-01-11T23:48:00Z,2019-01-11T23:53:07Z,MERGED,True,46,17,1,https://github.com/iGio90,Improve frida-inject to accept script on stdin,5,[],https://github.com/frida/frida-core/pull/222,https://github.com/iGio90,1,https://github.com/frida/frida-core/pull/222,"Scenario: i recently bought an android device which needs to do something through injector.
This device for some reason that i don't want to know doesn't allow ""setenforce 0"" on the stock kernel.
The enforcing selinux doesn't allow frida injector to read files from outside it's context.
An higher level solution wich would bring benefit in other situations would be providing the script source straight to the injector through other ways.
Discussed with the owner both, a base64'd input to avoid issues with \n or an input to the stdin (through outputstream).
I'm gonna use this through an android app which uses Process to run a su -c command to invoke the injector. Tested and working by providing the script to the outputstream
and later by closing it (eof).","Scenario: i recently bought an android device which needs to do something through injector.
This device for some reason that i don't want to know doesn't allow ""setenforce 0"" on the stock kernel.
The enforcing selinux doesn't allow frida injector to read files from outside it's context.
An higher level solution wich would bring benefit in other situations would be providing the script source straight to the injector through other ways.
Discussed with the owner both, a base64'd input to avoid issues with \n or an input to the stdin (through outputstream).
I'm gonna use this through an android app which uses Process to run a su -c command to invoke the injector. Tested and working by providing the script to the outputstream
and later by closing it (eof).",True,{}
frida/frida-core,https://github.com/frida/frida-core,223,2019-01-12T23:54:50Z,2019-04-12T12:33:10Z,2019-04-12T12:33:10Z,CLOSED,False,19,4,1,https://github.com/iGio90,Make injector spawn and attach target if it's not running,2,[],https://github.com/frida/frida-core/pull/223,https://github.com/iGio90,1,https://github.com/frida/frida-core/pull/223,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,223,2019-01-12T23:54:50Z,2019-04-12T12:33:10Z,2019-04-12T12:33:10Z,CLOSED,False,19,4,1,https://github.com/iGio90,Make injector spawn and attach target if it's not running,2,[],https://github.com/frida/frida-core/pull/223,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/223#issuecomment-453844512,,"Thanks! I think spawning is a nice feature, but I think we should add an explicit switch for it. Especially since the process name and the app ID aren't usually the same on iOS.",True,{}
frida/frida-core,https://github.com/frida/frida-core,223,2019-01-12T23:54:50Z,2019-04-12T12:33:10Z,2019-04-12T12:33:10Z,CLOSED,False,19,4,1,https://github.com/iGio90,Make injector spawn and attach target if it's not running,2,[],https://github.com/frida/frida-core/pull/223,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/223#issuecomment-453845308,,"Perhaps -f for consistency with the other CLI tools in frida-tools.
That will only solve the case of wanting to spawn though, which means any already running instance gets killed... perhaps we can support the ""only spawn if necessary"" case by requiring you to specify both -f and -n.",True,{}
frida/frida-core,https://github.com/frida/frida-core,223,2019-01-12T23:54:50Z,2019-04-12T12:33:10Z,2019-04-12T12:33:10Z,CLOSED,False,19,4,1,https://github.com/iGio90,Make injector spawn and attach target if it's not running,2,[],https://github.com/frida/frida-core/pull/223,https://github.com/iGio90,4,https://github.com/frida/frida-core/pull/223#issuecomment-453880089,,this should be the easier solution? providing -f for explicit ask for spawn?,True,{}
frida/frida-core,https://github.com/frida/frida-core,223,2019-01-12T23:54:50Z,2019-04-12T12:33:10Z,2019-04-12T12:33:10Z,CLOSED,False,19,4,1,https://github.com/iGio90,Make injector spawn and attach target if it's not running,2,[],https://github.com/frida/frida-core/pull/223,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/223#issuecomment-482557314,,Timed out. Please reopen later if you're interested in addressing the remaining issues.,True,{}
frida/frida-core,https://github.com/frida/frida-core,224,2019-01-19T22:34:44Z,2019-01-21T12:50:30Z,2019-01-21T12:51:25Z,MERGED,True,84,0,2,https://github.com/mrmacete,Fix additional deadlock scenarios on i/macOS,4,[],https://github.com/frida/frida-core/pull/224,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/224,By handling cloaked threads in task_threads() and thread_resume().,By handling cloaked threads in task_threads() and thread_resume().,True,{}
frida/frida-core,https://github.com/frida/frida-core,225,2019-01-28T22:42:45Z,2019-01-28T22:55:03Z,2019-01-28T22:55:08Z,MERGED,True,1691,319,25,https://github.com/oleavr,Add crash reporting APIs,29,[],https://github.com/frida/frida-core/pull/225,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/225,"Device::process-crashed(crash)
Session::detached(reason, crash)","Device::process-crashed(crash)
Session::detached(reason, crash)",True,{}
frida/frida-core,https://github.com/frida/frida-core,227,2019-02-04T12:43:30Z,2019-02-04T12:44:41Z,2019-02-04T12:44:45Z,MERGED,True,235,69,5,https://github.com/oleavr,Add crash summary,2,[],https://github.com/frida/frida-core/pull/227,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/227,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,230,2019-03-05T21:45:59Z,2019-03-08T16:07:09Z,2019-03-08T22:43:16Z,MERGED,True,25,22,3,https://github.com/mrmacete,Add preliminary support for iOS 12.x,5,[],https://github.com/frida/frida-core/pull/230,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/230,"avoid calling into SpringBoardServices during app launch (to avoid deadlocking SpringBoard)
let need_helpers be always TRUE for now
include iOS 12.0 in the buggy set because the beta is still buggy
deal with SBSCopyFrontmostApplicationDisplayIdentifier returning garbage of length 1 when no frontmost app is there
add the com.apple.private.security.container-required entitlement set to false

For the records: these fixes are jailbreak-agnostic, that means it's just adapting to the newer system - different jailbreaks may need different jailbreak-specific tricks for Frida to properly work there.","avoid calling into SpringBoardServices during app launch (to avoid deadlocking SpringBoard)
let need_helpers be always TRUE for now
include iOS 12.0 in the buggy set because the beta is still buggy
deal with SBSCopyFrontmostApplicationDisplayIdentifier returning garbage of length 1 when no frontmost app is there
add the com.apple.private.security.container-required entitlement set to false

For the records: these fixes are jailbreak-agnostic, that means it's just adapting to the newer system - different jailbreaks may need different jailbreak-specific tricks for Frida to properly work there.",True,{}
frida/frida-core,https://github.com/frida/frida-core,231,2019-03-21T23:55:33Z,2019-03-27T12:06:58Z,2019-03-27T12:06:59Z,CLOSED,False,15,22,1,https://github.com/mrmacete,Get rid of plist check for detecting apps,1,[],https://github.com/frida/frida-core/pull/231,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/231,"Instead parse the executable header and look for dependency on UIKit
depends on frida/frida-gum#329","Instead parse the executable header and look for dependency on UIKit
depends on frida/frida-gum#329",True,{}
frida/frida-core,https://github.com/frida/frida-core,231,2019-03-21T23:55:33Z,2019-03-27T12:06:58Z,2019-03-27T12:06:59Z,CLOSED,False,15,22,1,https://github.com/mrmacete,Get rid of plist check for detecting apps,1,[],https://github.com/frida/frida-core/pull/231,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/231#issuecomment-477121348,"Instead parse the executable header and look for dependency on UIKit
depends on frida/frida-gum#329",Tweaked version committed as 35e0c72. Thanks! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,232,2019-04-01T08:49:05Z,2019-04-12T12:32:17Z,2019-04-15T11:36:26Z,MERGED,True,5,1,2,https://github.com/stevielavern,Make it possible to disable tests,6,[],https://github.com/frida/frida-core/pull/232,https://github.com/stevielavern,1,https://github.com/frida/frida-core/pull/232,"I suggest to make it possible to disable tests (by default, they are built). This will speed up automated builds and allow to skip failing tests (e.g. on linux-arm, cf. issue #190) until they are fixed.","I suggest to make it possible to disable tests (by default, they are built). This will speed up automated builds and allow to skip failing tests (e.g. on linux-arm, cf. issue #190) until they are fixed.",True,{}
frida/frida-core,https://github.com/frida/frida-core,232,2019-04-01T08:49:05Z,2019-04-12T12:32:17Z,2019-04-15T11:36:26Z,MERGED,True,5,1,2,https://github.com/stevielavern,Make it possible to disable tests,6,[],https://github.com/frida/frida-core/pull/232,https://github.com/stevielavern,2,https://github.com/frida/frida-core/pull/232#issuecomment-480733508,"I suggest to make it possible to disable tests (by default, they are built). This will speed up automated builds and allow to skip failing tests (e.g. on linux-arm, cf. issue #190) until they are fixed.",Done!,True,{}
frida/frida-core,https://github.com/frida/frida-core,232,2019-04-01T08:49:05Z,2019-04-12T12:32:17Z,2019-04-15T11:36:26Z,MERGED,True,5,1,2,https://github.com/stevielavern,Make it possible to disable tests,6,[],https://github.com/frida/frida-core/pull/232,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/232#issuecomment-482557051,"I suggest to make it possible to disable tests (by default, they are built). This will speed up automated builds and allow to skip failing tests (e.g. on linux-arm, cf. issue #190) until they are fixed.",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,233,2019-04-05T16:14:44Z,2019-04-05T16:45:18Z,2019-04-05T17:11:05Z,MERGED,True,23,3,1,https://github.com/mrmacete,Improve iOS crash reporting,1,[],https://github.com/frida/frida-core/pull/233,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/233,"avoid trying to deliver crash reports to dying xpcproxies
bump all delivery timeouts which aren‚Äôt still expired at the time a crash report process is detected, in case it takes too much time to be attached and instrumented (especially when recovering from memory pressure after a jetsam event)","avoid trying to deliver crash reports to dying xpcproxies
bump all delivery timeouts which aren‚Äôt still expired at the time a crash report process is detected, in case it takes too much time to be attached and instrumented (especially when recovering from memory pressure after a jetsam event)",True,{}
frida/frida-core,https://github.com/frida/frida-core,234,2019-04-26T09:12:03Z,2019-04-26T13:34:22Z,2019-04-26T13:34:22Z,MERGED,True,5,1,1,https://github.com/azurda,Fix CreateProcessInternalW in older windows versions (child_gating),5,[],https://github.com/frida/frida-core/pull/234,https://github.com/azurda,1,https://github.com/frida/frida-core/pull/234,"Related to frida/frida#854
Frida didn't have a fallback API to call and it was sending a null address to the upcoming calls. This should fix the problem in older versions of Windows where CreateProcessInternalW is in kernel32.dll and not yet in Kernelbase.dll","Related to frida/frida#854
Frida didn't have a fallback API to call and it was sending a null address to the upcoming calls. This should fix the problem in older versions of Windows where CreateProcessInternalW is in kernel32.dll and not yet in Kernelbase.dll",True,{}
frida/frida-core,https://github.com/frida/frida-core,235,2019-04-28T16:21:46Z,2019-04-28T16:29:44Z,2019-04-28T16:32:37Z,MERGED,True,2,0,1,https://github.com/thestr4ng3r,Add g_set_prgname() to frida_init(),2,[],https://github.com/frida/frida-core/pull/235,https://github.com/thestr4ng3r,1,https://github.com/frida/frida-core/pull/235,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,236,2019-05-01T13:45:05Z,2019-05-01T20:09:58Z,2019-05-01T20:09:58Z,MERGED,True,47,20,3,https://github.com/mrmacete,Fix spawn on Chimera jailbreak,5,[],https://github.com/frida/frida-core/pull/236,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/236,"By reimplementing jb_connect, jb_disconnect and jb_entitle_now which apparently are gone in libjailbreak.dylib (the symbols are there but do nothing with success).","By reimplementing jb_connect, jb_disconnect and jb_entitle_now which apparently are gone in libjailbreak.dylib (the symbols are there but do nothing with success).",True,{}
frida/frida-core,https://github.com/frida/frida-core,237,2019-05-01T13:47:37Z,2019-05-01T16:19:22Z,2019-05-01T16:19:22Z,MERGED,True,7,0,1,https://github.com/mrmacete,Fix iOS buggy kernel check,1,[],https://github.com/frida/frida-core/pull/237,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/237,by explicitly excluding 12.0 GM to 12.0.1 from the buggy set,by explicitly excluding 12.0 GM to 12.0.1 from the buggy set,True,{}
frida/frida-core,https://github.com/frida/frida-core,237,2019-05-01T13:47:37Z,2019-05-01T16:19:22Z,2019-05-01T16:19:22Z,MERGED,True,7,0,1,https://github.com/mrmacete,Fix iOS buggy kernel check,1,[],https://github.com/frida/frida-core/pull/237,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/237#issuecomment-488330162,by explicitly excluding 12.0 GM to 12.0.1 from the buggy set,"Nice, thanks! ü§ò",True,{}
frida/frida-core,https://github.com/frida/frida-core,238,2019-05-09T22:50:24Z,2019-05-10T16:38:17Z,2019-05-10T16:38:20Z,MERGED,True,551,378,12,https://github.com/oleavr,Add support for specifying script options,1,[],https://github.com/frida/frida-core/pull/238,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/238,"The only supported option for now is for explicitly picking a JavaScript
runtime. This means that enable_jit() is now deprecated, but works
better than before as there is no longer any restriction on when it may
be called. All it does now is change the default for scripts created
without specifying which runtime to use.","The only supported option for now is for explicitly picking a JavaScript
runtime. This means that enable_jit() is now deprecated, but works
better than before as there is no longer any restriction on when it may
be called. All it does now is change the default for scripts created
without specifying which runtime to use.",True,{}
frida/frida-core,https://github.com/frida/frida-core,239,2019-05-13T09:21:04Z,2019-05-15T21:39:48Z,2019-05-15T21:39:48Z,CLOSED,False,26,3,1,https://github.com/xiofee,Fix can't find Apple USB device on Windows,2,[],https://github.com/frida/frida-core/pull/239,https://github.com/xiofee,1,https://github.com/frida/frida-core/pull/239,"fix can't find udid in instance_id, use device_path instead.
device_path like  \\?\usb#vid_05ac&pid_12a8&mi_01#6&f39b6b7&0&0001#{f0b32be3-6678-4879-9230-e43845d805ee}\usb#vid_05ac&pid_12a8#5e2e327fcfed253f438dc390e7e5e85913aab4a6#mux1.


while SetupDiOpenDevRegKey opens key not contain FriendlyName , read Label instead.


Tested on Windows 7 and 10, it's working fine.","fix can't find udid in instance_id, use device_path instead.
device_path like  \\?\usb#vid_05ac&pid_12a8&mi_01#6&f39b6b7&0&0001#{f0b32be3-6678-4879-9230-e43845d805ee}\usb#vid_05ac&pid_12a8#5e2e327fcfed253f438dc390e7e5e85913aab4a6#mux1.


while SetupDiOpenDevRegKey opens key not contain FriendlyName , read Label instead.


Tested on Windows 7 and 10, it's working fine.",True,{'THUMBS_UP': ['https://github.com/AeonLucid']}
frida/frida-core,https://github.com/frida/frida-core,239,2019-05-13T09:21:04Z,2019-05-15T21:39:48Z,2019-05-15T21:39:48Z,CLOSED,False,26,3,1,https://github.com/xiofee,Fix can't find Apple USB device on Windows,2,[],https://github.com/frida/frida-core/pull/239,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/239#issuecomment-492833849,"fix can't find udid in instance_id, use device_path instead.
device_path like  \\?\usb#vid_05ac&pid_12a8&mi_01#6&f39b6b7&0&0001#{f0b32be3-6678-4879-9230-e43845d805ee}\usb#vid_05ac&pid_12a8#5e2e327fcfed253f438dc390e7e5e85913aab4a6#mux1.


while SetupDiOpenDevRegKey opens key not contain FriendlyName , read Label instead.


Tested on Windows 7 and 10, it's working fine.","Awesome, thanks a lot!
Tweaked version merged as 8f3d1f2. Will be available in Frida 12.5.5, currently being released.
Cheers!",True,{}
frida/frida-core,https://github.com/frida/frida-core,240,2019-05-16T17:26:28Z,2019-07-02T19:07:11Z,2019-07-02T19:07:11Z,CLOSED,False,1,1,1,https://github.com/nikswap,Updated with hint of how to contionue using Magisk Hide and frida,1,[],https://github.com/frida/frida-core/pull/240,https://github.com/nikswap,1,https://github.com/frida/frida-core/pull/240,Added more hints to use Magisk Hide even though it traces Zygote.,Added more hints to use Magisk Hide even though it traces Zygote.,True,{}
frida/frida-core,https://github.com/frida/frida-core,240,2019-05-16T17:26:28Z,2019-07-02T19:07:11Z,2019-07-02T19:07:11Z,CLOSED,False,1,1,1,https://github.com/nikswap,Updated with hint of how to contionue using Magisk Hide and frida,1,[],https://github.com/frida/frida-core/pull/240,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/240#issuecomment-493210878,Added more hints to use Magisk Hide even though it traces Zygote.,Thanks! I think we still need to understand this a little better before we add too many details. Did you figure out the crash you were seeing?,True,{}
frida/frida-core,https://github.com/frida/frida-core,240,2019-05-16T17:26:28Z,2019-07-02T19:07:11Z,2019-07-02T19:07:11Z,CLOSED,False,1,1,1,https://github.com/nikswap,Updated with hint of how to contionue using Magisk Hide and frida,1,[],https://github.com/frida/frida-core/pull/240,https://github.com/nikswap,3,https://github.com/frida/frida-core/pull/240#issuecomment-493213779,Added more hints to use Magisk Hide even though it traces Zygote.,"No. Only that the frontend froze and the watchdog rebooted it. Here are the extract from logcat:
05-16 20:01:38.873  1599  2150 E zygote  : libdebuggerd_client: timeout expired
05-16 20:01:38.874  1065  1065 I /system/bin/tombstoned: intercept for pid 9105 terminated due to input
05-16 20:01:38.874  1599  2150 W Watchdog: logMessageQueue : start.
05-16 20:01:38.878  1599  2150 W Watchdog: logMessageQueue : end.
05-16 20:01:40.370  7538  7908 D ClClient: Not sending keepalive.  Current connection state=STOPPED
05-16 20:01:40.879  1599  2150 I Watchdog_N: dumpKernelStacks
05-16 20:01:43.141   532   796 W qti_sensors_hal: processReportInd: lux: 271, ch0: 126, ch1: 275
05-16 20:01:45.241   572   572 I SFPerfTracer:      triggers: (rate: 3:121) (compose: 0:0) (post: 0:0) (render: 0:0) (0:2861 frames) (1:3333)
05-16 20:01:45.241   572   572 D SFPerfTracer:        layers: (6:8) (NavigationBar#0 (0xb12d5000): 0:27) (StatusBar#0 (0xb12d7000): 0:2321) (RoundedOverlay#0 (0xb1376000): 0:40) (RoundedOverlay#1 (0xb1295000): 0:45) (com.android.systemui.ImageWallpaper#0 (0xb1447000): 0:5) (com.motorola.launcher3/com.android.launcher3.CustomizationPanelLauncher#0 (0xb1457000): 0:389) (com.motorola.launcher3/com.android.launcher3.CustomizationPanelLauncher#1 (0xb136a000): 0:23)* (DimLayerController/Stack=0#0 (0xb1589000): 0:25)* 
05-16 20:01:45.406   572   779 I SFPerfTracer:      triggers: (rate: 0:0) (0 sw vsyncs) (0 skipped) (0:2997 vsyncs) (1:3534)
05-16 20:01:50.370  7538  7908 D ClClient: Not sending keepalive.  Current connection state=STOPPED
05-16 20:01:50.949  1599  2150 W Watchdog: *** WATCHDOG KILLING SYSTEM PROCESS: Blocked in handler on foreground thread (android.fg), Blocked in handler on main thread (main), Blocked in handler on ActivityManager (ActivityManager)
05-16 20:01:50.949  1599  2150 W Watchdog: foreground thread stack trace:
05-16 20:01:50.949  1599  2150 W Watchdog:     at com.android.server.am.ActivityManagerService.broadcastIntent(ActivityManagerService.java:20136)
05-16 20:01:50.949  1599  2150 W Watchdog:     at android.app.ContextImpl.sendOrderedBroadcastAsUser(ContextImpl.java:1207)
...
05-16 20:01:50.949  1599  2150 W Watchdog: main thread stack trace:
05-16 20:01:50.950  1599  2150 W Watchdog:     at com.android.server.am.UserController.getCurrentUser(UserController.java:1526)
05-16 20:01:50.950  1599  2150 W Watchdog:     at com.android.server.am.ActivityManagerService.getCurrentUser(ActivityManagerService.java:24073)
...
05-16 20:01:50.950  1599  2150 W Watchdog: ActivityManager stack trace:
05-16 20:01:50.950  1599  2150 W Watchdog:     at android.net.LocalSocketImpl.readba_native(Native Method)
05-16 20:01:50.950  1599  2150 W Watchdog:     at android.net.LocalSocketImpl.-wrap1(Unknown Source:0)
05-16 20:01:50.950  1599  2150 W Watchdog:     at android.net.LocalSocketImpl$SocketInputStream.read(LocalSocketImpl.java:110)
...
05-16 20:01:50.951  1599  2150 W Watchdog: *** GOODBYE!
05-16 20:01:50.951  1599  2150 I Process : Sending signal. PID: 1599 SIG: 9
05-16 20:01:51.216  2689  2689 D AndroidRuntime: Shutting down VM
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: Failed to call setHasTopUi
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: android.os.DeadObjectException
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: 	at android.os.BinderProxy.transactNative(Native Method)
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: 	at android.os.BinderProxy.transact(Binder.java:748)
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: 	at android.app.IActivityManager$Stub$Proxy.setHasTopUi(IActivityManager.java:10171)
05-16 20:01:51.217  2080  2080 E StatusBarWindowManager: 	at com.android.systemui.statusbar.phone.StatusBarWindowManager.apply(StatusBarWindowManager.java:232)",True,{}
frida/frida-core,https://github.com/frida/frida-core,240,2019-05-16T17:26:28Z,2019-07-02T19:07:11Z,2019-07-02T19:07:11Z,CLOSED,False,1,1,1,https://github.com/nikswap,Updated with hint of how to contionue using Magisk Hide and frida,1,[],https://github.com/frida/frida-core/pull/240,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/240#issuecomment-507806830,Added more hints to use Magisk Hide even though it traces Zygote.,Let's keep this simple until we know more.,True,{}
frida/frida-core,https://github.com/frida/frida-core,242,2019-05-23T02:23:19Z,2019-05-24T14:36:29Z,2019-05-24T14:36:37Z,MERGED,True,13,2,1,https://github.com/gebing,Fix child-gating when child changes architecture,2,[],https://github.com/frida/frida-core/pull/242,https://github.com/gebing,1,https://github.com/frida/frida-core/pull/242,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,242,2019-05-23T02:23:19Z,2019-05-24T14:36:29Z,2019-05-24T14:36:37Z,MERGED,True,13,2,1,https://github.com/gebing,Fix child-gating when child changes architecture,2,[],https://github.com/frida/frida-core/pull/242,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/242#issuecomment-495234638,,"Thanks! This is a great find. I'm a bit concerned about caching in this case, as other requests may end up hitting the wrong helper process. What do you think about making the resume () implementation do a try/catch, and checking if e is Error.INVALID_ARGUMENT and if that is the case, retry the request on the other helper? (And if not, rethrow.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,242,2019-05-23T02:23:19Z,2019-05-24T14:36:29Z,2019-05-24T14:36:37Z,MERGED,True,13,2,1,https://github.com/gebing,Fix child-gating when child changes architecture,2,[],https://github.com/frida/frida-core/pull/242,https://github.com/gebing,3,https://github.com/frida/frida-core/pull/242#issuecomment-495456456,,"i think your idea is ok, and i can modify this PR and do some test.",True,{}
frida/frida-core,https://github.com/frida/frida-core,242,2019-05-23T02:23:19Z,2019-05-24T14:36:29Z,2019-05-24T14:36:37Z,MERGED,True,13,2,1,https://github.com/gebing,Fix child-gating when child changes architecture,2,[],https://github.com/frida/frida-core/pull/242,https://github.com/gebing,4,https://github.com/frida/frida-core/pull/242#issuecomment-495478130,,I have tested it and it works ok,True,{}
frida/frida-core,https://github.com/frida/frida-core,242,2019-05-23T02:23:19Z,2019-05-24T14:36:29Z,2019-05-24T14:36:37Z,MERGED,True,13,2,1,https://github.com/gebing,Fix child-gating when child changes architecture,2,[],https://github.com/frida/frida-core/pull/242,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/242#issuecomment-495657391,,"Looks great, thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,244,2019-05-25T22:00:28Z,2019-05-26T16:47:11Z,2019-05-26T22:38:10Z,MERGED,True,6,0,1,https://github.com/iGio90,Add memcpy() to the libc shim,1,[],https://github.com/frida/frida-core/pull/244,https://github.com/iGio90,1,https://github.com/frida/frida-core/pull/244,"What i'll say it's not confirmed by debugging but just by impressions:
I did worked the whole day hunting some bugs while hooking memcpy.
Before adding memcpy to the shim, the hook on memcpy hit 5/10 threads at once (tested over (50?) times on the same target).
When breakpointed, each thread was calling different frida api (the most used were DebugSymbol.fromAddress and Memory.readByteArray).
After adding the memcpy to the libc-shim, the same proc hit the hook 1/2 times.
I didn't debugged in the deep if that's really true that some internal frida api uses memcpy so, I would like someone to confirm this in case but from what i get from @oleavr this is safe in any case to be added","What i'll say it's not confirmed by debugging but just by impressions:
I did worked the whole day hunting some bugs while hooking memcpy.
Before adding memcpy to the shim, the hook on memcpy hit 5/10 threads at once (tested over (50?) times on the same target).
When breakpointed, each thread was calling different frida api (the most used were DebugSymbol.fromAddress and Memory.readByteArray).
After adding the memcpy to the libc-shim, the same proc hit the hook 1/2 times.
I didn't debugged in the deep if that's really true that some internal frida api uses memcpy so, I would like someone to confirm this in case but from what i get from @oleavr this is safe in any case to be added",True,{}
frida/frida-core,https://github.com/frida/frida-core,245,2019-07-01T22:32:24Z,2019-07-02T19:06:22Z,2019-07-02T19:06:25Z,MERGED,True,63,42,1,https://github.com/oleavr,Improve early instrumentation on i/macOS,2,[],https://github.com/frida/frida-core/pull/245,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/245,"Always set up the fake helpers, as also the latest OSes need them now.
Fix the ret gadget behavior when used for both helpers and strcmp()
in combination with single-stepping (x86).

This means iOS 12 is now fully supported.
Tested on:

 macOS 10.14.5
 iOS 9.0.2
 iOS 10.2
 iOS 11.1.2
 iOS 12.1.1","Always set up the fake helpers, as also the latest OSes need them now.
Fix the ret gadget behavior when used for both helpers and strcmp()
in combination with single-stepping (x86).

This means iOS 12 is now fully supported.
Tested on:

 macOS 10.14.5
 iOS 9.0.2
 iOS 10.2
 iOS 11.1.2
 iOS 12.1.1",True,{}
frida/frida-core,https://github.com/frida/frida-core,247,2019-07-04T05:58:32Z,2019-07-05T12:43:31Z,2019-08-01T06:08:08Z,MERGED,True,16,0,1,https://github.com/gebing,Android gadget get executable name and package name,3,[],https://github.com/frida/frida-core/pull/247,https://github.com/gebing,1,https://github.com/frida/frida-core/pull/247,"The executable name in gadget of android is always 'app_process32' or 'app_process64', and the bundle name is always null. So the feature of script optional configuration in ScriptDirectory mode is not work in android because of the filter will always not match.
I add additional  code for Android to retrieve real executable name and package name, and now android's gadget can work with script optional configuration such as below:
{
  ""filter"": {
     ""executables"": [""com.target.app:remote""]
  }
}

or like:
{
  ""filter"": {
     ""bundles"": [""com.target.app""]
  }
}","The executable name in gadget of android is always 'app_process32' or 'app_process64', and the bundle name is always null. So the feature of script optional configuration in ScriptDirectory mode is not work in android because of the filter will always not match.
I add additional  code for Android to retrieve real executable name and package name, and now android's gadget can work with script optional configuration such as below:
{
  ""filter"": {
     ""executables"": [""com.target.app:remote""]
  }
}

or like:
{
  ""filter"": {
     ""bundles"": [""com.target.app""]
  }
}",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,247,2019-07-04T05:58:32Z,2019-07-05T12:43:31Z,2019-08-01T06:08:08Z,MERGED,True,16,0,1,https://github.com/gebing,Android gadget get executable name and package name,3,[],https://github.com/frida/frida-core/pull/247,https://github.com/xiaobaiyey,2,https://github.com/frida/frida-core/pull/247#issuecomment-517134172,"The executable name in gadget of android is always 'app_process32' or 'app_process64', and the bundle name is always null. So the feature of script optional configuration in ScriptDirectory mode is not work in android because of the filter will always not match.
I add additional  code for Android to retrieve real executable name and package name, and now android's gadget can work with script optional configuration such as below:
{
  ""filter"": {
     ""executables"": [""com.target.app:remote""]
  }
}

or like:
{
  ""filter"": {
     ""bundles"": [""com.target.app""]
  }
}","https://github.com/frida/frida-core/blob/master/lib/gadget/gadget.vala#L316
cached_bundle_id = cmdline[0:cmdline.last_index_of ("":"")];
cmdline.last_index_of ("":"")
for android app will got -1, not all porcess cmdlie file content has "":"";
The cached_bundle_id retrieved will be one character short,
so I thought I'd check to see if the return value of last_index_of is equal to -1,",True,{}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/ChiChou,1,https://github.com/frida/frida-core/pull/248,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail","From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail",True,{}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/248#issuecomment-510839145,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail","Thanks! Would be good to also add it to frida-helper.xcent, even if it's only used for devkits.",True,{}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/ChiChou,3,https://github.com/frida/frida-core/pull/248#issuecomment-511217818,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail","@oleavr Please don't merge now. The binary format is currently broken
make[1]: *** [build/.core-ios-stamp-frida_thin-ios-arm64] Error 1",True,{}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/ChiChou,4,https://github.com/frida/frida-core/pull/248#issuecomment-511274052,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail","@oleavr All three xcent files have been updated.
Here's a simple script to update the entitlements
import struct
import plistlib


def patch(filename):
    import os
    absname = os.path.join('GitHub/frida', filename)
    with open(absname, 'rb') as fp:
        buf = fp.read()

    magic, length = struct.unpack('>II', buf[0:8])
    print('magic', hex(magic))
    print('len', length)
    assert(len(buf) == length)
    o = plistlib.loads(buf[8:])
    o['com.apple.springboard.iconState'] = True
    # print(o)
    ent = plistlib.dumps(o)
    adjusted = buf[0:4] + struct.pack('>I', len(ent) + 8) + ent
    with open(absname, 'wb') as fp:
        fp.write(adjusted)


todo = [
    './frida-core/tests/frida-tests.xcent',
    './frida-core/server/frida-server.xcent',
    './frida-core/src/darwin/frida-helper.xcent']

for item in todo:
    patch(item)
But I think it's better to track them in plain text and then use a build script to convert them",True,{}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/ChiChou,5,https://github.com/frida/frida-core/pull/248#issuecomment-511277238,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail",The truth is that these files can be in plain text...,True,{'LAUGH': ['https://github.com/xelzmm']}
frida/frida-core,https://github.com/frida/frida-core,248,2019-07-12T10:17:11Z,2019-07-17T14:38:42Z,2019-07-17T14:38:43Z,MERGED,True,0,0,3,https://github.com/ChiChou,bugfix: app icons on iOS12 are missing,2,[],https://github.com/frida/frida-core/pull/248,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/248#issuecomment-512283816,"From iOS12, SBSCopyIconImagePNGDataForDisplayIdentifier requires com.apple.springboard.iconState, otherwise it would fail",Thanks! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,249,2019-07-13T04:41:16Z,2019-07-23T17:14:08Z,2019-07-24T16:01:46Z,MERGED,True,43,8,1,https://github.com/eugenekolo,Add --parameters to frida-inject to allow specify parameters using a JSON string similar to frida-gadget,9,[],https://github.com/frida/frida-core/pull/249,https://github.com/eugenekolo,1,https://github.com/frida/frida-core/pull/249,"My first Vala code, so it might not be vala-thonic
./frida-inject -p 16920 --script test.js --parameters '{""paramBool"": true, ""paramArray"": [1,2,3], ""paramInt"": 1, ""paramStr"": ""str"", ""paramObj"": {""a"": [""b"", ""c"", {}]}}'
stage early
parameters {""paramBool"":true,""paramArray"":[1,2,3],""paramInt"":1,""paramStr"":""str"",""paramObj"":{""a"":[""b"",""c"",{}]}}","My first Vala code, so it might not be vala-thonic
./frida-inject -p 16920 --script test.js --parameters '{""paramBool"": true, ""paramArray"": [1,2,3], ""paramInt"": 1, ""paramStr"": ""str"", ""paramObj"": {""a"": [""b"", ""c"", {}]}}'
stage early
parameters {""paramBool"":true,""paramArray"":[1,2,3],""paramInt"":1,""paramStr"":""str"",""paramObj"":{""a"":[""b"",""c"",{}]}}",True,{}
frida/frida-core,https://github.com/frida/frida-core,249,2019-07-13T04:41:16Z,2019-07-23T17:14:08Z,2019-07-24T16:01:46Z,MERGED,True,43,8,1,https://github.com/eugenekolo,Add --parameters to frida-inject to allow specify parameters using a JSON string similar to frida-gadget,9,[],https://github.com/frida/frida-core/pull/249,https://github.com/eugenekolo,2,https://github.com/frida/frida-core/pull/249#issuecomment-513081960,"My first Vala code, so it might not be vala-thonic
./frida-inject -p 16920 --script test.js --parameters '{""paramBool"": true, ""paramArray"": [1,2,3], ""paramInt"": 1, ""paramStr"": ""str"", ""paramObj"": {""a"": [""b"", ""c"", {}]}}'
stage early
parameters {""paramBool"":true,""paramArray"":[1,2,3],""paramInt"":1,""paramStr"":""str"",""paramObj"":{""a"":[""b"",""c"",{}]}}","Done. Moved to where the other args are passed.
Tested now with passing blank parameters too. Same as Gadget handling, where it passes a {}.
Testing:
kiwi:/data/local/tmp # cat test.js 
'use strict';

rpc.exports = {
    init: function (stage, parameters) {
	console.log('stage', stage);
	console.log('parameters', JSON.stringify(parameters));
    },
};

kiwi:/data/local/tmp # ./frida-inject -p 1256 --script test.js --parameters '{""parmBool"": true, ""paramArray"": [1,2,3], ""paramInt"": 1, ""paramStr"": ""str"", ""paramObj"": {""a"": [""b"", ""c"", {}]}}'                                                    <
stage early
parameters {""paramBool"":true,""paramArray"":[1,2,3],""paramInt"":1,""paramStr"":""str"",""paramObj"":{""a"":[""b"",""c"",{}]}}

kiwi:/data/local/tmp # ./frida-inject -p 1256 --script test.js --parameters ''                                                                                 
stage early
parameters {}

kiwi:/data/local/tmp # ./frida-inject -p 1256 --script test.js --parameters '{}'                                                                               
stage early
parameters {}

kiwi:/data/local/tmp # ./frida-inject -p 1256 --script test.js                                                                                                 
stage early
parameters {}",True,{}
frida/frida-core,https://github.com/frida/frida-core,249,2019-07-13T04:41:16Z,2019-07-23T17:14:08Z,2019-07-24T16:01:46Z,MERGED,True,43,8,1,https://github.com/eugenekolo,Add --parameters to frida-inject to allow specify parameters using a JSON string similar to frida-gadget,9,[],https://github.com/frida/frida-core/pull/249,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/249#issuecomment-514694438,"My first Vala code, so it might not be vala-thonic
./frida-inject -p 16920 --script test.js --parameters '{""paramBool"": true, ""paramArray"": [1,2,3], ""paramInt"": 1, ""paramStr"": ""str"", ""paramObj"": {""a"": [""b"", ""c"", {}]}}'
stage early
parameters {""paramBool"":true,""paramArray"":[1,2,3],""paramInt"":1,""paramStr"":""str"",""paramObj"":{""a"":[""b"",""c"",{}]}}","Thanks, merged! ü§ò",True,{}
frida/frida-core,https://github.com/frida/frida-core,250,2019-07-25T23:26:28Z,2019-08-02T20:32:19Z,2019-08-02T20:32:23Z,MERGED,True,434,89,9,https://github.com/oleavr,Fix child-gating deadlocks,2,[],https://github.com/frida/frida-core/pull/250,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/250,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,251,2019-08-01T07:00:52Z,2019-08-05T07:21:35Z,2019-08-05T17:28:11Z,CLOSED,False,6,1,1,https://github.com/xiaobaiyey,fix some time get cached_bundle_id error,1,[],https://github.com/frida/frida-core/pull/251,https://github.com/xiaobaiyey,1,https://github.com/frida/frida-core/pull/251,fix some time get cached_bundle_id error,fix some time get cached_bundle_id error,True,{}
frida/frida-core,https://github.com/frida/frida-core,251,2019-08-01T07:00:52Z,2019-08-05T07:21:35Z,2019-08-05T17:28:11Z,CLOSED,False,6,1,1,https://github.com/xiaobaiyey,fix some time get cached_bundle_id error,1,[],https://github.com/frida/frida-core/pull/251,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/251#issuecomment-517973285,fix some time get cached_bundle_id error,"Thanks for the PR!
It seems to me that this is only a symptom, and not the cause. Perhaps the better solution is to stop getting this information from /proc/self/cmdline, but instead get it from somewhere where the information is not locale-dependent? I.e. : is probably only used for Western locales... so this string is only meant for humans to read, it's not meant to be machine readable.",True,{}
frida/frida-core,https://github.com/frida/frida-core,251,2019-08-01T07:00:52Z,2019-08-05T07:21:35Z,2019-08-05T17:28:11Z,CLOSED,False,6,1,1,https://github.com/xiaobaiyey,fix some time get cached_bundle_id error,1,[],https://github.com/frida/frida-core/pull/251,https://github.com/xiaobaiyey,3,https://github.com/frida/frida-core/pull/251#issuecomment-518117541,fix some time get cached_bundle_id error,"@oleavr Thank's for your reply
when I use Frida gadget's script-directory mode
angler:/ $ ps -A | grep com.coolapk.market
u0_a93       17574   610 1942552 176380 SyS_epoll_wait      0 S com.coolapk.market
u0_a93       17672   610 1699444  43636 SyS_epoll_wait      0 S com.coolapk.market:pushservice

in this case,com.coolapk.market has two processesÔºåone is com.coolapk.market ,the other is com.coolapk.market:pushservice
In the configuration file of the javascript.
executables should fill in the full process name
bundles should fill in the package name like iOS BundleID

for com.coolapk.market:pushservice
we got /proc/17672/cmdline content

angler:/ $ cat  /proc/17672/cmdline
com.coolapk.market:pushservice

we got executable_name  is com.coolapk.market:pushservice
and cached_bundle_id is com.coolapk.market
The result is correct.

for com.coolapk.market
we got /proc/17574/cmdline content

angler / # cat /proc/17574/cmdline 
com.coolapk.market

we got executable_name  is com.coolapk.market
and cached_bundle_id is com.coolapk.marke(You should notice  there is a missing letter t here)
sometime we set bundles with ""com.coolapk.market"",the configuration file will not work,because the cached_bundle_id we got is wrongÔºåone character is missing„ÄÇ
If we fill ""com.coolapk.market"" in both executables and bundles, it will not affect normal use.
That's my understanding.
hahaüòÇüòÇ",True,{}
frida/frida-core,https://github.com/frida/frida-core,251,2019-08-01T07:00:52Z,2019-08-05T07:21:35Z,2019-08-05T17:28:11Z,CLOSED,False,6,1,1,https://github.com/xiaobaiyey,fix some time get cached_bundle_id error,1,[],https://github.com/frida/frida-core/pull/251,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/251#issuecomment-518325174,fix some time get cached_bundle_id error,"Ahh, sorry, I misunderstood. So your fix was good then :-) Sorry for the confusion!
I'm releasing 12.6.12 now so I fixed this quickly in 244a47e.
Let me know how this new release works for you. Thanks!",True,{}
frida/frida-core,https://github.com/frida/frida-core,252,2019-08-03T05:06:04Z,2019-08-03T05:19:54Z,2019-08-03T05:19:57Z,MERGED,True,103,18,1,https://github.com/oleavr,Fix crash on unload with latest NDKs on Android/ARM,1,[],https://github.com/frida/frida-core/pull/252,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/252,"We previously relied on the libc++ destructors only calling free() but
not actually touching the memory before doing so, and this assumption
broke once the TLS emulation entered the picture.","We previously relied on the libc++ destructors only calling free() but
not actually touching the memory before doing so, and this assumption
broke once the TLS emulation entered the picture.",True,{}
frida/frida-core,https://github.com/frida/frida-core,253,2019-08-04T02:22:33Z,2019-08-04T02:22:46Z,2019-08-04T02:22:49Z,MERGED,True,126,158,7,https://github.com/oleavr,Handle failure to create temporary files,3,[],https://github.com/frida/frida-core/pull/253,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/253,Instead of crashing.,Instead of crashing.,True,{}
frida/frida-core,https://github.com/frida/frida-core,254,2019-08-04T06:43:23Z,2019-08-04T06:44:35Z,2019-08-04T06:44:39Z,MERGED,True,35,31,1,https://github.com/oleavr,Fix libc shim allocator logic,1,[],https://github.com/frida/frida-core/pull/254,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/254,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,260,2019-09-16T09:22:10Z,2019-09-19T16:58:21Z,2019-09-19T16:58:21Z,MERGED,True,20,6,1,https://github.com/hunterli,add spawn file argument to frida-inject,3,[],https://github.com/frida/frida-core/pull/260,https://github.com/hunterli,1,https://github.com/frida/frida-core/pull/260,./frida-inject -f com.android.browser -s hello.js,./frida-inject -f com.android.browser -s hello.js,True,{}
frida/frida-core,https://github.com/frida/frida-core,260,2019-09-16T09:22:10Z,2019-09-19T16:58:21Z,2019-09-19T16:58:21Z,MERGED,True,20,6,1,https://github.com/hunterli,add spawn file argument to frida-inject,3,[],https://github.com/frida/frida-core/pull/260,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/260#issuecomment-533219803,./frida-inject -f com.android.browser -s hello.js,Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,264,2019-10-07T16:18:42Z,2019-10-08T12:42:39Z,2019-10-08T12:49:57Z,MERGED,True,72,44,1,https://github.com/mrmacete,Split the state by thread id in the ReportCrash agent,2,[],https://github.com/frida/frida-core/pull/264,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/264,Because in some cases more than one crash can be processed in parallel in different threads.,Because in some cases more than one crash can be processed in parallel in different threads.,True,{}
frida/frida-core,https://github.com/frida/frida-core,265,2019-10-07T17:55:22Z,2019-10-08T02:01:48Z,2019-10-08T08:03:27Z,MERGED,True,1,1,1,https://github.com/cbayet,Added the 'map' right to the selinux frida_file configuration,1,[],https://github.com/frida/frida-core/pull/265,https://github.com/cbayet,1,https://github.com/frida/frida-core/pull/265,"Hi,
When trying to use Frida on a Samsung with Android 9, the system_server process dies when trying to launch the server with the following error:
type=1400 audit(1570464586.875:837): avc:  denied  { map } for  pid=19050 comm=""system_server"" path=""/system/priv-app/tmp_dir/frida-agent-64.so"" dev=""sda25"" ino=5494 scontext=u:r:system_server:s0 tcontext=u:object_r:frida_file:s0 tclass=file permissive=0 audit_filtered
So i just added the 'map' right to the selinux configuration of the frida_file context.
Tested and working on Samsung S10.","Hi,
When trying to use Frida on a Samsung with Android 9, the system_server process dies when trying to launch the server with the following error:
type=1400 audit(1570464586.875:837): avc:  denied  { map } for  pid=19050 comm=""system_server"" path=""/system/priv-app/tmp_dir/frida-agent-64.so"" dev=""sda25"" ino=5494 scontext=u:r:system_server:s0 tcontext=u:object_r:frida_file:s0 tclass=file permissive=0 audit_filtered
So i just added the 'map' right to the selinux configuration of the frida_file context.
Tested and working on Samsung S10.",True,{}
frida/frida-core,https://github.com/frida/frida-core,265,2019-10-07T17:55:22Z,2019-10-08T02:01:48Z,2019-10-08T08:03:27Z,MERGED,True,1,1,1,https://github.com/cbayet,Added the 'map' right to the selinux frida_file configuration,1,[],https://github.com/frida/frida-core/pull/265,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/265#issuecomment-539279362,"Hi,
When trying to use Frida on a Samsung with Android 9, the system_server process dies when trying to launch the server with the following error:
type=1400 audit(1570464586.875:837): avc:  denied  { map } for  pid=19050 comm=""system_server"" path=""/system/priv-app/tmp_dir/frida-agent-64.so"" dev=""sda25"" ino=5494 scontext=u:r:system_server:s0 tcontext=u:object_r:frida_file:s0 tclass=file permissive=0 audit_filtered
So i just added the 'map' right to the selinux configuration of the frida_file context.
Tested and working on Samsung S10.",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,267,2019-10-09T12:43:47Z,2019-10-09T17:05:59Z,2019-10-09T17:06:00Z,MERGED,True,2,0,1,https://github.com/mrmacete,Add missing revert() calls,1,[],https://github.com/frida/frida-core/pull/267,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/267,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,267,2019-10-09T12:43:47Z,2019-10-09T17:05:59Z,2019-10-09T17:06:00Z,MERGED,True,2,0,1,https://github.com/mrmacete,Add missing revert() calls,1,[],https://github.com/frida/frida-core/pull/267,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/267#issuecomment-540094614,,Great catch! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,268,2019-10-09T16:58:25Z,2019-10-09T17:04:55Z,2019-10-09T17:04:56Z,MERGED,True,25,1,3,https://github.com/mrmacete,Keep eternalized entries alive,1,[],https://github.com/frida/frida-core/pull/268,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/268,"So that they can be reused for future connections to the same process, avoiding the need to have more than one agent, at least during the lifetime of frida-server.","So that they can be reused for future connections to the same process, avoiding the need to have more than one agent, at least during the lifetime of frida-server.",True,{}
frida/frida-core,https://github.com/frida/frida-core,268,2019-10-09T16:58:25Z,2019-10-09T17:04:55Z,2019-10-09T17:04:56Z,MERGED,True,25,1,3,https://github.com/mrmacete,Keep eternalized entries alive,1,[],https://github.com/frida/frida-core/pull/268,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/268#issuecomment-540093501,"So that they can be reused for future connections to the same process, avoiding the need to have more than one agent, at least during the lifetime of frida-server.",Awesome! ‚ù§Ô∏è,True,{}
frida/frida-core,https://github.com/frida/frida-core,270,2019-10-10T21:43:25Z,2019-10-11T16:14:01Z,2019-10-11T16:14:10Z,MERGED,True,86,6,7,https://github.com/mrmacete,Kill pending iOS processes on launchd agent unload,5,[],https://github.com/frida/frida-core/pull/270,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/270,In this way if frida-server dies it doesn‚Äôt leave back unattended pending spawns in a suspended state.,In this way if frida-server dies it doesn‚Äôt leave back unattended pending spawns in a suspended state.,True,{}
frida/frida-core,https://github.com/frida/frida-core,271,2019-10-10T23:18:45Z,2019-10-11T02:35:25Z,2019-10-11T02:35:25Z,MERGED,True,31,4,1,https://github.com/muhzii,improve spawn in Android apps,3,[],https://github.com/frida/frida-core/pull/271,https://github.com/muhzii,1,https://github.com/frida/frida-core/pull/271,allow using the activity param in case the app doesn't have a launcher activity,allow using the activity param in case the app doesn't have a launcher activity,True,{}
frida/frida-core,https://github.com/frida/frida-core,273,2019-10-23T19:07:51Z,2020-04-22T22:07:58Z,2020-04-22T22:08:40Z,CLOSED,False,45,8,2,https://github.com/Manouchehri,Use memfd,2,[],https://github.com/frida/frida-core/pull/273,https://github.com/Manouchehri,1,https://github.com/frida/frida-core/pull/273,Ideally we should avoid requiring writing to disk. (e.g. on a RO filesystem frida-server won't be able to drop frida-helper.),Ideally we should avoid requiring writing to disk. (e.g. on a RO filesystem frida-server won't be able to drop frida-helper.),True,{}
frida/frida-core,https://github.com/frida/frida-core,273,2019-10-23T19:07:51Z,2020-04-22T22:07:58Z,2020-04-22T22:08:40Z,CLOSED,False,45,8,2,https://github.com/Manouchehri,Use memfd,2,[],https://github.com/frida/frida-core/pull/273,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/273#issuecomment-618065947,Ideally we should avoid requiring writing to disk. (e.g. on a RO filesystem frida-server won't be able to drop frida-helper.),Closing to reduce clutter in the issue tracker. Feel free to reopen at some future point if you'd like to revisit this neat idea ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,274,2019-11-07T12:10:01Z,2019-11-07T18:31:57Z,2019-11-07T18:31:57Z,MERGED,True,62,41,3,https://github.com/mrmacete,Support both cleartext and encrypted lockdown channels,2,[],https://github.com/frida/frida-core/pull/274,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/274,"By default the channel is encrypted, unless the service name includes the ‚Äú?tls=handshake-only‚Äù suffix. Internally, the ‚Äúcom.apple.debugserver‚Äù and ‚Äúcom.apple.instruments.remoteserver‚Äù channels are kept cleartext.","By default the channel is encrypted, unless the service name includes the ‚Äú?tls=handshake-only‚Äù suffix. Internally, the ‚Äúcom.apple.debugserver‚Äù and ‚Äúcom.apple.instruments.remoteserver‚Äù channels are kept cleartext.",True,{}
frida/frida-core,https://github.com/frida/frida-core,275,2019-11-14T18:22:58Z,2019-11-15T00:02:10Z,2019-11-15T00:02:33Z,MERGED,True,29,10,4,https://github.com/jonwilson030981,Armbe8,2,[],https://github.com/frida/frida-core/pull/275,https://github.com/jonwilson030981,1,https://github.com/frida/frida-core/pull/275,"I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.","I have added support for ARMBE8. This architecture has little endian code, but big endian data. ARMBE32 has big endian code and data, but is considered legacy, accordingly I have not implemented it.
Also, TinyCC doesn't appear to support BE8, so that isn't implemented for now.",True,{}
frida/frida-core,https://github.com/frida/frida-core,279,2019-11-23T15:12:19Z,2019-11-23T17:32:20Z,2019-11-23T17:32:21Z,MERGED,True,2,2,2,https://github.com/wizche,Fixed #269: Parent file descriptors not available in child process ,1,[],https://github.com/frida/frida-core/pull/279,https://github.com/wizche,1,https://github.com/frida/frida-core/pull/279,"Modified the flags for when a new process for target and helper is started.
This way FDs opened by parent are not lost. This only affect MacOS (darwin).
Check issue for additional details.","Modified the flags for when a new process for target and helper is started.
This way FDs opened by parent are not lost. This only affect MacOS (darwin).
Check issue for additional details.",True,{}
frida/frida-core,https://github.com/frida/frida-core,279,2019-11-23T15:12:19Z,2019-11-23T17:32:20Z,2019-11-23T17:32:21Z,MERGED,True,2,2,2,https://github.com/wizche,Fixed #269: Parent file descriptors not available in child process ,1,[],https://github.com/frida/frida-core/pull/279,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/279#issuecomment-557817176,"Modified the flags for when a new process for target and helper is started.
This way FDs opened by parent are not lost. This only affect MacOS (darwin).
Check issue for additional details.","Good catch, thanks for digging into this!",True,{}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/ChaosData,1,https://github.com/frida/frida-core/pull/280,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).","frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).",True,{}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/280#issuecomment-565207784,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).","I realize this isn't covered by our docs, but Gadget does support spawn(""re.frida.Gadget""). This makes it possible to do early instrumentation the usual way ‚Äì calling it sets a flag so that the following attach() doesn't implicitly resume(). It means existing tools can support regular vs gadget without any knowledge of what they're talking to.
Basically:
$ frida -U -f re.frida.Gadget --no-pause -l explore.js
Will load explore.js, and then call resume().
The frida-inject tool supports eternalizing, but frida-tools don't yet. (That would be good to support though.)",True,{'THUMBS_UP': ['https://github.com/jpstotz']}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/280#issuecomment-565208524,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).","By the way, there is no need to embed the gadget on iOS for listen use-cases ‚Äì you can frida-ps -Uai and spawn any debuggable app, and Frida will inject gadget dynamically. (No jailbreak required.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/ChaosData,4,https://github.com/frida/frida-core/pull/280#issuecomment-565273600,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).","Ok, -f re.frida.Gadget and %resume (which didn't work from non-spawned mode and only works with the repl due to it being a magic command instead of a JS API) are somewhat useful in my case, though without the --no-pause. It does still run into issues with the process exiting before console.log() can emit back to the client though (but throwing in Thread.sleep() can help). However, it's definitely the case that using -q -l script.js results in losing the hooks due to lack of eternalizing since the client will disconnect. Is there any interest in exposing some of the DBus-only APIs to the interpreter itself (or enabling an interpreter-run client)?
I'm currently working with a non-standard Linux system (ChromeOS) where Frida's injection mode doesn't work (this is known, but fwiw I've been adding a ton of logging to a custom build to try and track down where the flow is breaking down), so I've been making do with the gadget in the meantime. As an aside, do you know of any particular reason the enable_child_gating() logic from https://github.com/frida/frida-core/blob/b22fb70/lib/agent/agent.vala#L734 wouldn't work in the gadget? In the meantime I'm currently exploring methods of injecting the gadget.so into processes directly and seeing if I can hackily force the already in-memory gadget.so post fork to be executed with or without using ptrace.",True,{}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/280#issuecomment-565609783,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).","Is there any interest in exposing some of the DBus-only APIs to the interpreter itself

It's already exposed to the Python bindings. It's just the REPL that doesn't make use of it. It's only a matter of calling script.eternalize() instead of script.unload().

As an aside, do you know of any particular reason the enable_child_gating() logic from https://github.com/frida/frida-core/blob/b22fb70/lib/agent/agent.vala#L734 wouldn't work in the gadget?

It should be possible to implement it, but it will probably be very different given that it won't rely on an external process to help it through e.g. an exec() transition. But there's gotta be a way. E.g. by playing with LD_PRELOAD perhaps. (Haven't given this much thought yet, so any research on this is much appreciated!)",True,{'THUMBS_UP': ['https://github.com/ArsenyLL']}
frida/frida-core,https://github.com/frida/frida-core,280,2019-12-12T09:28:05Z,2020-01-02T20:43:26Z,2020-01-02T20:44:00Z,CLOSED,False,43,2,1,https://github.com/ChaosData,"frida-gadget: support for init-style scripting with ""listen""",1,[],https://github.com/frida/frida-core/pull/280,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/280#issuecomment-570340246,"frida-gadget: listen interaction config support for staving off resume() until
              after script has run and eternalizing

This patch adds two knobs to the frida-gadget config for the ""listen"" type:

- One enables configuring when the call to resume() is made that will resume
  the program to enable pushing it until client disconnect.
- The other configures each script to be ""eternalized"" so that they (and the
  instrumentations made by them) stay loaded indefinitely, even after the
  client disconnects.

These are necessary for setting up rpc.exports ""init""-style logic for ""listen"",
which is useful when the program is short-lived (e.g. `ls`). In such case, two
issues currently arise (that this patch seeks to adress):

- The process exits during (or before!) the script's load/execution
  (`""on_load"": ""wait""` only ensures that resume() is not called before a
  _connection_ is made.)
- Scripts themselves appear to lack a proper mechanism to call resume() on
  their own, requiring it to be triggered on client diconnect. However, this is
  a catch-22 as client disconnects trigger script unloading.

With the patch applied, these cease to be breaking issues. It's not ideal to
have to disconnect to start, but I don't see another way at the moment without
much more invasive changes. This means no `console.log()` after ""init"", but
`new File(""..."", ""ab"")` works just fine.

Note: Technically, custom clients can call `ClientSession::eternalize_script`,
but the standard frida-tools `frida` CLI tool does not have support for it and
the logic for ""when"" to enable it can be a bit complicated depending on the use
case. To get around this, I've placed the eternalize call in
`ClientSession::destroy_script` (and disabled destroying the script when the
setting is enabled). This has a major benefit in that the interactive console
interface works when the setting is enabled and all instrumentations applied
through it will persist at runtime.

I've been doing some work with short-lived binaries through the gadget and wanted a way to get interactive with it. This patch more or less does that.
I've tried to copy the overall code style and avoid any significant changes around stashing state (i.e. in Server as opposed to Client/ClientSession via server.config) related to these options (""on_attach"": (""wait""|""attach"") and ""eternalize"": (""yes""|""no"")). The names and the values are not necessarily the best (""on_attach"" could be something more like ""resume_when"": (""load""|""attach""|""disconnect"") which would also take over for ""on_load""), but I figured I'd try to avoid coining my own terminology and rocking the boat too much. Feel free to rename whatever.
These changes enable the following:
$ # terminal A
$ cat build/frida-linux-x86_64/lib/frida-gadget.config
{
  ""interaction"": {
    ""type"": ""listen"",
    ""address"": ""127.0.0.1"",
    ""port"": 27042,
    ""on_load"": ""wait"",
    ""on_attach"": ""wait"",
    ""eternalize"": ""yes""
  }
}
$ LD_PRELOAD=./build/frida-linux-x86_64/lib/frida-gadget.so ls //
[Frida INFO] Listening on 127.0.0.1 TCP port 27042
...
$ # terminal B (somewhere)
$ frida -H 127.0.0.1 -n Gadget
     ____
    / _  |   Frida 12.7.26 - A world-class dynamic instrumentation toolkit
   | (_| |
    > _  |   Commands:
   /_/ |_|       help      -> Displays the help system
   . . . .       object?   -> Display information about 'object'
   . . . .       exit/quit -> Exit
   . . . .
   . . . .   More info at https://www.frida.re/docs/home/
                                                                                
[Remote::Gadget]-> Interceptor.attach(Module.getExportByName('libc-2.27.so', 'opendir'), { 
  onEnter: function (args) { 
    var path = args[0].readUtf8String(); 
    var f = new File(""/tmp/frida-opendir.log"", ""ab""); 
    f.write(path + ""\n""); 
    f.flush(); 
    f.close(); 
  }, 
  onLeave: function (retval) { 
  } 
});
{}
[Remote::Gadget]->

Thank you for using Frida!
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   ...
$ # terminal A
$ cat /tmp/frida-opendir.log 
//
N.B. It might be better to add an eternalize flag to the frida CLI tool, but I figured this was useful enough in gadget since it might be a bit complicated wrt where to add the call (see above commit msg for more details).",(Assuming this can be closed. Let me know if there's still something missing.),True,{}
frida/frida-core,https://github.com/frida/frida-core,287,2020-01-23T14:40:19Z,2020-03-21T03:41:51Z,2020-03-21T03:41:51Z,CLOSED,False,16,5,1,https://github.com/dasraf9,Fix crash of target process in windows injection,1,[],https://github.com/frida/frida-core/pull/287,https://github.com/dasraf9,1,https://github.com/frida/frida-core/pull/287,"On failed injection attempt a breakpoint call causes some target
processes to crash.
Add a call to TerminateThread instead for a graceful exit.","On failed injection attempt a breakpoint call causes some target
processes to crash.
Add a call to TerminateThread instead for a graceful exit.",True,{}
frida/frida-core,https://github.com/frida/frida-core,287,2020-01-23T14:40:19Z,2020-03-21T03:41:51Z,2020-03-21T03:41:51Z,CLOSED,False,16,5,1,https://github.com/dasraf9,Fix crash of target process in windows injection,1,[],https://github.com/frida/frida-core/pull/287,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/287#issuecomment-596753774,"On failed injection attempt a breakpoint call causes some target
processes to crash.
Add a call to TerminateThread instead for a graceful exit.","(Sorry for the delay here, currently heads down in iOS land; will make the final tweaks and land this before the upcoming release.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,287,2020-01-23T14:40:19Z,2020-03-21T03:41:51Z,2020-03-21T03:41:51Z,CLOSED,False,16,5,1,https://github.com/dasraf9,Fix crash of target process in windows injection,1,[],https://github.com/frida/frida-core/pull/287,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/287#issuecomment-601988301,"On failed injection attempt a breakpoint call causes some target
processes to crash.
Add a call to TerminateThread instead for a graceful exit.",Landed in 4320cb0. Thanks! üôå,True,{}
frida/frida-core,https://github.com/frida/frida-core,291,2020-03-09T19:33:13Z,2020-03-09T20:05:56Z,2020-03-09T20:05:56Z,MERGED,True,559,0,8,https://github.com/mrmacete,Add support for Unc0ver 4.3.1,4,[],https://github.com/frida/frida-core/pull/291,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/291,"use the substitute_setup_process mig call to substituted to enable early instrumentation
ensure substitute-inserter.dylib is initialized right after attaching

Thanks to @pwn20wndstuff for the kind help!","use the substitute_setup_process mig call to substituted to enable early instrumentation
ensure substitute-inserter.dylib is initialized right after attaching

Thanks to @pwn20wndstuff for the kind help!",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,291,2020-03-09T19:33:13Z,2020-03-09T20:05:56Z,2020-03-09T20:05:56Z,MERGED,True,559,0,8,https://github.com/mrmacete,Add support for Unc0ver 4.3.1,4,[],https://github.com/frida/frida-core/pull/291,https://github.com/pwn20wndstuff,2,https://github.com/frida/frida-core/pull/291#issuecomment-596747989,"use the substitute_setup_process mig call to substituted to enable early instrumentation
ensure substitute-inserter.dylib is initialized right after attaching

Thanks to @pwn20wndstuff for the kind help!",I reviewed the code prior to the pull request. It is safe to merge.,True,{'HEART': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,292,2020-03-09T20:15:12Z,2020-03-09T21:12:20Z,2020-03-09T21:12:20Z,MERGED,True,3,0,1,https://github.com/mrmacete,Avoid calling substitute_setup_process on null port,1,[],https://github.com/frida/frida-core/pull/292,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/292,leftover from #291,leftover from #291,True,{}
frida/frida-core,https://github.com/frida/frida-core,293,2020-03-09T22:51:34Z,2020-03-10T00:17:11Z,2020-03-10T00:17:11Z,MERGED,True,3,2,1,https://github.com/mrmacete,Ensure Chimera‚Äôs pspawn_payload-stg2.dylib initialized,1,[],https://github.com/frida/frida-core/pull/293,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/293,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,299,2020-04-07T15:15:47Z,2020-04-07T15:58:36Z,2020-04-07T15:59:13Z,MERGED,True,2,0,1,https://github.com/5murfette,Add support for leanback-only Android apps,4,[],https://github.com/frida/frida-core/pull/299,https://github.com/5murfette,1,https://github.com/frida/frida-core/pull/299,added resolution of the AndroidTV app launch intent,added resolution of the AndroidTV app launch intent,True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/300,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.","This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.",True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/300#issuecomment-610639985,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.","ahh right, i was wrongly assuming that PACIZA acted like a NOP on non-arm64e...",True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/mrmacete,3,https://github.com/frida/frida-core/pull/300#issuecomment-610640946,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.","we might need this logic regardless of whether pointer authentication is used for the current process

what do you mean? in which case it should be needed if the current process is not arm64e?",True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/mrmacete,4,https://github.com/frida/frida-core/pull/300#issuecomment-610645631,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.",but yeah in the worst case i think we could make invoke_remote_function treat invalid instructions as NOPs...,True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/300#issuecomment-610647496,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.","ahh right, i was wrongly assuming that PACIZA acted like a NOP on non-arm64e...

That may be, I was thinking about what will happen on older CPUs that don't support the instruction.

what do you mean? in which case it should be needed if the current process is not arm64e?

The dynamic linker is the same for both arm64e and arm64 processes, but we just have to make sure that signing the pointer in the arm64 case doesn't cause any issues.

but yeah in the worst case i think we could make invoke_remote_function treat invalid instructions as NOPs...

Yeah or we can try/catch locally and special-case it that way. (In case ""invalid instruction"" can happen in initializers when an assertion fails.)",True,{}
frida/frida-core,https://github.com/frida/frida-core,300,2020-04-07T20:37:26Z,2020-04-08T07:38:02Z,2020-04-08T07:39:06Z,MERGED,True,37,5,1,https://github.com/mrmacete,Fix iOS jailed spawn() w/o closure on arm64e,3,[],https://github.com/frida/frida-core/pull/300,https://github.com/oleavr,6,https://github.com/frida/frida-core/pull/300#issuecomment-610802757,"This makes jailed early instrumentation work on arm64e processes, even when the legacy code path is taken.",Thanks! üí•üôå,True,{}
frida/frida-core,https://github.com/frida/frida-core,302,2020-04-09T00:31:00Z,2020-04-10T08:47:14Z,2020-04-10T14:42:19Z,MERGED,True,29,7,2,https://github.com/pachoo,Fix usbmux pairing record plist parsing,3,[],https://github.com/frida/frida-core/pull/302,https://github.com/pachoo,1,https://github.com/frida/frida-core/pull/302,"added Plist.from_data to support auto-detecting plist format.
UsbmuxClient.read_pair_record() supports auto-detecting plist format","added Plist.from_data to support auto-detecting plist format.
UsbmuxClient.read_pair_record() supports auto-detecting plist format",True,{}
frida/frida-core,https://github.com/frida/frida-core,302,2020-04-09T00:31:00Z,2020-04-10T08:47:14Z,2020-04-10T14:42:19Z,MERGED,True,29,7,2,https://github.com/pachoo,Fix usbmux pairing record plist parsing,3,[],https://github.com/frida/frida-core/pull/302,https://github.com/pachoo,2,https://github.com/frida/frida-core/pull/302#issuecomment-611262860,"added Plist.from_data to support auto-detecting plist format.
UsbmuxClient.read_pair_record() supports auto-detecting plist format","first time with vala, hopefully the structure and memory management is appropriate :)",True,{}
frida/frida-core,https://github.com/frida/frida-core,304,2020-04-16T09:58:04Z,2020-04-17T00:58:38Z,2020-04-17T10:35:34Z,MERGED,True,10,10,1,https://github.com/WorksButNotTested,Fix variable names colliding with MUSL libc defines,4,[],https://github.com/frida/frida-core/pull/304,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-core/pull/304,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,304,2020-04-16T09:58:04Z,2020-04-17T00:58:38Z,2020-04-17T10:35:34Z,MERGED,True,10,10,1,https://github.com/WorksButNotTested,Fix variable names colliding with MUSL libc defines,4,[],https://github.com/frida/frida-core/pull/304,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-core/pull/304#issuecomment-614560953,,"I had previously been working with just frida-gum and injecting the frida-gadget.so using my own tools or via LD_PRELOAD, now that I have hopefully addressed the issues I was finding with frida-inject (both related to the auxilliary vector) I am hoping to move to just using FRIDA out of the box.
Hence I have now tried building the core with musl and uclibc. Then I stumbled across this really weird issue. Hope the fix is ok.",True,{}
frida/frida-core,https://github.com/frida/frida-core,304,2020-04-16T09:58:04Z,2020-04-17T00:58:38Z,2020-04-17T10:35:34Z,MERGED,True,10,10,1,https://github.com/WorksButNotTested,Fix variable names colliding with MUSL libc defines,4,[],https://github.com/frida/frida-core/pull/304,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-core/pull/304#issuecomment-614973962,,Made names consistent and removed comment.,True,{}
frida/frida-core,https://github.com/frida/frida-core,307,2020-04-19T11:38:42Z,2020-04-22T22:06:46Z,2020-04-22T22:06:55Z,MERGED,True,201,0,1,https://github.com/mrmacete,Add four essential i/macOS syscalls to the libc shim,2,[],https://github.com/frida/frida-core/pull/307,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/307,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,309,2020-04-22T09:20:51Z,2020-04-22T09:38:49Z,2020-04-22T09:38:49Z,MERGED,True,6,0,3,https://github.com/elvanderb,add the com.apple.private.skip-library-validation entitlement to facilitate library injection in frida processes,1,[],https://github.com/frida/frida-core/pull/309,https://github.com/elvanderb,1,https://github.com/frida/frida-core/pull/309,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,312,2020-05-01T23:59:11Z,2020-05-02T00:39:15Z,2020-05-07T07:13:09Z,MERGED,True,9,4,1,https://github.com/Gbps,Relax post() restriction in LOADING state,5,[],https://github.com/frida/frida-core/pull/312,https://github.com/Gbps,1,https://github.com/frida/frida-core/pull/312,"Scripts in the LOADING state currently are unable to have messages posted to them. This makes scripts unable to use blocking recv() while in their main body. This restriction is unnecessary as LOADING scripts are perfectly capable of receiving messages.
Tested and working with blocking recv() in local build.
Fix to issue: frida/frida-gum#420","Scripts in the LOADING state currently are unable to have messages posted to them. This makes scripts unable to use blocking recv() while in their main body. This restriction is unnecessary as LOADING scripts are perfectly capable of receiving messages.
Tested and working with blocking recv() in local build.
Fix to issue: frida/frida-gum#420",True,{}
frida/frida-core,https://github.com/frida/frida-core,312,2020-05-01T23:59:11Z,2020-05-02T00:39:15Z,2020-05-07T07:13:09Z,MERGED,True,9,4,1,https://github.com/Gbps,Relax post() restriction in LOADING state,5,[],https://github.com/frida/frida-core/pull/312,https://github.com/Gbps,2,https://github.com/frida/frida-core/pull/312#issuecomment-622629877,"Scripts in the LOADING state currently are unable to have messages posted to them. This makes scripts unable to use blocking recv() while in their main body. This restriction is unnecessary as LOADING scripts are perfectly capable of receiving messages.
Tested and working with blocking recv() in local build.
Fix to issue: frida/frida-gum#420",Reformatted. Something like this?,True,{}
frida/frida-core,https://github.com/frida/frida-core,312,2020-05-01T23:59:11Z,2020-05-02T00:39:15Z,2020-05-07T07:13:09Z,MERGED,True,9,4,1,https://github.com/Gbps,Relax post() restriction in LOADING state,5,[],https://github.com/frida/frida-core/pull/312,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/312#issuecomment-622632497,"Scripts in the LOADING state currently are unable to have messages posted to them. This makes scripts unable to use blocking recv() while in their main body. This restriction is unnecessary as LOADING scripts are perfectly capable of receiving messages.
Tested and working with blocking recv() in local build.
Fix to issue: frida/frida-gum#420",Thanks a lot! üöÄ,True,{}
frida/frida-core,https://github.com/frida/frida-core,312,2020-05-01T23:59:11Z,2020-05-02T00:39:15Z,2020-05-07T07:13:09Z,MERGED,True,9,4,1,https://github.com/Gbps,Relax post() restriction in LOADING state,5,[],https://github.com/frida/frida-core/pull/312,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/312#issuecomment-625074470,"Scripts in the LOADING state currently are unable to have messages posted to them. This makes scripts unable to use blocking recv() while in their main body. This restriction is unnecessary as LOADING scripts are perfectly capable of receiving messages.
Tested and working with blocking recv() in local build.
Fix to issue: frida/frida-gum#420","Oops, this inverted the logic and I totally missed that. üòÖ Just pushed a fix. üôå",True,{}
frida/frida-core,https://github.com/frida/frida-core,313,2020-05-05T07:26:14Z,2020-05-07T19:32:58Z,2020-05-07T19:32:58Z,CLOSED,False,35,0,3,None,Added the ability to run frida-server on a non-root Android device.,1,[],https://github.com/frida/frida-core/pull/313,None,1,https://github.com/frida/frida-core/pull/313,"I've made some fixes to make frida-server work on non-root terminals.
If a file named ""fridakeep"" exists in the same directory as frida-server, the following is applied.
1.disabling selinux checks
2.On Android, change the default ""/data/local/tmp"" to the path described in fridakeep.
/data/data/com.app.name

As with frida-gadget, some advance preparation is required.
1.APK:AndroidManifest.xml in android:debuggable=""true""
2.command
$ adb shell
$ pm list packages
$ run-as com.app.name
$ cp /data/local/tmp/frida-server ./frida-server
$ ./frida-server

I hope that this fix will contribute to the development of security diagnostics.","I've made some fixes to make frida-server work on non-root terminals.
If a file named ""fridakeep"" exists in the same directory as frida-server, the following is applied.
1.disabling selinux checks
2.On Android, change the default ""/data/local/tmp"" to the path described in fridakeep.
/data/data/com.app.name

As with frida-gadget, some advance preparation is required.
1.APK:AndroidManifest.xml in android:debuggable=""true""
2.command
$ adb shell
$ pm list packages
$ run-as com.app.name
$ cp /data/local/tmp/frida-server ./frida-server
$ ./frida-server

I hope that this fix will contribute to the development of security diagnostics.",True,{}
frida/frida-core,https://github.com/frida/frida-core,313,2020-05-05T07:26:14Z,2020-05-07T19:32:58Z,2020-05-07T19:32:58Z,CLOSED,False,35,0,3,None,Added the ability to run frida-server on a non-root Android device.,1,[],https://github.com/frida/frida-core/pull/313,None,2,https://github.com/frida/frida-core/pull/313#issuecomment-624963615,"I've made some fixes to make frida-server work on non-root terminals.
If a file named ""fridakeep"" exists in the same directory as frida-server, the following is applied.
1.disabling selinux checks
2.On Android, change the default ""/data/local/tmp"" to the path described in fridakeep.
/data/data/com.app.name

As with frida-gadget, some advance preparation is required.
1.APK:AndroidManifest.xml in android:debuggable=""true""
2.command
$ adb shell
$ pm list packages
$ run-as com.app.name
$ cp /data/local/tmp/frida-server ./frida-server
$ ./frida-server

I hope that this fix will contribute to the development of security diagnostics.","I've noticed that the current implementation causes errors in at least the following features
#frida-trace:only active scripts may be posted to
#This was a bug in the source code. I checked with the latest one and it worked fine.
process-spawn:unable to find process with name 'system_server'",True,{}
frida/frida-core,https://github.com/frida/frida-core,314,2020-05-08T01:33:42Z,2020-05-12T02:33:13Z,2020-05-12T02:33:13Z,CLOSED,False,26,3,1,https://github.com/tacesrever,Improve modulate.py to support elf64,1,[],https://github.com/frida/frida-core/pull/314,https://github.com/tacesrever,1,https://github.com/frida/frida-core/pull/314,"when moving constructor functions in .init_array under elf64, Elf64_Rela structs should also be modified.","when moving constructor functions in .init_array under elf64, Elf64_Rela structs should also be modified.",True,{}
frida/frida-core,https://github.com/frida/frida-core,315,2020-05-13T19:11:34Z,2020-05-13T19:32:34Z,2020-05-13T19:32:51Z,MERGED,True,2,7,1,https://github.com/aemmitt-ns,Add support for ADB channels beyond just TCP,3,[],https://github.com/frida/frida-core/pull/315,https://github.com/aemmitt-ns,1,https://github.com/frida/frida-core/pull/315,"This small change just removes the check for the ""tcp:"" prefix in open_channel so that other protocols like localabstract, localreserved, etc will work. Droidy.Client.request_protocol_change already handles this appropriately. Now the only check is that the address has the format ""%s:%s"".","This small change just removes the check for the ""tcp:"" prefix in open_channel so that other protocols like localabstract, localreserved, etc will work. Droidy.Client.request_protocol_change already handles this appropriately. Now the only check is that the address has the format ""%s:%s"".",True,{}
frida/frida-core,https://github.com/frida/frida-core,318,2020-06-05T17:45:44Z,2020-06-05T21:54:50Z,2020-06-06T09:13:57Z,MERGED,True,63,11,2,https://github.com/mrmacete,Load iOS bootstrapper in early instrumentation,1,[],https://github.com/frida/frida-core/pull/318,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/318,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,320,2020-06-12T02:56:32Z,2020-06-13T05:39:38Z,2020-06-13T05:39:38Z,MERGED,True,43,12,3,https://github.com/ohjeongwook,"Add 32, 64 bit symsrv.dll files and put distributed files under separate folder removing -32/-64 postfixes",10,[],https://github.com/frida/frida-core/pull/320,https://github.com/ohjeongwook,1,https://github.com/frida/frida-core/pull/320,"With the PR for frida-gum, this change will include symsrv.dll which will be used for symbol server resolution. The symsrv.dll will be loaded by dbghelp.dll and current agent file scheme doesn't support same file with different bitness because it has flat directory structure. New scheme will put 32 bit files under ""32"" folder and 64 bit files under ""64"" folder. Added destroy method to make sure the sub folders are removed too.","With the PR for frida-gum, this change will include symsrv.dll which will be used for symbol server resolution. The symsrv.dll will be loaded by dbghelp.dll and current agent file scheme doesn't support same file with different bitness because it has flat directory structure. New scheme will put 32 bit files under ""32"" folder and 64 bit files under ""64"" folder. Added destroy method to make sure the sub folders are removed too.",True,{}
frida/frida-core,https://github.com/frida/frida-core,320,2020-06-12T02:56:32Z,2020-06-13T05:39:38Z,2020-06-13T05:39:38Z,MERGED,True,43,12,3,https://github.com/ohjeongwook,"Add 32, 64 bit symsrv.dll files and put distributed files under separate folder removing -32/-64 postfixes",10,[],https://github.com/frida/frida-core/pull/320,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/320#issuecomment-643555675,"With the PR for frida-gum, this change will include symsrv.dll which will be used for symbol server resolution. The symsrv.dll will be loaded by dbghelp.dll and current agent file scheme doesn't support same file with different bitness because it has flat directory structure. New scheme will put 32 bit files under ""32"" folder and 64 bit files under ""64"" folder. Added destroy method to make sure the sub folders are removed too.",Only one nitpick to go and we're good to land this ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,322,2020-06-22T15:34:42Z,2020-06-22T17:20:13Z,2020-06-22T17:20:13Z,MERGED,True,3,1,1,https://github.com/mrmacete,Fix device removal wiring in the Fruity backend,1,[],https://github.com/frida/frida-core/pull/322,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/322,Failing to do so any removed device remains inaccessible until the host process dies.,Failing to do so any removed device remains inaccessible until the host process dies.,True,"{'HEART': ['https://github.com/oleavr'], 'HOORAY': ['https://github.com/oleavr']}"
frida/frida-core,https://github.com/frida/frida-core,325,2020-07-03T15:27:15Z,2020-07-06T11:29:04Z,2020-07-06T11:29:04Z,CLOSED,False,9,0,2,None,Added non-root mode to frida-server in android.,1,[],https://github.com/frida/frida-core/pull/325,None,1,https://github.com/frida/frida-core/pull/325,"On Android, frida-server works on non-root device.
When frida-server is run by non-root user, the following is applied.
1.disable selinux check
2.change /data/local/tmp to the same directory as frida-server.
To make it understandable to the user, it displays the following when running in non-root mode
„ÄåStart frida-server in non-root mode. Some functions are limited.„Äç
As with frida-gadget, some advance preparation is required.
1.APK:AndroidManifest.xml in android:debuggable=""true""
2.command
$ adb shell
$ pm list packages
$ run-as com.app.name
$ cp /data/local/tmp/frida-server frida-server
$ ./frida-server","On Android, frida-server works on non-root device.
When frida-server is run by non-root user, the following is applied.
1.disable selinux check
2.change /data/local/tmp to the same directory as frida-server.
To make it understandable to the user, it displays the following when running in non-root mode
„ÄåStart frida-server in non-root mode. Some functions are limited.„Äç
As with frida-gadget, some advance preparation is required.
1.APK:AndroidManifest.xml in android:debuggable=""true""
2.command
$ adb shell
$ pm list packages
$ run-as com.app.name
$ cp /data/local/tmp/frida-server frida-server
$ ./frida-server",True,{}
frida/frida-core,https://github.com/frida/frida-core,327,2020-07-07T09:29:44Z,2020-07-17T02:14:04Z,2020-07-17T02:51:00Z,CLOSED,False,0,0,0,https://github.com/sowdust,Aux option to specify Android user during app spawn,0,[],https://github.com/frida/frida-core/pull/327,https://github.com/sowdust,1,https://github.com/frida/frida-core/pull/327,"Although seldom used, Android can be a multi user environment. For example, BYOD enterprise applications often use ""Android work profiles"" to keep personal and work environments separate; this works by leveraging the multi user features. Standard Android APIs by default work with the default user (0). By using a different set of APIs, this commit allows to select a specific user id to spawn the application. It can be passed as an ""aux"" option, so it can be combined with other android specific options such as ""activity"".","Although seldom used, Android can be a multi user environment. For example, BYOD enterprise applications often use ""Android work profiles"" to keep personal and work environments separate; this works by leveraging the multi user features. Standard Android APIs by default work with the default user (0). By using a different set of APIs, this commit allows to select a specific user id to spawn the application. It can be passed as an ""aux"" option, so it can be combined with other android specific options such as ""activity"".",True,{}
frida/frida-core,https://github.com/frida/frida-core,327,2020-07-07T09:29:44Z,2020-07-17T02:14:04Z,2020-07-17T02:51:00Z,CLOSED,False,0,0,0,https://github.com/sowdust,Aux option to specify Android user during app spawn,0,[],https://github.com/frida/frida-core/pull/327,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/327#issuecomment-659792069,"Although seldom used, Android can be a multi user environment. For example, BYOD enterprise applications often use ""Android work profiles"" to keep personal and work environments separate; this works by leveraging the multi user features. Standard Android APIs by default work with the default user (0). By using a different set of APIs, this commit allows to select a specific user id to spawn the application. It can be passed as an ""aux"" option, so it can be combined with other android specific options such as ""activity"".","Oops, I cloned this locally and pushed a tweaked version to your branch ‚Äì but then realized I pushed the wrong local branch ü§¶ Sorry about that. I'll just take it for a spin and then push it to master.",True,{}
frida/frida-core,https://github.com/frida/frida-core,327,2020-07-07T09:29:44Z,2020-07-17T02:14:04Z,2020-07-17T02:51:00Z,CLOSED,False,0,0,0,https://github.com/sowdust,Aux option to specify Android user during app spawn,0,[],https://github.com/frida/frida-core/pull/327,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/327#issuecomment-659804691,"Although seldom used, Android can be a multi user environment. For example, BYOD enterprise applications often use ""Android work profiles"" to keep personal and work environments separate; this works by leveraging the multi user features. Standard Android APIs by default work with the default user (0). By using a different set of APIs, this commit allows to select a specific user id to spawn the application. It can be passed as an ""aux"" option, so it can be combined with other android specific options such as ""activity"".",Landed as 1560d29. Thanks! üôå,True,{'HEART': ['https://github.com/sowdust']}
frida/frida-core,https://github.com/frida/frida-core,328,2020-07-08T08:54:04Z,2020-07-09T21:50:05Z,2020-07-09T21:51:28Z,MERGED,True,12,14,1,https://github.com/mrmacete,Daemonize helper process on Darwin,2,[],https://github.com/frida/frida-core/pull/328,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/328,"In this way there‚Äôs no need to install a SIGCHLD handler which could conflict with others already installed in the process, causing issues for example with NodeJS and its child_process logic.","In this way there‚Äôs no need to install a SIGCHLD handler which could conflict with others already installed in the process, causing issues for example with NodeJS and its child_process logic.",True,{'HEART': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,328,2020-07-08T08:54:04Z,2020-07-09T21:50:05Z,2020-07-09T21:51:28Z,MERGED,True,12,14,1,https://github.com/mrmacete,Daemonize helper process on Darwin,2,[],https://github.com/frida/frida-core/pull/328,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/328#issuecomment-655766593,"In this way there‚Äôs no need to install a SIGCHLD handler which could conflict with others already installed in the process, causing issues for example with NodeJS and its child_process logic.","I couldn't reproduce the error in the same way in Linux. Since it's using the same APIs it's possible that the problem is there as well, just i'm not sure how to reproduce it systematically.
I could do the same tweak also there but i'm a bit blind for validating it.",True,{}
frida/frida-core,https://github.com/frida/frida-core,328,2020-07-08T08:54:04Z,2020-07-09T21:50:05Z,2020-07-09T21:51:28Z,MERGED,True,12,14,1,https://github.com/mrmacete,Daemonize helper process on Darwin,2,[],https://github.com/frida/frida-core/pull/328,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/328#issuecomment-656368828,"In this way there‚Äôs no need to install a SIGCHLD handler which could conflict with others already installed in the process, causing issues for example with NodeJS and its child_process logic.","I could do the same tweak also there but i'm a bit blind for validating it.

That would be great! I've seen random test failures on Linux that look a lot like the same underlying issue. It's very racy though, so not easy to verify.",True,{}
frida/frida-core,https://github.com/frida/frida-core,329,2020-07-11T00:56:39Z,2020-07-15T14:24:27Z,2020-07-15T14:24:28Z,CLOSED,False,73,19,2,https://github.com/mrmacete,Fix initial device list logic on fruity host session,2,[],https://github.com/frida/frida-core/pull/329,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/329,"usbmuxd doesn't accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this while ensuring the initial device list is as close as possible to the actual set of connected devices, the new logic is:

call ListDevices
start listening for changes in the list
try to connect to all devices in the initial list, to
ensure they‚Äôve not been detached in the meantime
remove detached devices from the list","usbmuxd doesn't accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this while ensuring the initial device list is as close as possible to the actual set of connected devices, the new logic is:

call ListDevices
start listening for changes in the list
try to connect to all devices in the initial list, to
ensure they‚Äôve not been detached in the meantime
remove detached devices from the list",True,{}
frida/frida-core,https://github.com/frida/frida-core,329,2020-07-11T00:56:39Z,2020-07-15T14:24:27Z,2020-07-15T14:24:28Z,CLOSED,False,73,19,2,https://github.com/mrmacete,Fix initial device list logic on fruity host session,2,[],https://github.com/frida/frida-core/pull/329,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/329#issuecomment-657136726,"usbmuxd doesn't accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this while ensuring the initial device list is as close as possible to the actual set of connected devices, the new logic is:

call ListDevices
start listening for changes in the list
try to connect to all devices in the initial list, to
ensure they‚Äôve not been detached in the meantime
remove detached devices from the list","Yeah this solution is slower than before. With 2 devices the new implementation takes around 4 milliseconds, while the previous implementation took less than 2 milliseconds. so it's roughly 2 times slower (as measured by vala Timer class)",True,{}
frida/frida-core,https://github.com/frida/frida-core,329,2020-07-11T00:56:39Z,2020-07-15T14:24:27Z,2020-07-15T14:24:28Z,CLOSED,False,73,19,2,https://github.com/mrmacete,Fix initial device list logic on fruity host session,2,[],https://github.com/frida/frida-core/pull/329,https://github.com/oleavr,3,https://github.com/frida/frida-core/pull/329#issuecomment-657136844,"usbmuxd doesn't accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this while ensuring the initial device list is as close as possible to the actual set of connected devices, the new logic is:

call ListDevices
start listening for changes in the list
try to connect to all devices in the initial list, to
ensure they‚Äôve not been detached in the meantime
remove detached devices from the list",Ah cool! That's not too bad.,True,{}
frida/frida-core,https://github.com/frida/frida-core,329,2020-07-11T00:56:39Z,2020-07-15T14:24:27Z,2020-07-15T14:24:28Z,CLOSED,False,73,19,2,https://github.com/mrmacete,Fix initial device list logic on fruity host session,2,[],https://github.com/frida/frida-core/pull/329,https://github.com/oleavr,4,https://github.com/frida/frida-core/pull/329#issuecomment-658799566,"usbmuxd doesn't accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this while ensuring the initial device list is as close as possible to the actual set of connected devices, the new logic is:

call ListDevices
start listening for changes in the list
try to connect to all devices in the initial list, to
ensure they‚Äôve not been detached in the meantime
remove detached devices from the list",Superseded by #330.,True,{}
frida/frida-core,https://github.com/frida/frida-core,330,2020-07-12T14:42:27Z,2020-07-15T14:23:45Z,2020-07-15T14:24:13Z,MERGED,True,50,13,1,https://github.com/mrmacete,Fix unreliable iOS device handling when using usbmuxd,2,[],https://github.com/frida/frida-core/pull/330,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/330,"This is an alternative simpler solution for the same problem #329 was attempting to solve.
usbmuxd doesn‚Äôt accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this issue, the new logic is:

detect if the peer has closed the connection
in that case reopen it, and send the ‚Äúdummy
request‚Äù on a secondary connection

That should work because usbmuxd handles all clients on a single thread, so by the time the ‚Äúdummy request‚Äù is handled, the entire list of currently connected devices should have been sent.
According to my local tests, performance-wise this is indistinguishable from the previous logic.","This is an alternative simpler solution for the same problem #329 was attempting to solve.
usbmuxd doesn‚Äôt accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this issue, the new logic is:

detect if the peer has closed the connection
in that case reopen it, and send the ‚Äúdummy
request‚Äù on a secondary connection

That should work because usbmuxd handles all clients on a single thread, so by the time the ‚Äúdummy request‚Äù is handled, the entire list of currently connected devices should have been sent.
According to my local tests, performance-wise this is indistinguishable from the previous logic.",True,{}
frida/frida-core,https://github.com/frida/frida-core,330,2020-07-12T14:42:27Z,2020-07-15T14:23:45Z,2020-07-15T14:24:13Z,MERGED,True,50,13,1,https://github.com/mrmacete,Fix unreliable iOS device handling when using usbmuxd,2,[],https://github.com/frida/frida-core/pull/330,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/330#issuecomment-658799425,"This is an alternative simpler solution for the same problem #329 was attempting to solve.
usbmuxd doesn‚Äôt accept any command after starting the listening mode. The ‚Äúdummy request‚Äù we used to flush the device list makes usbmuxd close the connection because the command is received in the wrong state.
To avoid this issue, the new logic is:

detect if the peer has closed the connection
in that case reopen it, and send the ‚Äúdummy
request‚Äù on a secondary connection

That should work because usbmuxd handles all clients on a single thread, so by the time the ‚Äúdummy request‚Äù is handled, the entire list of currently connected devices should have been sent.
According to my local tests, performance-wise this is indistinguishable from the previous logic.",Thanks! üòç,True,{}
frida/frida-core,https://github.com/frida/frida-core,332,2020-07-20T11:40:05Z,2020-07-20T14:59:23Z,2020-07-20T16:37:33Z,MERGED,True,30,2,1,https://github.com/WorksButNotTested,Fix injection into Linux processes blocked on SIGTTIN or SIGTTOU,3,[],https://github.com/frida/frida-core/pull/332,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-core/pull/332,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,334,2020-07-20T13:51:15Z,2020-07-20T15:01:20Z,2020-07-20T16:37:28Z,MERGED,True,2,2,1,https://github.com/WorksButNotTested,Fix early instrumentation on Linux/ARM-BE8,1,[],https://github.com/frida/frida-core/pull/334,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-core/pull/334,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,337,2020-08-03T00:09:48Z,2020-08-04T19:46:28Z,2020-08-04T20:50:24Z,MERGED,True,3,2,1,https://github.com/muhzii,Fix starting Android activities when the intent is not automatically found,2,[],https://github.com/frida/frida-core/pull/337,https://github.com/muhzii,1,https://github.com/frida/frida-core/pull/337,"Set the flag 'FLAG_ACTIVITY_NEW_TASK' for the 'Intent' object before calling 'startActivity'. See https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ContextImpl.java#955 for the reason why this might occasionally work when the flag is omitted.
Also remove the call to 'setAction', since explicit intents are being used.","Set the flag 'FLAG_ACTIVITY_NEW_TASK' for the 'Intent' object before calling 'startActivity'. See https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ContextImpl.java#955 for the reason why this might occasionally work when the flag is omitted.
Also remove the call to 'setAction', since explicit intents are being used.",True,{'THUMBS_UP': ['https://github.com/ryu-s-r']}
frida/frida-core,https://github.com/frida/frida-core,337,2020-08-03T00:09:48Z,2020-08-04T19:46:28Z,2020-08-04T20:50:24Z,MERGED,True,3,2,1,https://github.com/muhzii,Fix starting Android activities when the intent is not automatically found,2,[],https://github.com/frida/frida-core/pull/337,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/337#issuecomment-668790713,"Set the flag 'FLAG_ACTIVITY_NEW_TASK' for the 'Intent' object before calling 'startActivity'. See https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ContextImpl.java#955 for the reason why this might occasionally work when the flag is omitted.
Also remove the call to 'setAction', since explicit intents are being used.",Thanks!,True,{'THUMBS_UP': ['https://github.com/muhzii']}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/340,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.","The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.",True,{}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/340#issuecomment-683321348,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.",i think i could also add a test case,True,{}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/mrmacete,3,https://github.com/frida/frida-core/pull/340#issuecomment-683399193,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.","Actually, to do that i should add a labrat with CoreFoundation - what's the easiest way to do that?
The test code is pretty simple, something like:
function testCF () {
  const getMainPtr = Module.findExportByName(null, 'CFRunLoopGetMain');
  if (getMainPtr === null) {
    console.log('No CoreFoundation');
    return;
  }

  const getMain = new NativeFunction(getMainPtr, 'pointer', []);
  getMain();
  console.log('OK');
}
The behaviour without this PR's change is, when calling getMain():

on macos it hangs forever
on iOS with checkra1n it crashes",True,{}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/mrmacete,4,https://github.com/frida/frida-core/pull/340#issuecomment-684726274,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.","So i added a test, not 100% sure that's the right way to mess with labrats, though üòÖ",True,{}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/340#issuecomment-685012400,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.","So i added a test, not 100% sure that's the right way to mess with labrats, though üòÖ

(Sorry, I totally forgot to answer your original question about that!)  What you did was great, there's just a manual fix-up process required where we for now have to edit Makefile.macos.mk and replace -m32 and -m64 with -arch arm64 and -arch arm64e, rebuild the binaries, copy them to a subdir, revert the modified files, and from the subdir run ../merge-macos-slices.sh ‚Äì and then commit that. It sucks but figured I didn't want to spend time streamlining it for now as the labrats rarely change üòÖ",True,{'LAUGH': ['https://github.com/mrmacete']}
frida/frida-core,https://github.com/frida/frida-core,340,2020-08-29T17:16:00Z,2020-09-01T17:15:11Z,2020-09-01T17:21:59Z,MERGED,True,108,3,4,https://github.com/mrmacete,Initialize CoreFoundation on i/macOS,8,[],https://github.com/frida/frida-core/pull/340,https://github.com/mrmacete,6,https://github.com/frida/frida-core/pull/340#issuecomment-685013232,"The problem is that CoreFoundation must be initialised on the main thread, this means right now it's not possible to use anything depending on it during early instrumentation without crashing - unless we fall into the ""legacy"" dyld code path, for the presence of DYLD_INSERT_LIBRARIES and the second-stage jailbreak ""bootstrappers"" (for Chimera and Unc0ver) which also depend on CoreFoundation.
This change will call the __CFInitialize function if either:

dyld takes the ""modern"" code path
dyld takes the ""legacy"" code path and the ""bootstrappers"" aren't there, after loading libSystem

It's a bit hacky (I didn't find a way to convince dyld to initialise CoreFoundation early in the ""modern"" path), but - to my tests - on jailbreaks like checkra1n or on macOS it works way better than before.",thanks!! copying this in a note for the future!,True,{'ROCKET': ['https://github.com/oleavr']}
frida/frida-core,https://github.com/frida/frida-core,342,2020-09-17T10:44:17Z,2020-09-17T11:43:35Z,2020-09-17T11:43:35Z,MERGED,True,30,16,1,https://github.com/mrmacete,Add support for iOS 14.x secure DTX,1,[],https://github.com/frida/frida-core/pull/342,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/342,"Exactly like debugserver, now it uses a secure endpoint.","Exactly like debugserver, now it uses a secure endpoint.",True,{}
frida/frida-core,https://github.com/frida/frida-core,342,2020-09-17T10:44:17Z,2020-09-17T11:43:35Z,2020-09-17T11:43:35Z,MERGED,True,30,16,1,https://github.com/mrmacete,Add support for iOS 14.x secure DTX,1,[],https://github.com/frida/frida-core/pull/342,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/342#issuecomment-694176275,"Exactly like debugserver, now it uses a secure endpoint.",Awesome! ü§ò Thanks! üôå,True,{}
frida/frida-core,https://github.com/frida/frida-core,343,2020-09-21T16:17:55Z,2020-09-21T17:23:55Z,2020-09-21T17:23:55Z,MERGED,True,12,2,1,https://github.com/mrmacete,Kill via LLDB on jailed iOS,2,[],https://github.com/frida/frida-core/pull/343,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/343,"To avoid killing via ProcessControl when possible, because apparently that leaves the debug server in a bad state for which killed apps sometimes appear as already running, failing early instrumentation on subsequent spawn attempts.","To avoid killing via ProcessControl when possible, because apparently that leaves the debug server in a bad state for which killed apps sometimes appear as already running, failing early instrumentation on subsequent spawn attempts.",True,{}
frida/frida-core,https://github.com/frida/frida-core,344,2020-10-06T12:51:13Z,2020-10-07T21:38:33Z,2020-10-07T21:38:33Z,MERGED,True,8,2,2,https://github.com/mrmacete,Skip app extensions when searching frontmost app (on Fruity host session),4,[],https://github.com/frida/frida-core/pull/344,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/344,"Sometimes an app extension was returned as the first matched process, just for failing right after with the ‚ÄúUnable to resolve bundle path to bundle ID‚Äù exception.","Sometimes an app extension was returned as the first matched process, just for failing right after with the ‚ÄúUnable to resolve bundle path to bundle ID‚Äù exception.",True,{}
frida/frida-core,https://github.com/frida/frida-core,348,2020-11-09T15:59:12Z,2020-11-09T16:13:47Z,2020-11-09T16:13:48Z,MERGED,True,200,153,3,https://github.com/mrmacete,Add HELLO ack and CHECK command in fruity backend,2,[],https://github.com/frida/frida-core/pull/348,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/348,"This adds some bi-directional communication into the upload connection, to prevent DoS protections from kicking in during gadget upload in complex remote configurations.","This adds some bi-directional communication into the upload connection, to prevent DoS protections from kicking in during gadget upload in complex remote configurations.",True,{'ROCKET': ['https://github.com/enovella']}
frida/frida-core,https://github.com/frida/frida-core,350,2020-11-25T00:23:50Z,2020-11-25T00:23:59Z,2020-11-25T00:24:03Z,MERGED,True,30,33,12,https://github.com/oleavr,Move remaining dependencies to the Frida SDK,2,[],https://github.com/frida/frida-core/pull/350,https://github.com/oleavr,1,https://github.com/frida/frida-core/pull/350,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,352,2020-12-14T15:36:58Z,2021-01-06T10:04:06Z,2021-01-06T10:04:06Z,MERGED,True,2927,100,5,https://github.com/enovella,Working adb-push feature on Droidy backend,53,[],https://github.com/frida/frida-core/pull/352,https://github.com/enovella,1,https://github.com/frida/frida-core/pull/352,"[ frida-core]  (adb-push-op)>  (. ../build/frida_thin-meson-env-linux-x86_64.rc && ninja -C ../build/tmp_thin-linux-x86_64/frida-core) && ../build/tmp_thin-linux-x86_64/frida-core/tests/frida-tests -p /HostSession/Droidy/client -m slow
ninja: Entering directory `../build/tmp_thin-linux-x86_64/frida-core'
ninja: no work to do.
# random seed: R02S37f45a9cae397f6abd28d95ce2a7799b
# Start of HostSession tests
# Start of Droidy tests
Sending: 0019host:transport:99UAY1BUBQ
Receiving: OKAY
Sending: 0039shell:am set-debug-app -w --persistent 'oversecured.ovaa'
Receiving: OKAY
Sending: 0019host:transport:99UAY1BUBQ
Receiving: OKAY
Sending: 0005sync:
Receiving: OKAY
Sending: SENDÔøΩ
Receiving: OKAY
Waiting 2500 ms...
Ok, done
ok 1 /HostSession/Droidy/client
# End of Droidy tests
# End of HostSession tests
1..1","[ frida-core]  (adb-push-op)>  (. ../build/frida_thin-meson-env-linux-x86_64.rc && ninja -C ../build/tmp_thin-linux-x86_64/frida-core) && ../build/tmp_thin-linux-x86_64/frida-core/tests/frida-tests -p /HostSession/Droidy/client -m slow
ninja: Entering directory `../build/tmp_thin-linux-x86_64/frida-core'
ninja: no work to do.
# random seed: R02S37f45a9cae397f6abd28d95ce2a7799b
# Start of HostSession tests
# Start of Droidy tests
Sending: 0019host:transport:99UAY1BUBQ
Receiving: OKAY
Sending: 0039shell:am set-debug-app -w --persistent 'oversecured.ovaa'
Receiving: OKAY
Sending: 0019host:transport:99UAY1BUBQ
Receiving: OKAY
Sending: 0005sync:
Receiving: OKAY
Sending: SENDÔøΩ
Receiving: OKAY
Waiting 2500 ms...
Ok, done
ok 1 /HostSession/Droidy/client
# End of Droidy tests
# End of HostSession tests
1..1",True,{}
frida/frida-core,https://github.com/frida/frida-core,353,2020-12-19T19:27:55Z,2020-12-19T19:30:00Z,2020-12-19T19:30:08Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, enviroment -> environment",1,[],https://github.com/frida/frida-core/pull/353,https://github.com/timgates42,1,https://github.com/frida/frida-core/pull/353,"There is a small typo in lib/xnu/README.md.
Should read environment rather than enviroment.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in lib/xnu/README.md.
Should read environment rather than enviroment.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
frida/frida-core,https://github.com/frida/frida-core,353,2020-12-19T19:27:55Z,2020-12-19T19:30:00Z,2020-12-19T19:30:08Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, enviroment -> environment",1,[],https://github.com/frida/frida-core/pull/353,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/353#issuecomment-748515249,"There is a small typo in lib/xnu/README.md.
Should read environment rather than enviroment.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",Thanks!,True,{'THUMBS_UP': ['https://github.com/timgates42']}
frida/frida-core,https://github.com/frida/frida-core,356,2021-01-06T09:34:26Z,2021-01-06T09:54:33Z,2021-01-06T09:54:33Z,CLOSED,False,3,3,3,https://github.com/0xXA,frida-core: fixup selinux imports,1,[],https://github.com/frida/frida-core/pull/356,https://github.com/0xXA,1,https://github.com/frida/frida-core/pull/356,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,356,2021-01-06T09:34:26Z,2021-01-06T09:54:33Z,2021-01-06T09:54:33Z,CLOSED,False,3,3,3,https://github.com/0xXA,frida-core: fixup selinux imports,1,[],https://github.com/frida/frida-core/pull/356,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/356#issuecomment-755200917,,"Thanks! Just fixed this slightly differently in 7f9354d; we used to add this directory to the include path, but that change got accidentally removed in my previous commit.",True,{}
frida/frida-core,https://github.com/frida/frida-core,357,2021-01-25T01:46:46Z,2021-01-25T12:14:35Z,2021-01-25T12:14:38Z,MERGED,True,1,0,1,https://github.com/meme,Generate GIR by default,1,[],https://github.com/frida/frida-core/pull/357,https://github.com/meme,1,https://github.com/frida/frida-core/pull/357,"The Vala compiler is capable of emitting GIR directly, so g-ir-scanner, etc. are not required
This is added as an install target as well","The Vala compiler is capable of emitting GIR directly, so g-ir-scanner, etc. are not required
This is added as an install target as well",True,{}
frida/frida-core,https://github.com/frida/frida-core,357,2021-01-25T01:46:46Z,2021-01-25T12:14:35Z,2021-01-25T12:14:38Z,MERGED,True,1,0,1,https://github.com/meme,Generate GIR by default,1,[],https://github.com/frida/frida-core/pull/357,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/357#issuecomment-766775154,"The Vala compiler is capable of emitting GIR directly, so g-ir-scanner, etc. are not required
This is added as an install target as well",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,358,2021-02-01T18:06:57Z,2021-02-02T23:40:39Z,2021-02-03T08:17:54Z,MERGED,True,113,2,1,https://github.com/WorksButNotTested,frida-inject send stdin to script,7,[],https://github.com/frida/frida-core/pull/358,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-core/pull/358,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,358,2021-02-01T18:06:57Z,2021-02-02T23:40:39Z,2021-02-03T08:17:54Z,MERGED,True,113,2,1,https://github.com/WorksButNotTested,frida-inject send stdin to script,7,[],https://github.com/frida/frida-core/pull/358,https://github.com/WorksButNotTested,2,https://github.com/frida/frida-core/pull/358#issuecomment-771514308,,"Sample code
function make_blue (message) {
    var escape = String.fromCharCode(parseInt('033', 8));
    var prefix = ""[0;34m"";
    var suffix = ""[0m\n"";
    var blue = `${escape}${prefix}${message.trim()}${escape}${suffix}`
    return blue;
}

rpc.exports = {
    onFridaStdIn: function (message) {
        var stdOutData = make_blue (`> ${message.trim()}`)
        send(['frida:stdout', stdOutData]);
    }
}

send(['frida:stdout', make_blue(""STARTED\n"")]);

var info = {
    type: ""log"",
    level: ""info"",
    payload: ""> error message""
}
_send (JSON.stringify(info), null);

var warning = {
    type: ""log"",
    level: ""warning"",
    payload: ""> warning message""
}
_send (JSON.stringify(warning), null);

var error = {
    type: ""log"",
    level: ""error"",
    payload: ""> error message""
}
_send (JSON.stringify(error), null);",True,{}
frida/frida-core,https://github.com/frida/frida-core,358,2021-02-01T18:06:57Z,2021-02-02T23:40:39Z,2021-02-03T08:17:54Z,MERGED,True,113,2,1,https://github.com/WorksButNotTested,frida-inject send stdin to script,7,[],https://github.com/frida/frida-core/pull/358,https://github.com/WorksButNotTested,3,https://github.com/frida/frida-core/pull/358#issuecomment-771601762,,"Some more test data:
function make_blue (message) {
    var escape = String.fromCharCode(parseInt('033', 8));
    var prefix = ""[0;34m"";
    var suffix = ""[0m\n"";
    var blue = `${escape}${prefix}${message.trim()}${escape}${suffix}`
    return blue;
}

rpc.exports = {
    onFridaStdIn: function (message) {
        var stdOutData = make_blue (`> ${message.trim()}`)
        send(['frida:stdout', stdOutData]);
    }
}

send(['frida:stdout', make_blue(""STARTED\n"")]);

var info = {
    type: ""log"",
    level: ""info"",
    payload: ""> error message""
}
_send (JSON.stringify(info), null);

var warning = {
    type: ""log"",
    level: ""warning"",
    payload: ""> warning message""
}
_send (JSON.stringify(warning), null);

var error = {
    type: ""log"",
    level: ""error"",
    payload: ""> error message""
}
_send (JSON.stringify(error), null);

send (""BLAH"");
send ([""test1"", ""test2"", ""test3""]);
send ([123, ""test""]);
send ([""frida:stdout"", 123]);
send ([{ key: 123, value: ""test""}, ""abc""]);
send ([""frida:stdout"", { key: 123, value: ""test""}]);
send ({ key: 123, value: ""test""});
send (null);",True,{}
frida/frida-core,https://github.com/frida/frida-core,358,2021-02-01T18:06:57Z,2021-02-02T23:40:39Z,2021-02-03T08:17:54Z,MERGED,True,113,2,1,https://github.com/WorksButNotTested,frida-inject send stdin to script,7,[],https://github.com/frida/frida-core/pull/358,https://github.com/WorksButNotTested,4,https://github.com/frida/frida-core/pull/358#issuecomment-771602320,,"The only input I can think which causes a crash now is when you call send without any parameters:
send();
But then we don't even get as far as the on_message function.",True,{}
frida/frida-core,https://github.com/frida/frida-core,358,2021-02-01T18:06:57Z,2021-02-02T23:40:39Z,2021-02-03T08:17:54Z,MERGED,True,113,2,1,https://github.com/WorksButNotTested,frida-inject send stdin to script,7,[],https://github.com/frida/frida-core/pull/358,https://github.com/oleavr,5,https://github.com/frida/frida-core/pull/358#issuecomment-772091616,,Thanks! üôå,True,{}
frida/frida-core,https://github.com/frida/frida-core,359,2021-02-03T09:53:02Z,2021-02-06T03:04:38Z,2021-02-06T03:04:38Z,MERGED,True,151,21,1,https://github.com/WorksButNotTested,Improve frida-inject to support rawio,3,[],https://github.com/frida/frida-core/pull/359,https://github.com/WorksButNotTested,1,https://github.com/frida/frida-core/pull/359,"frida-inject --development -s test.js -p $PID -P '{""raw_mode"": false}'
frida-inject --development -s test.js -p $PID -P '{""raw_mode"": true}'
function make_blue (message) {
    var escape = String.fromCharCode(parseInt('033', 8));
    var prefix = ""[0;34m"";
    var suffix = ""[0m\n"";
    var blue = `${escape}${prefix}${message.trim()}${escape}${suffix}`
    return blue;
}

rpc.exports = {
    raw_mode: false,
    init (stage, params) {
        var stageStr = make_blue (`STAGE > ${stage.trim()}`)
        send(['frida:stdout', stageStr]);
        var paramsData = make_blue (`PARAMS > ${params.raw_mode}`)
        send(['frida:stdout', paramsData]);
        this.raw_mode = params.raw_mode;
    },
    onFridaStdin (message) {
        var stdOutData = make_blue (`> ${message.trim()}`)
        send(['frida:stdout', `${stdOutData}\r`]);
    },
    onFridaGetStdInRawMode: function () {
        send(['frida:stdout', make_blue('onFridaGetStdInRawMode\n')]);
        return this.raw_mode;
    }
}

send(['frida:stdout', make_blue(""STARTED\n"")]);

var info = {
    type: ""log"",
    level: ""info"",
    payload: ""> error message""
}
_send (JSON.stringify(info), null);

var warning = {
    type: ""log"",
    level: ""warning"",
    payload: ""> warning message""
}
_send (JSON.stringify(warning), null);

var error = {
    type: ""log"",
    level: ""error"",
    payload: ""> error message""
}
_send (JSON.stringify(error), null);

send (""BLAH"");
send ([""test1"", ""test2"", ""test3""]);
send ([123, ""test""]);
send ([""frida:stdout"", 123]);
send ([{ key: 123, value: ""test""}, ""abc""]);
send ([""frida:stdout"", { key: 123, value: ""test""}]);
send ({ key: 123, value: ""test""});
send (null);","frida-inject --development -s test.js -p $PID -P '{""raw_mode"": false}'
frida-inject --development -s test.js -p $PID -P '{""raw_mode"": true}'
function make_blue (message) {
    var escape = String.fromCharCode(parseInt('033', 8));
    var prefix = ""[0;34m"";
    var suffix = ""[0m\n"";
    var blue = `${escape}${prefix}${message.trim()}${escape}${suffix}`
    return blue;
}

rpc.exports = {
    raw_mode: false,
    init (stage, params) {
        var stageStr = make_blue (`STAGE > ${stage.trim()}`)
        send(['frida:stdout', stageStr]);
        var paramsData = make_blue (`PARAMS > ${params.raw_mode}`)
        send(['frida:stdout', paramsData]);
        this.raw_mode = params.raw_mode;
    },
    onFridaStdin (message) {
        var stdOutData = make_blue (`> ${message.trim()}`)
        send(['frida:stdout', `${stdOutData}\r`]);
    },
    onFridaGetStdInRawMode: function () {
        send(['frida:stdout', make_blue('onFridaGetStdInRawMode\n')]);
        return this.raw_mode;
    }
}

send(['frida:stdout', make_blue(""STARTED\n"")]);

var info = {
    type: ""log"",
    level: ""info"",
    payload: ""> error message""
}
_send (JSON.stringify(info), null);

var warning = {
    type: ""log"",
    level: ""warning"",
    payload: ""> warning message""
}
_send (JSON.stringify(warning), null);

var error = {
    type: ""log"",
    level: ""error"",
    payload: ""> error message""
}
_send (JSON.stringify(error), null);

send (""BLAH"");
send ([""test1"", ""test2"", ""test3""]);
send ([123, ""test""]);
send ([""frida:stdout"", 123]);
send ([{ key: 123, value: ""test""}, ""abc""]);
send ([""frida:stdout"", { key: 123, value: ""test""}]);
send ({ key: 123, value: ""test""});
send (null);",True,{}
frida/frida-core,https://github.com/frida/frida-core,360,2021-02-13T17:23:26Z,2021-02-16T20:23:21Z,2021-02-16T20:23:21Z,MERGED,True,92,81,1,https://github.com/muhzii,Fix frida-inject when process is not attached to a terminal,3,[],https://github.com/frida/frida-core/pull/360,https://github.com/muhzii,1,https://github.com/frida/frida-core/pull/360,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,363,2021-02-25T02:38:28Z,2021-03-02T22:43:35Z,2021-03-02T22:43:40Z,MERGED,True,9,1,1,https://github.com/muhzii,frida-inject: Make the communication with script through stdin optional.,1,[],https://github.com/frida/frida-core/pull/363,https://github.com/muhzii,1,https://github.com/frida/frida-core/pull/363,"Having this enabled by default will prevent use cases such as running frida-inject as a background process.
Also, this currently conflicts with the --eternalize option where it is expected that the process will exit after loading the script.","Having this enabled by default will prevent use cases such as running frida-inject as a background process.
Also, this currently conflicts with the --eternalize option where it is expected that the process will exit after loading the script.",True,{}
frida/frida-core,https://github.com/frida/frida-core,363,2021-02-25T02:38:28Z,2021-03-02T22:43:35Z,2021-03-02T22:43:40Z,MERGED,True,9,1,1,https://github.com/muhzii,frida-inject: Make the communication with script through stdin optional.,1,[],https://github.com/frida/frida-core/pull/363,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/363#issuecomment-789277522,"Having this enabled by default will prevent use cases such as running frida-inject as a background process.
Also, this currently conflicts with the --eternalize option where it is expected that the process will exit after loading the script.",Thanks!,True,{}
frida/frida-core,https://github.com/frida/frida-core,365,2021-03-08T23:50:43Z,2021-03-10T10:38:33Z,2021-03-10T11:03:51Z,MERGED,True,51,6,1,https://github.com/mrmacete,Support iOS app spawn on unc0ver 6.x,4,[],https://github.com/frida/frida-core/pull/365,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/365,"By skipping the call to substituted which eventually results in resuming the app too early, only for the PIDs of the apps spawn by Frida.
Needs more testing to find out possible edge cases of this approach, but to my initial tests it fixes the spawn issue on unc0ver 6.x","By skipping the call to substituted which eventually results in resuming the app too early, only for the PIDs of the apps spawn by Frida.
Needs more testing to find out possible edge cases of this approach, but to my initial tests it fixes the spawn issue on unc0ver 6.x",True,{}
frida/frida-core,https://github.com/frida/frida-core,366,2021-03-09T17:38:14Z,2021-03-10T10:59:24Z,2021-07-30T00:34:36Z,MERGED,True,19,4,1,https://github.com/mrmacete,Workaround single-step delay,1,[],https://github.com/frida/frida-core/pull/366,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/366,"It happens randomly that after hitting a single-step breakpoint, even if we disable it and continue, it still hits once.
(especially visible on iOS 14.x with unc0ver 6.x)
This change detects and reacts to this condition.","It happens randomly that after hitting a single-step breakpoint, even if we disable it and continue, it still hits once.
(especially visible on iOS 14.x with unc0ver 6.x)
This change detects and reacts to this condition.",True,{}
frida/frida-core,https://github.com/frida/frida-core,366,2021-03-09T17:38:14Z,2021-03-10T10:59:24Z,2021-07-30T00:34:36Z,MERGED,True,19,4,1,https://github.com/mrmacete,Workaround single-step delay,1,[],https://github.com/frida/frida-core/pull/366,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/366#issuecomment-889545450,"It happens randomly that after hitting a single-step breakpoint, even if we disable it and continue, it still hits once.
(especially visible on iOS 14.x with unc0ver 6.x)
This change detects and reacts to this condition.","Earlier today I ran into the same issue on the other edge ‚Äì when enabling instead of disabling. So I cooked up the workaround in 7e023ff. It would then work most of the time, but still fail once in a while in some weird way. I was also experiencing system lockups on my M1 running macOS Monterey, which was strange.
Then when trying the new spawn gating on my old Intel MacBook, I ran into an issue that seemed kind of familiar: that task_resume() failed because it claimed the task port wasn't valid. And then I remembered the old observation that task ports shouldn't survive exec-transitions. So once I removed the task port caching from the spawn gating, it started working on the Intel system as well.
But still, I noticed weirdness when resume() was done without attaching in case of apps spawned (xpcproxy becoming the app). And then I realized there was the same caching issue there ‚Äì cached task ports were being used from before the exec transition in that case.
Anyway, I quickly checked how much wall-clock time task_for_pid() typically takes on my Intel system, and it was pretty consistently less than a millisecond. So I went ahead and just removed all the caching logic. And then I realized that this single-step delay workaround that I added is no longer needed. And so far no system lockups (!).
So now I'm wondering if maybe also this issue has the same root cause, and should also be reverted?",True,{}
frida/frida-core,https://github.com/frida/frida-core,367,2021-03-13T18:21:51Z,2021-03-14T17:30:50Z,2021-03-14T17:30:50Z,MERGED,True,1,1,1,https://github.com/Manouchehri,Fix build for new Xcode.,1,[],https://github.com/frida/frida-core/pull/367,https://github.com/Manouchehri,1,https://github.com/frida/frida-core/pull/367,"Doesn't seem to fix frida/frida#1647 entirely, unless I'm still building it out of date by accident..","Doesn't seem to fix frida/frida#1647 entirely, unless I'm still building it out of date by accident..",True,{}
frida/frida-core,https://github.com/frida/frida-core,369,2021-04-12T16:48:39Z,2021-04-12T21:24:19Z,2021-04-12T21:24:19Z,MERGED,True,1,1,1,https://github.com/mrmacete,Shorten signature to match newer inserter too,1,[],https://github.com/frida/frida-core/pull/369,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/369,,,True,{}
frida/frida-core,https://github.com/frida/frida-core,370,2021-04-14T20:55:29Z,2021-04-15T09:37:43Z,2021-04-15T09:37:43Z,MERGED,True,63,6,1,https://github.com/asabil,Rework the function address resolution on Android,5,[],https://github.com/frida/frida-core/pull/370,https://github.com/asabil,1,https://github.com/frida/frida-core/pull/370,"Use the library base address retrieved using dladdr to find the path in /proc/:pid/maps instead of relying on the library path. This is to handle cases where the android environment is running inside a container.
Similarly, when resolving a linker function, use the already resolved linker base address to match the correct line in /proc/:pid/maps","Use the library base address retrieved using dladdr to find the path in /proc/:pid/maps instead of relying on the library path. This is to handle cases where the android environment is running inside a container.
Similarly, when resolving a linker function, use the already resolved linker base address to match the correct line in /proc/:pid/maps",True,{}
frida/frida-core,https://github.com/frida/frida-core,370,2021-04-14T20:55:29Z,2021-04-15T09:37:43Z,2021-04-15T09:37:43Z,MERGED,True,63,6,1,https://github.com/asabil,Rework the function address resolution on Android,5,[],https://github.com/frida/frida-core/pull/370,https://github.com/asabil,2,https://github.com/frida/frida-core/pull/370#issuecomment-820161608,"Use the library base address retrieved using dladdr to find the path in /proc/:pid/maps instead of relying on the library path. This is to handle cases where the android environment is running inside a container.
Similarly, when resolving a linker function, use the already resolved linker base address to match the correct line in /proc/:pid/maps","The idea here is that we already know the base address of the function in our own process through the dladdr() function, we could use this base address to find the corresponding library path in /proc/self/maps, at this point knowing the library path, we use this library path when resolving the base address on the remote process.
Similarly, the base address of the linker has already been resolved, so we use that instead of using the linker path.",True,{}
frida/frida-core,https://github.com/frida/frida-core,372,2021-04-26T12:48:10Z,2021-04-26T12:52:45Z,2021-04-26T12:54:07Z,MERGED,True,119,106,2,https://github.com/mrmacete,Fix chained fixups handling in fruity injection,1,[],https://github.com/frida/frida-core/pull/372,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/372,By honouring CHAINED_PTR_START_NONE,By honouring CHAINED_PTR_START_NONE,True,{}
frida/frida-core,https://github.com/frida/frida-core,372,2021-04-26T12:48:10Z,2021-04-26T12:52:45Z,2021-04-26T12:54:07Z,MERGED,True,119,106,2,https://github.com/mrmacete,Fix chained fixups handling in fruity injection,1,[],https://github.com/frida/frida-core/pull/372,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/372#issuecomment-826810677,By honouring CHAINED_PTR_START_NONE,"Yay, thanks! üéâ",True,{}
frida/frida-core,https://github.com/frida/frida-core,373,2021-05-07T12:38:33Z,2021-06-08T00:50:49Z,2021-06-08T00:50:49Z,CLOSED,False,74,0,8,https://github.com/hexploitable,Expose system_parameters via HostSession API,11,[],https://github.com/frida/frida-core/pull/373,https://github.com/hexploitable,1,https://github.com/frida/frida-core/pull/373,"This MR, based on feature/portal exposes a system parameters hashmap via HostSession.
For now, the only key-value pair within is the platform, determined at compile time since we already know it. This object can be extended going forward if we think of anything extra we'd like to include.
I'll separately push the PR's for frida-python and frida-node but here's the anticipated usage:
>>> import frida
>>> d = frida.enumerate_devices()
>>> d
[Device(id=""local"", name=""Local System"", type='local'), Device(id=""socket"", name=""Local Socket"", type='remote'), Device(id=""REDACTED"", name=""iPhone"", type='usb'), Device(id=""REDACTED"", name=""Pixel 3"", type='usb')]
>>> a = d[3]
>>> a
Device(id=""REDACTED"", name=""Pixel 3"", type='usb')
>>> i = d[2]
>>> m = d[0]
>>> m.query_system_parameters()
{'platform': 'macos'}
>>> i.query_system_parameters()
{'platform': 'ios'}
>>> a.query_system_parameters()
{'platform': 'android'}
>>>","This MR, based on feature/portal exposes a system parameters hashmap via HostSession.
For now, the only key-value pair within is the platform, determined at compile time since we already know it. This object can be extended going forward if we think of anything extra we'd like to include.
I'll separately push the PR's for frida-python and frida-node but here's the anticipated usage:
>>> import frida
>>> d = frida.enumerate_devices()
>>> d
[Device(id=""local"", name=""Local System"", type='local'), Device(id=""socket"", name=""Local Socket"", type='remote'), Device(id=""REDACTED"", name=""iPhone"", type='usb'), Device(id=""REDACTED"", name=""Pixel 3"", type='usb')]
>>> a = d[3]
>>> a
Device(id=""REDACTED"", name=""Pixel 3"", type='usb')
>>> i = d[2]
>>> m = d[0]
>>> m.query_system_parameters()
{'platform': 'macos'}
>>> i.query_system_parameters()
{'platform': 'ios'}
>>> a.query_system_parameters()
{'platform': 'android'}
>>>",True,{}
frida/frida-core,https://github.com/frida/frida-core,373,2021-05-07T12:38:33Z,2021-06-08T00:50:49Z,2021-06-08T00:50:49Z,CLOSED,False,74,0,8,https://github.com/hexploitable,Expose system_parameters via HostSession API,11,[],https://github.com/frida/frida-core/pull/373,https://github.com/hexploitable,2,https://github.com/frida/frida-core/pull/373#issuecomment-834620157,"This MR, based on feature/portal exposes a system parameters hashmap via HostSession.
For now, the only key-value pair within is the platform, determined at compile time since we already know it. This object can be extended going forward if we think of anything extra we'd like to include.
I'll separately push the PR's for frida-python and frida-node but here's the anticipated usage:
>>> import frida
>>> d = frida.enumerate_devices()
>>> d
[Device(id=""local"", name=""Local System"", type='local'), Device(id=""socket"", name=""Local Socket"", type='remote'), Device(id=""REDACTED"", name=""iPhone"", type='usb'), Device(id=""REDACTED"", name=""Pixel 3"", type='usb')]
>>> a = d[3]
>>> a
Device(id=""REDACTED"", name=""Pixel 3"", type='usb')
>>> i = d[2]
>>> m = d[0]
>>> m.query_system_parameters()
{'platform': 'macos'}
>>> i.query_system_parameters()
{'platform': 'ios'}
>>> a.query_system_parameters()
{'platform': 'android'}
>>>",Got some conflicts to clean up and need to figure out what to do with gadget & the jailed devices but I cleaned the rest up @oleavr,True,{}
frida/frida-core,https://github.com/frida/frida-core,374,2021-05-07T13:10:06Z,2021-05-07T23:13:39Z,2021-05-07T23:13:44Z,MERGED,True,2,2,1,https://github.com/mrmacete,Fix ___error symbol name in fruity injector,1,[],https://github.com/frida/frida-core/pull/374,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/374,"Noticed while debugging other issues that get_errno_storage was always NULL, fixed by adding the missing underscore to the mangled symbol name.","Noticed while debugging other issues that get_errno_storage was always NULL, fixed by adding the missing underscore to the mangled symbol name.",True,{}
frida/frida-core,https://github.com/frida/frida-core,374,2021-05-07T13:10:06Z,2021-05-07T23:13:39Z,2021-05-07T23:13:44Z,MERGED,True,2,2,1,https://github.com/mrmacete,Fix ___error symbol name in fruity injector,1,[],https://github.com/frida/frida-core/pull/374,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/374#issuecomment-834851685,"Noticed while debugging other issues that get_errno_storage was always NULL, fixed by adding the missing underscore to the mangled symbol name.",Thanks! ü§ò,True,{}
frida/frida-core,https://github.com/frida/frida-core,375,2021-05-26T00:18:48Z,2021-06-11T00:22:14Z,2021-06-11T00:22:49Z,MERGED,True,3,3,1,https://github.com/nyuszika7h,Remove bashisms from iOS maintainer scripts,1,[],https://github.com/frida/frida-core/pull/375,https://github.com/nyuszika7h,1,https://github.com/frida/frida-core/pull/375,"Procursus-based jailbreaks such as Odyssey, Taurine and odysseyra1n use dash as /bin/sh.
The use of bashisms without a #!/bin/bash shebang causes it to fail to start/stop frida-server.","Procursus-based jailbreaks such as Odyssey, Taurine and odysseyra1n use dash as /bin/sh.
The use of bashisms without a #!/bin/bash shebang causes it to fail to start/stop frida-server.",True,{'THUMBS_UP': ['https://github.com/Absolucy']}
frida/frida-core,https://github.com/frida/frida-core,375,2021-05-26T00:18:48Z,2021-06-11T00:22:14Z,2021-06-11T00:22:49Z,MERGED,True,3,3,1,https://github.com/nyuszika7h,Remove bashisms from iOS maintainer scripts,1,[],https://github.com/frida/frida-core/pull/375,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/375#issuecomment-859172598,"Procursus-based jailbreaks such as Odyssey, Taurine and odysseyra1n use dash as /bin/sh.
The use of bashisms without a #!/bin/bash shebang causes it to fail to start/stop frida-server.","Yay, nice work! üôå Thanks a lot! ‚ù§Ô∏è",True,{}
frida/frida-core,https://github.com/frida/frida-core,388,2021-08-19T09:53:49Z,2021-12-22T18:40:09Z,2021-12-22T18:40:09Z,CLOSED,False,1,1,1,None,Fix agent call fail when FRIDA_V8=disabled,1,[],https://github.com/frida/frida-core/pull/388,None,1,https://github.com/frida/frida-core/pull/388,"when build android server with FRIDA_V8=disabled, frida-python will not work
self._impl.enumerate_processes(*args, **kwargs): frida.NotSupportedError: v8 runtime not available due to build configuration.
this is not a graceful fix.","when build android server with FRIDA_V8=disabled, frida-python will not work
self._impl.enumerate_processes(*args, **kwargs): frida.NotSupportedError: v8 runtime not available due to build configuration.
this is not a graceful fix.",True,{}
frida/frida-core,https://github.com/frida/frida-core,388,2021-08-19T09:53:49Z,2021-12-22T18:40:09Z,2021-12-22T18:40:09Z,CLOSED,False,1,1,1,None,Fix agent call fail when FRIDA_V8=disabled,1,[],https://github.com/frida/frida-core/pull/388,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/388#issuecomment-925171873,"when build android server with FRIDA_V8=disabled, frida-python will not work
self._impl.enumerate_processes(*args, **kwargs): frida.NotSupportedError: v8 runtime not available due to build configuration.
this is not a graceful fix.","Thanks for taking a stab at this! In order to land this, we will have to check whether V8 is available (meson.build) and specify the runtime based on that. Otherwise this will result in a performance regression on Android.",True,{}
frida/frida-core,https://github.com/frida/frida-core,390,2021-09-01T22:09:02Z,2021-09-02T21:21:41Z,2021-09-02T21:21:41Z,MERGED,True,17,1,1,https://github.com/mattshockl,Update pipe-darwin.c to use correct error string,3,[],https://github.com/frida/frida-core/pull/390,https://github.com/mattshockl,1,https://github.com/frida/frida-core/pull/390,"Update pipe-darwin.c to use bootstrap_strerror instead of mach_error_string for errors coming from bootstrap_look_up.  Currently the error printed every time is ""Unknown error code""","Update pipe-darwin.c to use bootstrap_strerror instead of mach_error_string for errors coming from bootstrap_look_up.  Currently the error printed every time is ""Unknown error code""",True,{}
frida/frida-core,https://github.com/frida/frida-core,391,2021-09-02T21:19:20Z,2021-09-02T22:21:16Z,2021-09-02T22:21:17Z,CLOSED,False,74,26,5,https://github.com/mattshockl,Add 'no-bootstrap-service' option to frida-server,4,[],https://github.com/frida/frida-core/pull/391,https://github.com/mattshockl,1,https://github.com/frida/frida-core/pull/391,"Add option to not register a bootstrap service and just rely on the stashed mach port. For some unknown reason to me, the sandbox extension code in the frida_darwin_helper_backend_make_pipe_endpoints function fails transparently for some processes (apsd, imagent, etc) on Big Sur. With no fallback options, it makes it impossible to hook these applications. This option allows a user to specify to not use the bootstrap server and instead fall back on just the traditional mach port IPC.
This also seems to be causing other people issues:
frida/frida#1829
frida/frida#1830
frida/frida#1719
Here's an example with apsd without --no-bootstrap-service

Here's an example with apsd with --no-bootstrap-service","Add option to not register a bootstrap service and just rely on the stashed mach port. For some unknown reason to me, the sandbox extension code in the frida_darwin_helper_backend_make_pipe_endpoints function fails transparently for some processes (apsd, imagent, etc) on Big Sur. With no fallback options, it makes it impossible to hook these applications. This option allows a user to specify to not use the bootstrap server and instead fall back on just the traditional mach port IPC.
This also seems to be causing other people issues:
frida/frida#1829
frida/frida#1830
frida/frida#1719
Here's an example with apsd without --no-bootstrap-service

Here's an example with apsd with --no-bootstrap-service",True,{}
frida/frida-core,https://github.com/frida/frida-core,391,2021-09-02T21:19:20Z,2021-09-02T22:21:16Z,2021-09-02T22:21:17Z,CLOSED,False,74,26,5,https://github.com/mattshockl,Add 'no-bootstrap-service' option to frida-server,4,[],https://github.com/frida/frida-core/pull/391,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/391#issuecomment-912079101,"Add option to not register a bootstrap service and just rely on the stashed mach port. For some unknown reason to me, the sandbox extension code in the frida_darwin_helper_backend_make_pipe_endpoints function fails transparently for some processes (apsd, imagent, etc) on Big Sur. With no fallback options, it makes it impossible to hook these applications. This option allows a user to specify to not use the bootstrap server and instead fall back on just the traditional mach port IPC.
This also seems to be causing other people issues:
frida/frida#1829
frida/frida#1830
frida/frida#1719
Here's an example with apsd without --no-bootstrap-service

Here's an example with apsd with --no-bootstrap-service","Thanks! üéâ  I think we will need to find a solution that also works on Monterey / iOS 15, where guarded Mach ports prevent us from using our traditional mach port IPC. So given the (hopefully) temporary nature of this workaround, I think we should use an environment variable instead, as this will also work for non-frida-server use-cases.",True,{}
frida/frida-core,https://github.com/frida/frida-core,392,2021-09-02T22:53:06Z,2021-09-03T21:28:59Z,2021-09-03T21:29:38Z,CLOSED,False,25,19,1,https://github.com/mattshockl,Add NO_BOOTSTRAP_SERVICE environment variable functionality,6,[],https://github.com/frida/frida-core/pull/392,https://github.com/mattshockl,1,https://github.com/frida/frida-core/pull/392,"Based on feedback from #391, changed the functionality to just look for a NO_BOOTSTRAP_SERVICE environment variable as a temporary solution to this issue.","Based on feedback from #391, changed the functionality to just look for a NO_BOOTSTRAP_SERVICE environment variable as a temporary solution to this issue.",True,{}
frida/frida-core,https://github.com/frida/frida-core,392,2021-09-02T22:53:06Z,2021-09-03T21:28:59Z,2021-09-03T21:29:38Z,CLOSED,False,25,19,1,https://github.com/mattshockl,Add NO_BOOTSTRAP_SERVICE environment variable functionality,6,[],https://github.com/frida/frida-core/pull/392,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/392#issuecomment-912820814,"Based on feedback from #391, changed the functionality to just look for a NO_BOOTSTRAP_SERVICE environment variable as a temporary solution to this issue.","Thanks! I couldn't stop thinking about how to solve this properly, and then it eventually struck me that maybe this new IPC scheme isn't actually needed. It was introduced to support iOS 15, but only after fixing the first stumbling block, during which I may have gained an incorrect understanding of guarded Mach ports, in turn resulting in me thinking I also had to rework the IPC part. I've reverted this code for now, so there's no longer any bootstrap service. I'm still waiting for feedback from someone with access to jailbroken iOS 15 and just started releasing Frida 15.1.0 with these changes. Let's see if we need to roll them back and revisit this. But for now let's close this and hope for the best ü§û",True,{'HEART': ['https://github.com/mattshockl']}
frida/frida-core,https://github.com/frida/frida-core,393,2021-09-03T16:31:01Z,2021-09-03T20:17:58Z,2021-09-03T20:17:58Z,MERGED,True,49,2,1,https://github.com/mrmacete,Add interaction.parameters to gadget in connect mode,2,[],https://github.com/frida/frida-core/pull/393,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/393,"These parameters are then ""reflected"" into app's info under parameters.parameters","These parameters are then ""reflected"" into app's info under parameters.parameters",True,{}
frida/frida-core,https://github.com/frida/frida-core,394,2021-09-04T08:52:02Z,2021-09-27T09:42:44Z,2021-09-27T09:42:44Z,CLOSED,False,17,3,1,https://github.com/hunterli,Improve frida-inject to start specific activity,1,[],https://github.com/frida/frida-core/pull/394,https://github.com/hunterli,1,https://github.com/frida/frida-core/pull/394,To resolve issue: Unable to find a front-door activity,To resolve issue: Unable to find a front-door activity,True,{}
frida/frida-core,https://github.com/frida/frida-core,394,2021-09-04T08:52:02Z,2021-09-27T09:42:44Z,2021-09-27T09:42:44Z,CLOSED,False,17,3,1,https://github.com/hunterli,Improve frida-inject to start specific activity,1,[],https://github.com/frida/frida-core/pull/394,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/394#issuecomment-925169244,To resolve issue: Unable to find a front-door activity,Thanks! I think it would be better to add a CLI option to add aux options generically. This way we won't have to add CLI options for all the other OS-specific options. It would be great to do what frida-tools does.,True,{}
frida/frida-core,https://github.com/frida/frida-core,394,2021-09-04T08:52:02Z,2021-09-27T09:42:44Z,2021-09-27T09:42:44Z,CLOSED,False,17,3,1,https://github.com/hunterli,Improve frida-inject to start specific activity,1,[],https://github.com/frida/frida-core/pull/394,https://github.com/hunterli,3,https://github.com/frida/frida-core/pull/394#issuecomment-927700487,To resolve issue: Unable to find a front-door activity,"Thanks! I think it would be better to add a CLI option to add aux options generically. This way we won't have to add CLI options for all the other OS-specific options. It would be great to do what frida-tools does.

OK",True,{}
frida/frida-core,https://github.com/frida/frida-core,396,2021-09-22T17:15:05Z,2021-09-22T18:46:30Z,2021-09-22T18:46:30Z,MERGED,True,46,2,1,https://github.com/mrmacete,control-service: fix signal wiring,3,[],https://github.com/frida/frida-core/pull/396,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/396,"Route output, child_added, child_removed, process_crashed and uninjected signals to all control channel peers.","Route output, child_added, child_removed, process_crashed and uninjected signals to all control channel peers.",True,{}
frida/frida-core,https://github.com/frida/frida-core,399,2021-10-14T07:43:33Z,2021-10-20T10:31:21Z,2021-10-20T10:31:22Z,MERGED,True,26,2,1,https://github.com/amirpeles90,Support ADB environment variables in droidy client,2,[],https://github.com/frida/frida-core/pull/399,https://github.com/amirpeles90,1,https://github.com/frida/frida-core/pull/399,"Currently, droidy client tries to communicate with the ADB server on localhost with the default port.
There are some use cases in which another configuration is preferred.
For example, I've been starting to experiment with WSL lately.
Currently, WSL2 does not support USB drivers, is living in an internal network, and can communicate with the host only.
I basically set up an ADB server on the host (Windows) and an ADB client in WSL that communicates with devices through this ADB server (Using host IP).
Instead of bloating Frida with more arguments, I thought it will be a good idea just to use ADB's environment variables, in this case, ADB_SERVER_SOCKET, ANDROID_ADB_SERVER_ADDRESS, ANDROID_ADB_SERVER_PORT.
The fix is pretty straightforward. I tried to copy the flow in ADB:
https://cs.android.com/android/platform/superproject/+/master:packages/modules/adb/client/commandline.cpp;l=1637?q=ADB_SERVER_PORT&ss=android%2Fplatform%2Fsuperproject","Currently, droidy client tries to communicate with the ADB server on localhost with the default port.
There are some use cases in which another configuration is preferred.
For example, I've been starting to experiment with WSL lately.
Currently, WSL2 does not support USB drivers, is living in an internal network, and can communicate with the host only.
I basically set up an ADB server on the host (Windows) and an ADB client in WSL that communicates with devices through this ADB server (Using host IP).
Instead of bloating Frida with more arguments, I thought it will be a good idea just to use ADB's environment variables, in this case, ADB_SERVER_SOCKET, ANDROID_ADB_SERVER_ADDRESS, ANDROID_ADB_SERVER_PORT.
The fix is pretty straightforward. I tried to copy the flow in ADB:
https://cs.android.com/android/platform/superproject/+/master:packages/modules/adb/client/commandline.cpp;l=1637?q=ADB_SERVER_PORT&ss=android%2Fplatform%2Fsuperproject",True,{}
frida/frida-core,https://github.com/frida/frida-core,399,2021-10-14T07:43:33Z,2021-10-20T10:31:21Z,2021-10-20T10:31:22Z,MERGED,True,26,2,1,https://github.com/amirpeles90,Support ADB environment variables in droidy client,2,[],https://github.com/frida/frida-core/pull/399,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/399#issuecomment-947536913,"Currently, droidy client tries to communicate with the ADB server on localhost with the default port.
There are some use cases in which another configuration is preferred.
For example, I've been starting to experiment with WSL lately.
Currently, WSL2 does not support USB drivers, is living in an internal network, and can communicate with the host only.
I basically set up an ADB server on the host (Windows) and an ADB client in WSL that communicates with devices through this ADB server (Using host IP).
Instead of bloating Frida with more arguments, I thought it will be a good idea just to use ADB's environment variables, in this case, ADB_SERVER_SOCKET, ANDROID_ADB_SERVER_ADDRESS, ANDROID_ADB_SERVER_PORT.
The fix is pretty straightforward. I tried to copy the flow in ADB:
https://cs.android.com/android/platform/superproject/+/master:packages/modules/adb/client/commandline.cpp;l=1637?q=ADB_SERVER_PORT&ss=android%2Fplatform%2Fsuperproject","Thanks, this is great! üôå  (Sorry for the delay btw, it's been an intense week üòÖ)",True,{'THUMBS_UP': ['https://github.com/iddoeldor']}
frida/frida-core,https://github.com/frida/frida-core,400,2021-10-22T18:17:57Z,2021-10-25T17:12:39Z,2021-11-11T14:33:46Z,MERGED,True,15,2,2,https://github.com/Nessphoro,Add support for working in the SRD envrionment,2,[],https://github.com/frida/frida-core/pull/400,https://github.com/Nessphoro,1,https://github.com/frida/frida-core/pull/400,"Hi friends,
In iOS 15.1 I have added a new entitlement called research.com.apple.license-to-operate to support Frida and other research tools for the Apple Security Research Device.
This entitlement allows tools to bypass the PPL codesigning protections and the usual task-port policies to inject code into any process running on the system (platform and non-platform).
In addition to adopting that entitlement, this PR teaches frida-agent about cryptexes (the bundle format for code on the SRD) so that it can find the resources it needs.
Using Frida on the SRD requires running frida-policyd and frida-server with the internal policy softener, otherwise code injection will not work.","Hi friends,
In iOS 15.1 I have added a new entitlement called research.com.apple.license-to-operate to support Frida and other research tools for the Apple Security Research Device.
This entitlement allows tools to bypass the PPL codesigning protections and the usual task-port policies to inject code into any process running on the system (platform and non-platform).
In addition to adopting that entitlement, this PR teaches frida-agent about cryptexes (the bundle format for code on the SRD) so that it can find the resources it needs.
Using Frida on the SRD requires running frida-policyd and frida-server with the internal policy softener, otherwise code injection will not work.",True,"{'HOORAY': ['https://github.com/TorgoApple', 'https://github.com/melomac', 'https://github.com/aralisza', 'https://github.com/Nessphoro', 'https://github.com/oleavr']}"
frida/frida-core,https://github.com/frida/frida-core,400,2021-10-22T18:17:57Z,2021-10-25T17:12:39Z,2021-11-11T14:33:46Z,MERGED,True,15,2,2,https://github.com/Nessphoro,Add support for working in the SRD envrionment,2,[],https://github.com/frida/frida-core/pull/400,https://github.com/oleavr,2,https://github.com/frida/frida-core/pull/400#issuecomment-951135184,"Hi friends,
In iOS 15.1 I have added a new entitlement called research.com.apple.license-to-operate to support Frida and other research tools for the Apple Security Research Device.
This entitlement allows tools to bypass the PPL codesigning protections and the usual task-port policies to inject code into any process running on the system (platform and non-platform).
In addition to adopting that entitlement, this PR teaches frida-agent about cryptexes (the bundle format for code on the SRD) so that it can find the resources it needs.
Using Frida on the SRD requires running frida-policyd and frida-server with the internal policy softener, otherwise code injection will not work.","Yay, this is awesome! üî• Thanks a lot! üéâ
(I just noticed this PR after tagging 15.1.7 ‚Äî will go ahead and cut 15.1.8 with this included.)",True,{'HEART': ['https://github.com/xsscx']}
frida/frida-core,https://github.com/frida/frida-core,401,2021-11-01T12:59:14Z,2021-11-02T09:52:35Z,2021-11-02T09:52:35Z,CLOSED,False,3,1,1,https://github.com/mrmacete,portal-service: Check NULL session entry in teardown_cluster_node(),1,[],https://github.com/frida/frida-core/pull/401,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/401,"Apparently sessions[id] can be NULL under certain conditions, the check avoids crashing in that case.","Apparently sessions[id] can be NULL under certain conditions, the check avoids crashing in that case.",True,{}
frida/frida-core,https://github.com/frida/frida-core,401,2021-11-01T12:59:14Z,2021-11-02T09:52:35Z,2021-11-02T09:52:35Z,CLOSED,False,3,1,1,https://github.com/mrmacete,portal-service: Check NULL session entry in teardown_cluster_node(),1,[],https://github.com/frida/frida-core/pull/401,https://github.com/mrmacete,2,https://github.com/frida/frida-core/pull/401#issuecomment-957279530,"Apparently sessions[id] can be NULL under certain conditions, the check avoids crashing in that case.",Closing in favour of #402,True,{}
frida/frida-core,https://github.com/frida/frida-core,402,2021-11-02T09:52:10Z,2021-11-02T18:46:50Z,2021-11-02T18:46:50Z,MERGED,True,9,0,1,https://github.com/mrmacete,portal-service: Always remove ClusterNode and ControlChannel sessions,2,[],https://github.com/frida/frida-core/pull/402,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/402,Whenever a session id is unset from PortalService. This avoids both NULL derefereces and leaks.,Whenever a session id is unset from PortalService. This avoids both NULL derefereces and leaks.,True,{}
frida/frida-core,https://github.com/frida/frida-core,405,2021-11-26T10:21:44Z,2021-11-30T21:03:40Z,2021-11-30T21:03:41Z,MERGED,True,3,3,1,https://github.com/mrmacete,fruity: Fix spawn on dyld v4 case (jailed iOS 15.x),3,[],https://github.com/frida/frida-core/pull/405,https://github.com/mrmacete,1,https://github.com/frida/frida-core/pull/405,"Walk the frame pointer once more, in order to get to the actual caller of libSystem_initializer instead of stopping in the middle of it.","Walk the frame pointer once more, in order to get to the actual caller of libSystem_initializer instead of stopping in the middle of it.",True,{}
frida/frida-core,https://github.com/frida/frida-core,406,2022-01-10T17:43:24Z,2022-01-20T22:55:14Z,2022-01-20T22:55:15Z,MERGED,True,337,0,2,https://github.com/meme,droidy: Add AXML decoder,2,[],https://github.com/frida/frida-core/pull/406,https://github.com/meme,1,https://github.com/frida/frida-core/pull/406,,,True,{}
