espruino/Espruino,https://github.com/espruino/Espruino,811,2016-02-26T08:03:38Z,2016-02-26T08:19:17Z,2016-03-09T00:56:59Z,MERGED,True,5,4,1,https://github.com/tve,fix #809 esp8266 socket close,1,[],https://github.com/espruino/Espruino/pull/811,https://github.com/tve,1,https://github.com/espruino/Espruino/pull/811,"I have not done extensive testing, but it does fix the issue as far as I can tell.","I have not done extensive testing, but it does fix the issue as far as I can tell.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,811,2016-02-26T08:03:38Z,2016-02-26T08:19:17Z,2016-03-09T00:56:59Z,MERGED,True,5,4,1,https://github.com/tve,fix #809 esp8266 socket close,1,[],https://github.com/espruino/Espruino/pull/811,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/811#issuecomment-189157858,"I have not done extensive testing, but it does fix the issue as far as I can tell.",Cool - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,811,2016-02-26T08:03:38Z,2016-02-26T08:19:17Z,2016-03-09T00:56:59Z,MERGED,True,5,4,1,https://github.com/tve,fix #809 esp8266 socket close,1,[],https://github.com/espruino/Espruino/pull/811,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/811#issuecomment-194046397,"I have not done extensive testing, but it does fix the issue as far as I can tell.","I'm not sure of this is related, I'm getting this:
 1v85 Copyright 2016 G.Williams
Espruino is Open Source. Our work is supported
only by sales of official boards and donations:
http://espruino.com/Donate
WARNING: the esp8266 port is in beta!
Flash map 4MB:512/512, manuf 0xe0 chip 0x4016
>echo(0);
=undefined
> server.listen(80);
ERROR: Unable to create socket
=undefined
>require('ESP8266').printLog()
ted socket 10 inbound to port 80 from 192.168.15.41:55217
202082> net_esp8266: accepted socket 11 inbound to port 80 from 192.168.15.41:55220
223065> net_esp8266: error -15 creating listening socket 12: ESPCONN_ISCONN
240000> Wed Mar 09 00:52:37 2016, heap: 1872
=undefined

I think I have the patch above.:
>process.env
={
  ""VERSION"": ""1v85"",
  ""BUILD_DATE"": ""Feb 26 2016"",
  ""BUILD_TIME"": ""08:21:56"",
  ""GIT_COMMIT"": ""a9f4524670426b5856a6aaf14426fec2d325a486"",
  ""BOARD"": ""ESP8266_BOARD"",
  ""CHIP"": ""ESP8266"",",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/818,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/818#issuecomment-196213727,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","Cool - thanks! Just wondering, do you think this is worth merging into the main Docker file? It wouldn't take that much longer to complete, and then there would be one system that would be capable of compiling every Espruino firmware?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/urish,3,https://github.com/espruino/Espruino/pull/818#issuecomment-196216438,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","That makes sense, though, it might break it some point if the s3.voneicken.com links become invalid.
Your call :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/818#issuecomment-196228863,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","Well, I'll just pull this in for now. Maybe someone will care about it in the future. I should probably just make a GitHub repo with those files in...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/818#issuecomment-196230946,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","esp_iot_sdk_v1.5.0
curl -Ls http://bbs.espressif.com/download/file.php?id=989 | tar -xvf -
liblwip_536_for_ESP8266_NONOS_SDK_V1.5.0.zip
wget --content-disposition ""http://bbs.espressif.com/download/file.php?id=1021""",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/818#issuecomment-196262644,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266",What's that for? I'm more confident in @tve's server than I am in bbs.espressif.com :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/818#issuecomment-197059307,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266",That is the source where tve has pulled his one from,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,818,2016-03-13T21:54:13Z,2016-03-14T09:43:14Z,2016-04-02T17:22:16Z,MERGED,True,23,0,1,https://github.com/urish,Create a Dockerfile for the ESP8266 build,1,[],https://github.com/espruino/Espruino/pull/818,https://github.com/tve,8,https://github.com/espruino/Espruino/pull/818#issuecomment-204761317,"This docker file contains both the Espressif SDK and the xtensa tools, and makes it super-easy to create builds for ESP8266","s3.voneicken.com is a CNAME for a bucket in AWS S3, so you will have better luck than downloading from china...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/820,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/820#issuecomment-198858493,,"cant remember, is it needed ?
@gfwilliams: please double check and then remove
//attribute((aligned(4)))",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/820#issuecomment-199097590,,"@MaBecker  - yes the attribute((aligned(4))) is required.
It makes sure that the strings/arrays start on a 4 byte boundary",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/820#issuecomment-199098561,,"This is a little cleaner:
Line 49:
#define FLASH_STR(name, x) static char name[] __attribute__((section("".irom.literal""))) 
__attribute__((aligned(4))) = x

#define IN_FLASH_MEMORY   __attribute__ ((section("".irom.literal""))) __attribute__((aligned(4)))
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/820#issuecomment-199101989,,"I've noticed the travis builds are failing on the other commits. The non-ESP8266 branch of the code needs to have the empty #define made #define IN_FLASH_MEMORY :
#if defined(ESP8266)

/** Place constant strings into flash when we can in order to save RAM space. Strings in flash
    must be accessed with word reads on aligned boundaries, so we'll have to copy them before
    regular use. */
#define IN_FLASH_MEMORY   __attribute__ ((section("".irom.literal""))) __attribute__((aligned(4)))
//#define FLASH_STR(name, x) static char name[] __attribute__((section("".irom.literal""))) __attribute__((aligned(4))) = x
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x

/// Get the length of a string in flash
size_t flash_strlen(const char *str);

/// Copy a string from flash to RAM
char *flash_strncpy(char *dest, const char *source, size_t cap);

/** Read a uint8_t from this pointer, which could be in RAM or Flash.
    On ESP8266 you have to read flash in 32 bit chunks, so force a 32 bit read
    and extract just the 8 bits we want */
#define READ_FLASH_UINT8(ptr) ({ uint32_t __p = (uint32_t)(char*)(ptr); volatile uint32_t __d = *(uint32_t*)(__p & (uint32_t)~3); $

#else

#define IN_FLASH_MEMORY
/** Read a uint8_t from this pointer, which could be in RAM or Flash.
    On ARM this is just a standard read, it's different on ESP8266 */
#define READ_FLASH_UINT8(ptr) (*(uint8_t*)(ptr))

An the last macro defined for the non-esp8266 case, means that the code can be written once, without the conditional block:
So instead of:
+#if defined(ESP8266)
 +    verts[idx+0] = (short)(x1+(((READ_FLASH_UINT8(&vectorFontPolys[vertOffset+i+0])&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));
 +    verts[idx+1] = (short)(y1+(((READ_FLASH_UINT8(&vectorFontPolys[vertOffset+i+1])&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));
 +#else
      verts[idx+0] = (short)(x1+(((vectorFontPolys[vertOffset+i+0]&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));
      verts[idx+1] = (short)(y1+(((vectorFontPolys[vertOffset+i+1]&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));
 +#endif    

This can be written:
 verts[idx+0] = (short)(x1+(((READ_FLASH_UINT8(&vectorFontPolys[vertOffset+i+0])&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));
 +    verts[idx+1] = (short)(y1+(((READ_FLASH_UINT8(&vectorFontPolys[vertOffset+i+1])&0x7F)*size+(VECTOR_FONT_POLY_SIZE/2))/VECTOR_FONT_POLY_SIZE));",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/820#issuecomment-199166775,,"attribute((aligned(4))) is not needed because this has to be 2 byte, check details in issue 770
all my tests were based on
#if defined(ESP8266)
#define IN_FLASH_MEMORY __attribute__ ((section("".irom.literal""))) //__attribute__((aligned(4))) 
#else
#define IN_FLASH_MEMORY 
#endif
#define READ_FLASH_UINT16(ptr) (READ_FLASH_UINT8(ptr) | (READ_FLASH_UINT8(((char*)ptr)+1)<<8) )  

sorry for confusion
thanks for the code improvement for graphics.c
@gfwilliams please decide how to implement",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/820#issuecomment-199168449,,"Ah ok.
Then perhaps we need to have macros for flash, and another for alignment?
How about (To keep short):
#define IROM   .....
#define ALIGN4
And then these could get stacked?
However I'm not sure that you can drop the alignment of 4, as I think it needs to start on a 4 byte boundary..",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/820#issuecomment-199710401,,"Sorry for the delay responding to this - I'm actually on holiday this week, but I'll merge all this in when I get back on Tuesday next week.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,820,2016-03-20T04:49:10Z,2016-03-29T08:44:17Z,2016-03-29T08:46:16Z,MERGED,True,8,0,1,https://github.com/MaBecker,add IN_FLASH_MEMORY  for esp,1,[],https://github.com/espruino/Espruino/pull/820,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/820#issuecomment-202781032,,"Merged in... I kept the align (while not needed here, it would be needed if you were to use IN_FLASH_MEMORY for something that was 32 bits)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,821,2016-03-20T04:58:00Z,2016-03-29T08:44:17Z,2016-03-29T08:44:17Z,MERGED,True,6,1,1,https://github.com/MaBecker,if ESP8266 move LCD_FONT_4X6[] to flash and read from flash,1,[],https://github.com/espruino/Espruino/pull/821,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/821,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,822,2016-03-20T05:01:17Z,2016-03-29T08:44:36Z,2016-03-29T08:44:36Z,CLOSED,False,2,1,1,https://github.com/MaBecker,if ESP8266 move vectorFontPolys[] for flash,1,[],https://github.com/espruino/Espruino/pull/822,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/822,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,822,2016-03-20T05:01:17Z,2016-03-29T08:44:36Z,2016-03-29T08:44:36Z,CLOSED,False,2,1,1,https://github.com/MaBecker,if ESP8266 move vectorFontPolys[] for flash,1,[],https://github.com/espruino/Espruino/pull/822,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/822#issuecomment-202780707,,Manually merged in,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,823,2016-03-20T05:07:15Z,2016-03-29T08:44:17Z,2016-03-29T08:44:17Z,MERGED,True,9,0,1,https://github.com/MaBecker,if ESP8266 read vectorFontPolys[] from flash,1,[],https://github.com/espruino/Espruino/pull/823,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/823,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/824,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*","I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/824#issuecomment-202766290,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*",@wilberforce any changes to ESP8266_BOARD.py ?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/824#issuecomment-202787781,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*",Thanks! Just merged. I took out the ifndef ESP8266 bit as I don't think it's needed (nothing seemed to use Crypto but not TLS).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/824#issuecomment-202821834,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*","@gfwilliams thanks!
@MaBecker - I guess the ESP8266_BOARD.py should have an update so the web ide knows that the Sha crypto functions are available. The docs should be updated too... Perhaps something mentioning that esp8266 can now do web sockets ;-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/824#issuecomment-202822857,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*","@MaBecker I tested a build with crypto and graphics - it still fits, although I did not try on a board.
I pushed the boat out and tried crypto, graphics and the file system lib, however this didn't fit ( pretty close mind)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,824,2016-03-29T06:12:03Z,2016-03-29T09:03:06Z,2016-03-29T10:36:39Z,MERGED,True,36,28,3,https://github.com/wilberforce,#define USE_AES to make SHAx functions available on ESP8266,2,[],https://github.com/espruino/Espruino/pull/824,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/824#issuecomment-202826309,"I have tested with the Linux build and the Esp8266 build.
The linux builds as before.
For the esp   ./build-crypto.sh:
#! /bin/bash
export ESP8266_BOARD=1
export FLASH_4MB=1
export USE_CRYPTO=1
export ESP8266_SDK_ROOT=/home/esp8266/Espruino/esp_iot_sdk_v1.5.0
export PATH=~/esp-open-sdk/xtensa-lx106-elf/bin:$PATH
export COMPORT=/dev/ttyUSB0
export release=1
make $*","Board.py already updated!
https://github.com/espruino/Espruino/blob/master/boards/ESP8266_BOARD.py",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/urbiworx,1,https://github.com/espruino/Espruino/pull/825,As discussed here: http://forum.espruino.com/conversations/281163/,As discussed here: http://forum.espruino.com/conversations/281163/,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/825#issuecomment-203337560,As discussed here: http://forum.espruino.com/conversations/281163/,"Thanks... In future though, could you add some documentation after the JSON to explain what the functions do - I'll add it now.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/urbiworx,3,https://github.com/espruino/Espruino/pull/825#issuecomment-204770330,As discussed here: http://forum.espruino.com/conversations/281163/,"Actually i did not want to create the impression that this is my work and I did state this in http://forum.espruino.com/conversations/281163/ , however you might be right I could have added an additional comment to the source to make it clear, sorry for that.
I did some further reading in the meantime and my understanding is now that I would have to trigger the force sleep method to add some use to the modem sleep method. I will try this out as soon as I have my usb meter or do you have a differing opinion on that?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/tve,4,https://github.com/espruino/Espruino/pull/825#issuecomment-204789133,As discussed here: http://forum.espruino.com/conversations/281163/,"modem_sleep is the default mode at boot time and it's not changed anywhere, so there's no point in switching to modem_sleep explicitly.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/urbiworx,5,https://github.com/espruino/Espruino/pull/825#issuecomment-204802590,As discussed here: http://forum.espruino.com/conversations/281163/,My idea would be to use wifi_fpm_open(); to force immediate modem sleep (after set modem sleep). So calling ESP8266.modemSleep() would then immediately start the modem sleep instead of occasionally starting it.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/tve,6,https://github.com/espruino/Espruino/pull/825#issuecomment-204810137,As discussed here: http://forum.espruino.com/conversations/281163/,"I'm not sure you understand modem sleep. In modem sleep mode, the esp8266 automatically turns off the receiver in STA mode between AP beacons according to the AP's DTIM setting. So with DTIM=3 you get 300ms periods of low power (~16mA) followed by short bursts of high power (70-200mA) as the esp8266 receives the beacon and checks whether it has anything to be received. All this happens automatically while in modem sleep mode.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/urbiworx,7,https://github.com/espruino/Espruino/pull/825#issuecomment-204923526,As discussed here: http://forum.espruino.com/conversations/281163/,"Ok, you are right, I did some further reading and agree that I had some misconceptions regarding the modem sleep. Thanks for taking the time and explaining it.
So the only further thing that could be implemented in the ESP8266 class would be lightSleep with external wake-up (as using a configurable wake up GPIO differs from the jshSleep concept)?
The jshSleep in jshardware.c itself (without external wake-up) could only be implemented when Espruino has an updated SDK containing the wifi_fpm_set_wakeup_cb method as far as I know.
Is my understanding correct so far?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/825#issuecomment-205182415,As discussed here: http://forum.espruino.com/conversations/281163/,"So what's the upshot of this? Pull out the 'light sleep' code, but leave deep sleep in there?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/tve,9,https://github.com/espruino/Espruino/pull/825#issuecomment-205369792,As discussed here: http://forum.espruino.com/conversations/281163/,"Yup, pull out the modem sleep code...
@urbiworx the current SDK version used by espruino does support forced light sleep.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/urbiworx,10,https://github.com/espruino/Espruino/pull/825#issuecomment-205665913,As discussed here: http://forum.espruino.com/conversations/281163/,"I have to agree with tve about the modemSleep - the only way that this would make sense would be to implement also the method noSleep (or comparable) which would turn of sleep completely at the ESP so you could turn it on again with modemSleep. However I could not find a usecase for turning off the sleep functionality, so that would also make no sense. Sorry for the confusion
@tve: Would an external lightSleep method like this following make any sense?
/*JSON{
 ""type""     : ""staticmethod"",
 ""class""    : ""ESP8266"",
 ""name""     : ""lightSleep"",
 ""generate"" : ""jswrap_ESP8266_lightSleep"",
 ""params""   : [
   [""pin"", ""pin"", ""Pin for wake up""],
   [""jsMode"", ""JsVar"", ""wake up mode""]
 ]
}*/
void   jswrap_ESP8266_lightSleep(Pin pin, JsVar *jsMode) {
    if (!jshIsPinValid(pin)) {
        jsExceptionHere(JSET_ERROR, ""Pin is not valid."");
        return;
    }
    if (!jsvIsInt(jsMode)) {
        jsExceptionHere(JSET_ERROR, ""Invalid mode."");
         return;
    }
    int mode = jsvGetInteger(jsMode);

    wifi_station_disconnect();
    wifi_set_opmode(NULL_MODE);    
    gpio_pin_wakeup_enable(GPIO_ID_PIN(pin),(GPIO_INT_TYPE) mode);
    wifi_set_sleep_type(LIGHT_SLEEP_T);
    wifi_fpm_open();
}

Please note that I did not try it out yet. Just wanted to make sure something like that would be usable before I invest too much effort.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/825#issuecomment-205678297,As discussed here: http://forum.espruino.com/conversations/281163/,"Ideally this should be part of jshSleep - the idea of Espruino is to be able to sleep automatically where possible.
If there's no network connection, no timer, and one watch then it could just do this?
Although I wonder whether it doesn't do something like this already? The RTOS should be aware of when it is busy and when it isn't...
At the end of the day, space in flash is getting tight, and there's no point just adding functionality because you can. It's got to actually be stuff that will get used.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,825,2016-03-29T18:18:57Z,2016-03-30T09:12:00Z,2016-04-05T15:34:05Z,MERGED,True,33,0,2,https://github.com/urbiworx,Added deepSleep and modemSleep,1,[],https://github.com/espruino/Espruino/pull/825,https://github.com/tve,12,https://github.com/espruino/Espruino/pull/825#issuecomment-205860415,As discussed here: http://forum.espruino.com/conversations/281163/,"LIght sleep indeed needs to be integrated with jshSleep and the idle loop 'cause it takes effect when the idle loop returns to the RTOS dispatch and not immediately when wifi_fpm_open is called. It's definitely useful but needs some serious work & testing, which is why I haven't implemented it...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/826,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/826#issuecomment-203483765,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","I can't take this, as it'll break all other platforms (by putting the vector font into RAM!).
Have you checked that your code isn't different from what's in Git at the moment? It builds just fine for me here (with Graphics), and travis seems happy with it too: https://travis-ci.org/espruino/Espruino",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/826#issuecomment-203484342,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^",I take that back - travis isn't happy. But I wonder what's different... Has @tve updated the compiler? at the download links? I'm still using one from a few months ago.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/tve,4,https://github.com/espruino/Espruino/pull/826#issuecomment-203484700,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","absolutely no change on my end. Looks like a legit error, doesn't it? Sounds like multiple conflicting compiler directives to set the storage section for the same variable, or something like that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/826#issuecomment-203487090,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^",Strange. Just reproduced it - but it only happens with RELEASE=1!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/826#issuecomment-203490590,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","Ok, looks like this is actually because of LCD_FONT_4X6 not being const, rather than because the other one was. Just committing a fix now.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/826#issuecomment-203526369,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","new clone
export ESP8266_BOARD=1
export FLASH_4MB=1
export ALT_RELEASE=MaBe
export ESP8266_SDK_ROOT=/esptools/esp_iot_sdk_v1.5.0
export PATH=$PATH:/esptools/esp-open-sdk/xtensa-lx106-elf/bin/
export COMPORT=/dev/cu.usbserial
make  works
using  DISABLE_LTO=1 to check  what is stored in flash
DISABLE_LTO=1 make
In file included from libs/graphics/graphics.c:18:0:
libs/graphics/vector_font.h:2696:29: error: vectorFonts causes a section type conflict with flash_X
static const VectorFontChar vectorFonts[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^
cc1: warning: unrecognized command line option ""-Wno-float-conversion"" [enabled by default]
cc1: warning: unrecognized command line option ""-Wno-discarded-qualifiers"" [enabled by default]
make: *** [libs/graphics/graphics.o] Error 1
make: *** Waiting for unfinished jobs....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/826#issuecomment-203528078,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^",try now,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,826,2016-03-30T14:43:50Z,2016-03-30T15:37:37Z,2016-03-30T17:06:40Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update vector_font.h,1,[],https://github.com/espruino/Espruino/pull/826,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/826#issuecomment-203529986,"have to remove  static const otherwise there is a conflict with FLASH_STR
libs/graphics/vector_font.h:18:28: error: vectorFontPolys causes a section type conflict with flash_X
static const unsigned char vectorFontPolys[] IN_FLASH_MEMORY = {
^
In file included from libs/graphics/graphics.h:18:0,
from libs/graphics/graphics.c:15:
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:233:16: note: 'flash_X' was declared here
FLASH_STR(flash_X, __STRING(X)); 
^
/Volumes/ESPTools/Espruino/1v85/master.new/src/jsutils.h:52:40: note: in definition of macro 'FLASH_STR'
#define FLASH_STR(name, x) static char name[] IN_FLASH_MEMORY = x
^
libs/graphics/graphics.c:102:3: note: in expansion of macro 'assert'
assert(data);
^","now it works again
5 .irom.literal 00001508  00000000  00000000  00000e50  2**2
CONTENTS, ALLOC, LOAD, READONLY, DATA
thanks !",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,827,2016-03-31T10:11:09Z,2016-03-31T11:20:11Z,2016-03-31T19:44:05Z,MERGED,True,43,17,1,https://github.com/wilberforce,Allow esp8266 > 1mb flash access via flash module,2,[],https://github.com/espruino/Espruino/pull/827,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/827,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,827,2016-03-31T10:11:09Z,2016-03-31T11:20:11Z,2016-03-31T19:44:05Z,MERGED,True,43,17,1,https://github.com/wilberforce,Allow esp8266 > 1mb flash access via flash module,2,[],https://github.com/espruino/Espruino/pull/827,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/827#issuecomment-203884511,,"Thanks! Do you think it's worth removing os_printf from flash read? The flash write is expected to be slow, but having a slower read could be annoying.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,827,2016-03-31T10:11:09Z,2016-03-31T11:20:11Z,2016-03-31T19:44:05Z,MERGED,True,43,17,1,https://github.com/wilberforce,Allow esp8266 > 1mb flash access via flash module,2,[],https://github.com/espruino/Espruino/pull/827,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/827#issuecomment-204096495,,Will do - Not sure how that got through! I'll do a couple of other tidy ups too,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,828,2016-04-01T00:42:37Z,2016-09-12T09:04:46Z,2016-09-12T09:04:46Z,CLOSED,False,99,0,2,https://github.com/urish,add `tone()` and `noTone()` for ESP8266,1,[],https://github.com/espruino/Espruino/pull/828,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/828,"Hi, I have implemented tone() and noTone() for the ESP8266 port.
I tested them on a WeMos D1 Mini device with a speaker connected, and they seem to produce the correct tones (I tested several frequency). The implementation uses the internal ESP8266 hardware timer (timer 1), and was inspired by ESP8266/Arduino.
I copied the Arduino code constants for setting up the timer interrupts as I haven't found any example of using the ESP8266 hardware timers inside Espruino, but I am pretty sure I missed something. Otherwise, I think that we can adopt esp8266_peri.h instead of defining all the constants inside the C file.
I would really love to see this merged, as I want to use Espruino in a demo I am giving in a talk next month in London.
Thoughts?","Hi, I have implemented tone() and noTone() for the ESP8266 port.
I tested them on a WeMos D1 Mini device with a speaker connected, and they seem to produce the correct tones (I tested several frequency). The implementation uses the internal ESP8266 hardware timer (timer 1), and was inspired by ESP8266/Arduino.
I copied the Arduino code constants for setting up the timer interrupts as I haven't found any example of using the ESP8266 hardware timers inside Espruino, but I am pretty sure I missed something. Otherwise, I think that we can adopt esp8266_peri.h instead of defining all the constants inside the C file.
I would really love to see this merged, as I want to use Espruino in a demo I am giving in a talk next month in London.
Thoughts?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,828,2016-04-01T00:42:37Z,2016-09-12T09:04:46Z,2016-09-12T09:04:46Z,CLOSED,False,99,0,2,https://github.com/urish,add `tone()` and `noTone()` for ESP8266,1,[],https://github.com/espruino/Espruino/pull/828,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/828#issuecomment-204280016,"Hi, I have implemented tone() and noTone() for the ESP8266 port.
I tested them on a WeMos D1 Mini device with a speaker connected, and they seem to produce the correct tones (I tested several frequency). The implementation uses the internal ESP8266 hardware timer (timer 1), and was inspired by ESP8266/Arduino.
I copied the Arduino code constants for setting up the timer interrupts as I haven't found any example of using the ESP8266 hardware timers inside Espruino, but I am pretty sure I missed something. Otherwise, I think that we can adopt esp8266_peri.h instead of defining all the constants inside the C file.
I would really love to see this merged, as I want to use Espruino in a demo I am giving in a talk next month in London.
Thoughts?","Hi - I'm afraid I don't want to take this in as-is - every version of Espruino does PWM output (including ESP8266) using analogWrite - adding a new function called tone that does the same thing in a slightly different way would just be confusing.
Could you have a go at using your code to drive the Espruino utility timer? https://github.com/espruino/Espruino/blob/master/targets/esp8266/jshardware.c#L1092
So call jstUtilTimerInterruptHandler from your interrupt routine. If you do that, you'll get proper PWM on any pin (even at once), using analogWrite. It'll also do Waveform input and output - so would be a huge improvement all around (the existing util timer code isn't preemptive, so is useless for doing PWM at higher speeds)",True,{'THUMBS_UP': ['https://github.com/tve']}
espruino/Espruino,https://github.com/espruino/Espruino,828,2016-04-01T00:42:37Z,2016-09-12T09:04:46Z,2016-09-12T09:04:46Z,CLOSED,False,99,0,2,https://github.com/urish,add `tone()` and `noTone()` for ESP8266,1,[],https://github.com/espruino/Espruino/pull/828,https://github.com/urish,3,https://github.com/espruino/Espruino/pull/828#issuecomment-204367533,"Hi, I have implemented tone() and noTone() for the ESP8266 port.
I tested them on a WeMos D1 Mini device with a speaker connected, and they seem to produce the correct tones (I tested several frequency). The implementation uses the internal ESP8266 hardware timer (timer 1), and was inspired by ESP8266/Arduino.
I copied the Arduino code constants for setting up the timer interrupts as I haven't found any example of using the ESP8266 hardware timers inside Espruino, but I am pretty sure I missed something. Otherwise, I think that we can adopt esp8266_peri.h instead of defining all the constants inside the C file.
I would really love to see this merged, as I want to use Espruino in a demo I am giving in a talk next month in London.
Thoughts?","Hi @gfwilliams, thanks for the feedback!
I will have a go at using my code to drive the Espruino utility timer and send another PR.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,828,2016-04-01T00:42:37Z,2016-09-12T09:04:46Z,2016-09-12T09:04:46Z,CLOSED,False,99,0,2,https://github.com/urish,add `tone()` and `noTone()` for ESP8266,1,[],https://github.com/espruino/Espruino/pull/828,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/828#issuecomment-246289449,"Hi, I have implemented tone() and noTone() for the ESP8266 port.
I tested them on a WeMos D1 Mini device with a speaker connected, and they seem to produce the correct tones (I tested several frequency). The implementation uses the internal ESP8266 hardware timer (timer 1), and was inspired by ESP8266/Arduino.
I copied the Arduino code constants for setting up the timer interrupts as I haven't found any example of using the ESP8266 hardware timers inside Espruino, but I am pretty sure I missed something. Otherwise, I think that we can adopt esp8266_peri.h instead of defining all the constants inside the C file.
I would really love to see this merged, as I want to use Espruino in a demo I am giving in a talk next month in London.
Thoughts?",Closing this as inactive now.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,829,2016-04-01T06:34:15Z,2016-04-01T06:42:28Z,2016-04-01T06:42:28Z,MERGED,True,3,3,1,https://github.com/wilberforce,flash > 1Mb,1,[],https://github.com/espruino/Espruino/pull/829,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/829,Dooh,Dooh,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,829,2016-04-01T06:34:15Z,2016-04-01T06:42:28Z,2016-04-01T06:42:28Z,MERGED,True,3,3,1,https://github.com/wilberforce,flash > 1Mb,1,[],https://github.com/espruino/Espruino/pull/829,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/829#issuecomment-204272697,Dooh,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/835,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/835#issuecomment-205746429,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","This looks very wrong to me... jshGetPinStateIsManual returns a boolean, so should not be compared with JSHPINSTATE_GPIO_OUT.
This should have produced a warning when compiling really.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/835#issuecomment-205752078,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","So I misunderstood this doc:
https://github.com/espruino/Espruino/wiki/Architecture-of-GPIO
What I want to do is to set the given pin to output if not set to output by code
make_output.txt",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/835#issuecomment-205755360,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","That is exactly what:
 if (!jshGetPinStateIsManual(pin))
      jshPinSetState(pin, JSHPINSTATE_GPIO_OUT);

(The existing code) does. Just like would happen for digitalWrite.
So this should work fine.
You don't want it to set the output mode to OUT always, because there are very good reasons for wanting to use OUT_OPENDRAIN sometimes (especially with WS2811);",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/835#issuecomment-205760308,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","code was working fine with IDE, when using save() power off/on, the code was only working after adding e.g. pinMode(D4,""output""), this is the reason why I started changing this.
I guess the difference is with the pinMode settings to ""input"" after power up
so it should be
if ( jshPinGetState(pin) != JSHPINSTATE_GPIO_OUT)
     jshPinSetState(pin, JSHPINSTATE_GPIO_OUT);",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,835,2016-04-05T10:25:40Z,2016-04-05T11:24:03Z,2016-04-05T11:24:03Z,CLOSED,False,1,1,1,https://github.com/MaBecker,Update jswrap_esp8266.c,1,[],https://github.com/espruino/Espruino/pull/835,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/835#issuecomment-205762242,"make sure neopixelWrite() is working even if pinMode(pin,""output"") is missing in coding.","Do you have the same issue with digitalWrite? (you should do)
It could be a problem with jshGetPinStateIsManual not getting reset when the device restarts?
As I said above, setting to GPIO_OUT regardless is not a good solution. If you run WS2812 off of full 5v then you can't use 3.3v logic levels to drive them reliably, and have to use OUT_OPENDRAIN. Your changes would make it impossible to do that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/841,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.","#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/841#issuecomment-210904233,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.","@tve

Is there a reason you created another section as opposed to reusing the same as the FLASH_STR macro?

I was trying to minimise the changes to the generator code and had a conflict  in the linker when the const keyword was used.
Using this:
#define IROM_CONST __attribute__((section("".irom.literal""))) __attribute__((aligned(4)))
LD espruino_esp8266_partial.o
targets/esp8266/esp8266_board_utils.c:44:1: error: __ESPCONN_MEM causes a section type conflict with jswSymbols_process
 FLASH_STR(__ESPCONN_MEM, ""ESPCONN_MEM"");
 ^
gen/jswrapper.c:1087:24: note: 'jswSymbols_process' was declared here
 static const JswSymPtr jswSymbols_process[] IROM_CONST = {
                        ^
lto-wrapper: xtensa-lx106-elf-gcc returned 1 exit status

This can be avoided by dropping the const keyword here:
static const JswSymPtr jswSymbols_E[] IROM_CONST = {
static JswSymPtr jswSymbols_E[] IROM_CONST = {
However this would either need a macro in scripts/build_jswrapper.py and I could not work out how to make the generator conditional on the board, and I thought @gfwilliams would prefer not to have conditional code for one board.
Do you know another way of avoiding error: __ESPCONN_MEM causes a section type conflict with jswSymbols_process without creating a new section?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/tve,3,https://github.com/espruino/Espruino/pull/841#issuecomment-210965751,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.",You do need the two section as I've discovered myself. Sorry for the question.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/841#issuecomment-211250284,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.","@tve @wilberforce  I had a build error on the ESP8266 branch with the const keyword last week I think - the issue wasn't that stuff had the const keyword, but that _something else was being put into read-only memory that _didn't* have the const keyword*.
If you find what variable it is and whack  const on it, the issue should go away...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/841#issuecomment-215045113,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.","@gfwilliams Help! - I'm struggling here.
I want to revert the changes made at 95f5d97 so I can pull @tve changes made that have been merged back into the master.
At this stage I'm ready to dump everything in this pull request and re-create it.
Is there a way to un-pull and revert my fork before these changes?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,841,2016-04-13T10:34:45Z,2016-04-28T08:49:43Z,2016-04-28T08:49:43Z,CLOSED,False,352,247,12,https://github.com/wilberforce,jsvObjectSetChildAndUnLock string constants to Flash for ESP8266,8,[],https://github.com/espruino/Espruino/pull/841,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/841#issuecomment-215048714,"#697 (comment)
The  do { ... } while (0) trick, reduced the changes quite considerably.
This yields about 600 bytes or so of heap - which goes a long way to reducing memory issues when you try to use web sockets on this board.","Well, you can definitely do git cherry-pick on a new branch in order to pull in your changes that weren't the one you wanted - there'll be a bunch of info online.
But - how much does memory this really save now? Surely now @tve's changes are in, the need to grab a few extra bytes isn't as high - I'm not a huge fan of what you've done with ota.c - it just seems like it's really obfuscated what's there for the sake of 100 bytes or so.
Next PR will be to change GetChildAndUnLock, then jsvNewFromString, then strcpy, and slowly the whole of Espruino's source is getting these random #define ESP8266 all over it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,1,https://github.com/espruino/Espruino/pull/843,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,2,https://github.com/espruino/Espruino/pull/843#issuecomment-211198813,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?",LGTM,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,3,https://github.com/espruino/Espruino/pull/843#issuecomment-211772099,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","I'll revisit the PR according to comments in the coming days, couldn't do it tonight...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,4,https://github.com/espruino/Espruino/pull/843#issuecomment-212745860,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?",It turned out that the ESP version of the binary search could be used straight for other platforms with just a tad extra ifdefing. So now there's only one version :-). I briefly tested the linux version but it would be good for someone to test the ARM version to make sure I didn't break anything obvious.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/843#issuecomment-213596917,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","The Travis checks have passed, is it just a case of uploading the Travis build to a real espurino board?
How about posting to a forum and asking someone to check?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,6,https://github.com/espruino/Espruino/pull/843#issuecomment-213658112,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?",LGTM,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/843#issuecomment-213975933,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","@wilberforce @tve I can run tests, please send a link to download that build or source .",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/wilberforce,8,https://github.com/espruino/Espruino/pull/843#issuecomment-214053640,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","@MaBecker
lastest travis builds:
http://www.espruino.com/binaries/travis/master/",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/843#issuecomment-214179532,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","@wilberforce  got it, start testing now",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/843#issuecomment-214198108,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","That's great - thanks!
It's probably fine to merge now?
IMO it'd still be nice to have a jsvNewFromFlashString function though - it's a bit horrible in jswrap_object, and is a pattern that I expect will get repeated in the future :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/MaBecker,11,https://github.com/espruino/Espruino/pull/843#issuecomment-214229211,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","@gfwilliams, this build works without  issues for me
tested:  wifi,  save code,E.on(), neopixel with graphics, serial  and tcp WEB IDE
@tve & @wilberforce  great work - thanks",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/tve,12,https://github.com/espruino/Espruino/pull/843#issuecomment-214435314,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","@MaBecker which platform did you test on?
@gfwilliams I'm done with changes. Someone else will have to tackle jsvNewFromFlashString, unfortunately, I need to get my Espruino based irrigation controller to work asap...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/MaBecker,13,https://github.com/espruino/Espruino/pull/843#issuecomment-214441270,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?",@tve  on ESP8266 12E,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/MaBecker,14,https://github.com/espruino/Espruino/pull/843#issuecomment-214528757,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","extended testing for this build and figured out that my i2c oled app is not working correct  any more after power off/on.
I guess this is a side effect of a different pull request as part in this travis build I am testing, that saves gpios states, check the console logs below.
This side effect is not part of espruino_1v85.tve_master_cee7141_esp8266.
Soure code  and some console output:
/* esp8266 12E 4MB

travis build 

espruino_esp8266_user1.bin  23-Apr-2016 04:05   448K

_____                 _
|   __|___ ___ ___ _ _|_|___ ___
|   __|_ -| . |  _| | | |   | . |
|_____|___|  _|_| |___|_|_|_|___|
          |_| http://espruino.com
 1v85.97 Copyright 2016 G.Williams
Espruino is Open Source. Our work is supported
only by sales of official boards and donations:
http://espruino.com/Donate
Flash map 4MB:512/512, manuf 0xe0 chip 0x4016
>dump();
pinMode(D0, ""input_pullup"");
pinMode(D4, ""input_pullup"");
pinMode(D5, ""input_pullup"");
pinMode(D12, ""input_pullup"");
pinMode(D13, ""input_pullup"");
pinMode(D14, ""input_pullup"");
pinMode(D15, ""input_pullup"");
=undefined

*/

// 0.91 OLED from adafruit,5pin GND,VCC,RST,SCL,SDA 

I2C1.setup({sda:D4,scl:D5});

function start(){
 g.drawString(""Hello OLED !-!"",2,2);
 g.flip(); 
}

var g = require(""SSD1306"").connect(I2C1,start,{height:32,rst:D12});

save();

E.on(""init"",start);

/*
*** after power off and on ***
Erasing Flash.....
Writing........
Compressed 25600 bytes to 5155
Checking...
DERROR: No ACK
ERROR: No ACK
ERROR: No ACK
ERROR: No ACK
ERROR: No ACK
ERROR: No ACK
.....
*/

/*
>dump();
function start() {g.drawString('Hello OLED !-!',2,2),g.flip();}
var g = Object.create(g.__proto__.constructor[""prototype""]);
g.buffer = new ArrayBuffer([.....]);
g.flip = function () {h.forEach(function(a){b.writeTo(d,[0,a])});var a=new Uint8Array(129);a[0]=64;for(var c=0;c<this.buffer.length;c+=128)a.set(new Uint8Array(this.buffer,c,128),1),b.writeTo(d,a)};
g.setContrast = function (a) {b.writeTo(d,0,129,a)};
E.on(""init"", start);
I2C1.setup({""sda"":D4,""scl"":D5});
pinMode(D0, ""input_pullup"");

---> digitalWrite(D12, 0);   <----  why is that and why 0 and not 1 ?

pinMode(D13, ""input_pullup"");
pinMode(D14, ""input_pullup"");
pinMode(D15, ""input_pullup"");
=undefined",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/gfwilliams,15,https://github.com/espruino/Espruino/pull/843#issuecomment-214649235,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","Your code should never have worked properly - you need to call var g = require(""SSD1306"").connect... in onInit, because it sends I2C commands to initialise the display.
D12 is probably set to 0 because the code was halfway through resetting the OLED when you called save",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,843,2016-04-17T07:33:40Z,2016-04-26T07:18:30Z,2016-04-26T07:18:43Z,MERGED,True,369,54,21,https://github.com/tve,move jswSymbol tables to flash on esp8266; also create Telnet serial device,19,[],https://github.com/espruino/Espruino/pull/843,https://github.com/gfwilliams,16,https://github.com/espruino/Espruino/pull/843#issuecomment-214649374,"This PR is not ready to merge
I believe I need to clean-up the following:

add changelog entries
keep JswSymPtr and JswSymList packed on non-esp8266
clean-up src/jswrap_object.c so non-esp8266 platforms don't do the extra string copy

Anything else that jumps out?","Merging this in now,,,",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/850,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/850#issuecomment-215617225,,"The websocket errors were out of memory:
{ ""setpoint"": 24 }
ERROR: Out of Memory!
Execution Interrupted during event processing.
at line 1 col 18

Increasing vars to 1700 fixes this.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/tve,3,https://github.com/espruino/Espruino/pull/850#issuecomment-215642686,,"I don't really understand all this. The problem you were having is running out of jsvars. You could have increased jsvars to 1700 and even 1800 without moving 1KB of additional strings to flash. 100 jsvars takes 1600 bytes of space...
Also, moving js code to flash could have freed up jsvars for the websocket buffers without even increasing beyond 1600.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/850#issuecomment-215644154,,"As @tve says, ERROR: Out of Memory! is from running out of variable storage - not heap.
You could probably get around it just by removing some comments from your code or minifying it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/850#issuecomment-215651636,,"Thanks - and sorry, I just saw the other post about lto :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/850#issuecomment-215652081,,Just merging - but I think there might be some confusion about what the Out of Memory error means... There are probably easier ways around it :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/850#issuecomment-215652741,,"You could have increased jsvars to 1700 and even 1800 without moving 1KB of additional strings to flash. 100 jsvars takes 1600 bytes of space...

If you increase js vars, doesn't this steal from RAM? So by adding strings to flash, that makes up for the increase in jsvars?

Also, moving js code to flash could have freed up jsvars for the websocket buffers without even increasing beyond 1600.

I don't think that it was websocket buffers that were the issue. What was happening was the interpreter was running out of memory, and then things started to fail. The first thing that happens is timeouts fail, and things start falling apart!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,8,https://github.com/espruino/Espruino/pull/850#issuecomment-215653331,,"Just merging - but I think there might be some confusion about what the Out of Memory error means... There are probably easier ways around it :)

Probably - I thinking I'm pushing the envelope with what can be done on an ESP8266 running Espruino - I have a pid module to clean up and submit next. I figure that on a board that has such little RAM, the more the interpreter has the better ;-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/850#issuecomment-215662354,,"Yes, absolutely - however in Espruino the interpreter doesn't use the heap at all, and only uses the stack and the memory that's in JsVars. The heap is basically just used by the ESP8266 side of things - so your problems stem from the number of variables available.
There are almost certainly some things you can do with your JS code that would let you cram it in to a much smaller space :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/tve,10,https://github.com/espruino/Espruino/pull/850#issuecomment-215744591,,"Ughh, it's probably OK to disable LTO, but then it would have been good to revert all the makefile pre-linking that went with it, the special disable_lto #define, and to update the Makefile with some comments about the why.
When I added LTO to the linking the idea was to use -O2 or -O3 where it makes a significant difference and enables the inlining. No inlining of functions in jsutils.c without... But then we discovered that -O3 results in way too much code explosion and -O2 isn't really faster than -Os but results in more code. So I ended up with -Os where LTO doesn't provide much benefit (some sharing of string constants, probably).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,11,https://github.com/espruino/Espruino/pull/850#issuecomment-216035179,,"The testing I did removing the lto flags did very little to the files size, only adding a couple of 100 bytes per section. There is still the lto fat switch in place for the regular build, however removing this flag makes no change to the final binary sizes, so I guess it would be safe to remove. I can remove the lto flags and #define completely, if you think that is the best way to go.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,12,https://github.com/espruino/Espruino/pull/850#issuecomment-216035465,,"Increasing from 1700 to 1900 vars seems to be ok with this build:
process.memory();
={ ""free"": 601, ""usage"": 1299, ""total"": 1900, ""history"": 4 }
require(""ESP8266"").getState();
={
""sdkVersion"": ""1.5.0"",
""cpuFrequency"": 160, ""freeHeap"": 5704, ""maxCon"": 10,
""flashMap"": ""4MB:512/512"",
""flashKB"": 4096,
""flashChip"": ""0xe0 0x4016""
}

It seems stable enough to to support http fetches, and works as a web socket server, with 2 clients, so the network traffic memory usage does not appear to be hindered.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/MaBecker,13,https://github.com/espruino/Espruino/pull/850#issuecomment-216040964,,"""freeHeap"": 5704 is too small",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/tve,14,https://github.com/espruino/Espruino/pull/850#issuecomment-216051192,,"In order to do LTO I had to do the whole prelinking step. If you're removing LTO you should simplify the linking again: https://github.com/espruino/Espruino/blob/master/Makefile#L1705-L1712
And yes, I can't use a system with 5700 bytes of heap, it crashes pretty soon.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,15,https://github.com/espruino/Espruino/pull/850#issuecomment-216091330,,"""freeHeap"": 5704 is too small
@MaBecker

To small for what? This was the size of heap pre @tve 's updates when the vars were 1400. As has been pointed out by Gordon, there appears to be confusion over ""OUT OF MEMORY"" errors. These are running out of JSvars as the interpreter itself does not use Heap - only the Wifi and network side use heap.
In my testing, this amount of heap seemed sufficient - your use case will be different - Have you tried a build with 1900 vars?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/tve,16,https://github.com/espruino/Espruino/pull/850#issuecomment-216095961,,"Too small for reliable use. Several others and myself experienced intermittent crashes due to running out of heap. If you turn on AP and STA at the same time it will crash, etc. Part of why I spent the effort to get the jsw symbols into flash is to have enough heap available so espruino is reliable.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,850,2016-04-29T02:32:15Z,2016-04-29T07:53:22Z,2017-03-10T22:42:49Z,MERGED,True,40,2,5,https://github.com/wilberforce,"move shaX.c constants to flash, 1072 bytes additional heap",4,[],https://github.com/espruino/Espruino/pull/850,https://github.com/wilberforce,17,https://github.com/espruino/Espruino/pull/850#issuecomment-216096394,,"@tve - Thanks. What do you think the minimum workable heap size is then?
I'm still getting OUT OF MEMORY with 1700 vars (even after minifying source)- trying to find the sweet spot here!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,867,2016-06-17T09:40:06Z,2016-06-17T09:47:09Z,2016-06-17T10:15:50Z,MERGED,True,87,12,4,https://github.com/jumjum123,Add options for make process,1,[],https://github.com/espruino/Espruino/pull/867,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/867,"Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES","Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,867,2016-06-17T09:40:06Z,2016-06-17T09:47:09Z,2016-06-17T10:15:50Z,MERGED,True,87,12,4,https://github.com/jumjum123,Add options for make process,1,[],https://github.com/espruino/Espruino/pull/867,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/867#issuecomment-226727644,"Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,867,2016-06-17T09:40:06Z,2016-06-17T09:47:09Z,2016-06-17T10:15:50Z,MERGED,True,87,12,4,https://github.com/jumjum123,Add options for make process,1,[],https://github.com/espruino/Espruino/pull/867,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/867#issuecomment-226728488,"Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES","Turns out, after all that just putting a comment in rather than a print breaks the build - at least for me.
Did this work for you? I've just committed a fix so it builds on mine.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,867,2016-06-17T09:40:06Z,2016-06-17T09:47:09Z,2016-06-17T10:15:50Z,MERGED,True,87,12,4,https://github.com/jumjum123,Add options for make process,1,[],https://github.com/espruino/Espruino/pull/867,https://github.com/jumjum123,4,https://github.com/espruino/Espruino/pull/867#issuecomment-226730617,"Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES","Hmm, there must have been a wrong sequence in my testing.
Sorry for that.
BTW, just checked your fix, sometimes its crazy how things can be fixed ;-)
On Fri, Jun 17, 2016 at 11:50 AM, Gordon Williams notifications@github.com
wrote:

Turns out, after all that just putting a comment in rather than a print
breaks the build - at least for me.
Did this work for you? I've just committed a fix so it builds on mine.
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#867 (comment),
or mute the thread
https://github.com/notifications/unsubscribe/AB-GnjRXn2Bbt2sem2-9oAwQuGEqaO2Gks5qMm3fgaJpZM4I4MW_
.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,867,2016-06-17T09:40:06Z,2016-06-17T09:47:09Z,2016-06-17T10:15:50Z,MERGED,True,87,12,4,https://github.com/jumjum123,Add options for make process,1,[],https://github.com/espruino/Espruino/pull/867,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/867#issuecomment-226733536,"Adds customizing options, see description in makefile.
Idea is to support userdefined make of firmware

GENDIR
SETDEFINES
UNSUPPORTEDMAKE
PROJECTNAME
BLACKLIST
VARIABLES","I know, it's a pretty awful fix... There didn't seem to be a nice way of doing it short of adding a no-op function (maybe the Print would have been better ;)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,868,2016-06-23T10:59:22Z,2016-06-23T11:35:31Z,2016-06-23T11:35:31Z,MERGED,True,2,2,1,https://github.com/MaBecker,replace jsError() with jsExceptionHere(),1,[],https://github.com/espruino/Espruino/pull/868,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/868,enable try { }  and catch(err) { } for read and write to I2C devices,enable try { }  and catch(err) { } for read and write to I2C devices,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,868,2016-06-23T10:59:22Z,2016-06-23T11:35:31Z,2016-06-23T11:35:31Z,MERGED,True,2,2,1,https://github.com/MaBecker,replace jsError() with jsExceptionHere(),1,[],https://github.com/espruino/Espruino/pull/868,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/868#issuecomment-228023175,enable try { }  and catch(err) { } for read and write to I2C devices,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,872,2016-07-08T19:56:58Z,2016-07-15T03:55:48Z,2016-07-15T03:55:48Z,CLOSED,False,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/872,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/872,lost pingOpt.ip,lost pingOpt.ip,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,872,2016-07-08T19:56:58Z,2016-07-15T03:55:48Z,2016-07-15T03:55:48Z,CLOSED,False,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/872,https://github.com/tve,2,https://github.com/espruino/Espruino/pull/872#issuecomment-231459872,lost pingOpt.ip,"This line needs to be moved to the top, not just removed. I have a fix coming, but I'm testing a bunch of other stuff as well.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,872,2016-07-08T19:56:58Z,2016-07-15T03:55:48Z,2016-07-15T03:55:48Z,CLOSED,False,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/872,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/872#issuecomment-231474526,lost pingOpt.ip,"check the global at line 102
101  // Global data structure for ping request
102  static struct ping_option pingOpt;",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,872,2016-07-08T19:56:58Z,2016-07-15T03:55:48Z,2016-07-15T03:55:48Z,CLOSED,False,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/872,https://github.com/tve,4,https://github.com/espruino/Espruino/pull/872#issuecomment-231509053,lost pingOpt.ip,I mean: tve@c7cd61c,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,872,2016-07-08T19:56:58Z,2016-07-15T03:55:48Z,2016-07-15T03:55:48Z,CLOSED,False,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/872,https://github.com/tve,5,https://github.com/espruino/Espruino/pull/872#issuecomment-232854222,lost pingOpt.ip,Redundant #874,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,1,https://github.com/espruino/Espruino/pull/873,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,2,https://github.com/espruino/Espruino/pull/873#issuecomment-231557776,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Didn't see this branch: https://github.com/espruino/Espruino/commits/nrf_bootloader. Anyways we pretty much did the same thing. Only differences were I updated linkers since there were some changes and included the new fstorage section. Also had __START definition fix and removed heap from the startup files. Also I didn't include some sub directories of SDK components/ that we don't use (I think just ANT and proprietary RF).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,3,https://github.com/espruino/Espruino/pull/873#issuecomment-231602982,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,closed because application is hard faulting and haven't found where problem is yet.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/873#issuecomment-231662148,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"Thanks for this - Pain about the hardfault though. Is it able to start Espruino at all, or it fails even before that?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,5,https://github.com/espruino/Espruino/pull/873#issuecomment-231662707,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Yeah I think it's at least getting to main. I haven't found where it's hard faulting yet though,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/873#issuecomment-231663345,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"Hmm - if more RAM is used now, it could be it's lack of stack that's doing it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,7,https://github.com/espruino/Espruino/pull/873#issuecomment-231664976,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"The stack size: https://github.com/mjdietzx/Espruino/blob/cfc4c7788088f6199e015e2d06c81cf3ce815e5f/targetlibs/nrf5x/nrf5_sdk/components/toolchain/gcc/gcc_startup_nrf52.s#L36 is more than enough (TODO: we should calculate how much stack we actually need, and can define __STACK_SIZE in ASM defines as well has heap so we don't have to modify startup files every-time. Is this already done at all, or should I make an issue?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/873#issuecomment-231666008,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"Well, the stack should grow down from the end of memory, and as there's no malloc in Espruino the memory area doesn't have to be protected... I think all that's needed is a safety-net in the Linker (like is there now) so that it'll fail if there isn't enough RAM? As you say, that number could be quite a bit lower though!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,9,https://github.com/espruino/Espruino/pull/873#issuecomment-231666626,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"ah ok, yeah that sounds like something we should have",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,10,https://github.com/espruino/Espruino/pull/873#issuecomment-231668500,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,I'll try this and let you know if still hard faulting,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,11,https://github.com/espruino/Espruino/pull/873#issuecomment-231699787,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Found bug. Cleaning up and will re-open this PR once finished/tested.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/gfwilliams,12,https://github.com/espruino/Espruino/pull/873#issuecomment-231706699,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/mjdietzx,13,https://github.com/espruino/Espruino/pull/873#issuecomment-231708843,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,"OK, this is good to go on my end. Tested and working nRF51 and nRF52 DKs.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,873,2016-07-09T18:26:10Z,2016-07-11T12:12:20Z,2016-07-11T12:12:20Z,MERGED,True,117452,38787,1053,https://github.com/mjdietzx,nRF5 SDK 11.0.0 and production SoftDevices Update,18,[],https://github.com/espruino/Espruino/pull/873,https://github.com/gfwilliams,14,https://github.com/espruino/Espruino/pull/873#issuecomment-231710702,Updated Nordic's SDK/SoftDevices. Note that right now I have only verified it is compiling for nRF51/nRF52. I need to test more and will let you know when I think PR is ready to merge (a few hours or tomorrow). Just want you to see work I've done incase you are doing similar stuff with the Bootloader. Also note that you should use the bootloader from the newest nRF5 sdk: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v11.x.x/,Great - thanks! Just pulling it in.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,874,2016-07-10T12:43:03Z,2016-07-15T03:55:10Z,2016-12-19T09:14:16Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix jswrap_ESP8266_ping,1,[],https://github.com/espruino/Espruino/pull/874,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/874,replacement for #872,replacement for #872,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,880,2016-07-20T09:33:45Z,2016-07-20T09:38:43Z,2016-07-20T09:48:00Z,MERGED,True,144,0,3,https://github.com/notthetup,added STM32F411 support,1,[],https://github.com/espruino/Espruino/pull/880,https://github.com/notthetup,1,https://github.com/espruino/Espruino/pull/880,"Added Makefile, board file and image for STM32F411-DISCOVERY which is another dev board very similar to the STM32F4DISCOVERY except it uses the STM32F411 instead of the STM32F407.","Added Makefile, board file and image for STM32F411-DISCOVERY which is another dev board very similar to the STM32F4DISCOVERY except it uses the STM32F411 instead of the STM32F407.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,880,2016-07-20T09:33:45Z,2016-07-20T09:38:43Z,2016-07-20T09:48:00Z,MERGED,True,144,0,3,https://github.com/notthetup,added STM32F411 support,1,[],https://github.com/espruino/Espruino/pull/880,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/880#issuecomment-233901377,"Added Makefile, board file and image for STM32F411-DISCOVERY which is another dev board very similar to the STM32F4DISCOVERY except it uses the STM32F411 instead of the STM32F407.",Thanks! Wow - I didn't even know those existed :),True,{'THUMBS_UP': ['https://github.com/notthetup']}
espruino/Espruino,https://github.com/espruino/Espruino,880,2016-07-20T09:33:45Z,2016-07-20T09:38:43Z,2016-07-20T09:48:00Z,MERGED,True,144,0,3,https://github.com/notthetup,added STM32F411 support,1,[],https://github.com/espruino/Espruino/pull/880,https://github.com/notthetup,3,https://github.com/espruino/Espruino/pull/880#issuecomment-233903465,"Added Makefile, board file and image for STM32F411-DISCOVERY which is another dev board very similar to the STM32F4DISCOVERY except it uses the STM32F411 instead of the STM32F407.",Yea. They're on the 2nd page of the list on ST's page. I have a few lying around at work. Managed to get Espruino running on it. Thought I'd PR.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,881,2016-07-20T15:27:28Z,2016-07-20T15:40:43Z,2016-07-20T15:40:43Z,MERGED,True,8,6,2,https://github.com/ganehag,cfmakeraw should run earlier in setup,5,[],https://github.com/espruino/Espruino/pull/881,https://github.com/ganehag,1,https://github.com/espruino/Espruino/pull/881,"From: http://linux.die.net/man/3/cfmakeraw
cfmakeraw() sets the terminal to something like the ""raw"" mode of the old Version 7 terminal driver: input is available character by character, echoing is disabled, and all special processing of terminal input and output characters is disabled. The terminal attributes are set as follows:
termios_p->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                | INLCR | IGNCR | ICRNL | IXON);
termios_p->c_oflag &= ~OPOST;
termios_p->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
termios_p->c_cflag &= ~(CSIZE | PARENB);
termios_p->c_cflag |= CS8;

Thus cfmakeraw needs to run before any other settings are changed.
I also added path to jsvConfigObject configs[] to allow setting the path.","From: http://linux.die.net/man/3/cfmakeraw
cfmakeraw() sets the terminal to something like the ""raw"" mode of the old Version 7 terminal driver: input is available character by character, echoing is disabled, and all special processing of terminal input and output characters is disabled. The terminal attributes are set as follows:
termios_p->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                | INLCR | IGNCR | ICRNL | IXON);
termios_p->c_oflag &= ~OPOST;
termios_p->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
termios_p->c_cflag &= ~(CSIZE | PARENB);
termios_p->c_cflag |= CS8;

Thus cfmakeraw needs to run before any other settings are changed.
I also added path to jsvConfigObject configs[] to allow setting the path.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,881,2016-07-20T15:27:28Z,2016-07-20T15:40:43Z,2016-07-20T15:40:43Z,MERGED,True,8,6,2,https://github.com/ganehag,cfmakeraw should run earlier in setup,5,[],https://github.com/espruino/Espruino/pull/881,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/881#issuecomment-233989376,"From: http://linux.die.net/man/3/cfmakeraw
cfmakeraw() sets the terminal to something like the ""raw"" mode of the old Version 7 terminal driver: input is available character by character, echoing is disabled, and all special processing of terminal input and output characters is disabled. The terminal attributes are set as follows:
termios_p->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
                | INLCR | IGNCR | ICRNL | IXON);
termios_p->c_oflag &= ~OPOST;
termios_p->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
termios_p->c_cflag &= ~(CSIZE | PARENB);
termios_p->c_cflag |= CS8;

Thus cfmakeraw needs to run before any other settings are changed.
I also added path to jsvConfigObject configs[] to allow setting the path.",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,882,2016-07-22T12:07:41Z,2016-07-28T09:30:23Z,2016-07-28T09:30:24Z,MERGED,True,14,0,2,https://github.com/jumjum123,Blacklist extended for Javascript commands,3,[],https://github.com/espruino/Espruino/pull/882,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/882,"Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.","Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,882,2016-07-22T12:07:41Z,2016-07-28T09:30:23Z,2016-07-28T09:30:24Z,MERGED,True,14,0,2,https://github.com/jumjum123,Blacklist extended for Javascript commands,3,[],https://github.com/espruino/Espruino/pull/882,https://github.com/jumjum123,2,https://github.com/espruino/Espruino/pull/882#issuecomment-235833400,"Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.","Add option to get all variables, used during make, without compiling and linking.
Gives a lot of information to better understand make process, to find oddities, compare boards, etc.
Will be used in web-service for creating your own firmware.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,882,2016-07-22T12:07:41Z,2016-07-28T09:30:23Z,2016-07-28T09:30:24Z,MERGED,True,14,0,2,https://github.com/jumjum123,Blacklist extended for Javascript commands,3,[],https://github.com/espruino/Espruino/pull/882,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/882#issuecomment-235838607,"Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.","I could be wrong here, but if you say ""__.length"" in the blacklist, does that not just blacklist every instance of length everywhere?
I'm not quite sure how the blacklist works, but it feels like just being able to have an empty classname might be more simple?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,882,2016-07-22T12:07:41Z,2016-07-28T09:30:23Z,2016-07-28T09:30:24Z,MERGED,True,14,0,2,https://github.com/jumjum123,Blacklist extended for Javascript commands,3,[],https://github.com/espruino/Espruino/pull/882,https://github.com/jumjum123,4,https://github.com/espruino/Espruino/pull/882#issuecomment-235842922,"Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.","In my Firmware creator is a tab for blacklist handling.
To get some overview a 2nd collection of tabs for all classes is used.
Since general commands don't belong to a class, I had to find a way to add
them.
Therefore I created a kind of ""artificial class"".
To make the story short, its grown historical.
I'm thinking about a better way. Do you think, you can add this version for
now, and change it once we have a better solution ?
Before I forget, at least in my test, length is not removed in all classes.
On Thu, Jul 28, 2016 at 10:56 AM, Gordon Williams notifications@github.com
wrote:

I could be wrong here, but if you say ""__.length"" in the blacklist, does
that not just blacklist every instance of length everywhere?
I'm not quite sure how the blacklist works, but it feels like just being
able to have an empty classname might be more simple?
—
You are receiving this because you modified the open/close state.
Reply to this email directly, view it on GitHub
#882 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/AB-Gnga2JYUOf6JoEKmhE7P0PI1RRHB3ks5qaG7ZgaJpZM4JSsxt
.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,882,2016-07-22T12:07:41Z,2016-07-28T09:30:23Z,2016-07-28T09:30:24Z,MERGED,True,14,0,2,https://github.com/jumjum123,Blacklist extended for Javascript commands,3,[],https://github.com/espruino/Espruino/pull/882,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/882#issuecomment-235845982,"Javascrip commands have no class information in JSON description. This
was not handled in old version.
In this version an artificial class ""--"" is used to support blacklisting
them.
If you don't want to have console.log or eval, for whatever reason, this
can be blacklist now.","Yes, no problem - thanks! :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,899,2016-08-16T09:03:50Z,2016-08-16T09:12:24Z,2016-08-16T09:12:25Z,MERGED,True,1,1,1,https://github.com/nkrkv,"fix: http.get leak via ""method"" field duplicate",1,[],https://github.com/espruino/Espruino/pull/899,https://github.com/nkrkv,1,https://github.com/espruino/Espruino/pull/899,"http.get cause a memory leak in the following scenario:
var opts = {
  host: 'lala.com',
  patch: '/'
};

setInterval(function() {
  http.get(opts, function(res) { ... })
}, 1000);
Every tick opts would get an additional copy of opts.method = ""GET"" field.","http.get cause a memory leak in the following scenario:
var opts = {
  host: 'lala.com',
  patch: '/'
};

setInterval(function() {
  http.get(opts, function(res) { ... })
}, 1000);
Every tick opts would get an additional copy of opts.method = ""GET"" field.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,899,2016-08-16T09:03:50Z,2016-08-16T09:12:24Z,2016-08-16T09:12:25Z,MERGED,True,1,1,1,https://github.com/nkrkv,"fix: http.get leak via ""method"" field duplicate",1,[],https://github.com/espruino/Espruino/pull/899,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/899#issuecomment-240048286,"http.get cause a memory leak in the following scenario:
var opts = {
  host: 'lala.com',
  patch: '/'
};

setInterval(function() {
  http.get(opts, function(res) { ... })
}, 1000);
Every tick opts would get an additional copy of opts.method = ""GET"" field.",Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,903,2016-08-23T11:55:36Z,2016-08-23T12:03:47Z,2016-08-23T12:03:47Z,MERGED,True,8,1,1,https://github.com/yerpj,Remove incorrect line number in documentation,1,[],https://github.com/espruino/Espruino/pull/903,https://github.com/yerpj,1,https://github.com/espruino/Espruino/pull/903,"I just removed the static reference to line 606 of Makefile, which has been modified since. Thus, the line number is not relevant anymore. I tried to find a good location for the addition of two lines, which is just before the ""ifdef ESPRUINO_1V3"" section","I just removed the static reference to line 606 of Makefile, which has been modified since. Thus, the line number is not relevant anymore. I tried to find a good location for the addition of two lines, which is just before the ""ifdef ESPRUINO_1V3"" section",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,903,2016-08-23T11:55:36Z,2016-08-23T12:03:47Z,2016-08-23T12:03:47Z,MERGED,True,8,1,1,https://github.com/yerpj,Remove incorrect line number in documentation,1,[],https://github.com/espruino/Espruino/pull/903,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/903#issuecomment-241709582,"I just removed the static reference to line 606 of Makefile, which has been modified since. Thus, the line number is not relevant anymore. I tried to find a good location for the addition of two lines, which is just before the ""ifdef ESPRUINO_1V3"" section","Thanks! Yeah, a static line number reference wasn't super helpful :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,904,2016-08-23T15:29:35Z,2016-08-23T16:18:49Z,2016-08-23T16:38:23Z,MERGED,True,2,2,2,https://github.com/yerpj,Serial6 is now exposed as an object on NUCLEOF401RE & NUCLEOF411RE,1,[],https://github.com/espruino/Espruino/pull/904,https://github.com/yerpj,1,https://github.com/espruino/Espruino/pull/904,"The STM32F4x1RE microcontrollers embeds 3 USART (USART1,USART2,USART6), but the current board descriptions for NUCLEO401RE and NUCLEO411RE are only exposing 3 Serial objects , respectively Serial1, Serial2, Serial3. This PR allows using Serial1, Serial2 and Serial6 as usual. Even if Serial[3..5] are potentially existing objects, they can not be used as they are not physically existing.","The STM32F4x1RE microcontrollers embeds 3 USART (USART1,USART2,USART6), but the current board descriptions for NUCLEO401RE and NUCLEO411RE are only exposing 3 Serial objects , respectively Serial1, Serial2, Serial3. This PR allows using Serial1, Serial2 and Serial6 as usual. Even if Serial[3..5] are potentially existing objects, they can not be used as they are not physically existing.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,904,2016-08-23T15:29:35Z,2016-08-23T16:18:49Z,2016-08-23T16:38:23Z,MERGED,True,2,2,2,https://github.com/yerpj,Serial6 is now exposed as an object on NUCLEOF401RE & NUCLEOF411RE,1,[],https://github.com/espruino/Espruino/pull/904,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/904#issuecomment-241789076,"The STM32F4x1RE microcontrollers embeds 3 USART (USART1,USART2,USART6), but the current board descriptions for NUCLEO401RE and NUCLEO411RE are only exposing 3 Serial objects , respectively Serial1, Serial2, Serial3. This PR allows using Serial1, Serial2 and Serial6 as usual. Even if Serial[3..5] are potentially existing objects, they can not be used as they are not physically existing.","Ok, thanks - however it will produce some unhelpful error when using Serial3-5? I guess it's better than not having Serial6.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,904,2016-08-23T15:29:35Z,2016-08-23T16:18:49Z,2016-08-23T16:38:23Z,MERGED,True,2,2,2,https://github.com/yerpj,Serial6 is now exposed as an object on NUCLEOF401RE & NUCLEOF411RE,1,[],https://github.com/espruino/Espruino/pull/904,https://github.com/yerpj,3,https://github.com/espruino/Espruino/pull/904#issuecomment-241790838,"The STM32F4x1RE microcontrollers embeds 3 USART (USART1,USART2,USART6), but the current board descriptions for NUCLEO401RE and NUCLEO411RE are only exposing 3 Serial objects , respectively Serial1, Serial2, Serial3. This PR allows using Serial1, Serial2 and Serial6 as usual. Even if Serial[3..5] are potentially existing objects, they can not be used as they are not physically existing.","From my understanding, the build process creates as many Serials as there is usarts, as stated in the board definition file 'usart' : x, . If x is 1, there will be only Serial1. If x is 5, there will be Serial1, Serial2, Serial3, Serial4, and Serial5. If this is true, then we cannot really expose Serial6 without exposing dummy Serials[3..5].",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,904,2016-08-23T15:29:35Z,2016-08-23T16:18:49Z,2016-08-23T16:38:23Z,MERGED,True,2,2,2,https://github.com/yerpj,Serial6 is now exposed as an object on NUCLEOF401RE & NUCLEOF411RE,1,[],https://github.com/espruino/Espruino/pull/904,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/904#issuecomment-241794793,"The STM32F4x1RE microcontrollers embeds 3 USART (USART1,USART2,USART6), but the current board descriptions for NUCLEO401RE and NUCLEO411RE are only exposing 3 Serial objects , respectively Serial1, Serial2, Serial3. This PR allows using Serial1, Serial2 and Serial6 as usual. Even if Serial[3..5] are potentially existing objects, they can not be used as they are not physically existing.","Well, it should be possible to change the definition at https://github.com/espruino/Espruino/blob/master/src/jswrap_serial.c#L109 from ""#if"" : ""USART_COUNT>=3"" to ""#if"" : ""USART_COUNT>=3 && !NO_USART5"" and then change the Makefile for the Nucleos - but changing the usart count is the quickest way to get Serial6, it just means people will get some odd errors :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,908,2016-08-29T21:00:10Z,2016-08-30T16:13:55Z,2016-08-30T16:13:55Z,MERGED,True,1,1,1,https://github.com/muet,flash_read_doc_fix,2,[],https://github.com/espruino/Espruino/pull/908,https://github.com/muet,1,https://github.com/espruino/Espruino/pull/908,addr parameter description of Flash.read() fixed to read ...'reading' from (vs. ...'writing' from).,addr parameter description of Flash.read() fixed to read ...'reading' from (vs. ...'writing' from).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,908,2016-08-29T21:00:10Z,2016-08-30T16:13:55Z,2016-08-30T16:13:55Z,MERGED,True,1,1,1,https://github.com/muet,flash_read_doc_fix,2,[],https://github.com/espruino/Espruino/pull/908,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/908#issuecomment-243493489,addr parameter description of Flash.read() fixed to read ...'reading' from (vs. ...'writing' from).,"Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,1,https://github.com/espruino/Espruino/pull/911,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/911#issuecomment-244720688,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Great, thanks! Just checking - has this been tested?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,3,https://github.com/espruino/Espruino/pull/911#issuecomment-246286597,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Not yet, unfortunately.
I don't really know how to flash the bootloader into Espruino... I just compiled it with
PICO_1V3=1 BOOTLOADER=1 RELEASE=1 make and I suspect I have to flash it with ST-LINK at address 0x08'00'00'00, right?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/911#issuecomment-246289177,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","See http://www.espruino.com/Pico#advanced-reflashing
But this is why it never got added in the first place - I needed to be able to test it with an ST tool. Given USB has error correction in it anyway, the chances of the CRC ever being wrong are minimal.
It's absolutely vital changes to the bootloader are tested and don't break stuff. If I get 1000 boards made that can't have the firmware updated and I have to take them all back, reflash them, and ship them out again then that's basically a whole year's earnings gone for me.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,5,https://github.com/espruino/Espruino/pull/911#issuecomment-246321120,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","dfu-util log:
user@ubuntu:~/Documents/JP/Espruino$ dfu-util --alt 0 -D bootloader.dfu 
dfu-util 0.5

(C) 2005-2008 by Weston Schmidt, Harald Welte and OpenMoko Inc.
(C) 2010-2011 Tormod Volden (DfuSe support)
This program is Free Software and has ABSOLUTELY NO WARRANTY

dfu-util does currently only support DFU version 1.0

Opening DFU USB device... ID 0483:df11
Run-time device DFU version 011a
Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=0, name=""@Internal Flash  /0x08000000/04*016Kg,01*064Kg,03*128Kg""
Claiming USB DFU Interface...
Setting Alternate Setting #0 ...
Determining device status: state = dfuERROR, status = 10
dfuERROR, clearing status
Determining device status: state = dfuIDLE, status = 0
dfuIDLE, continuing
DFU mode device DFU version 011a
Device returned transfer size 2048
Dfu suffix version 11a
DfuSe interface name: ""Internal Flash  ""
file contains 1 DFU images
parsing DFU image 1
image for alternate setting 0, (1 elements, total size = 10944)
parsing element 1, address = 0x08000000, size = 10936
done parsing DfuSe file

Espruino IDE console log (only last lines), consisting of the last few lines of the Espruino flashing process, followed by the connection to it and a rapid test
"">1+1
=2

""

Sent
Writing 256 bytes at 0x805bf00...
Sending block ""1Î"", wait 50ms
Sent
Sent
Sending block ""\b\u0005¿\u0000²"", wait 50ms
Sending block ""ÿ\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ÿ"", wait 50ms
Sent
Sent
Writing 32 bytes at 0x805c000...
Sending block ""1Î"", wait 50ms
Sent
Sending block ""\b\u0005À\u0000Í"", wait 50ms
Sending block ""\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0001\u0000 \u0001\u0000\u0000\u0000�"", wait 50ms
>>> Write complete!
Set Slow Write = false
>>> Flashing Complete
Sent
Disconnect callback...
>>> Disconnected
Sent
Sent
Sent
Sent
Sent
Sent
Sent
Sent
Sent
Sent
Sent
Sent
>>> Connecting...
Set Slow Write = true
[object Object]
Connected [object Object]
Found a prompt... great!
>>> Sending...
---> ""echo(0);\nconsole.log(\""<\"",\""<<\"",JSON.stringify(process.env),\"">>\"",\"">\"");echo(1);\n""
Sending block ""echo(0);\nconsol"", wait 50ms
Sent
Sending block ""e.log(\""<\"",\""<<\"","", wait 50ms
Sent
Sending block ""JSON.stringify("", wait 50ms
Sent
Sending block ""process.env),\"">"", wait 50ms
Sent
Sending block "">\"",\"">\"");echo(1)"", wait 50ms
Sent
Sending block "";\n"", wait 50ms
Got ""echo(0);\r\n< << {\""VERSION\"":\""1v86\"",\""BUILD_DATE\"":\""Jul  6 2016\"",\""BUILD_TIME\"":\""15:44:29\"",\""GIT_COMMIT\"":\""7450cab7e6b18274deb47cb8940c936f1a9b44e0\"",\""BOARD\"":\""PICO_R1_3\"",\""CHIP\"":\""STM32F401CDU6\"",\""CHIP_FAMILY\"":\""STM32F4\"",\""FLASH\"":393216,\""RAM\"":98304,\""SERIAL\"":\""27005600-13513430-36363435\"",\""CONSOLE\"":\""USB\"",\""EXPORTS\"":{\""jsvLock\"":230441,\""jsvLockAgainSafe\"":230427,\""jsvUnLock\"":230401,\""jsvSkipName\"":86049,\""jsvMathsOp\"":93433,\""jsvMathsOpSkipNames\"":93495,\""jsvNewFromFloat\"":230837,\""jsvNewFromInteger\"":230873,\""jsvNewFromString\"":233745,\""jsvNewFromBool\"":230857,\""jsvGetFloat\"":86641,\""jsvGetInteger\"":84249,\""jsvGetBool\"":92025,\""jspeiFindInScopes\"":105561,\""jspReplaceWith\"":111961,\""jspeFunctionCall\"":99169,\""jspGetNamedVariable\"":95029,\""jspGetNamedField\"":97117,\""jspGetVarNamedField\"":96709,\""jsvNewWithFlags\"":230677}} >> >\r\n=undefined\r\n>""
Loading http://www.espruino.com/json/PICO_R1_3.json
Device found (connectionId=10)
>>> Connected to port COM43
Sent
>>> Sent
Board JSON loaded
Firmware >1.43 supports faster writes over USB
Set Slow Write = false
FIRMWARE: Current 1v86, Available 1v86
Sending block ""1"", wait 50ms
Sent
Sending block ""+"", wait 50ms
Sent
Sending block ""1"", wait 50ms
Sent
Sending block ""\r"", wait 50ms
Sent

I never used dfu-util but it seems that flashing the new bootloader succeeded. After that, I still could upgrade the Espruino firmware as well as interract trough the console.
@gfwilliams what kind of tests do you usually require in order to validate a piece of code?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/911#issuecomment-246332822,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Cool, well, it's working then.

what kind of tests do you usually require in order to validate a piece of code?

Well, something that actually executes that code would be good. The normal bootloader doesn't use CMD_GO at all.
You'd need to come up with some test case where you used (ideally ST's bootloader application) to send a CMD_GO, so you could be sure it had sent the correct CRC.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,7,https://github.com/espruino/Espruino/pull/911#issuecomment-246381255,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","I just proceeded to some basic tests:

powering up a Pico while BTN is pressed
entering bootloader by sending 0x7F
requesting some infos with CMD_GET
requesting ID with CMD_GET_ID
trying to exit bootloader and jumping to address 0x08010000 which seem to be the start address of Espruino, right?


After that sequence, the Pico LEDs are both ON ( as requested on line 166 setLEDs(7); // jumping... ) but nothing is happening. It seems that the Espruino base address is wrong OR some extra config has to be done before jumping to user code... Any idea?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/911#issuecomment-246390210,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","The binary starts at 0x08010000, but that's not where the entrypoint is. The address of that is stored in location 0x08010004
Even if you do that it may fail, since USB is now already initialised. Your best bet it to write some code into RAM and then jump to that (but you'll have to add 1 to the address since it's Thumb).
But I can't help any more. The whole reason I didn't add those few lines at the beginning was it was something I didn't want to have to test out, because it's a total pain. The last thing I want to do is to spend more time than I'd have spent myself, showing you how to test it out. Especially when it's a part of the bootloader that doesn't get used by anything at the moment.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,9,https://github.com/espruino/Espruino/pull/911#issuecomment-246394095,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.",Your point of view makes sense. It won't help much to add this checksum.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/911#issuecomment-246407901,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Yeah, sorry - it's just there are cases where it could be used (for instance if I ever have to replace the bootloader from the bootloader itself), and it'd be a disaster if it turned out to be broken. By contrast the consequences of it not checking the CRC are actually pretty small.
Actually looking at the code and your test, despite it crashing, you've basically proved it's passed the CRC and works... Sorry about that - I'll pull it in anyway.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,11,https://github.com/espruino/Espruino/pull/911#issuecomment-246508440,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Hello again,
FYI, I managed to get the CMD_GO work like a charm. I made modifications on bootloader code main.c and utils.c/utils.h
main.c: (updated CMD_GO code)
case CMD_GO: // read memory
              _putc(ACK);
              addr = _getc_blocking() << 24;
              addr |= _getc_blocking()  << 16;
              addr |= _getc_blocking()  << 8;
              addr |= _getc_blocking();
              chksumc = ((addr)&0xFF)^((addr>>8)&0xFF)^((addr>>16)&0xFF)^((addr>>24)&0xFF);
              chksum = _getc_blocking();
              if (chksumc != chksum) {
                _putc(NACK);
                break;
              }
              _putc(ACK);
              setLEDs(7); // jumping...
              deInitHardware();
              jumpToApplication(addr);
              break;
utils.c : (added 2 functions)
typedef void (*pFunction)(void);

bool jumpToApplication(unsigned int addr) {
  uint32_t JumpAddress = *(__IO uint32_t*)(addr + 4);
  pFunction Application;
  if (JumpAddress==0 || JumpAddress==0xFFFFFFFF)
    return false;
  Application=(pFunction) JumpAddress;
  __set_MSP(*(__IO uint32_t*) addr);
  Application();
  return true; // should never get here
}

void deInitHardware() {
#if defined(STM32F3)
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, DISABLE);
 RCC_AHBPeriphClockCmd( RCC_AHBPeriph_GPIOA |
                        RCC_AHBPeriph_GPIOB |
                        RCC_AHBPeriph_GPIOC |
                        RCC_AHBPeriph_GPIOD |
                        RCC_AHBPeriph_GPIOE |
                        RCC_AHBPeriph_GPIOF, DISABLE);
#elif defined(STM32F2) || defined(STM32F4)
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA |
                        RCC_AHB1Periph_GPIOB |
                        RCC_AHB1Periph_GPIOC |
                        RCC_AHB1Periph_GPIOD |
                        RCC_AHB1Periph_GPIOE |
                        RCC_AHB1Periph_GPIOF |
                        RCC_AHB1Periph_GPIOG |
                        RCC_AHB1Periph_GPIOH, DISABLE);
#else
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, DISABLE);
 RCC_APB2PeriphClockCmd(
       RCC_APB2Periph_ADC1 |
       RCC_APB2Periph_GPIOA |
       RCC_APB2Periph_GPIOB |
       RCC_APB2Periph_GPIOC |
       RCC_APB2Periph_GPIOD |
       RCC_APB2Periph_GPIOE |
       RCC_APB2Periph_GPIOF |
       RCC_APB2Periph_GPIOG |
       RCC_APB2Periph_AFIO, DISABLE);
#endif

NVIC_DisableIRQ(OTG_FS_IRQn);
}
I compiled for the Pico 1v3.
Then, the test protocol is as following:

make sure to store in flash a visual application (in my case, a function that turns ON and OFF both LEDs each 2 seconds)
power ON the Pico while pressing the BTN
enter bootloader (means sending 0x7F)
request to jump to user code (means sending 0x21, 0xDE)
wait for ACK
send the user addr (means sending 4 bytes followed by the 1-byte checksum)

I tested with wrong checksums, then the bootloader sends a NAK and the command is aborted. Then I tested with a correct checksum (0x09, for the address 0x08010000) and the user app is correctly invoked.
I do not particularly want you to merge anything about this update, as I understand that it is currently not very helpful for the Espruino project. I wrote this comment mainly to centralize the knowledge.
Anyway, if you care about this new piece of code, I still can make a new PR based on this commit",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,12,https://github.com/espruino/Espruino/pull/911#issuecomment-246601781,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Thanks! Wow, yeah, I just looked up GO and the bootloader's implementation was completely wrong :)
When you've done the command and jumped to Espruino, does USB come back up ok? For the Pico I'd added the ability to jump back out of the bootloader if the button was held down for a few seconds, but I never got it to work reliably because of the issue of resetting USB.
But yes, It'd be great to pull that code back in.
One small gotcha - I think pFunction Application should really be static. There's a post here: http://stackoverflow.com/questions/16490315/stm32f4-memory-jumping
Where they suggest that because __set_MSP resets the stack, Application is stored on the stack and so won't be there any more. In reality it's not an issue because it'll be in a register at that point (if optimisations are enabled) but if the compiler changes (or you compile in debug mode?) it might break.
But __set_MSP is really cool though - I hadn't seen that before. It'd be nice to use jumoToApplication in place of jumpToEspruinoBinary for the main bootloader. I actually hit that problem yesterday (I'd flashed the WiFI boards with a 96kB RAM bootloader and spent ages trying to debug why I couldn't get a 128kB RAM Espruino binary to work :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/911#issuecomment-246603371,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Just looked at the original - at least it wasn't as wrong as I'd imagined :) Any idea why it didn't work before? It kind of feels like it should have, even if the stack would have been in slightly the wrong location.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,14,https://github.com/espruino/Espruino/pull/911#issuecomment-246641850,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","When you've done the command and jumped to Espruino, does USB come back up ok?

I am still working on that, I wonder if this is a device problem or a host problem. I will try to add a delay between the USB_DeInit process and the jumpToApplication process. Or maybe the USB DeInit has to be done in a better way, don't know yet.

One small gotcha - I think pFunction Application should really be static. There's a post here:
http://stackoverflow.com/questions/16490315/stm32f4-memory-jumping

I totally agree. In my case it is a global variable, but protecting it with a static constraint is a good idea.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,15,https://github.com/espruino/Espruino/pull/911#issuecomment-246642854,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","I wonder if this is a device problem or a host problem

It is probably a host problem - they don't like it when USB disconnects and then reconnects quickly. A small delay after the deinit might fix it...

In my case it is a global variable

Ahh, perhaps you changed that after pasting the code in?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,16,https://github.com/espruino/Espruino/pull/911#issuecomment-246651060,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","It is probably a host problem - they don't like it when USB disconnects and then reconnects quickly. A small delay after the deinit might fix it...

i will try that soon.

Ahh, perhaps you changed that after pasting the code in?

I must be a bit tired, the declaration was totally local... I will change it into a static var.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,17,https://github.com/espruino/Espruino/pull/911#issuecomment-246652020,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","It'd be nice to use jumoToApplication in place of jumpToEspruinoBinary for the main bootloader.

Does it mean you'd prefer to call jumpToApplication(0x08010000) instead of jumpToEspruinoBinary() by replacing each call?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,18,https://github.com/espruino/Espruino/pull/911#issuecomment-246652775,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","I think so, yes. Perhaps there could be another boolean argument (deInitUSB) that was true apart from when the bootloader called jumpToApplication right at the start if the button wasn't pressed (so there was no delay for the normal bootloader).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,19,https://github.com/espruino/Espruino/pull/911#issuecomment-246653317,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","I'll first validate the deInit/unmount process in order to allow a proper re-enumeration of the virtual COM port, and then I will re-implement the jumpToApplication(,) function.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,20,https://github.com/espruino/Espruino/pull/911#issuecomment-246653831,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","Great - thanks for putting all the work into this! (By the way, I tweaked the bootloader this morning to move the button held test to before USB is initialised - it might be an idea to git pull)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,21,https://github.com/espruino/Espruino/pull/911#issuecomment-246719175,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","(By the way, I tweaked the bootloader this morning to move the button held test to before USB is initialised - it might be an idea to git pull)

// if button is not set, jump to the address of the binary
  if (!isButtonPressed()) {
    jumpToEspruinoBinary();
    // we could return here - binary might be very obviously corrupted
  }

This piece of code is executed before any USB initialization (inside initHardware()), I don't really understand what you modified this morning?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,22,https://github.com/espruino/Espruino/pull/911#issuecomment-246724804,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","It's at the bottom of this change: abe11d3
There was other code in main.c that tried to detect when the button had been held down for a certain amount of time - but by the time that has done its thing, USB was initialised. Instead, it now just blocks with the green LED on while the button is pressed (or if >3 secs it drops through to Espruino)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/yerpj,23,https://github.com/espruino/Espruino/pull/911#issuecomment-246816397,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","OK I'll give up trying to re-enumerate the USB after a jump to application. I mostly tried to make a soft-disconnect :
// set bit SDIS in OTG_FS_DCTL reg
    USB_OTG_dev.regs.DREGS->DCTL |= 0x02;
Even if I came accross some forum posts speaking about successful re-enumeration through this soft-disconnect, no way of replicating it on the Pico :-/
I am sorry about the issue of this PR, I will certainly have another try in a few days because I don't like to give up , but in a near future I would prefer to have a try on another target such as a STM32F4DISCOVERY, as it will be much easier to debug through JTAG.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,911,2016-09-02T14:39:05Z,2016-09-12T16:37:50Z,2016-09-14T06:50:03Z,MERGED,True,5,1,1,https://github.com/yerpj,"added checksum for ""GO"" command in Espruino bootloader",1,[],https://github.com/espruino/Espruino/pull/911,https://github.com/gfwilliams,24,https://github.com/espruino/Espruino/pull/911#issuecomment-246921892,"As for command ""WRITE"", the command ""GO"" now computes the checksum before jumping to the given address.","No problem - thanks for all your help!
With the disconnect - I guess it's also important it works on the STM32F1 as well... :s But yes, it should be easy enough to compile the bootloader for the discovery boards, and it would make debug a lot easier!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,919,2016-09-12T09:55:10Z,2016-09-12T10:40:28Z,2016-09-12T10:40:29Z,MERGED,True,52,0,4,https://github.com/owenmcateer,#887 graphics draw circle,2,[],https://github.com/espruino/Espruino/pull/919,https://github.com/owenmcateer,1,https://github.com/espruino/Espruino/pull/919,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,919,2016-09-12T09:55:10Z,2016-09-12T10:40:28Z,2016-09-12T10:40:29Z,MERGED,True,52,0,4,https://github.com/owenmcateer,#887 graphics draw circle,2,[],https://github.com/espruino/Espruino/pull/919,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/919#issuecomment-246310822,,Perfect - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,921,2016-09-12T14:01:22Z,2016-09-12T14:45:55Z,2016-09-12T14:46:27Z,MERGED,True,47,3,4,https://github.com/owenmcateer,920/fill circle,4,[],https://github.com/espruino/Espruino/pull/921,https://github.com/owenmcateer,1,https://github.com/espruino/Espruino/pull/921,#920,#920,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,921,2016-09-12T14:01:22Z,2016-09-12T14:45:55Z,2016-09-12T14:46:27Z,MERGED,True,47,3,4,https://github.com/owenmcateer,920/fill circle,4,[],https://github.com/espruino/Espruino/pull/921,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/921#issuecomment-246371285,#920,"Ok, merged. Needed a few tweaks first to get it to compile, but once compiling it works",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,924,2016-09-16T22:43:20Z,2016-09-18T04:36:47Z,2017-03-10T22:42:46Z,CLOSED,False,7,7,4,https://github.com/wilberforce,Boot v1.5 and SDK 1.5.4,6,[],https://github.com/espruino/Espruino/pull/924,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/924,"This PR updates the ESP8266 bootloader to 1.5, and the SDK to 1.5.4","This PR updates the ESP8266 bootloader to 1.5, and the SDK to 1.5.4",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,924,2016-09-16T22:43:20Z,2016-09-18T04:36:47Z,2017-03-10T22:42:46Z,CLOSED,False,7,7,4,https://github.com/wilberforce,Boot v1.5 and SDK 1.5.4,6,[],https://github.com/espruino/Espruino/pull/924,https://github.com/nkolban,2,https://github.com/espruino/Espruino/pull/924#issuecomment-247780145,"This PR updates the ESP8266 bootloader to 1.5, and the SDK to 1.5.4",I think you might want to check out #925 as well as this seems to upgrade to SDK 2.0.0,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,1,https://github.com/espruino/Espruino/pull/925,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/925#issuecomment-247825029,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","@tve
Your SDK 2.0 updates superseed the updates I had done...
https://github.com/espruino/Espruino/pull/924/files
I'm not sure if your's also updated the docker file and the flash Readme?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,3,https://github.com/espruino/Espruino/pull/925#issuecomment-247834401,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Mhh, I wasn't aware of the Dockerfile, I'll fix it, thanks for pointing it out.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/925#issuecomment-247897465,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","From the forum:

Wilberforce: Is version 2.0 sdk larger - is that why the rom size had to drop, and therefore the graphics library?
tve:  No, it had to drop because it never fit. It was in the previous build because someone just changed the max size in the makefile without considering whether there actually is space. So code overlapped the eeprom flash area and other stuff.

The Makefile update for the available rom was here:
60a1698#diff-b67911656ef5d18c4ae36cb6741b7965R509
New change:
-ESP_FLASH_MAX       ?= 491520   # max bin file: 480KB
+ESP_FLASH_MAX       ?= 479232   # max bin file: 468KB
So 480 reserves 32K and 468 reserves 44K.
I'm not sure I understand how you got this value?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,5,https://github.com/espruino/Espruino/pull/925#issuecomment-247898458,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","The flash layout is documented in https://github.com/espruino/EspruinoDocs/blob/master/boards/EspruinoESP8266.md#flash-map-and-access
The user1.bin image starts at 0x1000 and the SDK RF calibration save area on 512KB modules starts at 0x076000. So 0x75000=479232 is the space available.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/925#issuecomment-247899047,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Ahhh - so this is for the 512M modules.
The larger ones are not affected - They could still be built with Crypto and graphics?
My concern is that people will be surprised if they were using the graphics module and it disappear from the firmware.
Are we asking for trouble if then Makefile switched in graphics depending on the rom size?
That's not going to work with the universal build is it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,7,https://github.com/espruino/Espruino/pull/925#issuecomment-247902558,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","There is only a single build, so there is no notion of switching with ROM size. If someone wants to go in and move things around, that's fine with me. I don't use 512KB modules. Could also eliminate eeprom area and one of the flash save blocks for 512kb modules. But making those changes requires code changes and conditionals in a number of places. I just wanted to update to the latest SDK and add some fixes I've had queued up and I don't really have the energy to change flash layout at this point.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,8,https://github.com/espruino/Espruino/pull/925#issuecomment-247902799,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","I just ran the build again with USE_GRAPHICS, the problem is:
** user1.bin uses  488788 bytes of 479232 available
so this is 9556 bytes over, meaning 3 flash sectors (4KB each) would have to be freed up for it to fit.
I don't know whether it's possible to cut down the amount of space used by the graphics stuff.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/925#issuecomment-247943794,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Thanks - I notice you've added -g to OPTIMIZEFLAGS - could that be causing the code size increase?
Also, just IMO but wouldn't just having Wifi.setTelnetOptions or something be nicer than having both TelnetServer and Telnet libraries?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,10,https://github.com/espruino/Espruino/pull/925#issuecomment-248047219,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","WRT -g I did a build without -g and the difference is less than 100 bytes, IIRC with -g was smaller, actually.
WRT Telnet I need to go back. The problem I was having was that there is both a class called Telnet and a device called Telnet. I renamed the class to TelnetServer so it's not shadowed by the device. If this doesn't make sense, I can go back and see what I was smoking...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/925#issuecomment-248217049,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Thanks for the explanation. Odd about -g (although I never tried it with -Os as well).
Well, it's ok - it'd be a lot tidier if we could do it with just the Telnet class, but I remember you had issues. What about Telnet.setup? presumably that would be available as part of Serial - in the standard handler you could detect if you were dealing with Telnet then forward the setup call elsewhere?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,12,https://github.com/espruino/Espruino/pull/925#issuecomment-248221197,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Sorry, I'm not understanding your comment about Telnet.setup",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/925#issuecomment-248223137,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Well, you would have done TelnetServer.setOptions(options) but you could just do Telnet.setup(options).
Because Telnet is a serial device, it should have a setup method already which will probably just produce an error. You could just use that method to set the options needed for Telnet, rather than needing a new class?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/tve,14,https://github.com/espruino/Espruino/pull/925#issuecomment-248223939,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Mhh, I'm gonna have to revert the change and re-test. What I thought was happening is that I would use Telnet.setConsole() but instead of calling setConsole on the Telnet device that code was attempting to call setConsole on the Telnet class, which doesn't have that as a class method.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,925,2016-09-17T07:01:24Z,2016-09-20T06:46:38Z,2016-09-20T07:30:16Z,MERGED,True,91,40,12,https://github.com/tve,Upgrade esp8266 to SDK v2.0.0.patch1,24,[],https://github.com/espruino/Espruino/pull/925,https://github.com/gfwilliams,15,https://github.com/espruino/Espruino/pull/925#issuecomment-248225371,"Recent pull requests have enabled crypto and graphics, which has put the size of the binary above the actual space available. I've disabled graphics to make things fit. If someone wants to propose a layout change or work on reducing the size that would be awesome. But just changing the max size before the Makefile bails out is not a solution...","Yeah, I think it's getting confused between the named variable and the class name because that whole system is a bit iffy (there is a branch to fix it, but it's a way off being ready). So are you saying that with your change, Telnet.setOptions works? If so, great - It hadn't occurred to me that's what you might be doing,
I think by using .setup you can avoid defining a Telnet class (and just use the device), and then everything would work as expected? Since Telnet works on Linux this is one of those things that will probably be easier to test on there :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,933,2016-10-03T14:49:05Z,2016-10-03T15:35:50Z,2016-10-03T15:35:50Z,MERGED,True,147,18,2,https://github.com/ddm,Issue 915,3,[],https://github.com/espruino/Espruino/pull/933,https://github.com/ddm,1,https://github.com/espruino/Espruino/pull/933,"Implemented NRF.updateServices to allow BLE notifications (indication not available yet).
Initial tests indicate this works but feedback is more than welcome.","Implemented NRF.updateServices to allow BLE notifications (indication not available yet).
Initial tests indicate this works but feedback is more than welcome.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,933,2016-10-03T14:49:05Z,2016-10-03T15:35:50Z,2016-10-03T15:35:50Z,MERGED,True,147,18,2,https://github.com/ddm,Issue 915,3,[],https://github.com/espruino/Espruino/pull/933,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/933#issuecomment-251131678,"Implemented NRF.updateServices to allow BLE notifications (indication not available yet).
Initial tests indicate this works but feedback is more than welcome.","Great, thanks! Please can you just remove the change to the default baud rate on NRF52832DK? Espruino tools generally default to 9600, so when boards don't use it it's a massive support headache as everyone starts complaining that nothing is working.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,933,2016-10-03T14:49:05Z,2016-10-03T15:35:50Z,2016-10-03T15:35:50Z,MERGED,True,147,18,2,https://github.com/ddm,Issue 915,3,[],https://github.com/espruino/Espruino/pull/933,https://github.com/ddm,3,https://github.com/espruino/Espruino/pull/933#issuecomment-251135453,"Implemented NRF.updateServices to allow BLE notifications (indication not available yet).
Initial tests indicate this works but feedback is more than welcome.","Sure thing! Sorry about that: I use 115200 in my test setup because it plays well with the buspirate but I forgot to revert it when I pushed.
The other changes are mainly to suppress warnings in the file I was working in or comments which were addressed by the PR.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,933,2016-10-03T14:49:05Z,2016-10-03T15:35:50Z,2016-10-03T15:35:50Z,MERGED,True,147,18,2,https://github.com/ddm,Issue 915,3,[],https://github.com/espruino/Espruino/pull/933,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/933#issuecomment-251140002,"Implemented NRF.updateServices to allow BLE notifications (indication not available yet).
Initial tests indicate this works but feedback is more than welcome.",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,934,2016-10-04T11:23:42Z,2016-10-04T11:41:38Z,2016-10-04T11:41:38Z,MERGED,True,69,52,1,https://github.com/ddm,Enable simple READs using NRF.updateServices,2,[],https://github.com/espruino/Espruino/pull/934,https://github.com/ddm,1,https://github.com/espruino/Espruino/pull/934,"This improves READ supports related to #915.
It is now possible to update a characteristic even when no connection is active. Notifications must be explicitly requested by using notify: true when calling NRF.updateServices.
Documentation has been updated to reflect the changes.","This improves READ supports related to #915.
It is now possible to update a characteristic even when no connection is active. Notifications must be explicitly requested by using notify: true when calling NRF.updateServices.
Documentation has been updated to reflect the changes.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,934,2016-10-04T11:23:42Z,2016-10-04T11:41:38Z,2016-10-04T11:41:38Z,MERGED,True,69,52,1,https://github.com/ddm,Enable simple READs using NRF.updateServices,2,[],https://github.com/espruino/Espruino/pull/934,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/934#issuecomment-251365032,"This improves READ supports related to #915.
It is now possible to update a characteristic even when no connection is active. Notifications must be explicitly requested by using notify: true when calling NRF.updateServices.
Documentation has been updated to reflect the changes.",Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,935,2016-10-04T12:42:24Z,2016-10-04T13:15:27Z,2016-10-04T13:15:27Z,MERGED,True,22,4,1,https://github.com/ddm,Add indication support for GATT Characteristics,1,[],https://github.com/espruino/Espruino/pull/935,https://github.com/ddm,1,https://github.com/espruino/Espruino/pull/935,"This addresses the last part of issue #915.
Indication is now supported when characteristics are updated (only if the corresponding service/characteristic was properly declared using NRF.setServices).","This addresses the last part of issue #915.
Indication is now supported when characteristics are updated (only if the corresponding service/characteristic was properly declared using NRF.setServices).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,935,2016-10-04T12:42:24Z,2016-10-04T13:15:27Z,2016-10-04T13:15:27Z,MERGED,True,22,4,1,https://github.com/ddm,Add indication support for GATT Characteristics,1,[],https://github.com/espruino/Espruino/pull/935,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/935#issuecomment-251384374,"This addresses the last part of issue #915.
Indication is now supported when characteristics are updated (only if the corresponding service/characteristic was properly declared using NRF.setServices).",Nice change - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,940,2016-10-10T04:17:00Z,2016-10-10T04:17:10Z,2016-10-10T04:17:10Z,MERGED,True,208,0,1,https://github.com/nkolban,Initial upload of the build instructions.,2,[],https://github.com/espruino/Espruino/pull/940,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/940,A new child folder called boards/esp32/docs has been added which contains board specific build instructions and other notes that will become part of the history and on-going docs of the project.,A new child folder called boards/esp32/docs has been added which contains board specific build instructions and other notes that will become part of the history and on-going docs of the project.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,942,2016-10-11T08:08:53Z,2016-10-11T08:19:28Z,2016-10-11T08:19:28Z,CLOSED,False,1225,0,1,None,add a function to lock console,1,[],https://github.com/espruino/Espruino/pull/942,None,1,https://github.com/espruino/Espruino/pull/942,E.lock() .it will be lock console if you set password,E.lock() .it will be lock console if you set password,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,942,2016-10-11T08:08:53Z,2016-10-11T08:19:28Z,2016-10-11T08:19:28Z,CLOSED,False,1225,0,1,None,add a function to lock console,1,[],https://github.com/espruino/Espruino/pull/942,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/942#issuecomment-252844042,E.lock() .it will be lock console if you set password,"Hi,
Thanks - but it seems there's something wrong with the pull request. Looks like you just added jswrap_espruino.c as an extra file in the main directory, when it should be in src/jswrap_espruino.c. There is also no change to the .h file and it seems like you may have deleted the repository as well so I can't merge manually.
I'm copy/pasting the E.lock function now - but am renaming it to E.lockConsole and adding some documentation.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,943,2016-10-12T02:44:31Z,2016-10-12T02:44:53Z,2016-10-12T02:44:53Z,MERGED,True,1043,28,11,https://github.com/nkolban,Latest commits,5,[],https://github.com/espruino/Espruino/pull/943,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/943,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,944,2016-10-12T05:51:55Z,2016-10-12T06:34:43Z,2016-10-12T06:45:57Z,CLOSED,False,1,1,1,None,fix bug with jswarp_pin_writeAtTime,1,[],https://github.com/espruino/Espruino/pull/944,None,1,https://github.com/espruino/Espruino/pull/944,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,944,2016-10-12T05:51:55Z,2016-10-12T06:34:43Z,2016-10-12T06:45:57Z,CLOSED,False,1,1,1,None,fix bug with jswarp_pin_writeAtTime,1,[],https://github.com/espruino/Espruino/pull/944,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/944#issuecomment-253131188,,"That's the intended behaviour. It's so you can schedule things at the same time (since the JS takes a while to execute).
If you want to set the pin state after a delay, you cn just use digitalPulse",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,944,2016-10-12T05:51:55Z,2016-10-12T06:34:43Z,2016-10-12T06:45:57Z,CLOSED,False,1,1,1,None,fix bug with jswarp_pin_writeAtTime,1,[],https://github.com/espruino/Espruino/pull/944,None,3,https://github.com/espruino/Espruino/pull/944#issuecomment-253132213,,thank you,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,944,2016-10-12T05:51:55Z,2016-10-12T06:34:43Z,2016-10-12T06:45:57Z,CLOSED,False,1,1,1,None,fix bug with jswarp_pin_writeAtTime,1,[],https://github.com/espruino/Espruino/pull/944,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/944#issuecomment-253132801,,"No worries - thanks for contributing, but sorry I couldn't accept it this time",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,945,2016-10-12T17:02:27Z,2016-10-12T17:02:38Z,2016-10-12T17:02:38Z,MERGED,True,236,26,7,https://github.com/nkolban,Sync up for testing with 3rd parties.,1,[],https://github.com/espruino/Espruino/pull/945,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/945,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,947,2016-10-14T11:22:25Z,2016-10-14T15:04:42Z,2016-10-14T15:04:42Z,MERGED,True,18,11,3,https://github.com/jumjum123,Flash and save(),1,[],https://github.com/espruino/Espruino/pull/947,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/947,"Added functions for handling Flash to jshardware.c
Added -$I for esp_spi_flash to makefile
Changed settings for save() in ESP32.py","Added functions for handling Flash to jshardware.c
Added -$I for esp_spi_flash to makefile
Changed settings for save() in ESP32.py",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,949,2016-10-16T13:57:51Z,2016-10-16T14:25:48Z,2016-10-16T14:25:48Z,CLOSED,False,1,1,1,None,auto set pin mode in next using,4,[],https://github.com/espruino/Espruino/pull/949,None,1,https://github.com/espruino/Espruino/pull/949,"add new pin mode :""auto""","add new pin mode :""auto""",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,950,2016-10-16T14:28:40Z,2016-10-18T07:50:09Z,2016-10-18T07:50:09Z,MERGED,True,1,1,1,None,"add new pin mode:""auto""",4,[],https://github.com/espruino/Espruino/pull/950,None,1,https://github.com/espruino/Espruino/pull/950,auto set pin mode at next using,auto set pin mode at next using,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,950,2016-10-16T14:28:40Z,2016-10-18T07:50:09Z,2016-10-18T07:50:09Z,MERGED,True,1,1,1,None,"add new pin mode:""auto""",4,[],https://github.com/espruino/Espruino/pull/950,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/950#issuecomment-254128636,auto set pin mode at next using,Hi - what was the reason behind this? Do you think that the existing method of using 'undefined' like it says in the docs is confusing?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,950,2016-10-16T14:28:40Z,2016-10-18T07:50:09Z,2016-10-18T07:50:09Z,MERGED,True,1,1,1,None,"add new pin mode:""auto""",4,[],https://github.com/espruino/Espruino/pull/950,None,3,https://github.com/espruino/Espruino/pull/950#issuecomment-254403650,auto set pin mode at next using,"I am in the implementation of the project for some reason recently, the programmer previously left the job, new employees do not understand the hardware, when using pinMode, often do not understand the use of undefined parameter, ports can be configured to what mode. So I added a new mode auto, my English is not very good, so use the translation software. All of the above content comes from the translation software",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,950,2016-10-16T14:28:40Z,2016-10-18T07:50:09Z,2016-10-18T07:50:09Z,MERGED,True,1,1,1,None,"add new pin mode:""auto""",4,[],https://github.com/espruino/Espruino/pull/950,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/950#issuecomment-254432862,auto set pin mode at next using,"Ok, thanks for the explanation - it's a good translation!
I know it is difficult given the language, but in future it would really help if you could try and document the new arguments in the JSON area above. I'll do it this time though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,951,2016-10-19T22:43:41Z,2016-10-19T22:43:47Z,2016-10-19T22:43:47Z,MERGED,True,588,18,13,https://github.com/nkolban,Merge in of a variety of ESP32 additions,4,[],https://github.com/espruino/Espruino/pull/951,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/951,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,952,2016-10-20T18:50:33Z,2016-10-20T19:35:38Z,2016-10-20T19:35:38Z,MERGED,True,144,25,3,https://github.com/jumjum123,pin definitions and setWatch implementation,1,[],https://github.com/espruino/Espruino/pull/952,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/952,"Changes in ESP32.py to have only available pins, for example without pin
20, and to define ADC and UART pins.
Added interrupt handling for GPIO pins to support setWatch. Based on
description in driver/gpio.h","Changes in ESP32.py to have only available pins, for example without pin
20, and to define ADC and UART pins.
Added interrupt handling for GPIO pins to support setWatch. Based on
description in driver/gpio.h",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,953,2016-10-21T11:53:43Z,2016-10-21T13:58:29Z,2016-10-21T13:58:30Z,MERGED,True,95,0,2,https://github.com/jumjum123,Adding Documents,1,[],https://github.com/espruino/Espruino/pull/953,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/953,"Added documents for

GPIO handling
tasks, interrupts, etc used for Espruino","Added documents for

GPIO handling
tasks, interrupts, etc used for Espruino",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,957,2016-10-24T23:51:30Z,2016-10-24T23:51:34Z,2016-10-24T23:51:34Z,MERGED,True,198,52,3,https://github.com/nkolban,Merge,5,[],https://github.com/espruino/Espruino/pull/957,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/957,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,961,2016-10-27T03:48:04Z,2016-10-27T03:48:09Z,2016-10-27T03:48:09Z,MERGED,True,213,22,5,https://github.com/nkolban,Addition of first pass at SPI functions.,1,[],https://github.com/espruino/Espruino/pull/961,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/961,First pass at SPI functions.,First pass at SPI functions.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,963,2016-10-28T04:44:11Z,2016-10-28T04:44:14Z,2016-10-28T04:44:15Z,MERGED,True,47,16,3,https://github.com/nkolban,Changes requires for clean build on 2016-10-27 release of ESP-IDF.,1,[],https://github.com/espruino/Espruino/pull/963,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/963,"With the release of the 2016-10-27 new version of the ESP-IDF, Espruino would no longer build.  This commit changes the Makefiles to fix the build.","With the release of the 2016-10-27 new version of the ESP-IDF, Espruino would no longer build.  This commit changes the Makefiles to fix the build.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,965,2016-11-02T13:05:26Z,2016-11-02T13:05:30Z,2016-11-02T13:05:30Z,MERGED,True,582,68,6,https://github.com/nkolban,Merge into espruino/Espruino(ESP32),6,[],https://github.com/espruino/Espruino/pull/965,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/965,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,967,2016-11-07T15:00:43Z,2016-11-21T18:53:55Z,2016-11-21T18:59:20Z,CLOSED,False,430,6,8,https://github.com/jumjum123,Esp32 RTOS functions wrapper and a task for console read,4,[],https://github.com/espruino/Espruino/pull/967,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/967,"added wrapper to use functions around tasks and queues. rtosutils is
c-level, jswrap_rtos wraps utils to Espruino
added option for rtos (RTOS=1) to makefile
adding a task for reading uart and writing to a queue
use RTOS-option to switch between old polling and new queue based
input
docu for the changes","added wrapper to use functions around tasks and queues. rtosutils is
c-level, jswrap_rtos wraps utils to Espruino
added option for rtos (RTOS=1) to makefile
adding a task for reading uart and writing to a queue
use RTOS-option to switch between old polling and new queue based
input
docu for the changes",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,967,2016-11-07T15:00:43Z,2016-11-21T18:53:55Z,2016-11-21T18:59:20Z,CLOSED,False,430,6,8,https://github.com/jumjum123,Esp32 RTOS functions wrapper and a task for console read,4,[],https://github.com/espruino/Espruino/pull/967,https://github.com/jumjum123,2,https://github.com/espruino/Espruino/pull/967#issuecomment-262031553,"added wrapper to use functions around tasks and queues. rtosutils is
c-level, jswrap_rtos wraps utils to Espruino
added option for rtos (RTOS=1) to makefile
adding a task for reading uart and writing to a queue
use RTOS-option to switch between old polling and new queue based
input
docu for the changes",With new version of ESP-IDF we run into problems with Js command save(). This need to be fixed first. Could be a problem with interrupts (?),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,967,2016-11-07T15:00:43Z,2016-11-21T18:53:55Z,2016-11-21T18:59:20Z,CLOSED,False,430,6,8,https://github.com/jumjum123,Esp32 RTOS functions wrapper and a task for console read,4,[],https://github.com/espruino/Espruino/pull/967,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/967#issuecomment-262033111,"added wrapper to use functions around tasks and queues. rtosutils is
c-level, jswrap_rtos wraps utils to Espruino
added option for rtos (RTOS=1) to makefile
adding a task for reading uart and writing to a queue
use RTOS-option to switch between old polling and new queue based
input
docu for the changes",Could be watchdog timer if save() takes too long? Or it could just be writing to the wrong addresses and wiping itself out.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,968,2016-11-10T02:20:34Z,2016-11-10T02:20:38Z,2016-11-10T02:20:38Z,MERGED,True,57,3,2,https://github.com/nkolban,Accomodate latest ESP-IDF changes,1,[],https://github.com/espruino/Espruino/pull/968,https://github.com/nkolban,1,https://github.com/espruino/Espruino/pull/968,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,975,2016-11-13T22:56:30Z,2016-11-14T09:13:26Z,2016-11-14T09:13:26Z,MERGED,True,14,8,3,https://github.com/clowrey,Update vagrant and makefile,1,[],https://github.com/espruino/Espruino/pull/975,https://github.com/clowrey,1,https://github.com/espruino/Espruino/pull/975,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,975,2016-11-13T22:56:30Z,2016-11-14T09:13:26Z,2016-11-14T09:13:26Z,MERGED,True,14,8,3,https://github.com/clowrey,Update vagrant and makefile,1,[],https://github.com/espruino/Espruino/pull/975,https://github.com/clowrey,2,https://github.com/espruino/Espruino/pull/975#issuecomment-260219741,,I am still learning how GIT / GitHub works so I may have not done this entirely correct... Feel free to ignore/delete this pull request and make the changes yourself if you want.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,975,2016-11-13T22:56:30Z,2016-11-14T09:13:26Z,2016-11-14T09:13:26Z,MERGED,True,14,8,3,https://github.com/clowrey,Update vagrant and makefile,1,[],https://github.com/espruino/Espruino/pull/975,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/975#issuecomment-260281123,,"Looks good - thanks! In reality I actually use a newer compiler than the one you get from the ppa (same link as was in there before, just a newer tar file) but the one that's there should work, and hopefully won't need updating!
Just before I merge - did you really need python27 installed? Or was that while you were trying to sort out why hexmerge wouldn't run?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,975,2016-11-13T22:56:30Z,2016-11-14T09:13:26Z,2016-11-14T09:13:26Z,MERGED,True,14,8,3,https://github.com/clowrey,Update vagrant and makefile,1,[],https://github.com/espruino/Espruino/pull/975,https://github.com/clowrey,4,https://github.com/espruino/Espruino/pull/975#issuecomment-260281832,,"You're right you can remove the python27 addition, I later found out it was already installed in the default vagrant setup.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,979,2016-11-23T23:27:46Z,2016-11-24T23:24:32Z,2016-11-24T23:24:32Z,MERGED,True,47,14,4,https://github.com/wilberforce,"Allow single byte read from flash so that save() works, implement wifi.save() and wifi.restore()",6,[],https://github.com/espruino/Espruino/pull/979,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/979,"Currently a join to a network also starts AP mode.
If Ap mode is turned off, and a wifi.save() is applied only STA mode is started on reboot and the AP mode stays off
Although the wifi comes back  and responds to ping, a http server can't connect. It appears to require a wifi.disconnect() and wifi.connect again.","Currently a join to a network also starts AP mode.
If Ap mode is turned off, and a wifi.save() is applied only STA mode is started on reboot and the AP mode stays off
Although the wifi comes back  and responds to ping, a http server can't connect. It appears to require a wifi.disconnect() and wifi.connect again.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,981,2016-11-28T04:47:20Z,2016-11-28T11:22:35Z,2016-11-28T11:22:35Z,MERGED,True,14,7,1,https://github.com/wilberforce,implement some of the missing GPIO pin functions,1,[],https://github.com/espruino/Espruino/pull/981,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/981,"attempted to get the onewire working with a DS18B20 - not working yet ;-)
However - detect of boot button is working.
console.log('Button and GPIO tests');
var led = Pin(D22);
var toggle=1;

pinMode(D23, ""input"");
var ow = new OneWire(D23);

var sensors = ow.search().map(function (device) {
  return require(""DS18B20"").connect(ow, device);
});

function updateLed(){
  digitalWrite(led, toggle);
  toggle=!toggle;
}

// Boot button   1 up 0 down
digitalRead(D0);

function button_down() {
  updateLed();
  print('button');
}

setWatch(button_down,D0, {repeat:true, edge:""rising""});","attempted to get the onewire working with a DS18B20 - not working yet ;-)
However - detect of boot button is working.
console.log('Button and GPIO tests');
var led = Pin(D22);
var toggle=1;

pinMode(D23, ""input"");
var ow = new OneWire(D23);

var sensors = ow.search().map(function (device) {
  return require(""DS18B20"").connect(ow, device);
});

function updateLed(){
  digitalWrite(led, toggle);
  toggle=!toggle;
}

// Boot button   1 up 0 down
digitalRead(D0);

function button_down() {
  updateLed();
  print('button');
}

setWatch(button_down,D0, {repeat:true, edge:""rising""});",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,982,2016-11-29T07:50:57Z,2016-11-29T08:31:35Z,2016-11-29T08:31:35Z,MERGED,True,34,6,2,https://github.com/wilberforce,Esp32,2,[],https://github.com/espruino/Espruino/pull/982,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/982,"Add undocumented gpio_pad_select_gpio(gpioNum); to force pins to be output on digitalWrite()
Add telnet - compiles - however can't connect yet
Attempt to get interrupts enabled/disable so that onewire works - not working yet. Left attempts in place for discussion.
Suppress some compile warnings by casting (e.g Pin)","Add undocumented gpio_pad_select_gpio(gpioNum); to force pins to be output on digitalWrite()
Add telnet - compiles - however can't connect yet
Attempt to get interrupts enabled/disable so that onewire works - not working yet. Left attempts in place for discussion.
Suppress some compile warnings by casting (e.g Pin)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,983,2016-11-29T10:45:55Z,2016-11-29T10:46:47Z,2016-11-29T10:46:47Z,MERGED,True,433,6,11,https://github.com/jumjum123,"Esp32 base adress for singlebase partition, config change for untested functions",6,[],https://github.com/espruino/Espruino/pull/983,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/983,"According to espressif, base adress for partition file is 0x8000 from now on.
RTOS functions, marked as untested result in a reset. This behaviour can be switched off in menuconfig","According to espressif, base adress for partition file is 0x8000 from now on.
RTOS functions, marked as untested result in a reset. This behaviour can be switched off in menuconfig",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,986,2016-12-05T03:46:32Z,2016-12-05T03:47:14Z,2016-12-05T03:47:14Z,CLOSED,False,4877,89,41,https://github.com/wilberforce,Esp32,65,[],https://github.com/espruino/Espruino/pull/986,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/986,"Updates for ESP-idf SDK 1.0
Need to add library manually - not sure why
cp ../template/components/arduino-esp32/tools/sdk/lib/libethernet.a ../esp-idf/components/esp32/lib/
Espurino boot message not showing ;-(","Updates for ESP-idf SDK 1.0
Need to add library manually - not sure why
cp ../template/components/arduino-esp32/tools/sdk/lib/libethernet.a ../esp-idf/components/esp32/lib/
Espurino boot message not showing ;-(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,987,2016-12-05T03:52:11Z,2016-12-05T09:38:11Z,2016-12-05T09:38:11Z,MERGED,True,9,12,3,https://github.com/wilberforce,Updates for ESP-idf SDK 1.0,2,[],https://github.com/espruino/Espruino/pull/987,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/987,"Did a git pull in the ../template/components/arduino-esp32/ to refresh.
need to copy the new ethernet library -not sure why this did not update..
cp ../template/components/arduino-esp32/tools/sdk/lib/libethernet.a ../esp-idf/components/esp32/lib/
Compiles - but no boot prompt - possibly due to new partitions?","Did a git pull in the ../template/components/arduino-esp32/ to refresh.
need to copy the new ethernet library -not sure why this did not update..
cp ../template/components/arduino-esp32/tools/sdk/lib/libethernet.a ../esp-idf/components/esp32/lib/
Compiles - but no boot prompt - possibly due to new partitions?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,988,2016-12-06T01:33:39Z,2016-12-06T08:59:58Z,2016-12-06T08:59:58Z,MERGED,True,181,158,3,https://github.com/wilberforce,GPIO updates / onewire,8,[],https://github.com/espruino/Espruino/pull/988,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/988,"Restore GPIO updates, remove LOGD on gpio functions, attempt to get onewire to work with disabling interrupts - add one wire / gpio test harness
Get i2c working - tested with HD44780 lcd connected via PCF8574 8 bit IO expander","Restore GPIO updates, remove LOGD on gpio functions, attempt to get onewire to work with disabling interrupts - add one wire / gpio test harness
Get i2c working - tested with HD44780 lcd connected via PCF8574 8 bit IO expander",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/IrregularShed,1,https://github.com/espruino/Espruino/pull/990,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/990#issuecomment-265227189,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"I think if you look at the line below the one you changed, it tells you what you have to change it to for different devices.
The code that's there is for the 512kB ones. Perhaps change the line you said (as yours is most common), but also change the docs below to say about the 512k ones too.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/IrregularShed,3,https://github.com/espruino/Espruino/pull/990#issuecomment-265229942,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,It does... but that's not what the problem is :) on a 4MB one with the existing addresses you would end up overwriting a chunk of Espruino code and data with blank.bin (I know because I just did it while trying out the NodeMCU flasher)!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/990#issuecomment-265391538,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"You mean saved JS code, or the Espruino interpreter?
512k and 1M parts use the same underlying binary, so I don't see how it could be overwriting the interpreter.
The problem is that when you update the firmware you're pretty much guaranteed that the saved code will no longer work, so you really do want to overwrite it. If you reference any built-in function or object in your code, it'll store its address... But then on a new firmware the addresses will be different.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/opichals,5,https://github.com/espruino/Espruino/pull/990#issuecomment-274278915,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"By using the change in this PR it appears it fixed my not working mdns issues described at #642 (comment)
As described in the original description the info for the esptool params is not in sync in http://www.espruino.com/ESP8266_Flashing (is already correct) and in targets/esp8266/README_flash.txt (which is being distributed in the release .zip file).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/990#issuecomment-274432514,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"But does this work on the 512kB parts?
I know there is a comment immediately after the change which talks about 1M parts. Maybe we need to explicitly copy the flashing command and say: This one is for 512k, this one is for 1M.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/opichals,7,https://github.com/espruino/Espruino/pull/990#issuecomment-274433078,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"Not sure what you mean.
The file states above that the particular change concerns the 4Mb ESPs and it does note the correct addresses for other variants.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/990#issuecomment-274445588,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"So you're saying that with the changes suggested, the command will still work for flashing the 512k ESP8266?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/opichals,9,https://github.com/espruino/Espruino/pull/990#issuecomment-274446287,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"I think it will, as the command for 512k ESPs is at line 4 and is not touched in the PR (https://github.com/IrregularShed/Espruino/blob/c8f3a67e6012cef9bdfd566dd2c5fc566f6eb121/targets/esp8266/README_flash.txt#L4).
The 4M command is at line 11 https://github.com/IrregularShed/Espruino/blob/c8f3a67e6012cef9bdfd566dd2c5fc566f6eb121/targets/esp8266/README_flash.txt#L11",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,990,2016-12-06T18:06:14Z,2017-01-23T10:10:00Z,2017-01-23T10:10:00Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Corrects flashing memory address,1,[],https://github.com/espruino/Espruino/pull/990,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/990#issuecomment-274447009,The instructions at http://www.espruino.com/ESP8266_Flashing are correct - this file just needs a tweak.,"Cool - sorry, that was dumb - I missed that :(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,992,2016-12-08T21:57:36Z,2016-12-19T07:59:18Z,2016-12-19T09:13:33Z,MERGED,True,4,1,1,https://github.com/MaBecker,update pinStateToString() and dependencies,1,[],https://github.com/espruino/Espruino/pull/992,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/992,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,992,2016-12-08T21:57:36Z,2016-12-19T07:59:18Z,2016-12-19T09:13:33Z,MERGED,True,4,1,1,https://github.com/MaBecker,update pinStateToString() and dependencies,1,[],https://github.com/espruino/Espruino/pull/992,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/992#issuecomment-267903315,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,993,2016-12-12T11:52:12Z,2016-12-12T11:53:03Z,2016-12-19T09:14:06Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix issue #710,1,[],https://github.com/espruino/Espruino/pull/993,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/993,Uint32Array not correct on ESP8266 #710,Uint32Array not correct on ESP8266 #710,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/VVESTM,1,https://github.com/espruino/Espruino/pull/994,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/994#issuecomment-266775760,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Hi,
This looks good - really clean considering you've had to add a whole new set of libs.
Some things I noticed:

The Adafruit LCD stuff seems a bit odd to add here - and I'm not sure it's referenced anywhere? If it was used it should probably go into libs/graphics anyway
I'd also try and avoid committing the DSP lib examples and CMSIS documentation - although I realise I may have left some in for other platforms :)
There's already some code to force 32 bit writes to flash here: 
  
    
      Espruino/src/jswrap_flash.c
    
    
         Line 409
      in
      d228d53
    
  
  
    

        
          
           jsfSaveToFlash_writecb(0,cbData); 
        
    
  

  - if you just made that 7 calls instead of 3 you could avoid having to hack around with the heatshrink compressor I think?
It would be kindof nice to ifdef it so other platforms still used 4 byte alignment - I'm not sure how much difference it makes but it definitely makes regressions less likely :)
Pretty much all the modules that use the flash library will assume a 32 bit write, so won't work... I wonder whether it's worth trying to emulate 32 bit writes in jshardware.c so that 32 bit writes just pad the value with 0xFFFFFFFF (which shouldn't change the flash state for the other word).

But yeah, looks great! Hope you and Fred have a good Christmas!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/VVESTM,3,https://github.com/espruino/Espruino/pull/994#issuecomment-266997061,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Hi,
Thanks for your feedback Gordon.
Initially, I add quite a lot of things in targetlibs/stm32l4 in order to ease the merge with new FW version. But you're right, it is too much. I will clean this directory...
For the flash memory alignment, I will effectively add a switch to not impact other platforms.
The patch you propose is not sufficient. With L4, each write needs to be 64 bits, we cannot write a 32 bits to the flash.
The patch you propose will align the last write on a 64 bits but it needs to be done at each write. Perhaps something can be done in heatshrink_encode ?
If I use padding, it means I will loose half of the memory... :(
I will provide you a new patch set once I integrate your remarks.
By the way, if I remember well, you have some samples of this NucleoL476RG board ? If it is not the case, tell me...
Regards
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/994#issuecomment-267010019,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Thanks - yes, I seem to have a 476 Nucleo here.

The patch you propose will align the last write on a 64 bits but it needs to be done at each write.

I still don't think you need to modify heatshrink unless I am missing something. All of the flash writing is done by jsfSaveToFlash_writecb (and there is already 32 bit alignment code) - so all you need to do is tweak it to align to 64 bits instead (which you've done).
With your changes it will already align writes to 64 bits, and by putting 7x jsfSaveToFlash_writecb at the end you then ensure that the final 64 bits is always written.
I mean, you've added this to heatshrink:
       while(polled%8 != 0){
        /*  in this case, fill the memory with 0x0
            (data will be written in flash only on 64 bits multiples) */
        callback(0x0, cbdata);
        polled++;
      }

But that is no different from calling jsfSaveToFlash_writecb(0,cbData); 7 times - it's exactly the same callback, and I am already doing it to align to 32 bits - without having to hack something into a 3rd party library.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/VVESTM,5,https://github.com/espruino/Espruino/pull/994#issuecomment-267036695,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","OK,
I misunderstood your first post. I thought you want to remove all my patch related to flash.
In fact, only the patch done in heatshrink needs to be replaced by your proposal.
I agree in this case.
Thanks for feedback. I will push a new set of patch.
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/994#issuecomment-267046145,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Great - yes, I agree there isn't really a way around it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/VVESTM,7,https://github.com/espruino/Espruino/pull/994#issuecomment-270108501,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Hello Gordon,
First of all, I wish you an happy new year. I hope this year will be full of success for you and Espruino !!!
I have updated my branch with your remarks. Basically, I have :
removed unused files from targetlibs/stm32l4/lib/
added a switch to manage 64 bits alignment for flash
Regards
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/994#issuecomment-270382021,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent",Great - thanks! Merging :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,994,2016-12-13T08:59:02Z,2017-01-04T14:25:25Z,2017-01-04T16:53:47Z,MERGED,True,399307,13,280,https://github.com/VVESTM,Nucleo l476 rg,17,[],https://github.com/espruino/Espruino/pull/994,https://github.com/VVESTM,9,https://github.com/espruino/Espruino/pull/994#issuecomment-270422302,"Hello,
Here is a first pull request to support Espruino on ST NucleoL476RG board with Low Layers API.
I have created a new stm32_ll directory to deal with low layer interface as it is slightly different from previous SPL.
To compile it, just use :
NUCLEOL476RG=1 RELEASE=1 make
As this board embeds a ST-Link, you can also use DEBUG=1 option.
The port is not fully functional yet but I prefer to share it now. It is mainly missing I2C, SPI and JshAnalog functions.
Anyway, it is possible to use USART, Flash, digital input, output, timers, IRQ, ...
Gordon, I would appreciate to have your feedback on this work when you get time.
For information, I am off during Christmas period.
Regards
Vincent","Thanks Gordon.
Will push later for the missing components (SPI, I2C and analog)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,998,2016-12-15T00:57:19Z,2016-12-15T11:28:18Z,2016-12-15T11:28:18Z,MERGED,True,1,1,1,None,fix jshGetPinString pin undefined bug,1,[],https://github.com/espruino/Espruino/pull/998,None,1,https://github.com/espruino/Espruino/pull/998,thanks,thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,998,2016-12-15T00:57:19Z,2016-12-15T11:28:18Z,2016-12-15T11:28:18Z,MERGED,True,1,1,1,None,fix jshGetPinString pin undefined bug,1,[],https://github.com/espruino/Espruino/pull/998,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/998#issuecomment-267263951,thanks,"Great - thanks! I'm leaving this open for now because I need to update the comments for jshGetPinString and also check that everywhere it's called the buffer is the correct size (I guess it should be 10, because it needs the trailing 0 as well)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1002,2016-12-18T04:24:26Z,2016-12-19T10:53:45Z,2016-12-19T10:53:45Z,MERGED,True,236,69,8,https://github.com/wilberforce,"more work on spi code, add E.getTemperature();",8,[],https://github.com/espruino/Espruino/pull/1002,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1002,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1003,2016-12-19T04:58:38Z,2017-01-24T09:24:38Z,2017-01-24T09:24:38Z,CLOSED,False,2,1,1,None,fixed JshPinState #defines have changed bug,1,[],https://github.com/espruino/Espruino/pull/1003,None,1,https://github.com/espruino/Espruino/pull/1003,"i tested it,","i tested it,",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1003,2016-12-19T04:58:38Z,2017-01-24T09:24:38Z,2017-01-24T09:24:38Z,CLOSED,False,2,1,1,None,fixed JshPinState #defines have changed bug,1,[],https://github.com/espruino/Espruino/pull/1003,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1003#issuecomment-274618768,"i tested it,","Hi Gordon,
as far as I remember,  this is already fixed with PR #992",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1003,2016-12-19T04:58:38Z,2017-01-24T09:24:38Z,2017-01-24T09:24:38Z,CLOSED,False,2,1,1,None,fixed JshPinState #defines have changed bug,1,[],https://github.com/espruino/Espruino/pull/1003,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1003#issuecomment-274751201,"i tested it,","Yes, I think so.
It's an annoying one as (I think) pinStateToString must only be for debugging purposes anyway :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1006,2016-12-21T05:35:34Z,2016-12-22T18:22:33Z,2016-12-22T18:22:33Z,MERGED,True,6,3,2,https://github.com/wilberforce,Fix regression where HTTPS without cert/ca or key failed,2,[],https://github.com/espruino/Espruino/pull/1006,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1006,"Apply upstream update:
fc38156#diff-8be325101851519f961a95785af06b52R450
https now works without an certificates loaded:
require(""http"").get(""https://www.google.com"", function(res) {
res.on('data', function(data) { console.log(data); });
});","Apply upstream update:
fc38156#diff-8be325101851519f961a95785af06b52R450
https now works without an certificates loaded:
require(""http"").get(""https://www.google.com"", function(res) {
res.on('data', function(data) { console.log(data); });
});",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1012,2017-01-05T06:33:16Z,2017-01-05T20:27:57Z,2017-01-05T20:27:57Z,MERGED,True,354,245,6,https://github.com/wilberforce,Split i2c and spi from jshardware.c - to allow easier port to esp-idf implementation,2,[],https://github.com/espruino/Espruino/pull/1012,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1012,"Please note there are changes to the linked part of the Makefile that might wont compile - currently getting this error:
/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/4.8.5/../../../../xtensa-esp32-elf/bin/ld: warning: cannot find entry symbol _start; not setting start address","Please note there are changes to the linked part of the Makefile that might wont compile - currently getting this error:
/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/4.8.5/../../../../xtensa-esp32-elf/bin/ld: warning: cannot find entry symbol _start; not setting start address",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1013,2017-01-05T23:40:14Z,2017-01-09T11:19:08Z,2017-01-09T11:19:08Z,MERGED,True,158,14,2,https://github.com/wilberforce,"Fix Makefile, use esp-idf api for i2c - untested",3,[],https://github.com/espruino/Espruino/pull/1013,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1013,"I got it compiling by:
reverting the makefile
git pull and build of the arduino libraries
copy esp32\template\components\arduino-esp32\tools\sdk\lib libs to:
esp32\esp-idf\components\esp32\lib
For some reason the libs at esp32\esp-idf\components\esp32\lib are not updating after a git submodule update","I got it compiling by:
reverting the makefile
git pull and build of the arduino libraries
copy esp32\template\components\arduino-esp32\tools\sdk\lib libs to:
esp32\esp-idf\components\esp32\lib
For some reason the libs at esp32\esp-idf\components\esp32\lib are not updating after a git submodule update",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1014,2017-01-06T05:28:11Z,2017-01-06T08:19:43Z,2017-01-06T09:05:40Z,MERGED,True,2,0,1,https://github.com/MaBecker,ignore Espruino Software Reference files,1,[],https://github.com/espruino/Espruino/pull/1014,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1014,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,1,https://github.com/espruino/Espruino/pull/1017,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1017#issuecomment-271359330,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","Great, thanks! Just checking - has this been tested at all?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,3,https://github.com/espruino/Espruino/pull/1017#issuecomment-271371309,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.",I've tested superficially on esp8266. The build is too large on other platforms?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1017#issuecomment-271508572,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","By superficially, do you mean you've tried it with an SD card, or just got it compiling?
On other platforms, you need to do a compile with RELEASE=1
I'm a bit busy at the moment but I'll give this a go on the Original and Pico boards when I get a chance - thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,5,https://github.com/espruino/Espruino/pull/1017#issuecomment-271544175,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","I tried with an SD card (only fs.readdir(""/"")) successfully with #define _WORD_ACCESS 0 in file libs/filesystem/fat_sd/ffconf.h on the esp8266.
I tried the espruino_1v90.38 build of ESPRUINO_1V3 as one of the failed travis builds and get a similar error with the original fat_sd-code:
/usr/bin/../lib/gcc/arm-none-eabi/6.2.1/../../../../arm-none-eabi/bin/ld: region 'FLASH' overflowed by 7248 bytes
Please let me know how I can help!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1017#issuecomment-271559531,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","Where are you setting _WORD_ACCESS == 0 ?
/* Enable word access to the FAT structure */
This could get done in a conditional test for the esp_8266 build",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,7,https://github.com/espruino/Espruino/pull/1017#issuecomment-271562690,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","I modified the option _WORD_ACCESS 0 in file libs/filesystem/fat_sd/ffconf.h, near the bottom of the file.
It would be great to have a conditional test for the esp8266 build, thanks for considering!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1017#issuecomment-271602995,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","region 'FLASH' overflowed by 7248 bytes

I think you're probably using an old compiler, or not using RELEASE=1 - the newer compilers do a much better job size-wise. (I know travis gets this too - I haven't got around to fixing the build script to use the new gcc-embedded toolchain)
Just tested and it works, so merging!
Is _WORD_ACCESS==0 really required for ESP8266? I'd have thought it'd be ok as it's just reading via SPI (it has to be byte by byte anyway). If it is needed then an ifdef ESP8266 would be an idea though",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,9,https://github.com/espruino/Espruino/pull/1017#issuecomment-271623418,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","I've used the exaxt same compiler version as your travis test system and applied the same exported vars, which does not include RELEASE=1. Did you try another travis build to check the size?
I don't know if the #define _WORD_ACCESS 0 is really needed, but with the #define _WORD_ACCESS 1 my esp8266 crashes immediatly on fs.readdir(). At least setting the option to 0 was useful for me.
The option _WORD_ACCESS is dropped in version 13 of the library. The default is #define _WORD_ACCESS 0 up to version 12.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/1017#issuecomment-271625571,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","Yes, the compiler used in Travis is the old one - it needs changing really. IMO I should just package everything up into one Travis build at the same time - it'd be a lot more friendly on their systems.
So in v13 there is no _WORD_ACCESS at all? Because it is 0 all the time, or they thought it wasn't needed?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/1017#issuecomment-271626316,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.",Actually I just disabled it completely anyway. The comment below _WORD_ACCESS seems to imply that I shouldn't have used it even on ARM,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/hmut,12,https://github.com/espruino/Espruino/pull/1017#issuecomment-271632404,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","The investigation why the option is dropped in 13 may end in a very long night...
Isn't the standard endianess on arm little endian? The option promises ""improved performance and reduced code size"" and it was no problem on any official boards so far?
Thanks a lot for merging and fixing the esp8266 build!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1017,2017-01-09T18:00:34Z,2017-01-10T15:20:59Z,2017-01-10T17:18:48Z,MERGED,True,459,394,3,https://github.com/hmut,update FatFs (C)ChaN from R0.10a to R0.10c,1,[],https://github.com/espruino/Espruino/pull/1017,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1017#issuecomment-271637716,"I've created the diffs for the filesystem version upgrade as suggested by Wilberforce in the forum. The changes probably does't solve any reported issues on ESP8266, but five bugs in the lib and adds a feature. From changelog:
Fixed a hard error in the disk I/O layer can collapse the directory entry.
Fixed LFN entry is not deleted on delete/rename an object with lossy converted SFN.
Added a configuration option for the platforms without RTC. (_FS_NORTC)
Fixed volume label created by Mac OS X cannot be retrieved with f_getlabel().
Fixed a potential problem of FAT access that can appear on disk error.
Fixed null pointer dereference on attempting to delete the root direcotry.","ARM can be any endianness as far as I know - it's implementation dependent :s
No, it wasn't a problem on existing boards, but if they suggest that I shouldn't use _WORD_ACCESS then I should probably do what they say :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1018,2017-01-10T09:00:34Z,2017-01-10T16:27:37Z,2017-01-10T16:27:37Z,MERGED,True,212,16,6,https://github.com/wilberforce,Remove arduino lib dependancies,5,[],https://github.com/espruino/Espruino/pull/1018,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1018,"the template/components needs to be removed or renamed to components-1
Steps for rebuilding after a esp-idf update:
in esp-idf:
a. git pull
b. git submodule init
c. git submodule update

in the template folder:
a. remove components folder or remove it
b. make clean
c. make
d. say yes to any questions relating to updated config

3 . cd Espruino folder
git pull
make clean
make



a. before flashing firmware - erase the flash
esptool.py --chip esp32 --port COM3 --baud 921600 erase_flash
b. flash firmware","the template/components needs to be removed or renamed to components-1
Steps for rebuilding after a esp-idf update:
in esp-idf:
a. git pull
b. git submodule init
c. git submodule update

in the template folder:
a. remove components folder or remove it
b. make clean
c. make
d. say yes to any questions relating to updated config

3 . cd Espruino folder
git pull
make clean
make



a. before flashing firmware - erase the flash
esptool.py --chip esp32 --port COM3 --baud 921600 erase_flash
b. flash firmware",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1019,2017-01-11T04:56:30Z,2017-01-11T08:00:57Z,2017-01-11T08:00:57Z,MERGED,True,119,371,2,https://github.com/wilberforce,first pass at i2c and spi functions - untested,1,[],https://github.com/espruino/Espruino/pull/1019,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1019,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1020,2017-01-12T04:36:59Z,2017-01-12T07:58:56Z,2017-01-12T07:58:57Z,MERGED,True,42,99,3,https://github.com/wilberforce,Wifi updates - Remove ESP_LOG statements - change to jsWarn and jsError,3,[],https://github.com/espruino/Espruino/pull/1020,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1020,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1024,2017-01-13T13:13:26Z,2017-01-13T15:39:01Z,2017-01-13T15:39:01Z,MERGED,True,281,22,3,https://github.com/VVESTM,adding spi and i2c to NucleoL476RG board,2,[],https://github.com/espruino/Espruino/pull/1024,https://github.com/VVESTM,1,https://github.com/espruino/Espruino/pull/1024,"Hello Gordon,
Here are two commits to add SPI and I2C support to Nucleo L476 RG board.
Vincent","Hello Gordon,
Here are two commits to add SPI and I2C support to Nucleo L476 RG board.
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1024,2017-01-13T13:13:26Z,2017-01-13T15:39:01Z,2017-01-13T15:39:01Z,MERGED,True,281,22,3,https://github.com/VVESTM,adding spi and i2c to NucleoL476RG board,2,[],https://github.com/espruino/Espruino/pull/1024,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1024#issuecomment-272472757,"Hello Gordon,
Here are two commits to add SPI and I2C support to Nucleo L476 RG board.
Vincent",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1025,2017-01-15T03:18:13Z,2017-01-16T09:22:59Z,2017-01-16T09:22:59Z,MERGED,True,17,6,3,https://github.com/wilberforce,Add tar target contain .bin for flashing,3,[],https://github.com/espruino/Espruino/pull/1025,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1025,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1026,2017-01-15T14:48:20Z,2017-01-16T09:15:40Z,2017-01-16T09:15:40Z,MERGED,True,24,19,1,https://github.com/rsmeral,Puck docs: Added detail and minor fixes to magnetometer functions,1,[],https://github.com/espruino/Espruino/pull/1026,https://github.com/rsmeral,1,https://github.com/espruino/Espruino/pull/1026,As discussed in http://forum.espruino.com/conversations/298349/#comment13406335,As discussed in http://forum.espruino.com/conversations/298349/#comment13406335,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1026,2017-01-15T14:48:20Z,2017-01-16T09:15:40Z,2017-01-16T09:15:40Z,MERGED,True,24,19,1,https://github.com/rsmeral,Puck docs: Added detail and minor fixes to magnetometer functions,1,[],https://github.com/espruino/Espruino/pull/1026,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1026#issuecomment-272809098,As discussed in http://forum.espruino.com/conversations/298349/#comment13406335,Looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1027,2017-01-21T16:54:25Z,2017-01-23T09:02:37Z,2017-01-23T09:02:37Z,MERGED,True,8,3,1,https://github.com/opichals,Make sntpSync use setTime() not to break setInterval(),1,[],https://github.com/espruino/Espruino/pull/1027,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1027,"The setTime() properly sets the jsiLastIdleTime which is used
in the _jswrap_interface_setTimeoutOrInterval to trigger timers.","The setTime() properly sets the jsiLastIdleTime which is used
in the _jswrap_interface_setTimeoutOrInterval to trigger timers.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1027,2017-01-21T16:54:25Z,2017-01-23T09:02:37Z,2017-01-23T09:02:37Z,MERGED,True,8,3,1,https://github.com/opichals,Make sntpSync use setTime() not to break setInterval(),1,[],https://github.com/espruino/Espruino/pull/1027,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1027#issuecomment-274432688,"The setTime() properly sets the jsiLastIdleTime which is used
in the _jswrap_interface_setTimeoutOrInterval to trigger timers.",Cool - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1028,2017-01-21T19:10:45Z,2017-01-23T08:56:47Z,2017-01-23T08:56:47Z,MERGED,True,19,0,2,https://github.com/opichals,Added Date.prototype.toISOString() method,1,[],https://github.com/espruino/Espruino/pull/1028,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1028,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1028,2017-01-21T19:10:45Z,2017-01-23T08:56:47Z,2017-01-23T08:56:47Z,MERGED,True,19,0,2,https://github.com/opichals,Added Date.prototype.toISOString() method,1,[],https://github.com/espruino/Espruino/pull/1028,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1028#issuecomment-274431535,,Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1029,2017-01-21T22:10:16Z,2017-01-22T09:29:52Z,2017-01-22T09:29:53Z,MERGED,True,5,4,3,https://github.com/wilberforce,"repair Makefile so bin and build tar get built, fix typo for xTaskCreatePinnedToCore, bin partition 0x8000",1,[],https://github.com/espruino/Espruino/pull/1029,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1029,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1032,2017-01-23T21:30:25Z,2017-01-26T11:14:15Z,2017-01-26T11:18:09Z,MERGED,True,4,0,1,https://github.com/MaBecker,set WIFI_DBG 0  if def RELEASE,1,[],https://github.com/espruino/Espruino/pull/1032,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1032,do not include Wifi  debug statements when using RELEASE=1,do not include Wifi  debug statements when using RELEASE=1,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1032,2017-01-23T21:30:25Z,2017-01-26T11:14:15Z,2017-01-26T11:18:09Z,MERGED,True,4,0,1,https://github.com/MaBecker,set WIFI_DBG 0  if def RELEASE,1,[],https://github.com/espruino/Espruino/pull/1032,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1032#issuecomment-275342447,do not include Wifi  debug statements when using RELEASE=1,"Hi @gfwilliams,
this is the second part of RELEASE in ESP source covering the WIFI part, please commit - thanks",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1033,2017-01-23T22:28:17Z,2017-01-25T08:58:58Z,2017-01-25T08:59:40Z,MERGED,True,4,0,1,https://github.com/MaBecker,set NET_DBG 0 if def RELEASE,1,[],https://github.com/espruino/Espruino/pull/1033,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1033,do not include NET debug statements when using RELEASE=1,do not include NET debug statements when using RELEASE=1,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1033,2017-01-23T22:28:17Z,2017-01-25T08:58:58Z,2017-01-25T08:59:40Z,MERGED,True,4,0,1,https://github.com/MaBecker,set NET_DBG 0 if def RELEASE,1,[],https://github.com/espruino/Espruino/pull/1033,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1033#issuecomment-275049465,do not include NET debug statements when using RELEASE=1,"Hi @gfwilliams,
Reason behind this: remove DBG statements to shrink binary file size, as there is a limit.
Not sure any more if this is the correct way connecting it to RELEASE.
Should this be better controlled by a separate setting like RELEASE_ESP8266_NET ?
Same for #1032,  use RELEASE_ESP8266_WIFI
What do you suggest ?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1033,2017-01-23T22:28:17Z,2017-01-25T08:58:58Z,2017-01-25T08:59:40Z,MERGED,True,4,0,1,https://github.com/MaBecker,set NET_DBG 0 if def RELEASE,1,[],https://github.com/espruino/Espruino/pull/1033,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1033#issuecomment-275053290,do not include NET debug statements when using RELEASE=1,That looks fine to me really... I think with RELEASE you should expect that most debugging info is removes,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1034,2017-01-24T09:55:52Z,2017-01-24T10:23:10Z,2017-08-04T16:30:20Z,MERGED,True,7,0,1,https://github.com/MaBecker,enable Pin.toggle() on ESPs,1,[],https://github.com/espruino/Espruino/pull/1034,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1034,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1034,2017-01-24T09:55:52Z,2017-01-24T10:23:10Z,2017-08-04T16:30:20Z,MERGED,True,7,0,1,https://github.com/MaBecker,enable Pin.toggle() on ESPs,1,[],https://github.com/espruino/Espruino/pull/1034,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1034#issuecomment-274764388,,"Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1038,2017-01-28T04:07:30Z,2017-01-29T10:39:02Z,2017-01-29T10:39:02Z,MERGED,True,7,6,1,https://github.com/wilberforce,update SPI to match changed headers,1,[],https://github.com/espruino/Espruino/pull/1038,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1038,Still untested!,Still untested!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1039,2017-01-28T12:13:02Z,2017-01-30T08:48:04Z,2017-01-30T08:53:31Z,MERGED,True,3,1,1,https://github.com/OwenBrotherwood,ld errors with mispelt BOARD definition,1,[],https://github.com/espruino/Espruino/pull/1039,https://github.com/OwenBrotherwood,1,https://github.com/espruino/Espruino/pull/1039,"It is very easy to make a mistake writing in the board name when doing BOARD=1 RELEASE=1 make
Make a note of it.

Background:
I was getting ld errors and was busy wasting time with google: it was just a missing digit in my BOARD
Possible need for a flag, BOARDDEFINED, in connection with Makefile: in the meantime, a heads up
LD espruino
/usr/bin/ld: cannot find -lstdc++
collect2: error: ld returned 1 exit status
make: *** [espruino] Error 1","It is very easy to make a mistake writing in the board name when doing BOARD=1 RELEASE=1 make
Make a note of it.

Background:
I was getting ld errors and was busy wasting time with google: it was just a missing digit in my BOARD
Possible need for a flag, BOARDDEFINED, in connection with Makefile: in the meantime, a heads up
LD espruino
/usr/bin/ld: cannot find -lstdc++
collect2: error: ld returned 1 exit status
make: *** [espruino] Error 1",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1039,2017-01-28T12:13:02Z,2017-01-30T08:48:04Z,2017-01-30T08:53:31Z,MERGED,True,3,1,1,https://github.com/OwenBrotherwood,ld errors with mispelt BOARD definition,1,[],https://github.com/espruino/Espruino/pull/1039,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1039#issuecomment-276007127,"It is very easy to make a mistake writing in the board name when doing BOARD=1 RELEASE=1 make
Make a note of it.

Background:
I was getting ld errors and was busy wasting time with google: it was just a missing digit in my BOARD
Possible need for a flag, BOARDDEFINED, in connection with Makefile: in the meantime, a heads up
LD espruino
/usr/bin/ld: cannot find -lstdc++
collect2: error: ld returned 1 exit status
make: *** [espruino] Error 1","Thanks - yes, it's not ideal. Not sure it's worth fixing though - but the docs are a good idea.
Worth noting that if you had all the needed libs installed I think it would actually build fine, but just for linux",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1039,2017-01-28T12:13:02Z,2017-01-30T08:48:04Z,2017-01-30T08:53:31Z,MERGED,True,3,1,1,https://github.com/OwenBrotherwood,ld errors with mispelt BOARD definition,1,[],https://github.com/espruino/Espruino/pull/1039,https://github.com/OwenBrotherwood,3,https://github.com/espruino/Espruino/pull/1039#issuecomment-276008070,"It is very easy to make a mistake writing in the board name when doing BOARD=1 RELEASE=1 make
Make a note of it.

Background:
I was getting ld errors and was busy wasting time with google: it was just a missing digit in my BOARD
Possible need for a flag, BOARDDEFINED, in connection with Makefile: in the meantime, a heads up
LD espruino
/usr/bin/ld: cannot find -lstdc++
collect2: error: ld returned 1 exit status
make: *** [espruino] Error 1","I work thru the docs idea with a ""low noise"" input :)
I have found the forum and gitter groups so I am now comfortable.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1043,2017-01-31T15:16:41Z,2017-01-31T15:58:55Z,2017-01-31T15:58:55Z,MERGED,True,2,2,1,https://github.com/urish,Update Dockerfile to use latest arm build tools,1,[],https://github.com/espruino/Espruino/pull/1043,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1043,This fixes the build for the Micro:Bit inside Docker,This fixes the build for the Micro:Bit inside Docker,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1043,2017-01-31T15:16:41Z,2017-01-31T15:58:55Z,2017-01-31T15:58:55Z,MERGED,True,2,2,1,https://github.com/urish,Update Dockerfile to use latest arm build tools,1,[],https://github.com/espruino/Espruino/pull/1043,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1043#issuecomment-276404402,This fixes the build for the Micro:Bit inside Docker,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1044,2017-01-31T15:45:59Z,2017-01-31T15:49:14Z,2017-01-31T15:49:14Z,CLOSED,False,73,57,5,https://github.com/MaBecker,neat build settings for ESP8266 boards,19,[],https://github.com/espruino/Espruino/pull/1044,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1044,"vars: 1.600
modules: USE_NET=1, USE_TELNET=1, USE_GRAPHICS=1 and USE_CRYPTO=1
options: RELEASE=1
result: freeHeap 10.000","vars: 1.600
modules: USE_NET=1, USE_TELNET=1, USE_GRAPHICS=1 and USE_CRYPTO=1
options: RELEASE=1
result: freeHeap 10.000",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1044,2017-01-31T15:45:59Z,2017-01-31T15:49:14Z,2017-01-31T15:49:14Z,CLOSED,False,73,57,5,https://github.com/MaBecker,neat build settings for ESP8266 boards,19,[],https://github.com/espruino/Espruino/pull/1044,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1044#issuecomment-276401072,"vars: 1.600
modules: USE_NET=1, USE_TELNET=1, USE_GRAPHICS=1 and USE_CRYPTO=1
options: RELEASE=1
result: freeHeap 10.000",NO - THIS is to much ......,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1045,2017-01-31T16:43:39Z,2017-01-31T17:03:39Z,2017-02-01T09:43:38Z,MERGED,True,381,98,4,https://github.com/VVESTM,Nucleo l476 rg analog,3,[],https://github.com/espruino/Espruino/pull/1045,https://github.com/VVESTM,1,https://github.com/espruino/Espruino/pull/1045,"Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent","Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1045,2017-01-31T16:43:39Z,2017-01-31T17:03:39Z,2017-02-01T09:43:38Z,MERGED,True,381,98,4,https://github.com/VVESTM,Nucleo l476 rg analog,3,[],https://github.com/espruino/Espruino/pull/1045,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1045#issuecomment-276424866,"Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent",Cool - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1045,2017-01-31T16:43:39Z,2017-01-31T17:03:39Z,2017-02-01T09:43:38Z,MERGED,True,381,98,4,https://github.com/VVESTM,Nucleo l476 rg analog,3,[],https://github.com/espruino/Espruino/pull/1045,https://github.com/VVESTM,3,https://github.com/espruino/Espruino/pull/1045#issuecomment-276598238,"Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent","Thanks Gordon
With this pull request, the SW concerning stm32 low layer api on NucleoL476RG is pretty complete.
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1045,2017-01-31T16:43:39Z,2017-01-31T17:03:39Z,2017-02-01T09:43:38Z,MERGED,True,381,98,4,https://github.com/VVESTM,Nucleo l476 rg analog,3,[],https://github.com/espruino/Espruino/pull/1045,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1045#issuecomment-276605584,"Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent","Wow, thanks! How portable do you think this is to different parts?
There's a post on the forum at the moment where someone is trying to port to the Nucleo F413:
http://forum.espruino.com/conversations/299344/#comment13447980",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1045,2017-01-31T16:43:39Z,2017-01-31T17:03:39Z,2017-02-01T09:43:38Z,MERGED,True,381,98,4,https://github.com/VVESTM,Nucleo l476 rg analog,3,[],https://github.com/espruino/Espruino/pull/1045,https://github.com/VVESTM,5,https://github.com/espruino/Espruino/pull/1045#issuecomment-276614063,"Hello Gordon,
Here are some updates for Nucleo L476 RG board.
It adds adc and dac functionnalities.
Regards
Vincent","Low Layer API are done to ease the portage on differents chips. It will be portable if there is no big difference on the IP used.
Unfortunately, this is not yet available on all the platforms. The first family to benefit of this API was L4. It will come for F4 during first or second quarter. So need to wait a little bit more for F413...
Once the LL is available on F4, it should be straight forward to run my software on this board.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1046,2017-02-03T13:20:03Z,2017-02-03T13:52:54Z,2017-02-03T13:52:54Z,MERGED,True,1,0,1,https://github.com/VVESTM,get travis build for nucleoL476rg board,1,[],https://github.com/espruino/Espruino/pull/1046,https://github.com/VVESTM,1,https://github.com/espruino/Espruino/pull/1046,"Hi,
Pull request to add the nucleoL476rg build in travis.","Hi,
Pull request to add the nucleoL476rg build in travis.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1046,2017-02-03T13:20:03Z,2017-02-03T13:52:54Z,2017-02-03T13:52:54Z,MERGED,True,1,0,1,https://github.com/VVESTM,get travis build for nucleoL476rg board,1,[],https://github.com/espruino/Espruino/pull/1046,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1046#issuecomment-277251255,"Hi,
Pull request to add the nucleoL476rg build in travis.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1049,2017-02-04T00:20:30Z,2017-02-06T11:43:54Z,2017-03-31T20:07:14Z,MERGED,True,44,0,4,https://github.com/urish,Add NRF.setScanResponse() method,2,[],https://github.com/espruino/Espruino/pull/1049,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1049,Lets the user specify/override the scan response data,Lets the user specify/override the scan response data,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1049,2017-02-04T00:20:30Z,2017-02-06T11:43:54Z,2017-03-31T20:07:14Z,MERGED,True,44,0,4,https://github.com/urish,Add NRF.setScanResponse() method,2,[],https://github.com/espruino/Espruino/pull/1049,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1049#issuecomment-277658690,Lets the user specify/override the scan response data,Thanks - looks fantastic. You don't fancy implementing anything else do you? :),True,{'THUMBS_UP': ['https://github.com/urish']}
espruino/Espruino,https://github.com/espruino/Espruino,1052,2017-02-06T14:55:47Z,2017-02-06T15:04:25Z,2017-02-06T15:05:46Z,MERGED,True,7,2,2,https://github.com/urish,Fix unaligned reads on NRF51 devices,1,[],https://github.com/espruino/Espruino/pull/1052,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1052,issue #1051,issue #1051,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1052,2017-02-06T14:55:47Z,2017-02-06T15:04:25Z,2017-02-06T15:05:46Z,MERGED,True,7,2,2,https://github.com/urish,Fix unaligned reads on NRF51 devices,1,[],https://github.com/espruino/Espruino/pull/1052,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1052#issuecomment-277709058,issue #1051,thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/nkrkv,1,https://github.com/espruino/Espruino/pull/1053,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1053#issuecomment-277744004,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","This is fantastic - thanks! I've been avoiding this because I don't understand or like messing with USB descriptors :)
I see you changed bDeviceClass - so does this change enumeration even when USB HID isn't enabled?
I just want to make sure it won't cause problems without since this code is also used for the bootloader - and if I ship out new boards with a dodgy bootloader it'll be really bad news :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/nkrkv,3,https://github.com/espruino/Espruino/pull/1053#issuecomment-277746991,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","You’re welcome.
We’ll test the no-HID scenario tomorrow to be sure. I’ll put a note on results.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1053#issuecomment-277766210,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/nkrkv,5,https://github.com/espruino/Espruino/pull/1053#issuecomment-278288108,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","We’ve done a couple of test and all they have passed.
Take a fresh Espruino (Iskra JS) with no HID enabled, Windows 10 with a STM32 driver and try:

Power up the board via external power supply, enter bootloader, plug via USB, try to connect and communicate … OK
Plug via USB, enter bootloader, try to connect and communicate … OK

If you’d take a look at ~/.arduino15/packages/arduino/hardware/avr/1.6.17/cores/arduino/USBCore.cpp available after installing Arduino IDE, you’ll see that ATmega32Ux Arduinos use the same class/subclass/protocol combo. Although it is used only when the Arduino is not in bootloader mode, their bootloader “Caterina” presents itself as a CDC only. Perhaps, it is to keep bootloader as small as it can be.
To me it looks like the merge is safe. However, I insist upon you’ll check the behavior by yourself because it is severe to your business. I don’t want a catastrophe.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1053#issuecomment-278289512,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux","Great - thanks for checking! I'll give it a try and make sure.
This'll be a huge help - it's always been annoying that HID didn't work on Windows.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1053,2017-02-06T16:37:59Z,2017-02-13T12:07:43Z,2017-02-13T12:07:43Z,MERGED,True,65,47,3,https://github.com/nkrkv,Fix HID on Windows,1,[],https://github.com/espruino/Espruino/pull/1053,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1053#issuecomment-279369499,"This is a fix of an old standing problem (http://forum.espruino.com/conversations/275155/) when Windows ignores Espruino’s HID role in most cases.
The reason is Espruino in such cases serves both a CDC device and a HID to OS simultaneously. However, both devices share VID/PID. And iff a CDC-driver from STM32 is installed in the system Windows refuses to consider the device as a HID. In other words, Espruino HID works on Windows until the driver will be installed.
The changes resolve the conflict. Tested on Win10, Mac, Linux",Just tested - the bootloader seems to work great on all platforms. Merging - thanks! :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/Whizzard,1,https://github.com/espruino/Espruino/pull/1058,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }","see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1058#issuecomment-278609530,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }","Thanks - I'm afraid I did this at about the same time though :(
766a577",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1058#issuecomment-278609909,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }",Sorry to waste your work - I can't believe we did basically the same thing within half an hour of each other,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/Whizzard,4,https://github.com/espruino/Espruino/pull/1058#issuecomment-278666237,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }","No problem. Sounds funny that you did it just the same time.
I was digging into the notification things and found this by accident and it did not look too complicated.
Anyway, I found my solution a bit nicer - with the flags being a nested object. ;-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1058#issuecomment-278667341,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }",I think it is a nested object in mine too - hopefully it'll be working like https://webbluetoothcg.github.io/web-bluetooth/#bluetoothremotegattcharacteristic :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1058,2017-02-09T09:43:15Z,2017-02-09T10:55:27Z,2017-02-13T09:50:13Z,CLOSED,False,11,0,1,https://github.com/Whizzard,add characteristic properties to object,1,[],https://github.com/espruino/Espruino/pull/1058,https://github.com/Whizzard,6,https://github.com/espruino/Espruino/pull/1058#issuecomment-278669731,"see Nordic Documentation
Example output:
BluetoothRemoteGATTCharacteristic {
  ""uuid"": ""0x4242"",
  ""props"": { ""read"": true, ""write"": true, ""write_wo_resp"": true, ""notify"": true, ""indicate"": false, ""broadcast"": false, ""auth_signed_wr"": false },
  ""handle_value"": 19, ""handle_decl"": 18 }","Ahem. Yes. :-)
Not my day.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,1,https://github.com/espruino/Espruino/pull/1061,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1061#issuecomment-278678035,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","This is what I do
DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make",True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,3,https://github.com/espruino/Espruino/pull/1061#issuecomment-278680770,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make
I go and find and doc nrfutil
GEN espruino_1v91.60_puckjs.lst
GEN espruino_1v91.60_puckjs.hex
Not merging softdevice or bootloader with application
# nrfutil  pkg generate --help
nrfutil pkg generate espruino_1v91.60_puckjs.zip --application espruino_1v91.60_puckjs.hex --application-version 0xff --hw-version 52 --sd-req 0x8C --key-file targets/nrf5x_dfu/dfu_private_key.pem
make: nrfutil: Command not found
make: *** [espruino_1v91.60_puckjs.hex] Error 127
make: *** Waiting for unfinished jobs....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,4,https://github.com/espruino/Espruino/pull/1061#issuecomment-278681980,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","apt-get install python-pip
pip install nrfutil",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,5,https://github.com/espruino/Espruino/pull/1061#issuecomment-278683418,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","If what I have below is correct, then I continue to doc.
I am not near a DFU so I cannot load yet
I really need to find a DFU possibility with a ""standard"" Intel Bluetooth device that I have in my Lenovo Laptop running Windows 10: but that is another story
make clean && DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make 
GEN espruino_1v91.60_puckjs.lst
GEN espruino_1v91.60_puckjs.hex
Not merging softdevice or bootloader with application
# nrfutil  pkg generate --help
nrfutil pkg generate espruino_1v91.60_puckjs.zip --application espruino_1v91.60_puckjs.hex --application-version 0xff --hw-version 52 --sd-req 0x8C --key-file targets/nrf5x_dfu/dfu_private_key.pem
Zip created at espruino_1v91.60_puckjs.zip",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1061#issuecomment-278685500,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","can you try this ?
http://forum.espruino.com/comments/13418850/",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,7,https://github.com/espruino/Espruino/pull/1061#issuecomment-278686721,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","@MaBecker Great you reminded me: I was just given an Android as I only had a Windows Mobile.
I go for a DFU with nFR toolbox on Android",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,8,https://github.com/espruino/Espruino/pull/1061#issuecomment-278747472,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","puck.js survived my code generation on bash on linux on windows.
I clean up the PR with the input/experience so far",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,9,https://github.com/espruino/Espruino/pull/1061#issuecomment-279127282,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","My suggestion is start easy with install espruino on native os and then an example reference board (puck.js as I can only check this on puck.js)
Then I continue down the text to keep the format and finish at VM.
I will double check bash and vm by cleaning my system and doing what is written and ensure it works
I can check puck.js nRF52-DK an micro:bit to ensure these are ok for any beginner like me",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,10,https://github.com/espruino/Espruino/pull/1061#issuecomment-279128726,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","""Oops"" found the repeat Gordon was meaning
The markup is being checked with https://github.com/DavidAnson/markdownlint/blob/v0.3.1/doc/Rules.md",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,11,https://github.com/espruino/Espruino/pull/1061#issuecomment-279131594,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","https://github.com/OwenBrotherwood/Espruino/blob/puckdoc/README_Building.md
I now go through the look and feel of the README to ensure that subheading etc are correctly indented.
At the moment, I have no context as to if eclipse and EMW3165 are related
https://github.com/OwenBrotherwood/Espruino/blob/puckdoc/README_Building.md#building-on-eclipse",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,12,https://github.com/espruino/Espruino/pull/1061#issuecomment-279153122,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","I found a Raspberry Pi 3 and the following is the result.
https://github.com/OwenBrotherwood/Espruino/blob/puckdoc/README_Building.md#for-raspberry-pi
Note: I have not had time to check that WiringPi works perfectly
http://forum.espruino.com/conversations/259788/",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1061#issuecomment-279162628,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","Wow, you've been busy!
Looks good - just a heads up - please can you search for espurino and replace it with the correct spelling (espruino). As is most of your commands will fail.
Same for forum messages/everything really - you've been spelling it wrong the majority of the time :)
Also, where did you get chmod +x espurino from? it shouldn't be needed at all as the compiled file will already be executable",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,14,https://github.com/espruino/Espruino/pull/1061#issuecomment-279163759,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","espurino espruino Aaargh. As I have written somewhere, I wipe my systems and check all work when finished.
chmod +x came from Raspberry Pi : I double check when I get there, but it doesn't do real harm and I have seen this type of problem before where one goes between OS's
I should have had this out last weekend, but had to dig drains and IRL work",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,15,https://github.com/espruino/Espruino/pull/1061#issuecomment-279164250,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","Ouch: committed some log and other stuff by accident.
A time out while  I get a status as to what I did wrong",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,16,https://github.com/espruino/Espruino/pull/1061#issuecomment-279168031,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc",https://www.espruino.com/Raspberry+Pi+Web+IDE worked BUT I have a web cam in the Pi (another time),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,17,https://github.com/espruino/Espruino/pull/1061#issuecomment-279178927,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","An unexpected setup back:
nRF5X can be created with Bash on Ubuntu on Windows but not on a vagrant ubuntu.
Edit:
Solved: 32 bit libraries missing

CC /home/ubuntu/source/repos/github/espruino/Espruino/targetlibs/nrf5x/components/libraries/util/nrf_assert.o
Makefile:1957: recipe for target '/home/ubuntu/source/repos/github/espruino/Espruino/targetlibs/nrf5x/components/libraries/fstorage/fstorage.o' failed",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,18,https://github.com/espruino/Espruino/pull/1061#issuecomment-279202386,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","#1061 (comment) is giving me ""pain"".
Rather than focus on failure, I concentrate on achieving a result that can be duplicated working from a known base.
For this, I have created a Vagrantfile.
Note: I may edit this post as I achieve closure and at some stage, a Vagrantfile / provisioning PR with focus on defaults vagrant setup at this point in time to achieve a reference installation for Espruino development for those who are not using Ubuntu 16
Edit:

add reference gcc-arm-embedded and try and test that

https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2



Edit:
lib32z1 lib32ncurses5 needed: off to test
Edit:
I hate 32/64 problems: puck.js compiled.
I clean up work and get back to doc
Testing ""this"": the show is not over until the big fat lady sings
# -*- mode: ruby -*-
# vi: set ft=ruby :

# created with: 
# vagrant init ubuntu/xenial64
#
# inline provisioning (see SHELL in this file)
# basic function, install basics and achieve native Espruino
# installation of requirements for cross-compile, focus nRF5X
# note the use of current ppa gcc-arm-none-eabi per default
# reference gcc-arm-none-eabi is controlled by $PATH
#

# All Vagrant configuration is done below. The ""2"" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(""2"") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = ""ubuntu/xenial64""

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing ""localhost:8080"" will access port 80 on the guest machine.
  # config.vm.network ""forwarded_port"", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network ""private_network"", ip: ""192.168.33.10""

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network ""public_network""

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder ""../data"", ""/vagrant_data""

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider ""virtualbox"" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = ""1024""
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define ""atlas"" do |push|
  #   push.app = ""YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME""
  # end

 # Enable USB Controller on VirtualBox
  config.vm.provider ""virtualbox"" do |vb|
    vb.customize [""modifyvm"", :id, ""--usb"", ""on""]
    vb.customize [""modifyvm"", :id, ""--usbehci"", ""on""]
  end

  # Implement determined configuration attributes
  config.vm.provider ""virtualbox"" do |vb|
    vb.customize [""usbfilter"", ""add"", ""0"",
        ""--target"", :id,
        ""--name"", ""Intel Bluetooth"",
        ""--vendorid"", 0D28,
        ""--productid"", 0204]
    vb.customize [""usbfilter"", ""add"", ""1"",
        ""--target"", :id,
        ""--name"", ""Any MBED CMSIS-DAP"",
        ""--product"", ""MBED CMSIS-DAP""]
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #
  # inline is ""nice"" to keep everything in one place but external shell may be needed
  #
  config.vm.provision ""shell"", inline: <<-SHELL
    apt-get update
    apt-get install -y \
      build-essential git python python-pip \
      lib32z1 lib32ncurses5 
    apt -y autoremove

    curl -sL https://deb.nodesource.com/setup_6.x | bash -
    apt-get install -y nodejs


    export EABILNK='https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2'
    export EABIBZ2=${EABILNK##*/}
    export EABIDIR=${EABIBZ2%-20160926-linux.tar.bz2}
    export LCL=/usr/local
    export EABILCL=${LCL}/${EABIDIR}
    export EABIBIN=${EABILCL}/bin

    if [ ! -d  ${EABILCL} ]; then
      wget ${EABILNK}
      tar xjf ${EABIBZ2}
      mv ${EABIDIR} ${LCL}
    fi
    export PATH=""${EABIBIN}:$PATH""

    pip install --upgrade pip 
    pip install nrfutil

    mkdir -p ~/source/repos/github/espruino
    cd ~/source/repos/github/espruino
    if [ ! -d Espruino ]; then
      git clone \
        https://github.com/espruino/Espruino.git 
    fi    
    
    cd Espruino
    git pull
    make clean && make
    chmod +x espruino && cp espruino /usr/local/bin/espruino    
    make clean && DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make    
    ls -la espruino*  
  SHELL
end

C:\source\espruino-vagrant>vagrant ssh
Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-62-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

0 packages can be updated.
0 updates are security updates.


ubuntu@ubuntu-xenial:~$ espruino
Interactive mode.
Size of JsVar is now 32 bytes
Size of JsVarRef is now 4 bytes
Added SIGINT hook
Added SIGHUP hook
Added SIGTERM hook

 _____                 _
|   __|___ ___ ___ _ _|_|___ ___
|   __|_ -| . |  _| | | |   | . |
|_____|___|  _|_| |___|_|_|_|___|
          |_| http://espruino.com
 1v91.60 Copyright 2016 G.Williams

Espruino is Open Source. Our work is supported
only by sales of official boards and donations:
http://espruino.com/Donate

>Press Ctrl-C again to exit
>ubuntu@ubuntu-xenial:~$



==> default: nrfutil pkg generate espruino_1v91.60_puckjs.zip --application espruino_1v91.60_puckjs.hex --application-version 0xff --hw-version 52 --sd-req 0x8C --key-file targets/nrf5x_dfu/dfu_private_key.pem
==> default: Zip created at espruino_1v91.60_puckjs.zip
==> default: -rwxr-xr-x 1 root root  812136 Feb 12 14:36 espruino
==> default: -rwxr-xr-x 1 root root  644580 Feb 12 14:36 espruino_1v91.60_puckjs.elf
==> default: -rw-r--r-- 1 root root  974948 Feb 12 14:36 espruino_1v91.60_puckjs.hex
==> default: -rw-r--r-- 1 root root 5506551 Feb 12 14:36 espruino_1v91.60_puckjs.lst
==> default: -rw-r--r-- 1 root root  347279 Feb 12 14:36 espruino_1v91.60_puckjs.zip


https://en.wikipedia.org/wiki/It_ain't_over_till_the_fat_lady_sings",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,19,https://github.com/espruino/Espruino/pull/1061#issuecomment-279225485,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","https://github.com/OwenBrotherwood/Espruino/blob/puckdoc/README_Building.md
question is, has Owen lost information from https://github.com/espruino/Espruino/blob/master/README_Building.md and is the new an improvement in certain areas.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/gfwilliams,20,https://github.com/espruino/Espruino/pull/1061#issuecomment-281978744,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc",Is this one ready to merge now?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,21,https://github.com/espruino/Espruino/pull/1061#issuecomment-282070213,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","@gfwilliams
If it looks good for you, it is good for me.
Documentation is never finished: step by step improvements.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/gfwilliams,22,https://github.com/espruino/Espruino/pull/1061#issuecomment-282245641,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc",Thanks! merging.,True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1061,2017-02-09T15:22:29Z,2017-02-24T09:28:56Z,2017-02-24T16:30:25Z,MERGED,True,209,118,2,https://github.com/OwenBrotherwood,make puck.js and building with bash,66,[],https://github.com/espruino/Espruino/pull/1061,https://github.com/OwenBrotherwood,23,https://github.com/espruino/Espruino/pull/1061#issuecomment-282248406,"OK:
A heads up on WIP but NOTE
PUCKJS=1 BOOTLOADER=1 RELEASE=1 make 
gives
LD bootloader_espruino_1v91.60_puckjs.elf
GEN bootloader_espruino_1v91.60_puckjs.lst
GEN bootloader_espruino_1v91.60_puckjs.hex
Not merging anything with bootloader

so I am missing something there.
The puck.js make (and PR) is also documenting the make on Bash on Canonical Linux on Windows
It would have been better with two PR's for the seperate items, but the README.md was already working on.
Your call as to two PR's with the puck.js being my priority so I can make it first
Edit
The make of puck.js is double checked against reference Ubuntu 16.xx and reference gcc","I take another weekend of looking thru docs and access what I have found out up to now.
""Documentation is never finished: step by step improvements.""",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1063,2017-02-11T04:47:36Z,2017-02-11T12:45:04Z,2017-02-11T12:45:04Z,MERGED,True,2,1,2,https://github.com/wilberforce,"Correct 0x8000 partition, make menuconfig in docs",1,[],https://github.com/espruino/Espruino/pull/1063,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1063,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1064,2017-02-12T07:25:20Z,2017-02-12T17:47:35Z,2017-02-12T17:47:35Z,MERGED,True,36,23,3,https://github.com/wilberforce,"jshreset, re-organise hardware start up",1,[],https://github.com/espruino/Espruino/pull/1064,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1064,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1066,2017-02-13T07:47:31Z,2017-02-13T08:16:55Z,2017-04-18T17:02:32Z,MERGED,True,3,0,1,https://github.com/MaBecker,add erase_flash,1,[],https://github.com/espruino/Espruino/pull/1066,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1066,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1066,2017-02-13T07:47:31Z,2017-02-13T08:16:55Z,2017-04-18T17:02:32Z,MERGED,True,3,0,1,https://github.com/MaBecker,add erase_flash,1,[],https://github.com/espruino/Espruino/pull/1066,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1066#issuecomment-279320326,,"Thanks - good idea :) Of course if there was an all-in-one 1M image file, you'd have a much simpler flash command, and saved code would get cleared out?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1067,2017-02-13T12:09:55Z,2017-02-13T12:13:18Z,2017-02-13T12:14:09Z,CLOSED,False,6393,84,71,None,add convert library,149,[],https://github.com/espruino/Espruino/pull/1067,None,1,https://github.com/espruino/Espruino/pull/1067,"add functions:
floatToBytes
doubleToBytes
bytesToFloat
bytesToDouble","add functions:
floatToBytes
doubleToBytes
bytesToFloat
bytesToDouble",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1067,2017-02-13T12:09:55Z,2017-02-13T12:13:18Z,2017-02-13T12:14:09Z,CLOSED,False,6393,84,71,None,add convert library,149,[],https://github.com/espruino/Espruino/pull/1067,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1067#issuecomment-279371077,"add functions:
floatToBytes
doubleToBytes
bytesToFloat
bytesToDouble","There's no way I can merge this onto master because it's based off the ESP8266 fork.
I also don't understand why we need this, when Typed arrays do it all already? For instance:
new Float32Array([1234]).buffer

If you wanted something that seemed a bit easier, maybe you could just make a JS module that wrapped around Typed Arrays?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1069,2017-02-15T07:30:41Z,2017-02-15T08:22:26Z,2017-02-15T08:22:26Z,MERGED,True,1,0,1,https://github.com/wilberforce,restore wifi initalisation,1,[],https://github.com/espruino/Espruino/pull/1069,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1069,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1071,2017-02-16T06:51:53Z,2017-02-16T09:18:15Z,2017-02-16T09:18:15Z,MERGED,True,407199,3682,505,https://github.com/wilberforce,major update to bring ESP32 branch upto current master 1v91.381,242,[],https://github.com/espruino/Espruino/pull/1071,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1071,"This will simplify the merge when the ESP32 branch is pulled into master.
The ESP32 version is now at 1v91.381
 _____                 _
|   __|___ ___ ___ _ _|_|___ ___
|   __|_ -| . |  _| | | |   | . |
|_____|___|  _|_| |___|_|_|_|___|
          |_| http://espruino.com
 1v91.381 Copyright 2016 G.Williams

Some of the ESP32 files got into a real state, so in the end a just updated them with the latest versions. These files were:
boards/ESP32.py
libs/network/esp32/jswrap_esp32_network.c 
libs/network/esp32/jswrap_esp32_network.h
targets/esp32/i2c.c 
targets/esp32/jshardware.c 
targets/esp32/jswrap_esp32.c 
targets/esp32/jswrap_esp32.h 
targets/esp32/main.c targets/esp32/spi.c","This will simplify the merge when the ESP32 branch is pulled into master.
The ESP32 version is now at 1v91.381
 _____                 _
|   __|___ ___ ___ _ _|_|___ ___
|   __|_ -| . |  _| | | |   | . |
|_____|___|  _|_| |___|_|_|_|___|
          |_| http://espruino.com
 1v91.381 Copyright 2016 G.Williams

Some of the ESP32 files got into a real state, so in the end a just updated them with the latest versions. These files were:
boards/ESP32.py
libs/network/esp32/jswrap_esp32_network.c 
libs/network/esp32/jswrap_esp32_network.h
targets/esp32/i2c.c 
targets/esp32/jshardware.c 
targets/esp32/jswrap_esp32.c 
targets/esp32/jswrap_esp32.h 
targets/esp32/main.c targets/esp32/spi.c",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1072,2017-02-16T07:17:16Z,2017-02-16T07:18:29Z,2017-02-16T07:18:29Z,CLOSED,False,5194,89,50,https://github.com/MaBecker,add ESP32 image and pins ,88,[],https://github.com/espruino/Espruino/pull/1072,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1072,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html","use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1072,2017-02-16T07:17:16Z,2017-02-16T07:18:29Z,2017-02-16T07:18:29Z,CLOSED,False,5194,89,50,https://github.com/MaBecker,add ESP32 image and pins ,88,[],https://github.com/espruino/Espruino/pull/1072,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1072#issuecomment-280251628,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html","this is too much, I wait until ESP32 is in master .....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1074,2017-02-16T21:20:27Z,2017-02-17T08:27:10Z,2017-02-17T08:27:11Z,CLOSED,False,33,80,2,https://github.com/MaBecker,add ESP32 image and pins,2,[],https://github.com/espruino/Espruino/pull/1074,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1074,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html","use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1074,2017-02-16T21:20:27Z,2017-02-17T08:27:10Z,2017-02-17T08:27:11Z,CLOSED,False,33,80,2,https://github.com/MaBecker,add ESP32 image and pins,2,[],https://github.com/espruino/Espruino/pull/1074,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1074#issuecomment-280579763,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html",please wait - names are in wrong order,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1074,2017-02-16T21:20:27Z,2017-02-17T08:27:10Z,2017-02-17T08:27:11Z,CLOSED,False,33,80,2,https://github.com/MaBecker,add ESP32 image and pins,2,[],https://github.com/espruino/Espruino/pull/1074,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1074#issuecomment-280586280,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html",now way - have to try again,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1075,2017-02-17T08:36:07Z,2017-02-17T08:52:46Z,2017-02-17T08:52:46Z,MERGED,True,18,56,2,https://github.com/MaBecker,add ESP32 image and pins,3,[],https://github.com/espruino/Espruino/pull/1075,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1075,"use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html
to preview","use scripts/build_board_docs.py ESP32
to generate boards/ESP32.html
to preview",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1076,2017-02-17T23:01:13Z,2017-02-21T18:59:16Z,2017-04-18T17:02:15Z,MERGED,True,24,15,2,https://github.com/MaBecker,fix detect(I2C1),3,[],https://github.com/espruino/Espruino/pull/1076,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1076,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1077,2017-02-20T00:32:57Z,2017-02-20T00:33:19Z,2017-02-20T00:33:19Z,CLOSED,False,0,0,0,https://github.com/luetgendorf,Bringing fork up to date,3,[],https://github.com/espruino/Espruino/pull/1077,https://github.com/luetgendorf,1,https://github.com/espruino/Espruino/pull/1077,Bringing fork up to date,Bringing fork up to date,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1080,2017-02-21T11:43:12Z,2017-02-21T18:59:45Z,2017-02-21T18:59:45Z,MERGED,True,58,42,2,https://github.com/wilberforce,"Set valid pins to 'input' on start up, Add telnet debugging, update tabs with spaces",3,[],https://github.com/espruino/Espruino/pull/1080,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1080,Telnet on esp32 is now working. Yay!,Telnet on esp32 is now working. Yay!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1083,2017-02-23T05:59:08Z,2017-02-23T12:18:19Z,2017-02-23T12:18:19Z,MERGED,True,5,3,1,https://github.com/wilberforce,"Esp32 - Get Onewire working, support pin.toggle()",3,[],https://github.com/espruino/Espruino/pull/1083,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1083,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1086,2017-02-24T09:08:41Z,2017-02-24T09:12:12Z,2017-02-24T09:12:12Z,MERGED,True,413173,3604,560,https://github.com/gfwilliams,ESP32 master merge,399,[],https://github.com/espruino/Espruino/pull/1086,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/1086,fixes #1085,fixes #1085,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1087,2017-02-27T04:53:19Z,2017-02-27T12:31:01Z,2017-02-27T12:31:01Z,MERGED,True,209,118,2,https://github.com/wilberforce,Update Esp32 to current master,336,[],https://github.com/espruino/Espruino/pull/1087,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1087,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1090,2017-02-28T06:16:35Z,2017-03-03T06:05:14Z,2017-03-10T22:42:44Z,CLOSED,False,27,18,1,https://github.com/wilberforce,test travis for ESP32 - please don't merge as testing,8,[],https://github.com/espruino/Espruino/pull/1090,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1090,"@jumjum123 @gfwilliams
This is a test config for the travis updates for ESP32.
** PLEASE DON'T MERGE **
The script is currently failing and doesn't compile and also would break the build for other boards.
It is  currently failing here:
CC libs/network/js/network_js.o
CC libs/network/esp32/network_esp32.o
In file included from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/port/lwipopts.h:39:0,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/opt.h:45,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/sockets.h:37,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/posix/sys/socket.h:33,
                 from libs/network/esp32/network_esp32.c:33:
/home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_task.h:29:23: fatal error: sdkconfig.h: No such file or directory
compilation terminated.
make: *** [libs/network/esp32/network_esp32.o] Error 1

https://travis-ci.org/espruino/Espruino/jobs/206076058#L616

sdkconfig.h should be part of the app.tgz file:
curl -Ls https://raw.githubusercontent.com/wilberforce/espruino-esp32/master/app.tgz | tar xfz -
should be here app/build/include/sdkconfig.h
The makefile should be finding it with:
INCLUDE+=\
-I$(ESP_APP_TEMPLATE_PATH)/build/include \","@jumjum123 @gfwilliams
This is a test config for the travis updates for ESP32.
** PLEASE DON'T MERGE **
The script is currently failing and doesn't compile and also would break the build for other boards.
It is  currently failing here:
CC libs/network/js/network_js.o
CC libs/network/esp32/network_esp32.o
In file included from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/port/lwipopts.h:39:0,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/opt.h:45,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/sockets.h:37,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/posix/sys/socket.h:33,
                 from libs/network/esp32/network_esp32.c:33:
/home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_task.h:29:23: fatal error: sdkconfig.h: No such file or directory
compilation terminated.
make: *** [libs/network/esp32/network_esp32.o] Error 1

https://travis-ci.org/espruino/Espruino/jobs/206076058#L616

sdkconfig.h should be part of the app.tgz file:
curl -Ls https://raw.githubusercontent.com/wilberforce/espruino-esp32/master/app.tgz | tar xfz -
should be here app/build/include/sdkconfig.h
The makefile should be finding it with:
INCLUDE+=\
-I$(ESP_APP_TEMPLATE_PATH)/build/include \",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1090,2017-02-28T06:16:35Z,2017-03-03T06:05:14Z,2017-03-10T22:42:44Z,CLOSED,False,27,18,1,https://github.com/wilberforce,test travis for ESP32 - please don't merge as testing,8,[],https://github.com/espruino/Espruino/pull/1090,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1090#issuecomment-282966761,"@jumjum123 @gfwilliams
This is a test config for the travis updates for ESP32.
** PLEASE DON'T MERGE **
The script is currently failing and doesn't compile and also would break the build for other boards.
It is  currently failing here:
CC libs/network/js/network_js.o
CC libs/network/esp32/network_esp32.o
In file included from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/port/lwipopts.h:39:0,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/opt.h:45,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/lwip/sockets.h:37,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/lwip/include/lwip/posix/sys/socket.h:33,
                 from libs/network/esp32/network_esp32.c:33:
/home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_task.h:29:23: fatal error: sdkconfig.h: No such file or directory
compilation terminated.
make: *** [libs/network/esp32/network_esp32.o] Error 1

https://travis-ci.org/espruino/Espruino/jobs/206076058#L616

sdkconfig.h should be part of the app.tgz file:
curl -Ls https://raw.githubusercontent.com/wilberforce/espruino-esp32/master/app.tgz | tar xfz -
should be here app/build/include/sdkconfig.h
The makefile should be finding it with:
INCLUDE+=\
-I$(ESP_APP_TEMPLATE_PATH)/build/include \","Found the issue.
This is unpacking to build and it should be /app/build
curl -Ls https://raw.githubusercontent.com/wilberforce/espruino-esp32/master/app.tgz | tar xfz -",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1094,2017-03-02T08:30:02Z,2017-03-09T10:15:54Z,2017-03-09T10:15:55Z,MERGED,True,156,2,5,https://github.com/ojousima,Add RuuviTag support,2,[],https://github.com/espruino/Espruino/pull/1094,https://github.com/ojousima,1,https://github.com/espruino/Espruino/pull/1094,"Changes
Dockerfile: Added install python-pip, pip install nrfutil for DFU package generation
Makefile: Added RuuviTag, DFU key for RuuviTag bootloader
Bluetooth.c: Added RuuviTag DC/DC, name and default URL to NFC
Building
Point Docker URL to https://github.com/ojousima/Espruino
run
docker build . 
docker run -it f9b6277 /bin/bash
make clean && DFU_UPDATE_BUILD=1 RUUVITAG=1 RELEASE=1 make

Measured with Nordic Power Profiler Kit: ~39 µA on boot, ~260 µA when Web IDE is connected.
RuuviTag Plus (with sensors) is not yet supported","Changes
Dockerfile: Added install python-pip, pip install nrfutil for DFU package generation
Makefile: Added RuuviTag, DFU key for RuuviTag bootloader
Bluetooth.c: Added RuuviTag DC/DC, name and default URL to NFC
Building
Point Docker URL to https://github.com/ojousima/Espruino
run
docker build . 
docker run -it f9b6277 /bin/bash
make clean && DFU_UPDATE_BUILD=1 RUUVITAG=1 RELEASE=1 make

Measured with Nordic Power Profiler Kit: ~39 µA on boot, ~260 µA when Web IDE is connected.
RuuviTag Plus (with sensors) is not yet supported",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1094,2017-03-02T08:30:02Z,2017-03-09T10:15:54Z,2017-03-09T10:15:55Z,MERGED,True,156,2,5,https://github.com/ojousima,Add RuuviTag support,2,[],https://github.com/espruino/Espruino/pull/1094,https://github.com/ojousima,2,https://github.com/espruino/Espruino/pull/1094#issuecomment-283590247,"Changes
Dockerfile: Added install python-pip, pip install nrfutil for DFU package generation
Makefile: Added RuuviTag, DFU key for RuuviTag bootloader
Bluetooth.c: Added RuuviTag DC/DC, name and default URL to NFC
Building
Point Docker URL to https://github.com/ojousima/Espruino
run
docker build . 
docker run -it f9b6277 /bin/bash
make clean && DFU_UPDATE_BUILD=1 RUUVITAG=1 RELEASE=1 make

Measured with Nordic Power Profiler Kit: ~39 µA on boot, ~260 µA when Web IDE is connected.
RuuviTag Plus (with sensors) is not yet supported","How I can contribute code to test RuuviTag build with Travis?
I went through readme and testing, however I didn't find instructions on how to add the tests.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1095,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1095#issuecomment-284152258,,"Hi - please can you avoid merging stuff like this into the master branch without asking me to review? That's why we had the ESP32 branch.
edit: ahh - last commit fixed the build errors. Even so - something that completely rewrites the CI system would have been good for me to look over first.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1095#issuecomment-284189135,,"Sorry Gordon, yes the last commit is correct:
#1100
I had closed this #1095, it was an update in the ESP32 branch. I did all of these testing in the ESP32 branch.
I wanted to ensure that it was ok in the master branch, as the build system depends on it and I would have reversed the change if the build had not worked. The only way to test the Travis system is do a commit into it.
I'll keep you in the loop in the future. Sorry.
The good side is now you can clone the Espruino and go:
source ./Espruino/scripts/provision-framework.sh PICO_1V3
or
source ./Espruino/scripts/provision-framework.sh ESP32
or
source ./Espruino/scripts/provision-framework.sh ESP8266
or
If the required build tools are not in place, it will install them and the libraries, simplifying the build process.
It would be great if we could ask others to test this - would a forum post be the best bet?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1095#issuecomment-284352008,,"Thanks! Yes, I think a forum post would be good.
@OwenBrotherwood recently wrote some docs on building, so if he's got time it'd be great if he could take a look. This should massively simplify the build!",True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/OwenBrotherwood,5,https://github.com/espruino/Espruino/pull/1095#issuecomment-284374421,,"I try the work (""It would be great if we could ask others to test this"") and get back on this.
Ping if there is some specific areas to be addressed, otherwise I take a general ""Look from Outside"" (dummies look) at the general area of simplifying the build.
Edit:
Initial dummies test indicates problems.
source ./Espruino/scripts/provision-framework.sh ESP32 
followed by
source ./Espruino/scripts/provision-framework.sh PUCKJS 
gives
owen@DESKTOP-HUVT6EC:/source/repos/github/espruino/Espruino$ make clean && DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make
Cleaning targets
Generating platform configs
Generating pin info
Generating JS wrappers
WRAPPERSOURCES = src/jswrap_array.c src/jswrap_arraybuffer.c src/jswrap_dataview.c src/jswrap_date.c src/jswrap_error.c src/jswrap_espruino.c src/jswrap_flash.c src/jswrap_functions.c src/jswrap_interactive.c src/jswrap_io.c src/jswrap_json.c src/jswrap_modules.c src/jswrap_pin.c src/jswrap_number.c src/jswrap_object.c src/jswrap_onewire.c src/jswrap_pipe.c src/jswrap_process.c src/jswrap_promise.c src/jswrap_serial.c src/jswrap_spi_i2c.c src/jswrap_stream.c src/jswrap_string.c src/jswrap_waveform.c libs/filesystem/jswrap_fs.c libs/filesystem/jswrap_file.c libs/math/jswrap_math.c libs/graphics/jswrap_graphics.c libs/network/jswrap_net.c libs/network/http/jswrap_http.c libs/network/js/jswrap_jsnetwork.c libs/network/cc3000/jswrap_cc3000.c libs/tv/jswrap_tv.c libs/hashlib/jswrap_hashlib.c libs/crypto/jswrap_crypto.c libs/neopixel/jswrap_neopixel.c
DEFINES = -DGIT_COMMIT=5e9489ee5936f24d2684588ff42393b76105cb23 -DNO_ASSERT -DRELEASE -DBUILDNUMBER=""599"" -DUSE_USB_OTG_FS=1 -DPICO -DPICO_1V3 -DUSE_BOOTLOADER -DUSE_DEBUGGER -DUSE_TAB_COMPLETE -DUSE_HEATSHRINK -DUSE_FILESYSTEM -DUSE_MATH -DUSE_GRAPHICS -DUSE_USB_HID -DUSE_NET -DUSE_CC3000 -DSEND_NON_BLOCKING -DUSE_TV -DUSE_CRYPTO -DUSE_TLS -DUSE_AES -DUSE_NEOPIXEL -DUSB -DSTM32F4 -DARM -DLINK_TIME_OPTIMISATION -DSTM32 -DUSE_STDPERIPH_DRIVER=1 -DSTM32F401CDU6 -DPICO_R1_3 -DSTM32F401xE -DEMBEDDED
CC libs/compression/heatshrink/heatshrink_encoder.o
xtensa-esp32-elf-gcc: error: unrecognized command line option '-mlittle-endian'
xtensa-esp32-elf-gcc: error: unrecognized command line option '-mthumb'
xtensa-esp32-elf-gcc: error: unrecognized command line option '-mcpu=cortex-m4'
xtensa-esp32-elf-gcc: error: unrecognized command line option '-mfpu=fpv4-sp-d16'
xtensa-esp32-elf-gcc: error: unrecognized command line option '-mfloat-abi=softfp'
make: *** [libs/compression/heatshrink/heatshrink_encoder.o] Error 1
make: *** Waiting for unfinished jobs....
make: *** wait: No child processes.  Stop.


Edit
The above was of course a PATH, current is prereq
make: nrfutil: Command not found
https://github.com/espruino/Espruino/blob/master/README_Building.md#under-linux",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1095#issuecomment-284574295,,"@OwenBrotherwood Thanks for looking at this.  A couple of notes.
a. The apt dependencies still need to be done. The script could be extended to do this - but it would need to be an option
b. At  this stage I was not expecting back-to-back installs. The last board env var would need to be cleared as what is occuring above it ESP32=1 is still set AND PUCKJS is set
Again the script could be modified.
For now it might be easier to open a new session - then the ENV would be all cleared down for each board.
I appreciate you trialing this!",True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/1095#issuecomment-284626442,,"@OwenBrotherwood
I've updated, so you can now switch boards.
#1104
source ./Espruino/scripts/provision-framework.sh PUCKJS
This is still an issue as the prerequisites need to be installed - I'm not familiar with what is required.
@gfwilliams There does not seem to be a PUCKJS option for the travis build?
https://travis-ci.org/espruino/Espruino/builds/208476964
or PUCKJS target in the Makefile ?",True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,8,https://github.com/espruino/Espruino/pull/1095#issuecomment-284630620,,"https://github.com/espruino/Espruino/blob/master/README_Building.md
sudo apt-get update
sudo apt-get install -y \
  lib32z1 lib32ncurses5
wget https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2
tar xjf gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2
sudo mv gcc-arm-none-eabi-5_4-2016q3-20160926 /usr/local
export PATH=/usr/local/gcc-arm-none-eabi-5_4-2016q3/bin:$PATH
cd ~/source/repos/github/espruino/Espruino
make clean && DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make
ls -l *puckjs*

So is a different compiler version needed?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/OwenBrotherwood,9,https://github.com/espruino/Espruino/pull/1095#issuecomment-284634978,,"( off topic: no reply needed: emotions ok: travis builds have been in my thoughts from the first time I read somewhere about the used compiler creating bigger builds: however, I have kept myself on doc and learning curve)
On topic:

So is a different compiler version needed?

Note that the version of gcc-arm-none-eabi was chosen to be in-line with Gordons wishes: ie he is using the version in README: It is up to the gitmaster as to which version is reference.
This pull could create a bit of noise until it is totally finished: I allways suggest atomic PR with each being correct ie doing what is required and possible new PR's for the issues that come from a PR ...(opinionated).
What is the main aim of the PR? probably good travis builds
Do we have all the requirements stated?
As always, no comment needed: reactions/emotions help me gage if I need to give time to this",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/1095#issuecomment-284665337,,"Puck.js shouldn't need a different compiler - but especially when @OwenBrotherwood was trying to get things working, using the newest available compiler could have caused some issues (major GCC version changes have tended to break the build in the past).
PUCKJS should be in the Makefile though? It is on my version of the repo :)
There's no build in travis because it also needed nrfutils installing to build the zip file for the firmware updates. That's definitely something that could be added pretty easily with the current arrangement though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/OwenBrotherwood,11,https://github.com/espruino/Espruino/pull/1095#issuecomment-284666823,,"( FYI No issues with newest compiler: both versions provide ""good"" zip for puck.js: however I am using the version in README for conformity: I think we are talking about two different things with the comment ""So is a different compiler version needed?"" as a possible question from concerning esp contra something else This could create too much noise if I have to keep commenting to ensure that the work I did is understood: l stop commenting here as it may defeat the PR purpose)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,12,https://github.com/espruino/Espruino/pull/1095#issuecomment-284688791,,"The purpose is two fold.
A. simply the Travis builds by only pulling in the framework and compiler required.
B. Make it easier for people to build the firmware from a clean install
So
source ./Espruino/scripts/provision-framework.sh ESP32
The idea is that the board name gets passed to the script.
With PUCKJS I think you picked the most complicated exception!
Anyway, the multiple boards setting have been fixed in the esp32 branch.
I still can't get the PUCKJS case to work, it getting compile errors not related to libraries.
All the other boards that are in the Travis config work.",True,{'THUMBS_UP': ['https://github.com/OwenBrotherwood']}
espruino/Espruino,https://github.com/espruino/Espruino,1095,2017-03-03T05:14:02Z,2017-03-03T22:49:21Z,2017-03-07T10:59:18Z,MERGED,True,343,45,18,https://github.com/wilberforce,Add provision-framework.sh - Update travis,20,[],https://github.com/espruino/Espruino/pull/1095,https://github.com/wilberforce,13,https://github.com/espruino/Espruino/pull/1095#issuecomment-284689905,,"There's no build in travis because it also needed nrfutils installing to build the zip file for the firmware updates. That's definitely something that could be added pretty easily with the current arrangement though.

Yes a case could be added that does the pip install if it's not installed for nrfutils. Is there a family of boards this applies too?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1097,2017-03-03T15:53:17Z,2017-03-03T15:59:30Z,2017-03-03T16:16:38Z,MERGED,True,64,53,1,https://github.com/MaBecker,add clock stretch,1,[],https://github.com/espruino/Espruino/pull/1097,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1097,many thanks to @frida for sharing this code,many thanks to @frida for sharing this code,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1097,2017-03-03T15:53:17Z,2017-03-03T15:59:30Z,2017-03-03T16:16:38Z,MERGED,True,64,53,1,https://github.com/MaBecker,add clock stretch,1,[],https://github.com/espruino/Espruino/pull/1097,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1097#issuecomment-283996977,many thanks to @frida for sharing this code,"but this is pretty nasty :) (using a local variable y that's not passed in as an argument)

have to check ....

Also you might as well just delete the commented out code - it's Git so they're still in history if anyone cares

ouch - thanks for pointing this out!  added  #1098",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1098,2017-03-03T16:09:27Z,2017-03-03T16:26:32Z,2017-03-03T17:57:08Z,MERGED,True,2,50,1,https://github.com/MaBecker,remove commented code lines,1,[],https://github.com/espruino/Espruino/pull/1098,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1098,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1098,2017-03-03T16:09:27Z,2017-03-03T16:26:32Z,2017-03-03T17:57:08Z,MERGED,True,2,50,1,https://github.com/MaBecker,remove commented code lines,1,[],https://github.com/espruino/Espruino/pull/1098,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1098#issuecomment-284000094,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1099,2017-03-03T17:56:46Z,2017-03-03T17:57:24Z,2017-03-03T17:57:55Z,MERGED,True,3,0,1,https://github.com/MaBecker,add ESP8266 topics,1,[],https://github.com/espruino/Espruino/pull/1099,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1099,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1100,2017-03-03T23:02:55Z,2017-03-03T23:03:09Z,2017-03-03T23:03:09Z,MERGED,True,107,31,2,https://github.com/wilberforce,Update branch to travis changes,13,[],https://github.com/espruino/Espruino/pull/1100,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1100,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1104,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1104#issuecomment-284665940,,Neat - thanks! Do we actually need to set a global BOARD variable in the first place? It seems like that may be what was tripping up the Makefile?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1104#issuecomment-284666232,,"Also, do you have any objections to me moving http://s3.voneicken.com/xtensa-lx106-elf-20160330.tgx to our EspruinoBuildTools repo now? I might also move the GCC arm compiler, since it'll be way faster to decompress a tar.gz than to install from the package manager",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1104#issuecomment-284683603,,"Do we actually need to set a global BOARD

Yes this is how Travis sets which framework to install. I have set it up so that only the exceptions - Linux, esp32 and esp8266 are handled, al else gets the arm framework. Otherwise every combination of board would need to be added to provison-framework.sh and it would be a maintenance nightmare.
The issue with the make file was due to both ESP32=1 and PUCKJS=1 both being set. The patch above fixes that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/1104#issuecomment-284684889,,"Also, do you have any objections to me moving http://s3.voneicken.com/xtensa-lx106-elf-20160330.tgx to our EspruinoBuildTools repo now? I might also move the GCC arm compiler,

No objections. We should probably tell @tve although he hasn't been around these parts lately.
Ideally the framework should also be there, so it can be built from scripts.. e.g. The lwip falcon stuff and the sdk 2.0 so that the repositiory also builds the framework libs.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1104#issuecomment-284686545,,This was in the esp32 branch - so if you are going to move esp32 and arm you might want to push to master first,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1104#issuecomment-284688023,,"Does travis not set BOARD up itself now, so there's no need for the provision script to do it? https://github.com/espruino/Espruino/blob/master/.travis.yml#L40
But yeah, I'll merge this in to master.
@tve are you ok with us moving xtensa-lx106-elf-20160330.tgx to GitHub? It might save some bandwidth on your server :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,8,https://github.com/espruino/Espruino/pull/1104#issuecomment-284690677,,"Does travis not set BOARD up itself now, so there's no need for the provision script to do it?

It is set here for when an end user calls the provision script - in this case the $board is not set.
It is retained in the env of the calling shell, so if the user then builds another board, it unsets the last set so we don't get the Makefile issues @OwenBrotherwood discovered.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/1104#issuecomment-284693922,,"it unsets the last set so we don't get the Makefile issues @OwenBrotherwood discovered.

But if it never set BOARD in the first place presumably you wouldn't have the issues either?
Sorry - It seems I'm not really understanding what's going on here.
Is your intention that instead of this:
source ./Espruino/scripts/provision-framework.sh PUCKJS
make clean && DFU_UPDATE_BUILD=1 PUCKJS=1 RELEASE=1 make

you do this:
source ./Espruino/scripts/provision-framework.sh PUCKJS
make clean && DFU_UPDATE_BUILD=1 RELEASE=1 make

eg, without specifying the board on the make command-line?
I'm not sure why else you'd need to specify a BOARD environment variable...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,10,https://github.com/espruino/Espruino/pull/1104#issuecomment-284699164,,"If you did this
source ./Espruino/scripts/provision-framework.sh PUCKJS
And then
source ./Espruino/scripts/provision-framework.sh ESP32
Both PUCKJS=1 and ESP32=1 are set. This breaks the Makefile.

But if it never set BOARD in the first place presumably you wouldn't have the issues either?
So it's not the BOARD getting set it's the PUCKJS or ESP8266 that's the issue.

The script would need to know all of the possible boardnames, and if one was set, all of the others would need to be unset. This means maintaining a list within the script, which could get out of step with the Makefile if people didn't know it needed to be updated.
Perhaps the list of boards could be read out of the Makefile, and all unset apart from the one passed to the script?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/1104#issuecomment-284707964,,"I still don't understand.
If ./Espruino/scripts/provision-framework.sh does not set BOARD= or PUCKJS=1/etc then you would have no need to unset it, and everything would surely 'just work'?
None of the build steps set BOARD= anything before, so I'm not sure why you have to do it now?
The usual way of building is to write BOARDNAME=1 make - obviously if you export BOARDNAME and then change it then you have a problem - but I don't see why you'd do that unless you're absolutely sure you're only working with one board.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/wilberforce,12,https://github.com/espruino/Espruino/pull/1104#issuecomment-284711945,,"Ok. I understand what you mean.
I was following this pattern:
https://github.com/espruino/Espruino/blob/master/README_Building.md
In the part for the esp8266 where it suggests setting up a batch file that sets your env vars.
I was trying to maintain that.
The idea was that the script set up all of the vars you needed to build - the $PATH for gcc, the ESP_{framework} and also set the board.
Then you can just type:
make clean && make
If the script does not set it, then it will be required as part of the make, otherwise you get a Linux build.
I suppose make clean &&  make could be done at the end of the script if it was not called from the Travis context?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1104#issuecomment-284715951,,"Ahh, thanks - that explains it :) That was something only the ESP8266 docs suggest.
Hopefully if I do #1105 then the problem will go away, as there will only be one variable needed, BOARD - so as you say you'll never be able to have both set",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1104,2017-03-07T05:30:41Z,2017-03-07T10:53:00Z,2017-03-07T16:38:34Z,MERGED,True,19,8,1,https://github.com/wilberforce,"check for existing tool folders, store last $BUILD",2,[],https://github.com/espruino/Espruino/pull/1104,https://github.com/tve,14,https://github.com/espruino/Espruino/pull/1104#issuecomment-284777549,,"Also, do you have any objections to me moving http://s3.voneicken.com/xtensa-lx106-elf-20160330.tgx to our EspruinoBuildTools repo now?

I don't mind either way. ""My server"" is AWS S3, so it's fast, cheap, and reliable. If you're proposing to move it into a git repo, then IMHO that's a bad idea, but it's your choice.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1106,2017-03-08T03:59:28Z,2017-03-09T10:00:11Z,2017-03-09T10:00:11Z,MERGED,True,5791,77,9,https://github.com/etx,Initial work on NUCLEO-F413ZH compat,1,[],https://github.com/espruino/Espruino/pull/1106,https://github.com/etx,1,https://github.com/espruino/Espruino/pull/1106,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1107,2017-03-08T14:06:30Z,2017-04-24T11:17:38Z,2017-04-24T11:17:38Z,CLOSED,False,12,5,2,https://github.com/Whizzard,[WIP] NRF52: track RSSI changes when being central and connected to peripheral,2,[],https://github.com/espruino/Espruino/pull/1107,https://github.com/Whizzard,1,https://github.com/espruino/Espruino/pull/1107,"This is a quite simple solution that does not affect the API.
Scanning for peripheral + central is handled via the same callback, just the internal handle is different.
Solves #1047","This is a quite simple solution that does not affect the API.
Scanning for peripheral + central is handled via the same callback, just the internal handle is different.
Solves #1047",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1107,2017-03-08T14:06:30Z,2017-04-24T11:17:38Z,2017-04-24T11:17:38Z,CLOSED,False,12,5,2,https://github.com/Whizzard,[WIP] NRF52: track RSSI changes when being central and connected to peripheral,2,[],https://github.com/espruino/Espruino/pull/1107,https://github.com/Whizzard,2,https://github.com/espruino/Espruino/pull/1107#issuecomment-285135485,"This is a quite simple solution that does not affect the API.
Scanning for peripheral + central is handled via the same callback, just the internal handle is different.
Solves #1047","OK - not perfect from API perspective:

you can not distinguish peripheral and central side if you have both
you can not distinguish multiple connections as central (if possible)

So we'd better have a separate callback for the central side...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1107,2017-03-08T14:06:30Z,2017-04-24T11:17:38Z,2017-04-24T11:17:38Z,CLOSED,False,12,5,2,https://github.com/Whizzard,[WIP] NRF52: track RSSI changes when being central and connected to peripheral,2,[],https://github.com/espruino/Espruino/pull/1107,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1107#issuecomment-296623830,"This is a quite simple solution that does not affect the API.
Scanning for peripheral + central is handled via the same callback, just the internal handle is different.
Solves #1047","Fixed with https://github.com/espruino/Espruino/pull/1148/files
Thanks for your help with the PR, but as discussed I reckon this works better (having the potential for multiple callbacks)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,None,1,https://github.com/espruino/Espruino/pull/1111,change toggle function to return after toggle pin state,change toggle function to return after toggle pin state,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1111#issuecomment-286044044,change toggle function to return after toggle pin state,"I'm afraid I can't merge this... This change should require changing maybe 3 lines, but this PR changes 18 files!
Also your solution doesn't work I'm afraid - since it reads the input rather than the state of the output (which was stored in the 'on' variable anyway).
I've just committed something that will add this functionality though",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,None,3,https://github.com/espruino/Espruino/pull/1111#issuecomment-286046969,change toggle function to return after toggle pin state,"Sorry, i just learned to use github. I am sorry to bring you inconvenience",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1111#issuecomment-286049659,change toggle function to return after toggle pin state,"No problem :) It is a good idea to return the value.
When you add your code to GitHub you can often click to  'compare' it and see what has changed - you can then tell if you've changed what you expected to change as it is easy to commit things by accident :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,None,5,https://github.com/espruino/Espruino/pull/1111#issuecomment-286049870,change toggle function to return after toggle pin state,"I just want to pull request the last time to change, but do not know why, all my changes are all submitted to you.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1111#issuecomment-289736710,change toggle function to return after toggle pin state,"@gfwilliams

  
    
      Espruino/src/jswrap_pin.c
    
    
         Line 185
      in
      267fc7b
    
  
  
    

        
          
           if (!jshIsPinValid(pin)) return; 
        
    
  


If the pin in invalid nothing is returned and the compiler complains. Can we return a javascript undefined with a return type of bool?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1111,2017-03-11T16:01:18Z,2017-03-13T08:34:21Z,2017-03-28T11:26:15Z,CLOSED,False,112,108,18,None,change toggle function,5,[],https://github.com/espruino/Espruino/pull/1111,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1111#issuecomment-289740305,change toggle function to return after toggle pin state,"Just fixed. No, we can't - I've switched it to return false.
It's super unlikely anyway, since you'd have to do something like Pin.toggle.call(undefined) - in which case you get what you deserve really :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1112,2017-03-11T20:22:15Z,2017-03-13T08:29:34Z,2017-03-13T08:33:27Z,MERGED,True,0,1,1,https://github.com/MaBecker,remove ESP8266: now build in graphics lib,1,[],https://github.com/espruino/Espruino/pull/1112,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1112,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1112,2017-03-11T20:22:15Z,2017-03-13T08:29:34Z,2017-03-13T08:33:27Z,MERGED,True,0,1,1,https://github.com/MaBecker,remove ESP8266: now build in graphics lib,1,[],https://github.com/espruino/Espruino/pull/1112,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1112#issuecomment-286042990,,Thanks! missed that :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1118,2017-03-18T23:29:35Z,2017-03-20T08:57:02Z,2017-04-18T17:01:51Z,MERGED,True,1,0,1,https://github.com/MaBecker,add GPIO16 hint to deepsleep,1,[],https://github.com/espruino/Espruino/pull/1118,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1118,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1118,2017-03-18T23:29:35Z,2017-03-20T08:57:02Z,2017-04-18T17:01:51Z,MERGED,True,1,0,1,https://github.com/MaBecker,add GPIO16 hint to deepsleep,1,[],https://github.com/espruino/Espruino/pull/1118,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1118#issuecomment-287599064,,#1102,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1118,2017-03-18T23:29:35Z,2017-03-20T08:57:02Z,2017-04-18T17:01:51Z,MERGED,True,1,0,1,https://github.com/MaBecker,add GPIO16 hint to deepsleep,1,[],https://github.com/espruino/Espruino/pull/1118,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1118#issuecomment-287703864,,thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1119,2017-03-23T01:07:28Z,2017-03-27T14:24:24Z,2017-03-27T14:24:24Z,MERGED,True,408,10,12,https://github.com/wilberforce,Add Flash Fat FS to boards with large flash,21,[],https://github.com/espruino/Espruino/pull/1119,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1119,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1119,2017-03-23T01:07:28Z,2017-03-27T14:24:24Z,2017-03-27T14:24:24Z,MERGED,True,408,10,12,https://github.com/wilberforce,Add Flash Fat FS to boards with large flash,21,[],https://github.com/espruino/Espruino/pull/1119,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1119#issuecomment-289469316,,Looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1120,2017-03-25T01:11:04Z,2017-03-27T07:20:01Z,2017-03-31T20:07:03Z,MERGED,True,4,2,1,https://github.com/urish,nRF5x: not all services returned in `NRF.findDevices`,1,[],https://github.com/espruino/Espruino/pull/1120,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1120,"If some device advertised multiple 16-bit service UUIDs in a single advertisement section, only the first one was returned.","If some device advertised multiple 16-bit service UUIDs in a single advertisement section, only the first one was returned.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1120,2017-03-25T01:11:04Z,2017-03-27T07:20:01Z,2017-03-31T20:07:03Z,MERGED,True,4,2,1,https://github.com/urish,nRF5x: not all services returned in `NRF.findDevices`,1,[],https://github.com/espruino/Espruino/pull/1120,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1120#issuecomment-289373174,"If some device advertised multiple 16-bit service UUIDs in a single advertisement section, only the first one was returned.","Awesome, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1121,2017-03-25T11:43:13Z,2017-03-27T08:58:19Z,2017-03-31T20:07:01Z,MERGED,True,5,5,1,https://github.com/urish,nRF5x: support integer UUIDs in requestDevice,1,[],https://github.com/espruino/Espruino/pull/1121,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1121,"This aligns the behavior with Web Bluetooth, where you can specify service UUIDs either as strings or integers.
In addition, it also allows you to use the full 128-bit UUID to match a 16-bit UUID (e.g. ""0000FFE5-0000-1000-8000-00805F9B34FB"" will match service FFE5).","This aligns the behavior with Web Bluetooth, where you can specify service UUIDs either as strings or integers.
In addition, it also allows you to use the full 128-bit UUID to match a 16-bit UUID (e.g. ""0000FFE5-0000-1000-8000-00805F9B34FB"" will match service FFE5).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1121,2017-03-25T11:43:13Z,2017-03-27T08:58:19Z,2017-03-31T20:07:01Z,MERGED,True,5,5,1,https://github.com/urish,nRF5x: support integer UUIDs in requestDevice,1,[],https://github.com/espruino/Espruino/pull/1121,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1121#issuecomment-289393863,"This aligns the behavior with Web Bluetooth, where you can specify service UUIDs either as strings or integers.
In addition, it also allows you to use the full 128-bit UUID to match a 16-bit UUID (e.g. ""0000FFE5-0000-1000-8000-00805F9B34FB"" will match service FFE5).",Very nice - thanks again!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1122,2017-03-27T10:28:13Z,2017-03-27T10:31:45Z,2017-03-27T10:33:56Z,MERGED,True,1,0,1,https://github.com/MaBecker,add CURRENT_BOARD.make,1,[],https://github.com/espruino/Espruino/pull/1122,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1122,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1122,2017-03-27T10:28:13Z,2017-03-27T10:31:45Z,2017-03-27T10:33:56Z,MERGED,True,1,0,1,https://github.com/MaBecker,add CURRENT_BOARD.make,1,[],https://github.com/espruino/Espruino/pull/1122,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1122#issuecomment-289415519,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1123,2017-03-29T13:42:33Z,2017-03-29T14:00:40Z,2017-03-29T14:37:17Z,CLOSED,False,1,1,1,https://github.com/joebowbeer,Fix typo in rotating setAdvertising example,1,[],https://github.com/espruino/Espruino/pull/1123,https://github.com/joebowbeer,1,https://github.com/espruino/Espruino/pull/1123,Remove extraneous byte (0x03) from rotating setAdvertising documentation.,Remove extraneous byte (0x03) from rotating setAdvertising documentation.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1123,2017-03-29T13:42:33Z,2017-03-29T14:00:40Z,2017-03-29T14:37:17Z,CLOSED,False,1,1,1,https://github.com/joebowbeer,Fix typo in rotating setAdvertising example,1,[],https://github.com/espruino/Espruino/pull/1123,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1123#issuecomment-290095447,Remove extraneous byte (0x03) from rotating setAdvertising documentation.,"Are you sure about this? Does it not work the other way? Because that's exactly what the eddystone module does, which works fine:
https://github.com/espruino/EspruinoDocs/blob/master/modules/ble_eddystone.js#L12",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1123,2017-03-29T13:42:33Z,2017-03-29T14:00:40Z,2017-03-29T14:37:17Z,CLOSED,False,1,1,1,https://github.com/joebowbeer,Fix typo in rotating setAdvertising example,1,[],https://github.com/espruino/Espruino/pull/1123,https://github.com/joebowbeer,3,https://github.com/espruino/Espruino/pull/1123#issuecomment-290098988,Remove extraneous byte (0x03) from rotating setAdvertising documentation.,"Aha. My bad. The 0x03 is the length field... I missed it in the preceding example. Closing pull request.
@gfwilliams I assume this array example is missing from the online docs because v1.92 has not been released yet..
https://www.espruino.com/Reference#l_NRF_setAdvertising",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1125,2017-04-01T15:08:03Z,2017-04-03T08:30:46Z,2017-04-03T08:30:46Z,MERGED,True,10,0,2,https://github.com/urish,nRF5x: add `description` field for BLE characteristics,1,[],https://github.com/espruino/Espruino/pull/1125,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1125,This allows you to set the Characteristic User Description descriptor for any characteristic you define.,This allows you to set the Characteristic User Description descriptor for any characteristic you define.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1125,2017-04-01T15:08:03Z,2017-04-03T08:30:46Z,2017-04-03T08:30:46Z,MERGED,True,10,0,2,https://github.com/urish,nRF5x: add `description` field for BLE characteristics,1,[],https://github.com/espruino/Espruino/pull/1125,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1125#issuecomment-291080013,This allows you to set the Characteristic User Description descriptor for any characteristic you define.,"Wow, nice :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1127,2017-04-02T02:55:14Z,2017-04-03T07:19:37Z,2017-04-03T07:19:37Z,MERGED,True,42,8,8,https://github.com/wilberforce,Sync Master with ESP32 branch,12,[],https://github.com/espruino/Espruino/pull/1127,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1127,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1127,2017-04-02T02:55:14Z,2017-04-03T07:19:37Z,2017-04-03T07:19:37Z,MERGED,True,42,8,8,https://github.com/wilberforce,Sync Master with ESP32 branch,12,[],https://github.com/espruino/Espruino/pull/1127,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1127#issuecomment-290975175,,"Build tools have been updated, so this is ready to go.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1127,2017-04-02T02:55:14Z,2017-04-03T07:19:37Z,2017-04-03T07:19:37Z,MERGED,True,42,8,8,https://github.com/wilberforce,Sync Master with ESP32 branch,12,[],https://github.com/espruino/Espruino/pull/1127,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1127#issuecomment-291066424,,"Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1128,2017-04-03T00:21:25Z,2017-04-03T14:58:44Z,2017-04-03T14:58:44Z,MERGED,True,12,3,3,https://github.com/urish,"nRF5x: add ""connectable"" option to setAdvertising()",2,[],https://github.com/espruino/Espruino/pull/1128,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1128,"This allows the device to be non connectable, useful for beacons","This allows the device to be non connectable, useful for beacons",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1128,2017-04-03T00:21:25Z,2017-04-03T14:58:44Z,2017-04-03T14:58:44Z,MERGED,True,12,3,3,https://github.com/urish,"nRF5x: add ""connectable"" option to setAdvertising()",2,[],https://github.com/espruino/Espruino/pull/1128,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1128#issuecomment-291079647,"This allows the device to be non connectable, useful for beacons","Thanks! Any chance of adding bleConnectable as a flag inside bleStatus though? It's what I've tended to do for other stuff.
It's not  big deal on nRF52, but on nRF51 when you only have less than 4k of RAM of JS code, I figure anything we can do to reduce usage is worth it :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1128,2017-04-03T00:21:25Z,2017-04-03T14:58:44Z,2017-04-03T14:58:44Z,MERGED,True,12,3,3,https://github.com/urish,"nRF5x: add ""connectable"" option to setAdvertising()",2,[],https://github.com/espruino/Espruino/pull/1128,https://github.com/urish,3,https://github.com/espruino/Espruino/pull/1128#issuecomment-291168937,"This allows the device to be non connectable, useful for beacons",Done!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1128,2017-04-03T00:21:25Z,2017-04-03T14:58:44Z,2017-04-03T14:58:44Z,MERGED,True,12,3,3,https://github.com/urish,"nRF5x: add ""connectable"" option to setAdvertising()",2,[],https://github.com/espruino/Espruino/pull/1128,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1128#issuecomment-291169196,"This allows the device to be non connectable, useful for beacons",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1129,2017-04-03T09:20:37Z,2017-04-19T07:52:39Z,2017-04-19T07:52:39Z,MERGED,True,89,69,14,https://github.com/wilberforce,Esp32: Fix #1081 E.setBootCode();,15,[],https://github.com/espruino/Espruino/pull/1129,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1129,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1129,2017-04-03T09:20:37Z,2017-04-19T07:52:39Z,2017-04-19T07:52:39Z,MERGED,True,89,69,14,https://github.com/wilberforce,Esp32: Fix #1081 E.setBootCode();,15,[],https://github.com/espruino/Espruino/pull/1129,https://github.com/aifer2007,2,https://github.com/espruino/Espruino/pull/1129#issuecomment-291104657,,great,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1129,2017-04-03T09:20:37Z,2017-04-19T07:52:39Z,2017-04-19T07:52:39Z,MERGED,True,89,69,14,https://github.com/wilberforce,Esp32: Fix #1081 E.setBootCode();,15,[],https://github.com/espruino/Espruino/pull/1129,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1129#issuecomment-292770789,,"@gfwilliams
Are you happy for me to commit into master ESP32 changes which only affect the ESP32 code and not base espruino code?
This commit is ready to go.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1129,2017-04-03T09:20:37Z,2017-04-19T07:52:39Z,2017-04-19T07:52:39Z,MERGED,True,89,69,14,https://github.com/wilberforce,Esp32: Fix #1081 E.setBootCode();,15,[],https://github.com/espruino/Espruino/pull/1129,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1129#issuecomment-294464406,,"@gfwilliams
I've tried to modify to stop the conflicts, however did not succeed. Please can you sort these and pull this into master?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1129,2017-04-03T09:20:37Z,2017-04-19T07:52:39Z,2017-04-19T07:52:39Z,MERGED,True,89,69,14,https://github.com/wilberforce,Esp32: Fix #1081 E.setBootCode();,15,[],https://github.com/espruino/Espruino/pull/1129,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/1129#issuecomment-295140593,,"@gfwilliams
Please can this be merged so that it is part of v1.92?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1132,2017-04-10T11:06:25Z,2017-04-18T09:41:22Z,2017-04-18T09:41:22Z,MERGED,True,24,24,2,https://github.com/nkrkv,change jsError() to jsExceptionHere(). Suppress jsiConsolePrintf() for HTTPS connections,1,[],https://github.com/espruino/Espruino/pull/1132,https://github.com/nkrkv,1,https://github.com/espruino/Espruino/pull/1132,"Currently, there are places in network.c which raise errors that we have no chance to handle with JavaScript. Also, there are places when the console is polluted with a forced debug/trace output to it. The PR fixes that.
Rationale
We’ve tried to make a device that could work with HTTPS API for a long time without restarts. In our case, it’s Telegram Messenger API. Works fine, but fails forever at some point when a problem that otherwise could be solved by retrying lead to a unhandled error.
With this patch applied we can handle such cases by using trivial try { ... } catch blocks.","Currently, there are places in network.c which raise errors that we have no chance to handle with JavaScript. Also, there are places when the console is polluted with a forced debug/trace output to it. The PR fixes that.
Rationale
We’ve tried to make a device that could work with HTTPS API for a long time without restarts. In our case, it’s Telegram Messenger API. Works fine, but fails forever at some point when a problem that otherwise could be solved by retrying lead to a unhandled error.
With this patch applied we can handle such cases by using trivial try { ... } catch blocks.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1132,2017-04-10T11:06:25Z,2017-04-18T09:41:22Z,2017-04-18T09:41:22Z,MERGED,True,24,24,2,https://github.com/nkrkv,change jsError() to jsExceptionHere(). Suppress jsiConsolePrintf() for HTTPS connections,1,[],https://github.com/espruino/Espruino/pull/1132,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1132#issuecomment-294750329,"Currently, there are places in network.c which raise errors that we have no chance to handle with JavaScript. Also, there are places when the console is polluted with a forced debug/trace output to it. The PR fixes that.
Rationale
We’ve tried to make a device that could work with HTTPS API for a long time without restarts. In our case, it’s Telegram Messenger API. Works fine, but fails forever at some point when a problem that otherwise could be solved by retrying lead to a unhandled error.
With this patch applied we can handle such cases by using trivial try { ... } catch blocks.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1134,2017-04-12T10:06:46Z,2017-04-13T20:25:40Z,2017-04-14T04:40:20Z,MERGED,True,1,1,1,https://github.com/mrbar42,revert missing char,1,[],https://github.com/espruino/Espruino/pull/1134,https://github.com/mrbar42,1,https://github.com/espruino/Espruino/pull/1134,"accidentally removed on 7a526b
fixes the broken build","accidentally removed on 7a526b
fixes the broken build",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1139,2017-04-15T17:07:06Z,2017-04-18T06:56:34Z,2017-04-18T07:45:25Z,MERGED,True,2,0,1,https://github.com/MaBecker,add /topreadonly and /topstrings,1,[],https://github.com/espruino/Espruino/pull/1139,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1139,on ESPs make can produce this two files,on ESPs make can produce this two files,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1142,2017-04-18T20:06:07Z,2017-04-19T05:51:34Z,2017-04-19T05:52:32Z,CLOSED,False,731,72,17,https://github.com/MaBecker,push ESP8266 addons and changes to master ,57,[],https://github.com/espruino/Espruino/pull/1142,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1142,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)","@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1142,2017-04-18T20:06:07Z,2017-04-19T05:51:34Z,2017-04-19T05:52:32Z,CLOSED,False,731,72,17,https://github.com/MaBecker,push ESP8266 addons and changes to master ,57,[],https://github.com/espruino/Espruino/pull/1142,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1142#issuecomment-294971285,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)",Will send another pr for .travis.ylm to build ESP8266_4MB too after this is merged.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1142,2017-04-18T20:06:07Z,2017-04-19T05:51:34Z,2017-04-19T05:52:32Z,CLOSED,False,731,72,17,https://github.com/MaBecker,push ESP8266 addons and changes to master ,57,[],https://github.com/espruino/Espruino/pull/1142,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1142#issuecomment-295106825,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)",some parts are missing,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1143,2017-04-19T06:07:38Z,2017-04-19T07:14:22Z,2017-04-19T10:01:07Z,MERGED,True,739,79,18,https://github.com/MaBecker,push ESP8266 addons and changes to master,60,[],https://github.com/espruino/Espruino/pull/1143,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1143,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92.

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)","@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92.

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)",True,{'THUMBS_UP': ['https://github.com/opichals']}
espruino/Espruino,https://github.com/espruino/Espruino,1143,2017-04-19T06:07:38Z,2017-04-19T07:14:22Z,2017-04-19T10:01:07Z,MERGED,True,739,79,18,https://github.com/MaBecker,push ESP8266 addons and changes to master,60,[],https://github.com/espruino/Espruino/pull/1143,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1143#issuecomment-295134345,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92.

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)",Thanks! Was there a reason for changing the order of fields in the I2C structure around?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1143,2017-04-19T06:07:38Z,2017-04-19T07:14:22Z,2017-04-19T10:01:07Z,MERGED,True,739,79,18,https://github.com/MaBecker,push ESP8266 addons and changes to master,60,[],https://github.com/espruino/Espruino/pull/1143,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1143#issuecomment-295198086,"@gfwilliams: all changes in one pull request. Hope I am not to late for 1v92.

ESP8266_4MB

vars: 1600
64K save area
add libs GRAPHICS
add free flash areas on partition 3 and 4


some type casts to stop compiler warning
add ESP8266.deepSleep(micros, option)","Not sure about that, guess it caused a reboot on ESP8266 in other direction.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1144,2017-04-19T10:01:49Z,2017-04-19T10:23:28Z,2017-04-19T10:23:28Z,CLOSED,False,0,0,0,https://github.com/wilberforce,Also build espruino_esp32.bin for tgz,3,[],https://github.com/espruino/Espruino/pull/1144,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1144,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1144,2017-04-19T10:01:49Z,2017-04-19T10:23:28Z,2017-04-19T10:23:28Z,CLOSED,False,0,0,0,https://github.com/wilberforce,Also build espruino_esp32.bin for tgz,3,[],https://github.com/espruino/Espruino/pull/1144,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1144#issuecomment-295200676,,"Are these not the changes I just made?
I think you might be doing something odd with the way you're merging and creating PRs.
Ideally you want to do:
git checkout ESP32
git merge master
# ESP32 will now have all the code from master in it, as well as your changes
... Now you can issue a PR from it

You might just be manually copying files or something?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1144,2017-04-19T10:01:49Z,2017-04-19T10:23:28Z,2017-04-19T10:23:28Z,CLOSED,False,0,0,0,https://github.com/wilberforce,Also build espruino_esp32.bin for tgz,3,[],https://github.com/espruino/Espruino/pull/1144,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1144#issuecomment-295204466,,"I had added a couple of lines to Make file, so it was your changes plus a couple of lines the copied to the binary so that tgz would have a consistent filename.
I have reverted this, and merged with master with the current build so that ESP32 will be up to date.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1144,2017-04-19T10:01:49Z,2017-04-19T10:23:28Z,2017-04-19T10:23:28Z,CLOSED,False,0,0,0,https://github.com/wilberforce,Also build espruino_esp32.bin for tgz,3,[],https://github.com/espruino/Espruino/pull/1144,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1144#issuecomment-295205409,,"Ok, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1146,2017-04-19T18:34:05Z,2017-04-20T06:38:16Z,2017-08-04T16:30:15Z,MERGED,True,0,8,1,https://github.com/MaBecker,remove merge conflict,1,[],https://github.com/espruino/Espruino/pull/1146,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1146,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1146,2017-04-19T18:34:05Z,2017-04-20T06:38:16Z,2017-08-04T16:30:15Z,MERGED,True,0,8,1,https://github.com/MaBecker,remove merge conflict,1,[],https://github.com/espruino/Espruino/pull/1146,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1146#issuecomment-295598679,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1147,2017-04-21T23:22:20Z,2017-04-27T09:55:38Z,2017-04-27T09:55:38Z,MERGED,True,38,57,6,https://github.com/wilberforce,"suppress warnings, FatFS docs, suppress logging",7,[],https://github.com/espruino/Espruino/pull/1147,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1147,"Remove esp-idf logging - stops wifi and booting output confusing web ide
clean up FatFS - fix compile warnings
remove unimplemented readonly mode (it was a compile not runtime option)","Remove esp-idf logging - stops wifi and booting output confusing web ide
clean up FatFS - fix compile warnings
remove unimplemented readonly mode (it was a compile not runtime option)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1147,2017-04-21T23:22:20Z,2017-04-27T09:55:38Z,2017-04-27T09:55:38Z,MERGED,True,38,57,6,https://github.com/wilberforce,"suppress warnings, FatFS docs, suppress logging",7,[],https://github.com/espruino/Espruino/pull/1147,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1147#issuecomment-297664312,"Remove esp-idf logging - stops wifi and booting output confusing web ide
clean up FatFS - fix compile warnings
remove unimplemented readonly mode (it was a compile not runtime option)",@gfwilliams Please can you merge into master. Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1147,2017-04-21T23:22:20Z,2017-04-27T09:55:38Z,2017-04-27T09:55:38Z,MERGED,True,38,57,6,https://github.com/wilberforce,"suppress warnings, FatFS docs, suppress logging",7,[],https://github.com/espruino/Espruino/pull/1147,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1147#issuecomment-297669164,"Remove esp-idf logging - stops wifi and booting output confusing web ide
clean up FatFS - fix compile warnings
remove unimplemented readonly mode (it was a compile not runtime option)","Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1148,2017-04-24T10:42:36Z,2017-04-24T11:11:56Z,2017-04-24T11:58:16Z,MERGED,True,84,6,4,https://github.com/urish,nRF5x: Get RSSI of connection when in Central mode,2,[],https://github.com/espruino/Espruino/pull/1148,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1148,"Fix for #1047, replaces #1107","Fix for #1047, replaces #1107",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1148,2017-04-24T10:42:36Z,2017-04-24T11:11:56Z,2017-04-24T11:58:16Z,MERGED,True,84,6,4,https://github.com/urish,nRF5x: Get RSSI of connection when in Central mode,2,[],https://github.com/espruino/Espruino/pull/1148,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1148#issuecomment-296622034,"Fix for #1047, replaces #1107",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1156,2017-04-30T03:50:28Z,2017-05-02T08:55:19Z,2018-02-20T05:06:44Z,MERGED,True,2,2,1,https://github.com/wilberforce,increase espruino task stack to 20000,1,[],https://github.com/espruino/Espruino/pull/1156,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1156,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1162,2017-05-08T09:30:41Z,2017-05-11T11:44:00Z,2017-05-11T11:44:00Z,MERGED,True,18,6,5,https://github.com/wilberforce,"Add ESP32 folder to release zip, Fat FS fixes",3,[],https://github.com/espruino/Espruino/pull/1162,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1162,Please note that a versioned named file of the build $(PROJ_NAME).bin is also made and copied to the build folder for the final release zip.,Please note that a versioned named file of the build $(PROJ_NAME).bin is also made and copied to the build folder for the final release zip.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1167,2017-05-22T05:19:45Z,2017-05-22T08:18:40Z,2017-05-22T08:18:41Z,MERGED,True,1,1,1,https://github.com/psiphi75,Fixed problem with not running in bash.,1,[],https://github.com/espruino/Espruino/pull/1167,https://github.com/psiphi75,1,https://github.com/espruino/Espruino/pull/1167,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1167,2017-05-22T05:19:45Z,2017-05-22T08:18:40Z,2017-05-22T08:18:41Z,MERGED,True,1,1,1,https://github.com/psiphi75,Fixed problem with not running in bash.,1,[],https://github.com/espruino/Espruino/pull/1167,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1167#issuecomment-303031493,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1170,2017-05-25T11:57:57Z,2017-05-25T12:02:36Z,2017-05-25T12:52:24Z,MERGED,True,8,7,1,https://github.com/drandreas,nRF52: Addendum to 2deb5f97,1,[],https://github.com/espruino/Espruino/pull/1170,https://github.com/drandreas,1,https://github.com/espruino/Espruino/pull/1170,"The patch I posted earlier was part of a series.
For this reason the second safety check is off by
several lines. The safety check should be performed
prior to any other branch.
Sorry for the inconvenience","The patch I posted earlier was part of a series.
For this reason the second safety check is off by
several lines. The safety check should be performed
prior to any other branch.
Sorry for the inconvenience",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1170,2017-05-25T11:57:57Z,2017-05-25T12:02:36Z,2017-05-25T12:52:24Z,MERGED,True,8,7,1,https://github.com/drandreas,nRF52: Addendum to 2deb5f97,1,[],https://github.com/espruino/Espruino/pull/1170,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1170#issuecomment-303993564,"The patch I posted earlier was part of a series.
For this reason the second safety check is off by
several lines. The safety check should be performed
prior to any other branch.
Sorry for the inconvenience",Ahh - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1170,2017-05-25T11:57:57Z,2017-05-25T12:02:36Z,2017-05-25T12:52:24Z,MERGED,True,8,7,1,https://github.com/drandreas,nRF52: Addendum to 2deb5f97,1,[],https://github.com/espruino/Espruino/pull/1170,https://github.com/drandreas,3,https://github.com/espruino/Espruino/pull/1170#issuecomment-303993961,"The patch I posted earlier was part of a series.
For this reason the second safety check is off by
several lines. The safety check should be performed
prior to any other branch.
Sorry for the inconvenience","I think you also added else rx_data_size = 0; below the first safety check. This filters out single byte requests without CRC.  I'm not sure if this every happens.
Just something to keep in mind.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1170,2017-05-25T11:57:57Z,2017-05-25T12:02:36Z,2017-05-25T12:52:24Z,MERGED,True,8,7,1,https://github.com/drandreas,nRF52: Addendum to 2deb5f97,1,[],https://github.com/espruino/Espruino/pull/1170,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1170#issuecomment-304002881,"The patch I posted earlier was part of a series.
For this reason the second safety check is off by
several lines. The safety check should be performed
prior to any other branch.
Sorry for the inconvenience","Thanks - yeah, maybe it was ill-advised - I just figured if it didn't have a CRC it was probably malformed and we wanted to fail.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1180,2017-06-09T15:00:28Z,2017-06-09T15:32:32Z,2017-06-09T15:32:36Z,MERGED,True,26,54,1,https://github.com/VVESTM,L4 LL fix,2,[],https://github.com/espruino/Espruino/pull/1180,https://github.com/VVESTM,1,https://github.com/espruino/Espruino/pull/1180,"Hello Gordon,
Here are two fix for stm32_ll part. It will fix some issues I have seen on ADC and I2C.
Regards
Vincent","Hello Gordon,
Here are two fix for stm32_ll part. It will fix some issues I have seen on ADC and I2C.
Regards
Vincent",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1180,2017-06-09T15:00:28Z,2017-06-09T15:32:32Z,2017-06-09T15:32:36Z,MERGED,True,26,54,1,https://github.com/VVESTM,L4 LL fix,2,[],https://github.com/espruino/Espruino/pull/1180,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1180#issuecomment-307421725,"Hello Gordon,
Here are two fix for stm32_ll part. It will fix some issues I have seen on ADC and I2C.
Regards
Vincent","Nice, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/drandreas,1,https://github.com/espruino/Espruino/pull/1182,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1182#issuecomment-308696890,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","Thanks! I'll take a look - I wonder whether we couldn't re-add nrfURL to core Espruino C code, by calling your NFC functions? It might not be a huge task, and would allow Puck.js to still advertise the getting started URL on NFC out of the box.
Also, do your changes to the NFC lib work in addition of the existing functionality? I wonder whether we coild submit it back to Nordic and get them to put them in the next SDK?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/drandreas,3,https://github.com/espruino/Espruino/pull/1182#issuecomment-308720486,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","Yes, nrfURLcan be re-added in custom C or also using nordics library. It just added additional code clutter and cases to handle.
While working on this project I came to the conclusion that Nordic tailored the HAL to serve the purpose of gluing the closed source NDEF library to NRF52. In SDK 13.0.0 is a second almost identical HAL, this time its tailored to NFC Tag Type 4 emulation with another closed source library.
I open some discussions within my code to illustrate both statements and give additional insights.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/drandreas,4,https://github.com/espruino/Espruino/pull/1182#issuecomment-353074561,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","I've re-added NRF.nfcURL and NRF.nfcRaw. I don't own an Android phone.
Can you check if it works with yours?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1182#issuecomment-353077712,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.",Thanks! I'll have a go - a bit busy today so can't promise anything right away though.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1182#issuecomment-353142924,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","This looks great - tested on my Android device and it works.
Merging now :) If you get a chance, an example in jswrap_bluetooth.c's JSON showing how you can use start/stop/NFCrx/etc together to create an NFC tag would be really cool though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/drandreas,7,https://github.com/espruino/Espruino/pull/1182#issuecomment-353147443,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.","My forum post http://forum.espruino.com/comments/13617070/ has an example with a moderate complexity. I'm not sure how to fit it properly formatted into jswrap_bluetooth.c
Note: The ndef array in my example is simply a copy of global[""\xFF""].NfcData of your nfcURL or nfcRAW example.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1182,2017-06-15T09:12:02Z,2017-12-20T18:22:11Z,2017-12-21T15:21:12Z,MERGED,True,644,388,7,https://github.com/drandreas,RAW JS NFC-API,12,[],https://github.com/espruino/Espruino/pull/1182,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1182#issuecomment-353311204,"I've completed my NFC-API implementation. It's thoroughly tested and in use for 1-2 weeks. However, it contains several changes in Nordics code. I'm unsure how this can be future proofed. Moreover this rework removes nfcURL and nfcRAW in favour of full RX and TX access. NFCon and NFCoff remain unchanged.
Adding nfcURL and nfcRAW back as JS module should be straight forward. But this change still breaks backward compatibility.
For all this reasons this pull request is intended as a basis of discussion on #1161.",Thanks - I'll try and come up with something based on that,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/daveshah1,1,https://github.com/espruino/Espruino/pull/1184,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.","Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1184#issuecomment-309025031,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.",Thanks - does it really not work with Python 3? We had a bit of a push to tweak things a while back and I thought the scripts would run on either version,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/daveshah1,3,https://github.com/espruino/Espruino/pull/1184#issuecomment-309025458,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.","Odd - I was getting this error with Python 3.6.1 on Arch Linux, but not 2.7.13
Generating platform configs
Exception ignored in: <common.Discarder object at 0x7f3bb71285c0>
AttributeError: 'Discarder' object has no attribute 'flush'
make: *** [Makefile:724: /home/david/Espruino/gen/platform_config.h] Error 120",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1184#issuecomment-309035226,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.","Can you run python3 scripts/build_platform_config.py $(BOARD) gen/platform_config.h and see what it actually reports in full? (or make with V=1)
I don't see any instance of flush in the python file - so maybe it's somehow using a python2.7 library in python3?
I just replaced all instances of python with  python3 in my Makefile here and it seems to work for me - albeit only with Python 3.5.2, but I doubt they would have broken compatibility between 3.5 and 3.6?
If they have I'd really like to fix the scripts though, rather than doing the usual thing of regressing to 2.7 ;)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/daveshah1,5,https://github.com/espruino/Espruino/pull/1184#issuecomment-309066828,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.",Investigating further it seems the Discarder class used in common.py to suppress stdout output when SILENT is set (which means the error doesn't occur with V=1) needs a flush dummy method for the code to run properly on Python 3.6. I'll fix it properly that way and update this pull request.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1184#issuecomment-309068252,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.",That's awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1184,2017-06-16T13:01:49Z,2017-06-16T17:11:59Z,2017-06-16T17:11:59Z,MERGED,True,2,0,1,https://github.com/daveshah1,Fix building on newer Linux systems with Python3 default,3,[],https://github.com/espruino/Espruino/pull/1184,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1184#issuecomment-309082248,"Newer systems such as Arch have python defaulting to Python 3 if it is
installed. This commit fixes building in this case, by detecting it and
using the python2.7 command instead. It also allows the Python command
used to be overridden with the PYTHON variable.","Great, thanks for this!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1189,2017-06-23T20:47:03Z,2017-06-26T07:45:49Z,2017-06-26T07:45:49Z,MERGED,True,3,1,2,https://github.com/opichals,No timeout argument setTimeout() calls work,1,[],https://github.com/espruino/Espruino/pull/1189,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1189,"It behaves as if zero (0) was passed in. Compliant to the spec: see
https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#get-the-timeout","It behaves as if zero (0) was passed in. Compliant to the spec: see
https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#get-the-timeout",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1189,2017-06-23T20:47:03Z,2017-06-26T07:45:49Z,2017-06-26T07:45:49Z,MERGED,True,3,1,2,https://github.com/opichals,No timeout argument setTimeout() calls work,1,[],https://github.com/espruino/Espruino/pull/1189,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1189#issuecomment-310986728,"It behaves as if zero (0) was passed in. Compliant to the spec: see
https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#get-the-timeout",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1190,2017-06-23T21:01:03Z,2017-06-26T07:49:27Z,2018-12-29T09:29:03Z,MERGED,True,26,33,12,https://github.com/opichals,net->createsocket() SocketType argument added,2,[],https://github.com/espruino/Espruino/pull/1190,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1190,First steps for UDP support (#1062),First steps for UDP support (#1062),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1190,2017-06-23T21:01:03Z,2017-06-26T07:49:27Z,2018-12-29T09:29:03Z,MERGED,True,26,33,12,https://github.com/opichals,net->createsocket() SocketType argument added,2,[],https://github.com/espruino/Espruino/pull/1190,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1190#issuecomment-310987440,First steps for UDP support (#1062),"Looks awesome, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1195,2017-06-30T12:11:18Z,2017-06-30T12:27:36Z,2018-12-29T09:29:16Z,MERGED,True,1,1,1,https://github.com/opichals,Align getting sendData with its jsvUnLock,1,[],https://github.com/espruino/Espruino/pull/1195,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1195,"Both the sendData jsvObjectGetChild() and jsvUnLock() are in the
same if (!connectionCloseNow) code block.","Both the sendData jsvObjectGetChild() and jsvUnLock() are in the
same if (!connectionCloseNow) code block.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1195,2017-06-30T12:11:18Z,2017-06-30T12:27:36Z,2018-12-29T09:29:16Z,MERGED,True,1,1,1,https://github.com/opichals,Align getting sendData with its jsvUnLock,1,[],https://github.com/espruino/Espruino/pull/1195,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1195#issuecomment-312254140,"Both the sendData jsvObjectGetChild() and jsvUnLock() are in the
same if (!connectionCloseNow) code block.","Wow, great - thanks for spotting that! I'm surprised that didn't cause more issues to be honest.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1195,2017-06-30T12:11:18Z,2017-06-30T12:27:36Z,2018-12-29T09:29:16Z,MERGED,True,1,1,1,https://github.com/opichals,Align getting sendData with its jsvUnLock,1,[],https://github.com/espruino/Espruino/pull/1195,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1195#issuecomment-315563406,"Both the sendData jsvObjectGetChild() and jsvUnLock() are in the
same if (!connectionCloseNow) code block.",It was actually the added UDP test that was leaking and made me debug this.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/beanjs,1,https://github.com/espruino/Espruino/pull/1197,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1197#issuecomment-315023935,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","Thanks - why do you think netRecvis in error? As far as I can tell the data isn't zero-terminated so there's no problem using all 256 chars of the buffer.
Also you seem to have committed an extra bash script, and not added the jswrap_mqtt files? Out of interest, what did you find wrong with the existing JS MQTT implementation that you wanted a C based one for?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/beanjs,3,https://github.com/espruino/Espruino/pull/1197#issuecomment-315034155,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","When I send a larger amount of data, telnet will lose a character, I did not carefully look for reasons. But when I changed 256 to 255, the problem was not happening, and I really wanted to use the mqtt protocol to rewrite it because I used the esp8266 module when using js mqtt when i could write the amount of code It will be much less, there is no transplant is completed, so there is no upload mqtt related code",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1197#issuecomment-315999834,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","Hi - thanks for the changes, but you still haven't committed the missing files. For some reason /libs/network/mqtt is now in gitignore so you're not committing your jswrap files. If you check the 'travis' note next to your commit you can see that the changes you've sent don't compile: https://travis-ci.org/espruino/Espruino/builds/254742334",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1197#issuecomment-316961157,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","HI @iotong,
does this fix issue #1037?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1197#issuecomment-316961541,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","Just to add, this is still broken because you haven't committed the files that are needed: https://travis-ci.org/espruino/Espruino/jobs/255994548",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1197#issuecomment-316969786,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","tried ca67ee6, works on my side.
>E.setBootCode()
Erasing Flash..................
Writing...
Compressed 25600 bytes to 8
Checking...
Done!
=undefined
>load();
=undefined
Loading 8 bytes from flash...
> 

@wilberforce  @jumjum123 this might work for ESP32 as well
@gfwilliams added a fix for  #1037",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/beanjs,8,https://github.com/espruino/Espruino/pull/1197#issuecomment-317046849,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","@MaBecker yes ,it work!are you chinese?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/1197#issuecomment-317237233,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","Please see: https://travis-ci.org/espruino/Espruino/jobs/256128299
Please can you commit libs/network/mqtt/jswrap_mqtt.c and libs/network/mqtt/jswrap_mqtt.h? Without this, I will have to close the PR as it doesn't build!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/beanjs,10,https://github.com/espruino/Espruino/pull/1197#issuecomment-317309651,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","The transplant has not been completed, and I will restart the pull request after the completion of the transplant",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/MaBecker,11,https://github.com/espruino/Espruino/pull/1197#issuecomment-317313222,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto",@iotong I am german,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1197,2017-07-13T08:34:52Z,2017-07-24T03:16:47Z,2017-07-24T07:12:30Z,CLOSED,False,358,97,17,https://github.com/beanjs,some changes,16,[],https://github.com/espruino/Espruino/pull/1197,https://github.com/gfwilliams,12,https://github.com/espruino/Espruino/pull/1197#issuecomment-317338087,"1.fixed telnet recv function bug
2.addition shell function in linux system ,that allow excute shell cmd in espruino
3.addtion xtea crypto","Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1198,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1198#issuecomment-315786928,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Great, thanks! I'm on holiday this week but I'll try and give it a proper look through next week",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1198#issuecomment-315998651,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@gfwilliams Sure, enjoy your spare time! Till then I might get some time to work on some of the points I mentioned.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1198#issuecomment-323302936,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD",Sorry for the delay - I'm just looking through this a bit now - I'll try and mention some stuff inline...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1198#issuecomment-323309852,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Thanks - this looks really nicely done!
I mentioned the host/port thing, but maybe it's fine - it just feels like overkill.
in jswrap_dgram_socket_send you have the data, then have to pack it into an object, and then unpack it, then pass it as arguments. Potentially it wouldn't be much worse to just send everything in the data argument?
I don't know though - maybe it's just more messy.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1198#issuecomment-323333462,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Thank you for the review. I will get back on individual items later hopefully over the weekend.
I get the notes about the host/port in the interface but I wanted rather not to introduce additional data buffer copying. In this context the receiveInfo and hostInfo creation sounds better to me. Or do you have any buffer no-copy-concat capabilities built-in? What do you think?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1198#issuecomment-323390677,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","do you have any buffer no-copy-concat capabilities built-in?

Well, for send, you can just access that part of the array with &buf[8] or similar? clientRequestWrite appends a lot of the time anyway, so if you were using that you're not really making anything slower. It'll be much faster than allocating/deallocating objects.
For receive, you have a buffer of data available that you can put data in as well, so I think you're fine there too. There wouldn't actually be any significant amount more copying than before (no more copying of the data at least).
The real bonus though is that right now I think if you call jswrap_dgram_socket_send twice in quick succession then both packets get merged into one. It'd be a real pain to fix with the current solution. By having a packet_length header in the actual data you send, you can actually fix that really easily since the 'send' implementation can just take however many bytes make up one packet.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,8,https://github.com/espruino/Espruino/pull/1198#issuecomment-323395116,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Thanks for the description! You are right, it sounds like the data buffer copies are already there so it should be easy to put the port:host ahead of the payload and be fine. I will have a look at that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,9,https://github.com/espruino/Espruino/pull/1198#issuecomment-324139624,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@gfwilliams I have updated the code so that the host:port is embedded within the send/recv buffer (rebased on top of master). This time the netSend/Recv (net->send/recv) take the SocketType as an argument. What do you think? I am not really convinced it looks any better. But I guess like you mentioned before it will perform better.
Note: I broke the network_esp8266, as I only tested network_linux (on OSX).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,10,https://github.com/espruino/Espruino/pull/1198#issuecomment-324143633,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","socketserver.c: The client/server code was pretty badly duplicated before - did you come across
any reason why we couldn't un-duplicate it?

I think it could be deduplicated. I would prefer not to combine the UDP and the refactor work.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/1198#issuecomment-324246154,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Wow, thanks! As you say I'm not sure the changes themselves look that much better, but:

You can now send multiple UDP packets to different addresses and they don't get confused
It should perform a little better
On devices that don't support UDP all the arguments to send/recv still make sense
We can now remove the TLS bitfield from netSend

I'm pretty happy with that really.

I would prefer not to combine the UDP and the refactor work.

Totally agree :) Do you want me to look at doing that refactor before or after we merge this in? I guess before it could cause some merge headaches :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,12,https://github.com/espruino/Espruino/pull/1198#issuecomment-324252463,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","I guess before it could cause some merge headaches :)

Yes, my preference would be to do it after this is in master.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1198#issuecomment-324256720,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Ok, so next steps - shall I create a branch for this, and we can work on getting the build working properly on all platforms? I'd be happy to merge as soon as we have it compiling and working with TCP/IP on the existing platforms, and then I can work on UDP for WIZnet/ESP8266 later.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,14,https://github.com/espruino/Espruino/pull/1198#issuecomment-324265688,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@gfwilliams I guess adjusting the network_esp8266 would be nice as this was working before I moved the host:port to buf. As you say other platforms should just work as they were without the network.h interface changes once they are made to match the send/recv signature changes and UDP support can be then added incrementally to those.
I should find time for this today/tomorrow the evening, but if you feel like working on this feel free. :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,15,https://github.com/espruino/Espruino/pull/1198#issuecomment-324491699,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@gfwilliams Went through the network_* stuff and synced the createsocket/recv/send signatures and removed inappropriate jsWarn() calls in favor of a DBG macro.
It seems to be compiling. I changed the network_esp8266 to work with the buf embedded host:port though have only tested on linux so far.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/MaBecker,16,https://github.com/espruino/Espruino/pull/1198#issuecomment-324535131,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@opichals I can jump in and test  on ESP8266.
Can you please share you linux test code?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/MaBecker,17,https://github.com/espruino/Espruino/pull/1198#issuecomment-324536956,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","There are some helpful tests created by @tve
https://github.com/espruino/Espruino/tree/master/libs/network/esp8266/tests/projects",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,18,https://github.com/espruino/Espruino/pull/1198#issuecomment-324555265,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@MaBecker I created a basic test here https://github.com/espruino/Espruino/pull/1198/files#diff-bf1f203d99c827faf97580d231351b4e.  There are other network related tests (tests/_net.js).
Then I usually test the mdns module I crafted so far.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,19,https://github.com/espruino/Espruino/pull/1198#issuecomment-325044618,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","Added size to the UDP buf header in f3378c4 so multiple socket.send() calls are possible.
The mdns module mentioned above working as expected on both OSX (network_linux) and ESP8266 d1 mini board.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,20,https://github.com/espruino/Espruino/pull/1198#issuecomment-325635574,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD",@gfwilliams After the esp8266 startMDNS() decision this is merge at will from my point of view.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/wilberforce,21,https://github.com/espruino/Espruino/pull/1198#issuecomment-325639712,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@opichals
Will need to update the esp32 code to the same as the Linux network updates after this pull request is done?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/opichals,22,https://github.com/espruino/Espruino/pull/1198#issuecomment-325650272,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD","@wilberforce Yes, the behavior should not change by merging this. The board specific UDP support is to be added incrementally in future PRs.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1198,2017-07-15T21:06:08Z,2017-08-29T14:48:48Z,2018-12-29T09:30:03Z,MERGED,True,742,159,17,https://github.com/opichals,UDP support,15,[],https://github.com/espruino/Espruino/pull/1198,https://github.com/gfwilliams,23,https://github.com/espruino/Espruino/pull/1198#issuecomment-325688307,"This PR is intended for code review and further guidance purposes. I have reached a working state of the #1062 work at which point I would appreciate a deeper review of my changes and further guidance.
Brief changes summary:

new ST_UDP SocketType flag
netSend and netRecv receive SocketType argument just as netCreateSocket
Board-specific UDP support is optional (only the linux & esp8266 are supported)

What to look for:

external usage can be seen in the tests/test_dgram_socket.js
added FIXME in the diffs where I deem the solution not nice (though working)
The socketserver.c:receivedData is treated separately for UDP providing the remoteinfo address/port/size as the second argument to the on('message') callback
the sendData handling as noted in #1062 Phase 2 section should be reworked somehow to handle different host/port send is still TBD",This looks great to me - thanks for all your work on this!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1200,2017-07-21T10:44:16Z,2017-07-21T15:40:00Z,2017-07-21T15:40:00Z,MERGED,True,17,6,1,https://github.com/MaBecker,fix issue  #1037,2,[],https://github.com/espruino/Espruino/pull/1200,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1200,fix found by @iotong,fix found by @iotong,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1200,2017-07-21T10:44:16Z,2017-07-21T15:40:00Z,2017-07-21T15:40:00Z,MERGED,True,17,6,1,https://github.com/MaBecker,fix issue  #1037,2,[],https://github.com/espruino/Espruino/pull/1200,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1200#issuecomment-317034958,fix found by @iotong,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1202,2017-07-23T01:37:38Z,2017-07-23T08:20:32Z,2017-07-23T08:20:33Z,MERGED,True,15,11,3,https://github.com/wilberforce,fix ESP32 'Not connected to the internet',2,[],https://github.com/espruino/Espruino/pull/1202,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1202,"Fold ESP32 fixes to ESP32
ca67ee6
Thanks to @iotong","Fold ESP32 fixes to ESP32
ca67ee6
Thanks to @iotong",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1202,2017-07-23T01:37:38Z,2017-07-23T08:20:32Z,2017-07-23T08:20:33Z,MERGED,True,15,11,3,https://github.com/wilberforce,fix ESP32 'Not connected to the internet',2,[],https://github.com/espruino/Espruino/pull/1202,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1202#issuecomment-317237130,"Fold ESP32 fixes to ESP32
ca67ee6
Thanks to @iotong",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1211,2017-08-04T12:35:20Z,2017-08-04T12:53:08Z,2017-08-04T14:19:43Z,MERGED,True,2,2,1,https://github.com/MaBecker, change topstrings and topreadonly to work on mac os x too,1,[],https://github.com/espruino/Espruino/pull/1211,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1211,fix issue #1210,fix issue #1210,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1214,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1214#issuecomment-322140673,,"@gfwilliams
The travis build seems to be failing for BOARDS with which the code in this pull does not alter?
This is now building for the ESP32 - updated to esp-idf 2.1 and @jumjum123 's timer updates
>process.env
={
  ""VERSION"": ""1v93.167"",
  ""BUILD_DATE"": ""Aug 14 2017"",
  ""BUILD_TIME"": ""20:43:09"",
  ""GIT_COMMIT"": ""c5efaf6c3086d2993d099c281b8bfbd802dcb734"",
  ""BOARD"": ""ESP32"",
  ""CHIP"": ""ESP32"",
  ""CHIP_FAMILY"": ""ESP32"",
  ""FLASH"": 0, ""RAM"": 524288,
  ""SERIAL"": ""240ac400-2f90"",
  ""CONSOLE"": ""Telnet"",
  ""EXPORTS"": { ""jsvLock"": 1074615584, ""jsvLockAgainSafe"": 1074615728, ""jsvUnLock"": 1074618344, ""jsvSkipName"": 1074635984,
    ""jsvMathsOp"": 1074646088, ""jsvMathsOpSkipNames"": 1074648596, ""jsvNewFromFloat"": 1074631720, ""jsvNewFromInteger"": 1074631632, ""jsvNewFromString"": 1074630248,
    ""jsvNewFromBool"": 1074631692, ""jsvGetFloat"": 1074640592, ""jsvGetInteger"": 1074634268, ""jsvGetBool"": 1074641172, ""jspeiFindInScopes"": 1074660404,
    ""jspReplaceWith"": 1074660136, ""jspeFunctionCall"": 1074670468, ""jspGetNamedVariable"": 1074661904, ""jspGetNamedField"": 1074662292, ""jspGetVarNamedField"": 1074662408,
    ""jsvNewWithFlags"": 1074629828 }
 }
>ESP32.getState()
={
  ""sdkVersion"": ""v2.1"",
  ""freeHeap"": 129720, ""addr"": 65536,
  ""partitionBoot"": ""factory""
 }
>",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1214#issuecomment-322142921,,"I wouldn't worry about those two. The MICROBIT fail is my fault, and the RUUVITAG one just seems to be a failure in the travis system, not your code.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1214#issuecomment-322147410,,Do you think this is ready to merge then?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/1214#issuecomment-322167741,,"@gfwilliams
Yes - ready to merge",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1214,2017-08-14T06:21:19Z,2017-08-14T11:45:52Z,2017-08-14T11:45:52Z,MERGED,True,78,20,5,https://github.com/wilberforce,"Timer updates, update to esp-idf 2.1, 10 sockets",6,['ESP32'],https://github.com/espruino/Espruino/pull/1214,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1214#issuecomment-322169431,,"Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1216,2017-08-15T05:48:02Z,2017-08-15T06:43:59Z,2017-08-18T10:17:28Z,MERGED,True,3,0,1,https://github.com/MaBecker,add ESP8266 fixes,1,[],https://github.com/espruino/Espruino/pull/1216,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1216,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1216,2017-08-15T05:48:02Z,2017-08-15T06:43:59Z,2017-08-18T10:17:28Z,MERGED,True,3,0,1,https://github.com/MaBecker,add ESP8266 fixes,1,[],https://github.com/espruino/Espruino/pull/1216,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1216#issuecomment-322389678,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1217,2017-08-15T13:47:34Z,2017-08-15T13:47:42Z,2017-08-15T13:47:42Z,MERGED,True,216,3,7,https://github.com/gfwilliams,Add Seeed WIO support,5,[],https://github.com/espruino/Espruino/pull/1217,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/1217,Pulling in @lanselambor's changes,Pulling in @lanselambor's changes,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1222,2017-08-18T22:14:54Z,2017-08-19T08:43:06Z,2017-08-19T08:43:06Z,MERGED,True,5,0,1,https://github.com/wilberforce,Add package python-serial,1,[],https://github.com/espruino/Espruino/pull/1222,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1222,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1222,2017-08-18T22:14:54Z,2017-08-19T08:43:06Z,2017-08-19T08:43:06Z,MERGED,True,5,0,1,https://github.com/wilberforce,Add package python-serial,1,[],https://github.com/espruino/Espruino/pull/1222,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1222#issuecomment-323510209,,"Great, thanks! Shame we have to pull it in for all builds, but hey - it's probably pretty quick.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1223,2017-08-19T22:41:29Z,2017-08-21T09:31:32Z,2017-08-21T09:31:32Z,MERGED,True,4,7,3,https://github.com/wilberforce,Fix ESP32 travis build,6,[],https://github.com/espruino/Espruino/pull/1223,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1223,Sorry - no way of testing this without a pull request.,Sorry - no way of testing this without a pull request.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1223,2017-08-19T22:41:29Z,2017-08-21T09:31:32Z,2017-08-21T09:31:32Z,MERGED,True,4,7,3,https://github.com/wilberforce,Fix ESP32 travis build,6,[],https://github.com/espruino/Espruino/pull/1223,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1223#issuecomment-323553740,Sorry - no way of testing this without a pull request.,"Working now - please merge.
For ESP32 - there where 2 issues - ADC count causing undefined, and pyserial import failing.
The first was from here:
save a few bytes of flash on chips with <=1 ADC
b0a282d
Failed on this board  BOARD=NUCLEOL476RG
https://travis-ci.org/espruino/Espruino/jobs/266390674
Looks like the same issue here:
https://travis-ci.org/espruino/Espruino/jobs/266390638#L1180
/home/travis/build/espruino/Espruino/gen/jspininfo.c:6:37: error: 'JSH_ANALOG12' undeclared here (not in a function)
/* PA0  */ { JSH_PORTA, JSH_PIN0+0, JSH_ANALOG12|JSH_ANALOG_CH5, { JSH_AF2|JSH_TIMER5|JSH_TIMER_CH1/* 1 Uses */, JSH_AF8|JSH_USART4|JSH_USART_TX/* 2 Uses */, JSH_AF1|JSH_TIMER2|JSH_TIMER_CH1/* 3 Uses */, 0, 0 } },

https://github.com/espruino/Espruino/blob/master/boards/NUCLEOL476RG.py#L53
Sorry - I don't know the hardware so not confident to change   'adc' : 1, to   'adc' : 2,`",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1225,2017-08-24T11:10:54Z,2017-08-24T11:16:28Z,2017-08-24T11:19:15Z,MERGED,True,17,1,2,https://github.com/lanselambor,Merge pull request #1 from espruino/master,2,[],https://github.com/espruino/Espruino/pull/1225,https://github.com/lanselambor,1,https://github.com/espruino/Espruino/pull/1225,merge from Dordon,merge from Dordon,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1225,2017-08-24T11:10:54Z,2017-08-24T11:16:28Z,2017-08-24T11:19:15Z,MERGED,True,17,1,2,https://github.com/lanselambor,Merge pull request #1 from espruino/master,2,[],https://github.com/espruino/Espruino/pull/1225,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1225#issuecomment-324606782,merge from Dordon,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1225,2017-08-24T11:10:54Z,2017-08-24T11:16:28Z,2017-08-24T11:19:15Z,MERGED,True,17,1,2,https://github.com/lanselambor,Merge pull request #1 from espruino/master,2,[],https://github.com/espruino/Espruino/pull/1225,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1225#issuecomment-324607318,merge from Dordon,I've just tweaked the docs for setLED,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1234,2017-08-29T20:00:18Z,2017-08-30T07:17:26Z,2017-08-30T07:17:26Z,MERGED,True,32,7,2,https://github.com/opichals,Date timezone handling fixes.,1,[],https://github.com/espruino/Espruino/pull/1234,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1234,"No tz-containing date strings are considered of local timezone.
No time-containing date strings are considered GMT.","No tz-containing date strings are considered of local timezone.
No time-containing date strings are considered GMT.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1234,2017-08-29T20:00:18Z,2017-08-30T07:17:26Z,2017-08-30T07:17:26Z,MERGED,True,32,7,2,https://github.com/opichals,Date timezone handling fixes.,1,[],https://github.com/espruino/Espruino/pull/1234,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1234#issuecomment-325904446,"No tz-containing date strings are considered of local timezone.
No time-containing date strings are considered GMT.",Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1235,2017-08-29T20:20:31Z,2017-08-30T07:19:07Z,2017-08-30T07:19:08Z,MERGED,True,15,7,3,https://github.com/opichals,Introduced sockerserver:serverAddMembership,1,[],https://github.com/espruino/Espruino/pull/1235,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1235,"This avoids the HTTP_NAME_OPTIONS_VAR server property leaking the
socketserver.c local abstraction.","This avoids the HTTP_NAME_OPTIONS_VAR server property leaking the
socketserver.c local abstraction.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1235,2017-08-29T20:20:31Z,2017-08-30T07:19:07Z,2017-08-30T07:19:08Z,MERGED,True,15,7,3,https://github.com/opichals,Introduced sockerserver:serverAddMembership,1,[],https://github.com/espruino/Espruino/pull/1235,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1235#issuecomment-325904801,"This avoids the HTTP_NAME_OPTIONS_VAR server property leaking the
socketserver.c local abstraction.",Nice idea - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1236,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1236#issuecomment-326152074,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","Linux output:
=undefined
<""42""
<{""address"":""127.0.0.1"",""port"":57224,""size"":2}
>""42!""
>{""address"":""127.0.0.1"",""port"":41234,""size"":3}
server disconnected
client disconnected",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1236#issuecomment-326235953,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected",The changes look ok to me. Perhaps you could compile with NET_DBG > 0 and send the output?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1236#issuecomment-326262101,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","@opichals
Thanks. With NET_DBG:
>
=undefined
Send 2 100007f:41234server disconnected
client disconnected
>",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/opichals,5,https://github.com/espruino/Espruino/pull/1236#issuecomment-326323247,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected",Looks like there is something not working on the 'recv' end.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1236#issuecomment-326699534,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","@opichals

Looks like there is something not working on the 'recv' end.

By doing the send with linux and recv with ESP32 I can confirm that the ESP32 receives ok.
It is the send that is not working - the client side.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/1236#issuecomment-326720601,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","I can send and recieve UDP with ESP32 using packet sender, so it looks like this is ready to merge",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/opichals,8,https://github.com/espruino/Espruino/pull/1236#issuecomment-327029807,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","Cool! @wilberforce Thank you, it would have taken much longer to figure out for me.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,9,https://github.com/espruino/Espruino/pull/1236#issuecomment-327035060,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","@opichals

Cool! @wilberforce Thank you, it would have taken much longer to figure out for me.

It works in the independant case. Your intial sample of both client and server with the same script seems does not work on the ESP32 for the client send - so I'm not sure what is up with that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/wilberforce,10,https://github.com/espruino/Espruino/pull/1236#issuecomment-327134608,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","@gfwilliams
Please merge",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1236,2017-08-30T23:01:57Z,2017-09-05T11:26:56Z,2017-09-05T11:26:56Z,MERGED,True,115,30,6,https://github.com/wilberforce,"update ESP32 Branch to UDP, copy UDP code from linux",4,[],https://github.com/espruino/Espruino/pull/1236,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/1236#issuecomment-327147982,"@gfwilliams
Not yet ready to merge..
@opichals - I have updated the ESP32 network code. Please can you review?
WARNING: setsockopt(SO_REUSPORT) failed
This occured all the time so I commented out.
It looks like  test_dgram_socket.js is failing, as I get:
=undefined
server disconnected
client disconnected

Extending the timeout to 10 secs, I could then dump this.
>srv
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""conn"": false,
  ""#onbind"": function (bsrv) { ... },
  ""port"": 41234, ""sckt"": 3,
  ""#onclose"": function () { ... },
  ""#onmessage"": function (msg,info) { ... }
 }
>client
=dgramSocket { ""type"": 2,
  ""opt"": {  },
  ""sckt"": 4, ""conn"": true,
  ""#onmessage"": function (msg,info) { ... },
  ""#onclose"": function () { ... },
  ""dSnd"": """"
 }
server disconnected
client disconnected","Ok, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1243,2017-09-14T18:33:27Z,2017-09-15T07:23:05Z,2017-12-30T19:23:53Z,MERGED,True,76,18,5,https://github.com/MaBecker,ESP8266: Add GPIO16 as D16 without watch (#1206),1,[],https://github.com/espruino/Espruino/pull/1243,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1243,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1243,2017-09-14T18:33:27Z,2017-09-15T07:23:05Z,2017-12-30T19:23:53Z,MERGED,True,76,18,5,https://github.com/MaBecker,ESP8266: Add GPIO16 as D16 without watch (#1206),1,[],https://github.com/espruino/Espruino/pull/1243,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1243#issuecomment-329703448,,This looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1243,2017-09-14T18:33:27Z,2017-09-15T07:23:05Z,2017-12-30T19:23:53Z,MERGED,True,76,18,5,https://github.com/MaBecker,ESP8266: Add GPIO16 as D16 without watch (#1206),1,[],https://github.com/espruino/Espruino/pull/1243,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1243#issuecomment-329703576,,"Just to add - you can do soft PWM/I2C/SPI/etc with this too now, so it's a pretty powerful addition.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1243,2017-09-14T18:33:27Z,2017-09-15T07:23:05Z,2017-12-30T19:23:53Z,MERGED,True,76,18,5,https://github.com/MaBecker,ESP8266: Add GPIO16 as D16 without watch (#1206),1,[],https://github.com/espruino/Espruino/pull/1243,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1243#issuecomment-329704313,,"Yes, will add this to Cange Log as well",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1244,2017-09-14T19:11:32Z,2017-09-15T07:56:41Z,2017-09-15T07:56:41Z,MERGED,True,13,6,5,https://github.com/MaBecker,"ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)",4,[],https://github.com/espruino/Espruino/pull/1244,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1244,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1244,2017-09-14T19:11:32Z,2017-09-15T07:56:41Z,2017-09-15T07:56:41Z,MERGED,True,13,6,5,https://github.com/MaBecker,"ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)",4,[],https://github.com/espruino/Espruino/pull/1244,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1244#issuecomment-329587302,,"MFORCE32 = `xtensa-lx106-elf-gcc --help=target | grep mforce-l32`

is breaking the build
make: xtensa-lx106-elf-gcc: Command not found",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1244,2017-09-14T19:11:32Z,2017-09-15T07:56:41Z,2017-09-15T07:56:41Z,MERGED,True,13,6,5,https://github.com/MaBecker,"ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)",4,[],https://github.com/espruino/Espruino/pull/1244,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1244#issuecomment-329704133,,Is this ready to go?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1244,2017-09-14T19:11:32Z,2017-09-15T07:56:41Z,2017-09-15T07:56:41Z,MERGED,True,13,6,5,https://github.com/MaBecker,"ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)",4,[],https://github.com/espruino/Espruino/pull/1244,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1244#issuecomment-329705278,,Yes,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1245,2017-09-14T21:36:21Z,2017-09-15T07:27:40Z,2018-12-29T09:30:11Z,MERGED,True,11,16,4,https://github.com/opichals,Drop socketIsHTTPS in favor of SocketType,1,[],https://github.com/espruino/Espruino/pull/1245,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1245,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1245,2017-09-14T21:36:21Z,2017-09-15T07:27:40Z,2018-12-29T09:30:11Z,MERGED,True,11,16,4,https://github.com/opichals,Drop socketIsHTTPS in favor of SocketType,1,[],https://github.com/espruino/Espruino/pull/1245,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1245#issuecomment-329704332,,Thanks! That's a great cleanup.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1246,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1246#issuecomment-329623024,,"The question is whether Espruino needs to follow the nodejs API in this particular thing.
The libs/crypto/mbedtls/library/net.c does always use SO_REUSEADDR.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1246#issuecomment-329711112,,Not sure I understand - you mean the nodejs API defaults to reuseAddr: true?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1246#issuecomment-329715534,,"nodejs implements the reuseAddr option to control the use of SO_REUSEADDR.
The mbedtls uses it unconditionally.
After actually submitting this PR it occured to me that it could be better if Espruino behaves consistently with the mbedtls (always use SO_REUSEADDR, just as it is now in master) rather than introducing the same reuseAddr option as nodejs does. Perhaps other boards' SDKs/network stacks would just not care or support this option and therefore it might end up in an inconsistent support across boards?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1246#issuecomment-329722364,,"I don't think we're using any of that code in mbedtls are we?
At the moment mbedtls only works though the network.c file, where we manually specify what commands we want to use for send and receive, and initiate everything ourselves: https://github.com/espruino/Espruino/blob/master/libs/network/network.c#L608
There's no support for UDP in it whatsoever.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1246,2017-09-14T22:09:14Z,2017-10-02T13:31:07Z,2017-10-02T13:31:07Z,MERGED,True,36,12,4,https://github.com/opichals,Support for dgram.createSocket({ reuseAddr: true }),1,[],https://github.com/espruino/Espruino/pull/1246,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1246#issuecomment-329866542,,"You are right Espruino doesn't use that mbedtls code...
I was just wondering whether other stacks would have this option supported (or rather if it is possible to turn using SO_REUSEADDR off in all cases) but I guess we can decide or document such exceptions later.
Merge/close at will.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1247,2017-09-15T07:39:30Z,2017-09-15T07:55:38Z,2017-09-16T06:32:21Z,MERGED,True,1,1,1,https://github.com/MaBecker,D16 soft PWM/I2C/SPI/etc,1,[],https://github.com/espruino/Espruino/pull/1247,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1247,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1248,2017-09-15T08:51:55Z,2017-09-15T10:11:00Z,2018-01-01T14:30:53Z,MERGED,True,20,13,15,https://github.com/MaBecker,ESP8266: Remove osprintf for RELEASE=1,3,[],https://github.com/espruino/Espruino/pull/1248,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1248,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1248,2017-09-15T08:51:55Z,2017-09-15T10:11:00Z,2018-01-01T14:30:53Z,MERGED,True,20,13,15,https://github.com/MaBecker,ESP8266: Remove osprintf for RELEASE=1,3,[],https://github.com/espruino/Espruino/pull/1248,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1248#issuecomment-329740972,,thanks! fixes #1241,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1250,2017-09-25T12:54:42Z,2017-09-26T07:39:13Z,2017-09-26T07:39:51Z,CLOSED,False,658527,372217,356,https://github.com/tbistm,L496 new boards,9,[],https://github.com/espruino/Espruino/pull/1250,https://github.com/tbistm,1,https://github.com/espruino/Espruino/pull/1250,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1251,2017-09-25T15:13:12Z,2017-09-26T07:38:36Z,2017-09-26T07:38:36Z,CLOSED,False,658527,372217,356,https://github.com/tbistm,L494new boards,9,[],https://github.com/espruino/Espruino/pull/1251,https://github.com/tbistm,1,https://github.com/espruino/Espruino/pull/1251,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included","L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1252,2017-09-26T07:40:53Z,2017-09-26T08:18:50Z,2017-09-26T08:19:25Z,CLOSED,False,658527,372217,356,https://github.com/tbistm,L496 family,9,[],https://github.com/espruino/Espruino/pull/1252,https://github.com/tbistm,1,https://github.com/espruino/Espruino/pull/1252,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/tbistm,1,https://github.com/espruino/Espruino/pull/1253,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1253#issuecomment-333486492,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","Hi - just wondering, what was the difference between this and #1250, #1251 and #1252? Were those just accidental?
Do we need the icf files included? I'd hoped that most of the linking for STM32 stuff would be done by the linker script generator.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/tbistm,3,https://github.com/espruino/Espruino/pull/1253#issuecomment-333496531,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","Hi,

#1250 , #1251 , #1252 could not pass because of compilation errors with Travis on last commit
(commit called : “More RAM for USART exchanges when it is possible”)
I could not reproduce these errors in my development environment. It was not systematic and occurred on different boards.
As this commit can be viewed as optional (optimization better to have for performance) , I finally produce #1253 without this commit.

Another Pull Request will be proposed later.

About icf files, they are used for IAR and they are not needed in #1253 since it is compiled with gcc only.
They are here because they are within the cube delivery by default and also because I saw them on the espruino master.

Thierry
From: Gordon Williams [mailto:notifications@github.com]
Sent: lundi 2 octobre 2017 11:38
To: espruino/Espruino <Espruino@noreply.github.com>
Cc: Thierry BINIGUER <thierry.biniguer@st.com>; Author <author@noreply.github.com>
Subject: Re: [espruino/Espruino] Stm32 l496 family (#1253)


Hi - just wondering, what was the difference between this and #1250<#1250>, #1251<#1251> and #1252<#1252>? Were those just accidental?

Do we need the icf files included? I'd hoped that most of the linking for STM32 stuff would be done by the linker script generator.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub<#1253 (comment)>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AdbgXm7qOINmgpwwYTPOXUFSldy8wDioks5soK7vgaJpZM4Pj00j>.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1253#issuecomment-333534096,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","Ah - thanks! I'll merge then.
Do you see any problem if I took the icf files out? I must have just missed them when the other bit of the SDK went in.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1253#issuecomment-333534328,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.",Just to add - the build errors may have just been Travis - occasionally the VM instances they spin up have problems downloading the files they need.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/tbistm,6,https://github.com/espruino/Espruino/pull/1253#issuecomment-333552556,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","Hi,

The icf files can be removed, no problem with that.

Thierry",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1253,2017-09-26T07:58:31Z,2017-10-02T13:28:31Z,2017-10-02T14:35:12Z,MERGED,True,658521,372216,355,https://github.com/tbistm,Stm32 l496 family,8,[],https://github.com/espruino/Espruino/pull/1253,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1253#issuecomment-333553343,"L496 family with its pins description.
It is done through 2 new boards introduction.
Both having USB OTG FS, until 256 KB of RAM currently used.
Last STM32cube FW L4 (V1.9.0) is also included.","Ok, just done! In future, please can you avoid committing manuals too? I just found out that about 1/2 the size of Espruino's total repository is made out of STM32L reference manuals :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1255,2017-10-09T05:58:56Z,2017-10-09T16:02:43Z,2017-10-09T16:02:43Z,CLOSED,False,3629864,0,2010,https://github.com/ThomasChr,Added Support for Arduino Due,66,[],https://github.com/espruino/Espruino/pull/1255,https://github.com/ThomasChr,1,https://github.com/espruino/Espruino/pull/1255,"This PR includes the full Environment to make Code for Atmel SAMD Devices (as used by Arduino), and also a working Espruino implementation for the Arduino Due.
The Arduino Due has a working REPL, Timing accurate to 10 Microseconds, all Pins can be used and the save()-Function does it's job and saves the code in the second flash bank.
What's left:

The other UARTs
ADC
DAC
Pin watch
I2C
PWM
.
.
.

And much more I can't think of right now. But it should be very straightforward to implement those features.
I personally think the code is ready to merge, but I'm quite sure I've made some mistakes. So please see this PR as a discussion about my bad coding style which will eventually lead to merging. Hopefully :-)","This PR includes the full Environment to make Code for Atmel SAMD Devices (as used by Arduino), and also a working Espruino implementation for the Arduino Due.
The Arduino Due has a working REPL, Timing accurate to 10 Microseconds, all Pins can be used and the save()-Function does it's job and saves the code in the second flash bank.
What's left:

The other UARTs
ADC
DAC
Pin watch
I2C
PWM
.
.
.

And much more I can't think of right now. But it should be very straightforward to implement those features.
I personally think the code is ready to merge, but I'm quite sure I've made some mistakes. So please see this PR as a discussion about my bad coding style which will eventually lead to merging. Hopefully :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1255,2017-10-09T05:58:56Z,2017-10-09T16:02:43Z,2017-10-09T16:02:43Z,CLOSED,False,3629864,0,2010,https://github.com/ThomasChr,Added Support for Arduino Due,66,[],https://github.com/espruino/Espruino/pull/1255,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1255#issuecomment-335202783,"This PR includes the full Environment to make Code for Atmel SAMD Devices (as used by Arduino), and also a working Espruino implementation for the Arduino Due.
The Arduino Due has a working REPL, Timing accurate to 10 Microseconds, all Pins can be used and the save()-Function does it's job and saves the code in the second flash bank.
What's left:

The other UARTs
ADC
DAC
Pin watch
I2C
PWM
.
.
.

And much more I can't think of right now. But it should be very straightforward to implement those features.
I personally think the code is ready to merge, but I'm quite sure I've made some mistakes. So please see this PR as a discussion about my bad coding style which will eventually lead to merging. Hopefully :-)","Merged! It just doesn't show as such because I did a filter-branch to remove some of the extra files.
Thanks! This is looks great - and it builds easily using all the existing ARM toolchain",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1260,2017-10-21T10:58:49Z,2017-10-23T08:36:13Z,2017-10-23T08:36:13Z,MERGED,True,1,1,1,https://github.com/urish,doc fix: E.memoryArea returns a String,1,[],https://github.com/espruino/Espruino/pull/1260,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1260,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1260,2017-10-21T10:58:49Z,2017-10-23T08:36:13Z,2017-10-23T08:36:13Z,MERGED,True,1,1,1,https://github.com/urish,doc fix: E.memoryArea returns a String,1,[],https://github.com/espruino/Espruino/pull/1260,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1260#issuecomment-338586956,,Thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1267,2017-10-28T15:01:53Z,2017-10-30T08:20:34Z,2017-10-30T08:20:34Z,MERGED,True,5,1,2,https://github.com/opichals,DataView#getUint32() sign-bit fix,1,[],https://github.com/espruino/Espruino/pull/1267,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1267,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1267,2017-10-28T15:01:53Z,2017-10-30T08:20:34Z,2017-10-30T08:20:34Z,MERGED,True,5,1,2,https://github.com/opichals,DataView#getUint32() sign-bit fix,1,[],https://github.com/espruino/Espruino/pull/1267,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1267#issuecomment-340373008,,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1278,2017-11-16T20:48:38Z,2017-11-17T10:12:17Z,2017-11-17T10:12:17Z,MERGED,True,14,3,1,https://github.com/opichals,socketSendData() to use dataLen buffer for UDP,1,[],https://github.com/espruino/Espruino/pull/1278,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1278,"Fixes #1275
Note that this only changes the dgramSocket.send() method buffer handling where the available stack-1024 bytes is the limit for the data size.
The receiving side is still hardcoded board/net implementation specific (the net->chunkSize sized buffer is used).","Fixes #1275
Note that this only changes the dgramSocket.send() method buffer handling where the available stack-1024 bytes is the limit for the data size.
The receiving side is still hardcoded board/net implementation specific (the net->chunkSize sized buffer is used).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1278,2017-11-16T20:48:38Z,2017-11-17T10:12:17Z,2017-11-17T10:12:17Z,MERGED,True,14,3,1,https://github.com/opichals,socketSendData() to use dataLen buffer for UDP,1,[],https://github.com/espruino/Espruino/pull/1278,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1278#issuecomment-345201573,"Fixes #1275
Note that this only changes the dgramSocket.send() method buffer handling where the available stack-1024 bytes is the limit for the data size.
The receiving side is still hardcoded board/net implementation specific (the net->chunkSize sized buffer is used).",Looks awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1279,2017-11-16T21:17:56Z,2017-11-17T15:21:35Z,2017-11-17T15:21:35Z,MERGED,True,9,6,2,https://github.com/opichals,dgramSocket.bind() returns the dgramSocket instance,1,[],https://github.com/espruino/Espruino/pull/1279,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1279,"Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).","Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1279,2017-11-16T21:17:56Z,2017-11-17T15:21:35Z,2017-11-17T15:21:35Z,MERGED,True,9,6,2,https://github.com/opichals,dgramSocket.bind() returns the dgramSocket instance,1,[],https://github.com/espruino/Espruino/pull/1279,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1279#issuecomment-345066251,"Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).","from #1276 (comment):
Also I noticed that dgram.bind returned the parent without locking it again - but fixing it causes memory leaks - so I think there might be something iffy going on with locks in dgram - perhaps an extra lock somewhere else where there shouldn't be one... It might be worth looking into as it could cause problems later on?

After adding the ""return"" binding annotation it does not exhibit any leaks in any of the tests/test_dgram_* tests",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1279,2017-11-16T21:17:56Z,2017-11-17T15:21:35Z,2017-11-17T15:21:35Z,MERGED,True,9,6,2,https://github.com/opichals,dgramSocket.bind() returns the dgramSocket instance,1,[],https://github.com/espruino/Espruino/pull/1279,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1279#issuecomment-345202180,"Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).","Thanks! I'd forgotten about the return in JSON :)
I think you need to put  parent = jsvLockAgain(parent); right at the start though? It looks like if the function's called when you're offline, it'll return an unlocked instance of the parent?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1279,2017-11-16T21:17:56Z,2017-11-17T15:21:35Z,2017-11-17T15:21:35Z,MERGED,True,9,6,2,https://github.com/opichals,dgramSocket.bind() returns the dgramSocket instance,1,[],https://github.com/espruino/Espruino/pull/1279,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1279#issuecomment-345260308,"Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).",You are right with the beginning. PR updated.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1279,2017-11-16T21:17:56Z,2017-11-17T15:21:35Z,2017-11-17T15:21:35Z,MERGED,True,9,6,2,https://github.com/opichals,dgramSocket.bind() returns the dgramSocket instance,1,[],https://github.com/espruino/Espruino/pull/1279,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1279#issuecomment-345272687,"Added the required jsvLockAgain(parent).
The tests/test_dgram_socket.js now also works directly
in node.jsl (tested in v6.9.4).",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/ramangopalan,1,https://github.com/espruino/Espruino/pull/1284,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?","Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/jumjum123,2,https://github.com/espruino/Espruino/pull/1284#issuecomment-349249216,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?","Hello ramangopalan, is there any information about Zeisig gemacht or Raman's 4 kilowatt toy
Zeisig gemacht sounds german (?)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/ThomasChr,3,https://github.com/espruino/Espruino/pull/1284#issuecomment-349250263,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?","@jumjum123
Indeed, it sounds german, but it's not really german.
""Zeisig"" is a bird and ""gemacht"" means ""done"".
So in German this makes no sense...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1284#issuecomment-349251820,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?","Thanks! Is this something that's available for others to get? Do you have a URL?
I'm afraid it's just not sensible for me to merge things for personal projects - I'd just have hundreds of extra files which would be really confusing. Personally I'd just keep this in your own GitHub, and then you can easily merge any new Espruino commits on top of your changes.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/ramangopalan,5,https://github.com/espruino/Espruino/pull/1284#issuecomment-349270595,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?","Thanks! Is this something that's available for others to get? Do you
have a URL?

So sorry. These processor boards are used for control in cryostat
machines. Work aside, I use these boards to teach. Students use these
boards too. Just that they aren't available for sale.

I'm afraid it's just not sensible for me to merge things for
personal projects - I'd just have hundreds of extra files which
would be really

A merge will make things easier but if you can't make an exception, I
will understand. Thanks Gordon!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1284,2017-12-05T08:51:41Z,2019-04-09T09:52:16Z,2019-04-09T09:52:16Z,CLOSED,False,73,0,1,https://github.com/ramangopalan,New target: Zeisig Gemacht - initial port,1,[],https://github.com/espruino/Espruino/pull/1284,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1284#issuecomment-481183876,"Firstly, many thanks for Espruino! I now have Espruino running on my
Zeisig Gemacht target. I am able to play with pins and perform I/O on
the SD card. So far so good. Can you please merge this?",I have now merged this into UNMAINTAINED_BOARDS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1285,2017-12-08T20:26:39Z,2017-12-09T11:34:38Z,2017-12-14T10:30:13Z,MERGED,True,3,0,1,https://github.com/wilberforce,ESP32  jshGetSystemTime() make interrupt tolerant,1,[],https://github.com/espruino/Espruino/pull/1285,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1285,Pull @jumjum123 changes from ESP32 branch into master,Pull @jumjum123 changes from ESP32 branch into master,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1285,2017-12-08T20:26:39Z,2017-12-09T11:34:38Z,2017-12-14T10:30:13Z,MERGED,True,3,0,1,https://github.com/wilberforce,ESP32  jshGetSystemTime() make interrupt tolerant,1,[],https://github.com/espruino/Espruino/pull/1285,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1285#issuecomment-350498836,Pull @jumjum123 changes from ESP32 branch into master,"Perhaps there should be an initializer like this instead of just undefined content?
   portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

Adding an interesting article link about the ESP32 synchronization stuff https://techtutorialsx.com/2017/09/30/esp32-arduino-external-interrupts/",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1285,2017-12-08T20:26:39Z,2017-12-09T11:34:38Z,2017-12-14T10:30:13Z,MERGED,True,3,0,1,https://github.com/wilberforce,ESP32  jshGetSystemTime() make interrupt tolerant,1,[],https://github.com/espruino/Espruino/pull/1285,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1285#issuecomment-351026821,Pull @jumjum123 changes from ESP32 branch into master,Just added that for you.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1285,2017-12-08T20:26:39Z,2017-12-09T11:34:38Z,2017-12-14T10:30:13Z,MERGED,True,3,0,1,https://github.com/wilberforce,ESP32  jshGetSystemTime() make interrupt tolerant,1,[],https://github.com/espruino/Espruino/pull/1285,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1285#issuecomment-351149506,Pull @jumjum123 changes from ESP32 branch into master,"@gfwilliams
Thanks Gordon - that was unexpected!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1285,2017-12-08T20:26:39Z,2017-12-09T11:34:38Z,2017-12-14T10:30:13Z,MERGED,True,3,0,1,https://github.com/wilberforce,ESP32  jshGetSystemTime() make interrupt tolerant,1,[],https://github.com/espruino/Espruino/pull/1285,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1285#issuecomment-351320680,Pull @jumjum123 changes from ESP32 branch into master,Just saves everyone some time if it's a one-liner :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1286,2017-12-12T20:33:56Z,2017-12-13T08:37:54Z,2017-12-13T08:37:54Z,MERGED,True,7,21,2,https://github.com/opichals,Lazy dgram (UDP) createSocket,2,[],https://github.com/espruino/Espruino/pull/1286,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1286,Fixes #1281,Fixes #1281,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1286,2017-12-12T20:33:56Z,2017-12-13T08:37:54Z,2017-12-13T08:37:54Z,MERGED,True,7,21,2,https://github.com/opichals,Lazy dgram (UDP) createSocket,2,[],https://github.com/espruino/Espruino/pull/1286,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1286#issuecomment-351321181,Fixes #1281,Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1287,2017-12-15T10:13:57Z,2017-12-15T11:28:17Z,2017-12-15T11:28:17Z,MERGED,True,43,19,3,https://github.com/opichals,Added dgramSocket.send() offset + len support,1,[],https://github.com/espruino/Espruino/pull/1287,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1287,"Both of the following #send() signatures supported:
client.send('msg', port, address);
client.send('  msg  ', 2, 3, port, address); // sends 'msg' message
Partial fix for #1271","Both of the following #send() signatures supported:
client.send('msg', port, address);
client.send('  msg  ', 2, 3, port, address); // sends 'msg' message
Partial fix for #1271",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1287,2017-12-15T10:13:57Z,2017-12-15T11:28:17Z,2017-12-15T11:28:17Z,MERGED,True,43,19,3,https://github.com/opichals,Added dgramSocket.send() offset + len support,1,[],https://github.com/espruino/Espruino/pull/1287,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1287#issuecomment-351969465,"Both of the following #send() signatures supported:
client.send('msg', port, address);
client.send('  msg  ', 2, 3, port, address); // sends 'msg' message
Partial fix for #1271","Thanks! I think you might need to jsvUnLock  to port and address though or you'll get a memory leak - but then you also need to be careful when you do port = offset;, as you might unlock offset, which hasn't been locked.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1287,2017-12-15T10:13:57Z,2017-12-15T11:28:17Z,2017-12-15T11:28:17Z,MERGED,True,43,19,3,https://github.com/opichals,Added dgramSocket.send() offset + len support,1,[],https://github.com/espruino/Espruino/pull/1287,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1287#issuecomment-351976393,"Both of the following #send() signatures supported:
client.send('msg', port, address);
client.send('  msg  ', 2, 3, port, address); // sends 'msg' message
Partial fix for #1271",Thanks for the review. Should be fixed now.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1287,2017-12-15T10:13:57Z,2017-12-15T11:28:17Z,2017-12-15T11:28:17Z,MERGED,True,43,19,3,https://github.com/opichals,Added dgramSocket.send() offset + len support,1,[],https://github.com/espruino/Espruino/pull/1287,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1287#issuecomment-351983212,"Both of the following #send() signatures supported:
client.send('msg', port, address);
client.send('  msg  ', 2, 3, port, address); // sends 'msg' message
Partial fix for #1271",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1289,2017-12-16T21:17:08Z,2019-04-09T09:53:10Z,2019-04-09T09:53:11Z,CLOSED,False,104,0,1,https://github.com/vbolshakov,infor-link.com bare NRF52832 board,1,[],https://github.com/espruino/Espruino/pull/1289,https://github.com/vbolshakov,1,https://github.com/espruino/Espruino/pull/1289,Please add bare NRF52832 board (like infor-link.com one).,Please add bare NRF52832 board (like infor-link.com one).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1289,2017-12-16T21:17:08Z,2019-04-09T09:53:10Z,2019-04-09T09:53:11Z,CLOSED,False,104,0,1,https://github.com/vbolshakov,infor-link.com bare NRF52832 board,1,[],https://github.com/espruino/Espruino/pull/1289,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1289#issuecomment-352372435,Please add bare NRF52832 board (like infor-link.com one).,Hi - How is this different to the NRF52832DK image? It just has the LEDs and Button defs removed?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1289,2017-12-16T21:17:08Z,2019-04-09T09:53:10Z,2019-04-09T09:53:11Z,CLOSED,False,104,0,1,https://github.com/vbolshakov,infor-link.com bare NRF52832 board,1,[],https://github.com/espruino/Espruino/pull/1289,https://github.com/vbolshakov,3,https://github.com/espruino/Espruino/pull/1289#issuecomment-353572852,Please add bare NRF52832 board (like infor-link.com one).,Right pin definitions and no LEDs and buttons.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1289,2017-12-16T21:17:08Z,2019-04-09T09:53:10Z,2019-04-09T09:53:11Z,CLOSED,False,104,0,1,https://github.com/vbolshakov,infor-link.com bare NRF52832 board,1,[],https://github.com/espruino/Espruino/pull/1289,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1289#issuecomment-481184165,Please add bare NRF52832 board (like infor-link.com one).,I have now merged this into UNMAINTAINED_BOARDS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1293,2017-12-27T19:54:20Z,2018-01-05T13:41:58Z,2018-01-05T13:43:47Z,MERGED,True,7,1,1,https://github.com/MaBecker,add flash command for Flash map 4MB:1024/1024,3,[],https://github.com/espruino/Espruino/pull/1293,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1293,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1296,2018-01-05T13:30:42Z,2018-01-05T13:41:37Z,2018-01-05T13:44:02Z,MERGED,True,1,2,1,https://github.com/MaBecker,ESP8266: Remove osprintf for RELEASE,1,[],https://github.com/espruino/Espruino/pull/1296,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1296,missed one line,missed one line,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1296,2018-01-05T13:30:42Z,2018-01-05T13:41:37Z,2018-01-05T13:44:02Z,MERGED,True,1,2,1,https://github.com/MaBecker,ESP8266: Remove osprintf for RELEASE,1,[],https://github.com/espruino/Espruino/pull/1296,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1296#issuecomment-355557104,missed one line,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1303,2018-01-09T22:31:04Z,2018-01-09T22:33:16Z,2018-01-10T17:22:25Z,CLOSED,False,51,256,6,https://github.com/MaBecker,cleanup and fixing (fix #752 #1297),13,[],https://github.com/espruino/Espruino/pull/1303,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1303,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1303,2018-01-09T22:31:04Z,2018-01-09T22:33:16Z,2018-01-10T17:22:25Z,CLOSED,False,51,256,6,https://github.com/MaBecker,cleanup and fixing (fix #752 #1297),13,[],https://github.com/espruino/Espruino/pull/1303,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1303#issuecomment-356537587,,Sorry - should I have merged this?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1303,2018-01-09T22:31:04Z,2018-01-09T22:33:16Z,2018-01-10T17:22:25Z,CLOSED,False,51,256,6,https://github.com/MaBecker,cleanup and fixing (fix #752 #1297),13,[],https://github.com/espruino/Espruino/pull/1303,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1303#issuecomment-356673439,,"Yes and No, because there are some Merge remote tracking
Will try again from a clean branch.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1304,2018-01-10T21:50:44Z,2018-01-10T21:51:03Z,2018-04-25T17:13:48Z,CLOSED,False,51,256,6,https://github.com/MaBecker,Cleanup and fixing - Test,14,[],https://github.com/espruino/Espruino/pull/1304,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1304,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1305,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1305#issuecomment-356763789,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","Hmm,
travis build for  ESP8266_4MB ended with errro:
../ld/eagle.rom.addr.v6.ld: No such file or directory

This is included with last line in eagle.app.v6.new.2048.ld and has not changed.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1305#issuecomment-356825843,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","No idea how to get rid of this warning:
libs/network/esp8266/network_esp8266.c: In function 'esp8266_dumpSocketData':
libs/network/esp8266/network_esp8266.c:203:9: warning: variable 'stateMsg' set but not used [-Wunused-but-set-variable]
   char *stateMsg;
         ^
libs/network/esp8266/network_esp8266.c:187:9: warning: variable 'creationTypeMsg' set but not used [-Wunused-but-set-variable]
   char *creationTypeMsg;
         ^

/home/travis/build/espruino/Espruino/gen/jswrapper.c:1510:23: warning: initialization discards 'const' qualifier from pointer target type [enabled by default]
       JswSymList *l = jswGetSymbolListForObject(parent);
                       ^",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1305#issuecomment-356884116,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","I wouldn't worry too much about those warnings.
Assuming you're happy with it, this looks good to merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1305#issuecomment-357003529,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","Ok, what about the travis build error?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1305#issuecomment-357174664,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks","Not sure what happened, but it works here (and I can't see why your changes would have caused an error) - so I'll merge and see if the next travis build fails :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1305#issuecomment-357175095,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks",Forgot to mention: It works on my side too,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1305,2018-01-10T22:25:33Z,2018-01-12T08:31:41Z,2018-01-12T08:37:52Z,MERGED,True,56,256,7,https://github.com/MaBecker,cleanup and fixes(fix #752 #1297),15,[],https://github.com/espruino/Espruino/pull/1305,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1305#issuecomment-357175963,"Hi Gordon no sure about this because of so many Merge remote-tracking branch 'espruino/master'
If not just give a hint howto do it correct and delete this request Thanks",It's just rebuilt and it is fine - so must have been a Travis error,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1308,2018-01-13T08:12:05Z,2018-01-15T09:20:36Z,2018-01-15T09:20:36Z,MERGED,True,6,0,2,https://github.com/MaBecker,add #else for WIFI and NET DBG,1,[],https://github.com/espruino/Espruino/pull/1308,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1308,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1315,2018-01-21T13:50:28Z,2018-01-22T09:50:25Z,2018-01-22T09:50:25Z,MERGED,True,34,28,3,https://github.com/opichals,Updated *provision.sh scripts to get a valid VM,3,[],https://github.com/espruino/Espruino/pull/1315,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1315,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1315,2018-01-21T13:50:28Z,2018-01-22T09:50:25Z,2018-01-22T09:50:25Z,MERGED,True,34,28,3,https://github.com/opichals,Updated *provision.sh scripts to get a valid VM,3,[],https://github.com/espruino/Espruino/pull/1315,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1315#issuecomment-359373374,,Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1316,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?","I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1316#issuecomment-359261181,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?","The default W5500 build:
WIZNET=1 RELEASE=1 BOARD=ESPRUINOBOARD make
...
bash scripts/check_size.sh espruino_1v95.1392_espruino_1r3.bin
FAIL - size of 231460 is over 231424 bytes
The new W5100 build:
WIZNET=1 W5100=1 RELEASE=1 BOARD=ESPRUINOBOARD make
...
bash scripts/check_size.sh espruino_1v95.1392_espruino_1r3.bin
FAIL - size of 231884 is over 231424 bytes```",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1316#issuecomment-359261342,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?",Please note that this PR is so far just blind software only work without any HW testing done.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1316#issuecomment-359371901,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?","That's very cool - thanks! I'll try and give this a go on some actual hardware when I get a chance.
It's always been really tight trying to get everything to fit in the original board, so I'm not super surprised about this - but I wonder what got added to the driver that bulked it out so much :(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1316#issuecomment-361944983,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?","Not having much luck here either. It looks like ctlwizchip(CW_GET_PHYLINK doesn't work for W5100 so can be commented out, but even after that I'm not able to set/get the IP with:
eth.setIP({
ip:""192.168.1.123"",
subnet:""255.255.255.0"",
gateway:""192.168.1.1"",
dns:""8.8.8.8"",
mac:""00:08:dc:ab:cd:ef""});
eth.getIP();

This should just be a matter of writing to SPI registers, so I'm not sure what's up. It might even be electrical since the shield is meant for 5v inputs... I wonder if it works so well off 3.3v data lines.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1316#issuecomment-361958203,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?","It works! It was because the shield I used actually had SPI on the tiny little header at the end - not on D11,12,13 like I was expecting.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1316,2018-01-21T16:27:53Z,2018-01-31T15:01:06Z,2018-01-31T15:07:00Z,MERGED,True,3234,443,9,https://github.com/opichals,Wiznet W5100 support,5,[],https://github.com/espruino/Espruino/pull/1316,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1316#issuecomment-361960244,"I defined the _WIZCHIP_ to 5100 I got some compile time errors in Ethernet/socket.c so I went to upgrade the ./libs/network/wiznet/Ethernet folder to the latest Wiznet/ioLibrary_Driver v3.1.3.
It seems that the code is now too large to fit the flash on the original Espruino boards?",All merged in - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1317,2018-01-21T21:18:16Z,2018-01-22T15:03:36Z,2018-01-22T15:04:53Z,CLOSED,False,1,1,1,https://github.com/MaBecker,change baud,1,[],https://github.com/espruino/Espruino/pull/1317,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1317,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1317,2018-01-21T21:18:16Z,2018-01-22T15:03:36Z,2018-01-22T15:04:53Z,CLOSED,False,1,1,1,https://github.com/MaBecker,change baud,1,[],https://github.com/espruino/Espruino/pull/1317,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1317#issuecomment-359370597,,Was there a reason for this? The higher rates seemed reasonably reliable.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1317,2018-01-21T21:18:16Z,2018-01-22T15:03:36Z,2018-01-22T15:04:53Z,CLOSED,False,1,1,1,https://github.com/MaBecker,change baud,1,[],https://github.com/espruino/Espruino/pull/1317,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1317#issuecomment-359449832,,"ok, so keep it as it is",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1319,2018-01-24T21:13:24Z,2018-01-25T08:51:24Z,2018-01-28T22:12:16Z,MERGED,True,1,1,1,https://github.com/MaBecker,add missing \,1,[],https://github.com/espruino/Espruino/pull/1319,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1319,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1323,2018-01-28T22:10:44Z,2018-01-29T07:53:27Z,2018-02-05T18:30:20Z,MERGED,True,6,0,1,https://github.com/MaBecker,or add as prefix to make,1,[],https://github.com/espruino/Espruino/pull/1323,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1323,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1323,2018-01-28T22:10:44Z,2018-01-29T07:53:27Z,2018-02-05T18:30:20Z,MERGED,True,6,0,1,https://github.com/MaBecker,or add as prefix to make,1,[],https://github.com/espruino/Espruino/pull/1323,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1323#issuecomment-361165336,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1326,2018-02-03T00:47:21Z,2018-02-05T09:03:12Z,2018-02-05T18:32:24Z,MERGED,True,22,8,1,https://github.com/MaBecker,add flash tool section and firmware types,3,[],https://github.com/espruino/Espruino/pull/1326,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1326,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1326,2018-02-03T00:47:21Z,2018-02-05T09:03:12Z,2018-02-05T18:32:24Z,MERGED,True,22,8,1,https://github.com/MaBecker,add flash tool section and firmware types,3,[],https://github.com/espruino/Espruino/pull/1326,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1326#issuecomment-363021242,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1327,2018-02-03T09:54:44Z,2018-02-05T09:05:13Z,2018-02-05T10:06:22Z,MERGED,True,87,21,1,https://github.com/ticpu,ESP32: Add missing STA informations in Wifi.getStatus(),1,[],https://github.com/espruino/Espruino/pull/1327,https://github.com/ticpu,1,https://github.com/espruino/Espruino/pull/1327,"Future structures taken from https://github.com/espressif/esp-idf/blob/master/components/esp32/include/esp_wifi_types.h
Sample output:

wifi.getStatus();
={
""station"": ""connected"",
""ssid"": ""SomeSSID"",
""bssid"": ""84:16:00:00:00:5d"",
""channel"": 1, ""rssi"": -53,
""htMode"": ""HT20"",
""authMode"": ""wpa2"",
""mode"": ""STA"",
""powersave"": ""none""
}","Future structures taken from https://github.com/espressif/esp-idf/blob/master/components/esp32/include/esp_wifi_types.h
Sample output:

wifi.getStatus();
={
""station"": ""connected"",
""ssid"": ""SomeSSID"",
""bssid"": ""84:16:00:00:00:5d"",
""channel"": 1, ""rssi"": -53,
""htMode"": ""HT20"",
""authMode"": ""wpa2"",
""mode"": ""STA"",
""powersave"": ""none""
}",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1327,2018-02-03T09:54:44Z,2018-02-05T09:05:13Z,2018-02-05T10:06:22Z,MERGED,True,87,21,1,https://github.com/ticpu,ESP32: Add missing STA informations in Wifi.getStatus(),1,[],https://github.com/espruino/Espruino/pull/1327,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1327#issuecomment-363021717,"Future structures taken from https://github.com/espressif/esp-idf/blob/master/components/esp32/include/esp_wifi_types.h
Sample output:

wifi.getStatus();
={
""station"": ""connected"",
""ssid"": ""SomeSSID"",
""bssid"": ""84:16:00:00:00:5d"",
""channel"": 1, ""rssi"": -53,
""htMode"": ""HT20"",
""authMode"": ""wpa2"",
""mode"": ""STA"",
""powersave"": ""none""
}",Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1329,2018-02-09T18:00:52Z,2018-02-10T08:52:19Z,2018-02-10T10:16:55Z,MERGED,True,71,3,1,https://github.com/MaBecker,add details to 'Under MacOS',1,[],https://github.com/espruino/Espruino/pull/1329,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1329,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1329,2018-02-09T18:00:52Z,2018-02-10T08:52:19Z,2018-02-10T10:16:55Z,MERGED,True,71,3,1,https://github.com/MaBecker,add details to 'Under MacOS',1,[],https://github.com/espruino/Espruino/pull/1329,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1329#issuecomment-364636962,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1330,2018-02-10T10:16:31Z,2018-02-10T10:34:07Z,2018-02-11T04:37:19Z,MERGED,True,3,3,1,https://github.com/MaBecker,fix 'Create some directories on /Espruino',1,[],https://github.com/espruino/Espruino/pull/1330,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1330,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1332,2018-02-11T04:37:00Z,2018-02-11T08:37:46Z,2018-02-11T08:57:40Z,MERGED,True,1,1,1,https://github.com/MaBecker,chang crop len condition (fix #1331),1,[],https://github.com/espruino/Espruino/pull/1332,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1332,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1332,2018-02-11T04:37:00Z,2018-02-11T08:37:46Z,2018-02-11T08:57:40Z,MERGED,True,1,1,1,https://github.com/MaBecker,chang crop len condition (fix #1331),1,[],https://github.com/espruino/Espruino/pull/1332,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1332#issuecomment-364733883,,"Wow, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,None,1,https://github.com/espruino/Espruino/pull/1334,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333","Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1334#issuecomment-364928483,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333","Looks great, thanks!
@jumjum123 @wilberforce are you guys happy with this? If so I'll merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1334#issuecomment-365185237,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333","@jrwood. Thanks for this.
There looks like there is a debug printf that could be removed.
@gfwilliams
At this stage do we want to add a new esp32 deep sleep or should try to have a common setDeepSleep. I understand there are some esp8266 specific sleep functions too and the functionality is different....
http://www.espruino.com/Reference#l_ESP8266_deepSleep
This has micro seconds vs milliseconds which might trip people up porting code.
http://www.espruino.com/Reference#l__global_setDeepSleep  The documentation does not say what value the sleep parameter represents.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1334#issuecomment-365195878,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333","Yeah, it's difficult. The standard setDeepSleep for Espruino is totally different - it just enables a proper low power sleep mode where the device wakes up with the entire contents of RAM still there - STM32 has a different set of sleep modes to ESP8266. There's no timeout because it's all done automatically.
... so use of the whole deepSleep thing of the ESP8266/ESP32 is super confusing. Personally I'm happy with the current solution for the moment since the functionality is really pretty EspressIf-specific - but I'd bring it in-line with the ESP8266 one to avoid even more confusion:

Change capitalisation so it's deepSleep
Change milliseconds to microseconds (even though IMO milliseconds makes way more sense here)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,None,5,https://github.com/espruino/Espruino/pull/1334#issuecomment-365245769,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333","@gfwilliams
I've changed them according to your suggestions.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1334,2018-02-12T13:08:33Z,2018-02-13T11:59:37Z,2018-02-13T11:59:37Z,MERGED,True,16,0,2,None,Deepsleep for ESP32,3,[],https://github.com/espruino/Espruino/pull/1334,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1334#issuecomment-365246390,"Only timer based wakeup is working.
ESP32.deepsleep(time_in_milliseconds)
#1333",Great - thanks for doing those changes so quickly - merging!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1338,2018-02-14T07:45:25Z,2018-02-14T07:57:08Z,2018-02-14T19:20:25Z,MERGED,True,4,4,1,https://github.com/MaBecker,increase save  pages,1,[],https://github.com/espruino/Espruino/pull/1338,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1338,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1339,2018-02-14T19:20:07Z,2018-02-15T08:23:55Z,2018-02-16T19:23:36Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix pip install esptool,1,[],https://github.com/espruino/Espruino/pull/1339,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1339,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1341,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1341#issuecomment-365782679,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,">var f=require(""Flash"");
=function () { [native code] }
>var st=require(""Storage"");
=function () { [native code] }
>st.eraseAll();
[Flash] EraseAll
=undefined
DEBUG FILES 0 live
=undefined
>st.list();
=[  ]
>st.read('test1');
=undefined
>st.write('test1','ABCD');
[Flash] CreateFile
[Flash] CreateFile new 0x00100010
=true
>st.read('test1');
=""ABCD""
>st.debug();
DEBUG FILES 20 live
PAGE 0x00100000 (4096 bytes) - 20 live 4076 free
0x00100010	test1	(4 bytes)
=undefined
>f.read(4,0x00100010);
=new Uint8Array([65, 66, 67, 68])
>",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1341#issuecomment-365788713,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"FYI @gfwilliams
/home/travis/build/espruino/Espruino/src/jsutils.h:283:0: warning: ""assert"" redefined
https://travis-ci.org/espruino/Espruino/jobs/341679050#L1451
/home/travis/build/espruino/Espruino/src/jsutils.h: At top level:
/home/travis/build/espruino/Espruino/src/jsutils.h:283:0: warning: ""assert"" redefined
  #define assert(X) do { } while(0)
 ^
In file included from /home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_assert.h:17:0,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/soc/esp32/include/soc/soc.h:20,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/soc/esp32/include/soc/gpio_reg.h:17,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/driver/include/driver/gpio.h:19,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_deep_sleep.h:19,
                 from /home/travis/build/espruino/Espruino/esp-idf/components/esp32/include/esp_system.h:21,
                 from targets/esp32/jshardwareTimer.c:20:
/home/travis/build/espruino/Espruino/esp-idf/components/newlib/include/assert.h:16:0: note: this is the location of the previous definition
 # define assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, \

Due to the global effect of adding  a check with #ifdef to see if the assert macro already exists I've raised the issue here rather than doing a pull request. Let me know if you want me to a raise a new issue for this.
This was compiling with BOARD=ESP32 DEBUG=1 make",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1341#issuecomment-365858436,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"If you commit above, I can then clean up the code. I have worked out how I can can get the parameters from platform.h and remove the constant 0x100000 and use #define FLASH_SAVED_CODE_START            1048576 instead.
I can then move the code to main.c and adjust &romdata_jscode so that the offset can be:
return &romdata_jscode[ptr];  as you first had it.
perhaps rename romdata_jscode to flash_saved_code_start or mmu_flash_saved_code_start?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1341#issuecomment-365864521,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"With the assert, I don't see it's an issue to check if it already exists and only include if it doesn't.
It seems this PR still doesn't solve the underlying issue, it just makes the memory mapping even more insane. Anything below 0x100000 now accesses some totally random bit of memory, 0x100000 to 0x200000 is jscode(ish), and then above that but below 0x10000000 is random too.
However it doesn't tally even remotely with what is given to jshFlash* as far as I can tell? Sure, jshFlashGetFree returns the same 0x100000 (which isn't free, because it's now used for saved code), but when you write with jshFlashWrite it writes to the actual SPI flash address of 0x100000, and when you read using memoryArea it reads from the jscode partition which is somewhere else
The magic 0x100000 you're seeing is just randomly defined here: https://github.com/espruino/Espruino/blob/master/boards/ESP32.py#L56
Because that seems to be an actual unmapped address in SPI flash that was considered 'safe' to use.
So I think we want to:
Either:

Make our own magic Espruino memory space where 0->0x10000 only accesses the 64k jscode partition, with E.memoryArea, peek, and jshFlashWrite. I this case it's nice and safe but none of the rest of the 4MB of memory can be accessed.
We use a proper flat memory space, where 0->0x400000 maps to SPI flash, however we actually define FLASH_SAVED_CODE_START to be romdata_jscode so it writes data directly into the jscode page. If we can't actually access the flash memory as one flat 4MB memory-mapped chunk (I'm still unsure about this, but that fact that the current code in master works after eraseAll implies we can) then we remap just the area the corresponds to where the jscode partition is to the romdata_jscode address.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1341#issuecomment-365868160,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"https://dl.espressif.com/doc/esp-idf/latest/api-guides/partition-tables.html is an interesting reference. So it looks like 0x100000 is just overwriting the 'factory' app, which is in this case Espruino :(
I think it'd be good to be able to read all the flash with the flash API from JS, including the partition table - so we do really want a flat memory space... So it's just a matter of 'patching' the flash address to a memory mapped address.
When romdata_jscode is set up, I think ideally we need:

The memory mapped address (this is romdata_jscode)
The size of the partition (p->size?)
The actual offset of the partition in flash memory (this'll be in there somewhere)

Then we can change the flash memory map to:
if (addr >= jscode_offs_in_flash && addr < jscode_offs_in_flash+jscode_len)
  return romdata_jscode + addr - jscode_offs_in_flash;

And we should remove the existing free area from FlashGetFree unless we're adding a second partition or are able to check the partition table and point to an unallocated area.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/1341#issuecomment-365870709,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"0x100000 is not random - it's what I defined in the custom partition table for that I made for espurino:
https://github.com/espruino/EspruinoBuildTools/blob/3ac785e699e7f472b5439ff3b0a4cf1dcfd80ef0/esp32/build/app/partitions_espruino.csv
#Name,      Type, SubType, Offset,    Size, Flags
#boot,      data, ,        0x1000,    4K
partition,  data, ,        0x8000,    0x1000
nvs,        data, nvs,     0x9000,    16K,
otadata,    data, ota,     0xd000,    8K,
factory,    app,  factory, 0x10000,   960K,
js_code,    data, ,        0x100000,  64K,
ota_0,      app,  ota_0,   0x200000,  960K,
storage,    data, ,        0x300000,  1M,

on start up, in main.c it looks up this partition by name, and then stores the physical address in romdata_jscode.
I have tested the code and it working as it was before the storage changes.
The  flashFs filessytem is working as is  flash reads and writes.
The flashFS code uses the area at 0x300000.
If anything ota_0 should be removed as the ota stuff has not been implemented. This area could then be used for the flash.getFreeArea().",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1341,2018-02-14T23:43:40Z,2018-02-15T10:31:18Z,2018-02-20T05:03:58Z,MERGED,True,10,7,1,https://github.com/wilberforce,ESP32: Fix jshFlashGetMemMapAddress offset,1,[],https://github.com/espruino/Espruino/pull/1341,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1341#issuecomment-365886599,The romdata_jscode point is mapped by the MMU to the real address of the jscode partition. The offset from the start of flash for the code areas is 0x100000 so this has be removed in the direct access of memory case.,"Ahh - thanks for clearing that up.
Yes, I totally agree on ota2 and flash.getFreeArea().
So you're saying that with the current (master) build, E.memoryArea(0x100000,16) doesn't work and actually causes the device to crash? Because I got the impression from the reports on the other issue that it was ok?
Let's merge this anyway then, but it'd be nice to at the very least use FLASH_SAVED_CODE_START and length, and ideally use the values from the partition table.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1347,2018-02-19T20:17:01Z,2018-02-20T08:51:32Z,2018-05-24T08:08:46Z,MERGED,True,16,7,3,https://github.com/drandreas,NFC: Backport HAL_NFC_PARAM_ID_NFCID1 from SDK 14.2.0,1,[],https://github.com/espruino/Espruino/pull/1347,https://github.com/drandreas,1,https://github.com/espruino/Espruino/pull/1347,"In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.","In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1347,2018-02-19T20:17:01Z,2018-02-20T08:51:32Z,2018-05-24T08:08:46Z,MERGED,True,16,7,3,https://github.com/drandreas,NFC: Backport HAL_NFC_PARAM_ID_NFCID1 from SDK 14.2.0,1,[],https://github.com/espruino/Espruino/pull/1347,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1347#issuecomment-366908598,"In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1347,2018-02-19T20:17:01Z,2018-02-20T08:51:32Z,2018-05-24T08:08:46Z,MERGED,True,16,7,3,https://github.com/drandreas,NFC: Backport HAL_NFC_PARAM_ID_NFCID1 from SDK 14.2.0,1,[],https://github.com/espruino/Espruino/pull/1347,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1347#issuecomment-391354376,"In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.","Hi @drandreas - I just tried to build with SDK14, and I realised it doesn't actually build:
targets/nrf5x/bluetooth.c: In function 'jsble_nfc_get_internal':
targets/nrf5x/bluetooth.c:2288:35: error: 'HAL_NFC_PARAM_ID_INTERNAL' undeclared (first use in this function)
   ret_val = hal_nfc_parameter_get(HAL_NFC_PARAM_ID_INTERNAL, data, max_len);
                                   ^

targets/nrf5x/bluetooth.c: In function 'jsble_nfc_send_rsp':
targets/nrf5x/bluetooth.c:2333:13: error: implicit declaration of function 'hal_nfc_send_rsp' [-Werror=implicit-function-declaration]
   ret_val = hal_nfc_send_rsp(data, len);
             ^

I guess there are still some changes to be made to the NFC library because of sending responses? I have some feeling you might have added something already? Is it literally just a case of copying your SDK12 NFC library back over, since it's basically a tweaked version of SDK14's one anyway?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1347,2018-02-19T20:17:01Z,2018-02-20T08:51:32Z,2018-05-24T08:08:46Z,MERGED,True,16,7,3,https://github.com/drandreas,NFC: Backport HAL_NFC_PARAM_ID_NFCID1 from SDK 14.2.0,1,[],https://github.com/espruino/Espruino/pull/1347,https://github.com/drandreas,4,https://github.com/espruino/Espruino/pull/1347#issuecomment-391462064,"In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.",did you apply my 7 patches in #1320?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1347,2018-02-19T20:17:01Z,2018-02-20T08:51:32Z,2018-05-24T08:08:46Z,MERGED,True,16,7,3,https://github.com/drandreas,NFC: Backport HAL_NFC_PARAM_ID_NFCID1 from SDK 14.2.0,1,[],https://github.com/espruino/Espruino/pull/1347,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1347#issuecomment-391627336,"In 141752c HAL_NFC_PARAM_ID_UID was introduced for setting custom NFC UID. In SDK 14 Nordic introduced the very same function officially. For future compatibility Nordic's HAL_NFC_PARAM_ID_NFCID1 API is backported and HAL_NFC_PARAM_ID_UID is renamed.
HAL_NFC_PARAM_ID_NFCID1 takes either a 7 byte UID or a 0x07 to set the default UID.
Support 4 byte and 10 byte UID is not backported.","Perfect - thanks! It works perfectly now... Sorry, I knew I missed something :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1353,2018-02-26T12:58:26Z,2019-04-09T09:52:54Z,2019-04-09T09:52:54Z,CLOSED,False,64,0,1,https://github.com/ramangopalan,New target: ET-STM32 Stamp module - initial port,1,[],https://github.com/espruino/Espruino/pull/1353,https://github.com/ramangopalan,1,https://github.com/espruino/Espruino/pull/1353,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1353,2018-02-26T12:58:26Z,2019-04-09T09:52:54Z,2019-04-09T09:52:54Z,CLOSED,False,64,0,1,https://github.com/ramangopalan,New target: ET-STM32 Stamp module - initial port,1,[],https://github.com/espruino/Espruino/pull/1353,https://github.com/ramangopalan,2,https://github.com/espruino/Espruino/pull/1353#issuecomment-376041837,,"Gordon, will you please consider merging the update for the Stamp module?
R",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1353,2018-02-26T12:58:26Z,2019-04-09T09:52:54Z,2019-04-09T09:52:54Z,CLOSED,False,64,0,1,https://github.com/ramangopalan,New target: ET-STM32 Stamp module - initial port,1,[],https://github.com/espruino/Espruino/pull/1353,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1353#issuecomment-377166504,,"Thanks! I'm afraid I'm not pulling new board files into the master branch any more unless it's for a board that a company is actually paying maintenance for.
It's just getting too painful to maintain since every time the Makefile changes I now have to make changes to 50+ board files to keep them compiling (nobody else maintains them once they have been committed).
However I'll leave this open as I do want to find a way to keep ports like yours as part of Espruino. I'll come up with something soon and will merge this in.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1353,2018-02-26T12:58:26Z,2019-04-09T09:52:54Z,2019-04-09T09:52:54Z,CLOSED,False,64,0,1,https://github.com/ramangopalan,New target: ET-STM32 Stamp module - initial port,1,[],https://github.com/espruino/Espruino/pull/1353,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1353#issuecomment-481184076,,I have now merged this into UNMAINTAINED_BOARDS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1364,2018-04-02T11:54:26Z,2018-04-03T08:43:45Z,2018-04-03T08:43:45Z,MERGED,True,1,1,1,https://github.com/hkwi,fix typo,1,[],https://github.com/espruino/Espruino/pull/1364,https://github.com/hkwi,1,https://github.com/espruino/Espruino/pull/1364,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1364,2018-04-02T11:54:26Z,2018-04-03T08:43:45Z,2018-04-03T08:43:45Z,MERGED,True,1,1,1,https://github.com/hkwi,fix typo,1,[],https://github.com/espruino/Espruino/pull/1364,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1364#issuecomment-378174746,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1369,2018-04-05T23:12:53Z,2018-04-06T08:45:26Z,2018-04-06T08:45:26Z,MERGED,True,1,1,1,https://github.com/andrewwakeling,"Minor typo: require(""flash"") => require(""Flash"")",1,[],https://github.com/espruino/Espruino/pull/1369,https://github.com/andrewwakeling,1,https://github.com/espruino/Espruino/pull/1369,Minor typo in the builtin documentation for require('ESP8266').getFreeFlash().,Minor typo in the builtin documentation for require('ESP8266').getFreeFlash().,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1369,2018-04-05T23:12:53Z,2018-04-06T08:45:26Z,2018-04-06T08:45:26Z,MERGED,True,1,1,1,https://github.com/andrewwakeling,"Minor typo: require(""flash"") => require(""Flash"")",1,[],https://github.com/espruino/Espruino/pull/1369,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1369#issuecomment-379189002,Minor typo in the builtin documentation for require('ESP8266').getFreeFlash().,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1370,2018-04-08T03:44:08Z,2018-04-08T10:32:24Z,2018-04-09T05:44:28Z,MERGED,True,4,0,1,https://github.com/wilberforce,ESP8266: Fix when USE_DEBUGGER not defined,2,[],https://github.com/espruino/Espruino/pull/1370,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1370,"Failing here:
https://travis-ci.org/espruino/Espruino/jobs/362880677#L480
src/jsinteractive.c:944:20: error: 'JSIS_IN_DEBUGGER' undeclared (first use in this function)
       (jsiStatus & JSIS_IN_DEBUGGER) ? JSI_DEBUG_HISTORY_NAME : JSI_HISTORY_NAME,","Failing here:
https://travis-ci.org/espruino/Espruino/jobs/362880677#L480
src/jsinteractive.c:944:20: error: 'JSIS_IN_DEBUGGER' undeclared (first use in this function)
       (jsiStatus & JSIS_IN_DEBUGGER) ? JSI_DEBUG_HISTORY_NAME : JSI_HISTORY_NAME,",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1370,2018-04-08T03:44:08Z,2018-04-08T10:32:24Z,2018-04-09T05:44:28Z,MERGED,True,4,0,1,https://github.com/wilberforce,ESP8266: Fix when USE_DEBUGGER not defined,2,[],https://github.com/espruino/Espruino/pull/1370,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1370#issuecomment-379539514,"Failing here:
https://travis-ci.org/espruino/Espruino/jobs/362880677#L480
src/jsinteractive.c:944:20: error: 'JSIS_IN_DEBUGGER' undeclared (first use in this function)
       (jsiStatus & JSIS_IN_DEBUGGER) ? JSI_DEBUG_HISTORY_NAME : JSI_HISTORY_NAME,","thanks! sorry, should have checked travis",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1377,2018-04-22T12:21:30Z,2018-04-23T10:06:13Z,2018-04-23T10:06:13Z,MERGED,True,311,86,3,https://github.com/opichals,HTTP POST & Transfer-Encoding: chunked refactor,2,[],https://github.com/espruino/Espruino/pull/1377,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1377,"Fixed the http request/response  'data', 'end' and 'close' event semantics.
Added two added tests for http now pass in espruino as well in node.js
./tests/test_http_post.js
./tests/test_http_post_chunked.js","Fixed the http request/response  'data', 'end' and 'close' event semantics.
Added two added tests for http now pass in espruino as well in node.js
./tests/test_http_post.js
./tests/test_http_post_chunked.js",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1377,2018-04-22T12:21:30Z,2018-04-23T10:06:13Z,2018-04-23T10:06:13Z,MERGED,True,311,86,3,https://github.com/opichals,HTTP POST & Transfer-Encoding: chunked refactor,2,[],https://github.com/espruino/Espruino/pull/1377,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1377#issuecomment-383518793,"Fixed the http request/response  'data', 'end' and 'close' event semantics.
Added two added tests for http now pass in espruino as well in node.js
./tests/test_http_post.js
./tests/test_http_post_chunked.js",Thanks - looks really good. Are we sure this doesn't break any of the TCP/UDP stuff?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1377,2018-04-22T12:21:30Z,2018-04-23T10:06:13Z,2018-04-23T10:06:13Z,MERGED,True,311,86,3,https://github.com/opichals,HTTP POST & Transfer-Encoding: chunked refactor,2,[],https://github.com/espruino/Espruino/pull/1377,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1377#issuecomment-383521926,"Fixed the http request/response  'data', 'end' and 'close' event semantics.
Added two added tests for http now pass in espruino as well in node.js
./tests/test_http_post.js
./tests/test_http_post_chunked.js","@gfwilliams I tried to go through the related tests and none of them failed:
I tested
tests/test_net*
tests/test_http*
tests/test_dgram*

I am not aware of anything more there is?
BTW: Could we make the CI run the tests for PRs?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1377,2018-04-22T12:21:30Z,2018-04-23T10:06:13Z,2018-04-23T10:06:13Z,MERGED,True,311,86,3,https://github.com/opichals,HTTP POST & Transfer-Encoding: chunked refactor,2,[],https://github.com/espruino/Espruino/pull/1377,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1377#issuecomment-383523371,"Fixed the http request/response  'data', 'end' and 'close' event semantics.
Added two added tests for http now pass in espruino as well in node.js
./tests/test_http_post.js
./tests/test_http_post_chunked.js","Ok, great! No, I don't think there are other network tests in there...
I wonder whether the network portion of the tests would run on Travis (seems scary if they'd allow people to start their own servers on the machines), but yes, it'd make sense to make the Linux build automatically run through all the tests.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1381,2018-04-25T14:56:50Z,2018-04-25T14:57:41Z,2018-04-25T14:57:41Z,CLOSED,False,244,3,8,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),4,[],https://github.com/espruino/Espruino/pull/1381,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1381,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1381,2018-04-25T14:56:50Z,2018-04-25T14:57:41Z,2018-04-25T14:57:41Z,CLOSED,False,244,3,8,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),4,[],https://github.com/espruino/Espruino/pull/1381,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1381#issuecomment-384317995,,"well old story, too much stuff",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1382,2018-04-25T16:34:20Z,2018-04-25T16:34:46Z,2018-04-25T16:34:46Z,CLOSED,False,244,3,8,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),5,[],https://github.com/espruino/Espruino/pull/1382,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1382,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1383,2018-04-25T17:38:49Z,2018-04-26T11:29:28Z,2018-04-26T11:29:28Z,CLOSED,False,81,34,8,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),2,[],https://github.com/espruino/Espruino/pull/1383,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1383,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1384,2018-04-26T10:47:33Z,2018-04-26T10:58:43Z,2018-04-26T11:22:22Z,MERGED,True,4,0,1,https://github.com/MaBecker,ESP8266 build specific stuff to make SHA256/512 switchable,1,[],https://github.com/espruino/Espruino/pull/1384,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1384,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1384,2018-04-26T10:47:33Z,2018-04-26T10:58:43Z,2018-04-26T11:22:22Z,MERGED,True,4,0,1,https://github.com/MaBecker,ESP8266 build specific stuff to make SHA256/512 switchable,1,[],https://github.com/espruino/Espruino/pull/1384,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1384#issuecomment-384598568,,Ahh - thanks - so does the build fail if that objcopy fails?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1384,2018-04-26T10:47:33Z,2018-04-26T10:58:43Z,2018-04-26T11:22:22Z,MERGED,True,4,0,1,https://github.com/MaBecker,ESP8266 build specific stuff to make SHA256/512 switchable,1,[],https://github.com/espruino/Espruino/pull/1384,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1384#issuecomment-384599640,,"that what you get without
LD espruino_esp8266_partial.o
xtensa-lx106-elf-objcopy: 'libs/crypto/mbedtls/library/sha256.o': No such file
make: *** [espruino_esp8266_partial.o] Error 1",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1384,2018-04-26T10:47:33Z,2018-04-26T10:58:43Z,2018-04-26T11:22:22Z,MERGED,True,4,0,1,https://github.com/MaBecker,ESP8266 build specific stuff to make SHA256/512 switchable,1,[],https://github.com/espruino/Espruino/pull/1384,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1384#issuecomment-384601032,,"I have seen in other linker scripts that the sections for libs can be done in the linker script rather than a separate pass in the make process, so could look at this at some stage.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1385,2018-04-26T17:50:47Z,2018-04-27T08:00:35Z,2018-04-27T08:00:35Z,MERGED,True,9,4,2,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),1,[],https://github.com/espruino/Espruino/pull/1385,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1385,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1385,2018-04-26T17:50:47Z,2018-04-27T08:00:35Z,2018-04-27T08:00:35Z,MERGED,True,9,4,2,https://github.com/MaBecker,capsulate gdb with ifdef DEBUG (fix #1378),1,[],https://github.com/espruino/Espruino/pull/1385,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1385#issuecomment-384896068,,Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1386,2018-04-26T20:41:27Z,2018-04-27T07:46:27Z,2018-04-27T10:27:39Z,MERGED,True,3,2,1,https://github.com/wilberforce,Telnet - prevent New interpreter error: FIFO_FULL,1,[],https://github.com/espruino/Espruino/pull/1386,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1386,"Allow TCP/IP in Telnet have flow control in the firmware itself.
http://forum.espruino.com/conversations/317981/#comment14206992","Allow TCP/IP in Telnet have flow control in the firmware itself.
http://forum.espruino.com/conversations/317981/#comment14206992",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1386,2018-04-26T20:41:27Z,2018-04-27T07:46:27Z,2018-04-27T10:27:39Z,MERGED,True,3,2,1,https://github.com/wilberforce,Telnet - prevent New interpreter error: FIFO_FULL,1,[],https://github.com/espruino/Espruino/pull/1386,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1386#issuecomment-384892950,"Allow TCP/IP in Telnet have flow control in the firmware itself.
http://forum.espruino.com/conversations/317981/#comment14206992",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1388,Not yet ready to merge!,Not yet ready to merge!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1388#issuecomment-387311932,Not yet ready to merge!,"Hi @jumjum123
Still getting:
targets/esp32/main.c: At top level:
targets/esp32/main.c:20:23: fatal error: bluetooth.h: No such file or directory

and when I change to  #include ""libs/bluetooth/bluetooth.h""
I then get:
In file included from targets/esp32/main.c:20:0:
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/libs/bluetooth/bluetooth.h: At top level:
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/libs/bluetooth/bluetooth.h:62:0: warning: ""CENTRAL_LINK_COUNT"" redefined
 #define CENTRAL_LINK_COUNT    1
 ^
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/libs/bluetooth/bluetooth.h:57:0: note: this is the location of the previous definition
 #define CENTRAL_LINK_COUNT              0                                           /**<number of central links used by the application. When changing this number reme
 ^
In file included from targets/esp32/main.c:22:0:
targets/esp32/BLE/esp32_gap_func.h:17:29: fatal error: esp_gap_ble_api.h: No such file or directory",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/jumjum123,3,https://github.com/espruino/Espruino/pull/1388#issuecomment-387332871,Not yet ready to merge!,"@wilberforce
Hmm, how do you compile ? This is my way, could there be a problem with USE_BLUETOOTH ?
#!/bin/bash
export ESP_IDF_PATH=/home/esp32/esp-idf
export IDF_PATH=/home/esp32/esp-idf
export ESP_APP_TEMPLATE_PATH=/home/esp32/template
export BOARD=ESP32
export RTOS=1
export USE_BLUETOOTH=1
[[ "":$PATH:"" != "":/home/esp32/xtensa-esp32-elf/bin:"" ]] && PATH=""/home/esp32/xtensa-esp32-elf/bin:${PATH}""
cd Espruino
make clean all
make",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1388#issuecomment-387336691,Not yet ready to merge!,"Ahhh thanks.. it needs the flag. USE_BLUETOOTH=1 looks like there are amissing #idefs in main.c
I compile like this:
BOARD=ESP32 USE_BLUETOOTH=1 make
and when tracking down errors:
BOARD=ESP32 SINGLETHREAD=1 USE_BLUETOOTH=1 make
So you don't get the parallel make.
For me - the environment is set up with source script/provision ESP32
It compiles - then fails on link:
targets/esp32/BLE/esp32_gap_func.o:(.literal.gap_event_handler+0x1c): undefined reference to `esp_ble_gap_security_rsp'
targets/esp32/BLE/esp32_gap_func.o:(.literal.gap_init_security+0x0): undefined reference to `esp_ble_gap_set_security_param'
targets/esp32/BLE/esp32_gap_func.o: In function `gap_event_handler':
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:284: undefined reference to `esp_ble_gap_security_rsp'
targets/esp32/BLE/esp32_gap_func.o: In function `gap_init_security':
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:306: undefined reference to `esp_ble_gap_set_security_param'
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:307: undefined reference to `esp_ble_gap_set_security_param'
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:308: undefined reference to `esp_ble_gap_set_security_param'
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:313: undefined reference to `esp_ble_gap_set_security_param'
/home/wilberforce/EspruinoBuildTools/esp32/build/Espruino/targets/esp32/BLE/esp32_gap_func.c:314: undefined reference to `esp_ble_gap_set_security_param'

Does this look familiar?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/1388#issuecomment-387341172,Not yet ready to merge!,"@jumjum123
I have got it to compile with the Bluetooth flag off. Shall I push targets/ESP32/main.c upto ESP32 branch for you to pull?
I've not solved the BLE security module issue yet, - I don't think I have it compiled in the libs. Do we need this compiled in?
The difference is here:
CONFIG_BLE_SMP_ENABLE=
+CONFIG_BLE_SMP_ENABLE=y",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/jumjum123,6,https://github.com/espruino/Espruino/pull/1388#issuecomment-387343435,Not yet ready to merge!,"My development path is based on our old mate. BTW, would like to know, how Neil feels, reading this ;-)

first download release 3.0
next download template
set environment variables
run make menuconfig in template, and set configuration
run make in template
download Espruino from ESP32 branch
run the shell as mentioned above

Just read your latest message, yes SMP needs to be enabled",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/1388#issuecomment-387345587,Not yet ready to merge!,"Turning the flag on I got a build:
-rw-rw-rw- 1 wilberforce wilberforce  843168 May  7 18:32 espruino_1v97.8_esp32.bin
-rw-rw-rw- 1 wilberforce wilberforce 1129312 May  8 21:35 espruino_esp32.bin
First is without BLE, the 2nd with!
With this size - I'm not sure if we'll need to move the js_code partition anymore?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,8,https://github.com/espruino/Espruino/pull/1388#issuecomment-387351045,Not yet ready to merge!,"tried to boot with old partition table:
E (31) boot: ota data partition invalid, falling back to factory
E (257) esp_image: Image length 1129312 doesn't fit in partition length 983040
E (257) boot: Factory app partition is not bootable
E (257) esp_image: image at 0x200000 has invalid magic byte
E (262) boot: OTA app partition slot 0 is not bootable
E (267) boot: No bootable app partitions in the partition table
user code done

I'll see if I can get it to fit!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/jumjum123,9,https://github.com/espruino/Espruino/pull/1388#issuecomment-387353870,Not yet ready to merge!,"my latest partition table was this, as you can see, only minor changes to have memory for firmware
Whatever we do, I would recommend users to clear flash before starting with this version
BTW, IIRC, heap in BLE version is smaller. Or with other words, heap without BLE should give the option to increase jsVars. espruinoTask in main.c already supports this for later versions with PSRAM
pin 16 and 17 are reserved for PSRAM, which we don't support yet. Please see jshPinDefaultPullup() in jshardware.c
#Name,      Type, SubType, Offset,    Size, Flags
#boot,      data, ,        0x1000,    4K
partition,  data, ,        0x8000,    0x1000
nvs,        data, nvs,     0x9000,    16K,
#otadata,    data, ota,     0xd000,    8K,
factory,    app,  factory, 0x10000,   1400K,
js_code,    data, ,        0x200000,  64K,
#ota_0,      app,  ota_0,   0x200000,  960K,
storage,    data, ,        0x300000,  1M,",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,10,https://github.com/espruino/Espruino/pull/1388#issuecomment-387358892,Not yet ready to merge!,"I'm thinking of making the js_code partition bigger than 64K. Say at least 128K. Then there is plenty of space for modules.
Since the firmware overlaps into 0x100000 - the next boundry is 0x200000.
We leave 0x200000-0x300000 free an have the js_code start at say 0x200000 - js_code_size.
[ 0x10000 firmware 1400K?]
[ Gap for bigger firmware or space to make js_code larger ]
[ jscode]
[0x200000-0x300000 free]",True,{'THUMBS_UP': ['https://github.com/jumjum123']}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,11,https://github.com/espruino/Espruino/pull/1388#issuecomment-388306725,Not yet ready to merge!,"@jumjum123
Here is the partition table - it has room for large firmware x2 ( incase we do want to do ota at some stage) and 256K for js_code!

#Name | Type | SubType | Offset | Size
-- | -- | -- | -- | --
#boot | data | 0 | 0x1000 | 4K
#reserved | 0 | 0 | 0x2000 | 24K
partition | data | 0 | 0x8000 | 4K
nvs | data | nvs | 0x9000 | 12K
otadata | data | ota | 0xC000 | 8K
free | data | 0x40 | 0xE000 | 8K
factory | app | factory | 0x10000 | 1344K
ota_0 | app | ota_0 | 0x160000 | 1344K
flash | data | 0x40 | 0x2B0000 | 64K
js_code | data | 0 | 0x2C0000 | 256K
storage | data | 0 | 0x300000 | 1024K",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,12,https://github.com/espruino/Espruino/pull/1388#issuecomment-388345077,Not yet ready to merge!,Issues with current build - save() not working - need to updated saved code area 0x2C0000,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,13,https://github.com/espruino/Espruino/pull/1388#issuecomment-388612269,Not yet ready to merge!,"@gfwilliams - Ready to merge with master please.
@jumjum123  I have pulled all the changes from the esp32 branch - except relating to the psram.
Also I have not pulled the new targets/esp32/docs - as some this will be out of date now
After this is merged, we can look at pulling the changes above into the ESP32 branch, as there have been changes to master that are not in the esp32 branch.
JSVARs are down to 2500 from 5000 ;-(.
We probably need a way to look at turning the BLE off/on and getting for jsvars avaiable when off.
I have noticed that the module runs hotter with BLE and wifi on.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/gfwilliams,14,https://github.com/espruino/Espruino/pull/1388#issuecomment-388729902,Not yet ready to merge!,Looks great! is it possible to tweak the above two things? Otherwise I can do it when merging - it won't take long.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/jumjum123,15,https://github.com/espruino/Espruino/pull/1388#issuecomment-388739666,Not yet ready to merge!,"First of all big THANKS to @wilberforce and @gfwilliams
It's a big moment to see my BLE changes making it to master.
@wilberforce, I would use the branches ESP32 and ESP32-v3.0 in the way to

keep ESP32-v3.0 as the master for ESP32
use ESP32 as a kind of playground for anything, that relies on Espressif Master, like PSRAM support
Would you agree ?
@wilberforce, I've seen you using #include ""libs/bluetooth/bluetooth.h"".
In my understanding #include bluetooth.h"" should be ok.
In Makefile line 546, we have this INCLUDE += -I$(ROOT)/libs/bluetooth
Why do we need the long include ?

@gfwilliams if you could do the changes, would be a big help. You are much faster than I could ever be.
@wilberforce, as soons as I get UART running, my next step will be to check how we can switch off BLE during runtime. I've some ideas for testing. Hopefully, we will get some memory back for jsVars
I'm still disappointed by Espressif, removing correct support of PSRAM from release.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/gfwilliams,16,https://github.com/espruino/Espruino/pull/1388#issuecomment-388741700,Not yet ready to merge!,"""libs/bluetooth/bluetooth.h"".

Yeah, that could just be bluetooth.h. Style-wise, using full path might have been better but we're a long way down this path now and it's probably better to stick with the same thing we do elsewhere.
Sure, I'll tweak and merge (since I merged some other PRs there's a minor conflict I need to tweak anyway). Probably won't be until much later today though as I've got a bunch of Pixl boards to pack and send out.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,17,https://github.com/espruino/Espruino/pull/1388#issuecomment-388755205,Not yet ready to merge!,"@gfwilliams
I've cleaned up the promise var, and the conditional builds  - and tried to revert common.py
I'm getting a link error now - possibly broke the wrapper code????
gen/jswrapper.o:(.rodata.jswSymbols_E+0x34): undefined reference to `jswrap_espruino_dumpFreeList'
gen/jswrapper.o:(.rodata.jswSymbols_E+0x3c): undefined reference to `jswrap_espruino_dumpLockedVars'

Let's see what the travis build comes back with.
I've broken something.  Bugger.
I'm out of time, so will sort tomorrow unless you get to it first.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,18,https://github.com/espruino/Espruino/pull/1388#issuecomment-388755572,Not yet ready to merge!,"@gfwilliams
and I have added to the change log incorrectly ;-() put the thing at the top rather than the bottom:
ESP32: update esp-idf to v3.0. BLE support - thanks to @jumjum. Erase flash before flashing. vars now 2500",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/wilberforce,19,https://github.com/espruino/Espruino/pull/1388#issuecomment-388759068,Not yet ready to merge!,@gfwilliams  - looks like all good now - just the Changelog to sort!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/gfwilliams,20,https://github.com/espruino/Espruino/pull/1388#issuecomment-388775631,Not yet ready to merge!,Awesome - thanks for doing that!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1388,2018-04-30T09:51:29Z,2018-05-14T10:49:49Z,2018-05-14T10:50:47Z,MERGED,True,2009,95,25,https://github.com/wilberforce,initial esp-idf 3.0 build,15,[],https://github.com/espruino/Espruino/pull/1388,https://github.com/gfwilliams,21,https://github.com/espruino/Espruino/pull/1388#issuecomment-388776270,Not yet ready to merge!,"All merged - thanks for all your work on this everyone!
@jumjum123 I will get a global BLE == NRF var added for this soon - promise :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1389,2018-05-01T18:47:25Z,2018-05-02T07:34:40Z,2018-05-02T07:34:40Z,MERGED,True,12,7,2,https://github.com/opichals,RegExp fixes and escaping fallback,2,[],https://github.com/espruino/Espruino/pull/1389,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1389,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1389,2018-05-01T18:47:25Z,2018-05-02T07:34:40Z,2018-05-02T07:34:40Z,MERGED,True,12,7,2,https://github.com/opichals,RegExp fixes and escaping fallback,2,[],https://github.com/espruino/Espruino/pull/1389,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1389#issuecomment-385889806,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1390,2018-05-01T23:32:49Z,2018-05-02T07:36:10Z,2019-04-02T13:13:49Z,MERGED,True,13,4,2,https://github.com/opichals,Compare Transfer-Encoding value case-insensitively,1,[],https://github.com/espruino/Espruino/pull/1390,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1390,By RFC 7230: All transfer-coding values are case-insensitive.,By RFC 7230: All transfer-coding values are case-insensitive.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1390,2018-05-01T23:32:49Z,2018-05-02T07:36:10Z,2019-04-02T13:13:49Z,MERGED,True,13,4,2,https://github.com/opichals,Compare Transfer-Encoding value case-insensitively,1,[],https://github.com/espruino/Espruino/pull/1390,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1390#issuecomment-385890161,By RFC 7230: All transfer-coding values are case-insensitive.,Thanks - that's an annoying bit of the spec :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1393,2018-05-02T23:27:05Z,2018-05-03T07:44:19Z,2018-05-03T07:44:19Z,MERGED,True,19,11,4,https://github.com/opichals," Implement ignore-case RegExp flag, /something/i",2,[],https://github.com/espruino/Espruino/pull/1393,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1393,"Examples from tests that match:
/world/i.exec(""Hello World"")
/[bac]*d/i.exec(""Hello aBcD"")","Examples from tests that match:
/world/i.exec(""Hello World"")
/[bac]*d/i.exec(""Hello aBcD"")",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1393,2018-05-02T23:27:05Z,2018-05-03T07:44:19Z,2018-05-03T07:44:19Z,MERGED,True,19,11,4,https://github.com/opichals," Implement ignore-case RegExp flag, /something/i",2,[],https://github.com/espruino/Espruino/pull/1393,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1393#issuecomment-386215166,"Examples from tests that match:
/world/i.exec(""Hello World"")
/[bac]*d/i.exec(""Hello aBcD"")",Very nice - thanks for tweaking String.toUpper/LowerCase to use the same functions as well :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1394,2018-05-03T08:04:45Z,2018-05-03T08:13:42Z,2018-05-03T08:13:42Z,MERGED,True,23,24,4,https://github.com/opichals,Add ignoreCase string comparison helper,1,[],https://github.com/espruino/Espruino/pull/1394,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1394,"Add jsvIsStringIEqualAndUnLock helper. No extra allocation solution
for cases where an ignoreCase comparison is necessary.","Add jsvIsStringIEqualAndUnLock helper. No extra allocation solution
for cases where an ignoreCase comparison is necessary.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1394,2018-05-03T08:04:45Z,2018-05-03T08:13:42Z,2018-05-03T08:13:42Z,MERGED,True,23,24,4,https://github.com/opichals,Add ignoreCase string comparison helper,1,[],https://github.com/espruino/Espruino/pull/1394,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1394#issuecomment-386221239,"Add jsvIsStringIEqualAndUnLock helper. No extra allocation solution
for cases where an ignoreCase comparison is necessary.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1396,2018-05-03T10:22:54Z,2018-05-03T11:27:40Z,2018-05-03T11:27:40Z,MERGED,True,3,3,3,https://github.com/ukaoskid,Managed to improve image creation on MacOS,2,[],https://github.com/espruino/Espruino/pull/1396,https://github.com/ukaoskid,1,https://github.com/espruino/Espruino/pull/1396,Added MacOS detection inside the image creation sh scripts.,Added MacOS detection inside the image creation sh scripts.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1396,2018-05-03T10:22:54Z,2018-05-03T11:27:40Z,2018-05-03T11:27:40Z,MERGED,True,3,3,3,https://github.com/ukaoskid,Managed to improve image creation on MacOS,2,[],https://github.com/espruino/Espruino/pull/1396,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1396#issuecomment-386252423,Added MacOS detection inside the image creation sh scripts.,"Thanks! could you just alter the original line to use IMGSIZE=$(expr $BOOTLOADERSIZE + $(du ""$ESPRUINOFILE"" | cut -f1))? That works on Linux too, so then you can avoid the OS-specific ifdef?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1396,2018-05-03T10:22:54Z,2018-05-03T11:27:40Z,2018-05-03T11:27:40Z,MERGED,True,3,3,3,https://github.com/ukaoskid,Managed to improve image creation on MacOS,2,[],https://github.com/espruino/Espruino/pull/1396,https://github.com/ukaoskid,3,https://github.com/espruino/Espruino/pull/1396#issuecomment-386255094,Added MacOS detection inside the image creation sh scripts.,"Sure! Got to do that. Makes sense.
…
On Thu, May 3, 2018, 12:29 Gordon Williams ***@***.***> wrote:
 Thanks! could you just alter the original line to use IMGSIZE=$(expr
 $BOOTLOADERSIZE + $(du ""$ESPRUINOFILE"" | cut -f1))? That works on Linux
 too, so then you can avoid the OS-specific ifdef?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1396 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AKrMyAuyf1TDIRCOAN5UGfR2vEFV9rz-ks5tutwOgaJpZM4Tw1No>
 .",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1396,2018-05-03T10:22:54Z,2018-05-03T11:27:40Z,2018-05-03T11:27:40Z,MERGED,True,3,3,3,https://github.com/ukaoskid,Managed to improve image creation on MacOS,2,[],https://github.com/espruino/Espruino/pull/1396,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1396#issuecomment-386264328,Added MacOS detection inside the image creation sh scripts.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1399,2018-05-05T17:52:13Z,2018-05-07T08:37:44Z,2018-05-07T08:37:44Z,MERGED,True,23,6,2,https://github.com/opichals,"Implement RegExp character set ranges, /[a-z]/",1,[],https://github.com/espruino/Espruino/pull/1399,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1399,A simple implementation with a known issue that the range's first character must not be a quoted.,A simple implementation with a known issue that the range's first character must not be a quoted.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1399,2018-05-05T17:52:13Z,2018-05-07T08:37:44Z,2018-05-07T08:37:44Z,MERGED,True,23,6,2,https://github.com/opichals,"Implement RegExp character set ranges, /[a-z]/",1,[],https://github.com/espruino/Espruino/pull/1399,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1399#issuecomment-386998201,A simple implementation with a known issue that the range's first character must not be a quoted.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1400,2018-05-06T17:10:53Z,2018-05-07T08:08:41Z,2018-12-29T09:28:21Z,MERGED,True,13,7,1,https://github.com/opichals,Do parseInt() on only pre-CRLF http chunked data,1,[],https://github.com/espruino/Espruino/pull/1400,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1400,"This avoids the HTTP chunks decoding hitting the parseInt string
length issue #1397","This avoids the HTTP chunks decoding hitting the parseInt string
length issue #1397",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1400,2018-05-06T17:10:53Z,2018-05-07T08:08:41Z,2018-12-29T09:28:21Z,MERGED,True,13,7,1,https://github.com/opichals,Do parseInt() on only pre-CRLF http chunked data,1,[],https://github.com/espruino/Espruino/pull/1400,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1400#issuecomment-386991281,"This avoids the HTTP chunks decoding hitting the parseInt string
length issue #1397",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1401,2018-05-08T00:56:14Z,2018-05-09T11:54:03Z,2018-05-09T23:23:40Z,MERGED,True,116,95,7,https://github.com/MaBecker,rewrite wifi.save and restore to use the storage lib (imp #1380),2,[],https://github.com/espruino/Espruino/pull/1401,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1401,"use .wificfg to store wifi credentials
free wifi save page and add to save_code
remove flash page 0x77000 and add to flash_available
move wifi restore after JavaScript environment is up and running","use .wificfg to store wifi credentials
free wifi save page and add to save_code
remove flash page 0x77000 and add to flash_available
move wifi restore after JavaScript environment is up and running",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1401,2018-05-08T00:56:14Z,2018-05-09T11:54:03Z,2018-05-09T23:23:40Z,MERGED,True,116,95,7,https://github.com/MaBecker,rewrite wifi.save and restore to use the storage lib (imp #1380),2,[],https://github.com/espruino/Espruino/pull/1401,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1401#issuecomment-387708491,"use .wificfg to store wifi credentials
free wifi save page and add to save_code
remove flash page 0x77000 and add to flash_available
move wifi restore after JavaScript environment is up and running",Possible to merge?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1401,2018-05-08T00:56:14Z,2018-05-09T11:54:03Z,2018-05-09T23:23:40Z,MERGED,True,116,95,7,https://github.com/MaBecker,rewrite wifi.save and restore to use the storage lib (imp #1380),2,[],https://github.com/espruino/Espruino/pull/1401,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1401#issuecomment-387714291,"use .wificfg to store wifi credentials
free wifi save page and add to save_code
remove flash page 0x77000 and add to flash_available
move wifi restore after JavaScript environment is up and running",Looks good - thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1403,2018-05-08T07:43:43Z,2018-05-09T08:41:06Z,2018-12-29T09:28:24Z,MERGED,True,7,7,2,https://github.com/opichals,Drop the unnecessary chunked lenString alloc,1,[],https://github.com/espruino/Espruino/pull/1403,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1403,It is no longer necessary as the #1397 was fixed.,It is no longer necessary as the #1397 was fixed.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1404,2018-05-08T07:59:38Z,2018-05-09T09:15:13Z,2018-05-09T09:15:13Z,MERGED,True,77,0,3,https://github.com/opichals,Add String#match() implementation,1,[],https://github.com/espruino/Espruino/pull/1404,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1404,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1404,2018-05-08T07:59:38Z,2018-05-09T09:15:13Z,2018-05-09T09:15:13Z,MERGED,True,77,0,3,https://github.com/opichals,Add String#match() implementation,1,[],https://github.com/espruino/Espruino/pull/1404,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1404#issuecomment-387676637,,Thanks! We'll see how this works out memory-wise but I might make the whole thing ifndef SAVE_ON_FLASH because a few boards are struggling for free memory now,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1407,2018-05-09T14:48:23Z,2018-05-09T15:02:52Z,2018-05-11T02:13:07Z,MERGED,True,2,0,1,https://github.com/MaBecker,"add ESP8266 #1380, #1358",1,[],https://github.com/espruino/Espruino/pull/1407,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1407,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1407,2018-05-09T14:48:23Z,2018-05-09T15:02:52Z,2018-05-11T02:13:07Z,MERGED,True,2,0,1,https://github.com/MaBecker,"add ESP8266 #1380, #1358",1,[],https://github.com/espruino/Espruino/pull/1407,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1407#issuecomment-387770455,,Wow - that was quick - Thanks.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1408,2018-05-09T19:55:17Z,2018-05-10T07:48:52Z,2018-12-29T09:28:32Z,MERGED,True,21,11,2,https://github.com/opichals,Avoid double on('connect') for non-HTTP connects,1,[],https://github.com/espruino/Espruino/pull/1408,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1408,Fixes #1405,Fixes #1405,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1408,2018-05-09T19:55:17Z,2018-05-10T07:48:52Z,2018-12-29T09:28:32Z,MERGED,True,21,11,2,https://github.com/opichals,Avoid double on('connect') for non-HTTP connects,1,[],https://github.com/espruino/Espruino/pull/1408,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1408#issuecomment-387979751,Fixes #1405,Thanks for fixing this so quickly!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1409,2018-05-09T22:14:34Z,2018-05-10T07:53:50Z,2018-12-29T09:28:35Z,MERGED,True,54,77,5,https://github.com/opichals,Tidy up networks by using JsNetUDPPacketHeader,1,[],https://github.com/espruino/Espruino/pull/1409,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1409,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1409,2018-05-09T22:14:34Z,2018-05-10T07:53:50Z,2018-12-29T09:28:35Z,MERGED,True,54,77,5,https://github.com/opichals,Tidy up networks by using JsNetUDPPacketHeader,1,[],https://github.com/espruino/Espruino/pull/1409,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1409#issuecomment-387980784,,Very neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1410,2018-05-09T22:16:31Z,2018-05-10T07:54:47Z,2018-05-10T07:54:47Z,MERGED,True,39,61,3,https://github.com/opichals,Make on('message') a queued callback,1,[],https://github.com/espruino/Espruino/pull/1410,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1410,And optimize the socketReceived()/socketReceivedUDP() calls,And optimize the socketReceived()/socketReceivedUDP() calls,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1410,2018-05-09T22:16:31Z,2018-05-10T07:54:47Z,2018-05-10T07:54:47Z,MERGED,True,39,61,3,https://github.com/opichals,Make on('message') a queued callback,1,[],https://github.com/espruino/Espruino/pull/1410,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1410#issuecomment-387980985,And optimize the socketReceived()/socketReceivedUDP() calls,Thanks - that really tidies it up!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1411,2018-05-10T15:36:29Z,2018-05-10T16:19:31Z,2018-05-10T16:19:31Z,MERGED,True,33,17,5,https://github.com/MaBecker,rearange rf_cal_sector (fix #1294),1,[],https://github.com/espruino/Espruino/pull/1411,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1411,"sector map for last 5 sectors of flash: ABCCC
A : rf cal
B : rf init data
C : sdk parameters
change last FlashArea
update ESP8266_BOARD","sector map for last 5 sectors of flash: ABCCC
A : rf cal
B : rf init data
C : sdk parameters
change last FlashArea
update ESP8266_BOARD",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1412,2018-05-11T09:21:12Z,2018-05-11T10:35:11Z,2018-05-11T10:35:11Z,MERGED,True,1,1,1,https://github.com/MaBecker,return authmode as text,1,[],https://github.com/espruino/Espruino/pull/1412,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1412,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1412,2018-05-11T09:21:12Z,2018-05-11T10:35:11Z,2018-05-11T10:35:11Z,MERGED,True,1,1,1,https://github.com/MaBecker,return authmode as text,1,[],https://github.com/espruino/Espruino/pull/1412,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1412#issuecomment-388327249,,Nice :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1414,2018-05-11T13:35:08Z,2018-05-14T08:01:04Z,2018-05-18T18:19:40Z,MERGED,True,2,0,1,https://github.com/MaBecker,add ESP8266 pr #1411 and #1412,1,[],https://github.com/espruino/Espruino/pull/1414,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1414,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1415,2018-05-12T12:46:04Z,2018-05-14T07:58:35Z,2018-05-14T14:24:32Z,MERGED,True,62,3,2,https://github.com/opichals,Fix receiving of large HTTP headers,1,[],https://github.com/espruino/Espruino/pull/1415,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1415,"Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405","Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1415,2018-05-12T12:46:04Z,2018-05-14T07:58:35Z,2018-05-14T14:24:32Z,MERGED,True,62,3,2,https://github.com/opichals,Fix receiving of large HTTP headers,1,[],https://github.com/espruino/Espruino/pull/1415,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1415#issuecomment-388729601,"Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405","Thanks! Yeah, on non-linux/esp* devices the data tends to come in as much smaller chunks, so you hit this pretty much right away.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1415,2018-05-12T12:46:04Z,2018-05-14T07:58:35Z,2018-05-14T14:24:32Z,MERGED,True,62,3,2,https://github.com/opichals,Fix receiving of large HTTP headers,1,[],https://github.com/espruino/Espruino/pull/1415,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1415#issuecomment-388795503,"Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405","@opichals
Any idea what the 536 mss size is based on?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1415,2018-05-12T12:46:04Z,2018-05-14T07:58:35Z,2018-05-14T14:24:32Z,MERGED,True,62,3,2,https://github.com/opichals,Fix receiving of large HTTP headers,1,[],https://github.com/espruino/Espruino/pull/1415,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1415#issuecomment-388817492,"Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405",@wilberforce I did some study there but lack complete understanding aside from the wikipedia MSS description at https://en.wikipedia.org/wiki/Maximum_segment_size,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1415,2018-05-12T12:46:04Z,2018-05-14T07:58:35Z,2018-05-14T14:24:32Z,MERGED,True,62,3,2,https://github.com/opichals,Fix receiving of large HTTP headers,1,[],https://github.com/espruino/Espruino/pull/1415,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1415#issuecomment-388834980,"Added a test which sends HTTP headers which take more than
MSS bytes (536) and therefore the httpParseHeaders() needs to be
called later again after the next packet arrives.
The websocket Connection: Upgrade request with the
Sec-WebSocket-* headers made the HTTP header section larger
as described above so it exhibited in the websocket scenario in #1405","I think it was to do with the packet size ESP8266 usually tried to deal with? In Espruino it's just the size of chunks of data that are sent to/from the IP layer.
Raising it has reasonably minimal gains other than when transmitting, when the ESP8266/32 might choose to send a packet after every call to send - so that value would directly affect the transmission speed because you're limited in the amount of packets/second you can get through.
edit: basically 536 seemed to be a good toss-up between memory usage, overhead for Espruino, and wireless speed. Maybe the trade-off is different on ESP32 but you'd want to do a bunch of benchmarks before changing it :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1416,2018-05-12T20:14:07Z,2018-05-14T07:19:47Z,2018-05-14T07:19:47Z,MERGED,True,62,54,2,https://github.com/opichals,Handle partial http chunk buf contents,2,[],https://github.com/espruino/Espruino/pull/1416,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1416,"When the chunk itself is bigger than the MSS a 'data'
event is issued with the available data and a remaining
length is written as a new http chunk header data to
the *receiveData string before reading more data from
the network.","When the chunk itself is bigger than the MSS a 'data'
event is issued with the available data and a remaining
length is written as a new http chunk header data to
the *receiveData string before reading more data from
the network.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1417,2018-05-13T05:46:50Z,2018-05-14T07:57:01Z,2018-05-14T07:57:01Z,MERGED,True,6,2,1,https://github.com/MaBecker,fix wifi restore ssidAP,2,[],https://github.com/espruino/Espruino/pull/1417,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1417,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1418,2018-05-15T09:11:16Z,2018-05-16T12:08:53Z,2018-05-16T12:08:53Z,MERGED,True,13,18,1,https://github.com/wilberforce,ESP32: add mac and channel to wifi scan,1,[],https://github.com/espruino/Espruino/pull/1418,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1418,#1406,#1406,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1418,2018-05-15T09:11:16Z,2018-05-16T12:08:53Z,2018-05-16T12:08:53Z,MERGED,True,13,18,1,https://github.com/wilberforce,ESP32: add mac and channel to wifi scan,1,[],https://github.com/espruino/Espruino/pull/1418,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1418#issuecomment-389494731,#1406,"@gfwilliams
Please merge. Thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1419,2018-05-16T12:27:51Z,2018-05-16T12:29:52Z,2018-05-16T12:49:57Z,MERGED,True,5,3,1,https://github.com/wilberforce,revert callback code from master,1,[],https://github.com/espruino/Espruino/pull/1419,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1419,Sorry - this dropped out - please merge,Sorry - this dropped out - please merge,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1423,2018-05-19T03:37:28Z,2018-05-19T08:07:55Z,2018-05-19T08:44:26Z,CLOSED,False,2,2,1,https://github.com/MaBecker,bump JS_VERSION to 1v98,1,[],https://github.com/espruino/Espruino/pull/1423,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1423,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1423,2018-05-19T03:37:28Z,2018-05-19T08:07:55Z,2018-05-19T08:44:26Z,CLOSED,False,2,2,1,https://github.com/MaBecker,bump JS_VERSION to 1v98,1,[],https://github.com/espruino/Espruino/pull/1423,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1423#issuecomment-390388251,,I just hadn't pushed my changes - so no need for this.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1424,2018-05-19T03:40:32Z,2018-05-19T08:07:52Z,2018-05-19T08:44:08Z,CLOSED,False,1,1,1,https://github.com/MaBecker,add version 1v98,1,[],https://github.com/espruino/Espruino/pull/1424,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1424,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1424,2018-05-19T03:40:32Z,2018-05-19T08:07:52Z,2018-05-19T08:44:08Z,CLOSED,False,1,1,1,https://github.com/MaBecker,add version 1v98,1,[],https://github.com/espruino/Espruino/pull/1424,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1424#issuecomment-390388248,,I just hadn't pushed my changes - so no need for this.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1431,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1431#issuecomment-390583076,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,I don't really understand what's going on here - does just flipping the clock polarity not do what you want?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1431#issuecomment-390585791,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Yes, the current shiftOut() implementation didn't get me anything displayed.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1431#issuecomment-390586533,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Arduino libs actually do clk, data, clk as well.
E.g. here https://github.com/ghalfacree/Arduino-Sketches/blob/master/libraries/TM1638/TM16XX.cpp#L138",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1431#issuecomment-390597533,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Except for the actual shiftOut function in Arduino's API:
http://forum.arduino.cc/index.php?topic=45529.0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
     uint8_t i;

     for (i = 0; i < 8; i++)  {
           if (bitOrder == LSBFIRST)
                 digitalWrite(dataPin, !!(val & (1 << i)));
           else      
                 digitalWrite(dataPin, !!(val & (1 << (7 - i))));
                 
           digitalWrite(clockPin, HIGH);
           digitalWrite(clockPin, LOW);            
     }
}

Honestly I'm struggling with this. As far as the hardware is concerned the data should be changed as soon as possible.
What actually happens when the TM1640 doesn't work? Do you get the wrong data, or just just flat-out refuses to do anything?
What about a second time when the clock has already been set to the right polarity.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1431#issuecomment-390632186,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Yes, Arduino's shiftOut() does the same thing as Espruino's does. But that's probably the reason the Arduino libs contain the send() method itself and are not using the shiftOut().

What actually happens when the TM1640 doesn't work? Do you get the wrong data, or just just flat-out
refuses to do anything?

It doesn't display anything. No activity.

What about a second time when the clock has already been set to the right polarity.

Nothing I could see from here.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,7,https://github.com/espruino/Espruino/pull/1431#issuecomment-392198788,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"I tried sw SPI, but no improvement.
This post seems to be pointing to the fact of it not being SPI compatible: http://dangerousprototypes.com/forum/viewtopic.php?f=4&t=4450#p43661
Perhaps a more versatile solution would be acceptable? Please have a look at #1447",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1431#issuecomment-392464556,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Thanks - this does just seem horribly complex though - I mean it's got its own little parser. In an ideal world we'd be using the JS parser that's part of Espruino for that and then it'd be infinitely flexible!
I just don't see this getting used apart from in this one case.
What about:
var DATA = D0;
var SCLK = D1;

var s = new SPI();
s.setup({mosi:DATA, sck:SCLK});

console.log(""Start Output"");
DATA.reset();
SCLK.reset();
s.write(0b10101010);
DATA.reset();
SCLK.set();
DATA.set();

I tested that and it would appear to output the data in exactly the form that the post above mentioned.
Not only that, but you can use the fact that digitalWrite outputs everything in LSB order (http://www.espruino.com/Reference#l__global_digitalWrite):
digitalWrite([SCLK,DATA],0b00);
s.write(0b10101010);
digitalWrite([DATA,SCLK,DATA],0b110);

You can pre-bind those as well for even more speed.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,9,https://github.com/espruino/Espruino/pull/1431#issuecomment-392505533,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"@gfwilliams I struggle to see how the SPI.write would generate the required pattern.
I tried to draw it in WaveDrom here where the CLK & MOSI are what I imagine is the spi.write(0b101), and the DIN what I think I need with respect to the CLK signal.
I am a complete newbie in this field so bare with me please.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,10,https://github.com/espruino/Espruino/pull/1431#issuecomment-392513445,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"I guess I could use solely digitalWrite([SCLK,DATA,SCLK],0b011); to send a single bit of the byte I need. But then I'd need to transform the 8bits of data into the 8 tripplets where the middle bit is the one from data 0b0.1 for the digitalWrite(). All this work would be done in JavaScript and therefore too slow.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/gfwilliams,11,https://github.com/espruino/Espruino/pull/1431#issuecomment-392523591,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"Looking at your code: https://github.com/espruino/EspruinoDocs/blob/0a349f329c566b0147377737cc54704aa61294f5/devices/TM1640.js#L24
c and d are normally high, and when you call sendCommand the waveform looks like:
d(0)
// i=0
c(0)
d(bit0)
c(1)
// i=1
c(0)
d(bit1)
c(1)
// ...
// i=7
c(0)
d(bit7)
c(1)
// loop ends
d(1)

You're actually not doing what's mentioned at that datasheet diagram at http://dangerousprototypes.com/forum/viewtopic.php?f=4&t=4450#p43661
Since you're only sending 8 rising clock edges, not 9. Maybe that's a red herring though.
But you're looking at it and thinking it does this:

Sets the state of some pins
Loops, setting clock to 0, setting data, and setting it to 1
Sets the state of some pins

But that's kind of the same as what you can do with SPI:

Sets the state of some pins
Loop, setting data, then setting clock to 0 then to 1
Sets the state of some pins

It's just a matter of what goes on in the start and end. I'm pretty sure they're saying in the link that you can't use hardware SPI because you need control of the pins for the start and end state, and that's about right - but we're using software SPI so we can do whatever we want with the pins.
Anyway, I'm pretty sure the code I posted would work - although you need order:'lsb' in s.setup since the bit order is different.
Or even if you don't want to do that, this code is 3 times faster:
var C = pins.clk.set.bind(pins.clk);
var c = pins.clk.reset.bind(pins.clk);
var D = pins.din.set.bind(pins.din);
var d = pins.din.reset.bind(pins.din);
var o = pins.din.write.bind(pins.din);

function send(x) {
  c();d(x&1);C();c();o(x&2);C();c();
  d(x&4);C();c();o(x&8);C();c();
  d(x&16);C();c();o(x&32);C();c();
  d(x&64);C();c();o(x&128);C();
}

  g.flip = function() {
    var b = g.buffer;
    for(var i=0;i<8;i++) {
      d();send(0x44);D();
      d();send(0xC0|i);
      send(b[i]);D();
      d();c();C();D();
    }
    d();send(0x88|intensity);D();
  };",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,12,https://github.com/espruino/Espruino/pull/1431#issuecomment-392579047,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"@gfwilliams Thank you for your patience with me.
I actually went and read what the SPI.write method does internally and figured this to work the way the tm1640 requires espruino/EspruinoDocs#436",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1431#issuecomment-392696684,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"No problem at all - it was interesting to have a play with it. Thanks for taking the time to make the TM1640 driver better :)
Just so you know, pins.din.set.bind(pins.din); will definitely be faster/more efficient than digitalWrite.bind(null, pins.din, 1); - maybe not much, but a little :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1431,2018-05-20T10:19:02Z,2018-05-28T17:58:29Z,2018-05-29T09:16:21Z,CLOSED,False,15,2,1,https://github.com/opichals,Add shiftOut clkPinsClk option,1,[],https://github.com/espruino/Espruino/pull/1431,https://github.com/opichals,14,https://github.com/espruino/Espruino/pull/1431#issuecomment-392709238,Allowing e.g. the tm1640.js:send() function to be replaced with a single shiftOut() call.,"pins.din.set.bind(pins.din); will definitely be faster/more efficient

Sure, will create a PR for that too. :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1447,2018-05-25T22:18:34Z,2018-05-28T17:59:14Z,2018-05-28T17:59:14Z,CLOSED,False,52,0,1,https://github.com/opichals,Add shiftOut pattern option,1,[],https://github.com/espruino/Espruino/pull/1447,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1447,"A more versatile alternative proposal to #1431. The clock/pin ordering can be programmed via the added pattern option as follows:
*0 // set clk to 0
*1 // set clk to 1
-0 // set pins[0] to val & 1
-4 // set pins[4] to val & 1

Variant examples:
// 1 bit, single data pin+clk
shiftOut(D0, { clk : A1, pattern: ""-0*0*1"" }, [1,0,1,0]);

// 4 bits, LSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-3-2-1-0*0*1""}, [1, 2, 3, 4]);

// 4 bit, MSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-0-1-2-3*0*1""}, [1, 2, 3, 4]);

// a whole byte, single data pin (like software SPI)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""-0*0*1"").join('')}, [1, 2, 3, 4]);

// 8bit, tm1640 pattern (clk,data,clk)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""*0-0*1"").join('')}, [1, 2, 3, 4]);","A more versatile alternative proposal to #1431. The clock/pin ordering can be programmed via the added pattern option as follows:
*0 // set clk to 0
*1 // set clk to 1
-0 // set pins[0] to val & 1
-4 // set pins[4] to val & 1

Variant examples:
// 1 bit, single data pin+clk
shiftOut(D0, { clk : A1, pattern: ""-0*0*1"" }, [1,0,1,0]);

// 4 bits, LSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-3-2-1-0*0*1""}, [1, 2, 3, 4]);

// 4 bit, MSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-0-1-2-3*0*1""}, [1, 2, 3, 4]);

// a whole byte, single data pin (like software SPI)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""-0*0*1"").join('')}, [1, 2, 3, 4]);

// 8bit, tm1640 pattern (clk,data,clk)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""*0-0*1"").join('')}, [1, 2, 3, 4]);",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1447,2018-05-25T22:18:34Z,2018-05-28T17:59:14Z,2018-05-28T17:59:14Z,CLOSED,False,52,0,1,https://github.com/opichals,Add shiftOut pattern option,1,[],https://github.com/espruino/Espruino/pull/1447,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1447#issuecomment-392579155,"A more versatile alternative proposal to #1431. The clock/pin ordering can be programmed via the added pattern option as follows:
*0 // set clk to 0
*1 // set clk to 1
-0 // set pins[0] to val & 1
-4 // set pins[4] to val & 1

Variant examples:
// 1 bit, single data pin+clk
shiftOut(D0, { clk : A1, pattern: ""-0*0*1"" }, [1,0,1,0]);

// 4 bits, LSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-3-2-1-0*0*1""}, [1, 2, 3, 4]);

// 4 bit, MSB via 4 data pins
shiftOut([D0, D1, D2, D3], {clk: A1, pattern: ""-0-1-2-3*0*1""}, [1, 2, 3, 4]);

// a whole byte, single data pin (like software SPI)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""-0*0*1"").join('')}, [1, 2, 3, 4]);

// 8bit, tm1640 pattern (clk,data,clk)
shiftOut(D0, {clk: A1, pattern: new Array(8).fill(""*0-0*1"").join('')}, [1, 2, 3, 4]);","No need for this, sw SPI works as suggested by @gfwilliams. espruino/EspruinoDocs#436",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1449,2018-05-27T10:19:40Z,2018-05-28T07:57:49Z,2018-05-28T07:57:49Z,MERGED,True,37,33,2,https://github.com/opichals,"Quoted RegExp character set ranges, /[\0-\0x20]/",1,[],https://github.com/espruino/Espruino/pull/1449,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1449,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1449,2018-05-27T10:19:40Z,2018-05-28T07:57:49Z,2018-05-28T07:57:49Z,MERGED,True,37,33,2,https://github.com/opichals,"Quoted RegExp character set ranges, /[\0-\0x20]/",1,[],https://github.com/espruino/Espruino/pull/1449,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1449#issuecomment-392450477,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1452,2018-05-28T17:55:49Z,2018-05-29T08:39:00Z,2018-05-29T08:39:00Z,MERGED,True,10,2,2,https://github.com/opichals,"Fix RegExp no range match, /a-c/.exec(""b"")",1,[],https://github.com/espruino/Espruino/pull/1452,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1452,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1452,2018-05-28T17:55:49Z,2018-05-29T08:39:00Z,2018-05-29T08:39:00Z,MERGED,True,10,2,2,https://github.com/opichals,"Fix RegExp no range match, /a-c/.exec(""b"")",1,[],https://github.com/espruino/Espruino/pull/1452,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1452#issuecomment-392698508,,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1453,2018-05-29T20:17:37Z,2018-05-30T08:09:01Z,2018-05-30T08:09:01Z,MERGED,True,13,0,1,https://github.com/opichals,Add E.pipe as fs.pipe alternative,1,[],https://github.com/espruino/Espruino/pull/1453,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1453,"For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432","For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1453,2018-05-29T20:17:37Z,2018-05-30T08:09:01Z,2018-05-30T08:09:01Z,MERGED,True,13,0,1,https://github.com/opichals,Add E.pipe as fs.pipe alternative,1,[],https://github.com/espruino/Espruino/pull/1453,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1453#issuecomment-393057772,"For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432",Thanks! Which boards are we talking about that don't have SAVE_ON_FLASH or filesystem? It's just the ESP8266 512k?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1453,2018-05-29T20:17:37Z,2018-05-30T08:09:01Z,2018-05-30T08:09:01Z,MERGED,True,13,0,1,https://github.com/opichals,Add E.pipe as fs.pipe alternative,1,[],https://github.com/espruino/Espruino/pull/1453,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1453#issuecomment-393058144,"For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432","Thanks! Which boards are we talking about that don't have SAVE_ON_FLASH or filesystem defined? It's just the ESP8266 512k?
It just seems a bit strange, because if you have the flash available then you'd have filesystem, but if you don't have the flash then you probably can't store anything big enough to warrant using pipe?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1453,2018-05-29T20:17:37Z,2018-05-30T08:09:01Z,2018-05-30T08:09:01Z,MERGED,True,13,0,1,https://github.com/opichals,Add E.pipe as fs.pipe alternative,1,[],https://github.com/espruino/Espruino/pull/1453,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1453#issuecomment-393065787,"For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432","For the ESP8266 (even for the 4MB flash version) the filesystem doesn't make sense because of lack of RAM, not flash. I can still store files bigger than the internal RAM and pipe them out e.g. in a web server use-case.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1453,2018-05-29T20:17:37Z,2018-05-30T08:09:01Z,2018-05-30T08:09:01Z,MERGED,True,13,0,1,https://github.com/opichals,Add E.pipe as fs.pipe alternative,1,[],https://github.com/espruino/Espruino/pull/1453,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1453#issuecomment-393070069,"For boards not having the 'fs' module it is still useful to have the built-in pipe() functionality.
They could stream for example Storage contents via #1432","Ahh, interesting - thanks.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1456,2018-06-04T10:26:08Z,2018-06-05T07:23:56Z,2018-06-05T07:23:56Z,MERGED,True,206,46,22,https://github.com/wilberforce,Ble/wifi switchable - jsvars calculated ,4,[],https://github.com/espruino/Espruino/pull/1456,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1456,We might as well merge this into master now...,We might as well merge this into master now...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1456,2018-06-04T10:26:08Z,2018-06-05T07:23:56Z,2018-06-05T07:23:56Z,MERGED,True,206,46,22,https://github.com/wilberforce,Ble/wifi switchable - jsvars calculated ,4,[],https://github.com/espruino/Espruino/pull/1456,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1456#issuecomment-394532695,We might as well merge this into master now...,"Please could you check? I don't want to merge if it's got a known buffer overflow in it :)

I had code that was saved with a normal save(). When saved with save on send in the IDE it has come up fine - so there does not appears to be an issue.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/plisiecki,1,https://github.com/espruino/Espruino/pull/1459,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/plisiecki,2,https://github.com/espruino/Espruino/pull/1459#issuecomment-395575588,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","FWIW, my hardware is Espruino WIFI.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1459#issuecomment-396167698,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","Hi, thanks! I'm really surprised about this as the code has been running for years on multiple different boards and it has always seemed to work fine.
What kind of neopixel lights are you using? WS2811/2/APA106/etc?
The issue you're encountering sounds exactly like you'd get with improper grounding or trying to run the neopixels off the 3.3v signal while powering them off 5v though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/plisiecki,4,https://github.com/espruino/Espruino/pull/1459#issuecomment-396312307,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","I am using one of Adafruit's NeoPixel Diffused 5mm Through-Hole LED which they say is either WS2812B or SK6812.
I agree this sounds exactly like a power, level, or interference issue, and I worked for several days to address those sorts of issues without significant improvement. My first circuit used TXB0104 level shifter. I noticed some overshoot on the scope, so I added tried adding 100, 235, and 470 ohm series resistors on the data line. 235 looked the cleanest. I tried twisting my ground and data lines to reduce external interference. I added the recommended 1000uF cap across the power and ground. (I have used many other types of Neopixels with many other controllers, and never had problems without the resistor and capacitor, but I know they can help, so I added them.  I have always used a level shifter, though.) There were still some small extra wiggles in the transitions, so I switched to 74AHCT125. The output now looked very clean, but the problem persisted.
The test where I was setting just a single bit at a time made it clear on the oscilloscope that something was off in the timing: as the ""1"" moved right across the bit pattern, the pulse that got wider was getting wider on the left instead of the right. I had noticed much earlier that something was wrong with the first bit since the entire waveform shifted over when the first bit changed, but initially I guessed that was a scope triggering problem or an initialization issue with the pin. In the end, the ""triggering"" issue was just that the first bit was actually starting sooner/later when the bit was 1 vs. 0, so the rest of the waveform moved right/left to compensate.
Given that this code had clearly been used many times, it took a while to believe it could be a firmware bug, and besides, I didn't want it to be a firmware bug because rebuilding and flashing firmware is a huge pain. Well, it turns out that building and flashing the firmware was quite easy (thanks!!), and this change actually fixed my problem.
My first attempt just changed the 1,3 to 8,12. The output timing looked good, but the output would stick high, so it only worked if I always set the pin low right after. My guess is that the cleanup code was shutting down SPI just a tad early. Adding the extra 32 bits of 0's fixed that issue.
As for why this has never been noticed, perhaps the timing is ""close enough"" for the majority of pixels but this one unit just happens to operate on the fast or slow end of the tolerance such that the short low between a ""0"" and a ""1"" was not getting recognized properly. I didn't try any other pixels because I had already spent a bit of time squeezing my LED inside a button.
Here is a photo of the bad timing, with an ""early"" 1 bit circled in red:",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1459#issuecomment-396946480,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","Thanks - and thanks for the detailed explanation! I'll merge it in and give it a try.
I just took a look at the nRF52 driver for neopixels and that appears to use the MSB-aligned bit patterns too, so it looks like STM32 was the odd one out.
I believe those Adafruit leds are called APA106. They light up blue when you first apply power?
It's odd because I actually have those in my kitchen - powered by an STM32F1s (the original Espruino) - some of the LED strip also comes with APA106 controllers on. Maybe something about the higher clock speed on the F411 nudged it off though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1459,2018-06-07T21:41:57Z,2018-06-13T13:56:58Z,2018-06-15T05:20:40Z,MERGED,True,3,1,1,https://github.com/plisiecki,fix STM32 neopixel timing,1,[],https://github.com/espruino/Espruino/pull/1459,https://github.com/plisiecki,6,https://github.com/espruino/Espruino/pull/1459#issuecomment-397516585,"STM32 Neopixel timing is incorrect.  The 0/1 bit values should start with a high level and end low.  The current jsspiSend4bit values ""1"" and ""3"" result in the high level at the end of the period because SPI is running in MSB-first mode.  Changing these values to ""8"" and ""12"" corrects this timing.  I also found that I needed to flush the FIFO to ensure the output didn't get stuck high.  My guess is that the cleanup code is shutting down SPI while there is still data in the FIFO.  Sending an extra 32 bits of 0 bits ensures that all useful data in the 32-bit FIFO has been drained.
Prior to this fix, my Neopixel LED was randomly producing incorrect colors, and the LED was entirely black for any color consisting of just single ""1"" in the entire bit pattern (other than the very first bit).  With this fix, I get reliable and correct colors.","They light up blue when you first apply power?

Yes, blue does seem to be their favorite power up color.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1461,2018-06-10T01:47:45Z,2018-06-15T13:07:03Z,2018-06-15T13:07:03Z,MERGED,True,12,1,1,https://github.com/wilberforce,ESP32 - web bluetooth support,2,[],https://github.com/espruino/Espruino/pull/1461,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1461,"Notified on Gitter:
@basicer  > @jumjum123 Awesome work on the BLE UART console support. I got it working with web bluetooth with a few patches.
@jumjum123 - Please review","Notified on Gitter:
@basicer  > @jumjum123 Awesome work on the BLE UART console support. I got it working with web bluetooth with a few patches.
@jumjum123 - Please review",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1461,2018-06-10T01:47:45Z,2018-06-15T13:07:03Z,2018-06-15T13:07:03Z,MERGED,True,12,1,1,https://github.com/wilberforce,ESP32 - web bluetooth support,2,[],https://github.com/espruino/Espruino/pull/1461,https://github.com/jumjum123,2,https://github.com/espruino/Espruino/pull/1461#issuecomment-396081699,"Notified on Gitter:
@basicer  > @jumjum123 Awesome work on the BLE UART console support. I got it working with web bluetooth with a few patches.
@jumjum123 - Please review","Started testing the changes.
I'm running into an endless loop of connect/disconnect from my windows 10
laptop.

Not sure, how this happens :-( Is it Windows related ?
Working on that.

2018-06-10 3:48 GMT+02:00 wilberforce <notifications@github.com>:
…
 @wilberforce <https://github.com/wilberforce> requested your review on:
 espruino/Espruino#1461 <#1461>
 web bluetooth.

 —
 You are receiving this because your review was requested.
 Reply to this email directly, view it on GitHub
 <#1461 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AB-Gnvnq3-yeEHS4vu_T9-L3n9Fat5H3ks5t7HrSgaJpZM4UhjB2>
 .",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1469,2018-06-13T13:43:08Z,2018-06-13T14:14:25Z,2018-06-13T14:14:25Z,MERGED,True,3,1,1,https://github.com/vshymanskyy,Add docs on how to get the list of built-in modules,1,[],https://github.com/espruino/Espruino/pull/1469,https://github.com/vshymanskyy,1,https://github.com/espruino/Espruino/pull/1469,Fix #1464,Fix #1464,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1469,2018-06-13T13:43:08Z,2018-06-13T14:14:25Z,2018-06-13T14:14:25Z,MERGED,True,3,1,1,https://github.com/vshymanskyy,Add docs on how to get the list of built-in modules,1,[],https://github.com/espruino/Espruino/pull/1469,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1469#issuecomment-396952642,Fix #1464,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1470,2018-06-15T13:06:00Z,2018-06-15T13:06:51Z,2018-06-15T13:06:51Z,MERGED,True,135,33,10,https://github.com/gfwilliams,"Esp32 v3.0, see #1460",7,[],https://github.com/espruino/Espruino/pull/1470,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/1470,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1471,2018-06-16T06:31:46Z,2018-06-16T09:45:46Z,2018-06-18T09:10:19Z,MERGED,True,7,0,1,https://github.com/opichals,Disable TIME_WAIT socket state for Linux,1,[],https://github.com/espruino/Espruino/pull/1471,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1471,"Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.","Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1471,2018-06-16T06:31:46Z,2018-06-16T09:45:46Z,2018-06-18T09:10:19Z,MERGED,True,7,0,1,https://github.com/opichals,Disable TIME_WAIT socket state for Linux,1,[],https://github.com/espruino/Espruino/pull/1471,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1471#issuecomment-397801177,"Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.",That's great - thanks! I always wondered why they failed when run together.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1471,2018-06-16T06:31:46Z,2018-06-16T09:45:46Z,2018-06-18T09:10:19Z,MERGED,True,7,0,1,https://github.com/opichals,Disable TIME_WAIT socket state for Linux,1,[],https://github.com/espruino/Espruino/pull/1471,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1471#issuecomment-397985502,"Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.",@wilberforce Not sure what are you after exactly. The PR added it to network_linux.c:199.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1471,2018-06-16T06:31:46Z,2018-06-16T09:45:46Z,2018-06-18T09:10:19Z,MERGED,True,7,0,1,https://github.com/opichals,Disable TIME_WAIT socket state for Linux,1,[],https://github.com/espruino/Espruino/pull/1471,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1471#issuecomment-397989773,"Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.","So #define SO_LINGER must get set in a header  as part of the linux network code.
I was expecting it to defined in the Esprunio code somewhere to turn this on.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1471,2018-06-16T06:31:46Z,2018-06-16T09:45:46Z,2018-06-18T09:10:19Z,MERGED,True,7,0,1,https://github.com/opichals,Disable TIME_WAIT socket state for Linux,1,[],https://github.com/espruino/Espruino/pull/1471,https://github.com/opichals,5,https://github.com/espruino/Espruino/pull/1471#issuecomment-397990751,"Linux sockets to set SO_LINGER sockopt to 0.
This allowes running the network tests immediately
one after another without blocking the listening port
after process exit.",@wilberforce It is a standard http://man7.org/linux/man-pages/man7/socket.7.html thing.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1472,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time","Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1472#issuecomment-398001573,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time","What issues are you hitting that need this - it's trying to receive large UDP packets? Could it not be solved by just bumping chunkSize in the networking options?
This just feels super UDP (and ESP32) specific, and a bit of overkill. All connections would have a receive buffer size stored in each one, regardless of if they are even UDP?
Could you not just have a if (bufSize>chunkSize) chunkSize=bufSize in  dgram.createsocket?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1472#issuecomment-398148865,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time","@gfwilliams Currently any board is limited to only be able to receive UDP packets of max size of chunkSize and it is due to the fact that recvfrom() simply drops the bytes that don't fit the provided buffer for UDP sockets.

Could you not just have a if (bufSize>chunkSize) chunkSize=bufSize in dgram.createsocket?

So that it would increase the netRecv() globally for all connections? I guess I could live with something as simple as that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1472#issuecomment-398170649,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time",@gfwilliams What about now? Also added a test for a message exceeding the net->chunkSize.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1472#issuecomment-398304078,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time","Thanks - that looks good. Is there a reason you do jsvGetIntegerAndUnLock(jsvObjectGetChild(options, ""recvBufferSize"", 0)) rather than using net->data.recvBufferSize in the linux/esp32 network files?
Sorry, I know it seems I'm being needlessly picky about this. Pretty much every release recently I've had to spend ages trying to find ways to reduce the build size for the Original Espruino board and some others enough to get them building. I've spent a long time trying to compact code and now I'm starting to have to pull out features for every release - so now there's this balance of trying to add features people will use while not removing other things that actually are being used.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1472#issuecomment-398308382,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time","using net->data.recvBufferSize in the linux/esp32 network files

No reason, I had the options based pattern there already so I used it. I am going to amend the PR as you suggest (it is less work and shorter compiled code).
No worries, I understand the size battle. It would be nice to put those functionality reductions to the ChangeLog explicitly for everyone to spot immediately.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/opichals,7,https://github.com/espruino/Espruino/pull/1472#issuecomment-398835167,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time",@gfwilliams adjusted the code to use net->data.recvBufferSize,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1472,2018-06-17T07:09:10Z,2018-06-21T07:54:07Z,2018-06-21T07:54:07Z,MERGED,True,121,47,6,https://github.com/opichals,Add dgram.createSocket({recvBufferSize: 1024}) option,1,[],https://github.com/espruino/Espruino/pull/1472,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1472#issuecomment-399010226,"Introduced JsNetwork->rcvBufferSize updated at socket
creation/closure time",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1473,2018-06-26T09:17:35Z,2018-06-28T11:22:40Z,2018-06-28T11:31:00Z,MERGED,True,6,5,2,https://github.com/wilberforce,"ESP32: update sdk to esp-idf 3.0.1, set Espruino build tools back to master branch",2,[],https://github.com/espruino/Espruino/pull/1473,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1473,"@opichals
This turns on the flag:
CONFIG_LWIP_SO_RCVBUF=Y
espruino/EspruinoBuildTools@0f94c99#diff-95855eaea0c4f55f2862ca738bed5fa9R353
@gfwilliams   Please merge","@opichals
This turns on the flag:
CONFIG_LWIP_SO_RCVBUF=Y
espruino/EspruinoBuildTools@0f94c99#diff-95855eaea0c4f55f2862ca738bed5fa9R353
@gfwilliams   Please merge",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1473,2018-06-26T09:17:35Z,2018-06-28T11:22:40Z,2018-06-28T11:31:00Z,MERGED,True,6,5,2,https://github.com/wilberforce,"ESP32: update sdk to esp-idf 3.0.1, set Espruino build tools back to master branch",2,[],https://github.com/espruino/Espruino/pull/1473,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1473#issuecomment-401001743,"@opichals
This turns on the flag:
CONFIG_LWIP_SO_RCVBUF=Y
espruino/EspruinoBuildTools@0f94c99#diff-95855eaea0c4f55f2862ca738bed5fa9R353
@gfwilliams   Please merge","@gfwilliams
Please can you merge?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1473,2018-06-26T09:17:35Z,2018-06-28T11:22:40Z,2018-06-28T11:31:00Z,MERGED,True,6,5,2,https://github.com/wilberforce,"ESP32: update sdk to esp-idf 3.0.1, set Espruino build tools back to master branch",2,[],https://github.com/espruino/Espruino/pull/1473,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1473#issuecomment-401004102,"@opichals
This turns on the flag:
CONFIG_LWIP_SO_RCVBUF=Y
espruino/EspruinoBuildTools@0f94c99#diff-95855eaea0c4f55f2862ca738bed5fa9R353
@gfwilliams   Please merge",Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1475,Link: https://www.sparkfun.com/products/13990,Link: https://www.sparkfun.com/products/13990,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1475#issuecomment-402218859,Link: https://www.sparkfun.com/products/13990,"Thanks, but I'm afraid I'm not merging other company's boards in to the Espruino repo at the moment unless they pay for support - after the initial commit, maintenance pretty much always falls down to me and it's been a nightmare trying to change anything in the build with over 50 different board files.
If Sparkfun themselves are interested I can produce builds, keep boards in the repo, and host documentation and links on the Espruino site for a monthly charge though.
I'll keep this open (there are some other board support PRs open at the moment too) as I'm planning to create a separate branch to stick all these in so they're still easy to get at.",True,"{'THUMBS_UP': ['https://github.com/urish', 'https://github.com/yerpj']}"
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,3,https://github.com/espruino/Espruino/pull/1475#issuecomment-402219190,Link: https://www.sparkfun.com/products/13990,"Sounds fair, let's see if they are game",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,4,https://github.com/espruino/Espruino/pull/1475#issuecomment-402219724,Link: https://www.sparkfun.com/products/13990,https://twitter.com/UriShaked/status/1014186687919017984,True,{'THUMBS_UP': ['https://github.com/gfwilliams']}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,5,https://github.com/espruino/Espruino/pull/1475#issuecomment-409596307,Link: https://www.sparkfun.com/products/13990,@ShawnHymel @jimblom,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/yerpj,6,https://github.com/espruino/Espruino/pull/1475#issuecomment-463236459,Link: https://www.sparkfun.com/products/13990,"@urish : Did you managed to compile Espruino for the SparkFun nRF52832 Breakout?
I gave it a try, but it seems that the device is discoverable only a few seconds after power up, and it is impossible to connect to it. Which Espruino revision did you compile for this Breakout board?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,7,https://github.com/espruino/Espruino/pull/1475#issuecomment-463286749,Link: https://www.sparkfun.com/products/13990,You can find the code that worked for me in the following branch: https://github.com/urish/Espruino/tree/nrf52832_sparkfun,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1475#issuecomment-481183972,Link: https://www.sparkfun.com/products/13990,I have now merged this into UNMAINTAINED_BOARDS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1475,2018-07-03T16:14:13Z,2019-04-09T09:52:33Z,2019-04-09T09:59:02Z,CLOSED,False,137,0,2,https://github.com/urish,Add Sparkfun nRF52832 breakout board,1,[],https://github.com/espruino/Espruino/pull/1475,https://github.com/urish,9,https://github.com/espruino/Espruino/pull/1475#issuecomment-481186073,Link: https://www.sparkfun.com/products/13990,Thanks Gordon!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1493,2018-08-29T09:10:55Z,2018-08-31T08:24:09Z,2018-08-31T08:53:54Z,MERGED,True,3,1,1,https://github.com/wilberforce,"ESP32: update buildtools sdk 3.03, set CONFIG_ESP32_XTAL_FREQ_AUTO",4,[],https://github.com/espruino/Espruino/pull/1493,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1493,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1493,2018-08-29T09:10:55Z,2018-08-31T08:24:09Z,2018-08-31T08:53:54Z,MERGED,True,3,1,1,https://github.com/wilberforce,"ESP32: update buildtools sdk 3.03, set CONFIG_ESP32_XTAL_FREQ_AUTO",4,[],https://github.com/espruino/Espruino/pull/1493,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1493#issuecomment-416917175,,Haven't had a chance to see why this failed. Might have to revert the change to build tools.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1493,2018-08-29T09:10:55Z,2018-08-31T08:24:09Z,2018-08-31T08:53:54Z,MERGED,True,3,1,1,https://github.com/wilberforce,"ESP32: update buildtools sdk 3.03, set CONFIG_ESP32_XTAL_FREQ_AUTO",4,[],https://github.com/espruino/Espruino/pull/1493,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1493#issuecomment-416940651,,Seems it isn't finding the libraries now?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1493,2018-08-29T09:10:55Z,2018-08-31T08:24:09Z,2018-08-31T08:53:54Z,MERGED,True,3,1,1,https://github.com/wilberforce,"ESP32: update buildtools sdk 3.03, set CONFIG_ESP32_XTAL_FREQ_AUTO",4,[],https://github.com/espruino/Espruino/pull/1493,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1493#issuecomment-417529723,,"@gfwilliams
Got this building now - - sorry there is a Changelog conflict to sort out as you have added since I've created this.
Please merge",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1501,2018-09-07T04:51:44Z,2018-09-07T07:40:57Z,2018-09-09T21:09:33Z,MERGED,True,2,2,1,https://github.com/MaBecker,fix typos,1,[],https://github.com/espruino/Espruino/pull/1501,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1501,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1502,2018-09-07T05:15:24Z,2018-09-07T07:44:14Z,2018-09-09T21:09:14Z,MERGED,True,10,5,1,https://github.com/MaBecker,updates for A0,1,[],https://github.com/espruino/Espruino/pull/1502,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1502,"fix typos
add analog pin for jshPinAnalogFast and jshPinGetValue","fix typos
add analog pin for jshPinAnalogFast and jshPinGetValue",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1504,2018-09-10T19:22:43Z,2018-09-12T07:33:58Z,2018-09-16T15:41:07Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix warning: signed and unsigned type in conditional expression,1,[],https://github.com/espruino/Espruino/pull/1504,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1504,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1504,2018-09-10T19:22:43Z,2018-09-12T07:33:58Z,2018-09-16T15:41:07Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix warning: signed and unsigned type in conditional expression,1,[],https://github.com/espruino/Espruino/pull/1504,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1504#issuecomment-420030832,,"src/jsparse.c:510:63: warning: signed and unsigned type in conditional expression [-Wsign-compare]
           unsigned int newArgPtrSize =  (argPtrSize?argPtrSize:argCount)*4;
                                                               ^",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1504,2018-09-10T19:22:43Z,2018-09-12T07:33:58Z,2018-09-16T15:41:07Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix warning: signed and unsigned type in conditional expression,1,[],https://github.com/espruino/Espruino/pull/1504,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1504#issuecomment-420543731,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1505,2018-09-10T19:25:14Z,2018-09-12T07:34:47Z,2018-09-16T15:41:05Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix warning: array subscript is above array bounds,1,[],https://github.com/espruino/Espruino/pull/1505,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1505,"src/jsdevices.c:93:27: warning: array subscript is above array bounds [-Warray-bounds]
     jshSerialDeviceCTSPins[i] = PIN_UNDEFINED;
                            ^","src/jsdevices.c:93:27: warning: array subscript is above array bounds [-Warray-bounds]
     jshSerialDeviceCTSPins[i] = PIN_UNDEFINED;
                            ^",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1505,2018-09-10T19:25:14Z,2018-09-12T07:34:47Z,2018-09-16T15:41:05Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix warning: array subscript is above array bounds,1,[],https://github.com/espruino/Espruino/pull/1505,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1505#issuecomment-420543958,"src/jsdevices.c:93:27: warning: array subscript is above array bounds [-Warray-bounds]
     jshSerialDeviceCTSPins[i] = PIN_UNDEFINED;
                            ^",Good spot!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1519,2018-10-05T02:20:42Z,2018-10-05T08:14:04Z,2018-10-05T08:14:04Z,MERGED,True,9,5,3,https://github.com/rmd6502,Add ability to customize number of bits for software SPI,3,[],https://github.com/espruino/Espruino/pull/1519,https://github.com/rmd6502,1,https://github.com/espruino/Espruino/pull/1519,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1519,2018-10-05T02:20:42Z,2018-10-05T08:14:04Z,2018-10-05T08:14:04Z,MERGED,True,9,5,3,https://github.com/rmd6502,Add ability to customize number of bits for software SPI,3,[],https://github.com/espruino/Espruino/pull/1519,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1519#issuecomment-427282996,,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1520,2018-10-08T01:51:04Z,2018-10-09T09:13:03Z,2018-11-13T16:45:14Z,MERGED,True,9,0,1,https://github.com/stephaneAG,UI adjustement for overlay legends on board view,1,[],https://github.com/espruino/Espruino/pull/1520,https://github.com/stephaneAG,1,https://github.com/espruino/Espruino/pull/1520,"Prevents overlapping of legends for boards that have many functions on the same pins.
This fix allows the viewer to hover parts he wishes to see:

not hovering: dispay everything
hovering #board: display board without overlays
hovering a pin row: overlay only the legends corresponding to that row of pins","Prevents overlapping of legends for boards that have many functions on the same pins.
This fix allows the viewer to hover parts he wishes to see:

not hovering: dispay everything
hovering #board: display board without overlays
hovering a pin row: overlay only the legends corresponding to that row of pins",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1520,2018-10-08T01:51:04Z,2018-10-09T09:13:03Z,2018-11-13T16:45:14Z,MERGED,True,9,0,1,https://github.com/stephaneAG,UI adjustement for overlay legends on board view,1,[],https://github.com/espruino/Espruino/pull/1520,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1520#issuecomment-428119723,"Prevents overlapping of legends for boards that have many functions on the same pins.
This fix allows the viewer to hover parts he wishes to see:

not hovering: dispay everything
hovering #board: display board without overlays
hovering a pin row: overlay only the legends corresponding to that row of pins",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1520,2018-10-08T01:51:04Z,2018-10-09T09:13:03Z,2018-11-13T16:45:14Z,MERGED,True,9,0,1,https://github.com/stephaneAG,UI adjustement for overlay legends on board view,1,[],https://github.com/espruino/Espruino/pull/1520,https://github.com/stephaneAG,3,https://github.com/espruino/Espruino/pull/1520#issuecomment-438293373,"Prevents overlapping of legends for boards that have many functions on the same pins.
This fix allows the viewer to hover parts he wishes to see:

not hovering: dispay everything
hovering #board: display board without overlays
hovering a pin row: overlay only the legends corresponding to that row of pins","my pleasure ;)
nb: I'm currently re-digging the stm32f4discovery pinouts & it seems the merged version isn't updated on Espruino.com/Reference.. wonder why ? ..
cheers ++",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1520,2018-10-08T01:51:04Z,2018-10-09T09:13:03Z,2018-11-13T16:45:14Z,MERGED,True,9,0,1,https://github.com/stephaneAG,UI adjustement for overlay legends on board view,1,[],https://github.com/espruino/Espruino/pull/1520,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1520#issuecomment-438343520,"Prevents overlapping of legends for boards that have many functions on the same pins.
This fix allows the viewer to hover parts he wishes to see:

not hovering: dispay everything
hovering #board: display board without overlays
hovering a pin row: overlay only the legends corresponding to that row of pins","Ahh, I just looked into this. Very few people were using the STM32F3DISCOVERY port so I took it out of the distribution zip for 2.00 since it takes me time to maintain and I don't think it's very stable, but that means that the board docs don't get built for it automatically any more.
I've just tweaked the scripts so the docs for the F3 do get rebuilt, even though it's not in the distribution zip.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1521,2018-10-12T20:49:08Z,2018-10-15T07:19:47Z,2018-10-15T14:58:10Z,MERGED,True,1,1,1,https://github.com/MaBecker,remove  SHA256 SHA512 (fix #1517),1,[],https://github.com/espruino/Espruino/pull/1521,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1521,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1521,2018-10-12T20:49:08Z,2018-10-15T07:19:47Z,2018-10-15T14:58:10Z,MERGED,True,1,1,1,https://github.com/MaBecker,remove  SHA256 SHA512 (fix #1517),1,[],https://github.com/espruino/Espruino/pull/1521,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1521#issuecomment-429887850,,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1522,2018-10-12T20:54:22Z,2018-10-15T07:20:24Z,2018-10-15T14:59:00Z,MERGED,True,4,0,1,https://github.com/MaBecker,release heap used by logDebug(true) (fix #1508),1,[],https://github.com/espruino/Espruino/pull/1522,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1522,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1522,2018-10-12T20:54:22Z,2018-10-15T07:20:24Z,2018-10-15T14:59:00Z,MERGED,True,4,0,1,https://github.com/MaBecker,release heap used by logDebug(true) (fix #1508),1,[],https://github.com/espruino/Espruino/pull/1522,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1522#issuecomment-429888225,,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1523,2018-10-12T21:02:13Z,2018-10-15T07:20:35Z,2018-10-15T14:55:48Z,MERGED,True,2,0,1,https://github.com/MaBecker,add ESP8266 fixes,1,[],https://github.com/espruino/Espruino/pull/1523,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1523,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1523,2018-10-12T21:02:13Z,2018-10-15T07:20:35Z,2018-10-15T14:55:48Z,MERGED,True,2,0,1,https://github.com/MaBecker,add ESP8266 fixes,1,[],https://github.com/espruino/Espruino/pull/1523,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1523#issuecomment-429886759,,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1526,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,2,https://github.com/espruino/Espruino/pull/1526#issuecomment-429999761,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,This solves the reported http://forum.espruino.com/comments/14458993/ and the a109654 changes in a nicer way.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1526#issuecomment-430014526,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,"wow, does this fix also the old socket problem?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1526#issuecomment-430021987,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,It appears so. The --test-all works properly. At least on MacOS for me here.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/wilberforce,5,https://github.com/espruino/Espruino/pull/1526#issuecomment-430023511,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,"Sorry - I'm missing something - where has SO_REUSEADDR been added to the code?
I see there is a new options parameter - do you need to set somehow with this?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1526#issuecomment-430035635,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,It is present in the linux as well as in the esp32 network driver. This change only makes sure it is actually used for net and http servers (by setting the reuseAddr option). See https://github.com/espruino/Espruino/search?q=SO_REUSEADDR,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1526#issuecomment-430077663,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,What about ESP8266?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,8,https://github.com/espruino/Espruino/pull/1526#issuecomment-430121532,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,ESP8266 doesn't have that option in its sdk I think.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1526,2018-10-15T20:20:00Z,2018-10-16T06:52:02Z,2018-10-16T06:52:02Z,CLOSED,False,15,16,5,https://github.com/opichals,All server net.Socket are set to SO_REUSEADDR,1,[],https://github.com/espruino/Espruino/pull/1526,https://github.com/opichals,9,https://github.com/espruino/Espruino/pull/1526#issuecomment-430121646,Same as in node.js https://nodejs.org/api/net.html#net_server_listen,Closing this in favor #1527 with minimal changes.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1527,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1527#issuecomment-430123980,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","Thanks - and we're sure that this doesn't break HTTP/TCP/UDP servers?
Last time --test-all worked but it seems that running any TCP server on its own was broken.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/1527#issuecomment-430130213,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","Sounds like Espruino is missing end-to-end tests like at least Node.js <->
Espruino for the networking stuff.

I think SO_REUSEADDR was there without the reuseAddr option in the past and
I removed the SO_LINGER so this should do no harm (tm).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1527#issuecomment-430132477,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","I believe there are some tests in --test-all, but yeah - they just use Espruino, and a single instance at that.
So you're saying you haven't tested this? Having just spent yesterday tracking down a bug from another of your commits that wasn't tested, I'm not about to merge this one unless I know server/etc still works on Linux and ESP32.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/opichals,5,https://github.com/espruino/Espruino/pull/1527#issuecomment-430137629,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","I am using espruino on MacOS and there I saw no problems even with the SO_LINGER in there. So for MacOS I tested it being able to run a web server and able to do websocket as well.
With no automatic PR tests this anxiety will get worse the bigger community there is...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1527#issuecomment-430198866,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","Ok, looks promising on Linux. No idea about ESP32 though. Did you test that?
I do have some plans for testing each commit on actual hardware, but finding time to implement that is difficult and I think it would be amazingly bad for Espruino if people just committed stuff without testing and used the test harness as a way to see if it was ok.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1527,2018-10-16T06:49:59Z,2018-10-16T11:11:35Z,2018-10-16T13:28:07Z,MERGED,True,4,14,2,https://github.com/opichals,net.Server to set SO_REUSEADDR by default,1,[],https://github.com/espruino/Espruino/pull/1527,https://github.com/opichals,7,https://github.com/espruino/Espruino/pull/1527#issuecomment-430237154,"Same as in node.js https://nodejs.org/api/net.html#net_server_listen
i.e. non-UDP servers","I went for consistency of the server.listen() call to set the reuseAddr for non-UDP servers. The fact is that I haven't tested it physically on ESP32.

if people just committed stuff without testing and used the test harness as a way to see if it was ok

I would not worry about it too much till there is such a thing. I'd say HW testlab utilization could be controlled by you in the PR by say adding a tag or something.
For the rest of the things travis is cool IMO.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1528,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1528#issuecomment-430370456,,"Ups, travis build  failed for ESP8266 ... looks like as not taking the new SDK version",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1528#issuecomment-430377005,,"Here is your error:
https://travis-ci.org/espruino/Espruino/jobs/442342442#L491",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1528#issuecomment-430389145,,"Wow - Yes I can see that error too, but that make no sense ...
https://github.com/espruino/Espruino/blob/master/libs/network/esp8266/network_esp8266.c#L401-L424
scanning for pvPortFree finds only one position on my side
/Volumes/Espruino/repos/Espruino/targets/esp8266/espmissingincludes.h:
   59  
   60  void *vPortMalloc(size_t xWantedSize);
   61: void  pvPortFree(void *ptr);
   62  
   63  uint32 system_get_time();",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1528#issuecomment-430390884,,"switched to Raw Log and found the reason:
travis_fold:start:before_script.1
�[0Ktravis_time:start:0ef8fe21
�[0K$ source ./scripts/provision.sh $BOARD
ESP8266
ESP8266_NONOS_SDK-2.2.1
xz: (stdin): File format not recognized
tar: Child died with signal 13
tar: Error is not recoverable: exiting now
curl: (23) Failed writing body (0 != 2759)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1528#issuecomment-430394121,,"in a linux shell this fails:
curl -Ls https://github.com/espruino/EspruinoBuildTools/raw/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tgz| tar Jxf - --no-same-owner                 
xz: (stdin): File format not recognized      
                                                                                                                       
tar: Child died with signal 13             
                                                                                                                        
tar: Error is not recoverable: exiting now           

a .tgz  is a gzipped tar file - how did you make the file?
Is it compressed?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1528#issuecomment-430394554,,tar -cvzf ESP8266_NONOS_SDK-2.2.1.tgz ESP8266_NONOS_SDK-2.2.1,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,8,https://github.com/espruino/Espruino/pull/1528#issuecomment-430395768,,"curl -Ls https://github.com/espruino/EspruinoBuildTools/raw/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tgz| tar Jxf - --no-same-owner
works fine on Mac OS X",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/1528#issuecomment-430397641,,"@wilberforce can you handle the new uploaded file called ESP8266_NONOS_SDK-2.2.1.tar.gz ?
curl -Ls https://github.com/espruino/EspruinoBuildTools/raw/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tar.gz| tar Jxf - --no-same-owner",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,10,https://github.com/espruino/Espruino/pull/1528#issuecomment-430399604,,"sorry typo, must be tar Jxf correct the last comment",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/wilberforce,11,https://github.com/espruino/Espruino/pull/1528#issuecomment-430399842,,"curl -Ls https://github.com/espruino/EspruinoBuildTools/raw/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tar.gz| tar Jzf - --no-same-owner

tar: Conflicting compression options

Try 'tar --help' or 'tar --usage' for more information.


Are you running tar and then gz ? I think you need to use tar to build the compressed file",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/wilberforce,12,https://github.com/espruino/Espruino/pull/1528#issuecomment-430400628,,"That still fails.
This is how I make it for ESP32:
tar cfz ../../deploy/esp-idf.tgz  `find ../esp-idf/components/ -name *.h` \
		`find ../esp-idf/components/ -name *.a` \
		`find ../esp-idf/components/ -name *.ld` \
		`find ../esp-idf/components/esptool_py/esptool/esptool.py`",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,13,https://github.com/espruino/Espruino/pull/1528#issuecomment-430401003,,"used two steps
tar -cvf ESP8266_NONOS_SDK-2.2.1.tar ESP8266_NONOS_SDK-2.2.1
gzip ESP8266_NONOS_SDK-2.2.1.tar
what creates
ESP8266_NONOS_SDK-2.2.1.tar.gz",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/wilberforce,14,https://github.com/espruino/Espruino/pull/1528#issuecomment-430401431,,"This works:
curl -Ls https://github.com/espruino/EspruinoBuildTools/raw/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tar.gz| tar xfz - --no-same-owner",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,15,https://github.com/espruino/Espruino/pull/1528#issuecomment-430405135,,Thanks for your support and good night,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/gfwilliams,16,https://github.com/espruino/Espruino/pull/1528#issuecomment-430532320,,So do we think this is good to merge in now? It'll be nice to stop thrashing @tve's S3 account too :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,17,https://github.com/espruino/Espruino/pull/1528#issuecomment-430571617,,"Good point, will move GCC to github too",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,18,https://github.com/espruino/Espruino/pull/1528#issuecomment-430734259,,I would say lets merge ;-),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1528,2018-10-16T19:26:50Z,2018-10-18T07:27:48Z,2018-10-23T16:43:22Z,MERGED,True,89,65,6,https://github.com/MaBecker,ESP8266: switch to SDK 2.2.1 (fix #1207),5,[],https://github.com/espruino/Espruino/pull/1528,https://github.com/MaBecker,19,https://github.com/espruino/Espruino/pull/1528#issuecomment-430999095,,Thank @gfwilliams,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1531,2018-10-19T18:00:46Z,2018-10-22T09:50:23Z,2018-10-22T09:50:23Z,CLOSED,False,914,31,8,https://github.com/beanjs,remove getBuildHash and add mqtt library,3,[],https://github.com/espruino/Espruino/pull/1531,https://github.com/beanjs,1,https://github.com/espruino/Espruino/pull/1531,remove getBuildHash and add mqtt library,remove getBuildHash and add mqtt library,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1531,2018-10-19T18:00:46Z,2018-10-22T09:50:23Z,2018-10-22T09:50:23Z,CLOSED,False,914,31,8,https://github.com/beanjs,remove getBuildHash and add mqtt library,3,[],https://github.com/espruino/Espruino/pull/1531,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1531#issuecomment-431565355,remove getBuildHash and add mqtt library,"Thanks for this - but just wondering:

Why was getBuildHash removed? It was added for a good reason - any code saved with 'save()' in an older version of Espruino won't work
Why do you want to build mqtt in? What is wrong with the JS version of it that can't be fixed by changing the JS? Many Espruino boards just dont have the available flash to have this built in all the time.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1531,2018-10-19T18:00:46Z,2018-10-22T09:50:23Z,2018-10-22T09:50:23Z,CLOSED,False,914,31,8,https://github.com/beanjs,remove getBuildHash and add mqtt library,3,[],https://github.com/espruino/Espruino/pull/1531,https://github.com/beanjs,3,https://github.com/espruino/Espruino/pull/1531#issuecomment-431565770,remove getBuildHash and add mqtt library,The old version of the code can't run because the native function reference has an error. So just modify the pointer to the native function to solve the problem! 2. Create native mqtt because it will consume less variable,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1531,2018-10-19T18:00:46Z,2018-10-22T09:50:23Z,2018-10-22T09:50:23Z,CLOSED,False,914,31,8,https://github.com/beanjs,remove getBuildHash and add mqtt library,3,[],https://github.com/espruino/Espruino/pull/1531,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1531#issuecomment-431762740,remove getBuildHash and add mqtt library,"If the JS code does something like a=print; setInterval('print(""Hello"")',100) then your changes will just make the board crash as soon as it loads the code. I don't think that's an improvement.
I can see you might want to add a parameter to load() to force it to load saved code from an older version, but just making the board load by default is a bad idea.
Sorry, but I'm not willing to merge this - you could just add JSMODULESOURCES += libs/js/mqtt.min.js to the BUILD.py file and include the JS which will instantly save loads of variables. Even if your library would fit on all the Espruino boards (which it won't at the moment), it appears to have at least one memory leak when saving, the API is subtly different to the existing MQTT library, and the code doesn't appear to be able to cope with MQTT commands that are spread across multiple network packets, which the JS version does - it would just end up being a complete pain to maintain.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1533,2018-10-20T04:24:24Z,2018-11-12T10:35:03Z,2018-11-12T10:35:03Z,MERGED,True,741,73,11,https://github.com/wilberforce,Esp32 v3.1,16,[],https://github.com/espruino/Espruino/pull/1533,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1533,"Not ready for merge!
Testing the travis build","Not ready for merge!
Testing the travis build",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1533,2018-10-20T04:24:24Z,2018-11-12T10:35:03Z,2018-11-12T10:35:03Z,MERGED,True,741,73,11,https://github.com/wilberforce,Esp32 v3.1,16,[],https://github.com/espruino/Espruino/pull/1533,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1533#issuecomment-437826736,"Not ready for merge!
Testing the travis build","@gfwilliams
Please merge and then I'll update the build tools to this ESP-idf release and then update to reference that master.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1536,2018-10-22T21:42:37Z,2018-10-23T07:58:06Z,2018-10-23T16:43:22Z,MERGED,True,75,35,2,https://github.com/MaBecker,implement Esp8266 hw timer (fix #1511),5,[],https://github.com/espruino/Espruino/pull/1536,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1536,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1536,2018-10-22T21:42:37Z,2018-10-23T07:58:06Z,2018-10-23T16:43:22Z,MERGED,True,75,35,2,https://github.com/MaBecker,implement Esp8266 hw timer (fix #1511),5,[],https://github.com/espruino/Espruino/pull/1536,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1536#issuecomment-432137076,,"Thanks! You want to stick a ChangeLog line in, or shall I?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1536,2018-10-22T21:42:37Z,2018-10-23T07:58:06Z,2018-10-23T16:43:22Z,MERGED,True,75,35,2,https://github.com/MaBecker,implement Esp8266 hw timer (fix #1511),5,[],https://github.com/espruino/Espruino/pull/1536,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1536#issuecomment-432137862,,Just saw your comments in #1511,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1537,2018-10-23T17:12:23Z,2018-10-24T07:41:02Z,2018-10-25T17:08:36Z,MERGED,True,1,0,1,https://github.com/MaBecker,add ESP8266: implement hw_timer,1,[],https://github.com/espruino/Espruino/pull/1537,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1537,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1541,2018-10-25T14:54:26Z,2018-10-25T15:29:47Z,2018-10-25T15:29:47Z,MERGED,True,1,1,1,https://github.com/jbgagnon,update micro-seconds when updating time,3,[],https://github.com/espruino/Espruino/pull/1541,https://github.com/jbgagnon,1,https://github.com/espruino/Espruino/pull/1541,"(first pull request: not sure what i am doing)
only 1 commit must be taken
targets/esp32/jshardware.c","(first pull request: not sure what i am doing)
only 1 commit must be taken
targets/esp32/jshardware.c",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1541,2018-10-25T14:54:26Z,2018-10-25T15:29:47Z,2018-10-25T15:29:47Z,MERGED,True,1,1,1,https://github.com/jbgagnon,update micro-seconds when updating time,3,[],https://github.com/espruino/Espruino/pull/1541,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1541#issuecomment-433097125,"(first pull request: not sure what i am doing)
only 1 commit must be taken
targets/esp32/jshardware.c",Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1542,2018-10-25T17:08:18Z,2018-10-26T08:31:35Z,2018-10-26T15:17:44Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix types lacks a cast,1,[],https://github.com/espruino/Espruino/pull/1542,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1542,warning: comparison of distinct pointer types lacks a cast [enabled by default],warning: comparison of distinct pointer types lacks a cast [enabled by default],True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1542,2018-10-25T17:08:18Z,2018-10-26T08:31:35Z,2018-10-26T15:17:44Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix types lacks a cast,1,[],https://github.com/espruino/Espruino/pull/1542,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1542#issuecomment-433330954,warning: comparison of distinct pointer types lacks a cast [enabled by default],Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1543,2018-10-26T13:12:29Z,2018-11-13T12:23:41Z,2018-11-13T12:23:41Z,CLOSED,False,14,5,1,https://github.com/Fxlr8,Dockerfile that just works,1,[],https://github.com/espruino/Espruino/pull/1543,https://github.com/Fxlr8,1,https://github.com/espruino/Espruino/pull/1543,"Hi, I updated your Dockerfile to make it work. It is far from perfect right now, but it works.
Here are some ways to improve it:

Transfer all logic from provision.sh so all the dependencies are handled by docker. This will let docker's cache work and speed up the container build
Mount source code and result folders to the container, so you don't need to rebuild it every time you change the code. Also you will not need to copy the results from the container every time.
Pass the board name as an env variable to the container.","Hi, I updated your Dockerfile to make it work. It is far from perfect right now, but it works.
Here are some ways to improve it:

Transfer all logic from provision.sh so all the dependencies are handled by docker. This will let docker's cache work and speed up the container build
Mount source code and result folders to the container, so you don't need to rebuild it every time you change the code. Also you will not need to copy the results from the container every time.
Pass the board name as an env variable to the container.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1543,2018-10-26T13:12:29Z,2018-11-13T12:23:41Z,2018-11-13T12:23:41Z,CLOSED,False,14,5,1,https://github.com/Fxlr8,Dockerfile that just works,1,[],https://github.com/espruino/Espruino/pull/1543,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1543#issuecomment-433409151,"Hi, I updated your Dockerfile to make it work. It is far from perfect right now, but it works.
Here are some ways to improve it:

Transfer all logic from provision.sh so all the dependencies are handled by docker. This will let docker's cache work and speed up the container build
Mount source code and result folders to the container, so you don't need to rebuild it every time you change the code. Also you will not need to copy the results from the container every time.
Pass the board name as an env variable to the container.","Thanks - but does FROM python:3 really pull in everything you need? How does it know to pull in a version of Linux for the build?
Nice ideas for improving it - although I'm totally against pulling in provision.sh just for a bit of speed. Very few people seem to have bothered maintaining the Docker file thus far - so if we did move the code there's no way it'd stay working past a few weeks :(
Since we used ENV BOARD, can the rest of the commands be made to use $BOARD?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1543,2018-10-26T13:12:29Z,2018-11-13T12:23:41Z,2018-11-13T12:23:41Z,CLOSED,False,14,5,1,https://github.com/Fxlr8,Dockerfile that just works,1,[],https://github.com/espruino/Espruino/pull/1543,https://github.com/Fxlr8,3,https://github.com/espruino/Espruino/pull/1543#issuecomment-433420418,"Hi, I updated your Dockerfile to make it work. It is far from perfect right now, but it works.
Here are some ways to improve it:

Transfer all logic from provision.sh so all the dependencies are handled by docker. This will let docker's cache work and speed up the container build
Mount source code and result folders to the container, so you don't need to rebuild it every time you change the code. Also you will not need to copy the results from the container every time.
Pass the board name as an env variable to the container.","When I first tried to run your Dockerfile the first error I got was python not found So I switched FROM from vanilla Ubuntu to python:3. I don't know which version of Linux it is using, but if you need a specific one you can choose from a bunch of tags here https://hub.docker.com/_/python/
Because provision.sh script is making installations depending on board type, we have to rebuild the whole container image every time we need a build for another board. My idea was to minimize docker builds. Can we install all dependencies for every board type without conflicts? If so, then we can build one container and re-use it for every board by changing ENV BOARD. This will save you a lot of time. ENV BOARD will be available for every script that is running inside a container.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1543,2018-10-26T13:12:29Z,2018-11-13T12:23:41Z,2018-11-13T12:23:41Z,CLOSED,False,14,5,1,https://github.com/Fxlr8,Dockerfile that just works,1,[],https://github.com/espruino/Espruino/pull/1543,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1543#issuecomment-433603594,"Hi, I updated your Dockerfile to make it work. It is far from perfect right now, but it works.
Here are some ways to improve it:

Transfer all logic from provision.sh so all the dependencies are handled by docker. This will let docker's cache work and speed up the container build
Mount source code and result folders to the container, so you don't need to rebuild it every time you change the code. Also you will not need to copy the results from the container every time.
Pass the board name as an env variable to the container.","Ahh, interesting - it looks from Shared Tags like python:3 may actually use different OS images on some platforms? I guess we'd have to use 3-stretch.
Very odd about Ubuntu images though - pretty sure Ubuntu always comes with Python by default (it did when the Docker file was made by the look of it), but maybe they've changed it now and stripped it right back for Docker.
You can't get provision.sh to install everything right now, but yeah, it'd be nice to allow provision.sh ALL - and not too painful to do inside provision.sh. Nothing should conflict - however it would make it quite a bit slower to set up the image. We could just run ./provision several times for the ESP8266/32 and ARM - but it's not great for maintainability :)
Ideally people would just be able to point Docker at github without ever having to clone the Repo to change the Docker file -  if it enabled that then it'd be well worth it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1548,2018-11-03T14:55:22Z,2018-11-12T04:56:52Z,2018-11-12T05:05:03Z,CLOSED,False,80,74,3,https://github.com/MaBecker,ESP8266 cleanup,3,"['optimisation', 'ESP8266']",https://github.com/espruino/Espruino/pull/1548,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1548,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1548,2018-11-03T14:55:22Z,2018-11-12T04:56:52Z,2018-11-12T05:05:03Z,CLOSED,False,80,74,3,https://github.com/MaBecker,ESP8266 cleanup,3,"['optimisation', 'ESP8266']",https://github.com/espruino/Espruino/pull/1548,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1548#issuecomment-437756471,,close because it contains progress work,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1550,2018-11-12T05:10:40Z,2018-11-12T08:49:21Z,2018-11-12T08:58:35Z,MERGED,True,1,1,1,https://github.com/MaBecker,ESP8266 deepSleep invalid microseconds (fix #1547),1,[],https://github.com/espruino/Espruino/pull/1550,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1550,will update ChangeLog later,will update ChangeLog later,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1550,2018-11-12T05:10:40Z,2018-11-12T08:49:21Z,2018-11-12T08:58:35Z,MERGED,True,1,1,1,https://github.com/MaBecker,ESP8266 deepSleep invalid microseconds (fix #1547),1,[],https://github.com/espruino/Espruino/pull/1550,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1550#issuecomment-437801364,will update ChangeLog later,Thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1552,2018-11-12T05:16:37Z,2018-11-12T08:50:31Z,2018-11-12T08:58:37Z,MERGED,True,1,1,1,https://github.com/MaBecker,ESP_FLASH_MAX for ESP8266_4MB is wrong  (fix 1551),1,[],https://github.com/espruino/Espruino/pull/1552,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1552,"in boards/ESP8266_4MB.py
will update ChangeLog later","in boards/ESP8266_4MB.py
will update ChangeLog later",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1554,2018-11-12T05:23:18Z,2018-11-12T08:50:24Z,2018-11-12T08:58:40Z,MERGED,True,1,1,1,https://github.com/MaBecker,ESP_FLASH_MAX for ESP8266_4MB is wrong (fix #1553),1,[],https://github.com/espruino/Espruino/pull/1554,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1554,in make/family/ESP8266.make,in make/family/ESP8266.make,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1556,2018-11-12T05:59:03Z,2018-11-12T08:49:55Z,2018-11-12T08:57:52Z,MERGED,True,1,1,1,https://github.com/MaBecker,src/jsparse.c:1872:32: warning: initialization... (fix #1555),1,[],https://github.com/espruino/Espruino/pull/1556,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1556,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1558,2018-11-12T11:41:19Z,2018-11-12T11:49:40Z,2018-11-12T12:00:44Z,MERGED,True,3,1,1,https://github.com/MaBecker,"add ESP8266 fix #1547, #1551, #1553",1,[],https://github.com/espruino/Espruino/pull/1558,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1558,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1558,2018-11-12T11:41:19Z,2018-11-12T11:49:40Z,2018-11-12T12:00:44Z,MERGED,True,3,1,1,https://github.com/MaBecker,"add ESP8266 fix #1547, #1551, #1553",1,[],https://github.com/espruino/Espruino/pull/1558,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1558#issuecomment-437853111,,Thanks for your time merging that ESP8266 stuff.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1558,2018-11-12T11:41:19Z,2018-11-12T11:49:40Z,2018-11-12T12:00:44Z,MERGED,True,3,1,1,https://github.com/MaBecker,"add ESP8266 fix #1547, #1551, #1553",1,[],https://github.com/espruino/Espruino/pull/1558,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1558#issuecomment-437854518,,No problem - nice to see lots of small things like that get ticked off :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1560,2018-11-13T07:15:55Z,2018-11-13T08:39:35Z,2018-11-13T08:39:35Z,MERGED,True,4,4,1,https://github.com/wilberforce,Update to ESP32 build tools master,1,[],https://github.com/espruino/Espruino/pull/1560,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1560,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1560,2018-11-13T07:15:55Z,2018-11-13T08:39:35Z,2018-11-13T08:39:35Z,MERGED,True,4,4,1,https://github.com/wilberforce,Update to ESP32 build tools master,1,[],https://github.com/espruino/Espruino/pull/1560,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1560#issuecomment-438165873,,"@gfwilliams
please merge! Thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1560,2018-11-13T07:15:55Z,2018-11-13T08:39:35Z,2018-11-13T08:39:35Z,MERGED,True,4,4,1,https://github.com/wilberforce,Update to ESP32 build tools master,1,[],https://github.com/espruino/Espruino/pull/1560,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1560#issuecomment-438181821,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1561,2018-11-14T05:34:28Z,2018-11-14T08:02:55Z,2018-11-19T01:13:39Z,MERGED,True,1,1,1,https://github.com/hellprototypes,fix error String.length value for native string,1,[],https://github.com/espruino/Espruino/pull/1561,https://github.com/hellprototypes,1,https://github.com/espruino/Espruino/pull/1561,"If a native string size greater than 65535B, the String.length was wrong.","If a native string size greater than 65535B, the String.length was wrong.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1561,2018-11-14T05:34:28Z,2018-11-14T08:02:55Z,2018-11-19T01:13:39Z,MERGED,True,1,1,1,https://github.com/hellprototypes,fix error String.length value for native string,1,[],https://github.com/espruino/Espruino/pull/1561,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1561#issuecomment-438572238,"If a native string size greater than 65535B, the String.length was wrong.",Thanks. Looks like this may cause warnings on some builds (with less than 1024 vars) but that's not such a big deal.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1564,2018-11-14T22:02:23Z,2018-11-15T08:33:38Z,2018-11-15T15:18:07Z,MERGED,True,1,1,1,https://github.com/MaBecker,add ET_FM,1,[],https://github.com/espruino/Espruino/pull/1564,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1564,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1564,2018-11-14T22:02:23Z,2018-11-15T08:33:38Z,2018-11-15T15:18:07Z,MERGED,True,1,1,1,https://github.com/MaBecker,add ET_FM,1,[],https://github.com/espruino/Espruino/pull/1564,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1564#issuecomment-438836784,,#1563,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1565,2018-11-14T22:02:38Z,2018-11-15T08:33:57Z,2018-11-15T15:18:02Z,MERGED,True,2,2,1,https://github.com/MaBecker,add ET_FM,1,[],https://github.com/espruino/Espruino/pull/1565,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1565,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1565,2018-11-14T22:02:38Z,2018-11-15T08:33:57Z,2018-11-15T15:18:02Z,MERGED,True,2,2,1,https://github.com/MaBecker,add ET_FM,1,[],https://github.com/espruino/Espruino/pull/1565,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1565#issuecomment-438836949,,#1563,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1566,2018-11-14T22:06:32Z,2018-11-15T08:34:10Z,2018-11-15T15:17:59Z,MERGED,True,1,0,1,https://github.com/MaBecker,add ESP8266 (fix #1563),1,[],https://github.com/espruino/Espruino/pull/1566,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1566,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1566,2018-11-14T22:06:32Z,2018-11-15T08:34:10Z,2018-11-15T15:17:59Z,MERGED,True,1,0,1,https://github.com/MaBecker,add ESP8266 (fix #1563),1,[],https://github.com/espruino/Espruino/pull/1566,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1566#issuecomment-438959534,,"In the future, is it possible to try and merge these 3 PRs into one? They all seem to be related",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1566,2018-11-14T22:06:32Z,2018-11-15T08:34:10Z,2018-11-15T15:17:59Z,MERGED,True,1,0,1,https://github.com/MaBecker,add ESP8266 (fix #1563),1,[],https://github.com/espruino/Espruino/pull/1566,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1566#issuecomment-438960397,,"Sure, that's what I do next time.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1569,2018-11-15T15:17:30Z,2018-11-15T15:41:17Z,2018-11-15T15:43:25Z,MERGED,True,2,2,2,https://github.com/MaBecker,Remove HACK to get around SDK 1.4 bug (fix #1568),1,[],https://github.com/espruino/Espruino/pull/1569,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1569,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1569,2018-11-15T15:17:30Z,2018-11-15T15:41:17Z,2018-11-15T15:43:25Z,MERGED,True,2,2,2,https://github.com/MaBecker,Remove HACK to get around SDK 1.4 bug (fix #1568),1,[],https://github.com/espruino/Espruino/pull/1569,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1569#issuecomment-439084314,,Thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1575,2018-11-29T14:53:06Z,2018-11-29T14:58:54Z,2018-11-29T14:58:54Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Remove insecure (redundant) jQuery reference,1,[],https://github.com/espruino/Espruino/pull/1575,https://github.com/IrregularShed,1,https://github.com/espruino/Espruino/pull/1575,"I've been getting a 'Mixed Content' error in the Chrome console where jQuery was trying to be loaded over HTTP when the page was loaded over HTTPS. jQuery is already getting loaded on espruino.com pages from a local copy - there's two references in fact, one in <head> and the other at the bottom of the page - so we can get rid of this part all together. (I couldn't find the page template that is doubling-up the jQuery request but I'd expect the browser cache to handle that well enough.)","I've been getting a 'Mixed Content' error in the Chrome console where jQuery was trying to be loaded over HTTP when the page was loaded over HTTPS. jQuery is already getting loaded on espruino.com pages from a local copy - there's two references in fact, one in <head> and the other at the bottom of the page - so we can get rid of this part all together. (I couldn't find the page template that is doubling-up the jQuery request but I'd expect the browser cache to handle that well enough.)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1575,2018-11-29T14:53:06Z,2018-11-29T14:58:54Z,2018-11-29T14:58:54Z,MERGED,True,1,1,1,https://github.com/IrregularShed,Remove insecure (redundant) jQuery reference,1,[],https://github.com/espruino/Espruino/pull/1575,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1575#issuecomment-442863774,"I've been getting a 'Mixed Content' error in the Chrome console where jQuery was trying to be loaded over HTTP when the page was loaded over HTTPS. jQuery is already getting loaded on espruino.com pages from a local copy - there's two references in fact, one in <head> and the other at the bottom of the page - so we can get rid of this part all together. (I couldn't find the page template that is doubling-up the jQuery request but I'd expect the browser cache to handle that well enough.)","Neat - thanks! I imagine this was done so files could be viewed on their own, but honestly I'm not sure there's much jQuery in there anyway, and if there is we should be using normal browser stuff now.",True,{'THUMBS_UP': ['https://github.com/IrregularShed']}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/jbgagnon,1,https://github.com/espruino/Espruino/pull/1577,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay","take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/jbgagnon,2,https://github.com/espruino/Espruino/pull/1577#issuecomment-443252745,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay","Is there any big endian module ?
Because, I have to make some changes if big endian is supported
(just a line two change if someone give me the good #ifdef )",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1577#issuecomment-443253576,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay","Thanks for removing the other files. If you're distributing your builds to others, the removal of the ""maybe donate something"" text is a bit unreasonable though.
Is it possible to do a simpler version without the bitwise math? It's cool, but if Espruino were on big endian systems it'd be an annoying bug.
edit: wrt the big endian systems - I can't honestly think of one at the moment, but I seem to recall it came up at some point. It's not worth worrying too much about.
Also on some of these boards (ESP8266 512k, some of the ARM boards) I'm really struggling with flash memory usage, and I feel like reimplementing pow10 and doing bit hacks rather than just doing log and jswrap_math_pow(10,...) is just increasing the code side when I imagine if you're converting massive double numbers into strings it's kindof unlikely that speed is of the essence?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/jbgagnon,4,https://github.com/espruino/Espruino/pull/1577#issuecomment-443260805,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay","for big endian it's just a line replacing
int p2 = (((unsigned short *)& val)[3] << 1 >> 5) - 0x3ff;
by
int p2 = (((unsigned short *)& val)[0] << 1 >> 5) - 0x3ff;
(I think)
but it need to be tested
you can also use my pow10int function for replacing at line 549 comment
for testing
for(var i=0,j=1;i<=308;i++) { console.log(i, j); j *=10; }
for(var i=0,j=10;i<=308;i++) { console.log(i, j/7); j *=10; }
is a start",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/jbgagnon,5,https://github.com/espruino/Espruino/pull/1577#issuecomment-443262474,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay","sorry for the ""donate ..."" it's all what  I find to make difference from my version of the original  one.
Certainly stupid
and I discovering git and comminting bad  things ...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1577,2018-11-30T15:47:15Z,2020-10-29T08:36:21Z,2020-10-29T08:36:21Z,CLOSED,False,53,2,1,https://github.com/jbgagnon,print big numbers,4,[],https://github.com/espruino/Espruino/pull/1577,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1577#issuecomment-718480304,"take only  src/jsutils.c
it is only for big numbers.
not small numbers because small numbers are round near integer so small number are always round to zero ...
this is for #1489
sorry for the delay",Sorry for the delay - closing this finally - just pulled this in manually with some changes to handle small numbers too,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1579,2018-12-03T06:16:17Z,2018-12-03T08:23:23Z,2018-12-03T08:23:23Z,MERGED,True,30,11,2,https://github.com/wilberforce,ESP32: Make wifi connect more robust,2,[],https://github.com/espruino/Espruino/pull/1579,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1579,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1579,2018-12-03T06:16:17Z,2018-12-03T08:23:23Z,2018-12-03T08:23:23Z,MERGED,True,30,11,2,https://github.com/wilberforce,ESP32: Make wifi connect more robust,2,[],https://github.com/espruino/Espruino/pull/1579,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1579#issuecomment-443626243,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1581,2018-12-06T11:11:07Z,2018-12-10T10:52:17Z,2018-12-10T10:52:17Z,CLOSED,False,4,2,1,https://github.com/conalllaverty,Invert TX/RX pins for Quectel BC95-G,1,[],https://github.com/espruino/Espruino/pull/1581,https://github.com/conalllaverty,1,https://github.com/espruino/Espruino/pull/1581,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1581,2018-12-06T11:11:07Z,2018-12-10T10:52:17Z,2018-12-10T10:52:17Z,CLOSED,False,4,2,1,https://github.com/conalllaverty,Invert TX/RX pins for Quectel BC95-G,1,[],https://github.com/espruino/Espruino/pull/1581,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1581#issuecomment-444849382,,Does changing this actually fix your problems? It's come up before and I'm pretty sure these are correct.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1581,2018-12-06T11:11:07Z,2018-12-10T10:52:17Z,2018-12-10T10:52:17Z,CLOSED,False,4,2,1,https://github.com/conalllaverty,Invert TX/RX pins for Quectel BC95-G,1,[],https://github.com/espruino/Espruino/pull/1581,https://github.com/conalllaverty,3,https://github.com/espruino/Espruino/pull/1581#issuecomment-444859724,,"Yes. We've just tried on an RAK8211-NB board. Using the following snippet:
var buff = """";
var iTracker = require(""iTracker"");

var nbiot_serial = function(){
 buff = """";
 Serial1.removeAllListeners();
 Serial1.setup(9600, { tx:D20, rx:D12 });
 Serial1.on('data', function (data) {
  buff = buff + data;
   var OK = buff.includes(""\nOK"");
   var ERROR = buff.includes(""\nERROR"");
   if (OK === true || ERROR === true) {
     console.log(buff);
     buff = """";
   }
 });
};

iTracker.setCellOn(true, function(usart) {
 console.log(""cell now on"");
 nbiot_serial();

 Serial1.println(""ATI"");

});",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1581,2018-12-06T11:11:07Z,2018-12-10T10:52:17Z,2018-12-10T10:52:17Z,CLOSED,False,4,2,1,https://github.com/conalllaverty,Invert TX/RX pins for Quectel BC95-G,1,[],https://github.com/espruino/Espruino/pull/1581,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1581#issuecomment-444929929,,"Thanks - I'm just waiting to hear back from Rak Wireless about this. I'm pretty convinced the 8211-G does have the pins as they were before, so adding this PR would break that one while making the 8211-NB work.
It may be that I end up adding a setNBCellOn function or something like that.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1581,2018-12-06T11:11:07Z,2018-12-10T10:52:17Z,2018-12-10T10:52:17Z,CLOSED,False,4,2,1,https://github.com/conalllaverty,Invert TX/RX pins for Quectel BC95-G,1,[],https://github.com/espruino/Espruino/pull/1581,https://github.com/conalllaverty,5,https://github.com/espruino/Espruino/pull/1581#issuecomment-445471658,,Cool. An additional function like setNBCellOn should work. Happy to test any changes you make around this.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1582,2018-12-08T00:45:31Z,2018-12-10T10:24:38Z,2018-12-10T10:24:38Z,MERGED,True,82,37,2,https://github.com/wilberforce,esp32: fix conect issues,7,[],https://github.com/espruino/Espruino/pull/1582,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1582,Please don't commit - sharing code with @jumjum123,Please don't commit - sharing code with @jumjum123,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1582,2018-12-08T00:45:31Z,2018-12-10T10:24:38Z,2018-12-10T10:24:38Z,MERGED,True,82,37,2,https://github.com/wilberforce,esp32: fix conect issues,7,[],https://github.com/espruino/Espruino/pull/1582,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1582#issuecomment-445763834,Please don't commit - sharing code with @jumjum123,"@gfwilliams
Please merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1582,2018-12-08T00:45:31Z,2018-12-10T10:24:38Z,2018-12-10T10:24:38Z,MERGED,True,82,37,2,https://github.com/wilberforce,esp32: fix conect issues,7,[],https://github.com/espruino/Espruino/pull/1582,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1582#issuecomment-445764926,Please don't commit - sharing code with @jumjum123,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1584,2018-12-14T19:12:43Z,2018-12-18T09:35:17Z,2018-12-18T09:35:17Z,MERGED,True,1,1,1,https://github.com/notlaforge,Fix typo,1,[],https://github.com/espruino/Espruino/pull/1584,https://github.com/notlaforge,1,https://github.com/espruino/Espruino/pull/1584,:),:),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1584,2018-12-14T19:12:43Z,2018-12-18T09:35:17Z,2018-12-18T09:35:17Z,MERGED,True,1,1,1,https://github.com/notlaforge,Fix typo,1,[],https://github.com/espruino/Espruino/pull/1584,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1584#issuecomment-448156464,:),Thanks! :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1585,2018-12-16T09:48:54Z,2018-12-18T09:38:11Z,2019-03-11T19:33:26Z,MERGED,True,517,107,6,https://github.com/wilberforce,"ESP32: save/restore wifi config to Storage. Add set/getHostname, setSNTP",10,[],https://github.com/espruino/Espruino/pull/1585,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1585,Implement all the remaining fuctions to bring inline with ESP8266 port,Implement all the remaining fuctions to bring inline with ESP8266 port,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1585,2018-12-16T09:48:54Z,2018-12-18T09:38:11Z,2019-03-11T19:33:26Z,MERGED,True,517,107,6,https://github.com/wilberforce,"ESP32: save/restore wifi config to Storage. Add set/getHostname, setSNTP",10,[],https://github.com/espruino/Espruino/pull/1585,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1585#issuecomment-447787620,Implement all the remaining fuctions to bring inline with ESP8266 port,"@gfwilliams
Not sure why some of the push checks failed - when the same pr checks passed?
Please merge!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1585,2018-12-16T09:48:54Z,2018-12-18T09:38:11Z,2019-03-11T19:33:26Z,MERGED,True,517,107,6,https://github.com/wilberforce,"ESP32: save/restore wifi config to Storage. Add set/getHostname, setSNTP",10,[],https://github.com/espruino/Espruino/pull/1585,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1585#issuecomment-448157337,Implement all the remaining fuctions to bring inline with ESP8266 port,Thanks! Sometimes Travis builds do just randomly fail (usually connection issues) so it's nothing to worry about.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/Fxlr8,1,https://github.com/espruino/Espruino/pull/1586,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1586#issuecomment-448061753,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","@Fxlr8
The scripts/provision.sh ALL  installs all of the required tool chains.
There is:
arm-none-eabi-gcc
ESP8266
ESP32
These all have their own version of gcc.

arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?

No. The gcc's needed are pulled in at runtime.  The supporting libs are also brought in at runtime.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1586#issuecomment-448152410,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","scripts/provision.sh installs all the tools required, but ALSO sets up environment variables - hence having to be called via source. I wonder if there's much of a way around it.
Another option might be to detect is the BOARD env variable was set and to just to provision BOARD if it was?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/Fxlr8,4,https://github.com/espruino/Espruino/pull/1586#issuecomment-448197673,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","Maybe a noob question, but is it possible to have all the gcc's installed at once? To make the image more cache-friendly we have to install the least changing things first.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1586#issuecomment-448198831,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","is it possible to have all the gcc's installed at once?

Yes! that's what I spent hours on doing with this current Docker image that uses source scripts/provision.sh ALL and I guess why you're finding the build is slow.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1586#issuecomment-460310890,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?","As I understand it this PR currently replaces something that was working perfectly (albeit a bit slowly) with something broken?
Any extra work on this? Or shall I close it?
From my point of view I have received absolutely zero feedback that the Docker image is actually being used or is helpful to Espruino users, so working to speed the build up by 50% isn't super high priority.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/wilberforce,7,https://github.com/espruino/Espruino/pull/1586#issuecomment-475575384,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?",Time to close?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1586,2018-12-18T00:53:55Z,2019-03-22T11:20:21Z,2019-03-22T11:20:21Z,CLOSED,False,8,5,1,https://github.com/Fxlr8,WIP: a better dockerfile,1,[],https://github.com/espruino/Espruino/pull/1586,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1586#issuecomment-475583202,"Hi, there is still a lot of improvements to be made with the Dockerfile. Currently, it is not cache-friendly and container image rebuild takes a lot of time. We should run the provision.sh script first and then copy all the source code into the container. This way docker will only re-run the last steps of the Dockerfile and save a lot of time.
I tried to do this, and also I changed the last line to
CMD ""make""
instead of
CMD [""bash"", ""-c"", ""source scripts/provision.sh ALL && make""]
and when I try to run the container I get this error:
make: arm-none-eabi-gcc: Command not found

Why is that happening? arm-none-eabi-gcc should already be installed during the build of a docker image, isn't it?",Yes :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1589,2018-12-24T12:19:20Z,2019-01-07T08:01:32Z,2019-01-07T08:23:26Z,MERGED,True,1,1,1,https://github.com/MaBecker,replace fixed value,1,[],https://github.com/espruino/Espruino/pull/1589,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1589,160 can be replaced by CLOCK_SPEED_MHZ,160 can be replaced by CLOCK_SPEED_MHZ,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1589,2018-12-24T12:19:20Z,2019-01-07T08:01:32Z,2019-01-07T08:23:26Z,MERGED,True,1,1,1,https://github.com/MaBecker,replace fixed value,1,[],https://github.com/espruino/Espruino/pull/1589,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1589#issuecomment-451856062,160 can be replaced by CLOCK_SPEED_MHZ,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1591,2018-12-28T18:32:53Z,2019-01-07T07:59:37Z,2019-01-07T07:59:37Z,MERGED,True,1,1,1,https://github.com/georgemandis,Typo fix for jswrap_wifi.c,1,[],https://github.com/espruino/Espruino/pull/1591,https://github.com/georgemandis,1,https://github.com/espruino/Espruino/pull/1591,Fixed typo in documentation: visiable => visible,Fixed typo in documentation: visiable => visible,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1591,2018-12-28T18:32:53Z,2019-01-07T07:59:37Z,2019-01-07T07:59:37Z,MERGED,True,1,1,1,https://github.com/georgemandis,Typo fix for jswrap_wifi.c,1,[],https://github.com/espruino/Espruino/pull/1591,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1591#issuecomment-451640965,Fixed typo in documentation: visiable => visible,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1591,2018-12-28T18:32:53Z,2019-01-07T07:59:37Z,2019-01-07T07:59:37Z,MERGED,True,1,1,1,https://github.com/georgemandis,Typo fix for jswrap_wifi.c,1,[],https://github.com/espruino/Espruino/pull/1591,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1591#issuecomment-451850958,Fixed typo in documentation: visiable => visible,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1592,2018-12-29T11:07:21Z,2019-01-07T08:34:56Z,2019-01-07T08:34:56Z,MERGED,True,13,8,2,https://github.com/opichals,No exception on clearTimeout(invalidTimeoutId),1,[],https://github.com/espruino/Espruino/pull/1592,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1592,Make clearTimeout/Interval() behave closer to other JS environments where it doesn't throw exceptions on invalid or stale timeout id is passed.,Make clearTimeout/Interval() behave closer to other JS environments where it doesn't throw exceptions on invalid or stale timeout id is passed.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1592,2018-12-29T11:07:21Z,2019-01-07T08:34:56Z,2019-01-07T08:34:56Z,MERGED,True,13,8,2,https://github.com/opichals,No exception on clearTimeout(invalidTimeoutId),1,[],https://github.com/espruino/Espruino/pull/1592,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1592#issuecomment-451858858,Make clearTimeout/Interval() behave closer to other JS environments where it doesn't throw exceptions on invalid or stale timeout id is passed.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1604,2019-01-22T20:10:34Z,2019-01-23T08:10:08Z,2019-01-23T09:00:47Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix sign compare waring,1,[],https://github.com/espruino/Espruino/pull/1604,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1604,"src/jswrap_dataview.c:66:33: warning: signed and unsigned type in conditional expression [-Wsign-compare]
byteLength ? byteLength : (unsigned) jsvGetArrayBufferLength(buffer)));","src/jswrap_dataview.c:66:33: warning: signed and unsigned type in conditional expression [-Wsign-compare]
byteLength ? byteLength : (unsigned) jsvGetArrayBufferLength(buffer)));",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1604,2019-01-22T20:10:34Z,2019-01-23T08:10:08Z,2019-01-23T09:00:47Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix sign compare waring,1,[],https://github.com/espruino/Espruino/pull/1604,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1604#issuecomment-456707859,"src/jswrap_dataview.c:66:33: warning: signed and unsigned type in conditional expression [-Wsign-compare]
byteLength ? byteLength : (unsigned) jsvGetArrayBufferLength(buffer)));",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1609,2019-01-31T05:00:34Z,2019-02-02T22:31:55Z,2019-02-02T22:32:02Z,CLOSED,False,4,4,1,https://github.com/wilberforce,Update esp-idf to 3.1.2,2,[],https://github.com/espruino/Espruino/pull/1609,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1609,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1609,2019-01-31T05:00:34Z,2019-02-02T22:31:55Z,2019-02-02T22:32:02Z,CLOSED,False,4,4,1,https://github.com/wilberforce,Update esp-idf to 3.1.2,2,[],https://github.com/espruino/Espruino/pull/1609,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1609#issuecomment-459263551,,Is this good to merge? Any reason we couldn't just update the master branch of the build tools?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1609,2019-01-31T05:00:34Z,2019-02-02T22:31:55Z,2019-02-02T22:32:02Z,CLOSED,False,4,4,1,https://github.com/wilberforce,Update esp-idf to 3.1.2,2,[],https://github.com/espruino/Espruino/pull/1609,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1609#issuecomment-459295466,,"Hi, because I want to test that it works first - I need to know the library links and works.
At this stage it's reporting as  3.1 rather than 3.1.2 so I have further testing to do.
I update the master branch in build tools when I know all is working. Sorry - it's a bit convoluted as two repositories have to be updated - I don't know if it can be simplified.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1611,2019-02-02T22:37:53Z,2019-02-04T10:18:20Z,2019-02-04T10:24:31Z,MERGED,True,1,0,1,https://github.com/wilberforce,ESP32: update EspruinoBuildTools to esp-idf V3.1.2,1,[],https://github.com/espruino/Espruino/pull/1611,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1611,fix Wifi connect isssues (multiple ssid),fix Wifi connect isssues (multiple ssid),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1611,2019-02-02T22:37:53Z,2019-02-04T10:18:20Z,2019-02-04T10:24:31Z,MERGED,True,1,0,1,https://github.com/wilberforce,ESP32: update EspruinoBuildTools to esp-idf V3.1.2,1,[],https://github.com/espruino/Espruino/pull/1611,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1611#issuecomment-460190011,fix Wifi connect isssues (multiple ssid),Please merge,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1611,2019-02-02T22:37:53Z,2019-02-04T10:18:20Z,2019-02-04T10:24:31Z,MERGED,True,1,0,1,https://github.com/wilberforce,ESP32: update EspruinoBuildTools to esp-idf V3.1.2,1,[],https://github.com/espruino/Espruino/pull/1611,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1611#issuecomment-460192363,fix Wifi connect isssues (multiple ssid),This appears to be literally only a modification to the Changelog - is that all you intended?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1611,2019-02-02T22:37:53Z,2019-02-04T10:18:20Z,2019-02-04T10:24:31Z,MERGED,True,1,0,1,https://github.com/wilberforce,ESP32: update EspruinoBuildTools to esp-idf V3.1.2,1,[],https://github.com/espruino/Espruino/pull/1611,https://github.com/wilberforce,4,https://github.com/espruino/Espruino/pull/1611#issuecomment-460194636,fix Wifi connect isssues (multiple ssid),Yes- as I have updated build tools master and the change log is enough to trigger the build,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1614,2019-02-04T15:37:53Z,2019-02-04T15:41:44Z,2019-04-09T09:42:01Z,MERGED,True,1,3,1,https://github.com/gfwilliams,"Revert ""fix STM32 neopixel timing""",1,[],https://github.com/espruino/Espruino/pull/1614,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/1614,"Reverts #1459
Turns out this does break neopixel functionality that worked fine before. Sounds like the original author had only used a single neopixel so might not have tested that the chaining of them worked - should have checked with all the stuff here before I merged this :(","Reverts #1459
Turns out this does break neopixel functionality that worked fine before. Sounds like the original author had only used a single neopixel so might not have tested that the chaining of them worked - should have checked with all the stuff here before I merged this :(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1618,2019-02-18T05:29:12Z,2019-02-18T13:21:55Z,2019-02-19T06:27:08Z,MERGED,True,1,0,1,https://github.com/puuu,nRF5x: shutdown util timer if not needed,1,[],https://github.com/espruino/Espruino/pull/1618,https://github.com/puuu,1,https://github.com/espruino/Espruino/pull/1618,"After using the util timer, the current consumption is about 10 times higher then before.
This can be reproduced:

power on the NRF52 board
check current consumption
connect via Bluethooth to device and run:

digitalPulse(D6, 1, 50);
digitalPulse(D6, 1, 0);
pinMode(D6, ""input"", true);

disconnect from Bluethooth
check current consumption is higher then in point 2

Tested with a nRF52832 based board (not an official one from espruino) with NRF52832DK 2v01 firmware.
According to Nordic, this is a know issue:
https://www.nordicsemi.com/DocLib/Content/Errata/nRF52840_Rev1/latest/ERR/nRF52840/Rev1/latest/anomaly_840_78
This pull request will shutdown the util timer after usage. My tests show that with this patch, the current consumption will return to the previous (before using the util timer) value. Repeated usage of digitalPulse() is still possible.
Maybe, a similar workaround is require for cap sense, but I can not test it.
PS: Thank you for this amazing project! Using espruino is really fun.","After using the util timer, the current consumption is about 10 times higher then before.
This can be reproduced:

power on the NRF52 board
check current consumption
connect via Bluethooth to device and run:

digitalPulse(D6, 1, 50);
digitalPulse(D6, 1, 0);
pinMode(D6, ""input"", true);

disconnect from Bluethooth
check current consumption is higher then in point 2

Tested with a nRF52832 based board (not an official one from espruino) with NRF52832DK 2v01 firmware.
According to Nordic, this is a know issue:
https://www.nordicsemi.com/DocLib/Content/Errata/nRF52840_Rev1/latest/ERR/nRF52840/Rev1/latest/anomaly_840_78
This pull request will shutdown the util timer after usage. My tests show that with this patch, the current consumption will return to the previous (before using the util timer) value. Repeated usage of digitalPulse() is still possible.
Maybe, a similar workaround is require for cap sense, but I can not test it.
PS: Thank you for this amazing project! Using espruino is really fun.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1618,2019-02-18T05:29:12Z,2019-02-18T13:21:55Z,2019-02-19T06:27:08Z,MERGED,True,1,0,1,https://github.com/puuu,nRF5x: shutdown util timer if not needed,1,[],https://github.com/espruino/Espruino/pull/1618,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1618#issuecomment-464729380,"After using the util timer, the current consumption is about 10 times higher then before.
This can be reproduced:

power on the NRF52 board
check current consumption
connect via Bluethooth to device and run:

digitalPulse(D6, 1, 50);
digitalPulse(D6, 1, 0);
pinMode(D6, ""input"", true);

disconnect from Bluethooth
check current consumption is higher then in point 2

Tested with a nRF52832 based board (not an official one from espruino) with NRF52832DK 2v01 firmware.
According to Nordic, this is a know issue:
https://www.nordicsemi.com/DocLib/Content/Errata/nRF52840_Rev1/latest/ERR/nRF52840/Rev1/latest/anomaly_840_78
This pull request will shutdown the util timer after usage. My tests show that with this patch, the current consumption will return to the previous (before using the util timer) value. Repeated usage of digitalPulse() is still possible.
Maybe, a similar workaround is require for cap sense, but I can not test it.
PS: Thank you for this amazing project! Using espruino is really fun.","This is great, thanks for tracking it down and making the PR. I had no idea this was happening - and I'd have thought I would have spotted it as digitalPulse is used as a status indicator quite a lot.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1618,2019-02-18T05:29:12Z,2019-02-18T13:21:55Z,2019-02-19T06:27:08Z,MERGED,True,1,0,1,https://github.com/puuu,nRF5x: shutdown util timer if not needed,1,[],https://github.com/espruino/Espruino/pull/1618,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1618#issuecomment-464729565,"After using the util timer, the current consumption is about 10 times higher then before.
This can be reproduced:

power on the NRF52 board
check current consumption
connect via Bluethooth to device and run:

digitalPulse(D6, 1, 50);
digitalPulse(D6, 1, 0);
pinMode(D6, ""input"", true);

disconnect from Bluethooth
check current consumption is higher then in point 2

Tested with a nRF52832 based board (not an official one from espruino) with NRF52832DK 2v01 firmware.
According to Nordic, this is a know issue:
https://www.nordicsemi.com/DocLib/Content/Errata/nRF52840_Rev1/latest/ERR/nRF52840/Rev1/latest/anomaly_840_78
This pull request will shutdown the util timer after usage. My tests show that with this patch, the current consumption will return to the previous (before using the util timer) value. Repeated usage of digitalPulse() is still possible.
Maybe, a similar workaround is require for cap sense, but I can not test it.
PS: Thank you for this amazing project! Using espruino is really fun.","Just out of interest, what were the rough power usage figures you were seeing before/after?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1618,2019-02-18T05:29:12Z,2019-02-18T13:21:55Z,2019-02-19T06:27:08Z,MERGED,True,1,0,1,https://github.com/puuu,nRF5x: shutdown util timer if not needed,1,[],https://github.com/espruino/Espruino/pull/1618,https://github.com/puuu,4,https://github.com/espruino/Espruino/pull/1618#issuecomment-465001932,"After using the util timer, the current consumption is about 10 times higher then before.
This can be reproduced:

power on the NRF52 board
check current consumption
connect via Bluethooth to device and run:

digitalPulse(D6, 1, 50);
digitalPulse(D6, 1, 0);
pinMode(D6, ""input"", true);

disconnect from Bluethooth
check current consumption is higher then in point 2

Tested with a nRF52832 based board (not an official one from espruino) with NRF52832DK 2v01 firmware.
According to Nordic, this is a know issue:
https://www.nordicsemi.com/DocLib/Content/Errata/nRF52840_Rev1/latest/ERR/nRF52840/Rev1/latest/anomaly_840_78
This pull request will shutdown the util timer after usage. My tests show that with this patch, the current consumption will return to the previous (before using the util timer) value. Repeated usage of digitalPulse() is still possible.
Maybe, a similar workaround is require for cap sense, but I can not test it.
PS: Thank you for this amazing project! Using espruino is really fun.","Thank you for merging.
Sorry, I have no current values. I run the board with two 40 mAh NiMH batteries and check the battery voltage (NRF.getBattery()) every 10 minutes.
The voltage drops were approximately:

before using the util timer: 6 mV/h
after using the util timer: 30 mV/h.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/ExCyb,1,https://github.com/espruino/Espruino/pull/1621,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1621#issuecomment-470035912,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,Forum post about this here: http://forum.espruino.com/conversations/330748/#comment14644546,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1621#issuecomment-664180767,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,"@MaBecker should I merge this? You seem to do quite a bit of neopixel stuff, so does it improve life for you?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1621#issuecomment-664661583,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,"Well the existing Neopixel implementation is working as expected.

so does it improve life for you?

NO",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1621#issuecomment-664819576,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,"Ok, thanks! Actually looking at the code again and at http://forum.espruino.com/conversations/330748/#comment14644546 it looks entirely likely that the existing ESP32 code had issues with longer strings of neopixels (also this code is a bit tidier than before) so merging anyway.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1621,2019-02-22T04:32:29Z,2020-07-28T07:06:59Z,2020-07-28T09:02:36Z,MERGED,True,39,39,1,https://github.com/ExCyb,Esp32 neopixel debug,2,[],https://github.com/espruino/Espruino/pull/1621,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1621#issuecomment-664898136,Hi! Here is some fixes to esp32 neopixel from SergeP. Improved slightly from forum version to be more readable.,"Did some tests with up to 300 pixel,  still works as expected :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1624,2019-03-02T00:50:23Z,2019-03-04T10:55:16Z,2019-03-11T19:33:20Z,MERGED,True,1,0,1,https://github.com/wilberforce,update EspruinoBuildTools to esp-idf V3.1.3,2,[],https://github.com/espruino/Espruino/pull/1624,https://github.com/wilberforce,1,https://github.com/espruino/Espruino/pull/1624,Update to build tools - the change to Changelog should trigger a travis build,Update to build tools - the change to Changelog should trigger a travis build,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1626,2019-03-06T16:01:21Z,2019-03-06T16:50:35Z,2019-03-06T16:50:35Z,MERGED,True,7,2,1,https://github.com/TomWS1,Fixed fs.statSync() to report in localtime and corrected Month offset.,1,[],https://github.com/espruino/Espruino/pull/1626,https://github.com/TomWS1,1,https://github.com/espruino/Espruino/pull/1626,"Previous fs.statSync() reported file modification timestamp in UTC time, rather than localtime.  This update fixes that.
Also, previous statSync() didn't use 0 based month code.  This was fixed as well.","Previous fs.statSync() reported file modification timestamp in UTC time, rather than localtime.  This update fixes that.
Also, previous statSync() didn't use 0 based month code.  This was fixed as well.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1626,2019-03-06T16:01:21Z,2019-03-06T16:50:35Z,2019-03-06T16:50:35Z,MERGED,True,7,2,1,https://github.com/TomWS1,Fixed fs.statSync() to report in localtime and corrected Month offset.,1,[],https://github.com/espruino/Espruino/pull/1626,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1626#issuecomment-470184731,"Previous fs.statSync() reported file modification timestamp in UTC time, rather than localtime.  This update fixes that.
Also, previous statSync() didn't use 0 based month code.  This was fixed as well.","Thanks for this - if there's stuff like this that comes up in future with a static function in one file, it's worth making it non-static and exporting it so you can re-use it. It saves on code space and also makes it less likely things will break in the future :)
I'll quickly tweak that now though.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1627,2019-03-06T20:40:21Z,2019-03-07T08:18:14Z,2019-03-07T08:50:05Z,MERGED,True,4,1,2,https://github.com/MaBecker,add CFLAGs to shrink build size for ESP8266 (fix #1622),2,[],https://github.com/espruino/Espruino/pull/1627,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1627,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1627,2019-03-06T20:40:21Z,2019-03-07T08:18:14Z,2019-03-07T08:50:05Z,MERGED,True,4,1,2,https://github.com/MaBecker,add CFLAGs to shrink build size for ESP8266 (fix #1622),2,[],https://github.com/espruino/Espruino/pull/1627,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1627#issuecomment-470429280,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1630,2019-03-07T20:27:57Z,2019-03-08T14:09:08Z,2019-03-08T14:12:19Z,CLOSED,False,8,8,4,https://github.com/MaBecker,add brackets to logical expression (fix #1629),1,[],https://github.com/espruino/Espruino/pull/1630,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1630,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1630,2019-03-07T20:27:57Z,2019-03-08T14:09:08Z,2019-03-08T14:12:19Z,CLOSED,False,8,8,4,https://github.com/MaBecker,add brackets to logical expression (fix #1629),1,[],https://github.com/espruino/Espruino/pull/1630,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1630#issuecomment-470940461,,Fixed in upload tools with espruino/EspruinoTools@e306dad,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1630,2019-03-07T20:27:57Z,2019-03-08T14:09:08Z,2019-03-08T14:12:19Z,CLOSED,False,8,8,4,https://github.com/MaBecker,add brackets to logical expression (fix #1629),1,[],https://github.com/espruino/Espruino/pull/1630,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1630#issuecomment-470941484,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1632,2019-03-16T01:05:33Z,2019-03-18T08:59:19Z,2019-03-18T08:59:19Z,MERGED,True,0,1,1,https://github.com/dgazzoni,"Fix bug where, upon asking for an open drain pin without a pullup, it…",1,[],https://github.com/espruino/Espruino/pull/1632,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1632,… is configured as having the pullup.,… is configured as having the pullup.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1632,2019-03-16T01:05:33Z,2019-03-18T08:59:19Z,2019-03-18T08:59:19Z,MERGED,True,0,1,1,https://github.com/dgazzoni,"Fix bug where, upon asking for an open drain pin without a pullup, it…",1,[],https://github.com/espruino/Espruino/pull/1632,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1632#issuecomment-473823431,… is configured as having the pullup.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1633,2019-03-17T04:53:29Z,2019-03-18T08:57:09Z,2019-04-23T10:34:40Z,MERGED,True,1,1,1,https://github.com/dgazzoni,Workaround for building on gcc versions > 6.,1,[],https://github.com/espruino/Espruino/pull/1633,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1633,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1633,2019-03-17T04:53:29Z,2019-03-18T08:57:09Z,2019-04-23T10:34:40Z,MERGED,True,1,1,1,https://github.com/dgazzoni,Workaround for building on gcc versions > 6.,1,[],https://github.com/espruino/Espruino/pull/1633,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1633#issuecomment-473616861,,"Hi, @swineone,
what is the benefit of using a higher gcc version?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1633,2019-03-17T04:53:29Z,2019-03-18T08:57:09Z,2019-04-23T10:34:40Z,MERGED,True,1,1,1,https://github.com/dgazzoni,Workaround for building on gcc versions > 6.,1,[],https://github.com/espruino/Espruino/pull/1633,https://github.com/dgazzoni,3,https://github.com/espruino/Espruino/pull/1633#issuecomment-473616930,,"Hi, @swineone,
what is the benefit of using a higher gcc version?

No idea, really. I'm just used to updating when new versions coming out -- I assume optimizations are better, etc.
Hopefully this doesn't dissuade anyone from merging this fix, as it's as simple and harmless as it gets.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1633,2019-03-17T04:53:29Z,2019-03-18T08:57:09Z,2019-04-23T10:34:40Z,MERGED,True,1,1,1,https://github.com/dgazzoni,Workaround for building on gcc versions > 6.,1,[],https://github.com/espruino/Espruino/pull/1633,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1633#issuecomment-473814098,,"Thanks for this - newer GCCs do sometimes get better code density and speed, but I've had issues with some (sometimes the manufacturer-provided HALs do non-compliant stuff and end up getting broken) so I don't tend to change compiler unless there's a good reason.
Do you have any background as to why swapping the order of object files around actually helps? What error does it fix? It just seems like something that shouldn't really have any effect at all?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1633,2019-03-17T04:53:29Z,2019-03-18T08:57:09Z,2019-04-23T10:34:40Z,MERGED,True,1,1,1,https://github.com/dgazzoni,Workaround for building on gcc versions > 6.,1,[],https://github.com/espruino/Espruino/pull/1633,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1633#issuecomment-473822760,,"Aha - I just spotted your forum post - thanks! Loads of info there :)
http://forum.espruino.com/conversations/331066/#comment14658810",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1635,2019-03-19T02:20:15Z,2019-03-19T07:55:47Z,2019-04-23T10:31:01Z,MERGED,True,1,0,1,https://github.com/dgazzoni,Enable USB HID for STM32F4DISCOVERY board,1,[],https://github.com/espruino/Espruino/pull/1635,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1635,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1637,2019-03-22T00:08:05Z,2019-03-22T08:09:32Z,2019-03-22T08:09:32Z,MERGED,True,7,5,1,https://github.com/dgazzoni,Fix assert being triggered in E.FFT() when imaginary array is undefined,1,[],https://github.com/espruino/Espruino/pull/1637,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1637,Fix #1636.,Fix #1636.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1637,2019-03-22T00:08:05Z,2019-03-22T08:09:32Z,2019-03-22T08:09:32Z,MERGED,True,7,5,1,https://github.com/dgazzoni,Fix assert being triggered in E.FFT() when imaginary array is undefined,1,[],https://github.com/espruino/Espruino/pull/1637,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1637#issuecomment-475528702,Fix #1636.,Brilliant - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1639,2019-04-01T05:29:42Z,2019-04-01T07:34:44Z,2019-04-01T09:43:40Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix compiler warning,1,[],https://github.com/espruino/Espruino/pull/1639,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1639,"src/jswrap_string.c:512:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
if (last<=jsvGetStringLength(parent))","src/jswrap_string.c:512:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
if (last<=jsvGetStringLength(parent))",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1639,2019-04-01T05:29:42Z,2019-04-01T07:34:44Z,2019-04-01T09:43:40Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix compiler warning,1,[],https://github.com/espruino/Espruino/pull/1639,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1639#issuecomment-478468659,"src/jswrap_string.c:512:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
if (last<=jsvGetStringLength(parent))",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1641,2019-04-09T11:30:51Z,2019-04-09T11:48:54Z,2019-04-09T11:48:54Z,MERGED,True,2,2,1,https://github.com/jumjum123,Added wildcard for blacklist,1,[],https://github.com/espruino/Espruino/pull/1641,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/1641,"Used to blacklist full class.
Helpful to create customized firmware. For example if you don't need SPI in your project","Used to blacklist full class.
Helpful to create customized firmware. For example if you don't need SPI in your project",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1641,2019-04-09T11:30:51Z,2019-04-09T11:48:54Z,2019-04-09T11:48:54Z,MERGED,True,2,2,1,https://github.com/jumjum123,Added wildcard for blacklist,1,[],https://github.com/espruino/Espruino/pull/1641,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1641#issuecomment-481218315,"Used to blacklist full class.
Helpful to create customized firmware. For example if you don't need SPI in your project",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1644,2019-04-12T23:02:19Z,2019-04-15T13:34:28Z,2019-04-23T10:30:45Z,MERGED,True,5,5,2,https://github.com/dgazzoni,Fix bug in pin_utils.py's only_from_package() function,1,[],https://github.com/espruino/Espruino/pull/1644,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1644,"Fix bug in pin_utils.py's only_from_package() function, which in turn fixes a hard fault handler in STM32F3DISCOVERY. Fixes #1643.","Fix bug in pin_utils.py's only_from_package() function, which in turn fixes a hard fault handler in STM32F3DISCOVERY. Fixes #1643.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1646,2019-04-12T23:07:00Z,2019-04-23T07:48:04Z,2019-04-23T07:48:05Z,MERGED,True,7,6,3,https://github.com/dgazzoni,Add filesystem support to STM32F4DISCOVERY.,2,[],https://github.com/espruino/Espruino/pull/1646,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1646,Fixes #1645.,Fixes #1645.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1646,2019-04-12T23:07:00Z,2019-04-23T07:48:04Z,2019-04-23T07:48:05Z,MERGED,True,7,6,3,https://github.com/dgazzoni,Add filesystem support to STM32F4DISCOVERY.,2,[],https://github.com/espruino/Espruino/pull/1646,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1646#issuecomment-485683245,Fixes #1645.,"Ahh, sorry - I got this confused with #1644 since it also appears to fix those changes as well.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1647,2019-04-14T20:12:53Z,2019-04-16T07:26:47Z,2019-04-16T07:47:05Z,MERGED,True,116,79,3,https://github.com/MaBecker,esp8266_fix1595_fix1640,2,[],https://github.com/espruino/Espruino/pull/1647,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1647,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1647,2019-04-14T20:12:53Z,2019-04-16T07:26:47Z,2019-04-16T07:47:05Z,MERGED,True,116,79,3,https://github.com/MaBecker,esp8266_fix1595_fix1640,2,[],https://github.com/espruino/Espruino/pull/1647,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1647#issuecomment-483155882,,"Is this ready to go?
Please can you add some comments to your additions to the jswrap_wifi_connect docs that mention that those extra parameters are only for the ESP8266 build? It might confuse other users otherwise.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1647,2019-04-14T20:12:53Z,2019-04-16T07:26:47Z,2019-04-16T07:47:05Z,MERGED,True,116,79,3,https://github.com/MaBecker,esp8266_fix1595_fix1640,2,[],https://github.com/espruino/Espruino/pull/1647,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1647#issuecomment-483357698,,"Please can you add some comments to your additions to the jswrap_wifi_connect docs that mention that those extra parameters are only for the ESP8266 build? It might confuse other users otherwise.

Thanks for mention it. Just added a comment.
Yes, it is ready to go from my side.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1647,2019-04-14T20:12:53Z,2019-04-16T07:26:47Z,2019-04-16T07:47:05Z,MERGED,True,116,79,3,https://github.com/MaBecker,esp8266_fix1595_fix1640,2,[],https://github.com/espruino/Espruino/pull/1647,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1647#issuecomment-483543878,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1648,2019-04-15T10:05:10Z,2019-04-15T13:39:56Z,2019-04-15T13:39:56Z,MERGED,True,1,0,1,https://github.com/the1laz,Fixing issue with BLE serial on NRF52840,1,[],https://github.com/espruino/Espruino/pull/1648,https://github.com/the1laz,1,https://github.com/espruino/Espruino/pull/1648,Fixing issue with BLE serial tx buffer not clearing on on NRF52840.,Fixing issue with BLE serial tx buffer not clearing on on NRF52840.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1648,2019-04-15T10:05:10Z,2019-04-15T13:39:56Z,2019-04-15T13:39:56Z,MERGED,True,1,0,1,https://github.com/the1laz,Fixing issue with BLE serial on NRF52840,1,[],https://github.com/espruino/Espruino/pull/1648,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1648#issuecomment-483255355,Fixing issue with BLE serial tx buffer not clearing on on NRF52840.,Awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1648,2019-04-15T10:05:10Z,2019-04-15T13:39:56Z,2019-04-15T13:39:56Z,MERGED,True,1,0,1,https://github.com/the1laz,Fixing issue with BLE serial on NRF52840,1,[],https://github.com/espruino/Espruino/pull/1648,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1648#issuecomment-483255674,Fixing issue with BLE serial tx buffer not clearing on on NRF52840.,Referenced here: http://forum.espruino.com/conversations/323658/?offset=25#comment14698063,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1649,2019-04-16T20:57:39Z,2019-04-17T15:49:59Z,2019-04-17T17:40:55Z,MERGED,True,5,5,1,https://github.com/MaBecker,esp8266 - update  building doc (fix #1608),1,[],https://github.com/espruino/Espruino/pull/1649,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1649,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1649,2019-04-16T20:57:39Z,2019-04-17T15:49:59Z,2019-04-17T17:40:55Z,MERGED,True,5,5,1,https://github.com/MaBecker,esp8266 - update  building doc (fix #1608),1,[],https://github.com/espruino/Espruino/pull/1649,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1649#issuecomment-484148437,,"Thanks! Is it worth noting that if you do the  source scripts/provision.sh BOARDNAME at the top of the readme, the majority of that is done automatically? I think it's just the com port that needs setting...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1649,2019-04-16T20:57:39Z,2019-04-17T15:49:59Z,2019-04-17T17:40:55Z,MERGED,True,5,5,1,https://github.com/MaBecker,esp8266 - update  building doc (fix #1608),1,[],https://github.com/espruino/Espruino/pull/1649,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1649#issuecomment-484190948,,"source scripts/provision.sh BOARDNAME

Yes, this  is the easiest way to setup a build environment  for Linux.
So if someone ist not on Linux then they have to setup it up manually.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1651,2019-04-22T01:17:37Z,2019-04-23T07:48:32Z,2019-04-23T07:48:33Z,MERGED,True,3,1,1,https://github.com/dgazzoni,Fix ESP32 Serial2 and Serial3 stuck at 9600 bps.,1,[],https://github.com/espruino/Espruino/pull/1651,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1651,Fixes #1650.,Fixes #1650.,True,"{'THUMBS_UP': ['https://github.com/TheReelDill'], 'HEART': ['https://github.com/AkosLukacs']}"
espruino/Espruino,https://github.com/espruino/Espruino,1651,2019-04-22T01:17:37Z,2019-04-23T07:48:32Z,2019-04-23T07:48:33Z,MERGED,True,3,1,1,https://github.com/dgazzoni,Fix ESP32 Serial2 and Serial3 stuck at 9600 bps.,1,[],https://github.com/espruino/Espruino/pull/1651,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1651#issuecomment-485683386,Fixes #1650.,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1652,2019-04-23T11:19:47Z,2019-04-23T11:46:14Z,2019-04-23T11:46:15Z,MERGED,True,28,7,3,https://github.com/urish,Fix broken GPIO1 on nRF52840 chips,1,[],https://github.com/espruino/Espruino/pull/1652,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1652,See http://forum.espruino.com/conversations/323658/?offset=25#comment14707531 for discussion,See http://forum.espruino.com/conversations/323658/?offset=25#comment14707531 for discussion,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1652,2019-04-23T11:19:47Z,2019-04-23T11:46:14Z,2019-04-23T11:46:15Z,MERGED,True,28,7,3,https://github.com/urish,Fix broken GPIO1 on nRF52840 chips,1,[],https://github.com/espruino/Espruino/pull/1652,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1652#issuecomment-485768868,See http://forum.espruino.com/conversations/323658/?offset=25#comment14707531 for discussion,Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/urish,1,https://github.com/espruino/Espruino/pull/1653,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1653#issuecomment-486148252,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Thanks - but I'm a bit iffy about doing this with static vars. I know it seems dumb but when we're targeting nRF51 we have 6kB of RAM in total (including stack and JS), so having two of the ble_advdata_t (which are reasonably big) is going to hurt.
I've just committed some code that should fix this by removing advertising_init completely. Also found that setAdvertising didn't work on 52840 so have fixed that too.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/urish,3,https://github.com/espruino/Espruino/pull/1653#issuecomment-486150432,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Actually, the static vars are only compiled in when targeting SDK >= 15, so I'm not sure if they are relevant for nRF51. But as long as advertising works on nRF52840 - I'm happy :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1653#issuecomment-486153003,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Ahh, I think it might have been a copy/paste issue then?
#if NRF_SD_BLE_API_VERSION<=5
    static ble_advdata_t advdata;
    static ble_advdata_t scanrsp;
#endif

Still static, just defined in a different place :) Anyway, as you say it should be working now - and the code is hopefully a bit simpler, which is always good.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/urish,5,https://github.com/espruino/Espruino/pull/1653#issuecomment-486157994,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Yup, good spot - it was a copy-paste issue indeed. Always happy for simpler code!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1653#issuecomment-486160013,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().","Just so you know, it seems that updating the advertising data causes the scan response to be cleared - so chances are we'll need a static array for the scan response eventually on SDK15 anyway (although I imagine that'll take the form of m_enc_scan_response_data to ensure that we're not recomputing everything all the time).",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1653,2019-04-23T20:46:41Z,2019-04-24T09:42:35Z,2019-04-24T10:07:49Z,CLOSED,False,21,30,1,https://github.com/urish,Fix advertising on nRF52840,1,[],https://github.com/espruino/Espruino/pull/1653,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1653#issuecomment-486160272,"Also refactored advertising_init(), jsble_advertising_start() to eliminate the duplicate call to sd_ble_gap_adv_set_configure().",But it's no big deal - right now it just means that when you update advertising it stops advertising the Nordic UART service,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1657,2019-04-27T07:56:59Z,2019-04-29T08:00:21Z,2019-04-29T08:00:21Z,MERGED,True,56,1,2,https://github.com/vkolotov,Feature characteristic security,2,[],https://github.com/espruino/Espruino/pull/1657,https://github.com/vkolotov,1,https://github.com/espruino/Espruino/pull/1657,"This PR is to add support for configuring security attributes for characteristics. NRF5X devices only as I don't have any ESP device handy (although it is possible to add support for ESP as well).
I've tested this with a BT sniffer, works ok. Once you marked a characteristic rear/write with a security attribute, a secure links gets established automatically when you are trying to read/write for android (I assume for ios as well) and Bluez with generic USB adapters. Bluegiga serial adapter does not establish secure link automatically, a separate pairing procedure has to be run before reading/writing protected characteristics.","This PR is to add support for configuring security attributes for characteristics. NRF5X devices only as I don't have any ESP device handy (although it is possible to add support for ESP as well).
I've tested this with a BT sniffer, works ok. Once you marked a characteristic rear/write with a security attribute, a secure links gets established automatically when you are trying to read/write for android (I assume for ios as well) and Bluez with generic USB adapters. Bluegiga serial adapter does not establish secure link automatically, a separate pairing procedure has to be run before reading/writing protected characteristics.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1657,2019-04-27T07:56:59Z,2019-04-29T08:00:21Z,2019-04-29T08:00:21Z,MERGED,True,56,1,2,https://github.com/vkolotov,Feature characteristic security,2,[],https://github.com/espruino/Espruino/pull/1657,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1657#issuecomment-487483972,"This PR is to add support for configuring security attributes for characteristics. NRF5X devices only as I don't have any ESP device handy (although it is possible to add support for ESP as well).
I've tested this with a BT sniffer, works ok. Once you marked a characteristic rear/write with a security attribute, a secure links gets established automatically when you are trying to read/write for android (I assume for ios as well) and Bluez with generic USB adapters. Bluegiga serial adapter does not establish secure link automatically, a separate pairing procedure has to be run before reading/writing protected characteristics.",Looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1661,2019-05-15T19:44:03Z,2019-05-16T07:27:46Z,2019-05-16T07:46:19Z,MERGED,True,27,25,2,https://github.com/MaBecker,fix #1507,1,[],https://github.com/espruino/Espruino/pull/1661,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1661,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1661,2019-05-15T19:44:03Z,2019-05-16T07:27:46Z,2019-05-16T07:46:19Z,MERGED,True,27,25,2,https://github.com/MaBecker,fix #1507,1,[],https://github.com/espruino/Espruino/pull/1661,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1661#issuecomment-492811559,,"Hmm something went wrong for ESP8266_BOARD
$ source ./scripts/provision.sh $BOARD
Provision BOARDNAME = ESP8266_BOARD
Provision FAMILY = ESP8266
===== ESP8266
ESP8266_NONOS_SDK-2.2.1
installing xtensa-lx106-elf-gcc
xz: (stdin): File format not recognized
tar: Child died with signal 13
tar: Error is not recoverable: exiting now
curl: (23) Failed writing body (419 != 16384)
GCC is",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1661,2019-05-15T19:44:03Z,2019-05-16T07:27:46Z,2019-05-16T07:46:19Z,MERGED,True,27,25,2,https://github.com/MaBecker,fix #1507,1,[],https://github.com/espruino/Espruino/pull/1661,https://github.com/wilberforce,3,https://github.com/espruino/Espruino/pull/1661#issuecomment-492829623,,"@MaBecker
Make a small change the change log file and it will trigger a re-run of travis",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1661,2019-05-15T19:44:03Z,2019-05-16T07:27:46Z,2019-05-16T07:46:19Z,MERGED,True,27,25,2,https://github.com/MaBecker,fix #1507,1,[],https://github.com/espruino/Espruino/pull/1661,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1661#issuecomment-492951575,,"Thanks! Yeah, sometimes the Travis builds just fail to download stuff properly - but this looks good.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1662,2019-05-16T08:25:13Z,2019-05-16T08:35:05Z,2019-05-16T09:01:43Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix src/jsvar.c:1859:5 warning,1,[],https://github.com/espruino/Espruino/pull/1662,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1662,"src/jsvar.c:1859:5: warning: passing argument 1 of 'jshGetPinFromVar' discards 'const' qualifier from pointer target type [enabled by default]
return (bool)jshIsPinValid(jshGetPinFromVar(v));
^
In file included from src/jsdevices.h:168:0,
from src/jshardware.h:25,
from src/jsinteractive.h:18,
from src/jsvar.c:18:","src/jsvar.c:1859:5: warning: passing argument 1 of 'jshGetPinFromVar' discards 'const' qualifier from pointer target type [enabled by default]
return (bool)jshIsPinValid(jshGetPinFromVar(v));
^
In file included from src/jsdevices.h:168:0,
from src/jshardware.h:25,
from src/jsinteractive.h:18,
from src/jsvar.c:18:",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1662,2019-05-16T08:25:13Z,2019-05-16T08:35:05Z,2019-05-16T09:01:43Z,MERGED,True,1,1,1,https://github.com/MaBecker,fix src/jsvar.c:1859:5 warning,1,[],https://github.com/espruino/Espruino/pull/1662,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1662#issuecomment-492973521,"src/jsvar.c:1859:5: warning: passing argument 1 of 'jshGetPinFromVar' discards 'const' qualifier from pointer target type [enabled by default]
return (bool)jshIsPinValid(jshGetPinFromVar(v));
^
In file included from src/jsdevices.h:168:0,
from src/jshardware.h:25,
from src/jsinteractive.h:18,
from src/jsvar.c:18:",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1664,2019-05-17T18:04:16Z,2019-05-20T09:23:45Z,2019-05-20T14:21:58Z,CLOSED,False,2,1,2,https://github.com/MaBecker,set variables to 1700,1,[],https://github.com/espruino/Espruino/pull/1664,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1664,freeHeap: 10856,freeHeap: 10856,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1664,2019-05-17T18:04:16Z,2019-05-20T09:23:45Z,2019-05-20T14:21:58Z,CLOSED,False,2,1,2,https://github.com/MaBecker,set variables to 1700,1,[],https://github.com/espruino/Espruino/pull/1664,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1664#issuecomment-493905767,freeHeap: 10856,Are you sure that's enough? the freeHeap might include stack too - so if you open eg. two TCPIP connections it might drop a lot,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1664,2019-05-17T18:04:16Z,2019-05-20T09:23:45Z,2019-05-20T14:21:58Z,CLOSED,False,2,1,2,https://github.com/MaBecker,set variables to 1700,1,[],https://github.com/espruino/Espruino/pull/1664,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1664#issuecomment-493907378,freeHeap: 10856,"ok, drop it for now and do some more tests",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1666,2019-05-21T01:58:15Z,2019-05-21T07:09:41Z,2019-05-21T10:33:15Z,MERGED,True,5,0,1,https://github.com/dgazzoni,Fix APB1 overclocking on STM32F4DISCOVERY.,1,[],https://github.com/espruino/Espruino/pull/1666,https://github.com/dgazzoni,1,https://github.com/espruino/Espruino/pull/1666,Fixes #1665.,Fixes #1665.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/beanjs,1,https://github.com/espruino/Espruino/pull/1670,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test","Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/beanjs,2,https://github.com/espruino/Espruino/pull/1670#issuecomment-501220055,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test",@MaBecker,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1670#issuecomment-501826998,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test",@beanjs can W600 do i2c master and slave?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/beanjs,4,https://github.com/espruino/Espruino/pull/1670#issuecomment-501828766,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test",on my port，only support master。but sdk can do master and slave,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/beanjs,5,https://github.com/espruino/Espruino/pull/1670#issuecomment-502156199,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test","porting complete, please merge it. @gfwilliams",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/beanjs,6,https://github.com/espruino/Espruino/pull/1670#issuecomment-502157658,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test","w600 build environment on Docker:https://github.com/beanjs-framework/dev-env
twitter:https://twitter.com/w600chip",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1670#issuecomment-502613065,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test","Wow, that was impressively fast! This looks great!
I don't believe creating a new jshConsoleSetup function is needed though - if jshIsDeviceInitialised, jshUSARTSetup should get called automatically I believe... At least it works on all other platforms.
I'll merge this into UNMAINTAINED_BOARDS for the moment and see what happens - it's great that you've done this but I don't get funding for any of the work on Espruino, and I can't afford to work for free to ensure that every time I make a change all the builds for new boards keep building.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1670,2019-06-12T09:39:53Z,2019-06-17T10:02:58Z,2019-06-17T10:02:58Z,CLOSED,False,2866,10,31,https://github.com/beanjs,W600 porting,15,[],https://github.com/espruino/Espruino/pull/1670,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1670#issuecomment-502619236,"Feature


 GPIO
 UART
 SPI
 I2C
 wifi
 netwotk
 test","Ok, now merged and part of https://github.com/espruino/Espruino/tree/UNMAINTAINED_BOARDS/targets/w600
thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1674,2019-06-14T14:47:57Z,2019-06-17T08:13:14Z,2019-06-18T12:46:59Z,MERGED,True,2,3,2,https://github.com/fanoush,Wiringpi pinmode fix,2,[],https://github.com/espruino/Espruino/pull/1674,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1674,PR for issue #1673,PR for issue #1673,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1674,2019-06-14T14:47:57Z,2019-06-17T08:13:14Z,2019-06-18T12:46:59Z,MERGED,True,2,3,2,https://github.com/fanoush,Wiringpi pinmode fix,2,[],https://github.com/espruino/Espruino/pull/1674,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1674#issuecomment-502580664,PR for issue #1673,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1675,2019-06-14T15:24:24Z,2019-06-17T08:12:23Z,2019-06-17T08:12:23Z,MERGED,True,12,10,1,https://github.com/fanoush,fix jswrap_graphics_asBMP to take rotation into account,1,[],https://github.com/espruino/Espruino/pull/1675,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1675,PR for issue #1672,PR for issue #1672,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1675,2019-06-14T15:24:24Z,2019-06-17T08:12:23Z,2019-06-17T08:12:23Z,MERGED,True,12,10,1,https://github.com/fanoush,fix jswrap_graphics_asBMP to take rotation into account,1,[],https://github.com/espruino/Espruino/pull/1675,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1675#issuecomment-502580412,PR for issue #1672,Brilliant -thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1678,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1678#issuecomment-505176542,,"Ups, compile for ESP8266_4MB failed and ESP8266_BOARD build without erros?!
checked: failed for code I have not touched?
Ok travis build is using gcc 5.4,I am using gcc 4.8.5, this this the reason
4.8.5 is the recommended version by espressif for SDK 2.2.1",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1678#issuecomment-505178039,,"looks like SDK could not installed ....
==== ESP8266
ESP8266_NONOS_SDK-2.2.1
curl: (7) Failed to connect to github.com port 443: Connection timed out
gzip: stdin: unexpected end of file
tar: Child returned status 1
tar: Error is not recoverable: exiting now",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1678#issuecomment-505328650,,"Could you try making a minor commit to your branch? Like change some whitespace?
It was probably just a one-off failure in Travis and that'll kick off a new build",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1678#issuecomment-505332754,,"Thanks - however it's a shame to have to have more tweaks in jsutils for espruino_snprintf - as now it's doing a copy of the format string every single time it's called. It's also strangely different to what's already done in jsutils to errors/etc: https://github.com/espruino/Espruino/blob/master/src/jsutils.h#L399-L416
So as I understand it, the issue is just accessing single bytes from flash storage? Your solution actually pulls the whole string out of flash into RAM for every string before running.
It looks like vcbprintf is the culprit as it just accesses chars directly:  https://github.com/espruino/Espruino/blob/master/src/jsutils.c#L705
so you could just change every instance of *fmt in vcbprintf to READ_FLASH_UINT8(fmt) and I think it'd work fine without changes? The ESP8266 specific hacks could probably also be improved (https://github.com/espruino/Espruino/blob/master/src/jsutils.h#L399-L416), albeit not removed since you still need to have to use FLASH_STR to force the strings into flash.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1678,2019-06-24T20:17:53Z,2019-06-25T21:52:04Z,2019-06-25T21:52:11Z,CLOSED,False,56,23,8,https://github.com/MaBecker,"use espruino_snprintf, freeHeap +192byte (fix 1677)",1,[],https://github.com/espruino/Espruino/pull/1678,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1678#issuecomment-505636657,,"Thanks - however it's a shame to have to have more tweaks in jsutils for espruino_snprintf - as now it's doing a copy of the format string every single time it's called. It's also strangely different to what's already done in jsutils to errors/etc:

Ok, so do not merge this, as 192 bytes are not a big win.

So as I understand it, the issue is just accessing single bytes from flash storage? Your solution actually pulls the whole string out of flash into RAM for every string before running.

No sure about this",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1680,2019-06-25T12:26:59Z,2019-06-25T12:39:02Z,2019-06-25T13:13:54Z,MERGED,True,1,1,1,https://github.com/fanoush,fix lcdGetPixel_SDL reading wrong pixels,1,[],https://github.com/espruino/Espruino/pull/1680,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1680,"Multiply by width was missing in GetPixel, now using same code as in SetPixel.
Current bug causes Graphics.scroll(x, y) to produce very strange patterns, after fix it works as expected.","Multiply by width was missing in GetPixel, now using same code as in SetPixel.
Current bug causes Graphics.scroll(x, y) to produce very strange patterns, after fix it works as expected.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1680,2019-06-25T12:26:59Z,2019-06-25T12:39:02Z,2019-06-25T13:13:54Z,MERGED,True,1,1,1,https://github.com/fanoush,fix lcdGetPixel_SDL reading wrong pixels,1,[],https://github.com/espruino/Espruino/pull/1680,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1680#issuecomment-505425942,"Multiply by width was missing in GetPixel, now using same code as in SetPixel.
Current bug causes Graphics.scroll(x, y) to produce very strange patterns, after fix it works as expected.","Nice, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1681,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.","a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1681#issuecomment-506628307,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.","Nice! Does this actually use more flash memory then, so it can't be used on the 512k one?
Generally moving from RAM to Flash doesn't use more flash, since even when the data is in RAM, it has to be loaded from flash at boot time anyway.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1681#issuecomment-506633360,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.","so it can't be used on the 512k one?

True, because CFLAG -mforce-l32 is needed for this rename, but this blows up the firmware size for ESP8266_BOARD builds.
  8 -rwxr-xr-x  1 markbecker  staff    2188 28 Jun 09:20 eagle.app.v6.data.bin
872 -rwxr-xr-x  1 markbecker  staff  444228 28 Jun 09:20 eagle.app.v6.irom0text.bin
 16 -rwxr-xr-x  1 markbecker  staff    7012 28 Jun 09:20 eagle.app.v6.rodata.bin
 56 -rwxr-xr-x  1 markbecker  staff   28576 28 Jun 09:20 eagle.app.v6.text.bin
** user1.bin uses  489172 bytes of 479232 available
espruino_esp8266_user1.bin too big!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1681#issuecomment-506635808,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.","Ahh, gotcha - so just to check -mforce-l32 is actually applied to the 4MB already? I didn't see it in this change.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1681#issuecomment-506638351,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.","not sure when this was added :)
https://github.com/espruino/Espruino/blob/master/make/family/ESP8266.make#L71-L74",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1681,2019-06-28T05:01:24Z,2019-06-28T07:51:20Z,2019-06-28T07:58:38Z,MERGED,True,6,2,2,https://github.com/MaBecker,ESP8266 more heap (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1681,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1681#issuecomment-506639732,"a win of +2064 byte for freeHeap, only for ESP8266_4MB
print out header details for  section 0. - 5.",Neat - thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1683,2019-06-29T08:44:24Z,2019-07-01T07:28:14Z,2019-07-01T07:32:14Z,MERGED,True,1,1,1,https://github.com/MaBecker,add setOptions description (fix #1682),1,[],https://github.com/espruino/Espruino/pull/1683,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1683,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1683,2019-06-29T08:44:24Z,2019-07-01T07:28:14Z,2019-07-01T07:32:14Z,MERGED,True,1,1,1,https://github.com/MaBecker,add setOptions description (fix #1682),1,[],https://github.com/espruino/Espruino/pull/1683,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1683#issuecomment-507149127,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1686,2019-07-08T11:31:27Z,2019-07-09T07:37:17Z,2019-07-09T07:37:17Z,MERGED,True,12,1,1,https://github.com/jumjum123,Added remove blacklist for class and instanceof in build_jswrapper.py…,1,[],https://github.com/espruino/Espruino/pull/1686,https://github.com/jumjum123,1,https://github.com/espruino/Espruino/pull/1686,… (function removeBlacklistForWrapper),… (function removeBlacklistForWrapper),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1686,2019-07-08T11:31:27Z,2019-07-09T07:37:17Z,2019-07-09T07:37:17Z,MERGED,True,12,1,1,https://github.com/jumjum123,Added remove blacklist for class and instanceof in build_jswrapper.py…,1,[],https://github.com/espruino/Espruino/pull/1686,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1686#issuecomment-509527581,… (function removeBlacklistForWrapper),Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1688,2019-08-15T09:30:09Z,2019-12-09T15:01:00Z,2019-12-09T15:01:00Z,MERGED,True,1,1,1,https://github.com/AkosLukacs,ESP32 'speed' was wrong,1,[],https://github.com/espruino/Espruino/pull/1688,https://github.com/AkosLukacs,1,https://github.com/espruino/Espruino/pull/1688,"Is this used anywhere in the code or build, or just docs?
The sdkconfig in ESP32's directory says 240:
CONFIG_ESP32_DEFAULT_CPU_FREQ_80=
CONFIG_ESP32_DEFAULT_CPU_FREQ_160=
CONFIG_ESP32_DEFAULT_CPU_FREQ_240=y
CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ=240","Is this used anywhere in the code or build, or just docs?
The sdkconfig in ESP32's directory says 240:
CONFIG_ESP32_DEFAULT_CPU_FREQ_80=
CONFIG_ESP32_DEFAULT_CPU_FREQ_160=
CONFIG_ESP32_DEFAULT_CPU_FREQ_240=y
CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ=240",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1688,2019-08-15T09:30:09Z,2019-12-09T15:01:00Z,2019-12-09T15:01:00Z,MERGED,True,1,1,1,https://github.com/AkosLukacs,ESP32 'speed' was wrong,1,[],https://github.com/espruino/Espruino/pull/1688,https://github.com/wilberforce,2,https://github.com/espruino/Espruino/pull/1688#issuecomment-521589241,"Is this used anywhere in the code or build, or just docs?
The sdkconfig in ESP32's directory says 240:
CONFIG_ESP32_DEFAULT_CPU_FREQ_80=
CONFIG_ESP32_DEFAULT_CPU_FREQ_160=
CONFIG_ESP32_DEFAULT_CPU_FREQ_240=y
CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ=240","For the esp32 I don't believe it used used as an input for anything, just informational",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1692,2019-08-27T21:01:11Z,2019-08-28T07:34:18Z,2019-08-28T07:44:56Z,MERGED,True,2,1,2,https://github.com/MaBecker,reverse  (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1692,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1692,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1692,2019-08-27T21:01:11Z,2019-08-28T07:34:18Z,2019-08-28T07:44:56Z,MERGED,True,2,1,2,https://github.com/MaBecker,reverse  (fix #1679),1,[],https://github.com/espruino/Espruino/pull/1692,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1692#issuecomment-525621611,,Thanks! Information on why is in #1679,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1694,2019-09-11T15:05:37Z,2019-09-11T16:12:36Z,2019-09-11T16:17:39Z,MERGED,True,1,1,2,https://github.com/MaBecker,warning: Empty loadable segment detected (fix #1690),2,[],https://github.com/espruino/Espruino/pull/1694,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1694,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1694,2019-09-11T15:05:37Z,2019-09-11T16:12:36Z,2019-09-11T16:17:39Z,MERGED,True,1,1,2,https://github.com/MaBecker,warning: Empty loadable segment detected (fix #1690),2,[],https://github.com/espruino/Espruino/pull/1694,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1694#issuecomment-530452433,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1697,2019-10-10T20:23:26Z,2019-10-11T12:44:12Z,2019-10-11T12:44:12Z,MERGED,True,2,1,1,https://github.com/AkosLukacs,Does this fix the Puck build?,1,[],https://github.com/espruino/Espruino/pull/1697,https://github.com/AkosLukacs,1,https://github.com/espruino/Espruino/pull/1697,Don't over bangle yourself Gordon :),Don't over bangle yourself Gordon :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1697,2019-10-10T20:23:26Z,2019-10-11T12:44:12Z,2019-10-11T12:44:12Z,MERGED,True,2,1,1,https://github.com/AkosLukacs,Does this fix the Puck build?,1,[],https://github.com/espruino/Espruino/pull/1697,https://github.com/AkosLukacs,2,https://github.com/espruino/Espruino/pull/1697#issuecomment-540789243,Don't over bangle yourself Gordon :),"Yes, this fixes the Puck build. Altho I'm just guessing :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1697,2019-10-10T20:23:26Z,2019-10-11T12:44:12Z,2019-10-11T12:44:12Z,MERGED,True,2,1,1,https://github.com/AkosLukacs,Does this fix the Puck build?,1,[],https://github.com/espruino/Espruino/pull/1697,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1697#issuecomment-541048726,Don't over bangle yourself Gordon :),Thanks! I merged the bangle branch in a bit of a hurry when I found the DFU update wasn't going :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/ipepe,1,https://github.com/espruino/Espruino/pull/1699,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1699#issuecomment-664180111,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.",No reply...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/ipepe,3,https://github.com/espruino/Espruino/pull/1699#issuecomment-664234711,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.",What reply was needed @gfwilliams ?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1699#issuecomment-664236721,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.",I'd asked: Does this line overwrite what was proviously specified in docker-compose.yml? - you should see it above?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/ipepe,5,https://github.com/espruino/Espruino/pull/1699#issuecomment-664238987,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","That's how it looks on my side: 
I'm not sure what do You mean with that question. Which line?
EDIT: Sometimes commenting on code does not show up for other developer unless You submit ""full review"" (because Your review is in progress/draft?)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1699#issuecomment-664827638,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","Sorry - looks like that was my fault - I assumed review comments appeared automatically but it looks like it needed submitting...
This is what I had anyway...

So my concern was: Does it always build ALL boards now?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/ipepe,7,https://github.com/espruino/Espruino/pull/1699#issuecomment-670677740,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","Sorry - looks like that was my fault - I assumed review comments appeared automatically but it looks like it needed submitting...
This is what I had anyway...

So my concern was: Does it always build ALL boards now?

Yes. But You can override it by env variable in docker-compose.yml",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1699#issuecomment-674703270,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","Ok, great!
Looks like there are some merge conflicts now I'm afraid. Do you think you'd be able to help sort those out as I might break it doing so myself?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/ipepe,9,https://github.com/espruino/Espruino/pull/1699#issuecomment-674749198,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","I will take a look this week, I will refresh this PR and see what cloud be done better. Do You want me to make any specific changes?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1699,2019-10-20T18:04:26Z,2020-10-29T08:13:55Z,2020-10-29T08:13:55Z,CLOSED,False,24,22,3,https://github.com/ipepe,Added docker-compose.yml for easier building of Espruino,2,[],https://github.com/espruino/Espruino/pull/1699,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/1699#issuecomment-674755148,"Regarding #1689 I fixed building Espruino in Docker, also added docker-compose so it's much easier to build yourself an image.","Thanks! I don't have any specific requests, no - it looks good",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1708,2019-11-29T22:00:31Z,2019-11-30T10:44:41Z,2019-12-02T13:59:34Z,MERGED,True,1,1,1,https://github.com/mfikes,Fix I2C driver message,1,[],https://github.com/espruino/Espruino/pull/1708,https://github.com/mfikes,1,https://github.com/espruino/Espruino/pull/1708,Fix typo: sdl->scl,Fix typo: sdl->scl,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1708,2019-11-29T22:00:31Z,2019-11-30T10:44:41Z,2019-12-02T13:59:34Z,MERGED,True,1,1,1,https://github.com/mfikes,Fix I2C driver message,1,[],https://github.com/espruino/Espruino/pull/1708,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1708#issuecomment-559945779,Fix typo: sdl->scl,Thanks! :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1709,2019-12-01T02:18:04Z,2019-12-02T08:41:37Z,2019-12-02T13:59:32Z,MERGED,True,1,1,1,https://github.com/mfikes,Fix typo in partitions_espruino.csv reference,1,[],https://github.com/espruino/Espruino/pull/1709,https://github.com/mfikes,1,https://github.com/espruino/Espruino/pull/1709,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1709,2019-12-01T02:18:04Z,2019-12-02T08:41:37Z,2019-12-02T13:59:32Z,MERGED,True,1,1,1,https://github.com/mfikes,Fix typo in partitions_espruino.csv reference,1,[],https://github.com/espruino/Espruino/pull/1709,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1709#issuecomment-560292209,,Thanks :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1711,2019-12-03T12:35:06Z,2019-12-03T12:46:27Z,2019-12-03T13:43:16Z,MERGED,True,3,3,1,https://github.com/AkosLukacs,Small docs fixes,1,[],https://github.com/espruino/Espruino/pull/1711,https://github.com/AkosLukacs,1,https://github.com/espruino/Espruino/pull/1711,"Admittedly, just guessing without the Bangle :)","Admittedly, just guessing without the Bangle :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1711,2019-12-03T12:35:06Z,2019-12-03T12:46:27Z,2019-12-03T13:43:16Z,MERGED,True,3,3,1,https://github.com/AkosLukacs,Small docs fixes,1,[],https://github.com/espruino/Espruino/pull/1711,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1711#issuecomment-561151727,"Admittedly, just guessing without the Bangle :)",Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1714,2019-12-06T06:11:11Z,2019-12-06T08:10:27Z,2019-12-06T08:44:26Z,MERGED,True,2,0,1,https://github.com/fanoush,fail build if initialized data+code does not fit ito bootloader area,1,[],https://github.com/espruino/Espruino/pull/1714,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1714,"Initialized data is stored after code into FLASH  memory and is copied to RAM at startup, so testing only for code size is not enough.
Taken basically from https://stackoverflow.com/questions/23017522/deteaction-of-memory-section-overflow-in-ld","Initialized data is stored after code into FLASH  memory and is copied to RAM at startup, so testing only for code size is not enough.
Taken basically from https://stackoverflow.com/questions/23017522/deteaction-of-memory-section-overflow-in-ld",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1714,2019-12-06T06:11:11Z,2019-12-06T08:10:27Z,2019-12-06T08:44:26Z,MERGED,True,2,0,1,https://github.com/fanoush,fail build if initialized data+code does not fit ito bootloader area,1,[],https://github.com/espruino/Espruino/pull/1714,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1714#issuecomment-562475525,"Initialized data is stored after code into FLASH  memory and is copied to RAM at startup, so testing only for code size is not enough.
Taken basically from https://stackoverflow.com/questions/23017522/deteaction-of-memory-section-overflow-in-ld",Awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1717,2019-12-06T18:18:26Z,2019-12-06T20:14:05Z,2019-12-06T20:54:59Z,CLOSED,False,2,0,1,https://github.com/MaBecker,tweak gfx->data.clipRect (fix #1715),1,[],https://github.com/espruino/Espruino/pull/1717,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1717,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1717,2019-12-06T18:18:26Z,2019-12-06T20:14:05Z,2019-12-06T20:54:59Z,CLOSED,False,2,0,1,https://github.com/MaBecker,tweak gfx->data.clipRect (fix #1715),1,[],https://github.com/espruino/Espruino/pull/1717,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1717#issuecomment-562721638,,Thanks - it was actually a code issue though,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1719,2019-12-07T13:34:06Z,2019-12-09T15:00:15Z,2019-12-09T15:11:50Z,MERGED,True,5,1,1,https://github.com/MaBecker,fix build error BOARD=LINUX on MACOSX (fix #1718),1,[],https://github.com/espruino/Espruino/pull/1719,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1719,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1719,2019-12-07T13:34:06Z,2019-12-09T15:00:15Z,2019-12-09T15:11:50Z,MERGED,True,5,1,1,https://github.com/MaBecker,fix build error BOARD=LINUX on MACOSX (fix #1718),1,[],https://github.com/espruino/Espruino/pull/1719,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1719#issuecomment-563129607,,"Thanks - but have you tried this when building for a microcontoller?
MACOSX gets set whenever building ON MacOS as far as I can see, regardless of whether you're building FOR it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1719,2019-12-07T13:34:06Z,2019-12-09T15:00:15Z,2019-12-09T15:11:50Z,MERGED,True,5,1,1,https://github.com/MaBecker,fix build error BOARD=LINUX on MACOSX (fix #1718),1,[],https://github.com/espruino/Espruino/pull/1719,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1719#issuecomment-563194585,,"Thanks - but have you tried this when building for a microcontoller?

Checked build for

LINUX
ESP8266_4MB
PICO
PIXL
BANGLEJS",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1719,2019-12-07T13:34:06Z,2019-12-09T15:00:15Z,2019-12-09T15:11:50Z,MERGED,True,5,1,1,https://github.com/MaBecker,fix build error BOARD=LINUX on MACOSX (fix #1718),1,[],https://github.com/espruino/Espruino/pull/1719,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1719#issuecomment-563277637,,"Ahh, sorry - didn't realise this was under the ifdef for LINUX",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1720,2019-12-09T11:40:38Z,2019-12-09T14:06:19Z,2019-12-09T14:14:21Z,MERGED,True,45,51,1,https://github.com/MaBecker,new ellipse,2,[],https://github.com/espruino/Espruino/pull/1720,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1720,"might be a bit slower
has no spilkes","might be a bit slower
has no spilkes",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1720,2019-12-09T11:40:38Z,2019-12-09T14:06:19Z,2019-12-09T14:14:21Z,MERGED,True,45,51,1,https://github.com/MaBecker,new ellipse,2,[],https://github.com/espruino/Espruino/pull/1720,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1720#issuecomment-563250382,"might be a bit slower
has no spilkes","Great, thanks! Would it be possible to translate the fehlerhafter Abbruch bei flachen Ellipsen comment to english?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1720,2019-12-09T11:40:38Z,2019-12-09T14:06:19Z,2019-12-09T14:14:21Z,MERGED,True,45,51,1,https://github.com/MaBecker,new ellipse,2,[],https://github.com/espruino/Espruino/pull/1720,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1720#issuecomment-563252499,"might be a bit slower
has no spilkes",done,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1725,2019-12-17T01:19:22Z,2019-12-17T09:20:33Z,2019-12-17T09:20:33Z,MERGED,True,2,2,1,https://github.com/mfikes,Improper decoding of string BLE UUIDs,1,[],https://github.com/espruino/Espruino/pull/1725,https://github.com/mfikes,1,https://github.com/espruino/Espruino/pull/1725,Fixes #1724,Fixes #1724,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1725,2019-12-17T01:19:22Z,2019-12-17T09:20:33Z,2019-12-17T09:20:33Z,MERGED,True,2,2,1,https://github.com/mfikes,Improper decoding of string BLE UUIDs,1,[],https://github.com/espruino/Espruino/pull/1725,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1725#issuecomment-566455205,Fixes #1724,Great - thanks for this!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1726,2019-12-17T02:53:12Z,2019-12-17T09:28:49Z,2019-12-17T09:28:49Z,MERGED,True,9,3,1,https://github.com/mfikes,ESP32 mishandling of string BLE UUIDs in NRF.setServices(),1,[],https://github.com/espruino/Espruino/pull/1726,https://github.com/mfikes,1,https://github.com/espruino/Espruino/pull/1726,"Fixes #1723
Note that, in the BLE_UUID_TYPE_128 branch, the patch preserves this questionable assignment setting the uuid field:
uuid->uuid = ((data[13]<<8) | data[12]);
With this patch, you can emperically see that 16-byte UUID characteristics are not yet properly honored on the ESP32, with the UUID depending on the 2-byte value assigned above.
My hunch is that, if the BLE characteristic initialization code on the ESP32 is fixed to address this (so that 16-byte characteristic UUIDs work), then the preserved assignment mentioned above should be removed.
(On the other hand, service UUIDs empirically appear to be properly initialized on the ESP32 and can handle 16-byte UUIDs.)","Fixes #1723
Note that, in the BLE_UUID_TYPE_128 branch, the patch preserves this questionable assignment setting the uuid field:
uuid->uuid = ((data[13]<<8) | data[12]);
With this patch, you can emperically see that 16-byte UUID characteristics are not yet properly honored on the ESP32, with the UUID depending on the 2-byte value assigned above.
My hunch is that, if the BLE characteristic initialization code on the ESP32 is fixed to address this (so that 16-byte characteristic UUIDs work), then the preserved assignment mentioned above should be removed.
(On the other hand, service UUIDs empirically appear to be properly initialized on the ESP32 and can handle 16-byte UUIDs.)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1726,2019-12-17T02:53:12Z,2019-12-17T09:28:49Z,2019-12-17T09:28:49Z,MERGED,True,9,3,1,https://github.com/mfikes,ESP32 mishandling of string BLE UUIDs in NRF.setServices(),1,[],https://github.com/espruino/Espruino/pull/1726,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1726#issuecomment-566458382,"Fixes #1723
Note that, in the BLE_UUID_TYPE_128 branch, the patch preserves this questionable assignment setting the uuid field:
uuid->uuid = ((data[13]<<8) | data[12]);
With this patch, you can emperically see that 16-byte UUID characteristics are not yet properly honored on the ESP32, with the UUID depending on the 2-byte value assigned above.
My hunch is that, if the BLE characteristic initialization code on the ESP32 is fixed to address this (so that 16-byte characteristic UUIDs work), then the preserved assignment mentioned above should be removed.
(On the other hand, service UUIDs empirically appear to be properly initialized on the ESP32 and can handle 16-byte UUIDs.)","Thanks for your work on this - ESP32 BLE definitely needs some love (and looks like you already tracked down an issue that affects other devices as well).
The 12/13 assignment does (I believe) fit with the BLE spec - so if for instance the 128 bit UUID 0000xxxx-0000-1000-8000-00805F9B34FB was specified (which is what a 16 bit UUID actually is) then the 16 bit UUID field would then contain the correct UUID.
But yeah, if the ESP32 code correctly used something other than ESP_UUID_LEN_16 then I guess it wouldn't matter anyway,
In some respects it might be safer to actually remove ->uuid and just use ->uuidf128 for everything.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1735,2020-01-02T07:40:41Z,2020-01-06T11:23:48Z,2020-01-06T11:23:48Z,MERGED,True,2,2,1,https://github.com/ikkala,Parse GPS longitudes (and latitudes) in radix 10,1,[],https://github.com/espruino/Espruino/pull/1735,https://github.com/ikkala,1,https://github.com/espruino/Espruino/pull/1735,"Fixes #1733
Before this fix, for example longitude 025 degrees was parsed to 21 because parseInt interprets the longitude as octals.","Fixes #1733
Before this fix, for example longitude 025 degrees was parsed to 21 because parseInt interprets the longitude as octals.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1735,2020-01-02T07:40:41Z,2020-01-06T11:23:48Z,2020-01-06T11:23:48Z,MERGED,True,2,2,1,https://github.com/ikkala,Parse GPS longitudes (and latitudes) in radix 10,1,[],https://github.com/espruino/Espruino/pull/1735,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1735#issuecomment-571104198,"Fixes #1733
Before this fix, for example longitude 025 degrees was parsed to 21 because parseInt interprets the longitude as octals.",Thank you for tracking this down and fixing - that's awesome!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1741,2020-01-09T06:36:35Z,2020-01-09T09:13:19Z,2020-01-09T09:13:19Z,MERGED,True,3,2,1,https://github.com/AkosLukacs,MDBT42Q - change neopixel clock pin to D23,1,[],https://github.com/espruino/Espruino/pull/1741,https://github.com/AkosLukacs,1,https://github.com/espruino/Espruino/pull/1741,"Moved the neopixel clock pin to the unrouted D23 pin.
Before: D22 couldn't be used. When I tried to check it with my DMM's frequency counter mode, that messed up neopixel timings. Apparently that is not a high-impedance input....
After: D22 can be used, and neopixel still works :)","Moved the neopixel clock pin to the unrouted D23 pin.
Before: D22 couldn't be used. When I tried to check it with my DMM's frequency counter mode, that messed up neopixel timings. Apparently that is not a high-impedance input....
After: D22 can be used, and neopixel still works :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1741,2020-01-09T06:36:35Z,2020-01-09T09:13:19Z,2020-01-09T09:13:19Z,MERGED,True,3,2,1,https://github.com/AkosLukacs,MDBT42Q - change neopixel clock pin to D23,1,[],https://github.com/espruino/Espruino/pull/1741,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1741#issuecomment-572464826,"Moved the neopixel clock pin to the unrouted D23 pin.
Before: D22 couldn't be used. When I tried to check it with my DMM's frequency counter mode, that messed up neopixel timings. Apparently that is not a high-impedance input....
After: D22 can be used, and neopixel still works :)",Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1743,2020-01-10T16:11:19Z,2020-01-16T16:09:01Z,2020-01-16T16:51:32Z,CLOSED,False,61,0,3,https://github.com/MaBecker,add squared bezier curve,2,[],https://github.com/espruino/Espruino/pull/1743,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1743,as discussed in New vector font #1721,as discussed in New vector font #1721,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1743,2020-01-10T16:11:19Z,2020-01-16T16:09:01Z,2020-01-16T16:51:32Z,CLOSED,False,61,0,3,https://github.com/MaBecker,add squared bezier curve,2,[],https://github.com/espruino/Espruino/pull/1743,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1743#issuecomment-575223517,as discussed in New vector font #1721,Not sure any more if this is really needed.....,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1743,2020-01-10T16:11:19Z,2020-01-16T16:09:01Z,2020-01-16T16:51:32Z,CLOSED,False,61,0,3,https://github.com/MaBecker,add squared bezier curve,2,[],https://github.com/espruino/Espruino/pull/1743,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1743#issuecomment-575223586,as discussed in New vector font #1721,Not sure any more if this is really needed.....,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1743,2020-01-10T16:11:19Z,2020-01-16T16:09:01Z,2020-01-16T16:51:32Z,CLOSED,False,61,0,3,https://github.com/MaBecker,add squared bezier curve,2,[],https://github.com/espruino/Espruino/pull/1743,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1743#issuecomment-575235740,as discussed in New vector font #1721,"I don't know - seems like a good utility function to have available. Could be useful for other stuff (like stepper motor control) too.
Although maybe in most cases it'd be fine to have the JS version. Anyone else have any thoughts?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1743,2020-01-10T16:11:19Z,2020-01-16T16:09:01Z,2020-01-16T16:51:32Z,CLOSED,False,61,0,3,https://github.com/MaBecker,add squared bezier curve,2,[],https://github.com/espruino/Espruino/pull/1743,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1743#issuecomment-575243319,as discussed in New vector font #1721,"It's not lost, it will return at leased as  JS module ;-)
But for now it's just needed as a helper for creating fonts.
quadraticBezier.c.txt",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1755,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings","add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1755#issuecomment-596409340,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings","Would it be possible to revert the warning fixes, and the removal of urlize I'd mentioned above? Then I'll happily merge this.
There's definitely at least one case where I'm pretty sure the removal of warnings breaks stuff that did work, and I don't have time right now to go through all of them and check.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1755#issuecomment-596437945,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings","Just did, sorry for mixing things....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1755#issuecomment-596492891,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings",Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/alievrenkut,5,https://github.com/espruino/Espruino/pull/1755#issuecomment-640165933,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings",Thanks for 1MB support. Will you put this version at https://www.espruino.com/Download?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1755#issuecomment-640166531,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings","No, you have to build your own.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1755,2020-02-10T09:20:42Z,2020-03-09T12:14:03Z,2020-06-18T08:56:49Z,MERGED,True,78,24,9,https://github.com/MaBecker,support 1MB ESPs boards,3,[],https://github.com/espruino/Espruino/pull/1755,https://github.com/alievrenkut,7,https://github.com/espruino/Espruino/pull/1755#issuecomment-645879483,"add make flags FLASH_1MB and NO_FOTA
add SPI1 labels to ESP8266
fix some compiler warnings","No, you have to build your own.

I read that we can flash 4MB build to 1MB ESP-01 from file README_flash.txt. Is there any difference between flashing 1MB build or flashing 4MB build using below info from readme:
For 1MB flash use 0xFC000/0xFE000 and for 2MB flash use 0x1FC000/0x1FE000 on the last line.
P.S: http://www.espruino.com/ESP8266_Flashing page does not mention this btw.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1757,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1757#issuecomment-585572478,,Let me know I you like to double  the number of possible vertices from 64 to 128.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1757#issuecomment-585612376,,"Thanks - does it make sense to make sn an optional thing, so the accuracy can be configured?
Just something like:
if (jsvIteratorHasValue(&it)) sn = jsvIteratorGetIntegerValue...

at the end of the iterator stuff would do it nicely.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1757#issuecomment-585833414,,"does it make sense to make sn an optional thing, so the accuracy can be configured?

Yes, this allow full control and wipe out all the calc's with dx,dy ......
this is what it does now
# cacl 10 vertices
g.quadraticBezier([x0, y0, x1, y1, x2, y2],{""count"":10})

# or calc how many vertices should be used max 10 min 1
g.quadraticBezier([x0,y0,x1,y1,x2,y2])

you mean changing it to something like this?
#  number of vertices to calc 
g.quadraticBezier(nvc,[x0,y0,x1,y1,x2,y2])",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1757#issuecomment-585838531,,"Oh right - sorry, not sure why I missed that! Looks great then!
Any chance of just removing the jsiConsolePrintf?
ahh... and by 64 verts you meant the drawPoly stuff? Yes, let's bump that up.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1757#issuecomment-585884496,,"Any chance of just removing the jsiConsolePrintf?

done",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1757,2020-02-12T18:30:23Z,2020-02-14T09:39:22Z,2020-02-15T05:43:38Z,MERGED,True,70,0,3,https://github.com/MaBecker,add g.quadraticBezier,4,[],https://github.com/espruino/Espruino/pull/1757,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1757#issuecomment-586179611,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1772,Try make help to see available targets and their descriptions.,Try make help to see available targets and their descriptions.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1772#issuecomment-596105328,Try make help to see available targets and their descriptions.,Do you know that Makefile for ESP have some flash options?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1772#issuecomment-596105513,Try make help to see available targets and their descriptions.,Most of them download a ready to go firmware and then they struggle because they bought cheap boards with slow flash modes.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1772#issuecomment-596106631,Try make help to see available targets and their descriptions.,"What about maintain the page and the Readme file too.
https://github.com/espruino/EspruinoDocs/blob/master/tutorials/ESP8266_Flashing.md
https://github.com/espruino/Espruino/blob/master/targets/esp8266/README_flash.txt",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1772#issuecomment-596408229,Try make help to see available targets and their descriptions.,"Thanks! Would it be possible to change the location of the Makefile though? And update https://github.com/espruino/Espruino/blob/master/targets/esp8266/README_flash.txt ? All the other boards have the makefiles in the make directory - for example:

nRF52 flashing : https://github.com/espruino/Espruino/blob/master/make/common/NRF5X.make#L461
STM32 flashing: https://github.com/espruino/Espruino/blob/master/make/common/STM32.make#L38",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/opichals,6,https://github.com/espruino/Espruino/pull/1772#issuecomment-596415413,Try make help to see available targets and their descriptions.,"The intention of my addition was that the release .zip files would contain the Makefile for people (me ;)) to avoid constructing the esptool command line arguments over and over when a firmware update is due. The common/XYZ.make files are not distributed along IIRC. There is already ESP8266 flashing present in the makefiles.
@MaBecker The Makefile is basically a copy of the README_flash.txt but for some people that still can be a valid source of information (those not using make) so I am not sure on that one. IMO this should stay (even though redundant). Also in the Makefile descriptions I could add a link to https://www.espruino.com/ESP8266_Flashing for more detailed instructions for cases where the default targets in the makefile would not be sufficient?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1772#issuecomment-596417059,Try make help to see available targets and their descriptions.,"Ahh, sorry - that makes way more sense. Thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1772,2020-03-07T16:07:51Z,2020-03-09T09:21:48Z,2020-03-09T10:14:50Z,MERGED,True,66,1,2,https://github.com/opichals,Add Makefile to easy esptool-based flashing,1,[],https://github.com/espruino/Espruino/pull/1772,https://github.com/MaBecker,8,https://github.com/espruino/Espruino/pull/1772#issuecomment-596441227,Try make help to see available targets and their descriptions.,@opichals Ok - got it.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1774,2020-03-08T12:09:31Z,2020-03-09T08:58:05Z,2020-03-09T12:19:52Z,MERGED,True,70,72,1,https://github.com/MaBecker,some updates,2,[],https://github.com/espruino/Espruino/pull/1774,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1774,"add char code values  as comment
updated of char's > 128","add char code values  as comment
updated of char's > 128",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1774,2020-03-08T12:09:31Z,2020-03-09T08:58:05Z,2020-03-09T12:19:52Z,MERGED,True,70,72,1,https://github.com/MaBecker,some updates,2,[],https://github.com/espruino/Espruino/pull/1774,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1774#issuecomment-596198554,"add char code values  as comment
updated of char's > 128",#1770,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1774,2020-03-08T12:09:31Z,2020-03-09T08:58:05Z,2020-03-09T12:19:52Z,MERGED,True,70,72,1,https://github.com/MaBecker,some updates,2,[],https://github.com/espruino/Espruino/pull/1774,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1774#issuecomment-596198662,"add char code values  as comment
updated of char's > 128",Let me know what you think and if you like me to change things.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1774,2020-03-08T12:09:31Z,2020-03-09T08:58:05Z,2020-03-09T12:19:52Z,MERGED,True,70,72,1,https://github.com/MaBecker,some updates,2,[],https://github.com/espruino/Espruino/pull/1774,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1774#issuecomment-596406120,"add char code values  as comment
updated of char's > 128",This looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1776,2020-03-12T21:53:16Z,2020-03-13T08:00:41Z,2020-03-13T08:36:41Z,MERGED,True,5,2,2,https://github.com/MaBecker,updates for using a new partitions_espruino.bin,1,[],https://github.com/espruino/Espruino/pull/1776,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1776,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1776,2020-03-12T21:53:16Z,2020-03-13T08:00:41Z,2020-03-13T08:36:41Z,MERGED,True,5,2,2,https://github.com/MaBecker,updates for using a new partitions_espruino.bin,1,[],https://github.com/espruino/Espruino/pull/1776,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1776#issuecomment-598597803,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1776,2020-03-12T21:53:16Z,2020-03-13T08:00:41Z,2020-03-13T08:36:41Z,MERGED,True,5,2,2,https://github.com/MaBecker,updates for using a new partitions_espruino.bin,1,[],https://github.com/espruino/Espruino/pull/1776,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1776#issuecomment-598609736,,Thanks,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1780,by removing FLASHFS,by removing FLASHFS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1780#issuecomment-600484312,by removing FLASHFS,added pr #1779,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1780#issuecomment-600491491,by removing FLASHFS,"FlashFS was there for a reason (to provide easy access to on-chip flash). I'm not sure it should just be removed?
@wilberforce was the one that added it AFAIK.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1780#issuecomment-600503033,by removing FLASHFS,"Just checked, ESP32 is the one and only that is using FlashFS.

FlashFS was there for a reason (to provide easy access to on-chip flash). I'm not sure it should just be removed?

Can you please lookup the download stat for ESP32.
Personally I am a big fan of the Storage lib and try to avoid SDCards where ever it is possible.
There are only very little section added as flash 8k and 64k

  
    
      Espruino/targets/esp32/jshardware.c
    
    
        Lines 733 to 742
      in
      e568c6c
    
  
  
    

        
          
           JsVar *jshFlashGetFree() { 
        

        
          
             JsVar *jsFreeFlash = jsvNewEmptyArray(); 
        

        
          
             if (!jsFreeFlash) return 0; 
        

        
          
             // Space reserved here in the parition table -  using sub type 0x40 
        

        
          
             // This should be read from the partition table 
        

        
          
             addFlashArea(jsFreeFlash, 0xE000,  0x2000); 
        

        
          
             addFlashArea(jsFreeFlash, 0x2B0000, 0x10000); 
        

        
          
            
        

        
          
             return jsFreeFlash; 
        

        
          
           } 
        
    
  


Ups   0x2B0000 has to be changed to 0x310000",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1780#issuecomment-600509463,by removing FLASHFS,just added #1781,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/wilberforce,6,https://github.com/espruino/Espruino/pull/1780#issuecomment-600921686,by removing FLASHFS,"I don't understand why removing this is an improvement to the ESP32 implementation.
All chips have 4MB or more of memory, and 1Mb had been reserved at work as FlashFS.
Why would you remove this to use an external SD card that only some of the boards have?
Worst case - make it switchable to use either - I just don't see what the benefit is here?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1780#issuecomment-600986194,by removing FLASHFS,Thanks for your input. Will check if both can be used.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1780#issuecomment-601043537,by removing FLASHFS,"Another option is now Storage is better, to extend the flash area used for that and remove FlashFS.",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/1780#issuecomment-601124386,by removing FLASHFS,"Using both at the same time cause a undefined reference  to sdSPISetup
libs/filesystem/jswrap_file.o:(.literal.jswrap_file_kill+0x0): undefined reference to `sdSPISetup'
libs/filesystem/jswrap_file.o: In function `jswrap_file_kill':
/Espruino/repos/MaBecker/libs/filesystem/jswrap_file.c:214: undefined reference to `sdSPISetup'
libs/filesystem/jswrap_file.o: In function `jswrap_E_connectSDCard':
/Espruino/repos/MaBecker/libs/filesystem/jswrap_file.c:155: undefined reference to `sdSPISetup'
collect2: error: ld returned 1 exit status",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,10,https://github.com/espruino/Espruino/pull/1780#issuecomment-618201671,by removing FLASHFS,"Not sure how to continue.
Fact :  Adding FLASHFS has broken SDCard function.
Suggestion: Remove FLASHFS for now and bring it back when someone has fixed the linker issue.
OR: Close this and remove SDCard support form ESP32 docs.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,11,https://github.com/espruino/Espruino/pull/1780#issuecomment-657483171,by removing FLASHFS,Any hints how to handle the conflict named above?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/gfwilliams,12,https://github.com/espruino/Espruino/pull/1780#issuecomment-657545221,by removing FLASHFS,"I guess I feel a little like given how much flash there is available, having the filesystem built in is probably more useful than SD card support? I haven't seen too many ESPxx boards with SD cards on? Maybe just the ESP32CAM ones?
I think probably just update the docs to say it's not supported? I don't think you can easily have them coexist since FlashFS uses a 4k block size but SD cards will only want 512",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1780,2020-03-18T08:16:53Z,2020-07-13T18:41:35Z,2020-07-13T18:41:35Z,CLOSED,False,1,1,2,https://github.com/MaBecker,add SDCard support for ESP32,1,[],https://github.com/espruino/Espruino/pull/1780,https://github.com/MaBecker,13,https://github.com/espruino/Espruino/pull/1780#issuecomment-657725962,by removing FLASHFS,So let's close this.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1781,2020-03-18T09:17:28Z,2020-03-18T10:22:10Z,2020-03-18T10:24:30Z,MERGED,True,3,3,1,https://github.com/MaBecker,ESP32 fix addFlashArea(),2,[],https://github.com/espruino/Espruino/pull/1781,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1781,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1781,2020-03-18T09:17:28Z,2020-03-18T10:22:10Z,2020-03-18T10:24:30Z,MERGED,True,3,3,1,https://github.com/MaBecker,ESP32 fix addFlashArea(),2,[],https://github.com/espruino/Espruino/pull/1781,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1781#issuecomment-600510715,,"Please wait, do not merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1781,2020-03-18T09:17:28Z,2020-03-18T10:22:10Z,2020-03-18T10:24:30Z,MERGED,True,3,3,1,https://github.com/MaBecker,ESP32 fix addFlashArea(),2,[],https://github.com/espruino/Espruino/pull/1781,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1781#issuecomment-600535949,,ready to go,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1781,2020-03-18T09:17:28Z,2020-03-18T10:22:10Z,2020-03-18T10:24:30Z,MERGED,True,3,3,1,https://github.com/MaBecker,ESP32 fix addFlashArea(),2,[],https://github.com/espruino/Espruino/pull/1781,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1781#issuecomment-600540742,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1782,2020-03-19T09:58:48Z,2020-03-19T12:06:02Z,2020-03-19T12:07:31Z,MERGED,True,0,0,1,https://github.com/MaBecker,remove  space from filename,1,[],https://github.com/espruino/Espruino/pull/1782,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1782,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1782,2020-03-19T09:58:48Z,2020-03-19T12:06:02Z,2020-03-19T12:07:31Z,MERGED,True,0,0,1,https://github.com/MaBecker,remove  space from filename,1,[],https://github.com/espruino/Espruino/pull/1782,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1782#issuecomment-601101181,,tests/test_modifying prototype_after_instantiation.js → tests/test_modifying_prototype_after_instantiation.js,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1783,2020-03-21T20:10:16Z,2020-03-23T11:36:51Z,2020-03-23T12:41:29Z,MERGED,True,6,3,2,https://github.com/MaBecker,add variable COMPORT for easier flashing ,2,[],https://github.com/espruino/Espruino/pull/1783,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1783,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1783,2020-03-21T20:10:16Z,2020-03-23T11:36:51Z,2020-03-23T12:41:29Z,MERGED,True,6,3,2,https://github.com/MaBecker,add variable COMPORT for easier flashing ,2,[],https://github.com/espruino/Espruino/pull/1783,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1783#issuecomment-602170539,,"hmm, travis failed for microbit and rak8211, i guess this is no issue.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1783,2020-03-21T20:10:16Z,2020-03-23T11:36:51Z,2020-03-23T12:41:29Z,MERGED,True,6,3,2,https://github.com/MaBecker,add variable COMPORT for easier flashing ,2,[],https://github.com/espruino/Espruino/pull/1783,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1783#issuecomment-602495720,,Please could you add COMPORT?=/dev/ttyUSB0 to the Makefile? That way flashing will still work as it did before if no port is supplied,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1783,2020-03-21T20:10:16Z,2020-03-23T11:36:51Z,2020-03-23T12:41:29Z,MERGED,True,6,3,2,https://github.com/MaBecker,add variable COMPORT for easier flashing ,2,[],https://github.com/espruino/Espruino/pull/1783,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1783#issuecomment-602526786,,"Sure, this way it is even simpler, because the two if's  can be removed - Thanks.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1783,2020-03-21T20:10:16Z,2020-03-23T11:36:51Z,2020-03-23T12:41:29Z,MERGED,True,6,3,2,https://github.com/MaBecker,add variable COMPORT for easier flashing ,2,[],https://github.com/espruino/Espruino/pull/1783,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1783#issuecomment-602539058,,Perfect - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1785,2020-03-23T22:10:54Z,2020-03-24T08:23:30Z,2020-03-24T08:23:30Z,MERGED,True,4,2,2,https://github.com/opichals,Fix bitwise rshift by 0 to be unsigned (fix #1784),1,[],https://github.com/espruino/Espruino/pull/1785,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1785,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1785,2020-03-23T22:10:54Z,2020-03-24T08:23:30Z,2020-03-24T08:23:30Z,MERGED,True,4,2,2,https://github.com/opichals,Fix bitwise rshift by 0 to be unsigned (fix #1784),1,[],https://github.com/espruino/Espruino/pull/1785,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1785#issuecomment-603096741,,Nice - thank you!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/1789,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1789#issuecomment-605685202,,"Hmm, did you check content of make/family/ESP8266.make and make/targets/ESP8266.make because those two files have missing stuff as well, please double check.
Using env COMPORT  so export COMPORT=<your com port>
It is also possible to pass ET_FM and ET_FF via command line during make
make clean && ET_FM=dio ET_FF=40m make flash",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1789#issuecomment-605701551,,What about README_flash.txt?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/opichals,4,https://github.com/espruino/Espruino/pull/1789#issuecomment-605833643,,"@MaBecker I realize this is redundant to README_flash.txt distributed along the binaries. And to be frank I am not sure this is helping as it may become out-of-sync more easily.
Not sure what you have in mind with regards to the make/family/ESP8266.make and make/targets/ESP8266.make as those IMO serve different audience - the firmware builders'.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/opichals,5,https://github.com/espruino/Espruino/pull/1789#issuecomment-605834934,,"may become out-of-sync more easily

Just want make sure we are on the same page. I am completely fine dropping the Makefile I added unless we find an agreeable and beneficial setup.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1789#issuecomment-605873093,,"Thanks!
Well, until we figure out what to do, this feels like an improvement.
While we've got the PR open, should PORT=/dev/tty.wchusbserial* be PORT?=/dev/tty.wchusbserial* Then at least you can do PORT=/dev/foo make ...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/opichals,7,https://github.com/espruino/Espruino/pull/1789#issuecomment-605874655,,I normally do make PORT=/dev/foo to set the PORT variable.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/1789#issuecomment-605884499,,Interesting - I didn't think that'd work when it's being explicitly overwritten.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1789,2020-03-29T18:44:47Z,2020-03-30T09:21:46Z,2020-03-30T10:33:18Z,MERGED,True,14,12,1,https://github.com/opichals,Fix ESP8266 bundle Makefile values and add vars,2,[],https://github.com/espruino/Espruino/pull/1789,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/1789#issuecomment-605920378,,"Cool, just checked the latest travis build and the Makefile is already part of it.",True,{'THUMBS_UP': ['https://github.com/opichals']}
espruino/Espruino,https://github.com/espruino/Espruino,1792,2020-04-01T16:02:03Z,2020-04-02T07:21:55Z,2020-04-02T07:26:24Z,CLOSED,False,2,2,2,https://github.com/MaBecker,change name to lang,1,[],https://github.com/espruino/Espruino/pull/1792,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1792,"noticed different names, when running a MixedClock in  Emulator","noticed different names, when running a MixedClock in  Emulator",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1792,2020-04-01T16:02:03Z,2020-04-02T07:21:55Z,2020-04-02T07:26:24Z,CLOSED,False,2,2,2,https://github.com/MaBecker,change name to lang,1,[],https://github.com/espruino/Espruino/pull/1792,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1792#issuecomment-607663677,"noticed different names, when running a MixedClock in  Emulator","Please can we change the JS instead? I've just shipped 1500 watches with this firmware, and realistically many of those won't be updated by users for a long time.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1792,2020-04-01T16:02:03Z,2020-04-02T07:21:55Z,2020-04-02T07:26:24Z,CLOSED,False,2,2,2,https://github.com/MaBecker,change name to lang,1,[],https://github.com/espruino/Espruino/pull/1792,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1792#issuecomment-607668725,"noticed different names, when running a MixedClock in  Emulator","Sure, I will do so, so let's close this.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1792,2020-04-01T16:02:03Z,2020-04-02T07:21:55Z,2020-04-02T07:26:24Z,CLOSED,False,2,2,2,https://github.com/MaBecker,change name to lang,1,[],https://github.com/espruino/Espruino/pull/1792,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1792#issuecomment-607670582,"noticed different names, when running a MixedClock in  Emulator",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1802,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/1802#issuecomment-616144891,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)",Also tested on Particle XENON - 52840 with SDK15 and NRF.restart() now works there too without reboot.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1802#issuecomment-616380585,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","Great - thanks!
Did you spot E.on('kill',...)? That might do basically the same as NRF.onRestart? Or if it doesn't maybe that's a bug ;)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/1802#issuecomment-616428935,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","Did you spot E.on('kill',...)? That might do basically the same as NRF.onRestart? Or if it doesn't maybe that's a bug ;)

Thanks for the tip, I tried it and it seems to do nothing. Should this work?
>E.on('kill',function(){poke32(0x4000051c,2);})
=undefined
>NRF.restart()
=undefined
>peek32(0x4000051c)
=0

this is poking GPREGRET which is protected for writes and normally it reboots. Even if it would be called  I need it in right moment when softdevice is disabled so the memory protection is off.
How would the event be fired exactly? There is this part here https://github.com/espruino/Espruino/blob/master/targets/nrf5x/bluetooth.c#L2468 where the jsble_kill is called (the method itself is few lines above) and I don't see how it would trigger it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1802#issuecomment-616453439,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","Sorry, I was getting confused between this and http://www.espruino.com/Reference#l_E_reboot
So yeah, there isn't anything. I guess the question is why do you need it? Is it to re-add something after the stack has rebooted, or to fiddle with something that the stack was protecting while active?
We could add something like onRestart as you suggest, but it's super-dangerous. Likely any print statement or attempt to call NRF.* would cause a crash?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/1802#issuecomment-616487000,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","yes, to fiddle with something that the stack was protecting, like if you would not compile BLUETOOTH module in at all, then you would also have 'superpowers' like that. Actually I was quite surprised it works and is far more reliable than I was expecting. I have later actually added NRF.stop() and NRF.start() that would shutdown softdevice completely for longer time (i.e. splitted restart to two calls). I have guarded NRF.stop() by
!jsble_has_connection() && (bleStatus&BLE_IS_SLEEPING)

so you would have to call NRF.sleep() first. And with this the interactive console (over serial) actually kept working without crash after softdevice was disabled, I only noticed system time was stopped. True that BLE related NRF. methods would fail  (and some even reboot? unless guarded by some flag, I have added BleStatus enum 1<<31 = BLE_OFF for this). And there are also some different implementations all over the code based on #if defined(BLUETOOTH) but not actually that much so I guess adding some semi runtime checks like if (BLUETOOTH_ENABLED || sd_enabled) to same places would make it working and with BLUETOOTH_ENABLED=0 would result in same code as now.
As for whether this is worth it - it probably isn't :-)
OTOH the code path with BLUETOOTH disabled should be kept working anyway so except guarding NRF ble calls by some flag (some are already guarded, some work even with sd disabled) it is not that much extra work.  BTW can whole NRF object at runtime be completely removed/disabled/switched to other implementation easily? then it could be E.startSD() E.stopSD() and whole NRF object would be unavailable if stopped. There would be advantage if we also had resizable variables so with stopped SD you could have more of them. Also is related to dynamic MTU size reconfiguration.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1802#issuecomment-617033044,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","Wow, that's impressive! What is it you're doing while BLE is off?

As for whether this is worth it - it probably isn't

I'm afraid right now that's probably my feeling - at least for master. way too many ways to break things :) I'm happy to have it as a branch though.

OTOH the code path with BLUETOOTH disabled should be kept working anyway

Yes, totally. If you've got some changes to help keep that the case I'd be very interested.
I'm just not convinced about runtime switching - I'm really starting to run low in available flash now, so I'm not sure it'd be worth removing other features to get this one working.

whole NRF object would be unavailable if stopped

That could be tricky to do - after all, you could just do foo=NRF.connect;NRF.stop();foo()

if we also had resizable variables

That would be cool - also a complete can of worms. You'd have to move everything to lower var numbers in order to turn BLE on again :s",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1802,2020-04-19T13:03:24Z,2020-04-20T08:03:12Z,2020-04-21T14:24:09Z,MERGED,True,4,0,1,https://github.com/fanoush,fix NRF.restart() on SDK14 and up,1,[],https://github.com/espruino/Espruino/pull/1802,https://github.com/fanoush,8,https://github.com/espruino/Espruino/pull/1802#issuecomment-617213022,"fix for
>NRF.restart()
NRF ERROR 0x8 at targets/nrf5x/bluetooth.c:2219
REBOOTING.

this is caused by unmatched proper nrf_sdh_disable_request()  call and triggering this
    if (m_nrf_sdh_enabled)
    {
        return NRF_ERROR_INVALID_STATE;
    }

in nrf_sdh_enable_request() in targetlibs/nrf5x_14/components/softdevice/common/nrf_sdh.c
This helps me on SDK14 and bluetooth seems to be working after restart.
BTW I tried adding hook to run JS code when softdevice is disabled (to e.g. erase/rewrite UICR to relocate bootloader or write to other protected registers) and it works! I have added quick hack like
 jsble_kill();
  jsvUnLock(jspEvaluate(""if(typeof(NRF.onRestart)=='function')NRF.onRestart();"",true));
  jsble_init();

to jsble_restart_softdevice() and can do basically anything there while softdevice is temporarily disabled :-)","Wow, that's impressive! What is it you're doing while BLE is off?

espruino is quite flexible so I use it as first thing to flash to new smart watch, then after backing up bootloader I need stuff like


clear bootloader completely (so softdevice jumps directly to app after reset), then flash new one to possibly different location - both actions need erasing/writing UICR registers which is not possible when softdevice is on. E.g. in P8 watch there is custom bootloader but the UICR bootloader settings are not set which breaks when overwriting with nordic dfu bootloader. nordic one needs both 0x14 and 0x18 uicr registers to be set.


do buttonless dfu and enter bootloader. With ds-d6 you can just poke 1 to GPREGRET and it gets written and reboots  but the value is there and bootloader jumps to DFU mode, however other nordic based bootloaders expect different value in GPREGRET but also expect softdevice to be left enabled by app to continue with buttonless dfu, so the easiest is to poke the value there during NRF.restart (or there is sd_power_gpregret_get/set/clr api that would need to be exported)


So basically NRF.onRestart hook is good enough for everything mentioned above.

I'm really starting to run low in available flash now, so I'm not sure it'd be worth removing other features to get this one working.

Yes, sure. maybe few if-s at runtime won't add much or even anything over current state.
Anyway, I need to work more with own fork and branches so I can keep such changes for longer and possibly show you the result. now I have these as random changes on top of your tree and just stash and apply them. not very flexible

That would be cool - also a complete can of worms. You'd have to move everything to lower var numbers in order to turn BLE on again :s

Well, didn't look how good is garbage collection and defragmentation but I hoped it would work. And even now in banglejs you do reset() between apps - clearing variables, so it could work like this, you could restart to resize it but you would not need to build different firmware to change MTU, or possibly also resize stack. Imagine you need more variables but don't write deeply nested code then you could change the ratio, or if your code fails with stack overflow you could make stack larger after next reboot. So it would be pretty static at runtime, with no extra runtime code, just different sizes chosen at boot time.
And turning off softdevice could also work in this way fact - reset() or E.reboot() with flags to set variables, stack, mtu sizes and possibly also disable softdevice. Then the NRF object could be set up in different way at startup (possibly use only some subarray of method pointers).
Well but yes, it can make stuff larger and nrf52832 is now becoming too small indeed. However with such fine tunings the life of 52832 could be extended a bit. E.g. on banglejs with bluetooth turned off in settings (-> hidden restart + softdevice disabled) one could run larger app/game when not using watch paired to anything.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1808,2020-04-29T17:29:32Z,2020-04-30T08:57:36Z,2020-04-30T08:57:36Z,MERGED,True,24,0,1,https://github.com/fanoush,calculate free flash space also for SPI flash and for code both in internal and external flash,1,[],https://github.com/espruino/Espruino/pull/1808,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1808,"fix bug that with SPIFLASH enabled and code in external flash reported free flash size is very large and wrong  (FLASH_SAVED_CODE_START-firmwareEnd)
add both internal and external flash as separate parts, handle also saved code in the middle of SPI flash

Without this I get something like
>f.getFree()
=[
  { addr: 405504, length: 1613877248 }
 ]

With this patch and code set in board file as
  'saved_code' : {
    'page_size' : 4096,
#    'address' : ((118 - 10) * 4096), # Bootloader takes pages 120-127, FS takes 118-119
#    'pages' : 10,
    'address' : 0x60380000, # P8 empty flash area with no fonts/images or firmware flash space
    'pages' : 32,
#    'flash_available' : 512 - ((28 + 8 + 2 + 10)*4) # Softdevice 2.0 uses 28 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((31 + 8 + 2 + 10)*4) # Softdevice 3.0 uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((35 + 8 + 2 + 10)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
    'flash_available' : 512 - ((35 + 8 + 2)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, no code. Each page is 4 kb.


I get this
>f.getFree().forEach((i)=>{console.log(""addr 0x""+i.addr.toString(16)+"" len 0x""+i.length.toString(16));})
addr 0x63000 len 0x13000
addr 0x60000000 len 0x380000
addr 0x603a0000 len 0x60000

BTW I cheated a bit with __isr_vector, there is no linker symbol for start of binary and to calculate free flash space from FLASH_AVAILABLE_FOR_CODE value one needs to know start of binary (=size of softdevice).
There is also this
    codeOut(""#define BOOTLOADER_SIZE                 ""+str(common.get_bootloader_size(board)))
    codeOut(""#define ESPRUINO_BINARY_ADDRESS         ""+hex(common.get_espruino_binary_address(board)))

but it doesn't return anything sensible for nrf5x.","fix bug that with SPIFLASH enabled and code in external flash reported free flash size is very large and wrong  (FLASH_SAVED_CODE_START-firmwareEnd)
add both internal and external flash as separate parts, handle also saved code in the middle of SPI flash

Without this I get something like
>f.getFree()
=[
  { addr: 405504, length: 1613877248 }
 ]

With this patch and code set in board file as
  'saved_code' : {
    'page_size' : 4096,
#    'address' : ((118 - 10) * 4096), # Bootloader takes pages 120-127, FS takes 118-119
#    'pages' : 10,
    'address' : 0x60380000, # P8 empty flash area with no fonts/images or firmware flash space
    'pages' : 32,
#    'flash_available' : 512 - ((28 + 8 + 2 + 10)*4) # Softdevice 2.0 uses 28 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((31 + 8 + 2 + 10)*4) # Softdevice 3.0 uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((35 + 8 + 2 + 10)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
    'flash_available' : 512 - ((35 + 8 + 2)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, no code. Each page is 4 kb.


I get this
>f.getFree().forEach((i)=>{console.log(""addr 0x""+i.addr.toString(16)+"" len 0x""+i.length.toString(16));})
addr 0x63000 len 0x13000
addr 0x60000000 len 0x380000
addr 0x603a0000 len 0x60000

BTW I cheated a bit with __isr_vector, there is no linker symbol for start of binary and to calculate free flash space from FLASH_AVAILABLE_FOR_CODE value one needs to know start of binary (=size of softdevice).
There is also this
    codeOut(""#define BOOTLOADER_SIZE                 ""+str(common.get_bootloader_size(board)))
    codeOut(""#define ESPRUINO_BINARY_ADDRESS         ""+hex(common.get_espruino_binary_address(board)))

but it doesn't return anything sensible for nrf5x.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1808,2020-04-29T17:29:32Z,2020-04-30T08:57:36Z,2020-04-30T08:57:36Z,MERGED,True,24,0,1,https://github.com/fanoush,calculate free flash space also for SPI flash and for code both in internal and external flash,1,[],https://github.com/espruino/Espruino/pull/1808,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/1808#issuecomment-621458433,"fix bug that with SPIFLASH enabled and code in external flash reported free flash size is very large and wrong  (FLASH_SAVED_CODE_START-firmwareEnd)
add both internal and external flash as separate parts, handle also saved code in the middle of SPI flash

Without this I get something like
>f.getFree()
=[
  { addr: 405504, length: 1613877248 }
 ]

With this patch and code set in board file as
  'saved_code' : {
    'page_size' : 4096,
#    'address' : ((118 - 10) * 4096), # Bootloader takes pages 120-127, FS takes 118-119
#    'pages' : 10,
    'address' : 0x60380000, # P8 empty flash area with no fonts/images or firmware flash space
    'pages' : 32,
#    'flash_available' : 512 - ((28 + 8 + 2 + 10)*4) # Softdevice 2.0 uses 28 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((31 + 8 + 2 + 10)*4) # Softdevice 3.0 uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((35 + 8 + 2 + 10)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
    'flash_available' : 512 - ((35 + 8 + 2)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, no code. Each page is 4 kb.


I get this
>f.getFree().forEach((i)=>{console.log(""addr 0x""+i.addr.toString(16)+"" len 0x""+i.length.toString(16));})
addr 0x63000 len 0x13000
addr 0x60000000 len 0x380000
addr 0x603a0000 len 0x60000

BTW I cheated a bit with __isr_vector, there is no linker symbol for start of binary and to calculate free flash space from FLASH_AVAILABLE_FOR_CODE value one needs to know start of binary (=size of softdevice).
There is also this
    codeOut(""#define BOOTLOADER_SIZE                 ""+str(common.get_bootloader_size(board)))
    codeOut(""#define ESPRUINO_BINARY_ADDRESS         ""+hex(common.get_espruino_binary_address(board)))

but it doesn't return anything sensible for nrf5x.","and BTW linux build fails because of misspelled LENGTH here https://github.com/espruino/Espruino/blob/master/src/jshardware_common.c#L52
was afraid it was me as I just added similar code but that's not my change :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1808,2020-04-29T17:29:32Z,2020-04-30T08:57:36Z,2020-04-30T08:57:36Z,MERGED,True,24,0,1,https://github.com/fanoush,calculate free flash space also for SPI flash and for code both in internal and external flash,1,[],https://github.com/espruino/Espruino/pull/1808,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1808#issuecomment-621706332,"fix bug that with SPIFLASH enabled and code in external flash reported free flash size is very large and wrong  (FLASH_SAVED_CODE_START-firmwareEnd)
add both internal and external flash as separate parts, handle also saved code in the middle of SPI flash

Without this I get something like
>f.getFree()
=[
  { addr: 405504, length: 1613877248 }
 ]

With this patch and code set in board file as
  'saved_code' : {
    'page_size' : 4096,
#    'address' : ((118 - 10) * 4096), # Bootloader takes pages 120-127, FS takes 118-119
#    'pages' : 10,
    'address' : 0x60380000, # P8 empty flash area with no fonts/images or firmware flash space
    'pages' : 32,
#    'flash_available' : 512 - ((28 + 8 + 2 + 10)*4) # Softdevice 2.0 uses 28 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((31 + 8 + 2 + 10)*4) # Softdevice 3.0 uses 31 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
#    'flash_available' : 512 - ((35 + 8 + 2 + 10)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, code 10. Each page is 4 kb.
    'flash_available' : 512 - ((35 + 8 + 2)*4) # Softdevice 5.0  uses 35 pages of flash, bootloader 8, FS 2, no code. Each page is 4 kb.


I get this
>f.getFree().forEach((i)=>{console.log(""addr 0x""+i.addr.toString(16)+"" len 0x""+i.length.toString(16));})
addr 0x63000 len 0x13000
addr 0x60000000 len 0x380000
addr 0x603a0000 len 0x60000

BTW I cheated a bit with __isr_vector, there is no linker symbol for start of binary and to calculate free flash space from FLASH_AVAILABLE_FOR_CODE value one needs to know start of binary (=size of softdevice).
There is also this
    codeOut(""#define BOOTLOADER_SIZE                 ""+str(common.get_bootloader_size(board)))
    codeOut(""#define ESPRUINO_BINARY_ADDRESS         ""+hex(common.get_espruino_binary_address(board)))

but it doesn't return anything sensible for nrf5x.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1817,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/1817#issuecomment-625443978,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","Also there is one more related change I can include too - I'd prefer omitting -D$(BOARD) here
https://github.com/espruino/Espruino/blob/master/make/common/NRF5X.make#L31
For me it causes just troubles and it can be defined in board file if  needed. And often one needs different board name anyway as seen e.g here https://github.com/espruino/Espruino/blob/master/boards/NRF52832DK.py#L41
With  that extra define I cannot name board files with - inside, the C compiler complains it is invalid character.
I guess it is used like this 
  
    
      Espruino/libs/puckjs/jswrap_puck.c
    
    
         Line 324
      in
      189cd31
    
  
  
    

        
          
               ""ifdef"" : ""PUCKJS"" 
        
    
  

 but still it can be defined explicitly in board.py as -D define or even generated by scripts/build_platform_config.py  into the board header.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1817#issuecomment-626545233,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","Thanks - I'm not too sure about the removal of -DBOARD - it's used a lot in the code for board-specific hacks.

With that extra define I cannot name board files with - inside

I feel like it's not really important enough to justify changing basically every board.py file? Can you not just use underscore?
With this change, as long as you use underscores in your filename you should be able to make the device boardname appear as whatever you want?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/1817#issuecomment-626593871,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","I'm not too sure about the removal of -DBOARD - it's used a lot in the code for board-specific hacks.

Yes, that's why I did not include this change. And yes, underscores are ok too, actually used them already because of this. The issue was more philosophical - if it is OK to generate C define directly from some file name. Yes it needs adding explicitly e.g.  -DPUCKJS into its board file if code has dependencie on it - well, just like any other define already there.
Actually I found another way that might be doable, there is also CURRENT_BOARD.make file generated from board python file too so -D can be put there automatically just like e.g. DEFINES+=-DUSE_BOOTLOADER now. So for my case above it would add DEFINES+=-DP8 for both board files instead of -DP8SDK11 or -DP8SDK14 as it is now. and then -DBOARD could be removed.
Would that be OK, should I try?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1817#issuecomment-626733977,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","Adding DEFINES+=-DP8 seems like a good solution for now if it works for you... but doing -DBOARDNAME when creating CURRENT_BOARD.make and then removing -DBOARD might work?
You'd need to remove -DBOARD from all the other targets too as well, not just nRF52.
It's quite a bit of work and I'll be fed up if I go to build the next release and end up spending an hour debugging builds just so you could have dashes in filenames :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/1817#issuecomment-626758386,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","just so you could have dashes in filenames :)

It was more about making the filename of .py irrelevant and storing the real board name inside the file (and take filename just as fallback). Dash in filename is just sign that it is in a way 'broken'. However I understand what you say, it may be not worth possibly breaking stuff if you feel so.

You'd need to remove -DBOARD from all the other targets too as well, not just nRF52.

Oh, the makefiles? Yes, that's even better so it is not duplicated everywhere.  I guess the CURRENT_BOARD.make is generated for all targets. So the result will be the same, the definition -D$(BOARD) will just move from this place https://github.com/espruino/Espruino/blob/master/make/common/NRF5X.make#L31 (and other target makefiles as you say) to CURRENT_BOARD.make, however it will possibly use the overriden board name from board file instead of file name. And if not overridden it will be the same as now. And it is just C compiler definition so it won't affect makefiles logic.
So if you have BANGLEJS.py and another BANGLEJS-notensorflow.py with boardname set as BANGLEJS both will have -DBANGLEJS automatically from CURRENT_BOARD.make instead of useless -DBANGLEJS-notensorflow 'board' definition as now.
Anyway same -Dxxx does not hurt, so it can be in both places defining possibly both (same or different) values to not break stuff. In fact I don't care about dashes that much :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1817,2020-05-07T19:04:03Z,2020-05-11T08:11:00Z,2020-05-12T08:25:06Z,MERGED,True,3,0,1,https://github.com/fanoush,allow different board name than board filename,1,[],https://github.com/espruino/Espruino/pull/1817,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1817#issuecomment-627192511,"this allows multiple board files for same board with different build options (like e.g. different SDK version or build options)
so now I can have e.g. P8SDK11.py and P8SDK14.py with
info = {
 'name' : ""P8 DaFit smartwatch"",
 'boardname' : 'P8', # visible in process.env.BOARD
 'default_console' : ""EV_BLUETOOTH"",

and both builds will have proccess.env.BOARD set to P8
BTW the $(BOARD) for makefile is still the board file name since it is build like
make -j BOARD=P8SDK14 RELEASE=1

but it is OK and expected and does not cause issues.","So the result will be the same, the definition -D$(BOARD) will just move

That sounds great! If you can do a PR for that, and scripts/create_zip.sh runs without errors (eg all the board files will build) then that would be awesome.
I could be wrong but I'd hope that all the board binaries should actually be the same before & after if it's worked properly?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1822,2020-05-12T15:17:07Z,2020-05-13T08:39:16Z,2020-05-13T08:39:16Z,MERGED,True,11,3,5,https://github.com/fanoush,use overriden board name from board.info.boardname also for -D$(BOARD) macro definition,1,[],https://github.com/espruino/Espruino/pull/1822,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1822,"This is second part of 'allow different board name than board filename' #1817

That sounds great! If you can do a PR for that, and scripts/create_zip.sh runs without errors (eg all the board files will build) then that would be awesome.
I could be wrong but I'd hope that all the board binaries should actually be the same before & after if it's worked properly?

Yes, I tried with building PUCKJS by copying it to PUCKJS2 and addin one line
--- boards/PUCKJS.py    2020-05-07 20:06:10.824004800 +0200
+++ boards/PUCKJS2.py   2020-05-12 16:16:24.288147800 +0200
@@ -17,6 +17,7 @@

 info = {
  'name' : ""Puck.js"",
+ 'boardname' : ""PUCKJS"",
  'link' :  [ ""http://www.espruino.com/PuckJS"" ],
  'default_console' : ""EV_SERIAL1"",
  'default_console_tx' : ""D28"",

and with this PR it produces hex and zip files of same size. Without it it is different.
It can be seen -DPUCKJS is in defined when running make
DEFINES = -DGIT_COMMIT=107ade60 -DNO_ASSERT -DRELEASE -DBUILDNUMBER=""75"" -DPUCKJS -DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 -DBLUETOOTH_NAME_PREFIX=""Puck.js"" -DCUSTOM_GETBATTERY=jswrap_puck_getBattery -DNFC_DEFAULT_URL=""https://puck-js.com/go"" -DUSE_BOOTLOADER -DUSE_DEBUGGER -DUSE_TAB_COMPLETE -DUSE_HEATSHRINK -DUSE_MATH -DUSE_GRAPHICS -DUSE_NET -DUSE_NETWORK_JS -DBLUETOOTH -DUSE_CRYPTO -DUSE_SHA256 -DUSE_SHA512 -DUSE_AES -DUSE_NEOPIXEL -DUSE_NFC -DNFC_HAL_ENABLED=1 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBLE_STACK_SUPPORT_REQD -DSWI_DISABLE0 -DSOFTDEVICE_PRESENT -DFLOAT_ABI_HARD -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF52832 -DNRF5X -DNRF5X_SDK_12 -DARM -DLINK_TIME_OPTIMISATION -DEMBEDDED

and CURRENT_BOARD.make contains
# Generated with scripts/get_makefile_decls.py PUCKJS2
BOARD=PUCKJS2
# board.info.boardname set to PUCKJS
DEFINES+= -DPUCKJS

So I hope it does not break anything. Also tried build for  PICO_R1_3 and it builds and has  ....  -DPICO_R1_3 -DUSE_USB_OTG_FS=1 -DPICO -DPICO_1V3 .... there but I guess -DPICO_R1_3 is not that important here in this case.","This is second part of 'allow different board name than board filename' #1817

That sounds great! If you can do a PR for that, and scripts/create_zip.sh runs without errors (eg all the board files will build) then that would be awesome.
I could be wrong but I'd hope that all the board binaries should actually be the same before & after if it's worked properly?

Yes, I tried with building PUCKJS by copying it to PUCKJS2 and addin one line
--- boards/PUCKJS.py    2020-05-07 20:06:10.824004800 +0200
+++ boards/PUCKJS2.py   2020-05-12 16:16:24.288147800 +0200
@@ -17,6 +17,7 @@

 info = {
  'name' : ""Puck.js"",
+ 'boardname' : ""PUCKJS"",
  'link' :  [ ""http://www.espruino.com/PuckJS"" ],
  'default_console' : ""EV_SERIAL1"",
  'default_console_tx' : ""D28"",

and with this PR it produces hex and zip files of same size. Without it it is different.
It can be seen -DPUCKJS is in defined when running make
DEFINES = -DGIT_COMMIT=107ade60 -DNO_ASSERT -DRELEASE -DBUILDNUMBER=""75"" -DPUCKJS -DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 -DBLUETOOTH_NAME_PREFIX=""Puck.js"" -DCUSTOM_GETBATTERY=jswrap_puck_getBattery -DNFC_DEFAULT_URL=""https://puck-js.com/go"" -DUSE_BOOTLOADER -DUSE_DEBUGGER -DUSE_TAB_COMPLETE -DUSE_HEATSHRINK -DUSE_MATH -DUSE_GRAPHICS -DUSE_NET -DUSE_NETWORK_JS -DBLUETOOTH -DUSE_CRYPTO -DUSE_SHA256 -DUSE_SHA512 -DUSE_AES -DUSE_NEOPIXEL -DUSE_NFC -DNFC_HAL_ENABLED=1 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBLE_STACK_SUPPORT_REQD -DSWI_DISABLE0 -DSOFTDEVICE_PRESENT -DFLOAT_ABI_HARD -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF52832 -DNRF5X -DNRF5X_SDK_12 -DARM -DLINK_TIME_OPTIMISATION -DEMBEDDED

and CURRENT_BOARD.make contains
# Generated with scripts/get_makefile_decls.py PUCKJS2
BOARD=PUCKJS2
# board.info.boardname set to PUCKJS
DEFINES+= -DPUCKJS

So I hope it does not break anything. Also tried build for  PICO_R1_3 and it builds and has  ....  -DPICO_R1_3 -DUSE_USB_OTG_FS=1 -DPICO -DPICO_1V3 .... there but I guess -DPICO_R1_3 is not that important here in this case.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1822,2020-05-12T15:17:07Z,2020-05-13T08:39:16Z,2020-05-13T08:39:16Z,MERGED,True,11,3,5,https://github.com/fanoush,use overriden board name from board.info.boardname also for -D$(BOARD) macro definition,1,[],https://github.com/espruino/Espruino/pull/1822,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1822#issuecomment-627839091,"This is second part of 'allow different board name than board filename' #1817

That sounds great! If you can do a PR for that, and scripts/create_zip.sh runs without errors (eg all the board files will build) then that would be awesome.
I could be wrong but I'd hope that all the board binaries should actually be the same before & after if it's worked properly?

Yes, I tried with building PUCKJS by copying it to PUCKJS2 and addin one line
--- boards/PUCKJS.py    2020-05-07 20:06:10.824004800 +0200
+++ boards/PUCKJS2.py   2020-05-12 16:16:24.288147800 +0200
@@ -17,6 +17,7 @@

 info = {
  'name' : ""Puck.js"",
+ 'boardname' : ""PUCKJS"",
  'link' :  [ ""http://www.espruino.com/PuckJS"" ],
  'default_console' : ""EV_SERIAL1"",
  'default_console_tx' : ""D28"",

and with this PR it produces hex and zip files of same size. Without it it is different.
It can be seen -DPUCKJS is in defined when running make
DEFINES = -DGIT_COMMIT=107ade60 -DNO_ASSERT -DRELEASE -DBUILDNUMBER=""75"" -DPUCKJS -DHAL_NFC_ENGINEERING_BC_FTPAN_WORKAROUND=1 -DBLUETOOTH_NAME_PREFIX=""Puck.js"" -DCUSTOM_GETBATTERY=jswrap_puck_getBattery -DNFC_DEFAULT_URL=""https://puck-js.com/go"" -DUSE_BOOTLOADER -DUSE_DEBUGGER -DUSE_TAB_COMPLETE -DUSE_HEATSHRINK -DUSE_MATH -DUSE_GRAPHICS -DUSE_NET -DUSE_NETWORK_JS -DBLUETOOTH -DUSE_CRYPTO -DUSE_SHA256 -DUSE_SHA512 -DUSE_AES -DUSE_NEOPIXEL -DUSE_NFC -DNFC_HAL_ENABLED=1 -DS132 -DNRF_SD_BLE_API_VERSION=3 -DBLE_STACK_SUPPORT_REQD -DSWI_DISABLE0 -DSOFTDEVICE_PRESENT -DFLOAT_ABI_HARD -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF52832 -DNRF5X -DNRF5X_SDK_12 -DARM -DLINK_TIME_OPTIMISATION -DEMBEDDED

and CURRENT_BOARD.make contains
# Generated with scripts/get_makefile_decls.py PUCKJS2
BOARD=PUCKJS2
# board.info.boardname set to PUCKJS
DEFINES+= -DPUCKJS

So I hope it does not break anything. Also tried build for  PICO_R1_3 and it builds and has  ....  -DPICO_R1_3 -DUSE_USB_OTG_FS=1 -DPICO -DPICO_1V3 .... there but I guess -DPICO_R1_3 is not that important here in this case.","This looks great - thanks for getting it in!
I guess there's also a good argument for doing the same with -D$(CHIP)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1823,2020-05-16T16:13:54Z,2020-05-19T10:23:07Z,2020-05-19T10:23:07Z,MERGED,True,292,170,1,https://github.com/mxraw,Add support for testing arbitrary directories,3,[],https://github.com/espruino/Espruino/pull/1823,https://github.com/mxraw,1,https://github.com/espruino/Espruino/pull/1823,"This small change adds --test-dir to the espruino binary
to allow testing against arbitrary directories.
For example, you can now test espruino against the 69000 tests of the ECMAScript Test Suite[1].
Happy testing!
[1] https://github.com/tc39/test262","This small change adds --test-dir to the espruino binary
to allow testing against arbitrary directories.
For example, you can now test espruino against the 69000 tests of the ECMAScript Test Suite[1].
Happy testing!
[1] https://github.com/tc39/test262",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1823,2020-05-16T16:13:54Z,2020-05-19T10:23:07Z,2020-05-19T10:23:07Z,MERGED,True,292,170,1,https://github.com/mxraw,Add support for testing arbitrary directories,3,[],https://github.com/espruino/Espruino/pull/1823,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1823#issuecomment-629986414,"This small change adds --test-dir to the espruino binary
to allow testing against arbitrary directories.
For example, you can now test espruino against the 69000 tests of the ECMAScript Test Suite[1].
Happy testing!
[1] https://github.com/tc39/test262","Hi - thanks - does this PR do anything than add configurable directories? There's a lot of code changed in there.
Did you have any success with test262? When I tried it quite a bit of extra boilerplate was required to get things working.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1823,2020-05-16T16:13:54Z,2020-05-19T10:23:07Z,2020-05-19T10:23:07Z,MERGED,True,292,170,1,https://github.com/mxraw,Add support for testing arbitrary directories,3,[],https://github.com/espruino/Espruino/pull/1823,https://github.com/mxraw,3,https://github.com/espruino/Espruino/pull/1823#issuecomment-630267596,"This small change adds --test-dir to the espruino binary
to allow testing against arbitrary directories.
For example, you can now test espruino against the 69000 tests of the ECMAScript Test Suite[1].
Happy testing!
[1] https://github.com/tc39/test262","Hi,
sorry, the later two commits weren't supposed to go into this PR. I forgot to check them into another branch.
Yes, this PR basically just adds configurable tests directories. The later commits expand on that and feature some logging improvements (and formatting). I just find-replaced the EOLs, so some lines make little sense now except for maintaining ""backwards compatibility"" for how the output looks. I can remove them.  The code changes look like a lot because I ran clang-format over main.c.
The --test-dir argument makes use of ftw(3), which is recursive, so I could to ./espruino -d test262 and just enumerate over all the tests. I have not found the time yet to look at the resulting output in detail but yeah, there were a lot of errors.
This is somewhat of-topic but I noticed that the espruino library exports have global state. Have you considered offering a reentrant API or was there a specific consideration not to?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1823,2020-05-16T16:13:54Z,2020-05-19T10:23:07Z,2020-05-19T10:23:07Z,MERGED,True,292,170,1,https://github.com/mxraw,Add support for testing arbitrary directories,3,[],https://github.com/espruino/Espruino/pull/1823,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1823#issuecomment-630729746,"This small change adds --test-dir to the espruino binary
to allow testing against arbitrary directories.
For example, you can now test espruino against the 69000 tests of the ECMAScript Test Suite[1].
Happy testing!
[1] https://github.com/tc39/test262","Ok, thanks! Just merging...

espruino library exports have global state

Not sure what you mean here? The JS library?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1834,2020-05-31T11:25:36Z,2020-06-01T07:29:16Z,2020-06-01T07:29:16Z,MERGED,True,2,1,2,https://github.com/FransM,Correct instruction for gcc install,1,[],https://github.com/espruino/Espruino/pull/1834,https://github.com/FransM,1,https://github.com/espruino/Espruino/pull/1834,Directory after untar was wrong (as also can be seen from the next line with the mv command.,Directory after untar was wrong (as also can be seen from the next line with the mv command.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1834,2020-05-31T11:25:36Z,2020-06-01T07:29:16Z,2020-06-01T07:29:16Z,MERGED,True,2,1,2,https://github.com/FransM,Correct instruction for gcc install,1,[],https://github.com/espruino/Espruino/pull/1834,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1834#issuecomment-636664475,Directory after untar was wrong (as also can be seen from the next line with the mv command.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1835,2020-06-01T01:55:22Z,2020-06-01T07:03:57Z,2020-06-01T13:29:07Z,MERGED,True,209,90,2,https://github.com/nebbishhacker,fillPoly tweaks,4,[],https://github.com/espruino/Espruino/pull/1835,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1835,"I fixed an issue where polygons that share edges could end up overlapping slightly, and made a small tweak to the x-axis rounding behaviour.
I'm also starting to rethink my suggestion to add the half-pixel offset - it does make some things look a bit nicer, but it also means that fillPoly and drawPoly no longer line up when given the same points. I've added a couple of tests to illustrate the issue.","I fixed an issue where polygons that share edges could end up overlapping slightly, and made a small tweak to the x-axis rounding behaviour.
I'm also starting to rethink my suggestion to add the half-pixel offset - it does make some things look a bit nicer, but it also means that fillPoly and drawPoly no longer line up when given the same points. I've added a couple of tests to illustrate the issue.",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1835,2020-06-01T01:55:22Z,2020-06-01T07:03:57Z,2020-06-01T13:29:07Z,MERGED,True,209,90,2,https://github.com/nebbishhacker,fillPoly tweaks,4,[],https://github.com/espruino/Espruino/pull/1835,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1835#issuecomment-636652699,"I fixed an issue where polygons that share edges could end up overlapping slightly, and made a small tweak to the x-axis rounding behaviour.
I'm also starting to rethink my suggestion to add the half-pixel offset - it does make some things look a bit nicer, but it also means that fillPoly and drawPoly no longer line up when given the same points. I've added a couple of tests to illustrate the issue.","Thanks - yeah, the big difference between drawPoly/fillPoly looks bad - I don't mind overlap on one side or the other between the two but having a gap is going to annoy people.
It looks like we were already doing a 0.5px addition: https://github.com/espruino/Espruino/blob/master/libs/graphics/jswrap_graphics.c#L1671
So maybe the solution is actually not to do any addition at all in either of the two places?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1835,2020-06-01T01:55:22Z,2020-06-01T07:03:57Z,2020-06-01T13:29:07Z,MERGED,True,209,90,2,https://github.com/nebbishhacker,fillPoly tweaks,4,[],https://github.com/espruino/Espruino/pull/1835,https://github.com/nebbishhacker,3,https://github.com/espruino/Espruino/pull/1835#issuecomment-636851881,"I fixed an issue where polygons that share edges could end up overlapping slightly, and made a small tweak to the x-axis rounding behaviour.
I'm also starting to rethink my suggestion to add the half-pixel offset - it does make some things look a bit nicer, but it also means that fillPoly and drawPoly no longer line up when given the same points. I've added a couple of tests to illustrate the issue.","That code you link to is adding 0.5 immediately after multiplying the coordinate by 16, so it's actually effectively a 1/32px addition. I don't think it makes very much difference.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1835,2020-06-01T01:55:22Z,2020-06-01T07:03:57Z,2020-06-01T13:29:07Z,MERGED,True,209,90,2,https://github.com/nebbishhacker,fillPoly tweaks,4,[],https://github.com/espruino/Espruino/pull/1835,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1835#issuecomment-636861388,"I fixed an issue where polygons that share edges could end up overlapping slightly, and made a small tweak to the x-axis rounding behaviour.
I'm also starting to rethink my suggestion to add the half-pixel offset - it does make some things look a bit nicer, but it also means that fillPoly and drawPoly no longer line up when given the same points. I've added a couple of tests to illustrate the issue.","Good point, thanks. Brain's not working today :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1836,2020-06-01T05:22:53Z,2020-06-01T07:08:24Z,2020-06-01T13:21:46Z,MERGED,True,1551,2275,4,https://github.com/nebbishhacker,Reduce poly count and fix missing chars in vector font,2,[],https://github.com/espruino/Espruino/pull/1836,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1836,"Now that the scanline bug is fixed, I was able to reduce the number of individual polygons by a lot. I also fixed a bug that was preventing some characters from being embedded in vector_font.c.","Now that the scanline bug is fixed, I was able to reduce the number of individual polygons by a lot. I also fixed a bug that was preventing some characters from being embedded in vector_font.c.",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1836,2020-06-01T05:22:53Z,2020-06-01T07:08:24Z,2020-06-01T13:21:46Z,MERGED,True,1551,2275,4,https://github.com/nebbishhacker,Reduce poly count and fix missing chars in vector font,2,[],https://github.com/espruino/Espruino/pull/1836,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1836#issuecomment-636654495,"Now that the scanline bug is fixed, I was able to reduce the number of individual polygons by a lot. I also fixed a bug that was preventing some characters from being embedded in vector_font.c.","Wow, that's great - thank you!
You know I mentioned that the accents added ~500 bytes of code, while you reckoned just having the chars would add ~1000 bytes. With these changes do you think it's closer? If it's only a few 100 bytes I think it'd be worth it having things simpler.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1836,2020-06-01T05:22:53Z,2020-06-01T07:08:24Z,2020-06-01T13:21:46Z,MERGED,True,1551,2275,4,https://github.com/nebbishhacker,Reduce poly count and fix missing chars in vector font,2,[],https://github.com/espruino/Espruino/pull/1836,https://github.com/nebbishhacker,3,https://github.com/espruino/Espruino/pull/1836#issuecomment-636857811,"Now that the scanline bug is fixed, I was able to reduce the number of individual polygons by a lot. I also fixed a bug that was preventing some characters from being embedded in vector_font.c.","It might be a bit closer, yeah. I'll try including the chars directly later so we can see how it compares.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/ikkala,1,https://github.com/espruino/Espruino/pull/1837,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/ikkala,2,https://github.com/espruino/Espruino/pull/1837#issuecomment-636896680,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","Before dependency install (provision.sh ALL), copy only required files.

Note, you should review if the selected directories are enough / too much. I went through them by trial and error -- at least the whole build goes ok and I'm able to pull out zip fro Bangle.js.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1837#issuecomment-637342384,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","What's the reasoning for this? It just makes it faster by avoiding copying the espruino directory over?
How much time does this save? I just tried here and it takes 2 seconds, so I'm not sure it warrants all the potential breakage that this might introduce?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1837#issuecomment-637342961,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.",... or this actually allows provision.sh to not be called except right at the start?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/ikkala,5,https://github.com/espruino/Espruino/pull/1837#issuecomment-637346801,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","Each (almost) Dockerfile line creates new layered filesystem layer. The old Dockerfile copies the source COPY . /espruino in very early step to a layer and after that the very long running dependency install and provision.sh steps are executed. Those long running steps takes some minutes to run, and what's worst is that they produce always multiple gigas of layer data to disk.
So, in development cycle where we change just one line of code and want to then build all that happen.  The new ordering of the Dockerfile tries to avoid this by moving the COPY . /espruino to the end so that docker build doesn't have to trigger the long running early steps at all.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/ikkala,6,https://github.com/espruino/Espruino/pull/1837#issuecomment-637349294,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","I just tried here and it takes 2 seconds

Did you try docker build, after changing some source code?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1837#issuecomment-637355531,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","Did you try docker build

Oh no, I mean I literally just tried the copy.
This sounds like a great idea then. I think the directories you've copied should be enough - do you actually need espruino/targets though? You may not...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/ikkala,8,https://github.com/espruino/Espruino/pull/1837#issuecomment-637365186,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.","do you actually need espruino/targets though? You may not...

Looks like it's fine without that, so I removed it now.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1837,2020-06-01T14:35:38Z,2020-06-02T08:03:54Z,2020-06-02T08:03:54Z,MERGED,True,8,1,1,https://github.com/ikkala,Use Dockerfile layers to cache dependency install,2,[],https://github.com/espruino/Espruino/pull/1837,https://github.com/gfwilliams,9,https://github.com/espruino/Espruino/pull/1837#issuecomment-637366227,"Before dependency install (provision.sh ALL), copy only required files.
Only after that, copy rest of the source code (COPY . /espruino) that
changes more often.
This way usually only lines starting from COPY . /espruino will
be executed.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1839,2020-06-01T15:51:16Z,2020-06-02T08:37:35Z,2020-06-02T08:37:35Z,MERGED,True,70,27,2,https://github.com/ikkala,GPS-raw event: handle UBX protocol,3,[],https://github.com/espruino/Espruino/pull/1839,https://github.com/ikkala,1,https://github.com/espruino/Espruino/pull/1839,"Bangle.js: Changed GPS-raw event type from string to ArrayBuffer
and handle u-blox UBX Protocol messages.
Fixes #1838","Bangle.js: Changed GPS-raw event type from string to ArrayBuffer
and handle u-blox UBX Protocol messages.
Fixes #1838",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1839,2020-06-01T15:51:16Z,2020-06-02T08:37:35Z,2020-06-02T08:37:35Z,MERGED,True,70,27,2,https://github.com/ikkala,GPS-raw event: handle UBX protocol,3,[],https://github.com/espruino/Espruino/pull/1839,https://github.com/ikkala,2,https://github.com/espruino/Espruino/pull/1839#issuecomment-636937217,"Bangle.js: Changed GPS-raw event type from string to ArrayBuffer
and handle u-blox UBX Protocol messages.
Fixes #1838","btw, what's the deal with https://github.com/espruino/Espruino/blob/master/libs/banglejs/jswrap_banglef5.c ? I realize my earlier little / cosmetic changes were not done to that file -- for what purpose is that? Something obsolete?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1839,2020-06-01T15:51:16Z,2020-06-02T08:37:35Z,2020-06-02T08:37:35Z,MERGED,True,70,27,2,https://github.com/ikkala,GPS-raw event: handle UBX protocol,3,[],https://github.com/espruino/Espruino/pull/1839,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1839#issuecomment-637364955,"Bangle.js: Changed GPS-raw event type from string to ArrayBuffer
and handle u-blox UBX Protocol messages.
Fixes #1838","Originally I planned to use the F5 watch (https://uk.gearbest.com/smart-watches/pp_1063842.html) for Bangle.js - and the code is for that. I kept it around because during development some folks had the F5 and wanted to keep testing with it.
There was always the hope I'd try and share common code but basically yes, it's obsolete now - and I'll move it into the unsupported boards branch soon.",True,{'THUMBS_UP': ['https://github.com/ikkala']}
espruino/Espruino,https://github.com/espruino/Espruino,1839,2020-06-01T15:51:16Z,2020-06-02T08:37:35Z,2020-06-02T08:37:35Z,MERGED,True,70,27,2,https://github.com/ikkala,GPS-raw event: handle UBX protocol,3,[],https://github.com/espruino/Espruino/pull/1839,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1839#issuecomment-637385166,"Bangle.js: Changed GPS-raw event type from string to ArrayBuffer
and handle u-blox UBX Protocol messages.
Fixes #1838",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1841,2020-06-02T00:42:03Z,2020-06-02T08:11:08Z,2020-06-02T08:11:08Z,MERGED,True,2613,1902,5,https://github.com/nebbishhacker,Include accented characters directly in fontmap,1,[],https://github.com/espruino/Espruino/pull/1841,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1841,"I made the font map use a 13x19 grid to give the characters a bit more headroom, added the accents directly, and removed all the accent handling code.
The net size increase due to this change is 840 bytes, going by the contents of the zip produced by  BOARD=BANGLEJS RELEASE=1 DFU_UPDATE_BUILD=1 make.","I made the font map use a 13x19 grid to give the characters a bit more headroom, added the accents directly, and removed all the accent handling code.
The net size increase due to this change is 840 bytes, going by the contents of the zip produced by  BOARD=BANGLEJS RELEASE=1 DFU_UPDATE_BUILD=1 make.",True,{'ROCKET': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1841,2020-06-02T00:42:03Z,2020-06-02T08:11:08Z,2020-06-02T08:11:08Z,MERGED,True,2613,1902,5,https://github.com/nebbishhacker,Include accented characters directly in fontmap,1,[],https://github.com/espruino/Espruino/pull/1841,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1841#issuecomment-637369918,"I made the font map use a 13x19 grid to give the characters a bit more headroom, added the accents directly, and removed all the accent handling code.
The net size increase due to this change is 840 bytes, going by the contents of the zip produced by  BOARD=BANGLEJS RELEASE=1 DFU_UPDATE_BUILD=1 make.","Wow, thanks! Shame it's that much but even so it'll be a significant improvement over the old vector font, and it contains twice as many characters!
Thanks for all your work on this! It must have taken ages!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/ikkala,1,https://github.com/espruino/Espruino/pull/1844,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1844#issuecomment-638154921,,"Ok, thanks! I was just about to commit my changes for reduced RAM so this'll make the merge interesting anyway :)",True,{'THUMBS_UP': ['https://github.com/ikkala']}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1844#issuecomment-638166398,,"Sorry - just had to take this out again. It really messes with work I did to get the buffer size down.
While I'd managed to merge it, it turns out that if the message length was bufferSize+1, there'd be bufferSize bytes already queued up, so there wouldn't be the CRC bytes.
IMO something like this should probably be done outside of the interrupt. It's so rare UBX packets will be used I think it's reasonable to do this in JS land - it would also help to know if you'd got a packet but it was corrupt - with the CRC check in the IRQ you wouldn't see that at all.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/ikkala,4,https://github.com/espruino/Espruino/pull/1844#issuecomment-638176941,,"Ok.. Is your new implementation still giving the checksum bytes in GPS-raw event to the API user, like in my fix? So that when I restore the nav db dump back to GPS receiver I don't ""have to"" calculate the checksums manually..?
Edit: You kind of answered to my question there.. :)  So, let's do it in JS land.
Edit2: Actually, how to compare if my CRC calcuation in JS land are correct if I don't receive the originators (GPS receiver) bytes..?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1844#issuecomment-638186422,,We just need to add 2 to ubloxMsgLength?,True,{'THUMBS_UP': ['https://github.com/ikkala']}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1844#issuecomment-638186599,,If so I'll dump that in now,True,{'THUMBS_UP': ['https://github.com/ikkala']}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1844#issuecomment-638197326,,"ok, just done",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1844,2020-06-03T12:03:03Z,2020-06-03T12:08:42Z,2020-06-03T13:35:14Z,MERGED,True,18,9,1,https://github.com/ikkala,GPS-raw event: check and return UBX protocol checksums,1,[],https://github.com/espruino/Espruino/pull/1844,https://github.com/ikkala,8,https://github.com/espruino/Espruino/pull/1844#issuecomment-638200955,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1845,2020-06-03T12:25:14Z,2020-06-03T12:25:19Z,2020-06-03T12:26:04Z,MERGED,True,9,18,1,https://github.com/gfwilliams,"Revert ""GPS-raw event: check and return UBX protocol checksums""",1,[],https://github.com/espruino/Espruino/pull/1845,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/1845,"Reverts #1844
Sorry - this completely messes up all the work I did this morning to reduce buffer size :(
IMO something like this should probably be done outside of the interrupt. It's so rare UBX packets will be used I think it's reasonable to do this in JS land - it would also help to know if you'd got a packet but it was corrupt. In this case you won't see that at all.","Reverts #1844
Sorry - this completely messes up all the work I did this morning to reduce buffer size :(
IMO something like this should probably be done outside of the interrupt. It's so rare UBX packets will be used I think it's reasonable to do this in JS land - it would also help to know if you'd got a packet but it was corrupt. In this case you won't see that at all.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1848,2020-06-05T01:00:11Z,2020-06-05T08:24:54Z,2020-06-05T08:24:54Z,MERGED,True,1192,1045,3,https://github.com/nebbishhacker,Reduce size of vector font,1,[],https://github.com/espruino/Espruino/pull/1848,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1848,"Instead of storing everything in a single array delimited by magic
values, have separate arrays containing

vertices for each polygon
# of vertices for each polygon
polygon indices for each char
# of polygons for each char

This arrangement means that multiple chars can reference the same
polygons. build_vector_font.js takes advantage of this by
normalizing and deduplicated polygons where it can.
Shaves exactly one kilobyte from the final build.","Instead of storing everything in a single array delimited by magic
values, have separate arrays containing

vertices for each polygon
# of vertices for each polygon
polygon indices for each char
# of polygons for each char

This arrangement means that multiple chars can reference the same
polygons. build_vector_font.js takes advantage of this by
normalizing and deduplicated polygons where it can.
Shaves exactly one kilobyte from the final build.",True,{'ROCKET': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1848,2020-06-05T01:00:11Z,2020-06-05T08:24:54Z,2020-06-05T08:24:54Z,MERGED,True,1192,1045,3,https://github.com/nebbishhacker,Reduce size of vector font,1,[],https://github.com/espruino/Espruino/pull/1848,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1848#issuecomment-639335373,"Instead of storing everything in a single array delimited by magic
values, have separate arrays containing

vertices for each polygon
# of vertices for each polygon
polygon indices for each char
# of polygons for each char

This arrangement means that multiple chars can reference the same
polygons. build_vector_font.js takes advantage of this by
normalizing and deduplicated polygons where it can.
Shaves exactly one kilobyte from the final build.","Wow! This is extremely cool - thank you!
So actually it's a bit like we were doing with the accents, but it's all done automagically by the build script? That's amazingly clever.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1850,2020-06-05T13:19:19Z,2020-06-05T13:35:49Z,2020-06-05T13:35:49Z,MERGED,True,4,16,1,https://github.com/FransM,Eliminate spiFlashReadWrite,1,[],https://github.com/espruino/Espruino/pull/1850,https://github.com/FransM,1,https://github.com/espruino/Espruino/pull/1850,"This is only called once, and can also be done with a Write followed by a Read","This is only called once, and can also be done with a Write followed by a Read",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1850,2020-06-05T13:19:19Z,2020-06-05T13:35:49Z,2020-06-05T13:35:49Z,MERGED,True,4,16,1,https://github.com/FransM,Eliminate spiFlashReadWrite,1,[],https://github.com/espruino/Espruino/pull/1850,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1850#issuecomment-639484117,"This is only called once, and can also be done with a Write followed by a Read",Neat - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1851,2020-06-06T04:55:36Z,2020-06-08T07:54:34Z,2020-06-08T07:54:34Z,MERGED,True,1388,1364,3,https://github.com/nebbishhacker,Add lowercase eth (ð) to vector font,1,[],https://github.com/espruino/Espruino/pull/1851,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1851,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1851,2020-06-06T04:55:36Z,2020-06-08T07:54:34Z,2020-06-08T07:54:34Z,MERGED,True,1388,1364,3,https://github.com/nebbishhacker,Add lowercase eth (ð) to vector font,1,[],https://github.com/espruino/Espruino/pull/1851,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1851#issuecomment-640433671,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1855,2020-06-08T22:43:19Z,2020-06-09T06:51:59Z,2020-06-09T06:51:59Z,MERGED,True,87,0,3,https://github.com/nebbishhacker,Add Graphics.transformVertices,1,[],https://github.com/espruino/Espruino/pull/1855,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1855,"Adds a method to the graphics class for applying a transformation to a
list of vertices. This method can be used alongside drawPoly to translate,
rotate and scale complex polygons in real time.
When I modify my original svg2bangle demo to use this, it stops looking like a slideshow and starts looking like an actual animation :)","Adds a method to the graphics class for applying a transformation to a
list of vertices. This method can be used alongside drawPoly to translate,
rotate and scale complex polygons in real time.
When I modify my original svg2bangle demo to use this, it stops looking like a slideshow and starts looking like an actual animation :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1855,2020-06-08T22:43:19Z,2020-06-09T06:51:59Z,2020-06-09T06:51:59Z,MERGED,True,87,0,3,https://github.com/nebbishhacker,Add Graphics.transformVertices,1,[],https://github.com/espruino/Espruino/pull/1855,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1855#issuecomment-640988501,"Adds a method to the graphics class for applying a transformation to a
list of vertices. This method can be used alongside drawPoly to translate,
rotate and scale complex polygons in real time.
When I modify my original svg2bangle demo to use this, it stops looking like a slideshow and starts looking like an actual animation :)","Nice, have you thought about having scale for x and y as separate values?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1855,2020-06-08T22:43:19Z,2020-06-09T06:51:59Z,2020-06-09T06:51:59Z,MERGED,True,87,0,3,https://github.com/nebbishhacker,Add Graphics.transformVertices,1,[],https://github.com/espruino/Espruino/pull/1855,https://github.com/nebbishhacker,3,https://github.com/espruino/Espruino/pull/1855#issuecomment-641018470,"Adds a method to the graphics class for applying a transformation to a
list of vertices. This method can be used alongside drawPoly to translate,
rotate and scale complex polygons in real time.
When I modify my original svg2bangle demo to use this, it stops looking like a slideshow and starts looking like an actual animation :)","I considered it. I would like to keep the scale option in order to stay consistent with drawImage, but additional scaleX and scaleY options could be added.
You can also do pretty much whatever transformation you want by passing a transformation matrix. To do non-uniform scaling:
g.transformVertices(verts, [scaleX, 0, 0, scaleY, 0, 0]);",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1855,2020-06-08T22:43:19Z,2020-06-09T06:51:59Z,2020-06-09T06:51:59Z,MERGED,True,87,0,3,https://github.com/nebbishhacker,Add Graphics.transformVertices,1,[],https://github.com/espruino/Espruino/pull/1855,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1855#issuecomment-641071598,"Adds a method to the graphics class for applying a transformation to a
list of vertices. This method can be used alongside drawPoly to translate,
rotate and scale complex polygons in real time.
When I modify my original svg2bangle demo to use this, it stops looking like a slideshow and starts looking like an actual animation :)","This looks great - I was wondering how to implement a transform nicely given only draw/fillPoly could use it, and this seems to fit well. I'm all for the current solution with a single scale - specifying a matrix is so easy and if someone wants to do more complex stuff we could always write a module for it.
I'll just change the 'jsvGetFloatAndUnLock' to jsvReadConfigObject after merge though... https://github.com/espruino/Espruino/blob/master/libs/graphics/jswrap_graphics.c#L2272-L2279
It should be marginally more efficient but will also error if the user makes a typo - eg {rotote:50}",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1858,2020-06-09T23:14:32Z,2020-06-10T06:41:03Z,2020-06-10T12:57:40Z,MERGED,True,136,136,4,https://github.com/nebbishhacker,Remove half-pixel offset from fillPoly,1,[],https://github.com/espruino/Espruino/pull/1858,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1858,"This makes the results of fillPoly align with those of drawPoly when
both are fed whole-pixel coordinates.
For applications where it makes a noticeable difference the offset can
be added manually before calling fillPoly, which is what the vector
font rendering code now does.","This makes the results of fillPoly align with those of drawPoly when
both are fed whole-pixel coordinates.
For applications where it makes a noticeable difference the offset can
be added manually before calling fillPoly, which is what the vector
font rendering code now does.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1858,2020-06-09T23:14:32Z,2020-06-10T06:41:03Z,2020-06-10T12:57:40Z,MERGED,True,136,136,4,https://github.com/nebbishhacker,Remove half-pixel offset from fillPoly,1,[],https://github.com/espruino/Espruino/pull/1858,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1858#issuecomment-641762340,"This makes the results of fillPoly align with those of drawPoly when
both are fed whole-pixel coordinates.
For applications where it makes a noticeable difference the offset can
be added manually before calling fillPoly, which is what the vector
font rendering code now does.","Ok, thanks! And this fixes the issue where a drawPoly+fillPoly would leave gaps?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1858,2020-06-09T23:14:32Z,2020-06-10T06:41:03Z,2020-06-10T12:57:40Z,MERGED,True,136,136,4,https://github.com/nebbishhacker,Remove half-pixel offset from fillPoly,1,[],https://github.com/espruino/Espruino/pull/1858,https://github.com/nebbishhacker,3,https://github.com/espruino/Espruino/pull/1858#issuecomment-641988891,"This makes the results of fillPoly align with those of drawPoly when
both are fed whole-pixel coordinates.
For applications where it makes a noticeable difference the offset can
be added manually before calling fillPoly, which is what the vector
font rendering code now does.","I believe so, as long as the polygon in question consists of whole-number coordinates. You can still end up with a gap if you call drawPoly+fillPoly using a polygon that contains fractional coordinates.
So for instance this would still leave a gap:
g.setColor(1).fillPoly([15.5,1.5, 29.5,11.5, 15.5,29.5, 1.5,19.5]);
g.setColor(2).drawPoly([15.5,1.5, 29.5,11.5, 15.5,29.5, 1.5,19.5, 15.5,1.5]);",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1862,2020-06-13T18:28:09Z,2020-06-14T15:23:41Z,2020-06-14T15:23:42Z,MERGED,True,5,10,2,https://github.com/nebbishhacker,Make Bangle.showLauncher() use less ram,1,[],https://github.com/espruino/Espruino/pull/1862,https://github.com/nebbishhacker,1,https://github.com/espruino/Espruino/pull/1862,"I have a lot of apps installed, and I noticed the loading the launcher was failing with MEMORY errors even when memory utilization was only at ~65%. This change solves that problem.","I have a lot of apps installed, and I noticed the loading the launcher was failing with MEMORY errors even when memory utilization was only at ~65%. This change solves that problem.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1862,2020-06-13T18:28:09Z,2020-06-14T15:23:41Z,2020-06-14T15:23:42Z,MERGED,True,5,10,2,https://github.com/nebbishhacker,Make Bangle.showLauncher() use less ram,1,[],https://github.com/espruino/Espruino/pull/1862,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1862#issuecomment-643781424,"I have a lot of apps installed, and I noticed the loading the launcher was failing with MEMORY errors even when memory utilization was only at ~65%. This change solves that problem.","Wow, thanks! Yeah, that's a great addition.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1870,"setHostname()
getHostname()
getStatus()","setHostname()
getHostname()
getStatus()",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1870#issuecomment-652577075,"setHostname()
getHostname()
getStatus()",#1806,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1870#issuecomment-652815382,"setHostname()
getHostname()
getStatus()",This looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1870#issuecomment-706886026,"setHostname()
getHostname()
getStatus()","Can't find the new function in the new function in http://www.espruino.com/Reference#WIZnet,
is there something missing in JSON{}?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1870#issuecomment-706975463,"setHostname()
getHostname()
getStatus()",You'd declared them to be part of Ethernet which I think is the right class anyway. They seem to be there just fine:  http://www.espruino.com/Reference#Ethernet,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1870,2020-07-01T17:43:19Z,2020-07-02T06:41:13Z,2020-10-12T08:48:37Z,MERGED,True,203,17,4,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1870,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1870#issuecomment-706978046,"setHostname()
getHostname()
getStatus()",Thanks for checking,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1871,"add changelog line
remove jsiConsolePrintf for RELEASE=1","add changelog line
remove jsiConsolePrintf for RELEASE=1",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1871#issuecomment-652848180,"add changelog line
remove jsiConsolePrintf for RELEASE=1",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1871#issuecomment-678088057,"add changelog line
remove jsiConsolePrintf for RELEASE=1","Can you please update the Espruino Reference page, to make the Wiznet add ons visible.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1871#issuecomment-678092859,"add changelog line
remove jsiConsolePrintf for RELEASE=1","Which add-ons specifically? This PR didn't seem to add anything.
I update the Reference every major release, the idea is if you download an official release then the docs match it, so you're not seeing stuff that isn't available.
Hopefully I'll get a new release out soon though",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1871#issuecomment-678096020,"add changelog line
remove jsiConsolePrintf for RELEASE=1","Which add-ons specifically?

they are spread over multiple pr's #1870, #1871, #1874

I update the Reference every major release,

perfect, didn't know that, that's really the best time to update it!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1871,2020-07-02T07:40:05Z,2020-07-02T07:53:26Z,2020-08-21T07:52:03Z,MERGED,True,32,17,2,https://github.com/MaBecker,wiznet_addons,1,[],https://github.com/espruino/Espruino/pull/1871,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1871#issuecomment-678099511,"add changelog line
remove jsiConsolePrintf for RELEASE=1","Ok, great!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1874,2020-07-03T13:49:04Z,2020-07-03T13:57:02Z,2020-07-03T14:27:56Z,MERGED,True,3,0,1,https://github.com/MaBecker,wiznet_addons (fix #1830),1,[],https://github.com/espruino/Espruino/pull/1874,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1874,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1874,2020-07-03T13:49:04Z,2020-07-03T13:57:02Z,2020-07-03T14:27:56Z,MERGED,True,3,0,1,https://github.com/MaBecker,wiznet_addons (fix #1830),1,[],https://github.com/espruino/Espruino/pull/1874,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1874#issuecomment-653560840,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1879,2020-07-13T10:01:48Z,2020-07-13T12:37:31Z,2020-07-13T12:42:46Z,MERGED,True,1,0,1,https://github.com/MaBecker,Update .gitignore (fix #1876),1,[],https://github.com/espruino/Espruino/pull/1879,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1879,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1880,2020-07-13T15:53:40Z,2020-07-14T07:07:22Z,2020-07-14T07:07:23Z,MERGED,True,77,77,11,https://github.com/MaBecker,ESP32 improvements,2,[],https://github.com/espruino/Espruino/pull/1880,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1880,"add FLASH_BAUD
fix erase_flash
switch jsWarn()  to jsDevInfo()
keep jsWarn()/ jsError() for not implemented functions
switch jsError() to jsExceptionHere() if helpfull","add FLASH_BAUD
fix erase_flash
switch jsWarn()  to jsDevInfo()
keep jsWarn()/ jsError() for not implemented functions
switch jsError() to jsExceptionHere() if helpfull",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1880,2020-07-13T15:53:40Z,2020-07-14T07:07:22Z,2020-07-14T07:07:23Z,MERGED,True,77,77,11,https://github.com/MaBecker,ESP32 improvements,2,[],https://github.com/espruino/Espruino/pull/1880,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1880#issuecomment-658000555,"add FLASH_BAUD
fix erase_flash
switch jsWarn()  to jsDevInfo()
keep jsWarn()/ jsError() for not implemented functions
switch jsError() to jsExceptionHere() if helpfull","Thanks - looks great!
However with bluetooth.c, don't we actually want to keep the warnings, or some kind of print that appears for normal release users? It feels quite important to tell them that a function isn't implemented - potentially it should even be an exception.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1880,2020-07-13T15:53:40Z,2020-07-14T07:07:22Z,2020-07-14T07:07:23Z,MERGED,True,77,77,11,https://github.com/MaBecker,ESP32 improvements,2,[],https://github.com/espruino/Espruino/pull/1880,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1880#issuecomment-658006939,"add FLASH_BAUD
fix erase_flash
switch jsWarn()  to jsDevInfo()
keep jsWarn()/ jsError() for not implemented functions
switch jsError() to jsExceptionHere() if helpfull","Thanks, yes keep jsWarn() for BLE and just add jsExceptionHere() where useful.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1880,2020-07-13T15:53:40Z,2020-07-14T07:07:22Z,2020-07-14T07:07:23Z,MERGED,True,77,77,11,https://github.com/MaBecker,ESP32 improvements,2,[],https://github.com/espruino/Espruino/pull/1880,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1880#issuecomment-658010182,"add FLASH_BAUD
fix erase_flash
switch jsWarn()  to jsDevInfo()
keep jsWarn()/ jsError() for not implemented functions
switch jsError() to jsExceptionHere() if helpfull",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1882,2020-07-14T11:57:49Z,2020-07-14T12:00:53Z,2020-07-14T12:22:17Z,MERGED,True,31,2,4,https://github.com/GaryOtt,Added code to jsuGetFreeStack() for ESP32 and introduced ESP_STACK_SI…,1,[],https://github.com/espruino/Espruino/pull/1882,https://github.com/GaryOtt,1,https://github.com/espruino/Espruino/pull/1882,"Addresses jsuGetFreeStack() always returning 1000000 on ESP32 platform.
#1777","Addresses jsuGetFreeStack() always returning 1000000 on ESP32 platform.
#1777",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1882,2020-07-14T11:57:49Z,2020-07-14T12:00:53Z,2020-07-14T12:22:17Z,MERGED,True,31,2,4,https://github.com/GaryOtt,Added code to jsuGetFreeStack() for ESP32 and introduced ESP_STACK_SI…,1,[],https://github.com/espruino/Espruino/pull/1882,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1882#issuecomment-658139794,"Addresses jsuGetFreeStack() always returning 1000000 on ESP32 platform.
#1777",This looks awesome - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1882,2020-07-14T11:57:49Z,2020-07-14T12:00:53Z,2020-07-14T12:22:17Z,MERGED,True,31,2,4,https://github.com/GaryOtt,Added code to jsuGetFreeStack() for ESP32 and introduced ESP_STACK_SI…,1,[],https://github.com/espruino/Espruino/pull/1882,https://github.com/GaryOtt,3,https://github.com/espruino/Espruino/pull/1882#issuecomment-658142808,"Addresses jsuGetFreeStack() always returning 1000000 on ESP32 platform.
#1777",Thanks. Glad to have contributed something. There will be more.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1882,2020-07-14T11:57:49Z,2020-07-14T12:00:53Z,2020-07-14T12:22:17Z,MERGED,True,31,2,4,https://github.com/GaryOtt,Added code to jsuGetFreeStack() for ESP32 and introduced ESP_STACK_SI…,1,[],https://github.com/espruino/Espruino/pull/1882,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1882#issuecomment-658148389,"Addresses jsuGetFreeStack() always returning 1000000 on ESP32 platform.
#1777","There will be more.

Thanks.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1885,2020-07-15T15:36:51Z,2020-07-15T19:13:13Z,2020-07-15T19:13:13Z,MERGED,True,1,0,1,https://github.com/MaBecker,add 6x8 font,1,[],https://github.com/espruino/Espruino/pull/1885,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1885,there is enough space an ESP32 to have have 6x8 font,there is enough space an ESP32 to have have 6x8 font,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1885,2020-07-15T15:36:51Z,2020-07-15T19:13:13Z,2020-07-15T19:13:13Z,MERGED,True,1,0,1,https://github.com/MaBecker,add 6x8 font,1,[],https://github.com/espruino/Espruino/pull/1885,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1885#issuecomment-658953818,there is enough space an ESP32 to have have 6x8 font,Seems like a good plan!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1886,2020-07-16T05:47:06Z,2020-07-17T10:15:10Z,2020-07-17T10:15:10Z,MERGED,True,1,0,1,https://github.com/atc1441,add jshSPISendMany,1,[],https://github.com/espruino/Espruino/pull/1886,https://github.com/atc1441,1,https://github.com/espruino/Espruino/pull/1886,"only TX support for now, size max 256 bytes at once.
this improves the sending of SPI data.","only TX support for now, size max 256 bytes at once.
this improves the sending of SPI data.",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1886,2020-07-16T05:47:06Z,2020-07-17T10:15:10Z,2020-07-17T10:15:10Z,MERGED,True,1,0,1,https://github.com/atc1441,add jshSPISendMany,1,[],https://github.com/espruino/Espruino/pull/1886,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1886#issuecomment-659206887,"only TX support for now, size max 256 bytes at once.
this improves the sending of SPI data.",Other half of this is #1887,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/atc1441,1,https://github.com/espruino/Espruino/pull/1887,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.","only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1887#issuecomment-659206429,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.","Thanks, this looks good - do you think you'll be able to get RX and >256 byte done any time soon?
Personally I'm not sure I should merge this right now as it'll break SPI for anyone that's trying to receive data as well. You could always copy the 'weak' jshSPISendMany implementation from jshardwarecommon.c and then use that if there's an RX buffer or >256 bytes?",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/atc1441,3,https://github.com/espruino/Espruino/pull/1887#issuecomment-659433062,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.","The new changes should now enable RX and up to 4096 bytes on TX.
I also tested the Callback but that did brake the sending of the new byte because of the way it handles the sending. and the end of the sending.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1887#issuecomment-659472475,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.","Looks great - thanks! Do you think you could just do
jshSPIWait(device);
if (callback) callback();

at the end?
That way even though sending in the background doesn't work, it doesn't matter. It'll just send in the foreground and call the callback when done? Then it doesn't break anything.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/atc1441,5,https://github.com/espruino/Espruino/pull/1887#issuecomment-659604609,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.",Good idea,True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1887#issuecomment-659948179,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.",Great! Are you happy that this is good to go? It looks fine to me. @MaBecker ?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1887,2020-07-16T05:48:13Z,2020-07-17T08:20:21Z,2020-07-17T08:20:21Z,MERGED,True,58,18,1,https://github.com/atc1441,add jshSPISendMany,3,[],https://github.com/espruino/Espruino/pull/1887,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1887#issuecomment-659952050,"only tx supported for now and no callback, Max 256 byte per request
this improves the sending of SPI data.","Yes good to go, because it is  already in use locally with a generic tft lcd unbuffered spi display driver started in #1884.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1890,2020-07-17T09:36:54Z,2020-07-17T09:57:50Z,2020-07-17T09:57:50Z,CLOSED,False,1,0,1,https://github.com/GaryOtt,Fixed 'undefined reference to ESP32_Get_NVS_Status' build error.,1,[],https://github.com/espruino/Espruino/pull/1890,https://github.com/GaryOtt,1,https://github.com/espruino/Espruino/pull/1890,"targets/esp32/jshardwareESP32.c is required by every ESP32 build as main.c uses the functions it contains.

  
    
      Espruino/targets/esp32/main.c
    
    
         Line 68
      in
      c91f715
    
  
  
    

        
          
           if(ESP32_Get_NVS_Status(ESP_NETWORK_WIFI)) jswrap_wifi_restore();   
        
    
  


Without this change, removing libraries from ESP32.py may result in a build error.
   'libraries' : [
     'ESP32',
     'NET',
     # 'GRAPHICS',
     'CRYPTO','SHA256','SHA512',
     # 'TLS',
     # 'TELNET',
     # 'NEOPIXEL',
     # 'FILESYSTEM',
     'FLASHFS'
     # 'BLUETOOTH'
   ],","targets/esp32/jshardwareESP32.c is required by every ESP32 build as main.c uses the functions it contains.

  
    
      Espruino/targets/esp32/main.c
    
    
         Line 68
      in
      c91f715
    
  
  
    

        
          
           if(ESP32_Get_NVS_Status(ESP_NETWORK_WIFI)) jswrap_wifi_restore();   
        
    
  


Without this change, removing libraries from ESP32.py may result in a build error.
   'libraries' : [
     'ESP32',
     'NET',
     # 'GRAPHICS',
     'CRYPTO','SHA256','SHA512',
     # 'TLS',
     # 'TELNET',
     # 'NEOPIXEL',
     # 'FILESYSTEM',
     'FLASHFS'
     # 'BLUETOOTH'
   ],",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1890,2020-07-17T09:36:54Z,2020-07-17T09:57:50Z,2020-07-17T09:57:50Z,CLOSED,False,1,0,1,https://github.com/GaryOtt,Fixed 'undefined reference to ESP32_Get_NVS_Status' build error.,1,[],https://github.com/espruino/Espruino/pull/1890,https://github.com/GaryOtt,2,https://github.com/espruino/Espruino/pull/1890#issuecomment-660008932,"targets/esp32/jshardwareESP32.c is required by every ESP32 build as main.c uses the functions it contains.

  
    
      Espruino/targets/esp32/main.c
    
    
         Line 68
      in
      c91f715
    
  
  
    

        
          
           if(ESP32_Get_NVS_Status(ESP_NETWORK_WIFI)) jswrap_wifi_restore();   
        
    
  


Without this change, removing libraries from ESP32.py may result in a build error.
   'libraries' : [
     'ESP32',
     'NET',
     # 'GRAPHICS',
     'CRYPTO','SHA256','SHA512',
     # 'TLS',
     # 'TELNET',
     # 'NEOPIXEL',
     # 'FILESYSTEM',
     'FLASHFS'
     # 'BLUETOOTH'
   ],","Oh, that's embarrassing. Build error on Travis ESP32. It builds locally for me.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1891,2020-07-20T09:47:59Z,2020-07-21T08:27:50Z,2020-07-21T08:27:50Z,MERGED,True,234,1,5,https://github.com/MaBecker,add lcd spi unbuffered driver,2,[],https://github.com/espruino/Espruino/pull/1891,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1891,"required make options:
USE_LCD_SPI_UNBUF=1
DEFINES=""-DSPISENDMANY_BUFFER_SIZE=128""","required make options:
USE_LCD_SPI_UNBUF=1
DEFINES=""-DSPISENDMANY_BUFFER_SIZE=128""",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1891,2020-07-20T09:47:59Z,2020-07-21T08:27:50Z,2020-07-21T08:27:50Z,MERGED,True,234,1,5,https://github.com/MaBecker,add lcd spi unbuffered driver,2,[],https://github.com/espruino/Espruino/pull/1891,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1891#issuecomment-660925309,"required make options:
USE_LCD_SPI_UNBUF=1
DEFINES=""-DSPISENDMANY_BUFFER_SIZE=128""",#1884,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1891,2020-07-20T09:47:59Z,2020-07-21T08:27:50Z,2020-07-21T08:27:50Z,MERGED,True,234,1,5,https://github.com/MaBecker,add lcd spi unbuffered driver,2,[],https://github.com/espruino/Espruino/pull/1891,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1891#issuecomment-661300674,"required make options:
USE_LCD_SPI_UNBUF=1
DEFINES=""-DSPISENDMANY_BUFFER_SIZE=128""","Ok, changed and tested. So from my side we are good to go.",True,{'THUMBS_UP': ['https://github.com/atc1441']}
espruino/Espruino,https://github.com/espruino/Espruino,1891,2020-07-20T09:47:59Z,2020-07-21T08:27:50Z,2020-07-21T08:27:50Z,MERGED,True,234,1,5,https://github.com/MaBecker,add lcd spi unbuffered driver,2,[],https://github.com/espruino/Espruino/pull/1891,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1891#issuecomment-661714160,"required make options:
USE_LCD_SPI_UNBUF=1
DEFINES=""-DSPISENDMANY_BUFFER_SIZE=128""",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1893,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1893#issuecomment-662316177,,"I'm not sure I understand this one... Didn't you just copy & paste the jshSPISendMany from jshardware_common?  jshSPISendMany is declared WEAK, so if it's not defined the one in jshardware_common is used automatically so this should have no effect whatsoever.
When you said you'd got it working I assumed you'd actually implemented a jshSPISendMany that called into the ESP8266 SPI send function :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1893#issuecomment-662318704,,"Ups, I missed that declaration stuff .......",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1893#issuecomment-662321887,,"But I added some jsWarn(""."") to check if it is been used and got many ""."" printed when using the hardware SPI1.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1893#issuecomment-662323174,,"If adding __attribute__((weak)) bool is not what you mean, than please guide me to get this corrected as expected.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1893#issuecomment-662330577,,"Yeah, that's not what I meant :)
My point is that your code is being used, but it seems identical to the jshSPISendMany in jshardwarecommon.c that is used by default anyway?
I don't believe there will be any difference whatsoever between this PR and what happens without it.
If you actually want a performance improvement you need to implement your own spi_transaction function that will take an array of data, and then call that from jshSPISendMany",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1893,2020-07-21T19:07:16Z,2020-07-22T08:52:30Z,2020-07-22T09:22:29Z,CLOSED,False,30,0,2,https://github.com/MaBecker,add jshSPISendMany(),3,[],https://github.com/espruino/Espruino/pull/1893,https://github.com/MaBecker,7,https://github.com/espruino/Espruino/pull/1893#issuecomment-662345136,,"ok, will send a new pr :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1894,2020-07-23T05:48:24Z,2020-07-23T07:17:51Z,2020-07-23T08:34:48Z,MERGED,True,2,2,2,https://github.com/MaBecker,fixes for lcd_spi_unbuf,1,[],https://github.com/espruino/Espruino/pull/1894,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1894,"only DC is mandatory
remove PACKED_FLAGS to work with ESP8266","only DC is mandatory
remove PACKED_FLAGS to work with ESP8266",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1894,2020-07-23T05:48:24Z,2020-07-23T07:17:51Z,2020-07-23T08:34:48Z,MERGED,True,2,2,2,https://github.com/MaBecker,fixes for lcd_spi_unbuf,1,[],https://github.com/espruino/Espruino/pull/1894,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1894#issuecomment-662855489,"only DC is mandatory
remove PACKED_FLAGS to work with ESP8266",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1895,2020-07-24T06:29:59Z,2020-07-24T10:43:55Z,2020-07-24T10:43:55Z,MERGED,True,12,9,5,https://github.com/MaBecker,allow  1MB,2,[],https://github.com/espruino/Espruino/pull/1895,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1895,"without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make","without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1895,2020-07-24T06:29:59Z,2020-07-24T10:43:55Z,2020-07-24T10:43:55Z,MERGED,True,12,9,5,https://github.com/MaBecker,allow  1MB,2,[],https://github.com/espruino/Espruino/pull/1895,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1895#issuecomment-663369607,"without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make",please do not merge now,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1895,2020-07-24T06:29:59Z,2020-07-24T10:43:55Z,2020-07-24T10:43:55Z,MERGED,True,12,9,5,https://github.com/MaBecker,allow  1MB,2,[],https://github.com/espruino/Espruino/pull/1895,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1895#issuecomment-663403678,"without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make",good to go :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1895,2020-07-24T06:29:59Z,2020-07-24T10:43:55Z,2020-07-24T10:43:55Z,MERGED,True,12,9,5,https://github.com/MaBecker,allow  1MB,2,[],https://github.com/espruino/Espruino/pull/1895,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1895#issuecomment-663413951,"without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make",Nice - thanks! This looks much tidier,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1895,2020-07-24T06:29:59Z,2020-07-24T10:43:55Z,2020-07-24T10:43:55Z,MERGED,True,12,9,5,https://github.com/MaBecker,allow  1MB,2,[],https://github.com/espruino/Espruino/pull/1895,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1895#issuecomment-663474459,"without FOTA 1MB boards can now use the complete 1MB flash
FLASH_1MB=1 NO_FOTA=1  make","ok , done with test - ready to merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1897,2020-07-27T07:16:01Z,2020-08-17T07:14:30Z,2020-08-17T07:37:23Z,CLOSED,False,36,0,1,https://github.com/MaBecker,add jshSPISendMany,2,[],https://github.com/espruino/Espruino/pull/1897,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1897,"calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know","calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1897,2020-07-27T07:16:01Z,2020-08-17T07:14:30Z,2020-08-17T07:37:23Z,CLOSED,False,36,0,1,https://github.com/MaBecker,add jshSPISendMany,2,[],https://github.com/espruino/Espruino/pull/1897,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1897#issuecomment-664179750,"calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know","Is the new code actually any faster than the default implementation?
I'd imagined that you would extend spi_transaction to take a big buffer of data (so it's not doing the peripheral setup for each byte). Often you can push a new byte to send in before reading the returned byte out, so you can have gapless SPI send. I bet there's a bunch of ESP8266 example code out there.
But even ignoring that, I think this code is broken. As far as I can tell, if you're sending a multiple of 4 bytes out, you only receive one byte for every 4 sent :(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1897,2020-07-27T07:16:01Z,2020-08-17T07:14:30Z,2020-08-17T07:37:23Z,CLOSED,False,36,0,1,https://github.com/MaBecker,add jshSPISendMany,2,[],https://github.com/espruino/Espruino/pull/1897,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1897#issuecomment-664976329,"calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know","Is the new code actually any faster than the default implementation?

Yes,  but not significantly as i thought.

I'd imagined that you would extend spi_transaction to take a big buffer

I underestimated the preps in spi_transaction and thougth reducing the call by 3/4 would be a big improvement.
used this snipped to  compare the difference of versions:
    t1=getTime(); 
    g.clear();
    t2 = getTime();
    console.log(t1-t2);


I bet there's a bunch of ESP8266 example code out there.

That's what I though too, but  just found one, called fast lcd driver using all possible 16 dword register

you only receive one byte for every 4 sent :(

Hmm,  easy to fix, but does not help much to improve speed.
Next:
Will look forward to enhance the existing spi_transaction to take a big buffer of data.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1897,2020-07-27T07:16:01Z,2020-08-17T07:14:30Z,2020-08-17T07:37:23Z,CLOSED,False,36,0,1,https://github.com/MaBecker,add jshSPISendMany,2,[],https://github.com/espruino/Espruino/pull/1897,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1897#issuecomment-674706954,"calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know",Closing this one for now...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1897,2020-07-27T07:16:01Z,2020-08-17T07:14:30Z,2020-08-17T07:37:23Z,CLOSED,False,36,0,1,https://github.com/MaBecker,add jshSPISendMany,2,[],https://github.com/espruino/Espruino/pull/1897,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1897#issuecomment-674716283,"calling spi_transaction() directly with 8 or 32 bits
Hope this is a implementation you have in mind :)
please check and let me know","Thanks, lost touch.....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1898,2020-07-27T15:12:02Z,2020-07-28T07:07:23Z,2020-07-28T07:07:23Z,MERGED,True,4,0,1,https://github.com/MaBecker,add information about custom board,2,[],https://github.com/espruino/Espruino/pull/1898,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1898,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1898,2020-07-27T15:12:02Z,2020-07-28T07:07:23Z,2020-07-28T07:07:23Z,MERGED,True,4,0,1,https://github.com/MaBecker,add information about custom board,2,[],https://github.com/espruino/Espruino/pull/1898,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1898#issuecomment-664475981,,Thanks! Please could you also mention about boardname? #1817,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1898,2020-07-27T15:12:02Z,2020-07-28T07:07:23Z,2020-07-28T07:07:23Z,MERGED,True,4,0,1,https://github.com/MaBecker,add information about custom board,2,[],https://github.com/espruino/Espruino/pull/1898,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1898#issuecomment-664819745,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1904,2020-08-07T21:19:41Z,2020-08-17T07:13:37Z,2020-08-17T08:01:40Z,MERGED,True,11,10,1,https://github.com/MaBecker,update lcd spi unbuffered driver,1,[],https://github.com/espruino/Espruino/pull/1904,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1904,fix colors,fix colors,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1904,2020-08-07T21:19:41Z,2020-08-17T07:13:37Z,2020-08-17T08:01:40Z,MERGED,True,11,10,1,https://github.com/MaBecker,update lcd spi unbuffered driver,1,[],https://github.com/espruino/Espruino/pull/1904,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1904#issuecomment-674727029,fix colors,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1905,2020-08-10T19:38:46Z,2020-08-17T07:13:57Z,2020-08-17T08:01:15Z,MERGED,True,5,5,1,https://github.com/MaBecker,Update partitions_espruino.csv,1,[],https://github.com/espruino/Espruino/pull/1905,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1905,sync with EspruinoBuildTools/esp32/build/app/partitions_espruino.csv,sync with EspruinoBuildTools/esp32/build/app/partitions_espruino.csv,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1905,2020-08-10T19:38:46Z,2020-08-17T07:13:57Z,2020-08-17T08:01:15Z,MERGED,True,5,5,1,https://github.com/MaBecker,Update partitions_espruino.csv,1,[],https://github.com/espruino/Espruino/pull/1905,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1905#issuecomment-674726832,sync with EspruinoBuildTools/esp32/build/app/partitions_espruino.csv,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1907,2020-08-12T23:01:48Z,2020-08-17T07:15:08Z,2020-08-17T07:15:08Z,MERGED,True,1,0,1,https://github.com/kiranshila,Update jswrap_regexp.c,1,[],https://github.com/espruino/Espruino/pull/1907,https://github.com/kiranshila,1,https://github.com/espruino/Espruino/pull/1907,"Added backspace escape character
Fixes #1906","Added backspace escape character
Fixes #1906",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1907,2020-08-12T23:01:48Z,2020-08-17T07:15:08Z,2020-08-17T07:15:08Z,MERGED,True,1,0,1,https://github.com/kiranshila,Update jswrap_regexp.c,1,[],https://github.com/espruino/Espruino/pull/1907,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1907#issuecomment-674707202,"Added backspace escape character
Fixes #1906","Awesome, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1924,suggestion from http://forum.espruino.com/comments/15491106/,suggestion from http://forum.espruino.com/comments/15491106/,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,2,https://github.com/espruino/Espruino/pull/1924#issuecomment-684957403,suggestion from http://forum.espruino.com/comments/15491106/,"Hi, In my version, I was worried that there might be very occasional problems if _lastxand  _lasty were not invalidated by the rectangle drawing routine so I initialised both variables  to -1 when declared and then reset them to -1 after drawing the rectangle.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1924#issuecomment-684962125,suggestion from http://forum.espruino.com/comments/15491106/,"Thanks! I'd definitely add @jeffmer's suggestion.
Also, any chance of just using gfx->data.width rather than having a separate var for it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1924#issuecomment-684970976,suggestion from http://forum.espruino.com/comments/15491106/,Thanks for checking.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1924#issuecomment-685320013,suggestion from http://forum.espruino.com/comments/15491106/,"Please do not merge now, like to run some more tests. Let you know when good to go.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,6,https://github.com/espruino/Espruino/pull/1924#issuecomment-692501425,suggestion from http://forum.espruino.com/comments/15491106/,"I really like lcd_spi_unbuf class, but drawing anything with vector font or drawImages() is not fast.
Would it make sense to implement


http://forum.espruino.com/comments/15491106  .setRotation() dependent?
does the fill algorithm work horizontal even with setRotation(1)?


a dynamic sendbuffer with window options for quicker updates?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1924#issuecomment-692544770,suggestion from http://forum.espruino.com/comments/15491106/,"Tweaking the window/optimisation based on setRotation would be really neat. I can't remember for sure, but it may be that fillRect/fillPoly automatically rotate before rendering so you won't see a big difference though?
The dynamic sendbuffer could be neat. I feel it's diminishing returns though - in a lot of cases I'm not sure the sendbuffer will help. It's literally just bitmap rendering where it'll help you, not fonts or anything else.
IMO it might be more sensible to look at ways of improving the API so that drawing bitmaps can be handled quickly (eg. a blitStart/blitEnd functionality like I'd started doing with st7789_8bit)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,8,https://github.com/espruino/Espruino/pull/1924#issuecomment-692562066,suggestion from http://forum.espruino.com/comments/15491106/,"IMO it might be more sensible to look at ways of improving the API so that drawing bitmaps can be handled quickly (eg. a blitStart/blitEnd functionality like I'd started doing with st7789_8bit)

Great, so let's improve this by using blitbit operations.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,9,https://github.com/espruino/Espruino/pull/1924#issuecomment-700252767,suggestion from http://forum.espruino.com/comments/15491106/,"Ok, got blit1Bit working and it is a improvement for 1 BPP images, but when it comes to g.setRotation() it's slow  .....
Any hint how to improve/extend  bit blitting  for e.g. g.setRotation(1)?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,10,https://github.com/espruino/Espruino/pull/1924#issuecomment-700535144,suggestion from http://forum.espruino.com/comments/15491106/,"I have been doing some measurements comparing Bangle with an ESP32 with an ST789V 240x240 display. The driver is my optimised version of @MaBecker's excellent lcd_spi_unbuf which can be viewed here. This version uses a chunk buffer to optimise both spi writes and pin operations.
I compare the time taken to fill a 240 x 160 pixel rectangle with the time to draw a 240 x 160 1 bit image. I include the test code below in case you want to try it.
RESULTS
Bangle:  fillRect  11ms,  drawImage 66ms.
ESP32: fillRect 44ms, drawImage 82ms.
Given these numbers, I wonder if the extra complexity of adding bitblit operations to the existing simple callback interface is merited since my understanding is that the fillRect figure of 44ms represents the best you can do using the current Espruino implementation of SPI.
function time_fill(){
    g.setColor(0x07E0);
    var time= Date.now();
    g.fillRect(0,40,239,199);
    g.flip();
    time = Math.floor(Date.now()-time);
    console.log(""Time to Draw Rectangle: ""+time+""ms"");
}

var pal1color = new Uint16Array([0x0000,0xF100]);
var buf = Graphics.createArrayBuffer(240,160,1,{msb:true});
buf.setColor(1);
buf.fillRect(0,0,239,159);

function time_image(){
    var time= Date.now();
    g.drawImage({width:240,height:160,bpp:1,buffer:buf.buffer, palette:pal1color},0,40);
    g.flip();
    time = Math.floor(Date.now()-time);
    console.log(""Time to Draw Image: ""+time+""ms"");
}

//Bangle.on('swipe',(dir)=>{
FT5206.on('swipe',(dir)=>{
    if(dir<0)
        time_fill();
    else 
        time_image();
});",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,11,https://github.com/espruino/Espruino/pull/1924#issuecomment-700544710,suggestion from http://forum.espruino.com/comments/15491106/,@jeffmer can you please provide numbers when using g.setRotation(1).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,12,https://github.com/espruino/Espruino/pull/1924#issuecomment-700572084,suggestion from http://forum.espruino.com/comments/15491106/,"RESULTS
Bangle:  fillRect  11ms,  drawImage 722ms.
ESP32: fillRect 44ms, drawImage 5841ms.
It’s predictably awful - not great on Bangle either. I have not needed it, however, I will try to implement an overriding  setRotation function in the driver using ST7789 hardware operations which should fix the problem.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1924#issuecomment-700572843,suggestion from http://forum.espruino.com/comments/15491106/,"fillRect figure of 44ms represents the best you can do using the current Espruino implementation of SPI.

I believe that is correct. There is an issue with setRotation in that it'll cause the direction that pixels are written in to be modified, which means that the lastPixel optimisations have no effect.
Even the Bangle.js optimised blit only works when unrotated
I really think that trying to hack around this is massive overkill though. As @jeffmer point out you can just write to the MADCTL register on ST7789 to effectively do setRotation, while allowing Espruino to still write at full speed. It'll be far faster than any hack we could do here
edit: having said that ST7789V may not allow row/column swaps. Some drivers do though.
I'd be interested to see if a rotated drawImage on setRotation(0) is faster than a normal drawImage on setRotation(1)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,14,https://github.com/espruino/Espruino/pull/1924#issuecomment-700579824,suggestion from http://forum.espruino.com/comments/15491106/,"I really think that trying to hack around this is massive overkill though.

that's what I thought too when implementing this bit stuff.
So that's it, ready to merge.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,15,https://github.com/espruino/Espruino/pull/1924#issuecomment-700584568,suggestion from http://forum.espruino.com/comments/15491106/,The version that you plan to merge here is six times slower for drawImage than the optimised version I reference above.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,16,https://github.com/espruino/Espruino/pull/1924#issuecomment-700586426,suggestion from http://forum.espruino.com/comments/15491106/,"The version that you plan to merge here is six times slower for drawImage than the optimised version I reference above.

feel free to go for your own pull request.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,17,https://github.com/espruino/Espruino/pull/1924#issuecomment-700588560,suggestion from http://forum.espruino.com/comments/15491106/,Thanks will do. I was concerned  as to your and Gordon’s view as to whether the need for the flip() operation to flush the buffer is consistent with other graphic drivers.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,18,https://github.com/espruino/Espruino/pull/1924#issuecomment-700615662,suggestion from http://forum.espruino.com/comments/15491106/,"I think the flip could be problematic as you're still rendering, just not completely. Chances are people would think it was a glitch rather than their issue.
Maybe since the file is being scanned for jswrapper anyway (@MaBecker normally when a file contains stuff that will get created in JS it should be called jswrap_xyz - I missed that first time) you could just define an idle handler:
/*JSON{
  ""type"" : ""idle"",
  ""generate"" : ""jswrap_lcd_spi_unbuf_idle""
}*/
bool jswrap_lcd_spi_unbuf_idle() {
//  if there's stuff left to send do it here
return false;
}",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/jeffmer,19,https://github.com/espruino/Espruino/pull/1924#issuecomment-700628793,suggestion from http://forum.espruino.com/comments/15491106/,"Thanks that’s neat, I was not aware of the idle facility. I will implement and test.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,20,https://github.com/espruino/Espruino/pull/1924#issuecomment-700641065,suggestion from http://forum.espruino.com/comments/15491106/,"@jeffmer  Please keep in mind: The main goal of this lib is to use no buffers.
Thanks @gfwilliams for double checking the lib.
Will add jswrap_lcd_spi_unbuf_idle and go for some more test with blit1Bit and  MADCTL.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,21,https://github.com/espruino/Espruino/pull/1924#issuecomment-700676281,suggestion from http://forum.espruino.com/comments/15491106/,"Just to add here - not sure what the situation is with DMA on ESP32 (I guess we don't have it?) but that would be a great way to speed this up. Small buffer, and then queue pixels to transmit if it's in progress. Realistically we could get almost fillRect performance with drawImage and other stuff by sending at the same time as calculating",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,22,https://github.com/espruino/Espruino/pull/1924#issuecomment-700755618,suggestion from http://forum.espruino.com/comments/15491106/,"not sure what the situation is with DMA on ESP32

Good point, for now we use spi_send_many for ESP32 with a default buffer size of 128 byte.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,23,https://github.com/espruino/Espruino/pull/1924#issuecomment-701033363,suggestion from http://forum.espruino.com/comments/15491106/,"Ok, using MADCTL is a big help.
// details
#define MADCTL_MY 0x80  ///< Bottom to top
#define MADCTL_MX 0x40  ///< Right to left
#define MADCTL_MV 0x20  ///< Reverse Mode
#define MADCTL_ML 0x10  ///< LCD refresh Bottom to top
#define MADCTL_RGB 0x00 ///< Red-Green-Blue pixel order
#define MADCTL_BGR 0x08 ///< Blue-Green-Red pixel order
#define MADCTL_MH 0x04  ///< LCD refresh right to left

This is what can be used for a M5STACK with ILI9341 lcd instead of g.setRotation(1)
// TFT_MADCTL: Memory Access Control (orientation)
cmd(0x36,0);
plus flip height, width and add rotate
var g = require(""ILI9341-UB-SV2"").connect(SPI1,
          { cs: M5.LCD_CS,
            dc: M5.LCD_DC,
            width: M5.LCD_HEIGHT, //M5.LCD_WIDTH,
            height: M5.LCD_WIDTH, //M5.LCD_HEIGHT,
            colstart:0,
            rowstart:0,
            inverse : 1,
            rotation: 1      // <-- add rotation 
          });",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,24,https://github.com/espruino/Espruino/pull/1924#issuecomment-701244366,suggestion from http://forum.espruino.com/comments/15491106/,"What about adding a line buffer to blit1Bit to improve drawImage?
  int lb_len = w*scale;
  uint16_t line_buffer[lb_len];

  // loop over y
     // loop over x
       //  get a pixel and fill  line_buffer  scale times 
    // send that line buffer scaled times",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,25,https://github.com/espruino/Espruino/pull/1924#issuecomment-701245229,suggestion from http://forum.espruino.com/comments/15491106/,I think the point is that with the buffer it can be made fast enough that you don't need special cases like blit1bit any more,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,26,https://github.com/espruino/Espruino/pull/1924#issuecomment-701463325,suggestion from http://forum.espruino.com/comments/15491106/,"ok, just removed the bilt code and implemented jeffmer latest version

this image took around 700ms and now it is finish in 120ms - this is a great improvement - many thanks to jeffmer.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,27,https://github.com/espruino/Espruino/pull/1924#issuecomment-704567178,suggestion from http://forum.espruino.com/comments/15491106/,@gfwilliams  Please let us know if there is something you like to get updated.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,28,https://github.com/espruino/Espruino/pull/1924#issuecomment-704744735,suggestion from http://forum.espruino.com/comments/15491106/,Looks good - please could you just rename #define BUFFER SPISENDMANY_BUFFER_SIZE - maybe to LCD_SPI_UNBUF_LEN or something like that? Having a global BUFFER #define is likely to conflict with other stuff,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/MaBecker,29,https://github.com/espruino/Espruino/pull/1924#issuecomment-704836588,suggestion from http://forum.espruino.com/comments/15491106/,Thanks for double checking.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1924,2020-09-01T15:36:48Z,2020-10-08T09:45:32Z,2020-12-08T11:46:49Z,MERGED,True,84,50,2,https://github.com/MaBecker,Update lcd_spi_unbuf.c,6,[],https://github.com/espruino/Espruino/pull/1924,https://github.com/gfwilliams,30,https://github.com/espruino/Espruino/pull/1924#issuecomment-705458189,suggestion from http://forum.espruino.com/comments/15491106/,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1929,2020-09-22T09:30:32Z,2020-09-22T09:51:15Z,2020-09-22T09:51:15Z,MERGED,True,3,1,1,https://github.com/rujorgensen,Docs/dump docs clarification,2,[],https://github.com/espruino/Espruino/pull/1929,https://github.com/rujorgensen,1,https://github.com/espruino/Espruino/pull/1929,"The dump()-command was discussed here, and I suggested to clarify the docs a little.","The dump()-command was discussed here, and I suggested to clarify the docs a little.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1929,2020-09-22T09:30:32Z,2020-09-22T09:51:15Z,2020-09-22T09:51:15Z,MERGED,True,3,1,1,https://github.com/rujorgensen,Docs/dump docs clarification,2,[],https://github.com/espruino/Espruino/pull/1929,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1929#issuecomment-696620314,"The dump()-command was discussed here, and I suggested to clarify the docs a little.",Great - thanks!,True,{'THUMBS_UP': ['https://github.com/rujorgensen']}
espruino/Espruino,https://github.com/espruino/Espruino,1932,2020-09-23T17:54:50Z,2020-09-24T07:09:47Z,2020-09-24T07:12:27Z,MERGED,True,2,0,1,https://github.com/MaBecker,fix #1931,1,[],https://github.com/espruino/Espruino/pull/1932,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1932,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1932,2020-09-23T17:54:50Z,2020-09-24T07:09:47Z,2020-09-24T07:12:27Z,MERGED,True,2,0,1,https://github.com/MaBecker,fix #1931,1,[],https://github.com/espruino/Espruino/pull/1932,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1932#issuecomment-698160051,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1934,2020-09-24T09:47:30Z,2020-09-24T10:34:14Z,2020-09-24T10:37:28Z,MERGED,True,20,1,5,https://github.com/MaBecker,fix #1930,1,[],https://github.com/espruino/Espruino/pull/1934,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1934,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1934,2020-09-24T09:47:30Z,2020-09-24T10:34:14Z,2020-09-24T10:37:28Z,MERGED,True,20,1,5,https://github.com/MaBecker,fix #1930,1,[],https://github.com/espruino/Espruino/pull/1934,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1934#issuecomment-698261837,,"Looks great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1942,2020-10-09T11:21:57Z,2020-10-09T11:39:10Z,2020-10-09T11:39:10Z,MERGED,True,4,0,1,https://github.com/MaBecker,fix #1941,1,[],https://github.com/espruino/Espruino/pull/1942,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1942,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1942,2020-10-09T11:21:57Z,2020-10-09T11:39:10Z,2020-10-09T11:39:10Z,MERGED,True,4,0,1,https://github.com/MaBecker,fix #1941,1,[],https://github.com/espruino/Espruino/pull/1942,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1942#issuecomment-706131156,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1943,2020-10-11T20:35:29Z,2020-10-12T13:48:10Z,2020-10-17T16:16:57Z,MERGED,True,10,1,1,https://github.com/fanoush,jshFlashRead - restart  read command also if someone pulled CS pin high,3,[],https://github.com/espruino/Espruino/pull/1943,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1943,"This makes the code a bit more robust - if CS is already high for some reason it should for sure start another read command.
Also it helps another code to work on device with shared SPI pins. With this I can have SPI display driver working on P8 and other DaFit watches like Pinetime and still have storage in SPI flash. In the LCD driver I pull flash CS high before puling LCD CS low and then keep flash CS high when exiting from driver back into javascript. This patch allows espruino to restart and continue executing code from SPI flash.
My driver is in InlineC so setting spiFlashLastAddress to 0 instead would be very tricky but even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.
Maybe with this patch similar code in jshFlash write and erase methods could also just leave CS pin high so the test and setting this variable to zero could be removed from all places.
EDIT:
If you think using just CS pin is way to go I can update the patch to remove spiFlashLastAddress = 0; in jshFlashErase and jshFlashWrite and also the extra test for zero here. then it will really just test the CS pin to know that CS pin is high :-)","This makes the code a bit more robust - if CS is already high for some reason it should for sure start another read command.
Also it helps another code to work on device with shared SPI pins. With this I can have SPI display driver working on P8 and other DaFit watches like Pinetime and still have storage in SPI flash. In the LCD driver I pull flash CS high before puling LCD CS low and then keep flash CS high when exiting from driver back into javascript. This patch allows espruino to restart and continue executing code from SPI flash.
My driver is in InlineC so setting spiFlashLastAddress to 0 instead would be very tricky but even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.
Maybe with this patch similar code in jshFlash write and erase methods could also just leave CS pin high so the test and setting this variable to zero could be removed from all places.
EDIT:
If you think using just CS pin is way to go I can update the patch to remove spiFlashLastAddress = 0; in jshFlashErase and jshFlashWrite and also the extra test for zero here. then it will really just test the CS pin to know that CS pin is high :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1943,2020-10-11T20:35:29Z,2020-10-12T13:48:10Z,2020-10-17T16:16:57Z,MERGED,True,10,1,1,https://github.com/fanoush,jshFlashRead - restart  read command also if someone pulled CS pin high,3,[],https://github.com/espruino/Espruino/pull/1943,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1943#issuecomment-707002442,"This makes the code a bit more robust - if CS is already high for some reason it should for sure start another read command.
Also it helps another code to work on device with shared SPI pins. With this I can have SPI display driver working on P8 and other DaFit watches like Pinetime and still have storage in SPI flash. In the LCD driver I pull flash CS high before puling LCD CS low and then keep flash CS high when exiting from driver back into javascript. This patch allows espruino to restart and continue executing code from SPI flash.
My driver is in InlineC so setting spiFlashLastAddress to 0 instead would be very tricky but even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.
Maybe with this patch similar code in jshFlash write and erase methods could also just leave CS pin high so the test and setting this variable to zero could be removed from all places.
EDIT:
If you think using just CS pin is way to go I can update the patch to remove spiFlashLastAddress = 0; in jshFlashErase and jshFlashWrite and also the extra test for zero here. then it will really just test the CS pin to know that CS pin is high :-)","I really don't think this is a good idea - perhaps for those other watches we could instead have an #ifndef DISABLE_SPIFLASH_CS_OPTIMISE or something and remove the spiFlashLastAddress?
Or we could just make the check itself behind an #ifdef?
Or.. it sounds like if you're adding SPIFLASH storage to the watch you're building your own firmware, so you could just build your Inline C code directly into the firmware and poke spiFlashLastAddress?
The problem is, this code ends up getting absolutely thrashed when executing JS from Flash - it's called every 16(or 32? I forget) characters of JS executed. This patch adds a read from the IO bus (which I think only runs at 16Mhz?), not to mention the shift and so on.
I'd have thought it would slow down JS execution when on other devices there's no need as the SPI bus isn't shared. I feel like there's really no point 'adding robustness' in those cases when actually it's perfectly robust anyway.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1943,2020-10-11T20:35:29Z,2020-10-12T13:48:10Z,2020-10-17T16:16:57Z,MERGED,True,10,1,1,https://github.com/fanoush,jshFlashRead - restart  read command also if someone pulled CS pin high,3,[],https://github.com/espruino/Espruino/pull/1943,https://github.com/fanoush,3,https://github.com/espruino/Espruino/pull/1943#issuecomment-707067674,"This makes the code a bit more robust - if CS is already high for some reason it should for sure start another read command.
Also it helps another code to work on device with shared SPI pins. With this I can have SPI display driver working on P8 and other DaFit watches like Pinetime and still have storage in SPI flash. In the LCD driver I pull flash CS high before puling LCD CS low and then keep flash CS high when exiting from driver back into javascript. This patch allows espruino to restart and continue executing code from SPI flash.
My driver is in InlineC so setting spiFlashLastAddress to 0 instead would be very tricky but even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.
Maybe with this patch similar code in jshFlash write and erase methods could also just leave CS pin high so the test and setting this variable to zero could be removed from all places.
EDIT:
If you think using just CS pin is way to go I can update the patch to remove spiFlashLastAddress = 0; in jshFlashErase and jshFlashWrite and also the extra test for zero here. then it will really just test the CS pin to know that CS pin is high :-)","it sounds like if you're adding SPIFLASH storage to the watch you're building your own firmware, so you could just build your Inline C code directly into the firmware and poke spiFlashLastAddress?

Yes I addressed that in first comment 'even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.' As you say I am building custom firmware so I can do it in any way.
I was not expecting this would be an issue since in best case this calls spiFlashRead
which does similar access 1+24*length times (3*8*len+setting mosi) so we are talking about 1/(24*(16 or 32)) slowdown of I/o bus operations (in addition to all other code it does + subroutine call).
BTW, this is reading OUT register (not IN) so do you think it really goes down to 16Mhz to read back value previously written there by CPU? Are all GPIO registers slower too i.e. all the CNF ones?  I would guess 16Mhz relates only how the changes propagate between real wires and those registers so e.g. reading IN at 64Mhz would give you same value 4 times due to slower input but I wouldn't guess it would slow down the actual ARM read from 0x50000000+0x504. But I see I am maybe wrong on this. So any access to 0x50000000 area waits for some 16MHz bus(?)
So then you may possibly also remove clearing MOSI pin in spiFlashRead to save one such cycle as the flash ignores data on read anyway(?).
Configuring out this optimization would make no sense even for my case with shared display as this would be performance hit all the time.
So I guess if you really see it as performance issue then hiding this behind something  like #ifdef SPIFLASH_SHARED_SPI is still worth the effort since this could be moved to board files instead of local modification. Apart from DaFit watches this is also issue on another watch - ID107HR. So there are at least two persons that would possibly build with that flag. So I'll add the ifdef around it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1943,2020-10-11T20:35:29Z,2020-10-12T13:48:10Z,2020-10-17T16:16:57Z,MERGED,True,10,1,1,https://github.com/fanoush,jshFlashRead - restart  read command also if someone pulled CS pin high,3,[],https://github.com/espruino/Espruino/pull/1943,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1943#issuecomment-707131067,"This makes the code a bit more robust - if CS is already high for some reason it should for sure start another read command.
Also it helps another code to work on device with shared SPI pins. With this I can have SPI display driver working on P8 and other DaFit watches like Pinetime and still have storage in SPI flash. In the LCD driver I pull flash CS high before puling LCD CS low and then keep flash CS high when exiting from driver back into javascript. This patch allows espruino to restart and continue executing code from SPI flash.
My driver is in InlineC so setting spiFlashLastAddress to 0 instead would be very tricky but even if it was fully native in libs/graphics it would still be not so nice to access jshardware.c internal variable from other unrelated code.
Maybe with this patch similar code in jshFlash write and erase methods could also just leave CS pin high so the test and setting this variable to zero could be removed from all places.
EDIT:
If you think using just CS pin is way to go I can update the patch to remove spiFlashLastAddress = 0; in jshFlashErase and jshFlashWrite and also the extra test for zero here. then it will really just test the CS pin to know that CS pin is high :-)","Thanks! I was pretty sure IO accesses to the GPIO were slower - at least that was always the case on STM32, and I'd imagined nRF52 would be similar.
However I stand corrected:
var c = E.compiledC(`
// int testa()
// int testb()
typedef volatile unsigned int uint32_t;
int testa(){
  uint32_t tStart = *((uint32_t*)0xE000E018); // systick
  volatile uint32_t z = 0;
  for (int i=0;i<100000;i++)
    z+=*((uint32_t*)0x20000000);
  uint32_t tEnd = *((uint32_t*)0xE000E018); // systick
  return (z&1)+(tStart-tEnd)&0xFFFFFF;
}

int testb(){
  uint32_t tStart = *((uint32_t*)0xE000E018); // systick
  volatile uint32_t z = 0;
  for (int i=0;i<100000;i++)
    z+=*((uint32_t*)0x50000504);
  uint32_t tEnd = *((uint32_t*)0xE000E018); // systick
  return (z&1)+(tStart-tEnd)&0xFFFFFF;
}

`);

print(c.testa()) // 1240839 RAM (flash is similar)
print(c.testb()) // 1057747 GPIO

GPIO is actually faster!
However I still think the original code will be faster because spiFlashLastAddress is already in a register. I know the hit is pretty minor and it seems petty, but I feel like if I'm integrating stuff that is done to make life easier for a few folks using Espruino on their own devices, it really shouldn't negatively impact users of official devices at all.

So then you may possibly also remove clearing MOSI pin in spiFlashRead to save one such cycle as the flash ignores data on read anyway(?)

I'd be up for that - I know it's minor, but everything helps.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1944,2020-10-12T06:30:26Z,2020-10-12T08:08:16Z,2020-10-12T08:08:16Z,MERGED,True,4,4,1,https://github.com/MaBecker,allow to remove BLUETOOTH from ESP32 board files,1,[],https://github.com/espruino/Espruino/pull/1944,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1944,mentioned by @jeffmer http://forum.espruino.com/comments/15561883/,mentioned by @jeffmer http://forum.espruino.com/comments/15561883/,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1944,2020-10-12T06:30:26Z,2020-10-12T08:08:16Z,2020-10-12T08:08:16Z,MERGED,True,4,4,1,https://github.com/MaBecker,allow to remove BLUETOOTH from ESP32 board files,1,[],https://github.com/espruino/Espruino/pull/1944,https://github.com/jumjum123,2,https://github.com/espruino/Espruino/pull/1944#issuecomment-706908080,mentioned by @jeffmer http://forum.espruino.com/comments/15561883/,"Looks good to me, removes possible problem.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1944,2020-10-12T06:30:26Z,2020-10-12T08:08:16Z,2020-10-12T08:08:16Z,MERGED,True,4,4,1,https://github.com/MaBecker,allow to remove BLUETOOTH from ESP32 board files,1,[],https://github.com/espruino/Espruino/pull/1944,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1944#issuecomment-706955337,mentioned by @jeffmer http://forum.espruino.com/comments/15561883/,Looks great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1945,2020-10-12T15:31:14Z,2020-10-12T15:38:37Z,2020-10-12T15:38:37Z,MERGED,True,1,1,1,https://github.com/fanoush,disable DMA hack when SPI0_USE_EASY_DMA==0,1,[],https://github.com/espruino/Espruino/pull/1945,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1945,ifdef is not enough as the value can be zero = DMA is disabled,ifdef is not enough as the value can be zero = DMA is disabled,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1945,2020-10-12T15:31:14Z,2020-10-12T15:38:37Z,2020-10-12T15:38:37Z,MERGED,True,1,1,1,https://github.com/fanoush,disable DMA hack when SPI0_USE_EASY_DMA==0,1,[],https://github.com/espruino/Espruino/pull/1945,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1945#issuecomment-707194830,ifdef is not enough as the value can be zero = DMA is disabled,Thanks! that was a stupid mistake :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1952,2020-10-28T21:11:56Z,2020-10-29T08:08:57Z,2020-10-29T08:08:57Z,MERGED,True,13,7,3,https://github.com/fanoush,enable bootloader and DFU package build for SMAQ3,1,[],https://github.com/espruino/Espruino/pull/1952,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1952,"add BOOTLOADER_SETTINGS_FAMILY variable for 52840 targets
fix softdevice size in flash_available
fix missing button 2 and 3s timeout in bootloader main","add BOOTLOADER_SETTINGS_FAMILY variable for 52840 targets
fix softdevice size in flash_available
fix missing button 2 and 3s timeout in bootloader main",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1952,2020-10-28T21:11:56Z,2020-10-29T08:08:57Z,2020-10-29T08:08:57Z,MERGED,True,13,7,3,https://github.com/fanoush,enable bootloader and DFU package build for SMAQ3,1,[],https://github.com/espruino/Espruino/pull/1952,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/1952#issuecomment-718214933,"add BOOTLOADER_SETTINGS_FAMILY variable for 52840 targets
fix softdevice size in flash_available
fix missing button 2 and 3s timeout in bootloader main","With this bootloader works for me on Q3 - it allows entering DFU mode when holding button and flashes DFU zip correctly
Without correct bootloader settings family the bootloader will not accept application hex as valid on 52840 device, surprisingly dfu package still can have --hw-version 52 when generated so the family is needed only when flashing hex over SWD.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1952,2020-10-28T21:11:56Z,2020-10-29T08:08:57Z,2020-10-29T08:08:57Z,MERGED,True,13,7,3,https://github.com/fanoush,enable bootloader and DFU package build for SMAQ3,1,[],https://github.com/espruino/Espruino/pull/1952,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1952#issuecomment-718458563,"add BOOTLOADER_SETTINGS_FAMILY variable for 52840 targets
fix softdevice size in flash_available
fix missing button 2 and 3s timeout in bootloader main",That's great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1958,2020-11-16T10:56:32Z,2020-11-16T10:57:14Z,2020-11-16T10:57:14Z,MERGED,True,1,2,1,https://github.com/fanoush,move jshInitDevices() after GPIO clocks are enabled,1,[],https://github.com/espruino/Espruino/pull/1958,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1958,"before GPIO clocks are enabled setting up GPIO registers inside jshInitDevices() has no effect (e.g. setting pull up on pin does nothing)
resolves #1957","before GPIO clocks are enabled setting up GPIO registers inside jshInitDevices() has no effect (e.g. setting pull up on pin does nothing)
resolves #1957",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1958,2020-11-16T10:56:32Z,2020-11-16T10:57:14Z,2020-11-16T10:57:14Z,MERGED,True,1,2,1,https://github.com/fanoush,move jshInitDevices() after GPIO clocks are enabled,1,[],https://github.com/espruino/Espruino/pull/1958,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1958#issuecomment-727903780,"before GPIO clocks are enabled setting up GPIO registers inside jshInitDevices() has no effect (e.g. setting pull up on pin does nothing)
resolves #1957",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1964,2020-12-04T13:10:50Z,2020-12-04T16:06:32Z,2020-12-04T16:06:32Z,MERGED,True,6,2,1,https://github.com/MaBecker,Update SPI (fix #1963),2,[],https://github.com/espruino/Espruino/pull/1964,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1964,"each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0","each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1964,2020-12-04T13:10:50Z,2020-12-04T16:06:32Z,2020-12-04T16:06:32Z,MERGED,True,6,2,1,https://github.com/MaBecker,Update SPI (fix #1963),2,[],https://github.com/espruino/Espruino/pull/1964,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1964#issuecomment-738795950,"each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0","What about disabling DMA just if rx is specified? So you get it fast when it can be...
ret=spi_device_queue_trans(SPIChannels[channelPnt].spi, &spi_trans, rx?0:portMAX_DELAY);",True,{'THUMBS_UP': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1964,2020-12-04T13:10:50Z,2020-12-04T16:06:32Z,2020-12-04T16:06:32Z,MERGED,True,6,2,1,https://github.com/MaBecker,Update SPI (fix #1963),2,[],https://github.com/espruino/Espruino/pull/1964,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/1964#issuecomment-738801519,"each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0","ups, missed that one ;-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1964,2020-12-04T13:10:50Z,2020-12-04T16:06:32Z,2020-12-04T16:06:32Z,MERGED,True,6,2,1,https://github.com/MaBecker,Update SPI (fix #1963),2,[],https://github.com/espruino/Espruino/pull/1964,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1964#issuecomment-738813412,"each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0",Thanks! And this seems to work ok for you now?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1964,2020-12-04T13:10:50Z,2020-12-04T16:06:32Z,2020-12-04T16:06:32Z,MERGED,True,6,2,1,https://github.com/MaBecker,Update SPI (fix #1963),2,[],https://github.com/espruino/Espruino/pull/1964,https://github.com/MaBecker,5,https://github.com/espruino/Espruino/pull/1964#issuecomment-738855736,"each SPI get's its onw dma channel
disable DMA by setting the bus initialization to 0","Thanks! And this seems to work ok for you now?

yes it does - thanks a lot :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1965,2020-12-05T07:52:46Z,2020-12-07T08:08:06Z,2020-12-08T11:46:50Z,MERGED,True,13,23,1,https://github.com/MaBecker,Update SPI (fix #1963),3,[],https://github.com/espruino/Espruino/pull/1965,https://github.com/MaBecker,1,https://github.com/espruino/Espruino/pull/1965,"restore jshSPISend() version before 2v0.6
move g_lastSPIRead to it's proper position
reduced number of comments","restore jshSPISend() version before 2v0.6
move g_lastSPIRead to it's proper position
reduced number of comments",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1965,2020-12-05T07:52:46Z,2020-12-07T08:08:06Z,2020-12-08T11:46:50Z,MERGED,True,13,23,1,https://github.com/MaBecker,Update SPI (fix #1963),3,[],https://github.com/espruino/Espruino/pull/1965,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/1965#issuecomment-739148687,"restore jshSPISend() version before 2v0.6
move g_lastSPIRead to it's proper position
reduced number of comments","will let you know when it is time to merge, like to spend some more hours on testing.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1965,2020-12-05T07:52:46Z,2020-12-07T08:08:06Z,2020-12-08T11:46:50Z,MERGED,True,13,23,1,https://github.com/MaBecker,Update SPI (fix #1963),3,[],https://github.com/espruino/Espruino/pull/1965,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1965#issuecomment-739748418,"restore jshSPISend() version before 2v0.6
move g_lastSPIRead to it's proper position
reduced number of comments","Thanks! It may be you can call spi_device_queue_trans only when you have rx==NULL - so you get a fast hardware transmit for write only, but then use the slow one for reads?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1965,2020-12-05T07:52:46Z,2020-12-07T08:08:06Z,2020-12-08T11:46:50Z,MERGED,True,13,23,1,https://github.com/MaBecker,Update SPI (fix #1963),3,[],https://github.com/espruino/Espruino/pull/1965,https://github.com/MaBecker,4,https://github.com/espruino/Espruino/pull/1965#issuecomment-739750826,"restore jshSPISend() version before 2v0.6
move g_lastSPIRead to it's proper position
reduced number of comments","It may be you can call spi_device_queue_trans only when you have rx==NULL - so you get a fast hardware transmit for write only, but then use the slow one for reads?

So let's wait until someone complaints .....",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1967,2020-12-21T20:20:45Z,2020-12-22T08:47:43Z,2020-12-22T08:47:43Z,MERGED,True,19,11,1,https://github.com/cjds,Update RTOS doc to markdown style,1,[],https://github.com/espruino/Espruino/pull/1967,https://github.com/cjds,1,https://github.com/espruino/Espruino/pull/1967,This was confusing to read and follow. Edited the doc to support better readability,This was confusing to read and follow. Edited the doc to support better readability,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1967,2020-12-21T20:20:45Z,2020-12-22T08:47:43Z,2020-12-22T08:47:43Z,MERGED,True,19,11,1,https://github.com/cjds,Update RTOS doc to markdown style,1,[],https://github.com/espruino/Espruino/pull/1967,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1967#issuecomment-749424370,This was confusing to read and follow. Edited the doc to support better readability,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1973,2021-01-25T16:07:50Z,2021-01-26T14:59:33Z,2021-01-26T14:59:33Z,MERGED,True,9,4,2,https://github.com/fanoush,"add check for LD_SRAM_SIZE symbol to nrf52_ble_espruino linker script, define for MICROBIT2 as 128KB",2,[],https://github.com/espruino/Espruino/pull/1973,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1973,"I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.","I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1973,2021-01-25T16:07:50Z,2021-01-26T14:59:33Z,2021-01-26T14:59:33Z,MERGED,True,9,4,2,https://github.com/fanoush,"add check for LD_SRAM_SIZE symbol to nrf52_ble_espruino linker script, define for MICROBIT2 as 128KB",2,[],https://github.com/espruino/Espruino/pull/1973,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1973#issuecomment-767404267,"I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.","Nice - thanks! You mean you could just define the start address, so the bootloader uses the same linker file as everything else?That could tidy things up a lot.
I'm a bit busy now but I'll try and check it later today",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1973,2021-01-25T16:07:50Z,2021-01-26T14:59:33Z,2021-01-26T14:59:33Z,MERGED,True,9,4,2,https://github.com/fanoush,"add check for LD_SRAM_SIZE symbol to nrf52_ble_espruino linker script, define for MICROBIT2 as 128KB",2,[],https://github.com/espruino/Espruino/pull/1973,https://github.com/fanoush,3,https://github.com/espruino/Espruino/pull/1973#issuecomment-767430892,"I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.","I'm a bit busy now but I'll try and check it later today

There is no hurry at all.

You mean you could just define the start address, so the bootloader uses the same linker file as everything else

I meant that https://github.com/espruino/Espruino/blob/master/targetlibs/nrf5x_12/nrf5x_linkers/banglejs_espruino.ld could be merged with 'normal' app linker file linker_nrf52_ble_espruino_bootloader.ld and then the two bootloader linker files could be merged too - banglejs_dfu.ld vs secure_dfu_gcc_nrf52.ld , they both just has the difference resulting from bootloader start being 0x78000 vs 0x7a000
But true that more could be merged e.g. the 'app with bootloader'  linker_nrf52_ble_espruino_bootloader.ld vs 'app without bootloader' linker_nrf52_ble_espruino.ld is about LENGTH  of FLASH memory part.
I did not think about merging app linker files with bootloader linker files to have just one for everything - app and bootloader, that felt like too much but could be perhaps done too.
It is all tradeoff between complexity of this magic vs maintaining simpler duplicated linker files.
Apart from FLASH size the RAM size could be tuned like that too - like done here for microbit - then 52832 vs 52840 vs 52833 could use same file with just different sizes for ram set in board file. In fact ram size is already there but not used for this.
Again tradeoff between complexity and manual work, e.g. the MEM_SRAM_SD_OFFSET that I currently still hardcoded to 0x2c40 as it was before, could be in future derived  from softdevice version/configuration so e.g. having more board files or build configs for different MTU size or different number of connections would not need changing linker file as everything could be passed from board file or makefiles.
BTW, unrelated to this - for different MTU etc., I still think about better RAM layout for linker. For nrf it would  be better to have static data+bss not dependent on softdevice by being linked just after it, so the ultimate solution for me would be layout like: dynamic heap (=variables) first, then stack growing down and after stack the data+bss till the end of RAM. Then you could even have same binary and compute area for JS variables at boot time depending on what softdevice needs in particular configuration. We could even have some config saved to Storage like MTU size, # of connections and you could change it from JS code  and then call E.reboot() to reconfigure it. If storage is empty then use some defaults like now of course.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1973,2021-01-25T16:07:50Z,2021-01-26T14:59:33Z,2021-01-26T14:59:33Z,MERGED,True,9,4,2,https://github.com/fanoush,"add check for LD_SRAM_SIZE symbol to nrf52_ble_espruino linker script, define for MICROBIT2 as 128KB",2,[],https://github.com/espruino/Espruino/pull/1973,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/1973#issuecomment-767490336,"I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.",Oh you just did a (same) change across all linker files. That shows the benefit of having much less of them :-)  Redid same thing  in possibly better way for just the linker file in this PR to resolve conflict.  If you like this way it should be done in all others too or they could be merged to have this change only in one (per SDK).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1973,2021-01-25T16:07:50Z,2021-01-26T14:59:33Z,2021-01-26T14:59:33Z,MERGED,True,9,4,2,https://github.com/fanoush,"add check for LD_SRAM_SIZE symbol to nrf52_ble_espruino linker script, define for MICROBIT2 as 128KB",2,[],https://github.com/espruino/Espruino/pull/1973,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/1973#issuecomment-767577090,"I was trying if I can push some parameters from board file to linker script and looks like it works. Could be used also for bootloader starting address in future so there can be e.g. same linker script for banglejs and others.
I can only see that resulting hex and binary looks like it has enlarged RAM (top of stack points to 0x20020000) but cannot test it in real device now. Also blindly enlarged variables by 64k/16=4096.
if not defined it goes to 0x20010000 so other devices should be fine as 0x20002c40+0xd3c0 = 0x20010000.
Can you eventually test it on yours? if not then no need to merge it for now.
I'll be getting my microbit v2 soon or maybe can borrow one from someone tomorrow.","This is great - works perfectly on MICROBIT2. Just need to pull it in for other devices.
I think I'll still likely need a per-SDK linker file as Nordic have been adding linker stuff to each SDK recently, but modding it wouldn't be too hard at all. I wonder whether we couldn't create the linker defines automatically based on linker specs",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1974,2021-01-27T11:10:08Z,2021-01-27T12:08:28Z,2021-01-27T12:08:28Z,MERGED,True,4,0,1,https://github.com/jeffmer,"SMAQ3 Accel  x,y,z same sign as Bangle",1,[],https://github.com/espruino/Espruino/pull/1974,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/1974,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1974,2021-01-27T11:10:08Z,2021-01-27T12:08:28Z,2021-01-27T12:08:28Z,MERGED,True,4,0,1,https://github.com/jeffmer,"SMAQ3 Accel  x,y,z same sign as Bangle",1,[],https://github.com/espruino/Espruino/pull/1974,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1974#issuecomment-768242572,,Perfect - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1977,2021-02-04T12:18:47Z,2021-02-04T12:55:06Z,2021-02-05T14:25:15Z,MERGED,True,37,10,2,https://github.com/jeffmer,This is the fix for SMAQ3 external flash.,3,[],https://github.com/espruino/Espruino/pull/1977,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/1977,"I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.","I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1977,2021-02-04T12:18:47Z,2021-02-04T12:55:06Z,2021-02-05T14:25:15Z,MERGED,True,37,10,2,https://github.com/jeffmer,This is the fix for SMAQ3 external flash.,3,[],https://github.com/espruino/Espruino/pull/1977,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1977#issuecomment-773284076,"I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1977,2021-02-04T12:18:47Z,2021-02-04T12:55:06Z,2021-02-05T14:25:15Z,MERGED,True,37,10,2,https://github.com/jeffmer,This is the fix for SMAQ3 external flash.,3,[],https://github.com/espruino/Espruino/pull/1977,https://github.com/conoro,3,https://github.com/espruino/Espruino/pull/1977#issuecomment-774001709,"I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.","Just confirming as an end-user that this works great. Thank you so much! Also, for fun, I loaded up the default apps for the Bangle.js and they all fit in flash for the first time. Whilst the screen scaling (and lack of buttons 😁) is problematic, the Welcome App, main menu, Settings and Morphing clock are all working. It's a huge leap forward for the SMAQ3.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1977,2021-02-04T12:18:47Z,2021-02-04T12:55:06Z,2021-02-05T14:25:15Z,MERGED,True,37,10,2,https://github.com/jeffmer,This is the fix for SMAQ3 external flash.,3,[],https://github.com/espruino/Espruino/pull/1977,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/1977#issuecomment-774039749,"I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.","Great! Actually if you tap the screen on the right hand side it should fake the 3 buttons :)
I think if I add a screen scaling mode we should be a bunch more apps being usable too",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1977,2021-02-04T12:18:47Z,2021-02-04T12:55:06Z,2021-02-05T14:25:15Z,MERGED,True,37,10,2,https://github.com/jeffmer,This is the fix for SMAQ3 external flash.,3,[],https://github.com/espruino/Espruino/pull/1977,https://github.com/conoro,5,https://github.com/espruino/Espruino/pull/1977#issuecomment-774063687,"I have tested that this builds ok, and I have tested the same code on my version of jsHardware.c which does not have touch buttons and it works fine. However, the health warning is that I have not actually tested this formeware build on my SMAQ3 as ity is not compatible with my current apps.",Ah I think I accidentally did that a few times by tapping and swiping randomly :-) Yeah a bit of scaling would sort out a lot of them for sure. So excited to see this!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1978,2021-02-11T12:03:59Z,2021-02-11T12:06:15Z,2021-02-11T12:06:35Z,CLOSED,False,3,3,2,https://github.com/jeffmer,Adjust setLCDPower for SAMQ3 always on display,1,[],https://github.com/espruino/Espruino/pull/1978,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/1978,"Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.","Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1978,2021-02-11T12:03:59Z,2021-02-11T12:06:15Z,2021-02-11T12:06:35Z,CLOSED,False,3,3,2,https://github.com/jeffmer,Adjust setLCDPower for SAMQ3 always on display,1,[],https://github.com/espruino/Espruino/pull/1978,https://github.com/jeffmer,2,https://github.com/espruino/Espruino/pull/1978#issuecomment-777404512,"Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.",need to fix small bug,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1979,2021-02-11T12:13:19Z,2021-02-11T12:47:47Z,2021-02-11T12:47:47Z,MERGED,True,3,3,2,https://github.com/jeffmer,Adjust setLCDPower for SAMQ3 always on display - again,2,[],https://github.com/espruino/Espruino/pull/1979,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/1979,"Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.","Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1979,2021-02-11T12:13:19Z,2021-02-11T12:47:47Z,2021-02-11T12:47:47Z,MERGED,True,3,3,2,https://github.com/jeffmer,Adjust setLCDPower for SAMQ3 always on display - again,2,[],https://github.com/espruino/Espruino/pull/1979,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1979#issuecomment-777430661,"Some simple changes so that setLCDPower only controls touch and backlight. g.flip() does not turn on display as it is always on and you do not want to turn on the backlight every time a minute hand moves in an always on display. To avoid burn in, the toggle of extcomm_in is not disabled by setLCDPower(0).
The pull also fixes the minor bug in the SMAQ3 board file 31->38.",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1980,2021-02-11T14:36:29Z,2021-02-11T15:36:51Z,2021-02-11T15:36:51Z,MERGED,True,1,1,1,https://github.com/fanoush,xtal_accuracy - else misplaced by one line?,1,[],https://github.com/espruino/Espruino/pull/1980,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1980,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1980,2021-02-11T14:36:29Z,2021-02-11T15:36:51Z,2021-02-11T15:36:51Z,MERGED,True,1,1,1,https://github.com/fanoush,xtal_accuracy - else misplaced by one line?,1,[],https://github.com/espruino/Espruino/pull/1980,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1980#issuecomment-777583321,,Ahh - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1981,2021-02-11T18:26:50Z,2021-02-12T09:40:13Z,2021-02-12T09:40:13Z,MERGED,True,1,1,1,https://github.com/ptcane,Update jswrap_puck.c,1,[],https://github.com/espruino/Espruino/pull/1981,https://github.com/ptcane,1,https://github.com/espruino/Espruino/pull/1981,Fixed typo in function example.,Fixed typo in function example.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1981,2021-02-11T18:26:50Z,2021-02-12T09:40:13Z,2021-02-12T09:40:13Z,MERGED,True,1,1,1,https://github.com/ptcane,Update jswrap_puck.c,1,[],https://github.com/espruino/Espruino/pull/1981,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1981#issuecomment-778087665,Fixed typo in function example.,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1984,2021-02-15T13:09:14Z,2021-02-15T13:13:24Z,2021-02-26T10:23:16Z,MERGED,True,9,6,2,https://github.com/jeffmer,BMP280 pressure sensor bug fixes,1,[],https://github.com/espruino/Espruino/pull/1984,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/1984,As promised - now seems to work well though although on of my smaq3 watches gives pressure readings that are more than 20hpa out. .,As promised - now seems to work well though although on of my smaq3 watches gives pressure readings that are more than 20hpa out. .,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1984,2021-02-15T13:09:14Z,2021-02-15T13:13:24Z,2021-02-26T10:23:16Z,MERGED,True,9,6,2,https://github.com/jeffmer,BMP280 pressure sensor bug fixes,1,[],https://github.com/espruino/Espruino/pull/1984,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1984#issuecomment-779215625,As promised - now seems to work well though although on of my smaq3 watches gives pressure readings that are more than 20hpa out. .,Great - thanks! I suppose 20hPa is only ~2% out? I don't know if that's within spec or not...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1984,2021-02-15T13:09:14Z,2021-02-15T13:13:24Z,2021-02-26T10:23:16Z,MERGED,True,9,6,2,https://github.com/jeffmer,BMP280 pressure sensor bug fixes,1,[],https://github.com/espruino/Espruino/pull/1984,https://github.com/jeffmer,3,https://github.com/espruino/Espruino/pull/1984#issuecomment-779220178,As promised - now seems to work well though although on of my smaq3 watches gives pressure readings that are more than 20hpa out. .,"When I have used bma280 sensors in the past, they have usually been + or -2hPa. I think they are individually or batch calibrated during manufacture - thus the plethora of coefficients. Actually, just looked it up and the absolute accuracy is specified as + or - 1 hPa !",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1993,2021-03-18T16:47:40Z,2021-03-19T08:43:52Z,2021-03-19T08:43:52Z,MERGED,True,582,143,7,https://github.com/iYaroslav,Fix Python 3.9 compatibility,1,[],https://github.com/espruino/Espruino/pull/1993,https://github.com/iYaroslav,1,https://github.com/espruino/Espruino/pull/1993,"When trying to build a project, after calling python scripts/hexmerge.py ... an error like this appeared:
File "".../Espruino/scripts/intelhex/__init__.py"", line 593, in write_hex_file
asstr(hexlify(bin.tostring()).translate(table)) +
AttributeError: 'array.array' object has no attribute 'tostring'
I just updated intelhex to version 2.3.0, they already fixed that
python-intelhex/intelhex@4125dce","When trying to build a project, after calling python scripts/hexmerge.py ... an error like this appeared:
File "".../Espruino/scripts/intelhex/__init__.py"", line 593, in write_hex_file
asstr(hexlify(bin.tostring()).translate(table)) +
AttributeError: 'array.array' object has no attribute 'tostring'
I just updated intelhex to version 2.3.0, they already fixed that
python-intelhex/intelhex@4125dce",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1993,2021-03-18T16:47:40Z,2021-03-19T08:43:52Z,2021-03-19T08:43:52Z,MERGED,True,582,143,7,https://github.com/iYaroslav,Fix Python 3.9 compatibility,1,[],https://github.com/espruino/Espruino/pull/1993,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/1993#issuecomment-802657406,"When trying to build a project, after calling python scripts/hexmerge.py ... an error like this appeared:
File "".../Espruino/scripts/intelhex/__init__.py"", line 593, in write_hex_file
asstr(hexlify(bin.tostring()).translate(table)) +
AttributeError: 'array.array' object has no attribute 'tostring'
I just updated intelhex to version 2.3.0, they already fixed that
python-intelhex/intelhex@4125dce",That's great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/1998,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU",True,"{'HOORAY': ['https://github.com/MaBecker', 'https://github.com/AkosLukacs'], 'HEART': ['https://github.com/AkosLukacs']}"
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/1998#issuecomment-817848649,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","I have tested this with nordic NRF52840 dongle on SDK15 and E104BT5032A nrf52832 board on SDK12. Tested with WebIDE (seems to not break with this) and between each other both as central and peripheral to the other one each having different MTU 131 and 59 (so the effective MTU comes into use). testing larger MTU is visible on notifications - you get more data.
also you can test via https://fanoush.github.io/web-device-cli/ - open developer console - F12 as see console log about guessed MTU (code here https://github.com/fanoush/web-device-cli/blob/master/js/app.js#L128) looks like chrome on windows goes only up to 127
what is missing is to have effective MTU readable for JS code so you know how much you can use",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/1998#issuecomment-818554630,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","This looks awesome - thanks! Maybe the MTU could just be added to getSecurityStatus? I can add that.
Just a quick one before I merge - do you see any issue with me ifdefing BLE_GATTC_EVT_EXCHANGE_MTU_RSP and the effective MTU based on whether the MTU is higher than default or not? It'd just be nice to avoid any extra code if we can avoid it on the really restricted platforms (eg nRF51)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/1998#issuecomment-818555528,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","was testing different MTUs and how it affect  app_ram_base and it is not trivial. First the default 0x2c40 you have there is too high, the real value when current build for SDK12,52832 starts is 0x2828 for me. Then it looks like it jumps mostly by 0x20 but sometime it is less and sometimes more, here are some values that should work (did not test 55-57, they are approximated from 54 and 58).
default:0x2828 50:2bd8 51:2c00 52:2c20 53:2c40 54:2c68 55:2c88? 56:2ca8? 57:2cc8? 58:2ce8 59:2d18 60:2d38 61:2d58  77:0x2f88
as for good MTU size to pick - the iphone uses formula 23+x*27 as per table in https://devzone.nordicsemi.com/f/nordic-q-a/44825/ios-mtu-size-why-only-185-bytes the rationale being that it best fits into connection interval (not sure why 27 and not 23). That would give numbers like 50,77,104,131 but I guess it doesn't matter much and one could also pick MTU which exactly covers use case needed (like 59 with those unicycles using 56 byte protocol) and uses minimum of memory. For 52840 I like 131 as -3 it is 128 which is nicely rounded.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,5,https://github.com/espruino/Espruino/pull/1998#issuecomment-818562652,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Just a quick one before I merge - do you see any issue with me ifdefing BLE_GATTC_EVT_EXCHANGE_MTU_RSP and the effective MTU based on whether the MTU is higher than default or not? It'd just be nice to avoid any extra code if we can avoid it on the really restricted platforms (eg nRF51)

yes, was thinking about it too, if there is no central this can be removed too and perhaps also the effective mtu variables. Was thinking about making some define EXTENSIBLE_MTU defined from (NRF_BLE_MAX_MTU_SIZE > GATT_MTU_SIZE_DEFAULT) and then ifdef out all mtu stuff based on that
feel free to play with it and change as you wish.

could just be added to getSecurityStatus

well it is not about security, can connection itself have such properties? connection being perhaps https://www.espruino.com/Reference#BluetoothDevice ? because it can be different per connection - each device negotiates different value
the https://www.espruino.com/Reference#l_NRF_getSecurityStatus is not per connection so with both central and peripheral I am not sure what it is supposed to return, I'd deprecate that one :-) Also in future we can have more connections than two",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/1998#issuecomment-818566076,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Ok, great - yes, I'll do an EXTENSIBLE_MTU thing.
There's a BluetoothDevice getSecurityStatus as well ;) But yes, it's not ideal. I guess longer term there may be more info (connection interval/etc) so we probably don't want just properties in there, but a getInfo function...
How sure are you about this? It looks fine but I've been meaning to push a 2v09 version out this week, and I'm wondering if I should do that and then merge this?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/1998#issuecomment-818566296,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","... having said that, it'd be a really nice addition to have in the new version :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,8,https://github.com/espruino/Espruino/pull/1998#issuecomment-818574423,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","I've tested it only with android phone, windows 10 computer, 52832 board and nrf52840 dongle over few days in all directions. It also works for those guys with those unicycles so far. Also if you do not add MTU to any board file and ifdef MTU stuff as you suggest there is no change - but then you can wait with merge :-) Not sure if you have more (IOT?) devices yourself that would need or benefit from larger MTU to work fine? Definitely more testing with real devices could be useful. But if you don't have more devices to test then users must test this. Can you have second build with larger MTU for some supported boards so people could revert to that if it break their devices? In theory it can happen with any broken BLE device.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,9,https://github.com/espruino/Espruino/pull/1998#issuecomment-818617023,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Also as for compatibility did you read softdevice 3.1.0 release notes? You use softdevice 3.0.0 in builds but it is not downloadable from nordic site anymore. They list only 3.1.0 there https://www.nordicsemi.com/Software-and-tools/Software/S132/Download
From release notes it looks like there is possibly some known buffer corruption/exploit in 3.0 (reason for removal from downloads?) and also they added lot of stuff related to DLE including It is now possible to completely disable the DLE feature. so maybe it breaks with some devices even if properly implemented on our side. I have actually tested with 3.1.0 in the beginning but then went to 3.0 just to be sure it works there too and didn't see any difference. So in addition to MTU and connection interval info (which all could be also passed to NRF.requestDevice or device.gatt.connect() in future as preferred values for opening the connection?) DLE and PDU size could be perhaps set or seen there too.
EDIT: oh now I see you actually can pass connection interval to https://www.espruino.com/Reference#l_BluetoothRemoteGATTServer_connect already. Nice so requested MTU (and possibly DLE flag to not initiate it on SD >3) could go there too in future.",True,{'ROCKET': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/1998#issuecomment-818700300,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Thanks! That's very interesting. And yes, it'd be great to be able request a specific MTU - but I can't imagine too many times where you wouldn't want the maximum?
Just filed an issue for 3.1.0 softdevice at #1999
It should be compatible with the existing SDK12 builds? All I need to do is swap it over? Definitely seems like a good idea.
re. DLE - I wonder if the issue is just that people screw up allocation of it in their code and then the softdevice blindly sends a bit of your application. Maybe some folks want to disable it just to be sure",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,11,https://github.com/espruino/Espruino/pull/1998#issuecomment-818722704,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Thanks! That's very interesting. And yes, it'd be great to be able request a specific MTU - but I can't imagine too many times where you wouldn't want the maximum?

not sure about MTU but regarding DLE it may be needed for  compatibility, some time ago I've seen this https://software-dl.ti.com/lprf/simplelink_cc2640r2_latest/docs/blestack/ble_user_guide/html/ble-stack-3.x/data-length-extensions.html#sec-interoperability-with-peers so maybe makes sense with some older devices to request MTU 23 and then our code could avoid all that MTU and DLE negotiation. Or higher MTU could still make sense without DLE (if that breaks it) so the packets are fragmented but you can still get more data on GATT level.
Also I guess it may be related to selected connection interval - with longer interval you can fit more or larger packets, with shorter interval maybe shorter packets may make sense as mentioned near the end of https://punchthrough.com/maximizing-ble-throughput-part-3-data-length-extension-dle-2/  Also not sure if in noisy/crowded conditions shorter packets could get better success. Don't know really, but I can imagine it can be sometimes useful to change it :-)

It should be compatible with the existing SDK12 builds? All I need to do is swap it over?

yes, I used it randomly instead of 3.0 and seem to just work, however it also needs fixing DFU package generation in board files so it allows newer version too -  'DFU_SETTINGS=--application-version 0xff --hw-version 52 --sd-req 0x8C,0x91'",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,12,https://github.com/espruino/Espruino/pull/1998#issuecomment-818797141,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","I just merged in 3.1.0...

First the default 0x2c40 you have there is too high, the real value when current build for SDK12,52832 starts is 0x2828 for me

Great! So we can actually increase the MTU in all the Espruino parts to 53 without losing any RAM at all?
How did you find those figures? Just trial and error, or did you enable logging and see what was being reported back as an error?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,13,https://github.com/espruino/Espruino/pull/1998#issuecomment-818817973,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Sorry, I'm being dumb.
From sd_ble_enable:

p_app_ram_base - Pointer to a variable containing the start address of the application RAM region (APP_RAM_BASE). On return, this will contain the minimum start address of the application RAM region required by the SoftDevice for this configuration.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,14,https://github.com/espruino/Espruino/pull/1998#issuecomment-818824741,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Great! So we can actually increase the MTU in all the Espruino parts to 53 without losing any RAM at all?

Yes that's what it tells me in my build, so MTU of 53 should work with same value of 0x2c40.  With -DDEBUG_APP_RAM_BASE defined you should see  0x2828 in process.env.APP_RAM_BASE in current build without increasing MTU.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,15,https://github.com/espruino/Espruino/pull/1998#issuecomment-818827733,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Thanks for all your work on this - it's awesome! Seems to work perfectly on the devices I have tried so far.
I added a few hacky ifdef things to avoid adding code when this isn't enabled, but I'll have more of a play with this over the coming days and will add it in the 2v09 release.
It's interesting that the connection process with the IDE is significantly faster with this. I guess it's just the extra speed of transferring process.env. I'll make some changes to the IDE now to take advantage of the MTU",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/gfwilliams,16,https://github.com/espruino/Espruino/pull/1998#issuecomment-818841624,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Ok, https://espruino.github.io/EspruinoWebIDE/ should now use the increased MTU.
Next up the Puck.js/UART.js libs could be updated...",True,{'ROCKET': ['https://github.com/MaBecker']}
espruino/Espruino,https://github.com/espruino/Espruino,1998,2021-04-12T14:04:24Z,2021-04-13T15:01:55Z,2021-04-13T20:45:05Z,MERGED,True,115,12,8,https://github.com/fanoush,add configurable MTU,2,[],https://github.com/espruino/Espruino/pull/1998,https://github.com/fanoush,17,https://github.com/espruino/Espruino/pull/1998#issuecomment-819031626,"add configurable MTU to linker scripts and softdevice initialization
add triggering MTU and DLE negotiation when being central
keep track of effective (negotiated) MTU for  central/peripheral connections
use effective MTU for nordic uart so we do not send more data if other side supports lower MTU then we
allow sdk12 nus service to use larger MTU","Ok, https://espruino.github.io/EspruinoWebIDE/ should now use the increased MTU.

works quite well :-) I can feel the difference, seeing reset() or process.env, or E.dumpxxx - it just shows without waiting, also tried to upload same 35KB binary file to storage - with old fw and old ide it took 49 seconds to upload, with new one (and mtu 61) it took 20 seconds :-)
Also downloading - clicking eye button in storage dialog - 19 seconds vs 7 seconds for same file, nice :-)
Also with nrf52840 dongle (MTU 131) uploading same file to storage took 11 seconds however downloading/view took 7 seconds so upload scales with MTU but in this case download does not when compared to MTU 61.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2018,2021-06-17T11:09:56Z,2021-06-18T09:02:31Z,2021-06-18T09:02:31Z,MERGED,True,2,2,1,https://github.com/GaryOtt,Fix Linux build seg faults on quit() if JsVars leaked (#2017),1,[],https://github.com/espruino/Espruino/pull/2018,https://github.com/GaryOtt,1,https://github.com/espruino/Espruino/pull/2018,Fix for #2017,Fix for #2017,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2018,2021-06-17T11:09:56Z,2021-06-18T09:02:31Z,2021-06-18T09:02:31Z,MERGED,True,2,2,1,https://github.com/GaryOtt,Fix Linux build seg faults on quit() if JsVars leaked (#2017),1,[],https://github.com/espruino/Espruino/pull/2018,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2018#issuecomment-863881807,Fix for #2017,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/FnControlOption,1,https://github.com/espruino/Espruino/pull/2032,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)","(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2032#issuecomment-887556317,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)","Sorry for the delay, I've just come back from holiday.
Does anyone else have thoughts on this? We could definitely add it, but I'd prefer the #ifdefs were done in such a way that it doesn't add extra (unused) code on embedded targets.
Ctrl-C does already exit if you just press it twice, so I guess this is more of a personal preference thing",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/2032#issuecomment-945820488,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)",Based on the fact that node.js handles Ctrl-D I'd vote for handling it in Espruino as well (muscle memory things).,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/jes,4,https://github.com/espruino/Espruino/pull/2032#issuecomment-1021089297,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)","It doesn't need to handle Ctrl-D explicitly, it just needs to exit when there's EOF on stdin. That's how most programs support ""exit when you type Ctrl-D"": it's just a consequence of exiting on end-of-file.
Update: I've had a look and discovered 2 things that make this difficult:
1.) targets/linux/jshardware.c puts the terminal in raw mode, so you actually don't get end-of-file when Ctrl-D is typed.
2.) the return from the getch() implementation can't distinguish a 0-length read (i.e. end-of-file) from a read of a 0-valued character.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2032#issuecomment-1021102012,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)","Ahh - that would actually be a perfect fix for this, and could just be put in targets/linux/jshardware.c",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2032,2021-07-15T17:04:23Z,2022-01-25T13:24:37Z,2022-01-25T13:24:38Z,CLOSED,False,26,4,4,https://github.com/FnControlOption,Exit if Ctrl+D on empty input line,1,[],https://github.com/espruino/Espruino/pull/2032,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2032#issuecomment-1021179794,"(REPLs such as node, python, and irb support exiting by Ctrl + D on empty input line)",Fixed with #2131,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2038,2021-08-26T19:31:20Z,2022-03-07T15:45:28Z,2022-03-07T15:45:29Z,CLOSED,False,20,0,1,https://github.com/DanTheMan827,Add a pointer to an array containing pointers to NFC HAL functions,1,[],https://github.com/espruino/Espruino/pull/2038,https://github.com/DanTheMan827,1,https://github.com/espruino/Espruino/pull/2038,"As mentioned in #1935, a change like this one would enable users to write code and modules within the IDE in a way that allows low-level access to the NFC hardware of the NRF52 chip to avoid the performance hit of doing it in javascript and having to deal with the event loop.
An example script making use of this can be found below:
var buffer = new Uint8Array(24);
var tag = new Uint8Array(572);
var native = E.compiledC(`
// void init(int)
// void setTagPointer(int)
// void setBufferPointer(int)
// bool getTagWritten()
// int startNfc()
// int stopNfc()
// int restartNfc()
typedef unsigned int size_t;
typedef unsigned int ret_code_t;
typedef unsigned char uint8_t;
typedef enum {
    HAL_NFC_EVENT_FIELD_ON,
    HAL_NFC_EVENT_FIELD_OFF,
    HAL_NFC_EVENT_DATA_RECEIVED,
    HAL_NFC_EVENT_DATA_TRANSMITTED
} hal_nfc_event_t;
typedef enum {
    HAL_NFC_PARAM_ID_TESTING,
    HAL_NFC_PARAM_ID_NFCID1,
    HAL_NFC_PARAM_ID_INTERNAL,
    HAL_NFC_PARAM_ID_UNKNOWN
} hal_nfc_param_id_t;
typedef void (* hal_nfc_callback_t)(void          * p_context,
                                    hal_nfc_event_t event,
                                    const uint8_t * p_data,
                                    size_t          data_length);
unsigned int *native;
ret_code_t hal_nfc_setup(hal_nfc_callback_t callback, void * p_context){
  return ( (ret_code_t(*)(hal_nfc_callback_t, void *))native[0])(callback, p_context);
}
ret_code_t hal_nfc_parameter_set(hal_nfc_param_id_t id, const void * p_data, size_t data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, const void *, size_t))native[1])(id, p_data, data_length);
}
ret_code_t hal_nfc_parameter_get(hal_nfc_param_id_t id, void * p_data, size_t * p_max_data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, void *, size_t *))native[2])(id, p_data, p_max_data_length);
}
ret_code_t hal_nfc_start(void){
  return ( (ret_code_t(*)())native[3])();
}
ret_code_t hal_nfc_send(const uint8_t * p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t *, size_t))native[4])(p_data, data_length);
}
ret_code_t hal_nfc_send_rsp(const uint8_t p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t, size_t))native[5])(p_data, data_length);
}
ret_code_t hal_nfc_stop(void){
  return ( (ret_code_t(*)())native[6])();
}
ret_code_t hal_nfc_done(void){
  return ( (ret_code_t(*)())native[7])();
}
ret_code_t startNfc(void);
ret_code_t stopNfc(void);
ret_code_t restartNfc(void);
void print(const char *text){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromString(text);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void printInt(int number){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void fieldState(int number){
  return;
  JsVar *p = jspGetNamedVariable(""fieldState"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void init(void* pointer){
  native = pointer;
}
unsigned char *tag = 0;
void setTagPointer(unsigned char *pointer){
  tag = pointer;
}
unsigned char *tagUid = 0;
unsigned char *tx = 0;
void setBufferPointer(unsigned char *pointer){
  tagUid = &pointer[0];
  tx = &pointer[7];
}
unsigned char version[] = {0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x11, 0x03};
unsigned char password_success[] = {0x80, 0x80};
unsigned char backdoor_success[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
unsigned char zero_page[] = {0x00, 0x00, 0x00, 0x00};
bool authenticated = false;
void setAuthenticated(bool value){ authenticated = value; }
bool getAuthenticated(){ return authenticated; }
bool backdoor = false;
void setBackdoor(bool value){ backdoor = value; }
bool getBackdoor() { return backdoor; }
bool tagWritten = false;
void setTagWritten(bool value){ tagWritten = value; }
bool getTagWritten(){ return tagWritten; }
bool fixUid(){
  unsigned char bcc0 = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  unsigned char bcc1 = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  if (tag[3] != bcc0 || tag[8] != bcc1){
    tag[3] = bcc0;
    tag[8] = bcc1;
    return true;
  }
  return false;
}
bool isLocked(int page){
  if (page == 0 || page == 1) return true;
  // Static Lock Bytes
  int bit;
  for (bit = 0; bit < 8; bit++){
    if (tag[11] & (1 << bit)){
      if ((bit + 8) == page){
        return true;
      }
    }
    if (tag[10] & (1 << bit)){
      switch (bit){
        case 0: //BL-CC
        case 1: //BL-9-4
        case 2: //BL-15-10
        case 3: //L-CC
          break;
        default: {
          if ((bit + 4) == page){
            return true;
          }
        } break;
      }
    }
  }
  if (authenticated == false){
    if (tag[520] & 0b00000001 > 0 && (page >= 16 && page <= 31))
      return true;
    if (tag[520] & 0b00000010 > 0 && (page >= 32 && page <= 47))
      return true;
    if (tag[520] & 0b00000100 > 0 && (page >= 48 && page <= 63))
      return true;
    if (tag[520] & 0b00001000 > 0 && (page >= 64 && page <= 79))
      return true;
    if (tag[520] & 0b00010000 > 0 && (page >= 80 && page <= 95))
      return true;
    if (tag[520] & 0b00100000 > 0 && (page >= 96 && page <= 111))
      return true;
    if (tag[520] & 0b01000000 > 0 && (page >= 112 && page <= 127))
      return true;
    if (tag[520] & 0b10000000 > 0 && (page >= 128 && page <= 129))
      return true;
  }
  return false;
}
unsigned char *memcpy(unsigned char *dest_str, unsigned char *src_str, int number){
  int i;
  for (i = 0; i < number; i++)
    dest_str[i] = src_str[i];
  return dest_str;
}
unsigned char *readBlock(uint8_t block){
  
}
void processRx(unsigned char *rx, int rxLen){
  if (rx == 0){
    print(""NFC RX pointer is 0"");
  }
  if (rxLen == 0){
    hal_nfc_send_rsp(0, 0);
    print(""NFC RX length is 0"");
    return;
  }
  switch (rx[0]) {
    case 0x30: { // 48 - Read
      if (rxLen < 2){
        print(""READ: bad rxlen"");
        hal_nfc_send_rsp(0, 0);
        return;
      }
      hal_nfc_send(&tag[rx[1] * 4], 16);
      return;
    }
    case 0xA2: { //  162 - Write
      if (backdoor == false && (rx[1] < 0 || rx[1] > 134 || isLocked(rx[1]))) {
        hal_nfc_send_rsp(0, 4);
        return;
      }
      if (backdoor == false) {
        if (rx[1] == 2) {
          tag[10] = tag[10] | rx[4];
          tag[11] = tag[11] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 3) {
          tag[16] = tag[16] | rx[2];
          tag[17] = tag[17] | rx[3];
          tag[18] = tag[18] | rx[4];
          tag[19] = tag[19] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 130) {
          // TODO: Dynamic lock bits
        }
      }
      int index = rx[1] * 4;
      if ((index > 568) || (backdoor == false && index > 536)) {
        hal_nfc_send_rsp(0, 4);
        print(""page write oob"");
        return;
      } else {
        memcpy(&tag[index], &rx[2], 4);
        tagWritten = true;
        hal_nfc_send_rsp(0xA, 4);
        return;
      }
    }
    case 0x60: { // 96 - Version
      hal_nfc_send(version, 8);
      return;
    }
    case 0x3A: { // 58 - Fast Read
      if (rxLen < 3){
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read rx length"");
        return;
      }
      if (rx[1] > rx[2] || rx[1] < 0 || rx[2] > 134) {
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read address"");
        return;
      }
      if (rx[1] == 133 && rx[2] == 134) {
        backdoor = true;
        print(""Backdoor enabled"");
        hal_nfc_send(backdoor_success, 8);
        return;
      }
      unsigned int tag_location = rx[1] * 4;
      unsigned int tx_len = (rx[2] - rx[1] + 1) * 4;
      hal_nfc_send(&tag[tag_location], tx_len);
      return;
    }
    case 0x1B: { // 27 - Password Auth
      hal_nfc_send(password_success, 2);
      authenticated = true;
      return;
    }
    case 0x3C: { // 60 - Read Signature
      hal_nfc_send(&tag[540], 32);
      return;
    }
    case 0x88: { // 136 - CUSTOM: Restart NFC
      hal_nfc_send_rsp(0xA, 4);
      restartNfc();
      return;
    }
    default: { // Unknown command
      hal_nfc_send_rsp(0, 0);
      print(""Unknown Command"");
      printInt(rx[0]);
      return;
    }
  }
}
void nfc_callback(void * p_context, hal_nfc_event_t event, const uint8_t * p_data, size_t data_length) {
  switch (event){
    case HAL_NFC_EVENT_FIELD_ON: 
      fieldState(1);
      break;
    case HAL_NFC_EVENT_FIELD_OFF:
      fieldState(0);
      authenticated = false;
      backdoor = false;
      if (fixUid()){
        restartNfc();
      }
      break;
    case HAL_NFC_EVENT_DATA_RECEIVED:
      processRx(p_data, data_length);
      break;
    case HAL_NFC_EVENT_DATA_TRANSMITTED: break;
    default:
      print(""Unknown nfc event"");
      printInt(event);
  }
}
ret_code_t stopNfc(){
  if (native == 0) {
    print(""stopNfc: No method pointer set"");
    return 99;
  }
  hal_nfc_stop();
  hal_nfc_done();
}
ret_code_t startNfc(){
  ret_code_t ret_val = 0;
  if (native == 0) {
    print(""startNfc: No method pointer set"");
    return 99;
  }
  if (tag == 0){
    print(""No tag pointer set"");
    return 100;
  }
  if (tagUid == 0){
    print(""No buffer pointer set"");
    return 101;
  }
  stopNfc();
  if (fixUid()){
    print(""Fixed UID"");
  }
  tagUid[0] = tag[0];
  tagUid[1] = tag[1];
  tagUid[2] = tag[2];
  tagUid[3] = tag[4];
  tagUid[4] = tag[5];
  tagUid[5] = tag[6];
  tagUid[6] = tag[7];
  ret_val = hal_nfc_parameter_set(HAL_NFC_PARAM_ID_NFCID1, tagUid, 7);
  ret_val = hal_nfc_setup(nfc_callback, 0);
  ret_val = hal_nfc_start();
  return ret_val;
}
ret_code_t restartNfc(){
  stopNfc();
  startNfc();
}`);
function onInit(){
  if (!process.env.NFCPTR) {
    console.log(""process.env.NFCPTR is not set"");
    return;
  }

  tag[0] = 0x04;
  tag[1] = Math.round(Math.random() * 255);
  tag[2] = Math.round(Math.random() * 255);
  tag[3] = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  tag[4] = Math.round(Math.random() * 255);
  tag[5] = Math.round(Math.random() * 255);
  tag[6] = Math.round(Math.random() * 255);
  tag[7] = Math.round(Math.random() * 255);
  tag[8] = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  tag.set([0x48, 0x00, 0x00, 0xE1, 0x10, 0x3E, 0x00, 0x03, 0x00, 0xFE], 0x09);
  tag.set([0xBD, 0x04, 0x00, 0x00, 0xFF, 0x00, 0x05], 0x20B);

  native.init(process.env.NFCPTR);
  native.setBufferPointer(E.getAddressOf(buffer, true));
  native.setTagPointer(E.getAddressOf(tag, true));
  native.startNfc();
}","As mentioned in #1935, a change like this one would enable users to write code and modules within the IDE in a way that allows low-level access to the NFC hardware of the NRF52 chip to avoid the performance hit of doing it in javascript and having to deal with the event loop.
An example script making use of this can be found below:
var buffer = new Uint8Array(24);
var tag = new Uint8Array(572);
var native = E.compiledC(`
// void init(int)
// void setTagPointer(int)
// void setBufferPointer(int)
// bool getTagWritten()
// int startNfc()
// int stopNfc()
// int restartNfc()
typedef unsigned int size_t;
typedef unsigned int ret_code_t;
typedef unsigned char uint8_t;
typedef enum {
    HAL_NFC_EVENT_FIELD_ON,
    HAL_NFC_EVENT_FIELD_OFF,
    HAL_NFC_EVENT_DATA_RECEIVED,
    HAL_NFC_EVENT_DATA_TRANSMITTED
} hal_nfc_event_t;
typedef enum {
    HAL_NFC_PARAM_ID_TESTING,
    HAL_NFC_PARAM_ID_NFCID1,
    HAL_NFC_PARAM_ID_INTERNAL,
    HAL_NFC_PARAM_ID_UNKNOWN
} hal_nfc_param_id_t;
typedef void (* hal_nfc_callback_t)(void          * p_context,
                                    hal_nfc_event_t event,
                                    const uint8_t * p_data,
                                    size_t          data_length);
unsigned int *native;
ret_code_t hal_nfc_setup(hal_nfc_callback_t callback, void * p_context){
  return ( (ret_code_t(*)(hal_nfc_callback_t, void *))native[0])(callback, p_context);
}
ret_code_t hal_nfc_parameter_set(hal_nfc_param_id_t id, const void * p_data, size_t data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, const void *, size_t))native[1])(id, p_data, data_length);
}
ret_code_t hal_nfc_parameter_get(hal_nfc_param_id_t id, void * p_data, size_t * p_max_data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, void *, size_t *))native[2])(id, p_data, p_max_data_length);
}
ret_code_t hal_nfc_start(void){
  return ( (ret_code_t(*)())native[3])();
}
ret_code_t hal_nfc_send(const uint8_t * p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t *, size_t))native[4])(p_data, data_length);
}
ret_code_t hal_nfc_send_rsp(const uint8_t p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t, size_t))native[5])(p_data, data_length);
}
ret_code_t hal_nfc_stop(void){
  return ( (ret_code_t(*)())native[6])();
}
ret_code_t hal_nfc_done(void){
  return ( (ret_code_t(*)())native[7])();
}
ret_code_t startNfc(void);
ret_code_t stopNfc(void);
ret_code_t restartNfc(void);
void print(const char *text){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromString(text);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void printInt(int number){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void fieldState(int number){
  return;
  JsVar *p = jspGetNamedVariable(""fieldState"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void init(void* pointer){
  native = pointer;
}
unsigned char *tag = 0;
void setTagPointer(unsigned char *pointer){
  tag = pointer;
}
unsigned char *tagUid = 0;
unsigned char *tx = 0;
void setBufferPointer(unsigned char *pointer){
  tagUid = &pointer[0];
  tx = &pointer[7];
}
unsigned char version[] = {0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x11, 0x03};
unsigned char password_success[] = {0x80, 0x80};
unsigned char backdoor_success[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
unsigned char zero_page[] = {0x00, 0x00, 0x00, 0x00};
bool authenticated = false;
void setAuthenticated(bool value){ authenticated = value; }
bool getAuthenticated(){ return authenticated; }
bool backdoor = false;
void setBackdoor(bool value){ backdoor = value; }
bool getBackdoor() { return backdoor; }
bool tagWritten = false;
void setTagWritten(bool value){ tagWritten = value; }
bool getTagWritten(){ return tagWritten; }
bool fixUid(){
  unsigned char bcc0 = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  unsigned char bcc1 = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  if (tag[3] != bcc0 || tag[8] != bcc1){
    tag[3] = bcc0;
    tag[8] = bcc1;
    return true;
  }
  return false;
}
bool isLocked(int page){
  if (page == 0 || page == 1) return true;
  // Static Lock Bytes
  int bit;
  for (bit = 0; bit < 8; bit++){
    if (tag[11] & (1 << bit)){
      if ((bit + 8) == page){
        return true;
      }
    }
    if (tag[10] & (1 << bit)){
      switch (bit){
        case 0: //BL-CC
        case 1: //BL-9-4
        case 2: //BL-15-10
        case 3: //L-CC
          break;
        default: {
          if ((bit + 4) == page){
            return true;
          }
        } break;
      }
    }
  }
  if (authenticated == false){
    if (tag[520] & 0b00000001 > 0 && (page >= 16 && page <= 31))
      return true;
    if (tag[520] & 0b00000010 > 0 && (page >= 32 && page <= 47))
      return true;
    if (tag[520] & 0b00000100 > 0 && (page >= 48 && page <= 63))
      return true;
    if (tag[520] & 0b00001000 > 0 && (page >= 64 && page <= 79))
      return true;
    if (tag[520] & 0b00010000 > 0 && (page >= 80 && page <= 95))
      return true;
    if (tag[520] & 0b00100000 > 0 && (page >= 96 && page <= 111))
      return true;
    if (tag[520] & 0b01000000 > 0 && (page >= 112 && page <= 127))
      return true;
    if (tag[520] & 0b10000000 > 0 && (page >= 128 && page <= 129))
      return true;
  }
  return false;
}
unsigned char *memcpy(unsigned char *dest_str, unsigned char *src_str, int number){
  int i;
  for (i = 0; i < number; i++)
    dest_str[i] = src_str[i];
  return dest_str;
}
unsigned char *readBlock(uint8_t block){
  
}
void processRx(unsigned char *rx, int rxLen){
  if (rx == 0){
    print(""NFC RX pointer is 0"");
  }
  if (rxLen == 0){
    hal_nfc_send_rsp(0, 0);
    print(""NFC RX length is 0"");
    return;
  }
  switch (rx[0]) {
    case 0x30: { // 48 - Read
      if (rxLen < 2){
        print(""READ: bad rxlen"");
        hal_nfc_send_rsp(0, 0);
        return;
      }
      hal_nfc_send(&tag[rx[1] * 4], 16);
      return;
    }
    case 0xA2: { //  162 - Write
      if (backdoor == false && (rx[1] < 0 || rx[1] > 134 || isLocked(rx[1]))) {
        hal_nfc_send_rsp(0, 4);
        return;
      }
      if (backdoor == false) {
        if (rx[1] == 2) {
          tag[10] = tag[10] | rx[4];
          tag[11] = tag[11] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 3) {
          tag[16] = tag[16] | rx[2];
          tag[17] = tag[17] | rx[3];
          tag[18] = tag[18] | rx[4];
          tag[19] = tag[19] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 130) {
          // TODO: Dynamic lock bits
        }
      }
      int index = rx[1] * 4;
      if ((index > 568) || (backdoor == false && index > 536)) {
        hal_nfc_send_rsp(0, 4);
        print(""page write oob"");
        return;
      } else {
        memcpy(&tag[index], &rx[2], 4);
        tagWritten = true;
        hal_nfc_send_rsp(0xA, 4);
        return;
      }
    }
    case 0x60: { // 96 - Version
      hal_nfc_send(version, 8);
      return;
    }
    case 0x3A: { // 58 - Fast Read
      if (rxLen < 3){
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read rx length"");
        return;
      }
      if (rx[1] > rx[2] || rx[1] < 0 || rx[2] > 134) {
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read address"");
        return;
      }
      if (rx[1] == 133 && rx[2] == 134) {
        backdoor = true;
        print(""Backdoor enabled"");
        hal_nfc_send(backdoor_success, 8);
        return;
      }
      unsigned int tag_location = rx[1] * 4;
      unsigned int tx_len = (rx[2] - rx[1] + 1) * 4;
      hal_nfc_send(&tag[tag_location], tx_len);
      return;
    }
    case 0x1B: { // 27 - Password Auth
      hal_nfc_send(password_success, 2);
      authenticated = true;
      return;
    }
    case 0x3C: { // 60 - Read Signature
      hal_nfc_send(&tag[540], 32);
      return;
    }
    case 0x88: { // 136 - CUSTOM: Restart NFC
      hal_nfc_send_rsp(0xA, 4);
      restartNfc();
      return;
    }
    default: { // Unknown command
      hal_nfc_send_rsp(0, 0);
      print(""Unknown Command"");
      printInt(rx[0]);
      return;
    }
  }
}
void nfc_callback(void * p_context, hal_nfc_event_t event, const uint8_t * p_data, size_t data_length) {
  switch (event){
    case HAL_NFC_EVENT_FIELD_ON: 
      fieldState(1);
      break;
    case HAL_NFC_EVENT_FIELD_OFF:
      fieldState(0);
      authenticated = false;
      backdoor = false;
      if (fixUid()){
        restartNfc();
      }
      break;
    case HAL_NFC_EVENT_DATA_RECEIVED:
      processRx(p_data, data_length);
      break;
    case HAL_NFC_EVENT_DATA_TRANSMITTED: break;
    default:
      print(""Unknown nfc event"");
      printInt(event);
  }
}
ret_code_t stopNfc(){
  if (native == 0) {
    print(""stopNfc: No method pointer set"");
    return 99;
  }
  hal_nfc_stop();
  hal_nfc_done();
}
ret_code_t startNfc(){
  ret_code_t ret_val = 0;
  if (native == 0) {
    print(""startNfc: No method pointer set"");
    return 99;
  }
  if (tag == 0){
    print(""No tag pointer set"");
    return 100;
  }
  if (tagUid == 0){
    print(""No buffer pointer set"");
    return 101;
  }
  stopNfc();
  if (fixUid()){
    print(""Fixed UID"");
  }
  tagUid[0] = tag[0];
  tagUid[1] = tag[1];
  tagUid[2] = tag[2];
  tagUid[3] = tag[4];
  tagUid[4] = tag[5];
  tagUid[5] = tag[6];
  tagUid[6] = tag[7];
  ret_val = hal_nfc_parameter_set(HAL_NFC_PARAM_ID_NFCID1, tagUid, 7);
  ret_val = hal_nfc_setup(nfc_callback, 0);
  ret_val = hal_nfc_start();
  return ret_val;
}
ret_code_t restartNfc(){
  stopNfc();
  startNfc();
}`);
function onInit(){
  if (!process.env.NFCPTR) {
    console.log(""process.env.NFCPTR is not set"");
    return;
  }

  tag[0] = 0x04;
  tag[1] = Math.round(Math.random() * 255);
  tag[2] = Math.round(Math.random() * 255);
  tag[3] = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  tag[4] = Math.round(Math.random() * 255);
  tag[5] = Math.round(Math.random() * 255);
  tag[6] = Math.round(Math.random() * 255);
  tag[7] = Math.round(Math.random() * 255);
  tag[8] = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  tag.set([0x48, 0x00, 0x00, 0xE1, 0x10, 0x3E, 0x00, 0x03, 0x00, 0xFE], 0x09);
  tag.set([0xBD, 0x04, 0x00, 0x00, 0xFF, 0x00, 0x05], 0x20B);

  native.init(process.env.NFCPTR);
  native.setBufferPointer(E.getAddressOf(buffer, true));
  native.setTagPointer(E.getAddressOf(tag, true));
  native.startNfc();
}",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2038,2021-08-26T19:31:20Z,2022-03-07T15:45:28Z,2022-03-07T15:45:29Z,CLOSED,False,20,0,1,https://github.com/DanTheMan827,Add a pointer to an array containing pointers to NFC HAL functions,1,[],https://github.com/espruino/Espruino/pull/2038,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2038#issuecomment-1060829362,"As mentioned in #1935, a change like this one would enable users to write code and modules within the IDE in a way that allows low-level access to the NFC hardware of the NRF52 chip to avoid the performance hit of doing it in javascript and having to deal with the event loop.
An example script making use of this can be found below:
var buffer = new Uint8Array(24);
var tag = new Uint8Array(572);
var native = E.compiledC(`
// void init(int)
// void setTagPointer(int)
// void setBufferPointer(int)
// bool getTagWritten()
// int startNfc()
// int stopNfc()
// int restartNfc()
typedef unsigned int size_t;
typedef unsigned int ret_code_t;
typedef unsigned char uint8_t;
typedef enum {
    HAL_NFC_EVENT_FIELD_ON,
    HAL_NFC_EVENT_FIELD_OFF,
    HAL_NFC_EVENT_DATA_RECEIVED,
    HAL_NFC_EVENT_DATA_TRANSMITTED
} hal_nfc_event_t;
typedef enum {
    HAL_NFC_PARAM_ID_TESTING,
    HAL_NFC_PARAM_ID_NFCID1,
    HAL_NFC_PARAM_ID_INTERNAL,
    HAL_NFC_PARAM_ID_UNKNOWN
} hal_nfc_param_id_t;
typedef void (* hal_nfc_callback_t)(void          * p_context,
                                    hal_nfc_event_t event,
                                    const uint8_t * p_data,
                                    size_t          data_length);
unsigned int *native;
ret_code_t hal_nfc_setup(hal_nfc_callback_t callback, void * p_context){
  return ( (ret_code_t(*)(hal_nfc_callback_t, void *))native[0])(callback, p_context);
}
ret_code_t hal_nfc_parameter_set(hal_nfc_param_id_t id, const void * p_data, size_t data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, const void *, size_t))native[1])(id, p_data, data_length);
}
ret_code_t hal_nfc_parameter_get(hal_nfc_param_id_t id, void * p_data, size_t * p_max_data_length){
  return ( (ret_code_t(*)(hal_nfc_param_id_t, void *, size_t *))native[2])(id, p_data, p_max_data_length);
}
ret_code_t hal_nfc_start(void){
  return ( (ret_code_t(*)())native[3])();
}
ret_code_t hal_nfc_send(const uint8_t * p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t *, size_t))native[4])(p_data, data_length);
}
ret_code_t hal_nfc_send_rsp(const uint8_t p_data, size_t data_length){
  return ( (ret_code_t(*)(const uint8_t, size_t))native[5])(p_data, data_length);
}
ret_code_t hal_nfc_stop(void){
  return ( (ret_code_t(*)())native[6])();
}
ret_code_t hal_nfc_done(void){
  return ( (ret_code_t(*)())native[7])();
}
ret_code_t startNfc(void);
ret_code_t stopNfc(void);
ret_code_t restartNfc(void);
void print(const char *text){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromString(text);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void printInt(int number){
  JsVar *p = jspGetNamedVariable(""print"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void fieldState(int number){
  return;
  JsVar *p = jspGetNamedVariable(""fieldState"");
  JsVar *s = jsvNewFromInteger(number);
  jsvUnLock(jspeFunctionCall(p,0,0,false,1,&s));
  jsvUnLock(s);
  jsvUnLock(p);
}
void init(void* pointer){
  native = pointer;
}
unsigned char *tag = 0;
void setTagPointer(unsigned char *pointer){
  tag = pointer;
}
unsigned char *tagUid = 0;
unsigned char *tx = 0;
void setBufferPointer(unsigned char *pointer){
  tagUid = &pointer[0];
  tx = &pointer[7];
}
unsigned char version[] = {0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x11, 0x03};
unsigned char password_success[] = {0x80, 0x80};
unsigned char backdoor_success[] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
unsigned char zero_page[] = {0x00, 0x00, 0x00, 0x00};
bool authenticated = false;
void setAuthenticated(bool value){ authenticated = value; }
bool getAuthenticated(){ return authenticated; }
bool backdoor = false;
void setBackdoor(bool value){ backdoor = value; }
bool getBackdoor() { return backdoor; }
bool tagWritten = false;
void setTagWritten(bool value){ tagWritten = value; }
bool getTagWritten(){ return tagWritten; }
bool fixUid(){
  unsigned char bcc0 = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  unsigned char bcc1 = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  if (tag[3] != bcc0 || tag[8] != bcc1){
    tag[3] = bcc0;
    tag[8] = bcc1;
    return true;
  }
  return false;
}
bool isLocked(int page){
  if (page == 0 || page == 1) return true;
  // Static Lock Bytes
  int bit;
  for (bit = 0; bit < 8; bit++){
    if (tag[11] & (1 << bit)){
      if ((bit + 8) == page){
        return true;
      }
    }
    if (tag[10] & (1 << bit)){
      switch (bit){
        case 0: //BL-CC
        case 1: //BL-9-4
        case 2: //BL-15-10
        case 3: //L-CC
          break;
        default: {
          if ((bit + 4) == page){
            return true;
          }
        } break;
      }
    }
  }
  if (authenticated == false){
    if (tag[520] & 0b00000001 > 0 && (page >= 16 && page <= 31))
      return true;
    if (tag[520] & 0b00000010 > 0 && (page >= 32 && page <= 47))
      return true;
    if (tag[520] & 0b00000100 > 0 && (page >= 48 && page <= 63))
      return true;
    if (tag[520] & 0b00001000 > 0 && (page >= 64 && page <= 79))
      return true;
    if (tag[520] & 0b00010000 > 0 && (page >= 80 && page <= 95))
      return true;
    if (tag[520] & 0b00100000 > 0 && (page >= 96 && page <= 111))
      return true;
    if (tag[520] & 0b01000000 > 0 && (page >= 112 && page <= 127))
      return true;
    if (tag[520] & 0b10000000 > 0 && (page >= 128 && page <= 129))
      return true;
  }
  return false;
}
unsigned char *memcpy(unsigned char *dest_str, unsigned char *src_str, int number){
  int i;
  for (i = 0; i < number; i++)
    dest_str[i] = src_str[i];
  return dest_str;
}
unsigned char *readBlock(uint8_t block){
  
}
void processRx(unsigned char *rx, int rxLen){
  if (rx == 0){
    print(""NFC RX pointer is 0"");
  }
  if (rxLen == 0){
    hal_nfc_send_rsp(0, 0);
    print(""NFC RX length is 0"");
    return;
  }
  switch (rx[0]) {
    case 0x30: { // 48 - Read
      if (rxLen < 2){
        print(""READ: bad rxlen"");
        hal_nfc_send_rsp(0, 0);
        return;
      }
      hal_nfc_send(&tag[rx[1] * 4], 16);
      return;
    }
    case 0xA2: { //  162 - Write
      if (backdoor == false && (rx[1] < 0 || rx[1] > 134 || isLocked(rx[1]))) {
        hal_nfc_send_rsp(0, 4);
        return;
      }
      if (backdoor == false) {
        if (rx[1] == 2) {
          tag[10] = tag[10] | rx[4];
          tag[11] = tag[11] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 3) {
          tag[16] = tag[16] | rx[2];
          tag[17] = tag[17] | rx[3];
          tag[18] = tag[18] | rx[4];
          tag[19] = tag[19] | rx[5];
          tagWritten = true;
          hal_nfc_send_rsp(0x0a, 4);
          return;
        }
        if (rx[1] == 130) {
          // TODO: Dynamic lock bits
        }
      }
      int index = rx[1] * 4;
      if ((index > 568) || (backdoor == false && index > 536)) {
        hal_nfc_send_rsp(0, 4);
        print(""page write oob"");
        return;
      } else {
        memcpy(&tag[index], &rx[2], 4);
        tagWritten = true;
        hal_nfc_send_rsp(0xA, 4);
        return;
      }
    }
    case 0x60: { // 96 - Version
      hal_nfc_send(version, 8);
      return;
    }
    case 0x3A: { // 58 - Fast Read
      if (rxLen < 3){
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read rx length"");
        return;
      }
      if (rx[1] > rx[2] || rx[1] < 0 || rx[2] > 134) {
        hal_nfc_send_rsp(0, 4);
        print(""Invalid fast read address"");
        return;
      }
      if (rx[1] == 133 && rx[2] == 134) {
        backdoor = true;
        print(""Backdoor enabled"");
        hal_nfc_send(backdoor_success, 8);
        return;
      }
      unsigned int tag_location = rx[1] * 4;
      unsigned int tx_len = (rx[2] - rx[1] + 1) * 4;
      hal_nfc_send(&tag[tag_location], tx_len);
      return;
    }
    case 0x1B: { // 27 - Password Auth
      hal_nfc_send(password_success, 2);
      authenticated = true;
      return;
    }
    case 0x3C: { // 60 - Read Signature
      hal_nfc_send(&tag[540], 32);
      return;
    }
    case 0x88: { // 136 - CUSTOM: Restart NFC
      hal_nfc_send_rsp(0xA, 4);
      restartNfc();
      return;
    }
    default: { // Unknown command
      hal_nfc_send_rsp(0, 0);
      print(""Unknown Command"");
      printInt(rx[0]);
      return;
    }
  }
}
void nfc_callback(void * p_context, hal_nfc_event_t event, const uint8_t * p_data, size_t data_length) {
  switch (event){
    case HAL_NFC_EVENT_FIELD_ON: 
      fieldState(1);
      break;
    case HAL_NFC_EVENT_FIELD_OFF:
      fieldState(0);
      authenticated = false;
      backdoor = false;
      if (fixUid()){
        restartNfc();
      }
      break;
    case HAL_NFC_EVENT_DATA_RECEIVED:
      processRx(p_data, data_length);
      break;
    case HAL_NFC_EVENT_DATA_TRANSMITTED: break;
    default:
      print(""Unknown nfc event"");
      printInt(event);
  }
}
ret_code_t stopNfc(){
  if (native == 0) {
    print(""stopNfc: No method pointer set"");
    return 99;
  }
  hal_nfc_stop();
  hal_nfc_done();
}
ret_code_t startNfc(){
  ret_code_t ret_val = 0;
  if (native == 0) {
    print(""startNfc: No method pointer set"");
    return 99;
  }
  if (tag == 0){
    print(""No tag pointer set"");
    return 100;
  }
  if (tagUid == 0){
    print(""No buffer pointer set"");
    return 101;
  }
  stopNfc();
  if (fixUid()){
    print(""Fixed UID"");
  }
  tagUid[0] = tag[0];
  tagUid[1] = tag[1];
  tagUid[2] = tag[2];
  tagUid[3] = tag[4];
  tagUid[4] = tag[5];
  tagUid[5] = tag[6];
  tagUid[6] = tag[7];
  ret_val = hal_nfc_parameter_set(HAL_NFC_PARAM_ID_NFCID1, tagUid, 7);
  ret_val = hal_nfc_setup(nfc_callback, 0);
  ret_val = hal_nfc_start();
  return ret_val;
}
ret_code_t restartNfc(){
  stopNfc();
  startNfc();
}`);
function onInit(){
  if (!process.env.NFCPTR) {
    console.log(""process.env.NFCPTR is not set"");
    return;
  }

  tag[0] = 0x04;
  tag[1] = Math.round(Math.random() * 255);
  tag[2] = Math.round(Math.random() * 255);
  tag[3] = tag[0] ^ tag[1] ^ tag[2] ^ 0x88;
  tag[4] = Math.round(Math.random() * 255);
  tag[5] = Math.round(Math.random() * 255);
  tag[6] = Math.round(Math.random() * 255);
  tag[7] = Math.round(Math.random() * 255);
  tag[8] = tag[4] ^ tag[5] ^ tag[6] ^ tag[7];
  tag.set([0x48, 0x00, 0x00, 0xE1, 0x10, 0x3E, 0x00, 0x03, 0x00, 0xFE], 0x09);
  tag.set([0xBD, 0x04, 0x00, 0x00, 0xFF, 0x00, 0x05], 0x20B);

  native.init(process.env.NFCPTR);
  native.setBufferPointer(E.getAddressOf(buffer, true));
  native.setTagPointer(E.getAddressOf(tag, true));
  native.startNfc();
}","Closing this - no interest from others, so I think realistically as you're the only one I think it's just more sensible for you to build your own firmwares (which you can already do)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2039,2021-08-26T21:40:07Z,2021-08-27T09:55:46Z,2021-08-27T09:55:46Z,MERGED,True,5,7,1,https://github.com/hughbarney,"tweaked step counter to 8 in 8, raw threshold = 17, gating and no threshold on filter output",1,[],https://github.com/espruino/Espruino/pull/2039,https://github.com/hughbarney,1,https://github.com/espruino/Espruino/pull/2039,"Test results, best yet:
$ make ;./main
gcc -std=c99 main.c -o main
github.com/gfwilliams/step-count
File, Expected, Simulated, Diff, (Orignal)
HughB-walk-1834.csv, 1834, 1754, -80, (1093)
HughB-walk-2331.csv, 2331, 2143, -188, (1874)
HughB-driving-36min.csv, 0, 13, 13, (1199)
HughB-driving-29min.csv, 0, 46, 46, (1153)
HughB-working-1h.csv, 0, 0, 0, (760)
TOTAL DIFFERENCE 469","Test results, best yet:
$ make ;./main
gcc -std=c99 main.c -o main
github.com/gfwilliams/step-count
File, Expected, Simulated, Diff, (Orignal)
HughB-walk-1834.csv, 1834, 1754, -80, (1093)
HughB-walk-2331.csv, 2331, 2143, -188, (1874)
HughB-driving-36min.csv, 0, 13, 13, (1199)
HughB-driving-29min.csv, 0, 46, 46, (1153)
HughB-working-1h.csv, 0, 0, 0, (760)
TOTAL DIFFERENCE 469",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2039,2021-08-26T21:40:07Z,2021-08-27T09:55:46Z,2021-08-27T09:55:46Z,MERGED,True,5,7,1,https://github.com/hughbarney,"tweaked step counter to 8 in 8, raw threshold = 17, gating and no threshold on filter output",1,[],https://github.com/espruino/Espruino/pull/2039,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2039#issuecomment-907079938,"Test results, best yet:
$ make ;./main
gcc -std=c99 main.c -o main
github.com/gfwilliams/step-count
File, Expected, Simulated, Diff, (Orignal)
HughB-walk-1834.csv, 1834, 1754, -80, (1093)
HughB-walk-2331.csv, 2331, 2143, -188, (1874)
HughB-driving-36min.csv, 0, 13, 13, (1199)
HughB-driving-29min.csv, 0, 46, 46, (1153)
HughB-working-1h.csv, 0, 0, 0, (760)
TOTAL DIFFERENCE 469",Nice - thanks! This looks really promising,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2042,2021-08-29T19:44:14Z,2021-08-31T08:51:30Z,2021-08-31T08:51:30Z,MERGED,True,2,2,1,https://github.com/hughbarney,"step count final config X=6, RAW_THRESHOLD=14, high walking accuracy preferrable to ultra low step count when driving",2,[],https://github.com/espruino/Espruino/pull/2042,https://github.com/hughbarney,1,https://github.com/espruino/Espruino/pull/2042,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2042,2021-08-29T19:44:14Z,2021-08-31T08:51:30Z,2021-08-31T08:51:30Z,MERGED,True,2,2,1,https://github.com/hughbarney,"step count final config X=6, RAW_THRESHOLD=14, high walking accuracy preferrable to ultra low step count when driving",2,[],https://github.com/espruino/Espruino/pull/2042,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2042#issuecomment-909035838,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2045,2021-09-09T19:05:19Z,2021-09-13T15:24:53Z,2021-09-13T16:47:22Z,MERGED,True,13,2,1,https://github.com/coylen,Added support for double and long touch gestures on Bangle2,1,[],https://github.com/espruino/Espruino/pull/2045,https://github.com/coylen,1,https://github.com/espruino/Espruino/pull/2045,"To minimise changes in interface this has added an extra ""type"" parameter to the existing touch event

0 for standard click
1 for double click
2 for long click

Note: cannot currently get double click to fire","To minimise changes in interface this has added an extra ""type"" parameter to the existing touch event

0 for standard click
1 for double click
2 for long click

Note: cannot currently get double click to fire",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2045,2021-09-09T19:05:19Z,2021-09-13T15:24:53Z,2021-09-13T16:47:22Z,MERGED,True,13,2,1,https://github.com/coylen,Added support for double and long touch gestures on Bangle2,1,[],https://github.com/espruino/Espruino/pull/2045,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2045#issuecomment-918306335,"To minimise changes in interface this has added an extra ""type"" parameter to the existing touch event

0 for standard click
1 for double click
2 for long click

Note: cannot currently get double click to fire",Great - thanks! odd about the double tap. Just a thought but do you think it means a tap with 2 fingers?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2045,2021-09-09T19:05:19Z,2021-09-13T15:24:53Z,2021-09-13T16:47:22Z,MERGED,True,13,2,1,https://github.com/coylen,Added support for double and long touch gestures on Bangle2,1,[],https://github.com/espruino/Espruino/pull/2045,https://github.com/coylen,3,https://github.com/espruino/Espruino/pull/2045#issuecomment-918379332,"To minimise changes in interface this has added an extra ""type"" parameter to the existing touch event

0 for standard click
1 for double click
2 for long click

Note: cannot currently get double click to fire","I had it uploaded onto my watch and tried double click with single finger as well as any other interpretation I could think of, including tap with 2 fingers with no luck.
Can't find any authoritative datasheet on the chip to provide any guidance.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2050,2021-09-25T16:34:25Z,2021-09-25T18:39:25Z,2021-09-25T22:26:32Z,MERGED,True,1,0,1,https://github.com/fanoush,increase TX buffer to 256 for boards with RAM > 128KB,1,[],https://github.com/espruino/Espruino/pull/2050,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2050,"This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?","This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2050,2021-09-25T16:34:25Z,2021-09-25T18:39:25Z,2021-09-25T22:26:32Z,MERGED,True,1,0,1,https://github.com/fanoush,increase TX buffer to 256 for boards with RAM > 128KB,1,[],https://github.com/espruino/Espruino/pull/2050,https://github.com/MaBecker,2,https://github.com/espruino/Espruino/pull/2050#issuecomment-927151681,"This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?",What about the RX buffer?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2050,2021-09-25T16:34:25Z,2021-09-25T18:39:25Z,2021-09-25T22:26:32Z,MERGED,True,1,0,1,https://github.com/fanoush,increase TX buffer to 256 for boards with RAM > 128KB,1,[],https://github.com/espruino/Espruino/pull/2050,https://github.com/MaBecker,3,https://github.com/espruino/Espruino/pull/2050#issuecomment-927151941,"This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?",or bufferSizeIO?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2050,2021-09-25T16:34:25Z,2021-09-25T18:39:25Z,2021-09-25T22:26:32Z,MERGED,True,1,0,1,https://github.com/fanoush,increase TX buffer to 256 for boards with RAM > 128KB,1,[],https://github.com/espruino/Espruino/pull/2050,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2050#issuecomment-927159685,"This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?","good questions but I don't know,  bufferSizeIO is set already to 256 for nrf52 in that file. I'm even not sure this is worth it. However 52840 with 256KB can perhaps have a bit larger IO buffers if it could speed things up.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2050,2021-09-25T16:34:25Z,2021-09-25T18:39:25Z,2021-09-25T22:26:32Z,MERGED,True,1,0,1,https://github.com/fanoush,increase TX buffer to 256 for boards with RAM > 128KB,1,[],https://github.com/espruino/Espruino/pull/2050,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2050#issuecomment-927165643,"This helps on 52840 boards with figuring out MTU over 127 bytes. With current MTU 131 and 127 byte TX buffer the process.env is sent in two chunks, first having 127 bytes due to TX buffer limit so the MTU is guessed to be smaller by 1 byte (see WebIDE console log). With this patch it is guessed as 131-3=128 instead of 127. Not sure whether it is worth it but maybe yes?","I forget but the RX buffer is already 256 x 4 bytes I think, which is the max? I have an open issue for it though as the RX buffer can definitely stored more efficiently than it is right now.
Thanks - good idea about the TX buffer!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2051,2021-09-25T22:24:50Z,2021-09-27T08:35:41Z,2021-09-27T08:35:41Z,MERGED,True,1,1,1,https://github.com/fanoush,fix Uint32Array/Uint24Array when SAVE_ON_FLASH is enabled,1,[],https://github.com/espruino/Espruino/pull/2051,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2051,"fix Uint32Array constructor when SAVE_ON_FLASH is enabled, line was switched with Uint24Array constructor so both worked in wrong way, note the Uint24Array class name :-)
>var a32=new Uint32Array(16)
=Uint32Array: {  }
>var a24=new Uint24Array(16)
=new À�(16)
>a24
=new À�(16)

after fix it is as expected, Uint24Array class and constructor is disabled, Uint32Array works
>var a24=new Uint24Array(10)
Uncaught ReferenceError: ""Uint24Array"" is not defined
 at line 1 col 13
var a24=new Uint24Array(10)
            ^
>var a32=new Uint32Array(10)
=new Uint32Array(10)","fix Uint32Array constructor when SAVE_ON_FLASH is enabled, line was switched with Uint24Array constructor so both worked in wrong way, note the Uint24Array class name :-)
>var a32=new Uint32Array(16)
=Uint32Array: {  }
>var a24=new Uint24Array(16)
=new À�(16)
>a24
=new À�(16)

after fix it is as expected, Uint24Array class and constructor is disabled, Uint32Array works
>var a24=new Uint24Array(10)
Uncaught ReferenceError: ""Uint24Array"" is not defined
 at line 1 col 13
var a24=new Uint24Array(10)
            ^
>var a32=new Uint32Array(10)
=new Uint32Array(10)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2051,2021-09-25T22:24:50Z,2021-09-27T08:35:41Z,2021-09-27T08:35:41Z,MERGED,True,1,1,1,https://github.com/fanoush,fix Uint32Array/Uint24Array when SAVE_ON_FLASH is enabled,1,[],https://github.com/espruino/Espruino/pull/2051,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2051#issuecomment-927651754,"fix Uint32Array constructor when SAVE_ON_FLASH is enabled, line was switched with Uint24Array constructor so both worked in wrong way, note the Uint24Array class name :-)
>var a32=new Uint32Array(16)
=Uint32Array: {  }
>var a24=new Uint24Array(16)
=new À�(16)
>a24
=new À�(16)

after fix it is as expected, Uint24Array class and constructor is disabled, Uint32Array works
>var a24=new Uint24Array(10)
Uncaught ReferenceError: ""Uint24Array"" is not defined
 at line 1 col 13
var a24=new Uint24Array(10)
            ^
>var a32=new Uint32Array(10)
=new Uint32Array(10)","Great, thanks! Sorry, not sure how that got put in by mistake. Copy/paste error I guess!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2052,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2052#issuecomment-927379780,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","BTW, I have few more ram/flash tuning fixes that helps me to trim down nrf51 build size and free some bytes of ram but is not nrf51 specific so it is better to create another PR later(?)

disable USART code when board file has 0 uarts
disable TWI code when board file has 0 i2c
move exportPtrs array to flash, on nrf51 every byte of ram counts (I do have native code enabled and InlineC compiler working on nrf51, it still fits)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2052#issuecomment-927673069,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","Thanks! I'd been hoping to track down the issue with setScan being unreliable on nRF51. __set_BASEPRI(4<<5) was an attempt at just disabling all but the critical softdevice stuff, but sd_nvic_critical_region_enter does look quite promising.
Honestly, it seems to work fine on nRF52 (I haven't seen any instabilities at all?) so I'm not sure about changing it if it's not broken!
Those other RAM/etc changes sound great - so yeah, another PR would be really good.
With the nRF51 hard fault, do you think it's that the M0 can't access unaligned memory? I'd posted above, if the line you've got there tries to align every element it's not something I could include, but we can always do JSVAR_FORCE_16_BYTE and maybe even have an #if ... #error to catch the nRF51 case.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2052#issuecomment-927679288,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","Ok, perfect - thanks for checking! I'm kind of surprised it was never aligned to be honest, but maybe it's -Os.
Thanks for all your work on this - merging now.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/fanoush,5,https://github.com/espruino/Espruino/pull/2052#issuecomment-927680097,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","sd_nvic_critical_region_enter is there just for nrf51 now. It is actually inline code very similar to setbasepri, it is not svc call into softdevice  see https://github.com/espruino/Espruino/blob/master/targetlibs/nrf5x_12/components/softdevice/s132/headers/nrf_nvic.h#L425",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2052,2021-09-26T21:55:59Z,2021-09-27T09:13:03Z,2021-09-27T09:20:26Z,MERGED,True,17,3,3,https://github.com/fanoush,nrf51 fixes,3,[],https://github.com/espruino/Espruino/pull/2052,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/2052#issuecomment-927685009,"compact variables broke cortex M0 build for me, I see hard fault at startup unless the array is aligned, on device with 16K RAM it picks up 12byte variables so otherwise it works, not sure if 32K can still be broken if variables are larger
fds/fstorage takes quite some flash and even nontrivial amount of ram in nrf51 build and is not needed as peer manager is disabled, gives more variables or bigger stack
with _disable_irg() it is quite unstable with heavy bt traffic, seen lockup below when doing NRF.setScan and filling array inside callback. According to https://devzone.nordicsemi.com/f/nordic-q-a/627/what-is-the-easiest-way-to-disable-all-interrupts disabling interrupts like this is asking for trouble, maybe same code would be same/better for nrf52 too?

(gdb) bt
#0  0xfffffffe in ?? ()
#1  <signal handler called>
#2  0x000000fe in ?? ()
#3  <signal handler called>
#4  0x0001be8e in jsvFreePtrInternal (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:548
#5  0x0001c020 in jsvFreePtr (var=0x20002314 <jsVars+516>) at src/jsvar.c:659
#6  jsvUnLockFreeIfNeeded (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:723
#7  0x0001c10a in jsvUnLock (var=var@entry=0x20002314 <jsVars+516>) at src/jsvar.c:735
#8  0x0001c0a6 in jsvFreePtr (var=0x20002260 <jsVars+336>) at src/jsvar.c:642
#9  jsvUnLockFreeIfNeeded (var=0x20002260 <jsVars+336>) at src/jsvar.c:723
#10 0x0001c10a in jsvUnLock (var=<optimized out>) at src/jsvar.c:735
#11 0x0002ecb8 in jsiExecuteEvents () at src/jsinteractive.c:1682
#12 jsiIdle () at src/jsinteractive.c:2204
#13 jsiLoop () at src/jsinteractive.c:2301
#14 main () at targets/nrf5x/main.c:37

(gdb) list *0x1be8e
0x1be8e is in jsvFreePtrInternal (src/jsvar.c:548).
543       jshInterruptOff(); // to allow this to be used from an IRQ
544       jsvSetNextSibling(var, jsVarFirstEmpty);
545       jsVarFirstEmpty = jsvGetRef(var);
546       touchedFreeList = true;
547       jshInterruptOn();
548     }
549
550     ALWAYS_INLINE void jsvFreePtr(JsVar *var) {
551       /* To be here, we're not supposed to be part of anything else. If
552        * we were, we'd have been freed by jsvGarbageCollect */
(gdb) list jshInterruptOff
66        \details Disables IRQ interrupts by setting the I-bit in the CPSR.
67        Can only be executed in Privileged modes.
68       */
69      __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
70      {
71        __ASM volatile (""cpsid i"" : : : ""memory"");
72      }
73","! I'm kind of surprised it was never aligned to be honest

It was aligned before you merged the compact var branch, the JsVar typedef had the aligned attribute before so the array did not need it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2053,2021-09-27T10:31:00Z,2021-09-27T12:54:57Z,2021-09-28T09:53:34Z,MERGED,True,1,1,1,https://github.com/fanoush,move exportPtrs to flash,1,[],https://github.com/espruino/Espruino/pull/2053,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2053,"can be seen that process.env.EXPTR.toString(16) now points to ram, with this patch it points to flash area. currently it saves 0x48 bytes of RAM. In flash it is free to grow in future.
I hope this stuff is supposed to be read only (?) as the entries itself point to flash anyway  - as seen e.g. on  peek32(process.env.EXPTR).toString(16)","can be seen that process.env.EXPTR.toString(16) now points to ram, with this patch it points to flash area. currently it saves 0x48 bytes of RAM. In flash it is free to grow in future.
I hope this stuff is supposed to be read only (?) as the entries itself point to flash anyway  - as seen e.g. on  peek32(process.env.EXPTR).toString(16)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2053,2021-09-27T10:31:00Z,2021-09-27T12:54:57Z,2021-09-28T09:53:34Z,MERGED,True,1,1,1,https://github.com/fanoush,move exportPtrs to flash,1,[],https://github.com/espruino/Espruino/pull/2053,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2053#issuecomment-927739539,"can be seen that process.env.EXPTR.toString(16) now points to ram, with this patch it points to flash area. currently it saves 0x48 bytes of RAM. In flash it is free to grow in future.
I hope this stuff is supposed to be read only (?) as the entries itself point to flash anyway  - as seen e.g. on  peek32(process.env.EXPTR).toString(16)","I have verified that compiled javascript  with this even works on nrf51 (with EspruinoCompiler patch for cortex-m0)
Tried with
function foo(a,b) {
  ""compiled"";
  return a*53 + b*2;
}

So I hope the EXPTR is used in this case.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2053,2021-09-27T10:31:00Z,2021-09-27T12:54:57Z,2021-09-28T09:53:34Z,MERGED,True,1,1,1,https://github.com/fanoush,move exportPtrs to flash,1,[],https://github.com/espruino/Espruino/pull/2053,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2053#issuecomment-927844524,"can be seen that process.env.EXPTR.toString(16) now points to ram, with this patch it points to flash area. currently it saves 0x48 bytes of RAM. In flash it is free to grow in future.
I hope this stuff is supposed to be read only (?) as the entries itself point to flash anyway  - as seen e.g. on  peek32(process.env.EXPTR).toString(16)",This is great - thanks! I obviously hadn't really thought about how const applies in this case. The idea was always for this to go in flash. I wonder if there are any other things like this?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2053,2021-09-27T10:31:00Z,2021-09-27T12:54:57Z,2021-09-28T09:53:34Z,MERGED,True,1,1,1,https://github.com/fanoush,move exportPtrs to flash,1,[],https://github.com/espruino/Espruino/pull/2053,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2053#issuecomment-929036291,"can be seen that process.env.EXPTR.toString(16) now points to ram, with this patch it points to flash area. currently it saves 0x48 bytes of RAM. In flash it is free to grow in future.
I hope this stuff is supposed to be read only (?) as the entries itself point to flash anyway  - as seen e.g. on  peek32(process.env.EXPTR).toString(16)","I wonder if there are any other things like this?

not in Espruino with SAVE_ON_FLASH however most nordic drivers allocate some static data and there is the standard newlib/gcc stuff that runs before the main() and that currently allocates impure_data array of 0x60 size
  2 .data         0000008c  20002c40  0004a530  00042c40  2**2
20002c40 l    d  .data  00000000 .data
20002cc8 l     O .data  00000000 __do_global_dtors_aux_fini_array_entry
20002cc4 l     O .data  00000000 __frame_dummy_init_array_entry
20002c40 l     O .data  00000060 impure_data
20002cc8 l       .data  00000000 __init_array_end
20002cc4 l       .data  00000000 __preinit_array_end
20002cc4 l       .data  00000000 __init_array_start
20002cc4 l       .data  00000000 __preinit_array_start

googled a bit and found this https://devzone.nordicsemi.com/f/nordic-q-a/1520/how-to-get-rid-of-impure_data but did not find a way to trim it down while keeping gcc/newlib startup stuff in.
However I finally gave up with the startup stuff and managed to trim it down by linking with -nostartfiles and renaming main() to _start()
It crashed at startup first but then I let the targetlibs/nrf5x_12/components/toolchain/gcc/gcc_startup_nrf5x.S to clear BSS area (it is turned off by default) and now it seems it was the only thing missing and it looks working :-)
Since the __init_array_start|end appears to be zero there is hopefuly no library code (like printf, softfloats of whatever) that need initialization at startup.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2054,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2054#issuecomment-927847910,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2054#issuecomment-927848860,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","Out of interest, how much space is saved by not including the uart? a lot?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2054#issuecomment-927876727,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","no HW i2c no HW serial
STORAGE: 253952 -> 262144
CODE: 110592 -> 251832 (141240 bytes)
Code area Fits before Storage Area

with 1 usart added +3KB more
STORAGE: 253952 -> 262144
CODE: 110592 -> 255124 (144532 bytes)
==========================
 CODE AND STORAGE OVERLAP
   by 1172 bytes
==========================

with 1 usart + 1 i2c another 2KB
STORAGE: 253952 -> 262144
CODE: 110592 -> 257084 (146492 bytes)
==========================
 CODE AND STORAGE OVERLAP
   by 3132 bytes
==========================


also saves some bytes in RAM - 0x48 less in BSS with no i2c or serial
<   3 .bss          00001298  20002088  0003ecc8  00032088  2**3
---
>   3 .bss          00001250  20002088  0003d840  00032088  2**3

not actually tested with pure software I2C (or SPI) added back",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2054#issuecomment-927881759,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","This is great - thanks! I suppose the area reserved for the FD library is probably in the wrong place to be able to use for anything useful though? :(
I guess it's possible that Storage could be tweaked to allow it to work with non-contiguous pages though...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/2054#issuecomment-927889452,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","previous nrf51-fixes removed that storage code but the board files actually didn't account for it, microbit1 has
  'saved_code' : {
    'address' : ((256 - 2) * 1024),
    'page_size' : 1024,
    'pages' : 2,
    'flash_available' : (256 - 108 - 2) # total flash pages - softdevice - saved code
  }

which I supposed is 2 blocks for Storage module? without PEER_MANAGER no code probably initialized the storage (?) but it was still linked in and took some ram (like ~0x70 bytes) and flash",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2054,2021-09-27T11:12:46Z,2021-09-27T12:58:43Z,2021-11-09T14:54:23Z,MERGED,True,36,3,6,https://github.com/fanoush,allow zero usarts in board file,1,[],https://github.com/espruino/Espruino/pull/2054,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/2054#issuecomment-927893305,"allow 'usart' : 0, in board file, currently it break in several places when building
jsiHandleIOEventForUSART renamed to jsiHandleIOEventForSerial  and kept in as it looks not USART specific(?). If it is really USART specific then it should be #ifdef-ed too but doesn't look like it.
tested by building nrf51 and nrf52 with usart:0 and 1","Ahh, great! So on the microbit it's actually using the 2 pages reserved for FD for storage already. That makes sense thanks - I should have checked :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2056,2021-09-27T14:27:46Z,2021-09-28T08:26:13Z,2021-11-09T14:54:11Z,MERGED,True,19,7,1,https://github.com/fanoush,allow no HW i2c for nrf5x,1,[],https://github.com/espruino/Espruino/pull/2056,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2056,"allow build with  'i2c' : 0, for nrf5x
There already was something in common code so maybe other platforms allow it(?) but it still failed with nrf5x build.
Not actually sure about i2c slave case. It builds fine with i2c count 0 or 1 but I don't know how to enable I2C slave to test.
Not even sure I2c slave has sense to have without having i2c master enabled. I suppose yes as there are own headers and espruino has own device names so I tried those ifdefs to allow i2c slave without having master but it probably needs a test.
Also ifdef-ed ""nrf_drv_spi.h"" here like others. SPI was already possible to be build with zero count.","allow build with  'i2c' : 0, for nrf5x
There already was something in common code so maybe other platforms allow it(?) but it still failed with nrf5x build.
Not actually sure about i2c slave case. It builds fine with i2c count 0 or 1 but I don't know how to enable I2C slave to test.
Not even sure I2c slave has sense to have without having i2c master enabled. I suppose yes as there are own headers and espruino has own device names so I tried those ifdefs to allow i2c slave without having master but it probably needs a test.
Also ifdef-ed ""nrf_drv_spi.h"" here like others. SPI was already possible to be build with zero count.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2056,2021-09-27T14:27:46Z,2021-09-28T08:26:13Z,2021-11-09T14:54:11Z,MERGED,True,19,7,1,https://github.com/fanoush,allow no HW i2c for nrf5x,1,[],https://github.com/espruino/Espruino/pull/2056,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2056#issuecomment-927950430,"allow build with  'i2c' : 0, for nrf5x
There already was something in common code so maybe other platforms allow it(?) but it still failed with nrf5x build.
Not actually sure about i2c slave case. It builds fine with i2c count 0 or 1 but I don't know how to enable I2C slave to test.
Not even sure I2c slave has sense to have without having i2c master enabled. I suppose yes as there are own headers and espruino has own device names so I tried those ifdefs to allow i2c slave without having master but it probably needs a test.
Also ifdef-ed ""nrf_drv_spi.h"" here like others. SPI was already possible to be build with zero count.","btw tested nrf51 build for my board with only HW or SW I2c
no i2c CODE: 110592 -> 251832 (141240 bytes)

only sw i2c CODE: 110592 -> 253260 (142668 bytes)
BSS size 00001250

only hw i2c CODE: 110592 -> 253888 (143296 bytes)
BSS size 00001278

so if software i2c would work for microbit v1 (it is there for V2) it would save few bytes of flash and 0x28 bytes of ram = 3 variables :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2056,2021-09-27T14:27:46Z,2021-09-28T08:26:13Z,2021-11-09T14:54:11Z,MERGED,True,19,7,1,https://github.com/fanoush,allow no HW i2c for nrf5x,1,[],https://github.com/espruino/Espruino/pull/2056,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2056#issuecomment-928970943,"allow build with  'i2c' : 0, for nrf5x
There already was something in common code so maybe other platforms allow it(?) but it still failed with nrf5x build.
Not actually sure about i2c slave case. It builds fine with i2c count 0 or 1 but I don't know how to enable I2C slave to test.
Not even sure I2c slave has sense to have without having i2c master enabled. I suppose yes as there are own headers and espruino has own device names so I tried those ifdefs to allow i2c slave without having master but it probably needs a test.
Also ifdef-ed ""nrf_drv_spi.h"" here like others. SPI was already possible to be build with zero count.","Great - thanks! And yes, I imagine sw I2C should work on the micro:bit - I tend to use it often on other devices for accessing the hardware",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2058,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2058#issuecomment-929165228,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Thanks! Do we know what that impure_data is? I wonder whether it's needed for C++ (tensorflow) or possibly maths, and it might cause build problems for other devices. But then if everything works ok I'm happy to switch over to it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,3,https://github.com/espruino/Espruino/pull/2058#issuecomment-929165751,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","btw recent savings in RAM when compared to 2.10 - 0x180 bss +0x68 data = 384+104= 488 bytes = 40 variables :-)
current value of 350 in microbit build is quite optimistic but at least microbit1 gets more stack
My nrf51 build is back to 300 variables and listing storage via WebIDE works (when arrow functions are enabled)
RELESE_2V10 
$ grep ""\.data.*00"" espruino_2v10_microbit1.lst
  2 .data         00000080  20002008  0003f560  00032008  2**2
20002008 l    d  .data  00000000 .data
20002084 l     O .data  00000000 __do_global_dtors_aux_fini_array_entry
20002080 l     O .data  00000000 __frame_dummy_init_array_entry
20002074 l     O .data  00000004 rand_m_w
20002078 l     O .data  00000004 rand_m_z
20002008 l     O .data  00000060 impure_data
20002084 l       .data  00000000 __init_array_end
20002080 l       .data  00000000 __preinit_array_end
20002080 l       .data  00000000 __init_array_start
20002080 l       .data  00000000 __preinit_array_start
2000206c g     O .data  00000004 .hidden inputLineLength
20002008 g       .data  00000000 __data_start__
2000206a g     O .data  00000001 .hidden consoleDevice
2000207c g     O .data  00000004 SystemCoreClock
20002008 g       .data  00000000 _sdata
20002088 g       .data  00000000 __data_end__
20002070 g     O .data  00000002 .hidden m_peripheral_conn_handle
20002068 g     O .data  00000002 .hidden bleAdvertisingInterval
20002088 g       .data  00000000 _edata
$ grep ""\.bss.*00"" espruino_2v10_microbit1.lst
  5 .bss          000016fc  200020a8  0003f600  000320a8  2**3


LATEST

$ grep ""\.data.*00"" espruino_2v10.70_microbit1.lst
  2 .data         00000018  20002008  0003eaa8  00032008  2**2
20002008 l    d  .data  00000000 .data
20002014 l     O .data  00000004 rand_m_w
20002018 l     O .data  00000004 rand_m_z
2000200c g     O .data  00000004 .hidden inputLineLength
20002008 g       .data  00000000 __data_start__
2000200a g     O .data  00000001 .hidden consoleDevice
2000201c g     O .data  00000004 SystemCoreClock
20002008 g       .data  00000000 _sdata
20002020 g       .data  00000000 __data_end__
20002010 g     O .data  00000002 .hidden m_peripheral_conn_handle
20002008 g     O .data  00000002 .hidden bleAdvertisingInterval
20002020 g       .data  00000000 _edata
$ grep ""\.bss.*00"" espruino_2v10.70_microbit1.lst
  4 .bss          0000157c  20002030  0003ead0  00032030  2**3",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2058#issuecomment-929174676,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Do we know what that impure_data is?

it it related no non-reentrant functions in standard library, see e.g.
https://github.com/eblot/newlib/blob/master/newlib/libc/reent/impure.c#L23
it gets pulled in by gcc startup code, did not find way to avoid it
actually looks more like shutdown code - atexit - https://sourceware.org/legacy-ml/crossgcc/1999-q2/msg00018.html
https://e2e.ti.com/support/tools/code-composer-studio-group/ccs/f/code-composer-studio-forum/881297/ccs-msp430fr6989-gcc-produces-data-impure_data-in-ram-which-i-want-to-get-rid-off",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2058#issuecomment-929233520,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Ok, nice, thanks for looking into it - sounds like it'd be pretty sensible to remove that for everything then?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/2058#issuecomment-931234174,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","it'd be pretty sensible to remove that for everything then?

it is sensible to remove the impure-data if no reentrant newlib method is used, however the only way  I found is to remove gcc startup files via -nostartfiles which breaks any initialization https://gcc.gnu.org/onlinedocs/gccint/Initialization.html unless we reimplement part of it back. So if no library (like tensorflow) uses it (.init,.fini,.ctors,.dtors linker sections) it is OK. Not sure if you would get link errors or the library will silently not initialize when this is missing. However I guess checking size of those linker sections would tell if anything is there.
the newlib specific stuff that the toolchain uses  is described here https://embeddedartistry.com/blog/2019/04/17/exploring-startup-implementations-newlib-arm/",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,7,https://github.com/espruino/Espruino/pull/2058#issuecomment-932889979,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Tried this -nostartfiles with full nrf52 build. It seems to start and run fine and startup is skipped however it still does pull in the impure_data array becasue of global errno variable that gets set from exp() and log() math functions.
Looks like this is documented in both functions as  ""If a domain error occurs, the global variable errno is set to EDOM"".
errno variable usage in math library is mentioned also here https://www.gnu.org/software/libc/manual/html_node/Math-Error-Reporting.html
However  I have finally found pretty good workaround for this - providing replacement errno and exit() method , it didn't work before  and I always got newlib version linked in but after I removed extra -lc -lnosys from Makefile like this
 LDFLAGS += $(OPTIMIZEFLAGS) $(ARCHFLAGS) --specs=nano.specs
# -lc -lnosys

it now links fine and works :-) I'm not sure why you had this extra -lc -lnosys there, the --specs=nano.specs should already provide correct libraries according to the specs file and for me it links fine without it. Anyway with this removed and having simple stubs like below I can even link normal startup code in and the impure_data 0x60 byte structure in RAM is not pulled into build :-)
// __errno pointer getter is referenced from math library functions (exp,log) to set errno variable
int errno;
int *__errno()
{
  // non-reentrant version
  // original returns _impure_ptr->errno
  return &errno;
}

// exit is called from mainCRTStartup() when main() returns
void exit(int code){
  // non-reentrant do nothing version - we have nothing to clean up
  // original calls _impure_ptr->__cleanup
  while(1);
}
can make PR with this. Is it OK to put these stubs to the bottom of targets/nrf5x/main.c?
In fact the same should work also for other targets build by same toolchain - STM32 so maybe there is better place?
I'll try some STM32 build.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/gfwilliams,8,https://github.com/espruino/Espruino/pull/2058#issuecomment-933387996,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","This looks great - thanks for digging in to this!
I think for now it might be better to just restrict this to nRF5x though to avoid any other risks? We can always look at pulling it in in the future.
Part of me wonders whether we shouldn't have a src/fixup.c kind of file with stuff like https://github.com/espruino/Espruino/blob/master/libs/math/jswrap_math.c#L24-L36 in it as well. I feel like there are a few cases where we can tweak/replace existing library functions to save a bunch of space.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/fanoush,9,https://github.com/espruino/Espruino/pull/2058#issuecomment-933446050,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Part of me wonders whether we shouldn't have a src/fixup.c kind of file with stuff like

Yes, good idea, that's same type of stuff indeed.
BTW the -ffreestanding option you used there is interesting and a bit temperamental, it is used in microbit1 build and there it reduces size however I had it enabled for full nrf52 build together with -nostartfiles and the resulting code was actually larger than standard build. after removing it (while keeping -nostartfiles) it went down below the standard build size. Was checking generated code and it was memcpy() - -ffreestanding does not dare to optimize it away. without it it knows what memcpy is and can optimize several cases in nordic BLE libraries where memcpy copies just few bytes, there it is unrolled/inlined todirect mov instructions producing smaller code. in microbit1 case those are probably not included but I guess it allows to call this __aeabi_dsub instead of inlining longer code(?) so size goes down.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2058,2021-09-28T12:17:24Z,2021-09-28T12:31:37Z,2021-11-09T14:53:51Z,MERGED,True,14,3,2,https://github.com/fanoush,use -nostartfiles for microbit1 to save some more RAM,1,[],https://github.com/espruino/Espruino/pull/2058,https://github.com/gfwilliams,10,https://github.com/espruino/Espruino/pull/2058#issuecomment-933454207,"saves 0x60 bytes of ram by removing newlib/gcc impure_data array
btw maybe this could work fine for whole nrf5x?
also bump storage up to 4 pages as recent nrf51 changes made code smaller
there is space for 5 pages now but maybe some extra code could be enabled later (arrow functions, watchdog,..)","Ahh, that's very interesting!
Yes, -ffreestanding was literally just for __aeabi_dsub. It was such a big improvement it seemed worth it, but I wasn't aware of the memcpy optimisations. Makes sense though!
I wish we could replace __aeabi_dsub without  -ffreestanding, but I wasn't able to find a way :(
As an aside, so many of the double maths functions are absolutely massive when there are slower but massively smaller versions available. I had assumed that the --specs=nano.specs would enable something a bit more sensible, but it seems not",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2059,2021-09-28T20:32:55Z,2021-09-29T08:07:12Z,2021-11-09T14:53:34Z,MERGED,True,4,3,1,https://github.com/fanoush,nrf51 - do not care for proper irq on/off call nesting,1,[],https://github.com/espruino/Espruino/pull/2059,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2059,"do not care for balancing of calls and always try to enable interrupts in  jshInterruptOn
with previous code callling twice jshInterruptOff and then twice jshInterruptOn would left interrupts disabled as the region variable would stay at 1, see also #2057","do not care for balancing of calls and always try to enable interrupts in  jshInterruptOn
with previous code callling twice jshInterruptOff and then twice jshInterruptOn would left interrupts disabled as the region variable would stay at 1, see also #2057",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2059,2021-09-28T20:32:55Z,2021-09-29T08:07:12Z,2021-11-09T14:53:34Z,MERGED,True,4,3,1,https://github.com/fanoush,nrf51 - do not care for proper irq on/off call nesting,1,[],https://github.com/espruino/Espruino/pull/2059,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2059#issuecomment-929939706,"do not care for balancing of calls and always try to enable interrupts in  jshInterruptOn
with previous code callling twice jshInterruptOff and then twice jshInterruptOn would left interrupts disabled as the region variable would stay at 1, see also #2057",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2064,2021-10-06T09:14:53Z,2021-10-06T09:17:38Z,2021-10-06T09:17:39Z,MERGED,True,1,1,1,https://github.com/myxor,Fix link to donation page in README,2,[],https://github.com/espruino/Espruino/pull/2064,https://github.com/myxor,1,https://github.com/espruino/Espruino/pull/2064,Fix link to donation page in README,Fix link to donation page in README,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2064,2021-10-06T09:14:53Z,2021-10-06T09:17:38Z,2021-10-06T09:17:39Z,MERGED,True,1,1,1,https://github.com/myxor,Fix link to donation page in README,2,[],https://github.com/espruino/Espruino/pull/2064,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2064#issuecomment-935816927,Fix link to donation page in README,:o Thank you for fixing this!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2069,2021-10-19T07:10:28Z,2021-10-19T07:50:44Z,2021-10-19T07:50:44Z,MERGED,True,1,1,1,https://github.com/myxor,Fix link to donation page in README (again),1,[],https://github.com/espruino/Espruino/pull/2069,https://github.com/myxor,1,https://github.com/espruino/Espruino/pull/2069,"Similar to #2064 :)
@gfwilliams
While looking through the README file i saw that all links to http://www.espruino.com are non-https links. Shouldn't we change that?","Similar to #2064 :)
@gfwilliams
While looking through the README file i saw that all links to http://www.espruino.com are non-https links. Shouldn't we change that?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2069,2021-10-19T07:10:28Z,2021-10-19T07:50:44Z,2021-10-19T07:50:44Z,MERGED,True,1,1,1,https://github.com/myxor,Fix link to donation page in README (again),1,[],https://github.com/espruino/Espruino/pull/2069,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2069#issuecomment-946453508,"Similar to #2064 :)
@gfwilliams
While looking through the README file i saw that all links to http://www.espruino.com are non-https links. Shouldn't we change that?","Thanks! And yes, changing to https might be good... It's not like there's any sensitive info changing hands but it never hurts :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2070,2021-10-19T08:16:41Z,2021-10-19T08:45:55Z,2021-10-19T08:45:56Z,MERGED,True,20,20,1,https://github.com/myxor,Changed espruino.com links to https in README,1,[],https://github.com/espruino/Espruino/pull/2070,https://github.com/myxor,1,https://github.com/espruino/Espruino/pull/2070,Changed espruino.com links to https in README as announced in #2069,Changed espruino.com links to https in README as announced in #2069,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2070,2021-10-19T08:16:41Z,2021-10-19T08:45:55Z,2021-10-19T08:45:56Z,MERGED,True,20,20,1,https://github.com/myxor,Changed espruino.com links to https in README,1,[],https://github.com/espruino/Espruino/pull/2070,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2070#issuecomment-946495564,Changed espruino.com links to https in README as announced in #2069,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2073,2021-10-24T18:51:22Z,2021-10-25T08:35:31Z,2021-10-26T12:30:10Z,MERGED,True,12,4,1,https://github.com/fanoush,erase FDS storage when pm_init() fails,1,[],https://github.com/espruino/Espruino/pull/2073,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2073,"If pm init failed, erase pm/fds storage to prevent reboot loop. This can happen if FDS storage is full.
Happens e.g. when flashing Espruino to device with previously different/larger FDS storage.","If pm init failed, erase pm/fds storage to prevent reboot loop. This can happen if FDS storage is full.
Happens e.g. when flashing Espruino to device with previously different/larger FDS storage.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2073,2021-10-24T18:51:22Z,2021-10-25T08:35:31Z,2021-10-26T12:30:10Z,MERGED,True,12,4,1,https://github.com/fanoush,erase FDS storage when pm_init() fails,1,[],https://github.com/espruino/Espruino/pull/2073,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2073#issuecomment-950667195,"If pm init failed, erase pm/fds storage to prevent reboot loop. This can happen if FDS storage is full.
Happens e.g. when flashing Espruino to device with previously different/larger FDS storage.",That's great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2074,2021-10-24T22:27:06Z,2021-10-25T08:38:52Z,2021-10-26T12:30:33Z,MERGED,True,6,0,1,https://github.com/fanoush,fix SAVE_ON_FLASH build,1,[],https://github.com/espruino/Espruino/pull/2074,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2074,"fixes nrf51/SAVE_ON_FLASH compile errors
btw microbit build still does not build for me as it overlaps by few bytes","fixes nrf51/SAVE_ON_FLASH compile errors
btw microbit build still does not build for me as it overlaps by few bytes",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2074,2021-10-24T22:27:06Z,2021-10-25T08:38:52Z,2021-10-26T12:30:33Z,MERGED,True,6,0,1,https://github.com/fanoush,fix SAVE_ON_FLASH build,1,[],https://github.com/espruino/Espruino/pull/2074,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2074#issuecomment-950614502,"fixes nrf51/SAVE_ON_FLASH compile errors
btw microbit build still does not build for me as it overlaps by few bytes","Oh the microbit1 size is compiler thing, I am using ARM's 10-2020-q4 now and it is too large with that one, just retried with 8-2019-q3 and it fits in current state.
However the stuff discussed in #2058 helps with gcc 10 but breaks gcc 8
I mean removing  -lc -lnosys from Makefile - that works with 10 and with stubs for exit() and with removed -ffreestanding it is smaller so the build works too but it breaks gcc 8, that one requires -lc -lnosys and -ffreeestanding to build.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2074,2021-10-24T22:27:06Z,2021-10-25T08:38:52Z,2021-10-26T12:30:33Z,MERGED,True,6,0,1,https://github.com/fanoush,fix SAVE_ON_FLASH build,1,[],https://github.com/espruino/Espruino/pull/2074,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2074#issuecomment-950670295,"fixes nrf51/SAVE_ON_FLASH compile errors
btw microbit build still does not build for me as it overlaps by few bytes","Argh, sorry about that. Thanks for this!
I think for now we really want to stay compatible with GCC 8 since it seems to do so much better size-wise. It seems every year or so I have to brute-force check every single GCC compiler version until I find a new one that gets the lowest code size :(",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2079,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2079#issuecomment-953835536,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","BTW this recently added feature is great and fixes issue #1899 , few comments

what about drive names I: and E: (internal, external) or even setting them in board file (drive,drive2 near the address,address2)
drive names could be case insensitive
getFree() now returns value for SPI flash so you don't know how much is free in internal - optional drive parameter?
compact or eraseall could take drive parameter too to not clear both",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2079#issuecomment-953900855,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","Nice - thanks!
I was torn about the drive names - I figured C: was always the 'internal' drive on PCs, which is why I used it :)
I think the drive name is probably something that will only really get used internally so maybe case sensitivity isn't a worry (files are case sensitive anyway).
And yes, I was wondering about compact/erase/free. It does make everything a bit more tricky.
One easy addition would be making sure that the compact that happens when trying to write a file only happens to the relevant bank though",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2079#issuecomment-953956888,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","oh, it is still broken/inconsistent. C: now works but did you allow ':' in filenames before? The jsfCreateFile now always strips any letter from filename so D:xx becomes xx. so now when uploading  via webide  and naming file x:xxx it does not work. Do you think ""x:name"" should be equal to ""name"" for any x? may break backwards compatibility.
I'd prefer jsfCreateFile to strip only if it is exactly 'C:' and second bank is defined. Or this PR is wrong. So which way?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2079#issuecomment-954510117,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","Just a note on this here: #2080 (comment)
Because of the app loader, I'd like to treat C: as a hint - so it gets ignored if there's no second bank.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2079,2021-10-28T13:10:04Z,2021-10-28T14:26:24Z,2021-10-29T08:05:07Z,MERGED,True,7,0,1,https://github.com/fanoush,allow jsfFindFile to find existing file with C: drive prefix,1,[],https://github.com/espruino/Espruino/pull/2079,https://github.com/fanoush,6,https://github.com/espruino/Espruino/pull/2079#issuecomment-954524937,"this also fixes uploading from webide to file named C:file when file has multiple segments (= write is  called multiple times with prefixed name)
not sure about that jsfNameFromString(&name.c[2]), is name.c zero terminated?","ok, so I'll try to fix this one to strip also other drive letters.
current version is still better than it was before i.e. uploading from IDE works at least for C:file1 but I'll get it working with x;file2 too.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2080,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise","only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2080#issuecomment-954024336,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise","Oh, and BTW was playing a bit more with it and uploaded few files to both storage locations and after calling compact I see area 0x26000 to 0x27000 (=begining of application) erased. Softdevice is still there. Maybe some misconfiguration but cannot find it.  I hope you are not seeing this. It happens repeatedly.
these appear to be generated correctly
#define FLASH_SAVED_CODE_START            434176
#define FLASH_SAVED_CODE_LENGTH           573440
// Extra flash pages in external flash
#define FLASH_SAVED_CODE2_START            1610612736
#define FLASH_SAVED_CODE2_LENGTH           4194304",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/fanoush,3,https://github.com/espruino/Espruino/pull/2080#issuecomment-954050939,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise","Oh, well, I've put
  extern uint32_t LINKER_ETEXT_VAR; // end of flash text (binary) section
  if (addr<&LINKER_ETEXT_VAR) return true;

into bool jshFlashWriteProtect and put logging into jshFlashErasePage and see
>
>var s=require(""Storage"")
=function () { [native code] }
>s.compact()
jshFlashErasePage protected page 0x0
jshFlashErasePage protected page 0x1000
jshFlashErasePage protected page 0x2000
jshFlashErasePage protected page 0x3000
jshFlashErasePage protected page 0x4000
jshFlashErasePage protected page 0x5000
jshFlashErasePage protected page 0x6000
jshFlashErasePage protected page 0x7000
jshFlashErasePage protected page 0x8000
jshFlashErasePage protected page 0x9000
jshFlashErasePage protected page 0xa000
jshFlashErasePage protected page 0xb000
jshFlashErasePage protected page 0xc000
jshFlashErasePage protected page 0xd000
jshFlashErasePage protected page 0xe000
...

so looks like softdevice protects itself somehow and there is 0 somewhere received as erase address.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/fanoush,4,https://github.com/espruino/Espruino/pull/2080#issuecomment-954075646,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise","got it - sort of, it is this line
https://github.com/espruino/Espruino/blob/master/src/jsflash.c#L408
for some reason I get zero here and next line erases everything, quick if (writeAddress) fix stops it from happening.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/fanoush,5,https://github.com/espruino/Espruino/pull/2080#issuecomment-954091753,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise",Just a guess - if bank is empty with no files then there is nothing to do (?) and writeAddress stays at startAddress and then startAddress-1 may not belong to any bank giving 0.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2080#issuecomment-954509141,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise","Hi! I think we should keep the x: stripping in for all devices. My main reasoning is original Bangle.js probably won't ever have the second bank as there's not enough flash - but the app loader may at some point like to be able to hint that a file should go in faster storage, and shouldn't have to care.
x: files were allowed before, but I haven't seen anyone using them, and I think they could probably manage to change :)
The compact error sounds bad though. I'll look into it - does it always happen?
The compact shouldn't actually happen if the data is already fully compacted? So not sure what's going on there.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2080,2021-10-28T15:51:50Z,2021-10-29T07:52:47Z,2021-10-29T07:52:47Z,CLOSED,False,5,4,1,https://github.com/fanoush,make jsfCreateFile consistent with jsfFindFile,2,[],https://github.com/espruino/Espruino/pull/2080,https://github.com/gfwilliams,7,https://github.com/espruino/Espruino/pull/2080#issuecomment-954510414,"only 'C:' is stripped and only when second bank is defined
as per comment #2079 (comment)
disregard if you prefer otherwise",Moving discussion on the compact error to #2081,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2083,2021-10-29T16:18:29Z,2021-11-01T08:46:18Z,2021-11-01T08:46:18Z,MERGED,True,22,16,5,https://github.com/rigrig,Bangle.js: add `wrap` option for numerical E.showMenu items,1,[],https://github.com/espruino/Espruino/pull/2083,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2083,"Same as EspruinoDocs graphical_menu.js: espruino/EspruinoDocs#614
I just realized maybe instead of
if (item.min!==undefined && item.value<item.min)
  item.value = (item.wrap && item.max!==undefined) ? item.max : item.min;
it would be better to just do
if (item.min!==undefined && item.value<item.min)
  item.value = item.wrap ? item.max : item.min;
Either way your menu won't work properly if you specify wrap without also both min and max, but this way saves a few bytes.","Same as EspruinoDocs graphical_menu.js: espruino/EspruinoDocs#614
I just realized maybe instead of
if (item.min!==undefined && item.value<item.min)
  item.value = (item.wrap && item.max!==undefined) ? item.max : item.min;
it would be better to just do
if (item.min!==undefined && item.value<item.min)
  item.value = item.wrap ? item.max : item.min;
Either way your menu won't work properly if you specify wrap without also both min and max, but this way saves a few bytes.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2083,2021-10-29T16:18:29Z,2021-11-01T08:46:18Z,2021-11-01T08:46:18Z,MERGED,True,22,16,5,https://github.com/rigrig,Bangle.js: add `wrap` option for numerical E.showMenu items,1,[],https://github.com/espruino/Espruino/pull/2083,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2083#issuecomment-956043728,"Same as EspruinoDocs graphical_menu.js: espruino/EspruinoDocs#614
I just realized maybe instead of
if (item.min!==undefined && item.value<item.min)
  item.value = (item.wrap && item.max!==undefined) ? item.max : item.min;
it would be better to just do
if (item.min!==undefined && item.value<item.min)
  item.value = item.wrap ? item.max : item.min;
Either way your menu won't work properly if you specify wrap without also both min and max, but this way saves a few bytes.",Great - thanks! Good point about the rollover check - very happy to have that change if you want it in,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2085,2021-11-01T18:45:02Z,2021-11-02T08:21:57Z,2021-11-02T08:21:57Z,MERGED,True,16,28,5,https://github.com/rigrig,E_showMenu improvements,1,[],https://github.com/espruino/Espruino/pull/2085,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2085,"Same as espruino/EspruinoDocs#616

remove unused variable
remove unused parameter from select()
shave a few bytes off move()

If a numerical item has item.wrap we no longer check if item.min/max is set,
because your menu will be broken either way.","Same as espruino/EspruinoDocs#616

remove unused variable
remove unused parameter from select()
shave a few bytes off move()

If a numerical item has item.wrap we no longer check if item.min/max is set,
because your menu will be broken either way.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2085,2021-11-01T18:45:02Z,2021-11-02T08:21:57Z,2021-11-02T08:21:57Z,MERGED,True,16,28,5,https://github.com/rigrig,E_showMenu improvements,1,[],https://github.com/espruino/Espruino/pull/2085,https://github.com/rigrig,2,https://github.com/espruino/Espruino/pull/2085#issuecomment-956493806,"Same as espruino/EspruinoDocs#616

remove unused variable
remove unused parameter from select()
shave a few bytes off move()

If a numerical item has item.wrap we no longer check if item.min/max is set,
because your menu will be broken either way.",Is E_showMenu_F5.js actually used? I noticed that the minified version isn't in the repo.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2085,2021-11-01T18:45:02Z,2021-11-02T08:21:57Z,2021-11-02T08:21:57Z,MERGED,True,16,28,5,https://github.com/rigrig,E_showMenu improvements,1,[],https://github.com/espruino/Espruino/pull/2085,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2085#issuecomment-957194666,"Same as espruino/EspruinoDocs#616

remove unused variable
remove unused parameter from select()
shave a few bytes off move()

If a numerical item has item.wrap we no longer check if item.min/max is set,
because your menu will be broken either way.","Is E_showMenu_F5.js actually used?

Yes and no... There's a build file for the DT No.1 F5 watch, but I haven't actually built in some time.
Builds can (and sometimes do) use the unminified version if I'm not too bothered about space/speed.
I've just got 10 or 20 of the F5 sitting here from when I was considering it for Bangle.js 1, and I feel like at some point I should use them for something. But it's definitely super low priority so I wouldn't waste much time making improvements to the F5 showmenu :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2088,2021-11-03T22:52:48Z,2021-11-04T08:19:15Z,2021-11-09T14:52:35Z,MERGED,True,13,6,1,https://github.com/fanoush,make jsfFindFile consistent with jsfCreateFile = always strip drive letter,1,[],https://github.com/espruino/Espruino/pull/2088,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2088,"also fix jsfCreateFile - shifting name duplicated last two letters for longest (28 chars) name, clear that space","also fix jsfCreateFile - shifting name duplicated last two letters for longest (28 chars) name, clear that space",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2088,2021-11-03T22:52:48Z,2021-11-04T08:19:15Z,2021-11-09T14:52:35Z,MERGED,True,13,6,1,https://github.com/fanoush,make jsfFindFile consistent with jsfCreateFile = always strip drive letter,1,[],https://github.com/espruino/Espruino/pull/2088,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2088#issuecomment-960267381,"also fix jsfCreateFile - shifting name duplicated last two letters for longest (28 chars) name, clear that space","As discussed in #2079 it is preferred way to strip drive letter always so also any ""x:file"" becomes ""file"".
BTW I realized that JsfFileName union is passed by value (all 28 bytes) so actually I don't need to make copy as original caller value is not modified. This came as a surprise to me, passing such arrays by value does extra copies. Even the jsfNameFromString returns JsfFileName by value so the memory is copied twice and generated code is larger but I guess simplicity and readability is worth it.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2088,2021-11-03T22:52:48Z,2021-11-04T08:19:15Z,2021-11-09T14:52:35Z,MERGED,True,13,6,1,https://github.com/fanoush,make jsfFindFile consistent with jsfCreateFile = always strip drive letter,1,[],https://github.com/espruino/Espruino/pull/2088,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2088#issuecomment-960542115,"also fix jsfCreateFile - shifting name duplicated last two letters for longest (28 chars) name, clear that space","Hi - thanks! Yes, the copy by value was intentional. It's not like it gets passed around much so it's not a performance impact, and as you say it's a little more readable. If it hits the flash memory usage hard it's something we could look at changing, but my gut feel was that it shouldn't.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2091,2021-11-06T16:13:01Z,2021-11-08T09:23:29Z,2021-11-09T14:52:54Z,MERGED,True,50,25,1,https://github.com/fanoush,jsfWriteFile - prevent duplicate file creation in internal bank when already present in external,3,[],https://github.com/espruino/Espruino/pull/2091,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2091,"when drive is specified (C:xxx) prefer existing file in different bank instead of creating duplicate in C:. Without this second file is created in internal flash when same name already exists in external flash. and list() gives two same files.
also added methods for stripping drive letter from name and determining bank based on drive to simplify and remove duplicated drive letter code

with two banks jsfFindFile for ""C:xxx"" will search only C. File is not found when in external flash. I think it good to have it like that so that you can determine where the file really is by require(""Storage"").read(""C:xxx"") giving undefined when it is not in internal flash. However in jsfWriteFile it is better to relax this and use existing file in other bank to prevent file duplication.
feel free to shuffle/rename stuff if it not named correctly.
also alternative in jsfWriteFile could be to erase file in wrong location and let it create new one instead of using existing one but that felt more complicated to me. But maybe it would make more sense?","when drive is specified (C:xxx) prefer existing file in different bank instead of creating duplicate in C:. Without this second file is created in internal flash when same name already exists in external flash. and list() gives two same files.
also added methods for stripping drive letter from name and determining bank based on drive to simplify and remove duplicated drive letter code

with two banks jsfFindFile for ""C:xxx"" will search only C. File is not found when in external flash. I think it good to have it like that so that you can determine where the file really is by require(""Storage"").read(""C:xxx"") giving undefined when it is not in internal flash. However in jsfWriteFile it is better to relax this and use existing file in other bank to prevent file duplication.
feel free to shuffle/rename stuff if it not named correctly.
also alternative in jsfWriteFile could be to erase file in wrong location and let it create new one instead of using existing one but that felt more complicated to me. But maybe it would make more sense?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2091,2021-11-06T16:13:01Z,2021-11-08T09:23:29Z,2021-11-09T14:52:54Z,MERGED,True,50,25,1,https://github.com/fanoush,jsfWriteFile - prevent duplicate file creation in internal bank when already present in external,3,[],https://github.com/espruino/Espruino/pull/2091,https://github.com/fanoush,2,https://github.com/espruino/Espruino/pull/2091#issuecomment-962507517,"when drive is specified (C:xxx) prefer existing file in different bank instead of creating duplicate in C:. Without this second file is created in internal flash when same name already exists in external flash. and list() gives two same files.
also added methods for stripping drive letter from name and determining bank based on drive to simplify and remove duplicated drive letter code

with two banks jsfFindFile for ""C:xxx"" will search only C. File is not found when in external flash. I think it good to have it like that so that you can determine where the file really is by require(""Storage"").read(""C:xxx"") giving undefined when it is not in internal flash. However in jsfWriteFile it is better to relax this and use existing file in other bank to prevent file duplication.
feel free to shuffle/rename stuff if it not named correctly.
also alternative in jsfWriteFile could be to erase file in wrong location and let it create new one instead of using existing one but that felt more complicated to me. But maybe it would make more sense?","second idea - erasing file in wrong bank seem to be much better, this way file gets created where it belongs",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2091,2021-11-06T16:13:01Z,2021-11-08T09:23:29Z,2021-11-09T14:52:54Z,MERGED,True,50,25,1,https://github.com/fanoush,jsfWriteFile - prevent duplicate file creation in internal bank when already present in external,3,[],https://github.com/espruino/Espruino/pull/2091,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2091#issuecomment-962960882,"when drive is specified (C:xxx) prefer existing file in different bank instead of creating duplicate in C:. Without this second file is created in internal flash when same name already exists in external flash. and list() gives two same files.
also added methods for stripping drive letter from name and determining bank based on drive to simplify and remove duplicated drive letter code

with two banks jsfFindFile for ""C:xxx"" will search only C. File is not found when in external flash. I think it good to have it like that so that you can determine where the file really is by require(""Storage"").read(""C:xxx"") giving undefined when it is not in internal flash. However in jsfWriteFile it is better to relax this and use existing file in other bank to prevent file duplication.
feel free to shuffle/rename stuff if it not named correctly.
also alternative in jsfWriteFile could be to erase file in wrong location and let it create new one instead of using existing one but that felt more complicated to me. But maybe it would make more sense?","Thanks! Yes, that sounds good.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2099,2021-11-19T09:18:59Z,2021-11-19T11:13:44Z,2021-11-19T11:13:44Z,MERGED,True,60,4,2,https://github.com/fanoush,"stm32 allow no HW uart,spi,i2c",1,[],https://github.com/espruino/Espruino/pull/2099,https://github.com/fanoush,1,https://github.com/espruino/Espruino/pull/2099,"allow STM32 uart,spi,i2c count to be configurable including 0
tested on STM32F103 ($2 STLink V2 clone dongle with F103 inside)
BTW what is targets/stm32_ll ? looks like more or less a copy of targets/stm32 , is it still used?","allow STM32 uart,spi,i2c count to be configurable including 0
tested on STM32F103 ($2 STLink V2 clone dongle with F103 inside)
BTW what is targets/stm32_ll ? looks like more or less a copy of targets/stm32 , is it still used?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2099,2021-11-19T09:18:59Z,2021-11-19T11:13:44Z,2021-11-19T11:13:44Z,MERGED,True,60,4,2,https://github.com/fanoush,"stm32 allow no HW uart,spi,i2c",1,[],https://github.com/espruino/Espruino/pull/2099,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2099#issuecomment-973982799,"allow STM32 uart,spi,i2c count to be configurable including 0
tested on STM32F103 ($2 STLink V2 clone dongle with F103 inside)
BTW what is targets/stm32_ll ? looks like more or less a copy of targets/stm32 , is it still used?","Nice - thanks!
targets/stm32_ll is ST's attempt at porting to their new HAL layer for STM32L4. Rather than just modify the existing one they copied the whole thing, which obviously makes tweaking stuff a total nightmare now :( It'd be great to be able to merge back in but I'm unsure how hard that'd be",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2129,2022-01-21T15:52:53Z,2022-01-24T13:48:47Z,2022-01-24T13:48:47Z,MERGED,True,3,3,1,https://github.com/yerpj,Update NRF_Bootloader.md,1,[],https://github.com/espruino/Espruino/pull/2129,https://github.com/yerpj,1,https://github.com/espruino/Espruino/pull/2129,"Following current BOARD=xxx syntax, right?","Following current BOARD=xxx syntax, right?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2129,2022-01-21T15:52:53Z,2022-01-24T13:48:47Z,2022-01-24T13:48:47Z,MERGED,True,3,3,1,https://github.com/yerpj,Update NRF_Bootloader.md,1,[],https://github.com/espruino/Espruino/pull/2129,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2129#issuecomment-1020119662,"Following current BOARD=xxx syntax, right?",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2131,2022-01-25T11:48:47Z,2022-01-25T13:24:23Z,2022-01-25T13:24:23Z,MERGED,True,1,0,1,https://github.com/jes,Exit on Ctrl-D (#2032),1,[],https://github.com/espruino/Espruino/pull/2131,https://github.com/jes,1,https://github.com/espruino/Espruino/pull/2131,"This makes the REPL exit as soon as you type Ctrl-D, as per #2032.
Making it look for end-of-file is more annoying than expected since it puts the terminal in raw mode, and getch() currently does the wrong thing if read() returns 0.
I thought the simplest fix was just to explicitly check for Ctrl-D, but maybe something else is better?","This makes the REPL exit as soon as you type Ctrl-D, as per #2032.
Making it look for end-of-file is more annoying than expected since it puts the terminal in raw mode, and getch() currently does the wrong thing if read() returns 0.
I thought the simplest fix was just to explicitly check for Ctrl-D, but maybe something else is better?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2131,2022-01-25T11:48:47Z,2022-01-25T13:24:23Z,2022-01-25T13:24:23Z,MERGED,True,1,0,1,https://github.com/jes,Exit on Ctrl-D (#2032),1,[],https://github.com/espruino/Espruino/pull/2131,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2131#issuecomment-1021179518,"This makes the REPL exit as soon as you type Ctrl-D, as per #2032.
Making it look for end-of-file is more annoying than expected since it puts the terminal in raw mode, and getch() currently does the wrong thing if read() returns 0.
I thought the simplest fix was just to explicitly check for Ctrl-D, but maybe something else is better?","Awesome, thanks! This is a far nicer solution to #2032",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2133,2022-01-28T11:11:20Z,2022-01-28T11:11:24Z,2022-01-28T11:11:24Z,MERGED,True,3,2,1,https://github.com/gfwilliams,Fix menu arrow behaviour (fix https://github.com/espruino/Espruino/issues/2104),1,[],https://github.com/espruino/Espruino/pull/2133,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/2133,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2134,2022-01-28T11:28:38Z,2022-01-28T11:57:30Z,2022-01-28T11:57:30Z,MERGED,True,1,1,1,https://github.com/jes,Fix menu arrow behaviour on Bangle.js 1,1,[],https://github.com/espruino/Espruino/pull/2134,https://github.com/jes,1,https://github.com/espruino/Espruino/pull/2134,"This is the same as #2133 but for Bangle.js 1.
First reported in #2104.","This is the same as #2133 but for Bangle.js 1.
First reported in #2104.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2134,2022-01-28T11:28:38Z,2022-01-28T11:57:30Z,2022-01-28T11:57:30Z,MERGED,True,1,1,1,https://github.com/jes,Fix menu arrow behaviour on Bangle.js 1,1,[],https://github.com/espruino/Espruino/pull/2134,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2134#issuecomment-1024146091,"This is the same as #2133 but for Bangle.js 1.
First reported in #2104.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2135,2022-01-29T14:25:21Z,2022-01-31T09:54:05Z,2022-01-31T09:54:06Z,MERGED,True,17,2,1,https://github.com/jeffmer,Ad DC Filter to step counter,1,[],https://github.com/espruino/Espruino/pull/2135,https://github.com/jeffmer,1,https://github.com/espruino/Espruino/pull/2135,As discussed extensively in the forum at Better Pedometer - HELP NEEDED! and at @hughb 's suggestion this is to update stepcount.c with the DCFilter. No worries if you think this is premature and needs further testing.,As discussed extensively in the forum at Better Pedometer - HELP NEEDED! and at @hughb 's suggestion this is to update stepcount.c with the DCFilter. No worries if you think this is premature and needs further testing.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2135,2022-01-29T14:25:21Z,2022-01-31T09:54:05Z,2022-01-31T09:54:06Z,MERGED,True,17,2,1,https://github.com/jeffmer,Ad DC Filter to step counter,1,[],https://github.com/espruino/Espruino/pull/2135,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2135#issuecomment-1025556360,As discussed extensively in the forum at Better Pedometer - HELP NEEDED! and at @hughb 's suggestion this is to update stepcount.c with the DCFilter. No worries if you think this is premature and needs further testing.,Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2158,2022-02-22T15:57:33Z,2022-02-22T16:16:31Z,2022-02-22T16:16:31Z,MERGED,True,2,2,1,https://github.com/andrewgoz,Update Bangle_setUI_F18.js,1,[],https://github.com/espruino/Espruino/pull/2158,https://github.com/andrewgoz,1,https://github.com/espruino/Espruino/pull/2158,"UI select only when button is released, not pressed.
Fix for #2154","UI select only when button is released, not pressed.
Fix for #2154",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2158,2022-02-22T15:57:33Z,2022-02-22T16:16:31Z,2022-02-22T16:16:31Z,MERGED,True,2,2,1,https://github.com/andrewgoz,Update Bangle_setUI_F18.js,1,[],https://github.com/espruino/Espruino/pull/2158,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2158#issuecomment-1047962497,"UI select only when button is released, not pressed.
Fix for #2154",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/andrewgoz,1,https://github.com/espruino/Espruino/pull/2159,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153","Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2159#issuecomment-1048913477,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",Thanks - although it looks like scroll is now a function? If you assigned that through then I don't think it'd work,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/andrewgoz,3,https://github.com/espruino/Espruino/pull/2159#issuecomment-1049461657,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",For some reason my head said scroll needed to be a function. It's now back to being a property.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2159#issuecomment-1050629584,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",Thanks! You think this is ready for merging?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/andrewgoz,5,https://github.com/espruino/Espruino/pull/2159#issuecomment-1052198176,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",Now that I've fixed some arrow drawing issues I think it's all good.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2159,2022-02-23T13:37:58Z,2022-02-28T10:12:57Z,2022-02-28T10:12:57Z,MERGED,True,50,33,1,https://github.com/andrewgoz,Update E_showScroller.js,9,[],https://github.com/espruino/Espruino/pull/2159,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2159#issuecomment-1054096050,"Respect Bangle.appRect
Only draw arrows when needed
Prefer to draw selection in middle of screen
Implement scroll function
Pass selected flag to draw function
Make selection box drawing optional
Fixes #2153",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2162,2022-03-02T14:27:28Z,2022-03-02T14:27:34Z,2022-03-02T14:27:34Z,MERGED,True,121,55,5,https://github.com/gfwilliams,Move from Travis CI to GitHub Actions for builds,8,[],https://github.com/espruino/Espruino/pull/2162,https://github.com/gfwilliams,1,https://github.com/espruino/Espruino/pull/2162,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,1,https://github.com/espruino/Espruino/pull/2165,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,2,https://github.com/espruino/Espruino/pull/2165#issuecomment-1059419164,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5",yea there still need work to be done,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2165#issuecomment-1060828386,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","yea there still need work to be done

Thanks! So where are we at with this? Does it build and work ok for those test scripts?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,4,https://github.com/espruino/Espruino/pull/2165#issuecomment-1060870071,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","the problem  im running into is,
the encrypted data being generated from mbedtls is not verifyable (it can decrypt it, but the gcm tag is invalid causing a failed decryption )..
but encrypted data from  webcrypt/browser is verifyable in mbed tls",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,5,https://github.com/espruino/Espruino/pull/2165#issuecomment-1060873411,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","SIDE note,  so instead of hunting down the issue on that yesterday.. i coded up ECDH
https://gist.github.com/bmatusiak/a1ac4b31cf5fd4c2c4ac2a9b0fd377ff",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,6,https://github.com/espruino/Espruino/pull/2165#issuecomment-1061974354,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","ok i fixed gcm encrypt auth tag
all thats left is importing ""additional data""",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2165,2022-03-04T17:16:47Z,,2022-03-10T11:11:27Z,OPEN,False,135,25,1,https://github.com/bmatusiak,added aes-gcm,7,[],https://github.com/espruino/Espruino/pull/2165,https://github.com/bmatusiak,7,https://github.com/espruino/Espruino/pull/2165#issuecomment-1063181328,"this need testing,
but here in a test scripts for espruino and browser
https://gist.github.com/bmatusiak/c4517056a93f96ea904e85b7f5c0ddb5","I changed IV to be a variable length, 16 = {0} is default(for all modes)
added additionalData and tagLength options
var opts = {
        iv: new Uint8Array(16),
        mode: 'GCM',
        additionalData: new Uint8Array( ), //GCM max length AddData is 18446744073709551615 
        tagLength:128, // in bit size (128=16bytes)
    };",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2168,2022-03-12T20:34:56Z,2022-03-14T11:40:45Z,2022-03-14T15:02:31Z,MERGED,True,4,0,1,https://github.com/rigrig,Bangle.js2: clean up setUI custom swipeHandler,1,[],https://github.com/espruino/Espruino/pull/2168,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2168,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2168,2022-03-12T20:34:56Z,2022-03-14T11:40:45Z,2022-03-14T15:02:31Z,MERGED,True,4,0,1,https://github.com/rigrig,Bangle.js2: clean up setUI custom swipeHandler,1,[],https://github.com/espruino/Espruino/pull/2168,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2168#issuecomment-1066683211,,Eep - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2169,2022-03-13T14:47:28Z,2022-03-14T11:06:37Z,2022-03-14T15:02:19Z,CLOSED,False,1,5,1,https://github.com/rigrig,"Bangle.js2: don't make setUI go ""back"" on button press",1,[],https://github.com/espruino/Espruino/pull/2169,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2169,"Not sure if this was the intended behavior, but I think it works better without it: I like having the ""back"" widget, but do want to use the button for something else.","Not sure if this was the intended behavior, but I think it works better without it: I like having the ""back"" widget, but do want to use the button for something else.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2169,2022-03-13T14:47:28Z,2022-03-14T11:06:37Z,2022-03-14T15:02:19Z,CLOSED,False,1,5,1,https://github.com/rigrig,"Bangle.js2: don't make setUI go ""back"" on button press",1,[],https://github.com/espruino/Espruino/pull/2169,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2169#issuecomment-1066650348,"Not sure if this was the intended behavior, but I think it works better without it: I like having the ""back"" widget, but do want to use the button for something else.","Yes, this was the intended behaviour, as I've had several people (Bip users?) expecting that they can always press the button to go back.
I think longer term we should probably have a setting for this though as I think some people will also want to be able to do it via a swipe",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2169,2022-03-13T14:47:28Z,2022-03-14T11:06:37Z,2022-03-14T15:02:19Z,CLOSED,False,1,5,1,https://github.com/rigrig,"Bangle.js2: don't make setUI go ""back"" on button press",1,[],https://github.com/espruino/Espruino/pull/2169,https://github.com/rigrig,3,https://github.com/espruino/Espruino/pull/2169#issuecomment-1066702339,"Not sure if this was the intended behavior, but I think it works better without it: I like having the ""back"" widget, but do want to use the button for something else.","Yes, this was the intended behaviour, as I've had several people (Bip users?) expecting that they can always press the button to go back.

Well, I guess it is good to be consistent. And it does simplify things a bit to just never use the button as input if there is a back option.
In that case, maybe it should not set a button watcher if options.back is present?

I think some people will also want to be able to do it via a swipe

Yeah, I was actually already adding swipe left-ro-right for back myself, so that would be nice.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2170,2022-03-13T20:59:14Z,2022-03-14T14:05:40Z,2022-03-14T15:01:59Z,CLOSED,False,4,4,1,https://github.com/rigrig,Bangle.js2: make setUI ignore touches in widgetbar,1,[],https://github.com/espruino/Espruino/pull/2170,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2170,"Mostly because the ""back"" button lives there.
Maybe we should do it right and add checks for the entire appRect right away?","Mostly because the ""back"" button lives there.
Maybe we should do it right and add checks for the entire appRect right away?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2170,2022-03-13T20:59:14Z,2022-03-14T14:05:40Z,2022-03-14T15:01:59Z,CLOSED,False,4,4,1,https://github.com/rigrig,Bangle.js2: make setUI ignore touches in widgetbar,1,[],https://github.com/espruino/Espruino/pull/2170,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2170#issuecomment-1066700270,"Mostly because the ""back"" button lives there.
Maybe we should do it right and add checks for the entire appRect right away?","Do you think this might make it harder to select some things? I think if someone's selecting something - especially in the launcher - near the top of the screen, the reported touch coordinates might actually go into the widget area?
Have you hit issues with pressing the back button actually firing an event off? Because maybe we should actually just try and get the back touch event handler executed first, and then ignore the touch event if it was pressed?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2170,2022-03-13T20:59:14Z,2022-03-14T14:05:40Z,2022-03-14T15:01:59Z,CLOSED,False,4,4,1,https://github.com/rigrig,Bangle.js2: make setUI ignore touches in widgetbar,1,[],https://github.com/espruino/Espruino/pull/2170,https://github.com/rigrig,3,https://github.com/espruino/Espruino/pull/2170#issuecomment-1066742020,"Mostly because the ""back"" button lives there.
Maybe we should do it right and add checks for the entire appRect right away?","Have you hit issues with pressing the back button actually firing an event off?

Yes, using code like this:
Bangle.setUI({
    mode: ""updown"",
    back: goBack(),
  }, ud => {
    if (!ud) doSomething();
  });
Touching the back button fires both goBack() and doSomething()
We also have e.g. the messages widget listening for touches, so I figured excluding the whole bar would be best.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2170,2022-03-13T20:59:14Z,2022-03-14T14:05:40Z,2022-03-14T15:01:59Z,CLOSED,False,4,4,1,https://github.com/rigrig,Bangle.js2: make setUI ignore touches in widgetbar,1,[],https://github.com/espruino/Espruino/pull/2170,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2170#issuecomment-1066837431,"Mostly because the ""back"" button lives there.
Maybe we should do it right and add checks for the entire appRect right away?",Thanks - I've just pushed in a slightly different fix for this - so if the 'back' handler is defined it now doesn't pass on touch events in other areas. I also made the active area for the back button a bit bigger so it's a bit easier to press (and harder to accidentally press a menu item when you want to go back),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2173,2022-03-18T03:58:34Z,2022-03-18T08:54:09Z,2022-03-18T08:54:09Z,MERGED,True,6,4,1,https://github.com/GrandVizierOlaf,Provide visual feedback on prompt button press,1,[],https://github.com/espruino/Espruino/pull/2173,https://github.com/GrandVizierOlaf,1,https://github.com/espruino/Espruino/pull/2173,"After the user presses a button, highlight the button briefly before closing the prompt and returning.","After the user presses a button, highlight the button briefly before closing the prompt and returning.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2173,2022-03-18T03:58:34Z,2022-03-18T08:54:09Z,2022-03-18T08:54:09Z,MERGED,True,6,4,1,https://github.com/GrandVizierOlaf,Provide visual feedback on prompt button press,1,[],https://github.com/espruino/Espruino/pull/2173,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2173#issuecomment-1072204961,"After the user presses a button, highlight the button briefly before closing the prompt and returning.",Nice idea - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2177,2022-04-03T07:41:26Z,2022-04-04T09:57:46Z,2022-04-04T09:57:46Z,MERGED,True,7,2,3,https://github.com/opichals,Add support for __arm64__ (e.g. Apple Silicon) build,1,[],https://github.com/espruino/Espruino/pull/2177,https://github.com/opichals,1,https://github.com/espruino/Espruino/pull/2177,Related to http://forum.espruino.com/conversations/373451/ discussion.,Related to http://forum.espruino.com/conversations/373451/ discussion.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2177,2022-04-03T07:41:26Z,2022-04-04T09:57:46Z,2022-04-04T09:57:46Z,MERGED,True,7,2,3,https://github.com/opichals,Add support for __arm64__ (e.g. Apple Silicon) build,1,[],https://github.com/espruino/Espruino/pull/2177,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2177#issuecomment-1087260540,Related to http://forum.espruino.com/conversations/373451/ discussion.,"Great - thanks!
For the libs/tensorflow/third_party/gemmlowp/fixedpoint/fixedpoint.h change, do you think there's another way around that (like trying to undef GEMMLOWP_NEON in the Makefile or some header that's not part of Tensorflow?).
I can just imagine that unless this is a change that's also in upstream Tensorflow, next time we pull the latest Tensorflow version it'll overwrite this.",True,{'THUMBS_UP': ['https://github.com/opichals']}
espruino/Espruino,https://github.com/espruino/Espruino,2177,2022-04-03T07:41:26Z,2022-04-04T09:57:46Z,2022-04-04T09:57:46Z,MERGED,True,7,2,3,https://github.com/opichals,Add support for __arm64__ (e.g. Apple Silicon) build,1,[],https://github.com/espruino/Espruino/pull/2177,https://github.com/opichals,3,https://github.com/espruino/Espruino/pull/2177#issuecomment-1087327884,Related to http://forum.espruino.com/conversations/373451/ discussion.,Added an empty ./libs/tensorflow/third_party/gemmlowp/fixedpoint/fixedpoint_neon.h which should not give you any trouble when upgrading later on.,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2177,2022-04-03T07:41:26Z,2022-04-04T09:57:46Z,2022-04-04T09:57:46Z,MERGED,True,7,2,3,https://github.com/opichals,Add support for __arm64__ (e.g. Apple Silicon) build,1,[],https://github.com/espruino/Espruino/pull/2177,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2177#issuecomment-1087351545,Related to http://forum.espruino.com/conversations/373451/ discussion.,Excellent - thank you for sorting this so quickly!,True,{'THUMBS_UP': ['https://github.com/opichals']}
espruino/Espruino,https://github.com/espruino/Espruino,2179,2022-04-08T14:48:55Z,2022-05-03T08:47:42Z,2022-05-03T08:47:42Z,CLOSED,False,6,3,2,https://github.com/mikabytes,Extend setWatch to allow buffering,1,[],https://github.com/espruino/Espruino/pull/2179,https://github.com/mikabytes,1,https://github.com/espruino/Espruino/pull/2179,"Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!","Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2179,2022-04-08T14:48:55Z,2022-05-03T08:47:42Z,2022-05-03T08:47:42Z,CLOSED,False,6,3,2,https://github.com/mikabytes,Extend setWatch to allow buffering,1,[],https://github.com/espruino/Espruino/pull/2179,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2179#issuecomment-1102715635,"Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!","Hi - what are you trying to receive with this? Is it continual data, or just a burst?
When this works, I guess it could be handy but my concern would be that this is only really a stopgap...
If data is coming in so fast that you get 256 events in a short time period, you may not be able to process them fast enough anyway. ESP8266 only has 1600 vars available so one event object may = maybe 7 vars? That's only another 200 events you're able to store assuming you had all your RAM free to start with.

I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512

Was this a recent version? I only fixed it maybe a month ago so you could have sizes >256. However you may need to decrease the amount of JsVars available so you still have enough execution stack.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2179,2022-04-08T14:48:55Z,2022-05-03T08:47:42Z,2022-05-03T08:47:42Z,CLOSED,False,6,3,2,https://github.com/mikabytes,Extend setWatch to allow buffering,1,[],https://github.com/espruino/Espruino/pull/2179,https://github.com/mikabytes,3,https://github.com/espruino/Espruino/pull/2179#issuecomment-1109960398,"Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!","Hi @gfwilliams
Thanks for getting back to me.
For this, I'm following the Infrared Remote Control tutorial. But I've had this issue in several other projects. https://www.espruino.com/Infrared+Remote+Control It is likely more than 200 events.
So, yes, the fix would only be viable where bursts of events are concerned. Continual data at that rate would not be possible.
It doesn't error if the watch does very light work, such as assigning a single variable some value. It cannot console.log things or place the events in an array. So, I conclude that the watch implementation is fast enough, but the JS stuff is too slow to keep up.
Hmm, so if I understand, if I were to be able to fix the speed issue, I would run into a memory issue instead? Hmm.. not too good.

Was this a recent version?

I built it from master branch, last commit is showing Tue Apr 5. I see some commits from Apr 21 related to io_buffer_size, so perhaps it may be worth to give that another try? I'll see if I can find some time this weekend.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2179,2022-04-08T14:48:55Z,2022-05-03T08:47:42Z,2022-05-03T08:47:42Z,CLOSED,False,6,3,2,https://github.com/mikabytes,Extend setWatch to allow buffering,1,[],https://github.com/espruino/Espruino/pull/2179,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2179#issuecomment-1109977774,"Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!","I see some commits from Apr 21 related to io_buffer_size, so perhaps it may be worth to give that another try?

Yes, please can you give that a go? Check out the commits - you just add a line to the BOARD.py file.
Basically I thought it was in master branch, but it wasn't. I pulled it across later but then I didn't get around to updating you in this post.
Before, it 100% would have failed above 256. After those commits you should be fine as long as it's a power of 2.",True,{'THUMBS_UP': ['https://github.com/mikabytes']}
espruino/Espruino,https://github.com/espruino/Espruino,2179,2022-04-08T14:48:55Z,2022-05-03T08:47:42Z,2022-05-03T08:47:42Z,CLOSED,False,6,3,2,https://github.com/mikabytes,Extend setWatch to allow buffering,1,[],https://github.com/espruino/Espruino/pull/2179,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2179#issuecomment-1115868682,"Hi. When receiving many interruptions on a pin, the ESP8266 can't handle it. More often than not, it will fire an exception FIFO_FULL. The callback can't do anything useful in the short time available, not even adding the value to an array or print it to screen.
I have tried increasing the bufferSizeIO in scripts/build_platform_config.py to 512. That works for a while, but then random errors start happening. I'm guessing there's some overlap issue.
So I resolved to attack this problem from another angle. Changing the signature of setWatch to avoid having to go into javascript:
setWatch(Array, Pin, options)

Instead of executing a JS callback, just add the event to the provided array. This should work, I think. But I'm having some issues with the code. I get Execution Interrupted on the first interruption, and then the chip is broken until I re-flash it.
First guess is that there needs to be some locking, or unlocking, whatever that is? I see it all over the code... Any help on this code would be appreciated. Thanks!",Closing this for now as I think with that recent change this should now be fixed,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2180,2022-04-10T09:26:31Z,2022-04-19T13:31:13Z,2022-04-20T19:33:33Z,MERGED,True,4,2,1,https://github.com/BartS23,BANGLE: document up/down swipe,3,[],https://github.com/espruino/Espruino/pull/2180,https://github.com/BartS23,1,https://github.com/espruino/Espruino/pull/2180,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2180,2022-04-10T09:26:31Z,2022-04-19T13:31:13Z,2022-04-20T19:33:33Z,MERGED,True,4,2,1,https://github.com/BartS23,BANGLE: document up/down swipe,3,[],https://github.com/espruino/Espruino/pull/2180,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2180#issuecomment-1102660623,,Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2182,2022-04-19T22:37:25Z,2022-04-20T06:57:52Z,2022-04-20T06:57:53Z,MERGED,True,12,9,2,https://github.com/storm64,[E_showMenu_Q3] Recheck string wrapping after font change,4,[],https://github.com/espruino/Espruino/pull/2182,https://github.com/storm64,1,https://github.com/espruino/Espruino/pull/2182,,,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2182,2022-04-19T22:37:25Z,2022-04-20T06:57:52Z,2022-04-20T06:57:53Z,MERGED,True,12,9,2,https://github.com/storm64,[E_showMenu_Q3] Recheck string wrapping after font change,4,[],https://github.com/espruino/Espruino/pull/2182,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2182#issuecomment-1103537303,,Thanks! That's great!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2183,2022-04-27T16:19:47Z,2022-04-28T08:12:11Z,2022-04-28T08:12:11Z,MERGED,True,9,9,2,https://github.com/rigrig,"Bangle.js1: show back button for ""< Back"" item in E.showMenu",1,[],https://github.com/espruino/Espruino/pull/2183,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2183,"Simply by pass it on to setUI.
This also works for options.back, because that adds a ""< Back"" item.
This should be a simple 1-line (151) change, but looking at the diff:

Apparently my editor stripped out end-of-line whitespace
The minifier picked a different variable name (l->k)

If that's a problem I'd be happy to clean it up a bit.","Simply by pass it on to setUI.
This also works for options.back, because that adds a ""< Back"" item.
This should be a simple 1-line (151) change, but looking at the diff:

Apparently my editor stripped out end-of-line whitespace
The minifier picked a different variable name (l->k)

If that's a problem I'd be happy to clean it up a bit.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2183,2022-04-27T16:19:47Z,2022-04-28T08:12:11Z,2022-04-28T08:12:11Z,MERGED,True,9,9,2,https://github.com/rigrig,"Bangle.js1: show back button for ""< Back"" item in E.showMenu",1,[],https://github.com/espruino/Espruino/pull/2183,https://github.com/rigrig,2,https://github.com/espruino/Espruino/pull/2183#issuecomment-1111419771,"Simply by pass it on to setUI.
This also works for options.back, because that adds a ""< Back"" item.
This should be a simple 1-line (151) change, but looking at the diff:

Apparently my editor stripped out end-of-line whitespace
The minifier picked a different variable name (l->k)

If that's a problem I'd be happy to clean it up a bit.",PR #2184 also includes this,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2183,2022-04-27T16:19:47Z,2022-04-28T08:12:11Z,2022-04-28T08:12:11Z,MERGED,True,9,9,2,https://github.com/rigrig,"Bangle.js1: show back button for ""< Back"" item in E.showMenu",1,[],https://github.com/espruino/Espruino/pull/2183,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2183#issuecomment-1111881796,"Simply by pass it on to setUI.
This also works for options.back, because that adds a ""< Back"" item.
This should be a simple 1-line (151) change, but looking at the diff:

Apparently my editor stripped out end-of-line whitespace
The minifier picked a different variable name (l->k)

If that's a problem I'd be happy to clean it up a bit.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2184,2022-04-27T19:52:10Z,2022-04-29T08:50:19Z,2022-04-29T08:50:19Z,MERGED,True,61,11,2,https://github.com/rigrig,Bangle.js1: add submenu to E.subMenu,4,[],https://github.com/espruino/Espruino/pull/2184,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2184,"This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.","This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2184,2022-04-27T19:52:10Z,2022-04-29T08:50:19Z,2022-04-29T08:50:19Z,MERGED,True,61,11,2,https://github.com/rigrig,Bangle.js1: add submenu to E.subMenu,4,[],https://github.com/espruino/Espruino/pull/2184,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2184#issuecomment-1111880561,"This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.","What do you mean by 'submenu'? Do you have any pics/info on what this change is?
If it's what I think it it, my concern is I'm not sure it it really helps people much?
The submenu on the Bangle.js 2 was done so that people could just 'tap' the correct menu item, but since we're using buttons on Bangle.js 1 I'm not sure if that's helpful?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2184,2022-04-27T19:52:10Z,2022-04-29T08:50:19Z,2022-04-29T08:50:19Z,MERGED,True,61,11,2,https://github.com/rigrig,Bangle.js1: add submenu to E.subMenu,4,[],https://github.com/espruino/Espruino/pull/2184,https://github.com/rigrig,3,https://github.com/espruino/Espruino/pull/2184#issuecomment-1111969340,"This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.","Do you have any pics/info on what this change is?

Whoops, sorry. I'll add some images when I get home tonight.
For items with a numeric value (and min,max constraining it to less than 20 choices), it opens a submenu with available options.
Not that big a deal for ""real"" numeric values, but if they represent choices (like quiet mode or theme colours), it means you get to see the list instead of having to discover choices one item at a time.
Actually, it might be better if it only uses this if the item has aformat, and for values just keeps the in-place editor.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2184,2022-04-27T19:52:10Z,2022-04-29T08:50:19Z,2022-04-29T08:50:19Z,MERGED,True,61,11,2,https://github.com/rigrig,Bangle.js1: add submenu to E.subMenu,4,[],https://github.com/espruino/Espruino/pull/2184,https://github.com/rigrig,4,https://github.com/espruino/Espruino/pull/2184#issuecomment-1112525600,"This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.","From the settings app:
System->Theme->Customize->Foreground

Alerts->Beep

Alerts->Quiet Mode

I also updated the PR to only do this for items that have format(), and min=0,step=1, on the assumption that those are likely to be the index into an option list.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2184,2022-04-27T19:52:10Z,2022-04-29T08:50:19Z,2022-04-29T08:50:19Z,MERGED,True,61,11,2,https://github.com/rigrig,Bangle.js1: add submenu to E.subMenu,4,[],https://github.com/espruino/Espruino/pull/2184,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2184#issuecomment-1113061542,"This also merges in #2183, making the back button work correctly in submenus.
Minor flaw: If the main menu has no back button, the submenu doesn't have one either.
Note: I only tested this with a E.showMenu=... boot.js file, not by updating my firmware.","Thanks! Looks good :) Actually there's an issue open for Bangle.js 2 about similar things - maybe adding the min=0, step=1 check there is a good one too",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2185,2022-04-27T20:25:02Z,2022-04-28T08:13:42Z,2022-04-28T08:13:42Z,MERGED,True,31,25,4,https://github.com/rigrig,setUI: don't redraw widgets when replacing 'back',2,[],https://github.com/espruino/Espruino/pull/2185,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2185,"On the Bangle.js 1 at least, this makes navigating settings much smoother, because otherwise Bangle.drawWidgets() happens twice every time it shows a new menu. (Well, provided your E.showMenu shows back buttons)
Only tested for Bangle.js 1 with Bangle.setUI=... in a boot.js file, not actual firmware or on a Bangle.js 2.","On the Bangle.js 1 at least, this makes navigating settings much smoother, because otherwise Bangle.drawWidgets() happens twice every time it shows a new menu. (Well, provided your E.showMenu shows back buttons)
Only tested for Bangle.js 1 with Bangle.setUI=... in a boot.js file, not actual firmware or on a Bangle.js 2.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2185,2022-04-27T20:25:02Z,2022-04-28T08:13:42Z,2022-04-28T08:13:42Z,MERGED,True,31,25,4,https://github.com/rigrig,setUI: don't redraw widgets when replacing 'back',2,[],https://github.com/espruino/Espruino/pull/2185,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2185#issuecomment-1111883293,"On the Bangle.js 1 at least, this makes navigating settings much smoother, because otherwise Bangle.drawWidgets() happens twice every time it shows a new menu. (Well, provided your E.showMenu shows back buttons)
Only tested for Bangle.js 1 with Bangle.setUI=... in a boot.js file, not actual firmware or on a Bangle.js 2.",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/storm64,1,https://github.com/espruino/Espruino/pull/2186,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().","Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2186#issuecomment-1111890538,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().","Did you have a specific reason for this change? Which app isn't working as you'd expect?
Because I'm not sure it's going to be great for most people. I just did a quick search in the repo and one of the first hits is qmsched with min:0, max:2, wrap: true,. You're saying that now, instead of popping up a menu with 3 menu items, this is only going to allow folks to scroll between items.
Same for antonclk where we're choosing between ""Long"", ""Short"", ""ISO8601"". It doesn't seem like an improvement... In fact I'm struggling to see any cases where wrap=true and there are less than 20 menu items where the scrolling menu wasn't fine.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/storm64,3,https://github.com/espruino/Espruino/pull/2186#issuecomment-1111916542,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().","I'm struggling to see any cases where wrap=true and there are less than 20 menu items where the scrolling menu wasn't fine.

In my opinion it is counter-intuitive to select a numeric value by selecting a listet item,
especially if the list doesn't shown the selected item and it needs to be scrolled to.

Maybe a separate property is a better alternative?
I could go through the apps and remove the wrap entry on all unsuitable use cases.
My last idea would be to reduce the item count to e.g. 5 (max. 10) to drastically reduce scrolling.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2186#issuecomment-1112043328,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().","Which specific apps did you have a problem with?
Maybe you could change the code so that if there's no format - eg it's pure numeric value - then it doesn't pop up the selection window?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/storm64,5,https://github.com/espruino/Espruino/pull/2186#issuecomment-1112068371,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().","Which specific apps did you have a problem with?

Its not specially one app, but I think that it would be nice to have the possibility to force the boxed design.
I tried my code on some menus and understand your concerns. I changed the code to use a separate property to control this.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2186,2022-04-27T22:15:33Z,2022-04-29T08:55:33Z,2022-04-29T08:55:33Z,MERGED,True,5,3,3,https://github.com/storm64,[E_showMenu_Q3.js] Add option to prevent scroller,6,[],https://github.com/espruino/Espruino/pull/2186,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2186#issuecomment-1113071476,"Prevent using E.showScroller() on wraping items.
This adds the option to control if the scroller or the simple box should be displayed.
In my opinion there is no need for a separate property, because the item.wrap property is not used inside E.showScroller().
This adds a new "".noList"" property to control if the simple box instead of the scroller/list should be displayed inside E.showMenu().",Thanks! I'll add the same for the recently added F18 code,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/alessandrococco,1,https://github.com/espruino/Espruino/pull/2187,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().","I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113069663,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().",Great - thanks for this! Not sure how you feel but do you think the library needs to be able to work on 2v13 and previous firmwares?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/alessandrococco,3,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113140921,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().","do you think the library needs to be able to work on 2v13 and previous firmwares?

IMHO yes. I pushed a backward compatible workaround in my branch.
If my code looks good to you I'll open a PR with this commit only espruino/BangleApps@f5d4d29",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113151759,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().","Unfortunately I don't think that workaround will work properly. It's fine for English, but other translations use different words/lengths. For example german: abday: ""So,Mo,Di,Mi,Do,Fr,Sa"",
You could check require(""Storage"").read(""locale"")!==undefined before applying the workaround so it only works for the built-in function? Or I guess you could pass in new Date((day+3.5)*86400000); instead of overriding getDay?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113152841,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().",new Date((month-0.5)*2628000000); for month too?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/alessandrococco,6,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113171170,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().","For example german: abday: ""So,Mo,Di,Mi,Do,Fr,Sa"",

Aargh, didn't know :-/

I just amended the commit with your suggestions: espruino/BangleApps@6b82c5b :-)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2187,2022-04-29T08:31:36Z,2022-04-29T08:53:18Z,2022-04-29T13:14:22Z,MERGED,True,2,2,1,https://github.com/alessandrococco,[locale] Fix default dow and month functions,1,[],https://github.com/espruino/Espruino/pull/2187,https://github.com/alessandrococco,7,https://github.com/espruino/Espruino/pull/2187#issuecomment-1113296742,"I'm testing the new date_utils module and I noticed some wrong outputs.
With the default hard-coded locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""[ob"" <--- NOT OK! :-(
>

After installing the EN_GB locale:
>require(""locale"").dow({ getDay: () => 1 }, 1)
=""Mon"" <--- OK :-D
>

After some digging I found the issue in the locale.js: the hard-coded functions call the toString() but if d is not a Date then the output is not what we expected.
The same bug exists with month().",I sent the PR: espruino/BangleApps#1773 :-),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2188,2022-04-29T09:55:30Z,2022-04-29T10:19:58Z,2022-04-29T12:33:36Z,MERGED,True,14,8,3,https://github.com/storm64,"[E_showMenu_Q3] Add ""Back"" on submenus",2,[],https://github.com/espruino/Espruino/pull/2188,https://github.com/storm64,1,https://github.com/espruino/Espruino/pull/2188,"Add ""Back""-Button on submenus inside E_showMenu
Regenerated E_showMenu_Q3.min.js via IDE with ""Closure  Simple Optimizations""
Add ChangeLog entry
Readd ChangeLog entry for #2186","Add ""Back""-Button on submenus inside E_showMenu
Regenerated E_showMenu_Q3.min.js via IDE with ""Closure  Simple Optimizations""
Add ChangeLog entry
Readd ChangeLog entry for #2186",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2188,2022-04-29T09:55:30Z,2022-04-29T10:19:58Z,2022-04-29T12:33:36Z,MERGED,True,14,8,3,https://github.com/storm64,"[E_showMenu_Q3] Add ""Back"" on submenus",2,[],https://github.com/espruino/Espruino/pull/2188,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2188#issuecomment-1113146041,"Add ""Back""-Button on submenus inside E_showMenu
Regenerated E_showMenu_Q3.min.js via IDE with ""Closure  Simple Optimizations""
Add ChangeLog entry
Readd ChangeLog entry for #2186",Thanks! Please can you do the minification using the minify.js in EspruinoDocs? There's a script update_js.sh in libs/js. It just uses an offline version of closure I know works well so there's no risk of stuff breaking because the closure version changed :) Also I generally add the newest ChangeLog entries at the bottom of the list :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2189,2022-04-29T12:43:51Z,2022-05-03T08:47:02Z,2022-05-03T10:09:31Z,CLOSED,False,2,3,1,https://github.com/storm64,Update ChangeLog,1,[],https://github.com/espruino/Espruino/pull/2189,https://github.com/storm64,1,https://github.com/espruino/Espruino/pull/2189,Remove duplicates + correct typo and sort order,Remove duplicates + correct typo and sort order,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2189,2022-04-29T12:43:51Z,2022-05-03T08:47:02Z,2022-05-03T10:09:31Z,CLOSED,False,2,3,1,https://github.com/storm64,Update ChangeLog,1,[],https://github.com/espruino/Espruino/pull/2189,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2189#issuecomment-1115868198,Remove duplicates + correct typo and sort order,"I don't really understand what's going on here. The current ChangeLog in Espruino looks like:
            Bangle.js2: Fix issue with E.showMenu creating a global `s` variable
            Bangle.js2: Recheck string wrapping after font change inside E.showMenu
            Bangle.js2: Double input buffer size from 1kb to 2kb
            Bangle.js2: Fix E.showMenu title changing color after scroll down+up *if* a non-standard theme was used
            Bangle.js2: Fix wear detection on latest Bangle.js 2 (VC31B variant) (fix #2141)
            Bangle.js2: Allow variable HRM poll rates on Bangle.js 2 VC31B variant
            Bangle.js2: VC31 HRM variant now polls at 25hz (not 50)
            Bangle.js1: E.showMenu now displays boolean values with no `format` as a checkbox
            Bangle.js1: E.showMenu now displays a submenu for multiple choice menu items (#2184)
            Bangle.js: built-in locale now doesn't depend on argument being an instance of Date (#2187)
            Bangle.js: App "".noList"" property to prevent E.showScroller inside E.showMenu            
            Bangle.js2: Add ""Back""-Button on submenus inside E_showMenu 


So it has these changes already - I think your branch might be out of date",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2189,2022-04-29T12:43:51Z,2022-05-03T08:47:02Z,2022-05-03T10:09:31Z,CLOSED,False,2,3,1,https://github.com/storm64,Update ChangeLog,1,[],https://github.com/espruino/Espruino/pull/2189,https://github.com/storm64,3,https://github.com/espruino/Espruino/pull/2189#issuecomment-1115925752,Remove duplicates + correct typo and sort order,"Hm...
Haven't seen this, sorry to bother.
But there is one typo left I brought in:
- |   Bangle.js: App "".noList"" property to prevent E.showScroller inside E.showMenu
+ |   Bangle.js: Add "".noList"" property to prevent E.showScroller inside E.showMenu
                  ^^

Maybe you might remember on your next changes in the CangeLog. ;)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2189,2022-04-29T12:43:51Z,2022-05-03T08:47:02Z,2022-05-03T10:09:31Z,CLOSED,False,2,3,1,https://github.com/storm64,Update ChangeLog,1,[],https://github.com/espruino/Espruino/pull/2189,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2189#issuecomment-1115936573,Remove duplicates + correct typo and sort order,thanks - will do :),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2193,2022-05-08T13:23:12Z,2022-05-09T08:32:56Z,2022-05-09T08:32:56Z,MERGED,True,2,2,2,https://github.com/rigrig,Bangle.js2: fix E.showMenu redraw,1,[],https://github.com/espruino/Espruino/pull/2193,https://github.com/rigrig,1,https://github.com/espruino/Espruino/pull/2193,2cd1603 missed updating a s to l.scroller,2cd1603 missed updating a s to l.scroller,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2193,2022-05-08T13:23:12Z,2022-05-09T08:32:56Z,2022-05-09T08:32:56Z,MERGED,True,2,2,2,https://github.com/rigrig,Bangle.js2: fix E.showMenu redraw,1,[],https://github.com/espruino/Espruino/pull/2193,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2193#issuecomment-1120806035,2cd1603 missed updating a s to l.scroller,"Argh, oops - thanks for fixing this!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2199,2022-05-21T10:46:51Z,2022-05-24T08:37:54Z,2022-05-24T11:23:14Z,MERGED,True,20,8,6,https://github.com/storm64,"[Bangle.setUI] Add ""clockcustom"" mode",4,[],https://github.com/espruino/Espruino/pull/2199,https://github.com/storm64,1,https://github.com/espruino/Espruino/pull/2199,"Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...","Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2199,2022-05-21T10:46:51Z,2022-05-24T08:37:54Z,2022-05-24T11:23:14Z,MERGED,True,20,8,6,https://github.com/storm64,"[Bangle.setUI] Add ""clockcustom"" mode",4,[],https://github.com/espruino/Espruino/pull/2199,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2199#issuecomment-1134532142,"Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...","Hi - yes, that could be a good idea... What are your thoughts on:
Bangle.setUI({type:""clockcustom"", ...
Bangle.setUI({type:""custom"", clock:1, ...

I don't know if we care but Bangle.setUI({type:""clockcustom"", would throw and exception if we ran a 'new' clock on a firmware without the updated setUI, but doing the other way would at least silently fail.
To edit the docs, look in libs/bangle/jswrap_bangle.c - the docs are all there in the JSON style comments",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2199,2022-05-21T10:46:51Z,2022-05-24T08:37:54Z,2022-05-24T11:23:14Z,MERGED,True,20,8,6,https://github.com/storm64,"[Bangle.setUI] Add ""clockcustom"" mode",4,[],https://github.com/espruino/Espruino/pull/2199,https://github.com/storm64,3,https://github.com/espruino/Espruino/pull/2199#issuecomment-1134559558,"Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...","I like the approach with an additional argument specifying the clock status.
Will have a look into this in the next days and update the .min.js and docs according to your suggestion.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2199,2022-05-21T10:46:51Z,2022-05-24T08:37:54Z,2022-05-24T11:23:14Z,MERGED,True,20,8,6,https://github.com/storm64,"[Bangle.setUI] Add ""clockcustom"" mode",4,[],https://github.com/espruino/Espruino/pull/2199,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2199#issuecomment-1134630056,"Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...","Great, thanks! Don't worry too much as I can do the minified files here - I use the minifer from EspruinoDocs so I know the code will turn out more or less the same each time :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2199,2022-05-21T10:46:51Z,2022-05-24T08:37:54Z,2022-05-24T11:23:14Z,MERGED,True,20,8,6,https://github.com/storm64,"[Bangle.setUI] Add ""clockcustom"" mode",4,[],https://github.com/espruino/Espruino/pull/2199,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2199#issuecomment-1135577153,"Think this might be useful for more complex clocks.
For now it would be necessary to set Bangle.CLOCK = 1 manually after a custom setUI to show other apps that a clock is used.
Is it possible for me to edit the http://www.espruino.com/Reference#l_Bangle_setUI to help via a PR, too?
Edit to 531c08e: The .min.js need to be regenerated...",Looks excellent - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2201,2022-05-24T09:20:06Z,2022-05-25T07:41:18Z,2022-05-25T07:41:18Z,MERGED,True,17,8,2,https://github.com/mariusGundersen,Basic support for numeric separator,2,[],https://github.com/espruino/Espruino/pull/2201,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2201,"This is an initial working version, but it has some known bugs:

parseInt(""1_0"") returns 10, not 1. That's a breaking change
multiple separators in a row is supported, but that's not supported according to the spec

I'm open for suggestions for the first issue. It seems like either a new parse method is needed (which increases the codesize) or a new argument needs to be passed in to the existing one (which might be a breaking change).
For the second one I'm not sure it's worth it to fix this","This is an initial working version, but it has some known bugs:

parseInt(""1_0"") returns 10, not 1. That's a breaking change
multiple separators in a row is supported, but that's not supported according to the spec

I'm open for suggestions for the first issue. It seems like either a new parse method is needed (which increases the codesize) or a new argument needs to be passed in to the existing one (which might be a breaking change).
For the second one I'm not sure it's worth it to fix this",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2201,2022-05-24T09:20:06Z,2022-05-25T07:41:18Z,2022-05-25T07:41:18Z,MERGED,True,17,8,2,https://github.com/mariusGundersen,Basic support for numeric separator,2,[],https://github.com/espruino/Espruino/pull/2201,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2201#issuecomment-1135907506,"This is an initial working version, but it has some known bugs:

parseInt(""1_0"") returns 10, not 1. That's a breaking change
multiple separators in a row is supported, but that's not supported according to the spec

I'm open for suggestions for the first issue. It seems like either a new parse method is needed (which increases the codesize) or a new argument needs to be passed in to the existing one (which might be a breaking change).
For the second one I'm not sure it's worth it to fix this","Hi! Just looking at this, and I see we've now got:
while (isNumeric(lex->currCh) || (!canBeFloating && isHexadecimal(lex->currCh)) || lex->currCh=='_') {
    jslTokenAppendChar(lex->currCh);
    jslGetNextCh();
  }

What about doing:
while (isNumeric(lex->currCh) || (!canBeFloating && isHexadecimal(lex->currCh)) || lex->currCh=='_') {
    if (lex->currCh!='_') jslTokenAppendChar(lex->currCh);
    jslGetNextCh();
  }

Would that not sort this out without requiring a change to stringToIntWithRadix (which I guess might break other things)?",True,{'THUMBS_UP': ['https://github.com/mariusGundersen']}
espruino/Espruino,https://github.com/espruino/Espruino,2201,2022-05-24T09:20:06Z,2022-05-25T07:41:18Z,2022-05-25T07:41:18Z,MERGED,True,17,8,2,https://github.com/mariusGundersen,Basic support for numeric separator,2,[],https://github.com/espruino/Espruino/pull/2201,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2201#issuecomment-1136900858,"This is an initial working version, but it has some known bugs:

parseInt(""1_0"") returns 10, not 1. That's a breaking change
multiple separators in a row is supported, but that's not supported according to the spec

I'm open for suggestions for the first issue. It seems like either a new parse method is needed (which increases the codesize) or a new argument needs to be passed in to the existing one (which might be a breaking change).
For the second one I'm not sure it's worth it to fix this",Great - thanks for this!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2202,2022-05-24T12:17:01Z,2022-05-24T13:12:47Z,2022-05-24T16:01:47Z,MERGED,True,7,1,1,https://github.com/mariusGundersen,Added support for method declaration in objects,1,[],https://github.com/espruino/Espruino/pull/2202,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2202,"This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}","This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2202,2022-05-24T12:17:01Z,2022-05-24T13:12:47Z,2022-05-24T16:01:47Z,MERGED,True,7,1,1,https://github.com/mariusGundersen,Added support for method declaration in objects,1,[],https://github.com/espruino/Espruino/pull/2202,https://github.com/mariusGundersen,2,https://github.com/espruino/Espruino/pull/2202#issuecomment-1135851967,"This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}",As wished for here: #1302 (comment),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2202,2022-05-24T12:17:01Z,2022-05-24T13:12:47Z,2022-05-24T16:01:47Z,MERGED,True,7,1,1,https://github.com/mariusGundersen,Added support for method declaration in objects,1,[],https://github.com/espruino/Espruino/pull/2202,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2202#issuecomment-1135901979,"This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}","Wow, that's excellent - thanks! Nice clean addition!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2202,2022-05-24T12:17:01Z,2022-05-24T13:12:47Z,2022-05-24T16:01:47Z,MERGED,True,7,1,1,https://github.com/mariusGundersen,Added support for method declaration in objects,1,[],https://github.com/espruino/Espruino/pull/2202,https://github.com/mariusGundersen,4,https://github.com/espruino/Espruino/pull/2202#issuecomment-1135961591,"This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}","This went fast! I was gonna ask about these lines, which seem unnecessary, as those tokens are checked for in jslIsIDOrReservedWord, right? : https://github.com/mariusGundersen/Espruino/blob/8701937e9304ad46056d3d380724f00099c7e5d1/src/jsparse.c#L1276
It's only string, int and float that are needed, since the rest are reserved words",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2202,2022-05-24T12:17:01Z,2022-05-24T13:12:47Z,2022-05-24T16:01:47Z,MERGED,True,7,1,1,https://github.com/mariusGundersen,Added support for method declaration in objects,1,[],https://github.com/espruino/Espruino/pull/2202,https://github.com/gfwilliams,5,https://github.com/espruino/Espruino/pull/2202#issuecomment-1136113484,"This makes it possible to write
var obj = {
  method(a){
    return a*5;
  }
}","Good point, thanks! Yes, I think that was left over from before jslIsIDOrReservedWord. Doesn't seem to make it fail any of the built-in tests, and {true:2} works anyway.
I'll just put that in. I've just surrounded your code by a #ifndef ESPR_NO_OBJECT_METHODS as for microbit 1 where we're really low on flash, that (albeit small) addition along with the const/let stuff I added pushes it over the edge so it no longer fits. Otherwise it's enabled on pretty much every other build.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2203,2022-05-25T05:38:57Z,2022-05-25T07:33:10Z,2022-05-25T07:36:43Z,MERGED,True,36,8,4,https://github.com/mariusGundersen,Implemented property shorthand,3,[],https://github.com/espruino/Espruino/pull/2203,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2203,As wished for in #1302 (comment),As wished for in #1302 (comment),True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2203,2022-05-25T05:38:57Z,2022-05-25T07:33:10Z,2022-05-25T07:36:43Z,MERGED,True,36,8,4,https://github.com/mariusGundersen,Implemented property shorthand,3,[],https://github.com/espruino/Espruino/pull/2203,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2203#issuecomment-1136893305,As wished for in #1302 (comment),Nice - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2203,2022-05-25T05:38:57Z,2022-05-25T07:33:10Z,2022-05-25T07:36:43Z,MERGED,True,36,8,4,https://github.com/mariusGundersen,Implemented property shorthand,3,[],https://github.com/espruino/Espruino/pull/2203,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2203#issuecomment-1136896670,As wished for in #1302 (comment),"Thanks for adding the ESPR_NO_ check too! It's a pain we have to do it, but some devices are just really tight for memory.
If you manage to find more redundant checks then that'll help though ;)
Just one thing - please can you put a note in the ChangeLog too? I did it this time, but if it's in the PR it makes things tidier :)",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2204,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.","This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2204#issuecomment-1136928611,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.","Thanks! This looks great - BUT...
In the Web IDE and the Bangle.js App Loader we do 'pretokenisation' - basically detecting reserved words/tokens and converting them to the token itself - which reduces memory usage and increases execution speed.
The gotcha is that each of those has a list of tokens and their values - so when you add LEX_NULLISH it changes all the enum values, and the pretokenised code no longer works. For instance updating any Bangle to the new firmware would likely stop all the apps from working.
In retrospect I should have left some padding for new operators/symbols so it didn't matter, but I didn't :( So I guess maybe to make this backwards compatible we'd need to create a new list (_LEX_OPERATOR_START2) after the symbols - this time with some padding - and put LEX_NULLISH in there",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/gfwilliams,3,https://github.com/espruino/Espruino/pull/2204#issuecomment-1136929198,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.",I'll see about tweaking this now though...,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/gfwilliams,4,https://github.com/espruino/Espruino/pull/2204#issuecomment-1136956688,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.",Just sorted I think - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/mariusGundersen,5,https://github.com/espruino/Espruino/pull/2204#issuecomment-1136959707,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.","I'm planning to add the null propagation operator ?. and the rest/spread operator ... as well, so there might be more issues like this. Where is the pretokenization done? How can I work around it?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2204,2022-05-25T07:31:08Z,2022-05-25T08:34:39Z,2022-05-25T09:02:34Z,MERGED,True,55,11,4,https://github.com/mariusGundersen,Nullish coalescing operator,2,[],https://github.com/espruino/Espruino/pull/2204,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2204#issuecomment-1136985677,"This adds support for the nullish coalescing operator:
var a = (null ?? true);
It is similar to doing a || b but it only uses b if a is null or undefined.",It should be fine after aa8167b - just stick them after LEX_NULLISH and you should be good now,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2205,2022-05-27T00:32:47Z,2022-06-06T09:42:20Z,2022-06-06T09:42:20Z,MERGED,True,3,0,1,https://github.com/naveensrinivasan,chore: Set permissions for GitHub actions,1,[],https://github.com/espruino/Espruino/pull/2205,https://github.com/naveensrinivasan,1,https://github.com/espruino/Espruino/pull/2205,"Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.

Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions

https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com","Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.

Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions

https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2205,2022-05-27T00:32:47Z,2022-06-06T09:42:20Z,2022-06-06T09:42:20Z,MERGED,True,3,0,1,https://github.com/naveensrinivasan,chore: Set permissions for GitHub actions,1,[],https://github.com/espruino/Espruino/pull/2205,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2205#issuecomment-1147260479,"Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.

Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions

https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com","Great, thanks!",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,1,https://github.com/espruino/Espruino/pull/2210,Stop strange behaviour where metres are used < 1km and then switching to miles.,Stop strange behaviour where metres are used < 1km and then switching to miles.,True,{'THUMBS_UP': ['https://github.com/copoer']}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,2,https://github.com/espruino/Espruino/pull/2210#issuecomment-1140489566,Stop strange behaviour where metres are used < 1km and then switching to miles.,TODO: Minify the modified JS,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,3,https://github.com/espruino/Espruino/pull/2210#issuecomment-1140492509,Stop strange behaviour where metres are used < 1km and then switching to miles.,"TODO: Minify the modified JS

DONE.
I used the command in the update_js.sh script - i.e. clone the EspruinoDocs repo and used:
node ../../../EspruinoDocs/bin/minify.js banglejs/locale.js banglejs/locale.min.js",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,4,https://github.com/espruino/Espruino/pull/2210#issuecomment-1140494088,Stop strange behaviour where metres are used < 1km and then switching to miles.,TODO: Any tests for this?,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,5,https://github.com/espruino/Espruino/pull/2210#issuecomment-1140503081,Stop strange behaviour where metres are used < 1km and then switching to miles.,TODO: Update CHANGELOG,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/gfwilliams,6,https://github.com/espruino/Espruino/pull/2210#issuecomment-1147269387,Stop strange behaviour where metres are used < 1km and then switching to miles.,"Just checking, but what is the issue you are wanting to fix with this?

That you don't like the mix of meters and miles
That you don't like the switchover to miles at 999m?

Because I'm pretty sure I'll get complaints when the default distance changes to yards. While for navigation it makes sense, things like the height above sea level probably still makes sense in meters, not yards even in England :)
The 999m changeover was actually an attempt at changing over when the value got above 3 characters long - but maybe changing over at one mile does make more sense.
Or maybe it's actually more useful to a greater proportion of users if we just move to kilometers by default?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2210,2022-05-29T17:12:02Z,,2022-06-06T11:12:05Z,OPEN,False,4,4,2,https://github.com/rjaduthie,Issue-2209 Make BangleJS en_GB locale distance purely imperial,1,[],https://github.com/espruino/Espruino/pull/2210,https://github.com/rjaduthie,7,https://github.com/espruino/Espruino/pull/2210#issuecomment-1147332769,Stop strange behaviour where metres are used < 1km and then switching to miles.,"Just checking, but what is the issue you are wanting to fix with this?
* That you don't like the mix of meters and miles

* That you don't like the switchover to miles at 999m?


The mixture is the main issue, for me: I'm not the only one - cf., linked issue in BangleApps: espruino/BangleApps#1824
The change I've proposed is to make the distance consistent with its unit; I figured that if we're going with miles, then yards is the logical choice.

Because I'm pretty sure I'll get complaints when the default distance changes to yards. While for navigation it makes sense, things like the height above sea level probably still makes sense in meters, not yards even in England :)

Should height be a different metric? ...as you point out, it is distinct from distance!  You're absolutely right that yards is a bad unit for altitude, I would say the natural choice for imperial units would be feet.

The 999m changeover was actually an attempt at changing over when the value got above 3 characters long - but maybe changing over at one mile does make more sense.
Or maybe it's actually more useful to a greater proportion of users if we just move to kilometers by default?

Kilometres is what I would personally choose to show on my watch for running, but I'm pretty sure there's a case for sometimes having miles.  Anecdotally, I have a friend whose an ultra-marathon runner and a cyclist, they use km for the former and miles for the latter.
How about...

An additional property handles height - e.g. altitude, as this may be in a different unit to distance - e.g. in feet.
Large numbers of feet can be expressed as (say) 10k5 ft.
The default GB locale is switched to feet, yards & miles.
To cater for the choice within an app for imperial or metric units, the exstats module offers non-locale representations of distance - e.g.  distance imp. & distance met. - in addition to the existing distance which gives the locale representation.

...?",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2211,2022-05-30T01:32:44Z,2022-06-06T09:41:53Z,2022-06-06T09:41:53Z,MERGED,True,6,0,1,https://github.com/naveensrinivasan,chore: Included githubactions in the dependabot config,1,[],https://github.com/espruino/Espruino/pull/2211,https://github.com/naveensrinivasan,1,https://github.com/espruino/Espruino/pull/2211,"This should help with keeping the GitHub actions updated on new releases. This will also help with keeping it secure.
Dependabot helps in keeping the supply chain secure https://docs.github.com/en/code-security/dependabot
GitHub actions up to date https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot
https://github.com/ossf/scorecard/blob/main/docs/checks.md#dependency-update-tool
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com","This should help with keeping the GitHub actions updated on new releases. This will also help with keeping it secure.
Dependabot helps in keeping the supply chain secure https://docs.github.com/en/code-security/dependabot
GitHub actions up to date https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot
https://github.com/ossf/scorecard/blob/main/docs/checks.md#dependency-update-tool
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2211,2022-05-30T01:32:44Z,2022-06-06T09:41:53Z,2022-06-06T09:41:53Z,MERGED,True,6,0,1,https://github.com/naveensrinivasan,chore: Included githubactions in the dependabot config,1,[],https://github.com/espruino/Espruino/pull/2211,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2211#issuecomment-1147260056,"This should help with keeping the GitHub actions updated on new releases. This will also help with keeping it secure.
Dependabot helps in keeping the supply chain secure https://docs.github.com/en/code-security/dependabot
GitHub actions up to date https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot
https://github.com/ossf/scorecard/blob/main/docs/checks.md#dependency-update-tool
Signed-off-by: naveen 172697+naveensrinivasan@users.noreply.github.com",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2212,2022-05-30T05:51:35Z,2022-06-06T09:40:41Z,2022-06-06T09:40:41Z,MERGED,True,9,6,3,https://github.com/mariusGundersen,Accessing properties from null should throw an error,4,[],https://github.com/espruino/Espruino/pull/2212,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2212,This fixes #2208,This fixes #2208,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2212,2022-05-30T05:51:35Z,2022-06-06T09:40:41Z,2022-06-06T09:40:41Z,MERGED,True,9,6,3,https://github.com/mariusGundersen,Accessing properties from null should throw an error,4,[],https://github.com/espruino/Espruino/pull/2212,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2212#issuecomment-1147258663,This fixes #2208,"Thanks for this! Just a note that the printf has some extras, so maybe %t that prints the type of the variable might work nicely too",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2216,2022-06-01T12:36:25Z,2022-06-06T09:34:52Z,2022-06-06T09:34:52Z,MERGED,True,4,21,2,https://github.com/mariusGundersen,This is not used from anywhere,1,[],https://github.com/espruino/Espruino/pull/2216,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2216,"I couldn't fin any place this is used, so removing it
Also fixed some whitespace","I couldn't fin any place this is used, so removing it
Also fixed some whitespace",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2216,2022-06-01T12:36:25Z,2022-06-06T09:34:52Z,2022-06-06T09:34:52Z,MERGED,True,4,21,2,https://github.com/mariusGundersen,This is not used from anywhere,1,[],https://github.com/espruino/Espruino/pull/2216,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2216#issuecomment-1147254336,"I couldn't fin any place this is used, so removing it
Also fixed some whitespace",Thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2217,2022-06-03T07:50:24Z,2022-06-06T09:32:31Z,2022-06-06T09:32:32Z,MERGED,True,61,7,4,https://github.com/mariusGundersen,Don't allow expressions on the left side of assignments,1,[],https://github.com/espruino/Espruino/pull/2217,https://github.com/mariusGundersen,1,https://github.com/espruino/Espruino/pull/2217,"Make sure that the results of expressions like ||, && and a?b:c are values and not variable references
This fixes #2214","Make sure that the results of expressions like ||, && and a?b:c are values and not variable references
This fixes #2214",True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2217,2022-06-03T07:50:24Z,2022-06-06T09:32:31Z,2022-06-06T09:32:32Z,MERGED,True,61,7,4,https://github.com/mariusGundersen,Don't allow expressions on the left side of assignments,1,[],https://github.com/espruino/Espruino/pull/2217,https://github.com/gfwilliams,2,https://github.com/espruino/Espruino/pull/2217#issuecomment-1147252309,"Make sure that the results of expressions like ||, && and a?b:c are values and not variable references
This fixes #2214",Great - thanks!,True,{}
espruino/Espruino,https://github.com/espruino/Espruino,2218,2022-06-06T11:37:00Z,,2022-06-06T11:37:02Z,OPEN,False,3,3,1,https://github.com/apps/dependabot,Bump actions/checkout from 2 to 3,1,['dependencies'],https://github.com/espruino/Espruino/pull/2218,https://github.com/apps/dependabot,1,https://github.com/espruino/Espruino/pull/2218,"Bumps actions/checkout from 2 to 3.

Release notes
Sourced from actions/checkout's releases.

v3.0.0

Updated to the node16 runtime by default

This requires a minimum Actions Runner version of v2.285.0 to run, which is by default available in GHES 3.4 or later.



v2.4.2
What's Changed

Add set-safe-directory input to allow customers to take control. (#770) by @​TingluoHuang in actions/checkout#776
Prepare changelog for v2.4.2. by @​TingluoHuang in actions/checkout#778

Full Changelog: actions/checkout@v2...v2.4.2
v2.4.1

Fixed an issue where checkout failed to run in container jobs due to the new git setting safe.directory

v2.4.0

Convert SSH URLs like org-<ORG_ID>@github.com: to https://github.com/ - pr

v2.3.5
Update dependencies
v2.3.4

Add missing awaits
Swap to Environment Files

v2.3.3

Remove Unneeded commit information from build logs
Add Licensed to verify third party dependencies

v2.3.2
Add Third Party License Information to Dist Files
v2.3.1
Fix default branch resolution for .wiki and when using SSH
v2.3.0
Fallback to the default branch
v2.2.0
Fetch all history for all tags and branches when fetch-depth=0
v2.1.1
Changes to support GHES (here and here)
v2.1.0

Group output
Changes to support GHES alpha release
Persist core.sshCommand for submodules
Add support ssh
Convert submodule SSH URL to HTTPS, when not using SSH



... (truncated)


Changelog
Sourced from actions/checkout's changelog.

Changelog
v3.0.2

Add input set-safe-directory

v3.0.1

Fixed an issue where checkout failed to run in container jobs due to the new git setting safe.directory
Bumped various npm package versions

v3.0.0

Update to node 16

v2.3.1

Fix default branch resolution for .wiki and when using SSH

v2.3.0

Fallback to the default branch

v2.2.0

Fetch all history for all tags and branches when fetch-depth=0

v2.1.1

Changes to support GHES (here and here)

v2.1.0

Group output
Changes to support GHES alpha release
Persist core.sshCommand for submodules
Add support ssh
Convert submodule SSH URL to HTTPS, when not using SSH
Add submodule support
Follow proxy settings
Fix ref for pr closed event when a pr is merged
Fix issue checking detached when git less than 2.22

v2.0.0

Do not pass cred on command line
Add input persist-credentials
Fallback to REST API to download repo




Commits

2541b12 Prepare changelog for v3.0.2. (#777)
0ffe6f9 Add set-safe-directory input to allow customers to take control. (#770)
dcd71f6 Enforce safe directory (#762)
add3486 Patch to fix the dependbot alert. (#744)
5126516 Bump minimist from 1.2.5 to 1.2.6 (#741)
d50f8ea Add v3.0 release information to changelog (#740)
2d1c119 update test workflows to checkout v3 (#709)
a12a394 update readme for v3 (#708)
8f9e05e Update to node 16 (#689)
See full diff in compare view




Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)","Bumps actions/checkout from 2 to 3.

Release notes
Sourced from actions/checkout's releases.

v3.0.0

Updated to the node16 runtime by default

This requires a minimum Actions Runner version of v2.285.0 to run, which is by default available in GHES 3.4 or later.



v2.4.2
What's Changed

Add set-safe-directory input to allow customers to take control. (#770) by @​TingluoHuang in actions/checkout#776
Prepare changelog for v2.4.2. by @​TingluoHuang in actions/checkout#778

Full Changelog: actions/checkout@v2...v2.4.2
v2.4.1

Fixed an issue where checkout failed to run in container jobs due to the new git setting safe.directory

v2.4.0

Convert SSH URLs like org-<ORG_ID>@github.com: to https://github.com/ - pr

v2.3.5
Update dependencies
v2.3.4

Add missing awaits
Swap to Environment Files

v2.3.3

Remove Unneeded commit information from build logs
Add Licensed to verify third party dependencies

v2.3.2
Add Third Party License Information to Dist Files
v2.3.1
Fix default branch resolution for .wiki and when using SSH
v2.3.0
Fallback to the default branch
v2.2.0
Fetch all history for all tags and branches when fetch-depth=0
v2.1.1
Changes to support GHES (here and here)
v2.1.0

Group output
Changes to support GHES alpha release
Persist core.sshCommand for submodules
Add support ssh
Convert submodule SSH URL to HTTPS, when not using SSH



... (truncated)


Changelog
Sourced from actions/checkout's changelog.

Changelog
v3.0.2

Add input set-safe-directory

v3.0.1

Fixed an issue where checkout failed to run in container jobs due to the new git setting safe.directory
Bumped various npm package versions

v3.0.0

Update to node 16

v2.3.1

Fix default branch resolution for .wiki and when using SSH

v2.3.0

Fallback to the default branch

v2.2.0

Fetch all history for all tags and branches when fetch-depth=0

v2.1.1

Changes to support GHES (here and here)

v2.1.0

Group output
Changes to support GHES alpha release
Persist core.sshCommand for submodules
Add support ssh
Convert submodule SSH URL to HTTPS, when not using SSH
Add submodule support
Follow proxy settings
Fix ref for pr closed event when a pr is merged
Fix issue checking detached when git less than 2.22

v2.0.0

Do not pass cred on command line
Add input persist-credentials
Fallback to REST API to download repo




Commits

2541b12 Prepare changelog for v3.0.2. (#777)
0ffe6f9 Add set-safe-directory input to allow customers to take control. (#770)
dcd71f6 Enforce safe directory (#762)
add3486 Patch to fix the dependbot alert. (#744)
5126516 Bump minimist from 1.2.5 to 1.2.6 (#741)
d50f8ea Add v3.0 release information to changelog (#740)
2d1c119 update test workflows to checkout v3 (#709)
a12a394 update readme for v3 (#708)
8f9e05e Update to node 16 (#689)
See full diff in compare view




Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)",True,{}
