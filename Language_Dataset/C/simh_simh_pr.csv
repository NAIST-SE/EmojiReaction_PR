simh/simh,https://github.com/simh/simh,280,2016-02-24T23:11:01Z,2016-02-24T23:20:15Z,2016-02-24T23:20:15Z,MERGED,True,4,0,1,https://github.com/agn453,slirp_glue: cleanup compiler warning for redefinition of O_BINARY,1,[],https://github.com/simh/simh/pull/280,https://github.com/agn453,1,https://github.com/simh/simh/pull/280,"Compilation under Cygwin was giving the warning
slirp/slirp.h:24:0: warning: ""O_BINARY"" redefined
define O_BINARY 0
^
In file included from /usr/include/sys/fcntl.h:3:0,
from /usr/include/fcntl.h:15,
from slirp_glue/qemu/osdep.h:57,
from slirp_glue/qemu/qemu-common.h:15,
from slirp/slirp.c:24:
/usr/include/sys/_default_fcntl.h:56:0: note: this is the location of
the previous definition
define O_BINARY _FBINARY","Compilation under Cygwin was giving the warning
slirp/slirp.h:24:0: warning: ""O_BINARY"" redefined
define O_BINARY 0
^
In file included from /usr/include/sys/fcntl.h:3:0,
from /usr/include/fcntl.h:15,
from slirp_glue/qemu/osdep.h:57,
from slirp_glue/qemu/qemu-common.h:15,
from slirp/slirp.c:24:
/usr/include/sys/_default_fcntl.h:56:0: note: this is the location of
the previous definition
define O_BINARY _FBINARY",True,{}
simh/simh,https://github.com/simh/simh,293,2016-03-21T02:39:55Z,2016-03-21T21:37:12Z,2016-03-21T21:37:12Z,CLOSED,False,8,0,1,https://github.com/WIZARDISHUNGRY,Improve makefile for Homebrew on OS X,2,[],https://github.com/simh/simh/pull/293,https://github.com/WIZARDISHUNGRY,1,https://github.com/simh/simh/pull/293,fixes #292,fixes #292,True,{}
simh/simh,https://github.com/simh/simh,293,2016-03-21T02:39:55Z,2016-03-21T21:37:12Z,2016-03-21T21:37:12Z,CLOSED,False,8,0,1,https://github.com/WIZARDISHUNGRY,Improve makefile for Homebrew on OS X,2,[],https://github.com/simh/simh/pull/293,https://github.com/markpizz,2,https://github.com/simh/simh/pull/293#issuecomment-199497833,fixes #292,As discussed in #292.,True,{}
simh/simh,https://github.com/simh/simh,295,2016-03-26T18:58:18Z,2016-03-27T11:46:18Z,2016-03-27T11:46:18Z,CLOSED,False,660,1,5,https://github.com/philbudne,"PDP18B: simulate enough of Bell Labs GRAPHICS-2 display system for UNIX-7 ""second seat""",11,[],https://github.com/simh/simh/pull/295,https://github.com/philbudne,1,https://github.com/simh/simh/pull/295,"Code has been stable for a week: working, but not perfect either.
I've updated comments to reflect my thoughts on implementing
a web interface for the display!","Code has been stable for a week: working, but not perfect either.
I've updated comments to reflect my thoughts on implementing
a web interface for the display!",True,{}
simh/simh,https://github.com/simh/simh,298,2016-03-30T22:01:57Z,2016-03-30T22:03:04Z,2016-03-30T23:47:16Z,CLOSED,False,0,0,0,https://github.com/agn453,Merge remote-tracking branch 'refs/remotes/simh/master',1,[],https://github.com/simh/simh/pull/298,https://github.com/agn453,1,https://github.com/simh/simh/pull/298,,,True,{}
simh/simh,https://github.com/simh/simh,298,2016-03-30T22:01:57Z,2016-03-30T22:03:04Z,2016-03-30T23:47:16Z,CLOSED,False,0,0,0,https://github.com/agn453,Merge remote-tracking branch 'refs/remotes/simh/master',1,[],https://github.com/simh/simh/pull/298,https://github.com/agn453,2,https://github.com/simh/simh/pull/298#issuecomment-203685585,,Please ignore this request. I pulled when I should have merged!,True,{}
simh/simh,https://github.com/simh/simh,298,2016-03-30T22:01:57Z,2016-03-30T22:03:04Z,2016-03-30T23:47:16Z,CLOSED,False,0,0,0,https://github.com/agn453,Merge remote-tracking branch 'refs/remotes/simh/master',1,[],https://github.com/simh/simh/pull/298,https://github.com/markpizz,3,https://github.com/simh/simh/pull/298#issuecomment-203688117,,No Problem,True,{}
simh/simh,https://github.com/simh/simh,299,2016-04-02T05:30:46Z,2016-04-02T14:36:41Z,2016-04-02T14:36:41Z,CLOSED,False,1,1,1,https://github.com/agn453,VAX: Fix external type definition for BadCmPSL that was preventing compilation under HP C V7.3-009 on OpenVMS Alpha V8.3,1,[],https://github.com/simh/simh/pull/299,https://github.com/agn453,1,https://github.com/simh/simh/pull/299,"Fix external type definition of BadCmPSL in vax_defs.h to match the definition in vax_cmode.c so that compilation under HP C V7.3-009 on OpenVMS Alpha V8.3 does not bork with a NOTCOMPAT error.  Also verified that the change does not affect compilation under Linux, Mac OS X and Cygwin.
(Extract from logfile building VAX with MMK)
$! Building The SYS$DISK:[.BIN.VMS.LIB]VAXL1-AXP.OLB Library.
$!
$ RUN/NODEBUG SYS$DISK:[.BIN]BuildROMs-AXP.EXE
$ CC/DECC/PREF=ALL/DEBUG/OPT=(LEV=5)/ARCH=HOST  /NEST=PRIMARY/NAME=(AS_IS,SHORT)
/INCL=(SYS$DISK:[],SYS$DISK:[.VAX],SYS$DISK:[.PDP11],SYS$DISK:[-.PCAP-VMS.PCAP-V
CI]) /DEF=(""_LARGEFILE"",""SIM_ASYNCH_IO=1"",""VM_VAX=1"",""USE_ADDR64=1"",""USE_INT64=1
"",""USE_NETWORK=1"",""HAVE_PCAP_NETWORK=1"")/OBJ=SYS$DISK:[.VAX]  /OBJ=SYS$DISK:[.BI
N.VMS.LIB.BLD-AXP] SYS$DISK:[.VAX]VAX_CIS.C,SYS$DISK:[.VAX]VAX_CMODE.C,SYS$DISK:
[.VAX]VAX_CPU.C,SYS$DISK:[.VAX]VAX_CPU1.C,SYS$DISK:[.VAX]VAX_FPA.C,SYS$DISK:[.VA
X]VAX_MMU.C,SYS$DISK:[.VAX]VAX_OCTA.C,SYS$DISK:[.VAX]VAX_SYS.C,SYS$DISK:[.VAX]VA
X_SYSCM.C,SYS$DISK:[.VAX]VAX_SYSDEV.C,SYS$DISK:[.VAX]VAX_SYSLIST.C,SYS$DISK:[.VA
X]VAX_IO.C,SYS$DISK:[.VAX]VAX_STDDEV.C
t_bool BadCmPSL (int32 newpsl)
.......^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 1303 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CMODE.C
;1
extern t_bool BadCmPSL (int32 newpsl);
..............^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 89 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CPU1.C;1
%MMK-F-ERRUPD, error status %X10B91262 occurred when updating target SYS$DISK:[.
BIN.VMS.LIB]VAXL1-AXP.OLB
SYSTEM       job terminated at  1-APR-2016 22:00:35.90","Fix external type definition of BadCmPSL in vax_defs.h to match the definition in vax_cmode.c so that compilation under HP C V7.3-009 on OpenVMS Alpha V8.3 does not bork with a NOTCOMPAT error.  Also verified that the change does not affect compilation under Linux, Mac OS X and Cygwin.
(Extract from logfile building VAX with MMK)
$! Building The SYS$DISK:[.BIN.VMS.LIB]VAXL1-AXP.OLB Library.
$!
$ RUN/NODEBUG SYS$DISK:[.BIN]BuildROMs-AXP.EXE
$ CC/DECC/PREF=ALL/DEBUG/OPT=(LEV=5)/ARCH=HOST  /NEST=PRIMARY/NAME=(AS_IS,SHORT)
/INCL=(SYS$DISK:[],SYS$DISK:[.VAX],SYS$DISK:[.PDP11],SYS$DISK:[-.PCAP-VMS.PCAP-V
CI]) /DEF=(""_LARGEFILE"",""SIM_ASYNCH_IO=1"",""VM_VAX=1"",""USE_ADDR64=1"",""USE_INT64=1
"",""USE_NETWORK=1"",""HAVE_PCAP_NETWORK=1"")/OBJ=SYS$DISK:[.VAX]  /OBJ=SYS$DISK:[.BI
N.VMS.LIB.BLD-AXP] SYS$DISK:[.VAX]VAX_CIS.C,SYS$DISK:[.VAX]VAX_CMODE.C,SYS$DISK:
[.VAX]VAX_CPU.C,SYS$DISK:[.VAX]VAX_CPU1.C,SYS$DISK:[.VAX]VAX_FPA.C,SYS$DISK:[.VA
X]VAX_MMU.C,SYS$DISK:[.VAX]VAX_OCTA.C,SYS$DISK:[.VAX]VAX_SYS.C,SYS$DISK:[.VAX]VA
X_SYSCM.C,SYS$DISK:[.VAX]VAX_SYSDEV.C,SYS$DISK:[.VAX]VAX_SYSLIST.C,SYS$DISK:[.VA
X]VAX_IO.C,SYS$DISK:[.VAX]VAX_STDDEV.C
t_bool BadCmPSL (int32 newpsl)
.......^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 1303 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CMODE.C
;1
extern t_bool BadCmPSL (int32 newpsl);
..............^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 89 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CPU1.C;1
%MMK-F-ERRUPD, error status %X10B91262 occurred when updating target SYS$DISK:[.
BIN.VMS.LIB]VAXL1-AXP.OLB
SYSTEM       job terminated at  1-APR-2016 22:00:35.90",True,{}
simh/simh,https://github.com/simh/simh,299,2016-04-02T05:30:46Z,2016-04-02T14:36:41Z,2016-04-02T14:36:41Z,CLOSED,False,1,1,1,https://github.com/agn453,VAX: Fix external type definition for BadCmPSL that was preventing compilation under HP C V7.3-009 on OpenVMS Alpha V8.3,1,[],https://github.com/simh/simh/pull/299,https://github.com/markpizz,2,https://github.com/simh/simh/pull/299#issuecomment-204727104,"Fix external type definition of BadCmPSL in vax_defs.h to match the definition in vax_cmode.c so that compilation under HP C V7.3-009 on OpenVMS Alpha V8.3 does not bork with a NOTCOMPAT error.  Also verified that the change does not affect compilation under Linux, Mac OS X and Cygwin.
(Extract from logfile building VAX with MMK)
$! Building The SYS$DISK:[.BIN.VMS.LIB]VAXL1-AXP.OLB Library.
$!
$ RUN/NODEBUG SYS$DISK:[.BIN]BuildROMs-AXP.EXE
$ CC/DECC/PREF=ALL/DEBUG/OPT=(LEV=5)/ARCH=HOST  /NEST=PRIMARY/NAME=(AS_IS,SHORT)
/INCL=(SYS$DISK:[],SYS$DISK:[.VAX],SYS$DISK:[.PDP11],SYS$DISK:[-.PCAP-VMS.PCAP-V
CI]) /DEF=(""_LARGEFILE"",""SIM_ASYNCH_IO=1"",""VM_VAX=1"",""USE_ADDR64=1"",""USE_INT64=1
"",""USE_NETWORK=1"",""HAVE_PCAP_NETWORK=1"")/OBJ=SYS$DISK:[.VAX]  /OBJ=SYS$DISK:[.BI
N.VMS.LIB.BLD-AXP] SYS$DISK:[.VAX]VAX_CIS.C,SYS$DISK:[.VAX]VAX_CMODE.C,SYS$DISK:
[.VAX]VAX_CPU.C,SYS$DISK:[.VAX]VAX_CPU1.C,SYS$DISK:[.VAX]VAX_FPA.C,SYS$DISK:[.VA
X]VAX_MMU.C,SYS$DISK:[.VAX]VAX_OCTA.C,SYS$DISK:[.VAX]VAX_SYS.C,SYS$DISK:[.VAX]VA
X_SYSCM.C,SYS$DISK:[.VAX]VAX_SYSDEV.C,SYS$DISK:[.VAX]VAX_SYSLIST.C,SYS$DISK:[.VA
X]VAX_IO.C,SYS$DISK:[.VAX]VAX_STDDEV.C
t_bool BadCmPSL (int32 newpsl)
.......^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 1303 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CMODE.C
;1
extern t_bool BadCmPSL (int32 newpsl);
..............^
%CC-E-NOTCOMPAT, In this declaration, the type of ""BadCmPSL"" is not compatible with the type of a previous declaration of ""BadCmPSL"" at line number 856 in file
USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_DEFS.H;1.
at line number 89 in file USER_DISK:[LOCAL.SOURCES.SIMH-MASTER.VAX]VAX_CPU1.C;1
%MMK-F-ERRUPD, error status %X10B91262 occurred when updating target SYS$DISK:[.
BIN.VMS.LIB]VAXL1-AXP.OLB
SYSTEM       job terminated at  1-APR-2016 22:00:35.90",Thanks for the fix.  I rewrote the commit message to conform to the pattern.,True,{}
simh/simh,https://github.com/simh/simh,300,2016-04-07T19:25:36Z,2016-08-29T18:52:08Z,2016-08-29T18:52:08Z,CLOSED,False,183,7,1,https://github.com/pkoning2,PDP11: Record the actual source and destination values.,1,[],https://github.com/simh/simh/pull/300,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/300,"Previously, the history would always use a register value as source or
destination as if the mode were zero, even when it wasn't.  Also, now
the destination value reflects the destination after instruction
execution rather than before.","Previously, the history would always use a register value as source or
destination as if the mode were zero, even when it wasn't.  Also, now
the destination value reflects the destination after instruction
execution rather than before.",True,{}
simh/simh,https://github.com/simh/simh,300,2016-04-07T19:25:36Z,2016-08-29T18:52:08Z,2016-08-29T18:52:08Z,CLOSED,False,183,7,1,https://github.com/pkoning2,PDP11: Record the actual source and destination values.,1,[],https://github.com/simh/simh/pull/300,https://github.com/markpizz,2,https://github.com/simh/simh/pull/300#issuecomment-243218659,"Previously, the history would always use a register value as source or
destination as if the mode were zero, even when it wasn't.  Also, now
the destination value reflects the destination after instruction
execution rather than before.","This was merged manually into the master branch.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,306,2016-05-08T08:09:11Z,2016-05-15T22:35:34Z,2016-05-15T22:35:34Z,CLOSED,False,195,49,26,https://github.com/psco,AltairZ80: Fixed device descriptions for all devices.,1,[],https://github.com/simh/simh/pull/306,https://github.com/psco,1,https://github.com/simh/simh/pull/306,,,True,{}
simh/simh,https://github.com/simh/simh,306,2016-05-08T08:09:11Z,2016-05-15T22:35:34Z,2016-05-15T22:35:34Z,CLOSED,False,195,49,26,https://github.com/psco,AltairZ80: Fixed device descriptions for all devices.,1,[],https://github.com/simh/simh/pull/306,https://github.com/markpizz,2,https://github.com/simh/simh/pull/306#issuecomment-219315168,,"I rebased this commit into the master branch since I'd already made and published other commits without noticing that this pull request.
Massive const changes have not been commited and pushed.  Please pickup the current codebase and possibly reclone from the github.com/simh/simh repo.",True,{}
simh/simh,https://github.com/simh/simh,310,2016-05-15T22:31:07Z,2016-05-15T22:46:39Z,2019-04-29T19:37:59Z,CLOSED,False,2,2,1,https://github.com/shattered,VAX: replace magic numbers with constants,1,[],https://github.com/simh/simh/pull/310,https://github.com/shattered,1,https://github.com/simh/simh/pull/310,,,True,{}
simh/simh,https://github.com/simh/simh,310,2016-05-15T22:31:07Z,2016-05-15T22:46:39Z,2019-04-29T19:37:59Z,CLOSED,False,2,2,1,https://github.com/shattered,VAX: replace magic numbers with constants,1,[],https://github.com/simh/simh/pull/310,https://github.com/markpizz,2,https://github.com/simh/simh/pull/310#issuecomment-219315891,,"Rebased into master branch.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,311,2016-05-15T22:31:38Z,2016-05-15T22:46:28Z,2019-04-29T19:38:45Z,CLOSED,False,18,1,2,https://github.com/shattered,VAX: 2681 UART: implement ACR and IPR,1,[],https://github.com/simh/simh/pull/311,https://github.com/shattered,1,https://github.com/simh/simh/pull/311,,,True,{}
simh/simh,https://github.com/simh/simh,311,2016-05-15T22:31:38Z,2016-05-15T22:46:28Z,2019-04-29T19:38:45Z,CLOSED,False,18,1,2,https://github.com/shattered,VAX: 2681 UART: implement ACR and IPR,1,[],https://github.com/simh/simh/pull/311,https://github.com/markpizz,2,https://github.com/simh/simh/pull/311#issuecomment-219315879,,"Rebased into master branch.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,318,2016-05-23T20:11:14Z,2016-05-23T20:46:42Z,2016-05-23T20:46:42Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix NUM_CHIP_TYPE warning and added missing declaration,0,[],https://github.com/simh/simh/pull/318,https://github.com/psco,1,https://github.com/simh/simh/pull/318,,,True,{}
simh/simh,https://github.com/simh/simh,321,2016-06-01T17:53:03Z,2016-06-11T16:53:11Z,2019-04-29T19:38:27Z,CLOSED,False,1,1,1,https://github.com/shattered,VIDEO: don't flip mouse button state while mouse moves,1,[],https://github.com/simh/simh/pull/321,https://github.com/shattered,1,https://github.com/simh/simh/pull/321,This makes dragging an outline of new window work in DMD 5620 sim.,This makes dragging an outline of new window work in DMD 5620 sim.,True,{}
simh/simh,https://github.com/simh/simh,321,2016-06-01T17:53:03Z,2016-06-11T16:53:11Z,2019-04-29T19:38:27Z,CLOSED,False,1,1,1,https://github.com/shattered,VIDEO: don't flip mouse button state while mouse moves,1,[],https://github.com/simh/simh/pull/321,https://github.com/markpizz,2,https://github.com/simh/simh/pull/321#issuecomment-224145784,This makes dragging an outline of new window work in DMD 5620 sim.,"Hi Sergey,
Thanks for digging.
I'm not going to take a commit which merely comments out a line which is broken and probably doesn't actually do the right thing.
Does the this change to that line produce useful results for you?
event->state = dev->state;

Let me know.

Mark",True,{}
simh/simh,https://github.com/simh/simh,324,2016-06-03T07:15:21Z,2016-06-03T07:40:57Z,2016-06-03T07:40:57Z,CLOSED,False,26,24,1,https://github.com/agn453,ETHER: Fix incompatible ptr type warning and relocate _eth_get_system_id,6,[],https://github.com/simh/simh/pull/324,https://github.com/agn453,1,https://github.com/simh/simh/pull/324,"Compilation under Cygwin with gcc 5.3.0 - missing const gave rise to incompatible pointer type warning, and _eth_get_system_id function for _WIN32 was defined under a conditional for either _WIN32 or CYGWIN and later redefined again for !_WIN32","Compilation under Cygwin with gcc 5.3.0 - missing const gave rise to incompatible pointer type warning, and _eth_get_system_id function for _WIN32 was defined under a conditional for either _WIN32 or CYGWIN and later redefined again for !_WIN32",True,{}
simh/simh,https://github.com/simh/simh,324,2016-06-03T07:15:21Z,2016-06-03T07:40:57Z,2016-06-03T07:40:57Z,CLOSED,False,26,24,1,https://github.com/agn453,ETHER: Fix incompatible ptr type warning and relocate _eth_get_system_id,6,[],https://github.com/simh/simh/pull/324,https://github.com/markpizz,2,https://github.com/simh/simh/pull/324#issuecomment-223512292,"Compilation under Cygwin with gcc 5.3.0 - missing const gave rise to incompatible pointer type warning, and _eth_get_system_id function for _WIN32 was defined under a conditional for either _WIN32 or CYGWIN and later redefined again for !_WIN32",Included via rebase.  Reworded the commit message to keep lines < 80,True,{}
simh/simh,https://github.com/simh/simh,329,2016-06-30T19:53:08Z,2016-06-30T19:54:23Z,2016-06-30T19:54:23Z,CLOSED,False,0,0,0,https://github.com/JonathanBelanger,Merge pull request #1 from simh/master,1,[],https://github.com/simh/simh/pull/329,https://github.com/JonathanBelanger,1,https://github.com/simh/simh/pull/329,Updating my fork with the latest commits,Updating my fork with the latest commits,True,{}
simh/simh,https://github.com/simh/simh,329,2016-06-30T19:53:08Z,2016-06-30T19:54:23Z,2016-06-30T19:54:23Z,CLOSED,False,0,0,0,https://github.com/JonathanBelanger,Merge pull request #1 from simh/master,1,[],https://github.com/simh/simh/pull/329,https://github.com/JonathanBelanger,2,https://github.com/simh/simh/pull/329#issuecomment-229769770,Updating my fork with the latest commits,Leave a comment,True,{}
simh/simh,https://github.com/simh/simh,331,2016-08-05T16:09:45Z,2016-10-15T19:23:58Z,2016-10-15T19:23:58Z,CLOSED,False,0,0,0,https://github.com/JonathanBelanger,Merge pull request #3 from simh/master,2,[],https://github.com/simh/simh/pull/331,https://github.com/JonathanBelanger,1,https://github.com/simh/simh/pull/331,,,True,{}
simh/simh,https://github.com/simh/simh,333,2016-08-29T14:48:20Z,2016-08-29T18:49:00Z,2016-08-29T18:49:00Z,MERGED,True,201,44,1,https://github.com/pkoning2,"PDP10, PDP11, VAX: Make DMC/DMR initialization more accurate.",1,[],https://github.com/simh/simh/pull/333,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/333,"These changes cure a number of issues in RSTS/E, which is more
sensitive to details of emulation than most:

Additional KMC opcodes supported for ROMI
MCLR now initializes the CSRs per the spec
MCLR and ROMI are processed immediately at CSR write rather than
being deferred, because these actions are implemented in the device
hardware rather than in the microprogram.","These changes cure a number of issues in RSTS/E, which is more
sensitive to details of emulation than most:

Additional KMC opcodes supported for ROMI
MCLR now initializes the CSRs per the spec
MCLR and ROMI are processed immediately at CSR write rather than
being deferred, because these actions are implemented in the device
hardware rather than in the microprogram.",True,{}
simh/simh,https://github.com/simh/simh,335,2016-08-31T15:41:18Z,2016-08-31T15:49:29Z,2016-08-31T15:49:29Z,MERGED,True,406,786,1,https://github.com/psco,AltairZ80: Updated 8080/Z80 CPU for new breakpoint package,1,[],https://github.com/simh/simh/pull/335,https://github.com/psco,1,https://github.com/simh/simh/pull/335,,,True,{}
simh/simh,https://github.com/simh/simh,339,2016-09-09T18:29:02Z,2016-09-09T18:33:07Z,2016-09-09T18:33:07Z,MERGED,True,0,0,1,https://github.com/pkoning2,DOC: Add some additional detail on the breakpoint replay,1,[],https://github.com/simh/simh/pull/339,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/339,,,True,{}
simh/simh,https://github.com/simh/simh,340,2016-09-09T19:33:52Z,2016-09-09T19:45:02Z,2016-09-09T19:45:03Z,MERGED,True,0,0,1,https://github.com/pkoning2,DOC: More detail on breakpoints and instruction replay,1,[],https://github.com/simh/simh/pull/340,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/340,"Add discussion of the recommended handling of instruction history
recording.  Also recommendations for read and write breakpoints to
cover cases such as I/O registers.","Add discussion of the recommended handling of instruction history
recording.  Also recommendations for read and write breakpoints to
cover cases such as I/O registers.",True,{}
simh/simh,https://github.com/simh/simh,342,2016-09-13T19:25:34Z,2016-09-13T19:29:12Z,2016-09-13T19:29:12Z,MERGED,True,311,119,4,https://github.com/pkoning2,PDP11: Add new breakpoint types for data and physical address,1,[],https://github.com/simh/simh/pull/342,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/342,"Add support for physical and virtual address variants for the existing
instruction (PC) breakpoint, and add memory read and memory write
breakpoints.","Add support for physical and virtual address variants for the existing
instruction (PC) breakpoint, and add memory read and memory write
breakpoints.",True,{}
simh/simh,https://github.com/simh/simh,348,2016-11-09T02:59:06Z,2016-11-09T02:59:38Z,2016-11-09T02:59:38Z,CLOSED,False,4977,40,13,https://github.com/leobru,BESM6: Variable TTY Baud rate,9,[],https://github.com/simh/simh/pull/348,https://github.com/leobru,1,https://github.com/simh/simh/pull/348,0b72ccd,0b72ccd,True,{}
simh/simh,https://github.com/simh/simh,349,2016-11-09T03:28:04Z,2017-01-08T01:04:04Z,2017-01-08T01:04:04Z,CLOSED,False,17416,11185,106,https://github.com/leobru,BESM6: Added variable Baud rate for serial terminals.,111,[],https://github.com/simh/simh/pull/349,https://github.com/leobru,1,https://github.com/simh/simh/pull/349,The Baud rate is based on emulated ticks rather than wallclock time and appears much faster than in real life.,The Baud rate is based on emulated ticks rather than wallclock time and appears much faster than in real life.,True,{}
simh/simh,https://github.com/simh/simh,349,2016-11-09T03:28:04Z,2017-01-08T01:04:04Z,2017-01-08T01:04:04Z,CLOSED,False,17416,11185,106,https://github.com/leobru,BESM6: Added variable Baud rate for serial terminals.,111,[],https://github.com/simh/simh/pull/349,https://github.com/markpizz,2,https://github.com/simh/simh/pull/349#issuecomment-259333776,The Baud rate is based on emulated ticks rather than wallclock time and appears much faster than in real life.,"Hi Leo,
The TMXR layer already has variable speed for simulated multiplexer lines.  Without this patch, a user could merely say:
sim> ATTACH TTY port,speed=300

and things would probably work as you expected...
useful info is visible with:
sim> SHOW MUX

If this doesn't work for you without any changes, then we can explore why in more detail and the fix the generic tmxr facilities to meet your goals.
You might also benefit from changing:

/* If the TTY system is not idle, schedule the next interrupt
* by instruction count using the target interrupt rate of tty_rate Hz;
* otherwise we can wait for a roughly equivalent wallclock time period,
* e.g. until the next 250 Hz wallclock interrupt, but making sure
* that the model time interval between GRP_SERIAL interrupts
* is never less than expected.
* Using sim_activate_after() would be more straightforward (no need for a check
* as the host is faster than the target), but likely less efficient for idling.
_/
if (vt_is_idle() && sim_activate_time(clocks) > 1000_MSEC/tty_rate)
return sim_clock_coschedule (this, tmr_poll);
else
return sim_activate(this, 1000*MSEC/tty_rate);

to

return sim_clock_coschedule (this, tmr_poll);",True,{}
simh/simh,https://github.com/simh/simh,349,2016-11-09T03:28:04Z,2017-01-08T01:04:04Z,2017-01-08T01:04:04Z,CLOSED,False,17416,11185,106,https://github.com/leobru,BESM6: Added variable Baud rate for serial terminals.,111,[],https://github.com/simh/simh/pull/349,https://github.com/leobru,3,https://github.com/simh/simh/pull/349#issuecomment-259337246,The Baud rate is based on emulated ticks rather than wallclock time and appears much faster than in real life.,"Hi Mark,
Thank you, I'll try that tomorrow.
On Tue, Nov 8, 2016 at 8:54 PM, Mark Pizzolato notifications@github.com
wrote:

Hi Leo,
The TMXR layer already has variable speed for simulated multiplexer lines.
Without this patch, a user could merely say:
sim> ATTACH TTY port,speed=300
and things would probably work as you expected...
useful info is visible with:
sim> SHOW MUX
If this doesn't work for you without any changes, then we can explore why
in more detail and the fix the generic tmxr facilities to meet your goals.
You might also benefit from changing:
/* If the TTY system is not idle, schedule the next interrupt

by instruction count using the target interrupt rate of tty_rate Hz;
otherwise we can wait for a roughly equivalent wallclock time period,
e.g. until the next 250 Hz wallclock interrupt, but making sure
that the model time interval between GRP_SERIAL interrupts
is never less than expected.
Using sim_activate_after() would be more straightforward (no need for a
check
as the host is faster than the target), but likely less efficient for
idling.

_/ if (vt_is_idle() && sim_activate_time(clocks) > 1000_MSEC/tty_rate)
return sim_clock_coschedule (this, tmr_poll);
else
return sim_activate(this, 1000*MSEC/tty_rate);
to
return sim_clock_coschedule (this, tmr_poll);
—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
#349 (comment), or mute
the thread
https://github.com/notifications/unsubscribe-auth/AHYiymhMbS_EZ1kgSw1OIai-FJw-sPr1ks5q8VHxgaJpZM4KtJ1x
.",True,{}
simh/simh,https://github.com/simh/simh,349,2016-11-09T03:28:04Z,2017-01-08T01:04:04Z,2017-01-08T01:04:04Z,CLOSED,False,17416,11185,106,https://github.com/leobru,BESM6: Added variable Baud rate for serial terminals.,111,[],https://github.com/simh/simh/pull/349,https://github.com/markpizz,4,https://github.com/simh/simh/pull/349#issuecomment-259449321,The Baud rate is based on emulated ticks rather than wallclock time and appears much faster than in real life.,"Additionally, if it happens that the serial ports on this system had programmatic port speed, the TMXR layer has APIs to explicitly set port speed on a line by line basis.  Before exploring this, getting the previously mentioned stuff working right should be the goal.  I'm just mentioning it now so you can keep it in mind.  Implementing this would certainly require more work in the device simulation since you'd have to implement whatever interface the hardware provided to perform these actions.",True,{}
simh/simh,https://github.com/simh/simh,363,2016-12-16T15:34:13Z,2016-12-16T18:15:06Z,2016-12-16T18:15:06Z,CLOSED,False,5,0,1,https://github.com/dgesswein,Fix PDP-8 printing from WPS,2,[],https://github.com/simh/simh/pull/363,https://github.com/dgesswein,1,https://github.com/simh/simh/pull/363,,,True,{}
simh/simh,https://github.com/simh/simh,363,2016-12-16T15:34:13Z,2016-12-16T18:15:06Z,2016-12-16T18:15:06Z,CLOSED,False,5,0,1,https://github.com/dgesswein,Fix PDP-8 printing from WPS,2,[],https://github.com/simh/simh/pull/363,https://github.com/markpizz,2,https://github.com/simh/simh/pull/363#issuecomment-267629277,,"Thanks for this, however there are 2 Things:


The commit message should be worded PDP8: Fix printing from WPS
Normally I'd handle changing this myself with a rebase during the merge.


Your change:
 case 0:
       dev_done = dev_done | INT_LPT;                  /* set flag /
       int_req = INT_UPDATE;                           / update interrupts */
       return AC;



Starts a comment on the line which begins with dev_done and ends it on the line beginning with int_req, effectively commenting out the int_req line.  Was this intentional?",True,{}
simh/simh,https://github.com/simh/simh,363,2016-12-16T15:34:13Z,2016-12-16T18:15:06Z,2016-12-16T18:15:06Z,CLOSED,False,5,0,1,https://github.com/dgesswein,Fix PDP-8 printing from WPS,2,[],https://github.com/simh/simh/pull/363,https://github.com/dgesswein,3,https://github.com/simh/simh/pull/363#issuecomment-267637301,,"On Fri, Dec 16, 2016 at 08:11:37AM -0800, Mark Pizzolato wrote:
 Thanks for this, however there are 2 Things:

 Starts a comment on the line which begins with dev_done and ends it on the
 line beginning with int_req, effectively commenting out the int_req line.
  Was this intentional?

Nope. I wasn't paying enough attention. I looked at the original file
which was correct. The code in the git issue has the change to the comment.
I assume it modified what I pasted but not sure. Since it was open I
copied and pasted the code from that page into the git code I cloned instead
of going back to the original file I used for initial debugging.

I tested and committed the change. Either version worked with WPS.",True,{}
simh/simh,https://github.com/simh/simh,363,2016-12-16T15:34:13Z,2016-12-16T18:15:06Z,2016-12-16T18:15:06Z,CLOSED,False,5,0,1,https://github.com/dgesswein,Fix PDP-8 printing from WPS,2,[],https://github.com/simh/simh/pull/363,https://github.com/markpizz,4,https://github.com/simh/simh/pull/363#issuecomment-267659782,,"I squashed both commits into a single commit and commited the result with you as the author.
github.com/simh/simh now has a different commit sequence than your local repo and its github/dgesswein/simh clone.  You probably want drop these now and clone again next time something comes up.
BTW, I saw what you're talking about regarding the C comment looking the way it was in the issue discussion.  The asterisks were actually in the text of the discussion but got lost during the translation from 'Github Flavored Markdown' to the viewable form in the issue.  I edited your comments and merely put a blank line before the code section and the resulting stuff displayed as a code block with the asterisks in the comments all there.",True,{}
simh/simh,https://github.com/simh/simh,364,2016-12-17T11:25:09Z,2016-12-17T11:29:44Z,2016-12-17T11:29:44Z,MERGED,True,37,1,2,https://github.com/psco,AltairZ80: Implemented proper memory refresh register R semantics,1,[],https://github.com/simh/simh/pull/364,https://github.com/psco,1,https://github.com/simh/simh/pull/364,,,True,{}
simh/simh,https://github.com/simh/simh,369,2016-12-27T17:07:14Z,2017-01-09T09:50:53Z,2017-01-09T09:50:53Z,CLOSED,False,640378,640557,819,https://github.com/RussellSenior,fixup some accumulated whitespace problems,1,[],https://github.com/simh/simh/pull/369,https://github.com/RussellSenior,1,https://github.com/simh/simh/pull/369,"A tree-wide whitespace fix, avoiding binary files.
Signed-off-by: Russell Senior russell@personaltelco.net","A tree-wide whitespace fix, avoiding binary files.
Signed-off-by: Russell Senior russell@personaltelco.net",True,{}
simh/simh,https://github.com/simh/simh,369,2016-12-27T17:07:14Z,2017-01-09T09:50:53Z,2017-01-09T09:50:53Z,CLOSED,False,640378,640557,819,https://github.com/RussellSenior,fixup some accumulated whitespace problems,1,[],https://github.com/simh/simh/pull/369,https://github.com/markpizz,2,https://github.com/simh/simh/pull/369#issuecomment-269368857,"A tree-wide whitespace fix, avoiding binary files.
Signed-off-by: Russell Senior russell@personaltelco.net","Hi Russell,
FYI: For legacy reasons, all text files in the simh codebase (.c, .h, .txt, etc) are maintained with CRLF line endings in the repo.  Source code (.c, .h) are maintained tab characters expanded to spaces so that the code looks the same for anyone who looks at it without regard to their local tab settings.
I recommend that when using git to access/change the simh repo that your git environment be set to 'checkout as-is, commit as-is'.  I think the git setup for the line ending stuff is configured globally with 'git config --local --add core.autocrlf false'.
There may be some cases where these general rules haven't been followed, and I'd like to specifically know about them.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,371,2017-01-07T22:23:47Z,2017-01-08T01:03:45Z,2017-01-08T01:03:45Z,CLOSED,False,1,1,1,https://github.com/leobru,BESM6: Fixed a bug in multiplication.,1,[],https://github.com/simh/simh/pull/371,https://github.com/leobru,1,https://github.com/simh/simh/pull/371,"Multiplying a negative number by a zero value with a non-zero exponent produced wrong results.
This was not caught by the bringup test of the ALU, and was only discovered recently.","Multiplying a negative number by a zero value with a non-zero exponent produced wrong results.
This was not caught by the bringup test of the ALU, and was only discovered recently.",True,{}
simh/simh,https://github.com/simh/simh,372,2017-01-08T01:12:15Z,2017-01-08T23:13:29Z,2017-01-08T23:13:29Z,MERGED,True,1,1,1,https://github.com/leobru,BESM6: Fixed a bug in multiplication.,1,[],https://github.com/simh/simh/pull/372,https://github.com/leobru,1,https://github.com/simh/simh/pull/372,Multiplying a negative number by a zero value with a non-zero exponent produced wrong results.,Multiplying a negative number by a zero value with a non-zero exponent produced wrong results.,True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/leobru,1,https://github.com/simh/simh/pull/374,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.","implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.",True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/markpizz,2,https://github.com/simh/simh/pull/374#issuecomment-272789539,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.","Leo,
I hate to be a stickler, but:

The pattern for commit messages is:

COMPONENT/SIMULATOR: one line summary max at 80 columns
<blank-line>
<extra descriptive information for as many lines shorter than 80 as 
  is interesting or necessary - Maybe no extra descriptive commentary
  if the summary is sufficient>


It seems that tab characters have crept into your recent edits to
besm6_tty.c.  Project standards are that tabs get expanded to spaces
in source and/or other text files and these files have CRLF line endings.
Your line endings are good and the only tabs are the recent changes to
besm6_tty.c.",True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/leobru,3,https://github.com/simh/simh/pull/374#issuecomment-272791898,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.","What are my choices, apart from removing the project and cloning again?",True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/markpizz,4,https://github.com/simh/simh/pull/374#issuecomment-272792873,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.","Since github.com/leobru/simh merely exists publicly for you to pass stuff to me (and no one else is referencing it), rewriting history is OK since I know it is about to happen.
You can rewrite history in your repo either as you suggest, or what I think would be equivalent might be:
$ git reset --soft HEAD^
$ git push -f 

make your changes and do a new commit followed by another push with a new pull request.",True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/markpizz,5,https://github.com/simh/simh/pull/374#issuecomment-272793164,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.",Note.  I just realized that if you're using the github web interface all of my comments were not visible due to markdown misinterpreting my < and > characters.  Please read the details before your next commit.,True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/374#issuecomment-272793871,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.","If you add a file CONTRIBUTING.md to the toplevel directory, there will be a suggestion to read it when people make a pull request.  It should contain guidelines for how to submit contributions.",True,{}
simh/simh,https://github.com/simh/simh,374,2017-01-16T07:01:28Z,2017-01-16T07:58:11Z,2017-01-16T07:58:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Corrected responsiveness of the TTY I/O initiation;,0,[],https://github.com/simh/simh/pull/374,https://github.com/markpizz,7,https://github.com/simh/simh/pull/374#issuecomment-272794879,"implemented switching between turbo and ""authentic feel"" mode of TTY I/O
with varying Baud rate.",Thanks for the suggestion.  I've actually got a draft of such a document in progress.,True,{}
simh/simh,https://github.com/simh/simh,375,2017-01-16T08:01:17Z,2017-01-16T08:14:33Z,2017-01-16T08:20:30Z,MERGED,True,67,16,2,https://github.com/leobru,"BESM6: Improved TTY I/O (responsiveness, variable rate, turbo/authentic)",1,[],https://github.com/simh/simh/pull/375,https://github.com/leobru,1,https://github.com/simh/simh/pull/375,"Is this better?
Thanks, I keep forgetting about ""push -f"".","Is this better?
Thanks, I keep forgetting about ""push -f"".",True,{}
simh/simh,https://github.com/simh/simh,375,2017-01-16T08:01:17Z,2017-01-16T08:14:33Z,2017-01-16T08:20:30Z,MERGED,True,67,16,2,https://github.com/leobru,"BESM6: Improved TTY I/O (responsiveness, variable rate, turbo/authentic)",1,[],https://github.com/simh/simh/pull/375,https://github.com/markpizz,2,https://github.com/simh/simh/pull/375#issuecomment-272798794,"Is this better?
Thanks, I keep forgetting about ""push -f"".","In general it is good to not know about ""git push -f"" since it should only be used when all interested parties agree on it and that can't be guaranteed for a public repo.",True,{}
simh/simh,https://github.com/simh/simh,376,2017-01-17T08:27:16Z,2017-01-17T19:20:40Z,2017-01-17T19:20:41Z,CLOSED,False,1,1,2,https://github.com/leobru,BESM6: Preparing to implement punchcards.,1,[],https://github.com/simh/simh/pull/376,https://github.com/leobru,1,https://github.com/simh/simh/pull/376,,,True,{}
simh/simh,https://github.com/simh/simh,376,2017-01-17T08:27:16Z,2017-01-17T19:20:40Z,2017-01-17T19:20:41Z,CLOSED,False,1,1,2,https://github.com/leobru,BESM6: Preparing to implement punchcards.,1,[],https://github.com/simh/simh/pull/376,https://github.com/rcornwell,2,https://github.com/simh/simh/pull/376#issuecomment-273151648,,"You might want to consider using sim_card.c. I can provide a updated version for it if you want. The current version works, but has problems with binary card formats, I have fixed it.",True,{}
simh/simh,https://github.com/simh/simh,376,2017-01-17T08:27:16Z,2017-01-17T19:20:40Z,2017-01-17T19:20:41Z,CLOSED,False,1,1,2,https://github.com/leobru,BESM6: Preparing to implement punchcards.,1,[],https://github.com/simh/simh/pull/376,https://github.com/leobru,3,https://github.com/simh/simh/pull/376#issuecomment-273270385,,"@rcornwell At the moment I'm going to implement the puncher only (the OS allows to represent p/c images on punch tape, so no immediate need for a p/c reader). The ""binary"" format I have in mind uses 3 lines of 40 Unicode characters U+2800 to U+28FF (Braille patterns) followed by a blank line to represent a card in a visible form (although not to scale). Recognizing text will be hard: the encodings (with Cyrillic extensions) could be IBM-like, CDC-like, column-wise GOST, byte-wise GOST (horizontal, up to 120 bytes per card, with odd parity for valid bytes), so I'm not planning that at first. The puncher is intended to demonstrate the ability to punch object files in a binary format.",True,{}
simh/simh,https://github.com/simh/simh,379,2017-01-24T19:25:37Z,2017-02-05T00:00:47Z,2017-02-05T00:00:47Z,CLOSED,False,210,76,8,https://github.com/pkoning2,PDP11: Add initial UC15 support from Bob Supnik,1,[],https://github.com/simh/simh/pull/379,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/379,,,True,{}
simh/simh,https://github.com/simh/simh,381,2017-01-25T00:53:18Z,2017-01-25T20:59:20Z,2019-04-29T19:37:56Z,CLOSED,False,57,8,1,https://github.com/shattered,PDP11 -- RX11 improvements,2,[],https://github.com/simh/simh/pull/381,https://github.com/shattered,1,https://github.com/simh/simh/pull/381,"I have written a RX11 simulation for MAME (using SIMH and diag listings as reference), and that simulation passes ZRXA and ZRXB tests in XXDP (SIMH's fails both).   This is a start of backport into SIMH.","I have written a RX11 simulation for MAME (using SIMH and diag listings as reference), and that simulation passes ZRXA and ZRXB tests in XXDP (SIMH's fails both).   This is a start of backport into SIMH.",True,{}
simh/simh,https://github.com/simh/simh,381,2017-01-25T00:53:18Z,2017-01-25T20:59:20Z,2019-04-29T19:37:56Z,CLOSED,False,57,8,1,https://github.com/shattered,PDP11 -- RX11 improvements,2,[],https://github.com/simh/simh/pull/381,https://github.com/markpizz,2,https://github.com/simh/simh/pull/381#issuecomment-275023211,"I have written a RX11 simulation for MAME (using SIMH and diag listings as reference), and that simulation passes ZRXA and ZRXB tests in XXDP (SIMH's fails both).   This is a start of backport into SIMH.","Hi Sergey
You say it is a 'start of a backport'.  Where is the rest?
When I looked at this, I noticed that a few stray tab characters were part of your first commit.  I'm ready to cherry pick your commits and fix this, or if you've got more to come, please provide them all together (avoiding the tabs from the beginning).  Let me know your preference.
Thanks

Mark",True,{}
simh/simh,https://github.com/simh/simh,381,2017-01-25T00:53:18Z,2017-01-25T20:59:20Z,2019-04-29T19:37:56Z,CLOSED,False,57,8,1,https://github.com/shattered,PDP11 -- RX11 improvements,2,[],https://github.com/simh/simh/pull/381,https://github.com/markpizz,3,https://github.com/simh/simh/pull/381#issuecomment-275027450,"I have written a RX11 simulation for MAME (using SIMH and diag listings as reference), and that simulation passes ZRXA and ZRXB tests in XXDP (SIMH's fails both).   This is a start of backport into SIMH.","Of course, the cherry picked commits would have you as the Author.  Let me know where you want to go.",True,{}
simh/simh,https://github.com/simh/simh,381,2017-01-25T00:53:18Z,2017-01-25T20:59:20Z,2019-04-29T19:37:56Z,CLOSED,False,57,8,1,https://github.com/shattered,PDP11 -- RX11 improvements,2,[],https://github.com/simh/simh/pull/381,https://github.com/shattered,4,https://github.com/simh/simh/pull/381#issuecomment-275231078,"I have written a RX11 simulation for MAME (using SIMH and diag listings as reference), and that simulation passes ZRXA and ZRXB tests in XXDP (SIMH's fails both).   This is a start of backport into SIMH.","OK, let's wait until I complete the backport.",True,{}
simh/simh,https://github.com/simh/simh,383,2017-01-27T13:15:06Z,2017-02-05T00:00:32Z,2017-02-05T10:56:12Z,CLOSED,False,4197,4,20,https://github.com/eg90804,Opcon threading,19,[],https://github.com/simh/simh/pull/383,https://github.com/eg90804,1,https://github.com/simh/simh/pull/383,,,True,{}
simh/simh,https://github.com/simh/simh,383,2017-01-27T13:15:06Z,2017-02-05T00:00:32Z,2017-02-05T10:56:12Z,CLOSED,False,4197,4,20,https://github.com/eg90804,Opcon threading,19,[],https://github.com/simh/simh/pull/383,https://github.com/markpizz,2,https://github.com/simh/simh/pull/383#issuecomment-277487120,,"Hi Edward,
The changes you've got here significantly affect many different parts of both the PDP11 simulator AND the simh framework (aka SCP).  Others have gone in similar directions in the past.  Most of these folks started with simh v3.8-1 or earlier, and are now dragging their original changes into the current codebase.  Meanwhile, the simh framework has built-in completely portable capabilities to support various folks who want to connect physical or simulated frontpanel capabilities into any simulator completely without changes to the existing simulator code.  This is provided by the simh frontpanel API described in sim_frontpanel.h.   The sim_frontpanel API is designed as a way for an external program to interface between (and to control) a running simulator and either a software frontpanel or a hardware panel.
If you want to explore migrating to the front panel API and you have any questions, or think it needs additional functionality for what you need to do, please create and issue at https://github.com/simh/simh/issues

Mark",True,{}
simh/simh,https://github.com/simh/simh,383,2017-01-27T13:15:06Z,2017-02-05T00:00:32Z,2017-02-05T10:56:12Z,CLOSED,False,4197,4,20,https://github.com/eg90804,Opcon threading,19,[],https://github.com/simh/simh/pull/383,https://github.com/eg90804,3,https://github.com/simh/simh/pull/383#issuecomment-277511597,,"Hello Mark.

I know, I accidentally selected the wrong (the simh master) repo instead
of my fork of simh when I wanted to merge some updates into it.

I'll look into the sim_forntpanel code in the near future.

Regards,

Ed
--
Ik email, dus ik besta.",True,{}
simh/simh,https://github.com/simh/simh,389,2017-01-31T01:59:23Z,2017-01-31T02:09:43Z,2017-01-31T02:09:43Z,MERGED,True,446,290,4,https://github.com/rcornwell,Updates to Sim_card and B5500,2,[],https://github.com/simh/simh/pull/389,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/389,"Cleaned up support for binary cards to sim_card, also added architecture description to head of B5500_cpu.c","Cleaned up support for binary cards to sim_card, also added architecture description to head of B5500_cpu.c",True,{}
simh/simh,https://github.com/simh/simh,391,2017-02-06T09:18:40Z,2017-02-07T06:54:11Z,2017-02-07T06:54:11Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Implemented punchcard output.,0,[],https://github.com/simh/simh/pull/391,https://github.com/leobru,1,https://github.com/simh/simh/pull/391,A visual format (using Unicode Braille patterns) my be interesting anough to be included to sim_card.c,A visual format (using Unicode Braille patterns) my be interesting anough to be included to sim_card.c,True,{}
simh/simh,https://github.com/simh/simh,392,2017-02-07T07:08:11Z,2017-02-07T07:35:59Z,2017-02-07T07:35:59Z,MERGED,True,541,16,7,https://github.com/leobru,BESM6: Implemented punchcard output.,1,[],https://github.com/simh/simh/pull/392,https://github.com/leobru,1,https://github.com/simh/simh/pull/392,"Done as directed (apparently, git push -f closes pull requests automatically if the forced push erases all commits requested to be merged).","Done as directed (apparently, git push -f closes pull requests automatically if the forced push erases all commits requested to be merged).",True,{}
simh/simh,https://github.com/simh/simh,395,2017-02-10T05:33:09Z,2017-02-10T05:46:24Z,2017-02-10T05:46:24Z,MERGED,True,39,14,1,https://github.com/leobru,"BESM6: Implemented raw terminal I/O, added WRU announcement.",1,[],https://github.com/simh/simh/pull/395,https://github.com/leobru,1,https://github.com/simh/simh/pull/395,,,True,{}
simh/simh,https://github.com/simh/simh,397,2017-02-12T20:10:19Z,2017-02-12T21:46:30Z,2017-02-12T21:46:30Z,MERGED,True,1,1,1,https://github.com/pkoning2,PDP11: Fix setting of CSR address in RF11 boot command.,1,[],https://github.com/simh/simh/pull/397,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/397,"I found this while playing with the V3 RSTS tapes on Bitsavers, which are for RF system disk.","I found this while playing with the V3 RSTS tapes on Bitsavers, which are for RF system disk.",True,{}
simh/simh,https://github.com/simh/simh,406,2017-03-02T16:14:42Z,2017-03-03T04:00:31Z,2017-03-03T04:00:31Z,CLOSED,False,0,0,0,https://github.com/PDP-1170,Correct the address of MMR3 in a comment,0,[],https://github.com/simh/simh/pull/406,https://github.com/PDP-1170,1,https://github.com/simh/simh/pull/406,Just a comment which jumped out at me which needed changing.  No actual code changes.,Just a comment which jumped out at me which needed changing.  No actual code changes.,True,{}
simh/simh,https://github.com/simh/simh,407,2017-03-03T04:03:49Z,2017-03-03T04:19:54Z,2017-03-03T04:19:54Z,MERGED,True,1,1,1,https://github.com/PDP-1170,PDP11: Correct the address of MMR3 in a comment,1,[],https://github.com/simh/simh/pull/407,https://github.com/PDP-1170,1,https://github.com/simh/simh/pull/407,Only changed the address of MMR3 in a comment.  No actual code changes.,Only changed the address of MMR3 in a comment.  No actual code changes.,True,{}
simh/simh,https://github.com/simh/simh,410,2017-03-09T22:30:37Z,2017-03-10T03:13:49Z,2019-04-29T19:38:34Z,CLOSED,False,15,11,11,https://github.com/shattered,Fix low-hanging issues found by Coverity scan.,6,[],https://github.com/simh/simh/pull/410,https://github.com/shattered,1,https://github.com/simh/simh/pull/410,,,True,{}
simh/simh,https://github.com/simh/simh,410,2017-03-09T22:30:37Z,2017-03-10T03:13:49Z,2019-04-29T19:38:34Z,CLOSED,False,15,11,11,https://github.com/shattered,Fix low-hanging issues found by Coverity scan.,6,[],https://github.com/simh/simh/pull/410,https://github.com/markpizz,2,https://github.com/simh/simh/pull/410#issuecomment-285561553,,Merged via Cherry pick.,True,{}
simh/simh,https://github.com/simh/simh,411,2017-03-10T05:34:35Z,2017-03-10T05:39:50Z,2017-03-10T05:39:50Z,MERGED,True,48,39,5,https://github.com/leobru,Fixed Coverity issues in component BESM6.,2,[],https://github.com/simh/simh/pull/411,https://github.com/leobru,1,https://github.com/simh/simh/pull/411,,,True,{}
simh/simh,https://github.com/simh/simh,413,2017-03-12T00:01:06Z,2017-03-17T16:43:27Z,2019-04-29T19:38:08Z,CLOSED,False,9,5,6,https://github.com/shattered,"Pick low-hanging fruit from Coverity scan, basket 2.",3,[],https://github.com/simh/simh/pull/413,https://github.com/shattered,1,https://github.com/simh/simh/pull/413,,,True,{}
simh/simh,https://github.com/simh/simh,414,2017-03-12T11:08:47Z,2017-03-12T14:56:41Z,2017-03-12T14:56:41Z,MERGED,True,31,12,7,https://github.com/psco,AltairZ80: Fix various static source scanning detected issues (Coveri…,1,[],https://github.com/simh/simh/pull/414,https://github.com/psco,1,https://github.com/simh/simh/pull/414,…ty Scan),…ty Scan),True,{}
simh/simh,https://github.com/simh/simh,415,2017-03-12T17:23:22Z,2017-03-12T17:38:36Z,2017-03-12T17:38:36Z,MERGED,True,209,138,12,https://github.com/psco,AltairZ80: More fixes from source code scan (Coverity Scan),1,[],https://github.com/simh/simh/pull/415,https://github.com/psco,1,https://github.com/simh/simh/pull/415,,,True,{}
simh/simh,https://github.com/simh/simh,416,2017-03-13T02:09:01Z,2017-03-13T02:32:31Z,2017-03-13T02:32:31Z,CLOSED,False,0,0,0,https://github.com/rcornwell,B5500: Fixed Coverity errors. Updated for latest SCP.,0,[],https://github.com/simh/simh/pull/416,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/416,,,True,{}
simh/simh,https://github.com/simh/simh,417,2017-03-13T02:35:43Z,2017-03-13T02:38:08Z,2017-03-13T02:38:08Z,MERGED,True,128,134,6,https://github.com/rcornwell,"B5500: Fixed Coverity errors, and fixed for current SCP.",1,[],https://github.com/simh/simh/pull/417,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/417,,,True,{}
simh/simh,https://github.com/simh/simh,420,2017-03-13T21:00:35Z,2017-03-13T21:03:07Z,2017-03-13T21:03:07Z,MERGED,True,2,2,2,https://github.com/psco,AltairZ80: Fix uninitialized variable (Coverity Scan),1,[],https://github.com/simh/simh/pull/420,https://github.com/psco,1,https://github.com/simh/simh/pull/420,,,True,{}
simh/simh,https://github.com/simh/simh,421,2017-03-14T17:14:11Z,2017-03-14T17:22:10Z,2017-03-14T17:22:10Z,MERGED,True,4,1,1,https://github.com/psco,AltairZ80: Improved diskClose error handling (Coverity Scan),1,[],https://github.com/simh/simh/pull/421,https://github.com/psco,1,https://github.com/simh/simh/pull/421,,,True,{}
simh/simh,https://github.com/simh/simh,422,2017-03-15T00:54:08Z,2017-03-15T01:00:59Z,2017-03-15T01:00:59Z,MERGED,True,7,3,2,https://github.com/rcornwell,B5500: Fixed Coverity bugs.,1,[],https://github.com/simh/simh/pull/422,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/422,,,True,{}
simh/simh,https://github.com/simh/simh,426,2017-03-31T15:15:16Z,2017-03-31T21:04:05Z,2017-03-31T21:04:05Z,MERGED,True,2,2,1,https://github.com/hharte,TX-0: Address CID 1415866 deadcode error.,1,[],https://github.com/simh/simh/pull/426,https://github.com/hharte,1,https://github.com/simh/simh/pull/426,,,True,{}
simh/simh,https://github.com/simh/simh,427,2017-03-31T15:47:14Z,2017-04-01T05:29:05Z,2017-04-01T05:29:05Z,CLOSED,False,2,0,1,https://github.com/psco,AltairZ80: Mark Coverity False Positive for shift operations in rotat…,1,[],https://github.com/simh/simh/pull/427,https://github.com/psco,1,https://github.com/simh/simh/pull/427,…e operations,…e operations,True,{}
simh/simh,https://github.com/simh/simh,428,2017-04-01T06:49:28Z,2017-04-01T07:18:00Z,2017-04-01T07:18:00Z,MERGED,True,2,0,1,https://github.com/psco,AltairZ80: Mark Coverity false positives in rotate operations,1,[],https://github.com/simh/simh/pull/428,https://github.com/psco,1,https://github.com/simh/simh/pull/428,,,True,{}
simh/simh,https://github.com/simh/simh,430,2017-04-07T13:23:40Z,2017-04-07T18:33:29Z,2017-04-07T18:33:29Z,CLOSED,False,1,1,1,https://github.com/ryoon,"Use correct variable name, FONTPATH instead of FONTNAME in comment",1,[],https://github.com/simh/simh/pull/430,https://github.com/ryoon,1,https://github.com/simh/simh/pull/430,,,True,{}
simh/simh,https://github.com/simh/simh,430,2017-04-07T13:23:40Z,2017-04-07T18:33:29Z,2017-04-07T18:33:29Z,CLOSED,False,1,1,1,https://github.com/ryoon,"Use correct variable name, FONTPATH instead of FONTNAME in comment",1,[],https://github.com/simh/simh/pull/430,https://github.com/markpizz,2,https://github.com/simh/simh/pull/430#issuecomment-292617097,,Merged with Cherry Pick to provide standard commit message format and avoid additional merge commit.,True,{}
simh/simh,https://github.com/simh/simh,432,2017-04-23T17:03:58Z,2017-04-23T17:41:27Z,2017-04-26T21:56:54Z,CLOSED,False,573,318,7,https://github.com/9track,Improvements and bug fixes to VAX keyboard and mouse devices,1,[],https://github.com/simh/simh/pull/432,https://github.com/9track,1,https://github.com/simh/simh/pull/432,"Whilst working on a new video device I ran into a few problems with the LKxxx keyboard and I noticed there are already some open issues against the keyboard and mouse devices. These changes should resolve #320 and may help with #272 (although I think that is an SDL issue). I've tested these changes with VWS, UWS and DECwindows with both captured and uncaptured input modes.","Whilst working on a new video device I ran into a few problems with the LKxxx keyboard and I noticed there are already some open issues against the keyboard and mouse devices. These changes should resolve #320 and may help with #272 (although I think that is an SDL issue). I've tested these changes with VWS, UWS and DECwindows with both captured and uncaptured input modes.",True,{}
simh/simh,https://github.com/simh/simh,432,2017-04-23T17:03:58Z,2017-04-23T17:41:27Z,2017-04-26T21:56:54Z,CLOSED,False,573,318,7,https://github.com/9track,Improvements and bug fixes to VAX keyboard and mouse devices,1,[],https://github.com/simh/simh/pull/432,https://github.com/markpizz,2,https://github.com/simh/simh/pull/432#issuecomment-296464738,"Whilst working on a new video device I ran into a few problems with the LKxxx keyboard and I noticed there are already some open issues against the keyboard and mouse devices. These changes should resolve #320 and may help with #272 (although I think that is an SDL issue). I've tested these changes with VWS, UWS and DECwindows with both captured and uncaptured input modes.",Merged with above comments in commit message.,True,{}
simh/simh,https://github.com/simh/simh,433,2017-04-26T22:01:50Z,2017-04-26T22:43:01Z,2019-04-08T18:11:52Z,CLOSED,False,12,11,2,https://github.com/9track,VAX: Fixed Coverity issues,2,[],https://github.com/simh/simh/pull/433,https://github.com/9track,1,https://github.com/simh/simh/pull/433,Fixes for coverity issues 1415454 and 1415576,Fixes for coverity issues 1415454 and 1415576,True,{}
simh/simh,https://github.com/simh/simh,433,2017-04-26T22:01:50Z,2017-04-26T22:43:01Z,2019-04-08T18:11:52Z,CLOSED,False,12,11,2,https://github.com/9track,VAX: Fixed Coverity issues,2,[],https://github.com/simh/simh/pull/433,https://github.com/9track,2,https://github.com/simh/simh/pull/433#issuecomment-297555792,Fixes for coverity issues 1415454 and 1415576,"Tested with VWS, UWS and DECwindows. The QVSS issue only affected polled interrupt mode, which is likely not used by most operating systems.",True,{}
simh/simh,https://github.com/simh/simh,433,2017-04-26T22:01:50Z,2017-04-26T22:43:01Z,2019-04-08T18:11:52Z,CLOSED,False,12,11,2,https://github.com/9track,VAX: Fixed Coverity issues,2,[],https://github.com/simh/simh/pull/433,https://github.com/markpizz,3,https://github.com/simh/simh/pull/433#issuecomment-297562283,Fixes for coverity issues 1415454 and 1415576,Merged with Cherry Pick,True,{}
simh/simh,https://github.com/simh/simh,434,2017-04-26T22:06:38Z,2017-04-26T22:43:21Z,2019-04-08T18:14:19Z,CLOSED,False,19,72,1,https://github.com/9track,VAX: Fixes to VAX-11/750 Unibus adapter to address #346,1,[],https://github.com/simh/simh/pull/434,https://github.com/9track,1,https://github.com/simh/simh/pull/434,I've incorporated Bob's comments from #346 and made a few other changes based on my re-reading of the techincal documents.,I've incorporated Bob's comments from #346 and made a few other changes based on my re-reading of the techincal documents.,True,{}
simh/simh,https://github.com/simh/simh,434,2017-04-26T22:06:38Z,2017-04-26T22:43:21Z,2019-04-08T18:14:19Z,CLOSED,False,19,72,1,https://github.com/9track,VAX: Fixes to VAX-11/750 Unibus adapter to address #346,1,[],https://github.com/simh/simh/pull/434,https://github.com/9track,2,https://github.com/simh/simh/pull/434#issuecomment-297555479,I've incorporated Bob's comments from #346 and made a few other changes based on my re-reading of the techincal documents.,Tested with VMS and Ultrix,True,{}
simh/simh,https://github.com/simh/simh,434,2017-04-26T22:06:38Z,2017-04-26T22:43:21Z,2019-04-08T18:14:19Z,CLOSED,False,19,72,1,https://github.com/9track,VAX: Fixes to VAX-11/750 Unibus adapter to address #346,1,[],https://github.com/simh/simh/pull/434,https://github.com/markpizz,3,https://github.com/simh/simh/pull/434#issuecomment-297562342,I've incorporated Bob's comments from #346 and made a few other changes based on my re-reading of the techincal documents.,Merged with Cherry Pick,True,{}
simh/simh,https://github.com/simh/simh,435,2017-04-26T22:10:37Z,2017-04-26T22:43:33Z,2019-04-08T18:11:57Z,CLOSED,False,4,2,1,https://github.com/9track,PDP11: Minor fixes to DZ device,1,[],https://github.com/simh/simh/pull/435,https://github.com/9track,1,https://github.com/simh/simh/pull/435,"Whilst bringing my own DZ device for the vax4xx branch up to date, I came across a few minor issues in the DZ simulation.","Whilst bringing my own DZ device for the vax4xx branch up to date, I came across a few minor issues in the DZ simulation.",True,{}
simh/simh,https://github.com/simh/simh,435,2017-04-26T22:10:37Z,2017-04-26T22:43:33Z,2019-04-08T18:11:57Z,CLOSED,False,4,2,1,https://github.com/9track,PDP11: Minor fixes to DZ device,1,[],https://github.com/simh/simh/pull/435,https://github.com/markpizz,2,https://github.com/simh/simh/pull/435#issuecomment-297562373,"Whilst bringing my own DZ device for the vax4xx branch up to date, I came across a few minor issues in the DZ simulation.",Merged with Cherry Pick,True,{}
simh/simh,https://github.com/simh/simh,437,2017-04-29T06:14:22Z,2017-04-29T06:24:29Z,2017-04-29T06:24:29Z,MERGED,True,19,8,4,https://github.com/psco,AltairZ80: Clean up of fall through comments,1,[],https://github.com/simh/simh/pull/437,https://github.com/psco,1,https://github.com/simh/simh/pull/437,,,True,{}
simh/simh,https://github.com/simh/simh,440,2017-05-02T16:25:23Z,2017-05-02T16:32:30Z,2017-05-02T16:32:30Z,MERGED,True,1,0,1,https://github.com/psco,AltairZ80: Further fall through comment,1,[],https://github.com/simh/simh/pull/440,https://github.com/psco,1,https://github.com/simh/simh/pull/440,,,True,{}
simh/simh,https://github.com/simh/simh,441,2017-05-02T18:45:11Z,2017-05-02T18:47:36Z,2017-05-02T18:47:36Z,MERGED,True,0,3,1,https://github.com/psco,AltairZ80: Removed unneeded definition of strcasecmp,1,[],https://github.com/simh/simh/pull/441,https://github.com/psco,1,https://github.com/simh/simh/pull/441,,,True,{}
simh/simh,https://github.com/simh/simh,468,2017-06-09T00:21:06Z,2018-02-22T18:18:16Z,2019-04-29T19:38:31Z,CLOSED,False,114,40,1,https://github.com/shattered,PDP11: Improve simulation accuracy of RX device.  ,1,[],https://github.com/simh/simh/pull/468,https://github.com/shattered,1,https://github.com/simh/simh/pull/468,Derived from RX11 high-level emulation in MAME (shattered/mame@8b27f9f),Derived from RX11 high-level emulation in MAME (shattered/mame@8b27f9f),True,{}
simh/simh,https://github.com/simh/simh,468,2017-06-09T00:21:06Z,2018-02-22T18:18:16Z,2019-04-29T19:38:31Z,CLOSED,False,114,40,1,https://github.com/shattered,PDP11: Improve simulation accuracy of RX device.  ,1,[],https://github.com/simh/simh/pull/468,https://github.com/shattered,2,https://github.com/simh/simh/pull/468#issuecomment-350495302,Derived from RX11 high-level emulation in MAME (shattered/mame@8b27f9f),any news on this one?,True,{}
simh/simh,https://github.com/simh/simh,468,2017-06-09T00:21:06Z,2018-02-22T18:18:16Z,2019-04-29T19:38:31Z,CLOSED,False,114,40,1,https://github.com/shattered,PDP11: Improve simulation accuracy of RX device.  ,1,[],https://github.com/simh/simh/pull/468,https://github.com/markpizz,3,https://github.com/simh/simh/pull/468#issuecomment-350503712,Derived from RX11 high-level emulation in MAME (shattered/mame@8b27f9f),"Well, this is hung up due to the fact that it is a single commit with a large number of changes.
The large number of changes mix many cosmetic changes together with substantive changes.  The cosmetic changes (using symbols instead of hard coded numeric values, adding debug output, etc.).
This along with the rather terse single line commit message with no related detailed explanation of the specific problems addressed and why they needed to be addressed, makes this a significant project for someone else to verify.  When changes are made to modules written by Bob Supnik, he gets first crack at reviewing the thinking and implementation of such changes.  In general, he would never even look at a large change set like this.  After extensive discussion,  he might be convinced to embrace the need for a change.  I'd suggest that you rework this change set isolating into separate commits the cosmetic from the functional changes and then explain deeply the justification for the functional changes.  It would be good if you could precisely spell out how to demonstrate the diagnostic tests that failed (providing attached files (in a zip container) to the related discussion so that someone reviewing it can demonstrate the problem themselves).",True,{}
simh/simh,https://github.com/simh/simh,468,2017-06-09T00:21:06Z,2018-02-22T18:18:16Z,2019-04-29T19:38:31Z,CLOSED,False,114,40,1,https://github.com/shattered,PDP11: Improve simulation accuracy of RX device.  ,1,[],https://github.com/simh/simh/pull/468,https://github.com/shattered,4,https://github.com/simh/simh/pull/468#issuecomment-350534209,Derived from RX11 high-level emulation in MAME (shattered/mame@8b27f9f),"No problem, and could you write all this up and publish on Github as contribution guidelines for this repo?

maybe I should reopen older #381 -- it has smaller set of changes",True,{}
simh/simh,https://github.com/simh/simh,477,2017-07-04T23:51:36Z,2017-07-05T03:24:07Z,2017-07-05T03:24:07Z,CLOSED,False,6,0,1,https://github.com/boxysean,Add libSDL note in Spacewar! README,1,[],https://github.com/simh/simh/pull/477,https://github.com/boxysean,1,https://github.com/simh/simh/pull/477,"Having this note would have saved me (someone new to simh) some time, and I hope it will save others time in the future.","Having this note would have saved me (someone new to simh) some time, and I hope it will save others time in the future.",True,{}
simh/simh,https://github.com/simh/simh,477,2017-07-04T23:51:36Z,2017-07-05T03:24:07Z,2017-07-05T03:24:07Z,CLOSED,False,6,0,1,https://github.com/boxysean,Add libSDL note in Spacewar! README,1,[],https://github.com/simh/simh/pull/477,https://github.com/markpizz,2,https://github.com/simh/simh/pull/477#issuecomment-312969440,"Having this note would have saved me (someone new to simh) some time, and I hope it will save others time in the future.","This change is somewhat redundant.  If the development components of libsdl isn't installed on the system when the pdp1 simulator is built, the output of the build says:
*** Info ***
*** Info *** The simulator you are building could provide more
*** Info *** functionality if video support were available on your system.
*** Info *** Install the development components of libSDL or libSDL2
*** Info *** packaged for your operating system distribution for
*** Info *** your Linux system:
*** Info ***        $ sudo apt-get install libsdl2-dev
*** Info ***    or
*** Info ***        $ sudo apt-get install libsdl-dev
*** Info ***

OR, if your system isn't Linux, you'll see:
*** Info *** Install the development components of libSDL packaged by your
*** Info *** operating system distribution and rebuild your simulator to
*** Info *** enable this extra functionality.",True,{}
simh/simh,https://github.com/simh/simh,477,2017-07-04T23:51:36Z,2017-07-05T03:24:07Z,2017-07-05T03:24:07Z,CLOSED,False,6,0,1,https://github.com/boxysean,Add libSDL note in Spacewar! README,1,[],https://github.com/simh/simh/pull/477,https://github.com/boxysean,3,https://github.com/simh/simh/pull/477#issuecomment-312970639,"Having this note would have saved me (someone new to simh) some time, and I hope it will save others time in the future.","Agreed, but those warnings didn't pop out at me as blockers for running
Spacewar.

On Jul 4, 2017 8:16 PM, ""Mark Pizzolato"" <notifications@github.com> wrote:

This change is somewhat redundant. If the development components of libsdl
isn't installed on the system when the pdp1 simulator is built, the output
of the build says:

*** Info ***
*** Info *** The simulator you are building could provide more
*** Info *** functionality if video support were available on your system.
*** Info *** Install the development components of libSDL or libSDL2
*** Info *** packaged for your operating system distribution for
*** Info *** your Linux system:
*** Info ***        $ sudo apt-get install libsdl2-dev
*** Info ***    or
*** Info ***        $ sudo apt-get install libsdl-dev
*** Info ***

OR, if your system isn't Linux, you'll see:

*** Info *** Install the development components of libSDL packaged by your
*** Info *** operating system distribution and rebuild your simulator to
info *** Info *** enable this extra functionality.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub
<#477 (comment)>, or mute the
thread
<https://github.com/notifications/unsubscribe-auth/AAjCM10_tMyiZ_eO64zzAo99lmbAAu5Kks5sKtXJgaJpZM4ONvcY>
.",True,{}
simh/simh,https://github.com/simh/simh,477,2017-07-04T23:51:36Z,2017-07-05T03:24:07Z,2017-07-05T03:24:07Z,CLOSED,False,6,0,1,https://github.com/boxysean,Add libSDL note in Spacewar! README,1,[],https://github.com/simh/simh/pull/477,https://github.com/markpizz,4,https://github.com/simh/simh/pull/477#issuecomment-312987528,"Having this note would have saved me (someone new to simh) some time, and I hope it will save others time in the future.",Merged with Cherry Pick to fix commit comment to standard form.,True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/redshirtrob,1,https://github.com/simh/simh/pull/485,"Update the README with directions for installing the missing
libraries.","Update the README with directions for installing the missing
libraries.",True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/markpizz,2,https://github.com/simh/simh/pull/485#issuecomment-344470057,"Update the README with directions for installing the missing
libraries.",Sorry.  Using Homebrew libraries on OS X isn't supported.  We explicitly support MacPorts and really aren't interested in the expanded complexity matrix that exists when other package sources come into the picture.,True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/redshirtrob,3,https://github.com/simh/simh/pull/485#issuecomment-344480410,"Update the README with directions for installing the missing
libraries.",What a massive disappointment...,True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/markpizz,4,https://github.com/simh/simh/pull/485#issuecomment-344481164,"Update the README with directions for installing the missing
libraries.","There are good number of headaches that will come along with just picking up things found in /usr/local/lib, which is where Homebrew puts/keeps things, since this is also where most 'build it yourself' packages will also land.  Having a contained package comes with the significant value that those actually packaging things actually test the resultant packages and make sure that things actually work.  When folks build their own libraries from scratch, we've seen a good number of subtle problems which we're not really interested in fielding.",True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/redshirtrob,5,https://github.com/simh/simh/pull/485#issuecomment-344483365,"Update the README with directions for installing the missing
libraries.","I guess I'm surprised there are that many people actually installing software in /usr/local on macOS, outside of Homebrew. Given the increasing popularity of Homebrew over Fink and MacPorts in the past 8 years, I expected a warmer reception. Nevertheless, I have no pressing need to build this software on macOS, I was merely trying to upstream something I thought might be helpful to others.
I realize there's a philosophical issue with where Homebrew places things. I might be persuaded to disagree if it was anything resembling a proper Unix, but I prefer to be pragmatic. But it's not my project to maintain so I understand your position.",True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/markpizz,6,https://github.com/simh/simh/pull/485#issuecomment-348729577,"Update the README with directions for installing the missing
libraries.",I think we're now allowing both MacPorts and HomeBrew on macOS. Your comments and those of others inspired a way to tolerate HomeBrew's use of /usr/local while still 'mostly' avoiding complications with user built libraries.,True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/jguillaumes,7,https://github.com/simh/simh/pull/485#issuecomment-348731288,"Update the README with directions for installing the missing
libraries.","I moved to Homebrew some months ago. I patched the makefile to work with /usr/local and found the only thing to be modified is the setup of LIBPATH, since /usr/local/include is already taken (it comes from the compiler configuration). Alternatively, a symlink between /usr/local and /opt/local is a patchy and ugly solution (that works).
I think you can find TWO possible problems related to homebrew:


The posible simultaneous use of macports and homebrew, That is NOT recommended by the homebrew guys and imho should be tagged as unsupported.


The “Cellar only” homebrew packages. Those do not create symlinks in /usr/local/bin nor /usr/local/lib et al; homebrew installs them in /usr/local/Cellar/package/… and warns the user to define LDFLAGS and CPPFLAGS to use the brewed packages in build processes. That happens with packages that can conflict with Apple provided ones; the best example being openssl.


More posible pain points: some packages have different configuration in macports and homebrew. VDE, for example, is provided without tun tap support in the homebrew version. The macports version can be installed with tun tap support adding “+tuntap”, while the brew version must be compiled from sources after modifying the “formula” to incorporate that.
In general, after some initial suffering I’m completely OK with homebrew, and the changes needed to support it in the makefile are quite small.",True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/markpizz,8,https://github.com/simh/simh/pull/485#issuecomment-348731374,"Update the README with directions for installing the missing
libraries.",Please try the latest commit.,True,{}
simh/simh,https://github.com/simh/simh,485,2017-10-16T00:13:16Z,2017-11-15T02:52:01Z,2017-12-03T00:47:59Z,CLOSED,False,9,0,2,https://github.com/redshirtrob,Add LIBPATH checks to support libraries installed via Homebrew,1,[],https://github.com/simh/simh/pull/485,https://github.com/jguillaumes,9,https://github.com/simh/simh/pull/485#issuecomment-348731602,"Update the README with directions for installing the missing
libraries.","Wow! Now it adds the whole Cellar to the build! :)
$ ./BIN/vax

MicroVAX 3900 simulator V4.0-0 Beta        git commit id: 0da9a49c
sim> show version
MicroVAX 3900 simulator V4.0-0 Beta
    Simulator Framework Capabilities:
        64b data
        64b addresses
        Threaded Ethernet Packet transports:PCAP:TAP:VDE:NAT:UDP
        Idle/Throttling support is available
        Virtual Hard Disk (VHD) support
        Asynchronous I/O support (Lock free asynchronous event queue)
        Asynchronous Clock support
        FrontPanel API Version 6
    Host Platform:
        Compiler: GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.38)
        Simulator Compiled as C arch: x64 (Release Build) on Dec  3 2017 at 01:45:23
        Memory Access: Little Endian
        Memory Pointer Size: 64 bits
        Large File (>2GB) support
        SDL Video support: SDL Version 2.0.7
        PCRE RegEx support for EXPECT commands
        OS clock resolution: 1ms
        Time taken by msleep(1): 1ms
        OS: Darwin macjordie.jguillaumes.dyndns.org 17.2.0 Darwin Kernel Version 17.2.0: Fri Sep 29 18:27:05 PDT 2017; root:xnu-4570.20.62~3/RELEASE_X86_64 x86_64
        git commit id: 0da9a49c
sim> show ether
ETH devices:
 eth0	tap:tapN                             (Integrated Tun/Tap support)
 eth1	vde:device                           (Integrated VDE support)
 eth2	nat:{optional-nat-parameters}        (Integrated NAT (SLiRP) support)
 eth3	udp:sourceport:remotehost:remoteport (Integrated UDP bridge support)
libpcap version 1.8.1 -- Apple version 79.20.1
sim> 

Awesome!",True,{}
simh/simh,https://github.com/simh/simh,490,2017-11-25T03:11:36Z,2017-11-25T10:22:27Z,2017-11-25T18:20:37Z,CLOSED,False,531,242,10,https://github.com/sethm,3b2: Cleanup and passing diagnostics,6,[],https://github.com/simh/simh/pull/490,https://github.com/sethm,1,https://github.com/simh/simh/pull/490,"This set of changes cleans up several bugs and addresses Coverity issues. Additionally, the system clock has been fixed such that boot-time and full offline diagnostics both pass for the first time.","This set of changes cleans up several bugs and addresses Coverity issues. Additionally, the system clock has been fixed such that boot-time and full offline diagnostics both pass for the first time.",True,{}
simh/simh,https://github.com/simh/simh,490,2017-11-25T03:11:36Z,2017-11-25T10:22:27Z,2017-11-25T18:20:37Z,CLOSED,False,531,242,10,https://github.com/sethm,3b2: Cleanup and passing diagnostics,6,[],https://github.com/simh/simh/pull/490,https://github.com/markpizz,2,https://github.com/simh/simh/pull/490#issuecomment-346931844,"This set of changes cleans up several bugs and addresses Coverity issues. Additionally, the system clock has been fixed such that boot-time and full offline diagnostics both pass for the first time.",Commits merged with interactive rebase.  See private email.,True,{}
simh/simh,https://github.com/simh/simh,491,2017-11-27T02:27:06Z,2017-11-27T09:57:37Z,2017-11-27T09:57:37Z,MERGED,True,393,26,2,https://github.com/sethm,3b2: Time of Day Clock,1,[],https://github.com/simh/simh/pull/491,https://github.com/sethm,1,https://github.com/simh/simh/pull/491,"This change adds support for storing time between boots in the Time
of Day clock. An effort has been made to keep the Time of Day clock
in sync with the wall clock between boots, so that user-set time
advances properly between boots.


Added a couple of custom help routines for TOD and NVRAM.
I will be filling in more help routines as time permits.","This change adds support for storing time between boots in the Time
of Day clock. An effort has been made to keep the Time of Day clock
in sync with the wall clock between boots, so that user-set time
advances properly between boots.


Added a couple of custom help routines for TOD and NVRAM.
I will be filling in more help routines as time permits.",True,{}
simh/simh,https://github.com/simh/simh,495,2017-11-29T21:47:36Z,2017-11-29T23:55:56Z,2017-11-29T23:55:56Z,MERGED,True,44,198,4,https://github.com/sethm,3b2: Improve TOD calculation,1,[],https://github.com/simh/simh/pull/495,https://github.com/sethm,1,https://github.com/simh/simh/pull/495,Improves the Time-of-Day clock calculations.,Improves the Time-of-Day clock calculations.,True,{}
simh/simh,https://github.com/simh/simh,496,2017-11-30T00:15:04Z,2017-11-30T00:47:43Z,2017-11-30T00:47:43Z,MERGED,True,2,2,1,https://github.com/sethm,3b2: Use localtime instead of localtime_r,1,[],https://github.com/simh/simh/pull/496,https://github.com/sethm,1,https://github.com/simh/simh/pull/496,,,True,{}
simh/simh,https://github.com/simh/simh,497,2017-11-30T16:31:56Z,2017-11-30T17:25:12Z,2017-11-30T17:25:12Z,MERGED,True,9,2,3,https://github.com/sethm,3b2: Coverity issue cleanup,1,[],https://github.com/simh/simh/pull/497,https://github.com/sethm,1,https://github.com/simh/simh/pull/497,Cleanup of coverity issues.,Cleanup of coverity issues.,True,{}
simh/simh,https://github.com/simh/simh,498,2017-12-01T01:44:29Z,2017-12-02T05:05:43Z,2017-12-02T05:05:43Z,MERGED,True,4,13,2,https://github.com/sethm,3b2: Remove unused variables,1,[],https://github.com/simh/simh/pull/498,https://github.com/sethm,1,https://github.com/simh/simh/pull/498,,,True,{}
simh/simh,https://github.com/simh/simh,501,2017-12-10T05:06:05Z,2017-12-10T05:29:27Z,2017-12-10T05:29:27Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Initial CONTTY support,0,[],https://github.com/simh/simh/pull/501,https://github.com/sethm,1,https://github.com/simh/simh/pull/501,Initial support for the second on-board serial port.,Initial support for the second on-board serial port.,True,{}
simh/simh,https://github.com/simh/simh,502,2017-12-10T05:31:39Z,2017-12-10T05:37:47Z,2017-12-10T05:37:47Z,MERGED,True,246,211,4,https://github.com/sethm,3b2: Initial CONTTY support,1,[],https://github.com/simh/simh/pull/502,https://github.com/sethm,1,https://github.com/simh/simh/pull/502,Initial support for second on-board serial port,Initial support for second on-board serial port,True,{}
simh/simh,https://github.com/simh/simh,503,2017-12-10T20:04:57Z,2017-12-10T20:06:55Z,2017-12-10T20:06:55Z,MERGED,True,13,5,1,https://github.com/sethm,3b2: Fix overflow of mask bits in INSFW/EXTFW,1,[],https://github.com/simh/simh/pull/503,https://github.com/sethm,1,https://github.com/simh/simh/pull/503,"An overflow bug was causing INSFW and EXTFW to fail
on Windows hosts compiled with Microsoft Visual Studio.
This commit fixes the issue and causes 3B2 diagnostics
to pass under win32.","An overflow bug was causing INSFW and EXTFW to fail
on Windows hosts compiled with Microsoft Visual Studio.
This commit fixes the issue and causes 3B2 diagnostics
to pass under win32.",True,{}
simh/simh,https://github.com/simh/simh,506,2017-12-13T22:28:30Z,2017-12-14T22:29:02Z,2017-12-14T22:29:02Z,MERGED,True,398,247,5,https://github.com/sethm,3b2: Support for multiple integrated disks,3,[],https://github.com/simh/simh/pull/506,https://github.com/sethm,1,https://github.com/simh/simh/pull/506,"This commit improves the integrated disk (ID) controller's behavior,
enabling full support for up to two 72MB (emulated WREN II)
integrated winchester disks.","This commit improves the integrated disk (ID) controller's behavior,
enabling full support for up to two 72MB (emulated WREN II)
integrated winchester disks.",True,{}
simh/simh,https://github.com/simh/simh,507,2017-12-15T21:34:04Z,2017-12-15T21:36:48Z,2017-12-15T21:36:48Z,MERGED,True,49,18,5,https://github.com/sethm,Soft Power-Off and Critical MMU fix,2,[],https://github.com/simh/simh/pull/507,https://github.com/sethm,1,https://github.com/simh/simh/pull/507,"Two commits:


Soft power-off, providing support for the emulator to power itself off via a software command, as in the real 3B2/400.


Fix for a critical MMU bug that had been lurking undetected for a surprisingly long time, but prevented C-Kermit from being compiled.","Two commits:


Soft power-off, providing support for the emulator to power itself off via a software command, as in the real 3B2/400.


Fix for a critical MMU bug that had been lurking undetected for a surprisingly long time, but prevented C-Kermit from being compiled.",True,{}
simh/simh,https://github.com/simh/simh,509,2017-12-17T00:08:11Z,2017-12-17T00:16:06Z,2017-12-17T00:16:06Z,MERGED,True,70,49,4,https://github.com/sethm,3b2: CONTTY line configuration,1,[],https://github.com/simh/simh/pull/509,https://github.com/sethm,1,https://github.com/simh/simh/pull/509,Adds modem control line speed configuration to prevent FIFO overflow.,Adds modem control line speed configuration to prevent FIFO overflow.,True,{}
simh/simh,https://github.com/simh/simh,510,2017-12-17T19:34:11Z,2017-12-17T19:37:39Z,2017-12-17T19:37:39Z,MERGED,True,3,9,4,https://github.com/sethm,3b2: Fix warnings generated by older GCC,1,[],https://github.com/simh/simh/pull/510,https://github.com/sethm,1,https://github.com/simh/simh/pull/510,"GCC 4.1.2 produced several warnings about inline functions.
This commit fixes those warnings.","GCC 4.1.2 produced several warnings about inline functions.
This commit fixes those warnings.",True,{}
simh/simh,https://github.com/simh/simh,511,2017-12-22T17:05:51Z,2017-12-22T18:22:58Z,2017-12-22T18:22:59Z,CLOSED,False,0,0,0,https://github.com/rcornwell,B5500: Update idling.,0,[],https://github.com/simh/simh/pull/511,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/511,This fix solved the CPU not idling also added in usage documents on the B5500.,This fix solved the CPU not idling also added in usage documents on the B5500.,True,{}
simh/simh,https://github.com/simh/simh,512,2017-12-27T23:14:54Z,2017-12-28T00:34:58Z,2017-12-28T00:34:58Z,MERGED,True,138,133,4,https://github.com/sethm,3b2: Allow handling of TRACE and BREAKPOINT traps,1,[],https://github.com/simh/simh/pull/512,https://github.com/sethm,1,https://github.com/simh/simh/pull/512,"The 3B2 emulator did not have support for traps, rendering debugging
under the simulator fairly useless. This change adds support for
trap handling. The 'sdb' UNIX debugger under SVR3 should now work
correctly.","The 3B2 emulator did not have support for traps, rendering debugging
under the simulator fairly useless. This change adds support for
trap handling. The 'sdb' UNIX debugger under SVR3 should now work
correctly.",True,{}
simh/simh,https://github.com/simh/simh,513,2017-12-28T01:22:45Z,2017-12-28T01:28:52Z,2017-12-28T01:28:52Z,MERGED,True,17,1,2,https://github.com/sethm,3b2: Differentiate HD135 and HD161 disks,1,[],https://github.com/simh/simh/pull/513,https://github.com/sethm,1,https://github.com/simh/simh/pull/513,,,True,{}
simh/simh,https://github.com/simh/simh,514,2017-12-28T20:14:06Z,2017-12-29T00:08:19Z,2017-12-29T00:08:19Z,MERGED,True,77,3,2,https://github.com/sethm,3b2: Allow OS to set baud rate and parity,1,[],https://github.com/simh/simh/pull/514,https://github.com/sethm,1,https://github.com/simh/simh/pull/514,"The CONTTY emulation now honors parity, baud rate, and character bit
size as set by the operating system.","The CONTTY emulation now honors parity, baud rate, and character bit
size as set by the operating system.",True,{}
simh/simh,https://github.com/simh/simh,515,2017-12-29T21:53:43Z,2017-12-31T04:05:27Z,2017-12-31T04:54:18Z,MERGED,True,4,3,3,https://github.com/rcornwell,I7000: Fixed coverity warnings.,1,[],https://github.com/simh/simh/pull/515,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/515,,,True,{}
simh/simh,https://github.com/simh/simh,515,2017-12-29T21:53:43Z,2017-12-31T04:05:27Z,2017-12-31T04:54:18Z,MERGED,True,4,3,3,https://github.com/rcornwell,I7000: Fixed coverity warnings.,1,[],https://github.com/simh/simh/pull/515,https://github.com/markpizz,2,https://github.com/simh/simh/pull/515#issuecomment-354584242,,"You 'fixed' the warnings that coverity is issuing about not checking the return status when you call sim_process_event(), but merely explicitly ignoring all status might not be the right answer.  My first thought was that a console user types ^E and that is detected by a keyboard probe of the console device.  As it turns out, that won't be a problem since those probes return SCPE_OK and set the global stop_cpu to 1 if ^E is observed, which your sim_instr() instruction loop should stop on.  There might be other cases though...",True,{}
simh/simh,https://github.com/simh/simh,515,2017-12-29T21:53:43Z,2017-12-31T04:05:27Z,2017-12-31T04:54:18Z,MERGED,True,4,3,3,https://github.com/rcornwell,I7000: Fixed coverity warnings.,1,[],https://github.com/simh/simh/pull/515,https://github.com/rcornwell,3,https://github.com/simh/simh/pull/515#issuecomment-354585320,,"In both of the cases I ignore the return code, the simulator will return to the command prompt after it has processed all pending I/O. All I need do is let any events that need to be processes to be scheduled. So it does not matter what is returned.",True,{}
simh/simh,https://github.com/simh/simh,516,2018-01-01T00:23:18Z,2018-01-01T02:45:36Z,2018-01-01T02:45:36Z,MERGED,True,7,3,1,https://github.com/rcornwell,I7000: Updated copyright notice on i7000_com.c.,1,[],https://github.com/simh/simh/pull/516,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/516,Added in attributions for original code.,Added in attributions for original code.,True,{}
simh/simh,https://github.com/simh/simh,519,2018-01-18T08:55:08Z,2018-01-18T10:22:09Z,2018-01-18T10:22:09Z,CLOSED,False,14,14,1,https://github.com/dcoshea,Fix a number of typos in README.md.,1,[],https://github.com/simh/simh/pull/519,https://github.com/dcoshea,1,https://github.com/simh/simh/pull/519,"This commit fixes a number of typos in README.md, most significantly a
typo in the name of the new command ""GO UNTILE"".","This commit fixes a number of typos in README.md, most significantly a
typo in the name of the new command ""GO UNTILE"".",True,{}
simh/simh,https://github.com/simh/simh,519,2018-01-18T08:55:08Z,2018-01-18T10:22:09Z,2018-01-18T10:22:09Z,CLOSED,False,14,14,1,https://github.com/dcoshea,Fix a number of typos in README.md.,1,[],https://github.com/simh/simh/pull/519,https://github.com/markpizz,2,https://github.com/simh/simh/pull/519#issuecomment-358602849,"This commit fixes a number of typos in README.md, most significantly a
typo in the name of the new command ""GO UNTILE"".","Cherry picked commit to correct formatting of commit message.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,522,2018-01-26T09:20:08Z,2018-01-27T04:43:37Z,2018-01-27T18:27:00Z,CLOSED,False,20,5,1,https://github.com/jguillaumes,sim_ether.c: Add suppor to attach to specific VDE virtual switch port,3,[],https://github.com/simh/simh/pull/522,https://github.com/jguillaumes,1,https://github.com/simh/simh/pull/522,"Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.","Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.",True,{}
simh/simh,https://github.com/simh/simh,522,2018-01-26T09:20:08Z,2018-01-27T04:43:37Z,2018-01-27T18:27:00Z,CLOSED,False,20,5,1,https://github.com/jguillaumes,sim_ether.c: Add suppor to attach to specific VDE virtual switch port,3,[],https://github.com/simh/simh/pull/522,https://github.com/Rhialto,2,https://github.com/simh/simh/pull/522#issuecomment-360849431,"Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.",@jguillaumes Good idea for klh10 too!,True,{}
simh/simh,https://github.com/simh/simh,522,2018-01-26T09:20:08Z,2018-01-27T04:43:37Z,2018-01-27T18:27:00Z,CLOSED,False,20,5,1,https://github.com/jguillaumes,sim_ether.c: Add suppor to attach to specific VDE virtual switch port,3,[],https://github.com/simh/simh/pull/522,https://github.com/jguillaumes,3,https://github.com/simh/simh/pull/522#issuecomment-360854218,"Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.",That's next in my to-do list. :),True,{}
simh/simh,https://github.com/simh/simh,522,2018-01-26T09:20:08Z,2018-01-27T04:43:37Z,2018-01-27T18:27:00Z,CLOSED,False,20,5,1,https://github.com/jguillaumes,sim_ether.c: Add suppor to attach to specific VDE virtual switch port,3,[],https://github.com/simh/simh/pull/522,https://github.com/markpizz,4,https://github.com/simh/simh/pull/522#issuecomment-360959842,"Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.","Great idea.
The implementation had a few minor issues:

mixed line endings in sim_ether.c
overwriting of the device name string while parsing it (it might be needed later), so its format can be corrected, but the changed result must be a valid input for a subsequent call with the updated value
missed mention of the vde switch port in the output of SHOW ETHERNET
undesirable merge commits prior to pull request - cherry picked changes
committed changes with Jordi as author.",True,{}
simh/simh,https://github.com/simh/simh,522,2018-01-26T09:20:08Z,2018-01-27T04:43:37Z,2018-01-27T18:27:00Z,CLOSED,False,20,5,1,https://github.com/jguillaumes,sim_ether.c: Add suppor to attach to specific VDE virtual switch port,3,[],https://github.com/simh/simh/pull/522,https://github.com/markpizz,5,https://github.com/simh/simh/pull/522#issuecomment-361004760,"Rationale
VDE implements a virtual switch which allows buiding virtual networks for  virtual machines and simulators. The implemented switch is actually a managed switch, capable of, for instance, defining virtual ports as tagged for VLAN definition.
This change allows the simh user to specify a specific virtual port to attach the simulated ethernet card to. That would allow using VLAN tagged networks to separate -for example- the testing machines in a virtual network.
User impact
The user can add an optional port number to the VDE attach string. For example:
attach xq vde:/tmp/vde.ctl:8

That would attach the XQ device to the virtual port number 8. That port has to be previously defined using vdeterm and set up correspondlingly.
The port number is optional. If it is not specified simh will attach to whatever port VDE makes available.","Sorry I didn't push the change out before I closed this issue.  A git glitch on my part.  :-(
It is there now.
Thanks again.",True,{}
simh/simh,https://github.com/simh/simh,525,2018-02-15T15:11:33Z,2018-02-16T05:22:42Z,2018-02-16T05:22:42Z,MERGED,True,7,7,2,https://github.com/sethm,3b2: Fix windows build,1,[],https://github.com/simh/simh/pull/525,https://github.com/sethm,1,https://github.com/simh/simh/pull/525,,,True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/philbudne,1,https://github.com/simh/simh/pull/526,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)","Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)",True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/526#issuecomment-366450696,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)",Any known caveats?,True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/philbudne,3,https://github.com/simh/simh/pull/526#issuecomment-366466461,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)","1.  I just (force) pushed an update to my 340 branch,
    I had left out updates to PDP11/pdp11_vt.c

2.  PDP1/spacewar1/spacewar.rim behaves exactly the
    same with and without my changes:
    It displays a frozen screen.

    I've never tried it since the merge of my display code,
    with sim_video/SDL or X11, so I can't say where the issue
    might be....

BUT display.c works using X11 and the ""Type 340"" display system under
Richard Cornwell's KA10 simulation.",True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/markpizz,4,https://github.com/simh/simh/pull/526#issuecomment-366474147,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)","I don't know how to play the spacewar game, but as far as I can tell, building the pdp1 simulator with OS provided SDL2 package on Ubuntu produces a working program.  I follow the  simple instructions in the pdp1/spacewar1/README file and:
sim> set dpy enable
sim> attach ptr spacewar.rim
sim> boot ptr

The build on Windows also produces a program which behaves the same.
With the program running, pressing keys seem to change the behavior of the elements, so the pieces seem to be working.
As for this commit.  A compile on OS X produces a compiler warning:
display/display.c:1004:35: warning: '/*' within block comment [-Wcomment]
    /*printf(""down '%c'\r\n"", k); /**/

Additionally, you've changed the call signatures for set_cpu_switches() and get_cpu_switches().  There are other modules in the display directory which reference these APIs:

vttest.c
xy.c
test.c
It would seem logical if all were changed to use the revised interfaces, right?",True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/philbudne,5,https://github.com/simh/simh/pull/526#issuecomment-366483714,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)","Yes: I'll fix vttest.c (which I found broken by a signature change to
display_init) and test.c (tho it's doubtful anyone has built/used them
since I wrote the code 15 years ago!) and make sure they include
display.h so they won't build if the signatures change!

xy.c seems to be an unused, older copy of display.c; I have some
recall of a file being renamed for some reason or another when it was
pulled into the SimH repo.",True,{}
simh/simh,https://github.com/simh/simh,526,2018-02-17T12:46:52Z,2018-02-18T01:17:53Z,2018-02-18T01:17:53Z,MERGED,True,1300,1337,16,https://github.com/philbudne,"DISPLAY: Update display code to support DEC Type 340, and 36 switches",2,[],https://github.com/simh/simh/pull/526,https://github.com/markpizz,6,https://github.com/simh/simh/pull/526#issuecomment-366483939,"Only interface code to Type 340 is for Richard Cornwell's KA10
(but could be used on PDP-1/4/7/9 as well)",Ahhhh...  I think I copied xy.c to display.c to avoid a file name conflict.  I left the original file in the event that some external (non simh code) referenced things by the original name.  It is fine by me if it goes away.,True,{}
simh/simh,https://github.com/simh/simh,529,2018-02-20T06:08:48Z,2018-02-20T06:45:58Z,2018-02-20T06:45:58Z,MERGED,True,43,41,2,https://github.com/philbudne,"DISPLAY: fix type340 character code, fix A, fix/complete lower case letters",1,[],https://github.com/simh/simh/pull/529,https://github.com/philbudne,1,https://github.com/simh/simh/pull/529,,,True,{}
simh/simh,https://github.com/simh/simh,530,2018-02-20T16:58:10Z,2018-02-20T17:01:47Z,2018-02-20T17:01:47Z,MERGED,True,15,8,1,https://github.com/philbudne,"DISPLAY: Type 30/340 phosphor was likely P7 not P17; update variable name, comments",1,[],https://github.com/simh/simh/pull/530,https://github.com/philbudne,1,https://github.com/simh/simh/pull/530,,,True,{}
simh/simh,https://github.com/simh/simh,531,2018-02-21T04:52:39Z,2018-02-21T05:35:44Z,2018-02-21T06:13:44Z,MERGED,True,0,2,1,https://github.com/philbudne,DISPLAY: remove duplicate end of block comment oops,2,[],https://github.com/simh/simh/pull/531,https://github.com/philbudne,1,https://github.com/simh/simh/pull/531,"Probably one of those ""just one more edit before I commit/push"" mistakes.
Sorry!","Probably one of those ""just one more edit before I commit/push"" mistakes.
Sorry!",True,{}
simh/simh,https://github.com/simh/simh,531,2018-02-21T04:52:39Z,2018-02-21T05:35:44Z,2018-02-21T06:13:44Z,MERGED,True,0,2,1,https://github.com/philbudne,DISPLAY: remove duplicate end of block comment oops,2,[],https://github.com/simh/simh/pull/531,https://github.com/markpizz,2,https://github.com/simh/simh/pull/531#issuecomment-367215140,"Probably one of those ""just one more edit before I commit/push"" mistakes.
Sorry!","Not yet:
display/display.c:1010:35: warning: '/*' within block comment [-Wcomment]
/*printf(""down '%c'\r\n"", k); /**/
That was the line I was talking about having been removed.
You should be able to find these yourself.  I suspect you're working on a
Linux system, right?   If so, you should be able to install clang and then
try to build a simulator with:
make tx-0 GCC=clang",True,{}
simh/simh,https://github.com/simh/simh,531,2018-02-21T04:52:39Z,2018-02-21T05:35:44Z,2018-02-21T06:13:44Z,MERGED,True,0,2,1,https://github.com/philbudne,DISPLAY: remove duplicate end of block comment oops,2,[],https://github.com/simh/simh/pull/531,https://github.com/philbudne,3,https://github.com/simh/simh/pull/531#issuecomment-367220117,"Probably one of those ""just one more edit before I commit/push"" mistakes.
Sorry!","psco wrote:
 Extra */ in line 116 of display.c should be removed as some compilers choke here.
You wrote:
 @psco pointed this out in your last pull request
I thought I was fixing the line psco referred to, by line number.

I have some recall of your saying you had removed a line, and I thought
it was gone.  I certainly didn't add anything back on purpose.

I've I've done anything to offend, I'm sorry, but I can't help feeling
you're being unnecessarily unkind.  I will admit I try to ignore most
of what you say, due to a history of such behavior.

I've re-removed the /*printf(.....);/**/ line and pushed it to the
branch with the PR I just opened.

I _suspect_ the line was hastily added, and incompletely removed when
I was trying to figure out why the PDP-1 simulator won't run spacewar
on Linux.

Linux isn't my favorite O/S either, but my work using it pays the bills.",True,{}
simh/simh,https://github.com/simh/simh,531,2018-02-21T04:52:39Z,2018-02-21T05:35:44Z,2018-02-21T06:13:44Z,MERGED,True,0,2,1,https://github.com/philbudne,DISPLAY: remove duplicate end of block comment oops,2,[],https://github.com/simh/simh/pull/531,https://github.com/markpizz,4,https://github.com/simh/simh/pull/531#issuecomment-367224560,"Probably one of those ""just one more edit before I commit/push"" mistakes.
Sorry!","I thought I was fixing the line psco referred to, by line number.

You indeed were, which was great.  I guess psco didn't bother mentioning the other once since it had been previously mentioned.  I didn't check before accepting the pull request.

I have some recall of your saying you had removed a line, and I thought
it was gone.  I certainly didn't add anything back on purpose.

I didn't think you deliberately did, but somehow you might have missed some warning which led up to it.
I suspect you were merely working from the latest display.c version in your working directory and made the handful of changes.  Then, you did a pull from github/simh/simh master branch before committing and then generated the pull request.  Git on my environment will issue a warning if I try to pull from master (or any branch) and the changes arriving in that pull request affect the same files in my working directory that have not yet been committed.  In this case, the pull will not complete and I'll have to look closely at what is going on and untangle things before proceeding.  I presume that something like that happened when you did your pull and you somehow forced the pull anyway and then committed the version you'd had before.  Hence the line I previously removed reappeared.

I suspect the line was hastily added, and incompletely removed when
I was trying to figure out why the PDP-1 simulator won't run spacewar
on Linux.

What version of Linux are you running?  Are you building with the makefile from the master branch?
I just tested this pdp1 running spacewar seems to work for me with Ubuntu 16.04.",True,{}
simh/simh,https://github.com/simh/simh,534,2018-03-03T18:42:57Z,2018-03-03T18:59:08Z,2018-03-03T18:59:08Z,MERGED,True,10,8,2,https://github.com/sethm,3b2: Prevent attempts to ex/dep IO,1,[],https://github.com/simh/simh/pull/534,https://github.com/sethm,1,https://github.com/simh/simh/pull/534,This fix prevents several cases when writing or reading I/O can cause nasty side effects.,This fix prevents several cases when writing or reading I/O can cause nasty side effects.,True,{}
simh/simh,https://github.com/simh/simh,535,2018-03-05T02:00:25Z,2018-03-06T20:10:26Z,2018-03-06T20:10:27Z,MERGED,True,2,1,1,https://github.com/sethm,3b2: Fix unterminated REG array,1,[],https://github.com/simh/simh/pull/535,https://github.com/sethm,1,https://github.com/simh/simh/pull/535,,,True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/538,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/538#issuecomment-373370224,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","I also tried building in AppVeyour, but I couldn't make it work.  MSBuild wouldn't accept the the old project and solution files.  And when I tried /toolsversion:3.5 that didn't work either.
The attempts are visible here:
https://ci.appveyor.com/project/larsbrinkhoff/simh/history",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/538#issuecomment-373371021,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.",This just runs make all.  It would also be possible to build all simulators separately in parallel.,True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/538#issuecomment-373396173,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","@markpizz Please also login to Travis, then go here https://travis-ci.org/profile/markpizz to enable the build.",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/538#issuecomment-373401869,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","Thanks.  The next time someone does a push, a build will be started.",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/markpizz,6,https://github.com/simh/simh/pull/538#issuecomment-374025236,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","Thanks for setting this up so far!
I looked at changing the .travis.yml so that all the potentially useful prerequisite packages are installed:
For Linux the log shows that it would like: libsdl2-dev, libpcap-dev and libvdeplug-dev
For OSX the log shows that it would like: sdl2 and vde
I saw some documentation about how to install prerequisite packages, but not how to describe different steps for different host platforms.  Can you look into this?
As for attempting similar results for a Windows build, there are several things to be addressed:

The current projects/solution are Visual Studio 2008 projects which will auto-convert to a newer version when a newer Visual Studio GUI opens the solution file.  Thus all versions from 2008 onward are supported (*).  Meanwhile, when actually scripting from the solution/project definitions, MSBuild came along with a later version of Visual Studio (prior versions used vcbuild).
The actual build has various external dependencies which are all required and precompiled working versions are contained in a windows-build repo/directory which needs to be located right next to the directory containing the simh repo.  It is not clear how to  get this available and located appropriately, but point 1 needs to be addressed first anyway.

* The pre-compiled windows-build components are usable for all Visual Studio versions up through, but not including Visual Studio Community 2017.  There are many Visual Studio variations here and in general things are forward compatible, but not backward compatible (i.e. VS 2013 projects aren't useful on earlier VS version (VS2008 especially)).",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/538#issuecomment-374041394,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","Travis will set the environment variable TRAVIS_OS_NAME to ""linux"" or ""osx"".  I have this handled in another project, so I can look into it tomorrow.",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/538#issuecomment-374108444,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.",Prerequisite librarires are adressed by #540.,True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/markpizz,9,https://github.com/simh/simh/pull/538#issuecomment-531348344,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","I believe that there is great benefit to running building and testing on Linux and OS/X.  Essentially all of the substantive issues that may be flagged on Linux and OS/X produce indirect benefits on Windows, without any active CI build/test on Windows.
If you're really driven to get Windows working, you should personally get the details for Windows working on a local Windows VM.  You don't need a formal license for Windows to do this.  You can install a current version of Windows (for testing) and merely ignore the on-screen message that suggests that Windows isn't properly licensed.  Testing like this is within the allowed usage scenarios of a test windows install.
More said in #746",True,{}
simh/simh,https://github.com/simh/simh,538,2018-03-15T13:07:32Z,2018-03-15T14:23:19Z,2019-09-16T06:01:29Z,MERGED,True,6,0,2,https://github.com/larsbrinkhoff,Continuous build in Travis CI.,1,[],https://github.com/simh/simh/pull/538,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/538#issuecomment-531650644,"This adds configuration for building in Travis CI, in both Linux and macOS.  For this to take effect, someone will have to login to Travis CI and enable building for the simh repository.","In my view, things that are not subject to automated building and testing are easily subject to bitrot.  If it's not a huge effort, I like to make use of the available CI services.  Running a simple build script is usually quite easy.  Testing may be harder.",True,{}
simh/simh,https://github.com/simh/simh,539,2018-03-15T23:52:43Z,2018-03-16T15:44:41Z,2018-03-20T08:11:50Z,MERGED,True,232,38,4,https://github.com/sethm,3b2: Fix fprint_sym_m,1,[],https://github.com/simh/simh/pull/539,https://github.com/sethm,1,https://github.com/simh/simh/pull/539,Symbolic memory examination was severely broken. This change fixes it.,Symbolic memory examination was severely broken. This change fixes it.,True,{}
simh/simh,https://github.com/simh/simh,539,2018-03-15T23:52:43Z,2018-03-16T15:44:41Z,2018-03-20T08:11:50Z,MERGED,True,232,38,4,https://github.com/sethm,3b2: Fix fprint_sym_m,1,[],https://github.com/simh/simh/pull/539,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/539#issuecomment-373609447,Symbolic memory examination was severely broken. This change fixes it.,First test of Travis CI build status.  Note the green check mark.,True,{}
simh/simh,https://github.com/simh/simh,539,2018-03-15T23:52:43Z,2018-03-16T15:44:41Z,2018-03-20T08:11:50Z,MERGED,True,232,38,4,https://github.com/sethm,3b2: Fix fprint_sym_m,1,[],https://github.com/simh/simh/pull/539,https://github.com/markpizz,3,https://github.com/simh/simh/pull/539#issuecomment-374021791,Symbolic memory examination was severely broken. This change fixes it.,"The build on OSX reports:
3B2/3b2_cpu.c:1404:69: warning: passing 'int8 *' (aka 'signed char *') to parameter of type 'uint8 *' (aka 'unsigned char *') converts between pointers to integer types with different sign [-Wpointer-sign]
offset += decode_operand(pa + offset, instr, (uint8) i, &etype);
^~~~~~
3B2/3b2_cpu.c:1179:78: note: passing argument to parameter 'etype' here
static uint8 decode_operand(uint32 pa, instr *instr, uint8 op_number, uint8 *etype)
^
3B2/3b2_cpu.c:1410:69: warning: passing 'int8 *' (aka 'signed char *') to parameter of type 'uint8 *' (aka 'unsigned char *') converts between pointers to integer types with different sign [-Wpointer-sign]
offset += decode_operand(pa + offset, instr, (uint8) i, &etype);
^~~~~~
3B2/3b2_cpu.c:1179:78: note: passing argument to parameter 'etype' here
static uint8 decode_operand(uint32 pa, instr *instr, uint8 op_number, uint8 *etype)
^
2 warnings generated.",True,{}
simh/simh,https://github.com/simh/simh,539,2018-03-15T23:52:43Z,2018-03-16T15:44:41Z,2018-03-20T08:11:50Z,MERGED,True,232,38,4,https://github.com/sethm,3b2: Fix fprint_sym_m,1,[],https://github.com/simh/simh/pull/539,https://github.com/markpizz,4,https://github.com/simh/simh/pull/539#issuecomment-374510017,Symbolic memory examination was severely broken. This change fixes it.,"Additionally, the Windows build produces:
1>Compiling...
1>3b2_cpu.c
1>..\3B2\3b2_cpu.c(742) : warning C4244: '=' : conversion from 't_value' to 'int32', possible loss of data
1>..\3B2\3b2_cpu.c(773) : warning C4244: '=' : conversion from 't_value' to 'uint8', possible loss of data
1>..\3B2\3b2_cpu.c(783) : warning C4244: '=' : conversion from 't_value' to 'uint8', possible loss of data
1>..\3B2\3b2_cpu.c(728) : warning C4101: 'class' : unreferenced local variable
1>3b2_dmac.c",True,{}
simh/simh,https://github.com/simh/simh,540,2018-03-19T05:42:52Z,2018-03-19T18:01:16Z,2018-03-19T18:01:16Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,Install prerequisite libraries for Travis CI.,1,[],https://github.com/simh/simh/pull/540,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/540,"This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.","This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.",True,{}
simh/simh,https://github.com/simh/simh,540,2018-03-19T05:42:52Z,2018-03-19T18:01:16Z,2018-03-19T18:01:16Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,Install prerequisite libraries for Travis CI.,1,[],https://github.com/simh/simh/pull/540,https://github.com/markpizz,2,https://github.com/simh/simh/pull/540#issuecomment-374299442,"This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.","How about locating the deps.sh script in a .travis directory?
It would be nice if the .travis.yml could be there as well (like the .github directory).  Oh well.",True,{}
simh/simh,https://github.com/simh/simh,540,2018-03-19T05:42:52Z,2018-03-19T18:01:16Z,2018-03-19T18:01:16Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,Install prerequisite libraries for Travis CI.,1,[],https://github.com/simh/simh/pull/540,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/540#issuecomment-374305607,"This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.","Sure, I moved it.  I don't think the yml file can be moved though.",True,{}
simh/simh,https://github.com/simh/simh,540,2018-03-19T05:42:52Z,2018-03-19T18:01:16Z,2018-03-19T18:01:16Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,Install prerequisite libraries for Travis CI.,1,[],https://github.com/simh/simh/pull/540,https://github.com/markpizz,4,https://github.com/simh/simh/pull/540#issuecomment-374305998,"This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.","Also, please add libsdl2-ttf-dev to the Linux package set.  No such package is yet available for HomeBrew on OS X.",True,{}
simh/simh,https://github.com/simh/simh,540,2018-03-19T05:42:52Z,2018-03-19T18:01:16Z,2018-03-19T18:01:16Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,Install prerequisite libraries for Travis CI.,1,[],https://github.com/simh/simh/pull/540,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/540#issuecomment-374307926,"This install some prerequisite  libraries for the Travis CI build.
For an unknown reason I had to install libegl1-mesa-dev and libgles2-mesa-dev too to make apt happy.",Done.,True,{}
simh/simh,https://github.com/simh/simh,541,2018-03-19T20:38:28Z,2018-03-19T21:08:52Z,2018-03-20T06:41:44Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Install sdl2_ttf for Travis macOS.,1,[],https://github.com/simh/simh/pull/541,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/541,As discussed on the mailing list.,As discussed on the mailing list.,True,{}
simh/simh,https://github.com/simh/simh,541,2018-03-19T20:38:28Z,2018-03-19T21:08:52Z,2018-03-20T06:41:44Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Install sdl2_ttf for Travis macOS.,1,[],https://github.com/simh/simh/pull/541,https://github.com/markpizz,2,https://github.com/simh/simh/pull/541#issuecomment-374377977,As discussed on the mailing list.,"Lars,
This change was obvious given your initial setup, so I'd committed that along with a makefile cleanup (suggesting the brew install when the ttf support isn't found).  That commit and this pull request overlapped.",True,{}
simh/simh,https://github.com/simh/simh,542,2018-03-21T01:01:02Z,2018-03-21T01:30:09Z,2018-03-21T01:30:09Z,MERGED,True,5,5,1,https://github.com/sethm,3b2: Fix compiler warnings,1,[],https://github.com/simh/simh/pull/542,https://github.com/sethm,1,https://github.com/simh/simh/pull/542,Clean up compiler warnings on Windows and OS X,Clean up compiler warnings on Windows and OS X,True,{}
simh/simh,https://github.com/simh/simh,543,2018-03-23T03:59:40Z,2018-03-23T21:19:18Z,2018-03-23T21:19:24Z,CLOSED,False,1,1,1,https://github.com/agn453,AltairZ80: Set conditional under CYGWIN so the SIMH device works,1,[],https://github.com/simh/simh/pull/543,https://github.com/agn453,1,https://github.com/simh/simh/pull/543,"Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.","Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.",True,{}
simh/simh,https://github.com/simh/simh,543,2018-03-23T03:59:40Z,2018-03-23T21:19:18Z,2018-03-23T21:19:24Z,CLOSED,False,1,1,1,https://github.com/agn453,AltairZ80: Set conditional under CYGWIN so the SIMH device works,1,[],https://github.com/simh/simh/pull/543,https://github.com/markpizz,2,https://github.com/simh/simh/pull/543#issuecomment-375715489,"Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.","Sorry to be a stickler for conventions, but please resubmit this with the first line of the commit message (the summary line) bounded to 80 characters.",True,{}
simh/simh,https://github.com/simh/simh,543,2018-03-23T03:59:40Z,2018-03-23T21:19:18Z,2018-03-23T21:19:24Z,CLOSED,False,1,1,1,https://github.com/agn453,AltairZ80: Set conditional under CYGWIN so the SIMH device works,1,[],https://github.com/simh/simh/pull/543,https://github.com/agn453,3,https://github.com/simh/simh/pull/543#issuecomment-375793082,"Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.","I thought I had already modified the commit summary (it was 71 characters when I submitted the pull request to you).  I've reduced it even further.  On my original edit it was much longer - however, I cannot find a way using the github web interface to change the summary attached to my agn453/simh patch-1 branch.  You might need to reject this and I'll resubmit a new pull request.",True,{}
simh/simh,https://github.com/simh/simh,544,2018-03-23T21:24:31Z,2018-03-23T22:33:32Z,2018-03-23T22:33:32Z,CLOSED,False,1,1,1,https://github.com/agn453,AltairZ80: Set conditional under CYGWIN so the SIMH device works,24,[],https://github.com/simh/simh/pull/544,https://github.com/agn453,1,https://github.com/simh/simh/pull/544,"Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.","Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.",True,{}
simh/simh,https://github.com/simh/simh,544,2018-03-23T21:24:31Z,2018-03-23T22:33:32Z,2018-03-23T22:33:32Z,CLOSED,False,1,1,1,https://github.com/agn453,AltairZ80: Set conditional under CYGWIN so the SIMH device works,24,[],https://github.com/simh/simh/pull/544,https://github.com/markpizz,2,https://github.com/simh/simh/pull/544#issuecomment-375815672,"Under CYGWIN the conditional tests in the altairz80_sio.c source file for the SIMH pseudo device's getHostsFilenamesCmd and resetSIMHInterfaceCmd functions need to have UNIX_PLATFORM set to 1 - otherwise they do nothing! With this fix, the HDIR host command from CP/M now displays a list of files in host system's current directory under CYGWIN.","Well, I used cherry pick to get your commit message and the change.  I then committed that change with you as the author.  This was necessary to avoid the additional 24 merge commits what were part of this pull request.  If you're not doing other simh work in your local or github repo, this would be a time to delete the github and local repos and clone things again from github.com/simh/simh.",True,{}
simh/simh,https://github.com/simh/simh,547,2018-04-01T01:47:30Z,2018-04-01T06:45:32Z,2018-04-01T06:45:32Z,MERGED,True,2,8,1,https://github.com/sethm,3b2: Fix stack bounds checking bug,1,[],https://github.com/simh/simh/pull/547,https://github.com/sethm,1,https://github.com/simh/simh/pull/547,,,True,{}
simh/simh,https://github.com/simh/simh,548,2018-04-06T00:17:12Z,2018-04-06T04:21:52Z,2018-04-06T04:21:52Z,MERGED,True,111,121,4,https://github.com/sethm,3b2: Refactor MMU and fix two bugs,2,[],https://github.com/simh/simh/pull/548,https://github.com/sethm,1,https://github.com/simh/simh/pull/548,"Add ""SHOW STACK"" support to CPU
An off-by-one error in checking SDT length was fixed.
not-present co-processor R/W should not set Bus timeout bit","Add ""SHOW STACK"" support to CPU
An off-by-one error in checking SDT length was fixed.
not-present co-processor R/W should not set Bus timeout bit",True,{}
simh/simh,https://github.com/simh/simh,549,2018-04-11T21:26:06Z,2018-04-11T21:48:10Z,2018-04-11T21:48:10Z,MERGED,True,264,170,12,https://github.com/sethm,3b2: Refactor DUART and DMA,2,[],https://github.com/simh/simh/pull/549,https://github.com/sethm,1,https://github.com/simh/simh/pull/549,"This change is a major refactor of how DMA and the DUART interact.
DMA implementation can now be overridden by individual devices that
require DMA. Disk and Floppy both continue to use a generic DMA
implementation, but the DUART code replaces the generic DMA with its
own implementation that correctly rate-limits TX. Among other things,
this allows the simulator to work correctly with real serial
terminals. This functionality has been tested on an AT&T 5620 ""Blit""
terminal, which can run the 'layers' windowing software from the
simulator.","This change is a major refactor of how DMA and the DUART interact.
DMA implementation can now be overridden by individual devices that
require DMA. Disk and Floppy both continue to use a generic DMA
implementation, but the DUART code replaces the generic DMA with its
own implementation that correctly rate-limits TX. Among other things,
this allows the simulator to work correctly with real serial
terminals. This functionality has been tested on an AT&T 5620 ""Blit""
terminal, which can run the 'layers' windowing software from the
simulator.",True,{}
simh/simh,https://github.com/simh/simh,550,2018-04-12T01:28:06Z,2018-04-12T01:44:15Z,2018-04-12T01:44:15Z,MERGED,True,723,103,9,https://github.com/sethm,3b2: CIO feature card framework,2,[],https://github.com/simh/simh/pull/550,https://github.com/sethm,1,https://github.com/simh/simh/pull/550,"Adds a skeleton framework for CIO (""Common I/O"") feature cards. The
first feature card to be implemented will be the ""PORTS"" serial MUX.
Part of this support involved reworking IRQ handling in the CPU. It
now respects both IRQ Vector and IPL.
This change also removes all 'assert(0)' calls from the simulator and
replaces them with generic ""Simulator Error"" halts. These should only
happen if there's a genuine logic error lurking somewhere.","Adds a skeleton framework for CIO (""Common I/O"") feature cards. The
first feature card to be implemented will be the ""PORTS"" serial MUX.
Part of this support involved reworking IRQ handling in the CPU. It
now respects both IRQ Vector and IPL.
This change also removes all 'assert(0)' calls from the simulator and
replaces them with generic ""Simulator Error"" halts. These should only
happen if there's a genuine logic error lurking somewhere.",True,{}
simh/simh,https://github.com/simh/simh,551,2018-04-13T20:45:09Z,2018-04-13T20:53:30Z,2018-04-13T20:53:30Z,MERGED,True,1,1,1,https://github.com/sethm,3b2: Fix minor MMU paging bug,1,[],https://github.com/simh/simh/pull/551,https://github.com/sethm,1,https://github.com/simh/simh/pull/551,"On a full cache miss, the MMU should only bring a page
descriptor into cache if the segment descriptor does NOT
have the 'contiguous' bit set.","On a full cache miss, the MMU should only bring a page
descriptor into cache if the segment descriptor does NOT
have the 'contiguous' bit set.",True,{}
simh/simh,https://github.com/simh/simh,552,2018-04-17T16:57:05Z,2018-04-18T09:20:02Z,2018-04-18T09:20:27Z,CLOSED,False,10146,1848,42,https://github.com/rsanchovilla,I650: Release 2,1,[],https://github.com/simh/simh/pull/552,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/552,"Hw support

Support half cycle simulation
Halt cpu simulation (^E on SimH console)
Sw support
Carnegie Internal Translator (IT)
New features
Support to display SOAP symbolic instructions on debug info
CardDeck internal command to split/join/print decks of cards
Bugs corrected:
Fixed card format handling. Release 1 can only read TEXT format punched cards. Release 2 can read with any SimH supported formats BIN, TEXT, BCD, CBN, EBCDIC and OCTAL
Removed superfluous end of lines from debug strings. Release 1 adds a redundant \r to debug output. Release 2 removes the extra unneeded \r
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size","Hw support

Support half cycle simulation
Halt cpu simulation (^E on SimH console)
Sw support
Carnegie Internal Translator (IT)
New features
Support to display SOAP symbolic instructions on debug info
CardDeck internal command to split/join/print decks of cards
Bugs corrected:
Fixed card format handling. Release 1 can only read TEXT format punched cards. Release 2 can read with any SimH supported formats BIN, TEXT, BCD, CBN, EBCDIC and OCTAL
Removed superfluous end of lines from debug strings. Release 1 adds a redundant \r to debug output. Release 2 removes the extra unneeded \r
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size",True,{}
simh/simh,https://github.com/simh/simh,552,2018-04-17T16:57:05Z,2018-04-18T09:20:02Z,2018-04-18T09:20:27Z,CLOSED,False,10146,1848,42,https://github.com/rsanchovilla,I650: Release 2,1,[],https://github.com/simh/simh/pull/552,https://github.com/rsanchovilla,2,https://github.com/simh/simh/pull/552#issuecomment-382322409,"Hw support

Support half cycle simulation
Halt cpu simulation (^E on SimH console)
Sw support
Carnegie Internal Translator (IT)
New features
Support to display SOAP symbolic instructions on debug info
CardDeck internal command to split/join/print decks of cards
Bugs corrected:
Fixed card format handling. Release 1 can only read TEXT format punched cards. Release 2 can read with any SimH supported formats BIN, TEXT, BCD, CBN, EBCDIC and OCTAL
Removed superfluous end of lines from debug strings. Release 1 adds a redundant \r to debug output. Release 2 removes the extra unneeded \r
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size",Need to fixup the pull request,True,{}
simh/simh,https://github.com/simh/simh,553,2018-04-20T10:32:20Z,2018-04-20T13:40:17Z,2018-04-20T13:40:17Z,CLOSED,False,10152,1853,42,https://github.com/rsanchovilla,I650: Release 2,3,[],https://github.com/simh/simh/pull/553,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/553,"Hardware support:

Half cycle simulation
Halt CPU simulation (^E on SimH console)

New Software included: Carnegie Internal Translator (IT)
New features

Support for displaying SOAP symbolic instructions in debug information
CardDeck internal command to split/join/print decks of cards

Bugs corrected:

Fixed card format handling. Release 1 can only read TEXT format punched cards. Release 2 can read any SimH supported formats BIN, TEXT, BCD, CBN, EBCDIC and OCTAL
Removed superfluous line ends from debug strings. Release 1 adds a redundant \r to debug output. Release 2 removes the extra unneeded \r
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size","Hardware support:

Half cycle simulation
Halt CPU simulation (^E on SimH console)

New Software included: Carnegie Internal Translator (IT)
New features

Support for displaying SOAP symbolic instructions in debug information
CardDeck internal command to split/join/print decks of cards

Bugs corrected:

Fixed card format handling. Release 1 can only read TEXT format punched cards. Release 2 can read any SimH supported formats BIN, TEXT, BCD, CBN, EBCDIC and OCTAL
Removed superfluous line ends from debug strings. Release 1 adds a redundant \r to debug output. Release 2 removes the extra unneeded \r
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size",True,{}
simh/simh,https://github.com/simh/simh,554,2018-04-20T13:56:54Z,2018-04-20T14:34:07Z,2018-04-20T14:34:07Z,MERGED,True,10152,1853,42,https://github.com/rsanchovilla,I650: Release 2,1,[],https://github.com/simh/simh/pull/554,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/554,"Hardware support:

Half cycle simulation
Halt CPU simulation (^E on SimH console)

New Software included: Carnegie Internal Translator (IT)
New features

Support for displaying SOAP symbolic instructions in debug information
CardDeck internal command to split/join/print decks of cards

Bugs corrected:

Fixed card format handling. Release 1 can only read TEXT format
Removed superfluous line ends from debug strings.
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size","Hardware support:

Half cycle simulation
Halt CPU simulation (^E on SimH console)

New Software included: Carnegie Internal Translator (IT)
New features

Support for displaying SOAP symbolic instructions in debug information
CardDeck internal command to split/join/print decks of cards

Bugs corrected:

Fixed card format handling. Release 1 can only read TEXT format
Removed superfluous line ends from debug strings.
Better minus zero support
Fixed unneeded prompt Really truncate memory [N] when setting memory size",True,{}
simh/simh,https://github.com/simh/simh,555,2018-05-03T20:00:49Z,2018-05-03T20:04:58Z,2018-05-03T20:04:58Z,MERGED,True,22,17,5,https://github.com/rsanchovilla,I650: Fix coverity errors,1,[],https://github.com/simh/simh/pull/555,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/555,,,True,{}
simh/simh,https://github.com/simh/simh,556,2018-05-06T20:48:56Z,2018-05-07T20:32:17Z,2018-05-07T20:32:17Z,CLOSED,False,3,3,1,https://github.com/rsanchovilla,I650: Fix Coverity Warning,2,[],https://github.com/simh/simh/pull/556,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/556,,,True,{}
simh/simh,https://github.com/simh/simh,556,2018-05-06T20:48:56Z,2018-05-07T20:32:17Z,2018-05-07T20:32:17Z,CLOSED,False,3,3,1,https://github.com/rsanchovilla,I650: Fix Coverity Warning,2,[],https://github.com/simh/simh/pull/556,https://github.com/markpizz,2,https://github.com/simh/simh/pull/556#issuecomment-386914375,,"Roberto,
This change:
            // should wait for drum to fetch data?
-            if ((bReadData) && (AR >= 0) && (AR < (int)MEMSIZE)) {
+            if ((bReadData) && (AR < (int)MEMSIZE)) {
                if ((AR % 50) != DrumAddr) continue; // yes
            }
            MachineCycle = 3; // exec instr

DOES fix the specific Coverity warning about the part of that comparison expression which is a wasted test (unsigned >= 0).  However, with that removed, the remaining test ends up now being a signed/unsigned comparison.  Avoid the cast (int) of MEMSIZE would seem to be a complete fix.
This would be an opportunity to unwind this commit and do it better.

Mark",True,{}
simh/simh,https://github.com/simh/simh,556,2018-05-06T20:48:56Z,2018-05-07T20:32:17Z,2018-05-07T20:32:17Z,CLOSED,False,3,3,1,https://github.com/rsanchovilla,I650: Fix Coverity Warning,2,[],https://github.com/simh/simh/pull/556,https://github.com/rsanchovilla,3,https://github.com/simh/simh/pull/556#issuecomment-387171662,,Fixed.,True,{}
simh/simh,https://github.com/simh/simh,557,2018-05-07T15:22:01Z,2018-05-07T19:19:25Z,2018-05-07T19:19:25Z,MERGED,True,9,2,1,https://github.com/sethm,3b2: Fix TOD clock DST and TZ issue,1,[],https://github.com/simh/simh/pull/557,https://github.com/sethm,1,https://github.com/simh/simh/pull/557,,,True,{}
simh/simh,https://github.com/simh/simh,558,2018-05-07T20:35:44Z,2018-05-07T21:21:31Z,2018-05-07T21:21:31Z,CLOSED,False,0,0,0,https://github.com/rsanchovilla,I650: Fix Coverity Warnings,0,[],https://github.com/simh/simh/pull/558,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/558,,,True,{}
simh/simh,https://github.com/simh/simh,559,2018-05-07T21:31:15Z,2018-05-07T21:36:58Z,2018-05-07T21:36:58Z,MERGED,True,3,3,1,https://github.com/rsanchovilla,I650: Fix Coverity Warning,1,[],https://github.com/simh/simh/pull/559,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/559,,,True,{}
simh/simh,https://github.com/simh/simh,561,2018-05-13T15:45:07Z,2018-05-16T07:23:57Z,2018-05-16T12:03:46Z,CLOSED,False,1,1,1,https://github.com/larsbrinkhoff,KA10: Fix bug in Type 340 display emulator,1,[],https://github.com/simh/simh/pull/561,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/561,"In the vector function, the flags variable isn't initialized.  The function can sometimes return boolean true even though it shouldn't.  This causes the 340 to escape vector mode, with display list havoc as a result.","In the vector function, the flags variable isn't initialized.  The function can sometimes return boolean true even though it shouldn't.  This causes the 340 to escape vector mode, with display list havoc as a result.",True,{}
simh/simh,https://github.com/simh/simh,561,2018-05-13T15:45:07Z,2018-05-16T07:23:57Z,2018-05-16T12:03:46Z,CLOSED,False,1,1,1,https://github.com/larsbrinkhoff,KA10: Fix bug in Type 340 display emulator,1,[],https://github.com/simh/simh/pull/561,https://github.com/markpizz,2,https://github.com/simh/simh/pull/561#issuecomment-389421232,"In the vector function, the flags variable isn't initialized.  The function can sometimes return boolean true even though it shouldn't.  This causes the 340 to escape vector mode, with display list havoc as a result.","Merged with Cherry Pick, changed commit message since the current master branch doesn't yet have a KA10 simulator.  Lars is Author",True,{}
simh/simh,https://github.com/simh/simh,561,2018-05-13T15:45:07Z,2018-05-16T07:23:57Z,2018-05-16T12:03:46Z,CLOSED,False,1,1,1,https://github.com/larsbrinkhoff,KA10: Fix bug in Type 340 display emulator,1,[],https://github.com/simh/simh/pull/561,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/561#issuecomment-389494359,"In the vector function, the flags variable isn't initialized.  The function can sometimes return boolean true even though it shouldn't.  This causes the 340 to escape vector mode, with display list havoc as a result.","Thanks!
CC @rcornwell, my 340 bug fix is in.",True,{}
simh/simh,https://github.com/simh/simh,569,2018-05-18T12:12:26Z,2018-05-18T12:19:38Z,2018-05-18T12:19:38Z,CLOSED,False,0,0,0,https://github.com/JonathanBelanger,Merge pull request #4 from simh/master,3,[],https://github.com/simh/simh/pull/569,https://github.com/JonathanBelanger,1,https://github.com/simh/simh/pull/569,,,True,{}
simh/simh,https://github.com/simh/simh,569,2018-05-18T12:12:26Z,2018-05-18T12:19:38Z,2018-05-18T12:19:38Z,CLOSED,False,0,0,0,https://github.com/JonathanBelanger,Merge pull request #4 from simh/master,3,[],https://github.com/simh/simh/pull/569,https://github.com/JonathanBelanger,2,https://github.com/simh/simh/pull/569#issuecomment-390187803,,Updating my clone repository.,True,{}
simh/simh,https://github.com/simh/simh,570,2018-05-18T17:40:58Z,2018-05-18T18:22:03Z,2018-05-18T18:22:03Z,CLOSED,False,16828,801,79,https://github.com/rsanchovilla,I650: Release 3,1,[],https://github.com/simh/simh/pull/570,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/570,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command",True,{}
simh/simh,https://github.com/simh/simh,570,2018-05-18T17:40:58Z,2018-05-18T18:22:03Z,2018-05-18T18:22:03Z,CLOSED,False,16828,801,79,https://github.com/rsanchovilla,I650: Release 3,1,[],https://github.com/simh/simh/pull/570,https://github.com/markpizz,2,https://github.com/simh/simh/pull/570#issuecomment-390289567,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","There are several issues with this when compiled on Linux and OS X.
First:
I650/i650_cpu.c:115:25: warning: ‘IOSync’ initialized and declared ‘extern’
 extern t_int64          IOSync[10]                           = {0};
                         ^
I650/i650_cpu.c:116:25: warning: ‘IOSync_NegativeZeroFlag’ initialized and declared ‘extern’
 extern int              IOSync_NegativeZeroFlag[10]          = {0};
                         ^

This is fixed by removing the extern declarations on these two lines
Second:
I650/i650_cdr.c:630:56: warning: operator '?:' has lower precedence than '+';
      '+' will be evaluated first [-Wparentheses]
                    ((buf[5] != ' ') && (buf[5] != 0)) ? (t_int64)  8 * ...
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
I650/i650_cdr.c:630:56: note: place parentheses around the '+' expression to
      silence this warning
                    ((buf[5] != ' ') && (buf[5] != 0)) ? (t_int64)  8 * ...
                                                       ^
I650/i650_cdr.c:630:56: note: place parentheses around the '?:' expression to
      evaluate it first
                    ((buf[5] != ' ') && (buf[5] != 0)) ? (t_int64)  8 * ...
                                                       ^

Like it suggests, you probably want parenthesis around the appropriate part of the two separate ?: expressions.
PLEASE undo this commit, fix things up, test and generate a new commit and pull request.  Follow your prior recipe please.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,571,2018-05-18T18:39:37Z,2018-05-18T19:52:20Z,2018-05-18T19:52:20Z,CLOSED,False,0,0,0,https://github.com/rsanchovilla,I650: Release 3,0,[],https://github.com/simh/simh/pull/571,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/571,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command",True,{}
simh/simh,https://github.com/simh/simh,571,2018-05-18T18:39:37Z,2018-05-18T19:52:20Z,2018-05-18T19:52:20Z,CLOSED,False,0,0,0,https://github.com/rsanchovilla,I650: Release 3,0,[],https://github.com/simh/simh/pull/571,https://github.com/markpizz,2,https://github.com/simh/simh/pull/571#issuecomment-390298687,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","The earlier compile warnings are now fixed.
Meanwhile, something you changed today has now added tab characters to i650_cdr.c which weren't there in your earlier version or I would have mentioned it earlier.
You really won't have to deal with this if you change the Visual Studio editor for .c and .h files to insert spaces for tabs!!!!!
Please undo and fix and go again.  You can wait until tomorrow to come back to this.",True,{}
simh/simh,https://github.com/simh/simh,571,2018-05-18T18:39:37Z,2018-05-18T19:52:20Z,2018-05-18T19:52:20Z,CLOSED,False,0,0,0,https://github.com/rsanchovilla,I650: Release 3,0,[],https://github.com/simh/simh/pull/571,https://github.com/markpizz,3,https://github.com/simh/simh/pull/571#issuecomment-390304456,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","You should be able to use Visual Studio to search for tab characters as follows.  I'm doing this on Visual Studio 2008, so if you're using that, it will be precise, if you're using a later version it will be similar:
Menu->Edit->Find In Files
Set ""Find What:"" to \t
Set ""Look in:"" to the path to your I650 folder
Check ""include sub-folders""
Set Find options ""Use:"" to ""Regular Expressions""
Click on ""Find All""
What I'm seeing here shows i650_cdr.c lines 561 thru 572 having some tab characters.",True,{}
simh/simh,https://github.com/simh/simh,572,2018-05-18T19:59:47Z,2018-05-18T20:09:31Z,2018-05-18T20:09:31Z,MERGED,True,16828,801,79,https://github.com/rsanchovilla,I650: Release 3,1,[],https://github.com/simh/simh/pull/572,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/572,"New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command","New Hardware support:

IBM 653 Storage Unit: provides machine opcodes
for Floating Point, Immediate Access Storage (IAS),
Three Index registers, Cards Punch-read
synchronizers 2 and 3.
New Software included:
FORTRANSIT: version II (S), plus run time PACKAGE
with standard Fortran functions.
Reorganized sw directory, separating each language
in its own folder. Each one Includes a 00_readme.txt
file with restoration notes and comments.
New features:
Support for SOAP opcode mnemonics in addition
to regular IBM mnemonics
FAST / REALTIME CPU options
PROP pseudo register
CARDDECK ECHOLAST command",True,{}
simh/simh,https://github.com/simh/simh,573,2018-05-19T07:29:48Z,2018-05-19T13:34:36Z,2018-05-19T13:34:36Z,CLOSED,False,83,109,1,https://github.com/psco,AltairZ80: Replaced platform specific directory scanning with SCP API,2,[],https://github.com/simh/simh/pull/573,https://github.com/psco,1,https://github.com/simh/simh/pull/573,,,True,{}
simh/simh,https://github.com/simh/simh,573,2018-05-19T07:29:48Z,2018-05-19T13:34:36Z,2018-05-19T13:34:36Z,CLOSED,False,83,109,1,https://github.com/psco,AltairZ80: Replaced platform specific directory scanning with SCP API,2,[],https://github.com/simh/simh/pull/573,https://github.com/markpizz,2,https://github.com/simh/simh/pull/573#issuecomment-390398452,,"Hi Peter,
This change needs a couple of minor adjustments due to:
2>altairz80_sio.c
2>..\AltairZ80\altairz80_sio.c(1733) : error C2143: syntax error : missing ';' before 'const'
2>..\AltairZ80\altairz80_sio.c(1734) : error C2065: 'result' : undeclared identifier
2>..\AltairZ80\altairz80_sio.c(1742) : error C2065: 'result' : undeclared identifier
2>..\AltairZ80\altairz80_sio.c(1912) : error C2061: syntax error : identifier 'simh_dev'
2>..\AltairZ80\altairz80_sio.c(1912) : error C2059: syntax error : ';'
2>..\AltairZ80\altairz80_sio.c(1912) : error C2059: syntax error : 'type'

To fix this, please change:
                    if (nameListHead == NULL) {
                        createCPMCommandLine();
                        lastPathSeparatorIndex = 0;
                        while (cpmCommandLine[lastPathSeparatorIndex])
                            lastPathSeparatorIndex++;
                        while ((lastPathSeparatorIndex >= 0) && (cpmCommandLine[lastPathSeparatorIndex] != hostPathSeparator))
                            lastPathSeparatorIndex--;
                        firstPathCharacterIndex = 0;
                        deleteNameList();
                        const t_stat result = sim_dir_scan(cpmCommandLine, processDirEntry, NULL);

To:
                    if (nameListHead == NULL) {
                        t_stat result;
                        
                        createCPMCommandLine();
                        lastPathSeparatorIndex = 0;
                        while (cpmCommandLine[lastPathSeparatorIndex])
                            lastPathSeparatorIndex++;
                        while ((lastPathSeparatorIndex >= 0) && (cpmCommandLine[lastPathSeparatorIndex] != hostPathSeparator))
                            lastPathSeparatorIndex--;
                        firstPathCharacterIndex = 0;
                        deleteNameList();
                        result = sim_dir_scan(cpmCommandLine, processDirEntry, NULL);

Additionally, please change:
        NameNode_t *top = malloc(sizeof(NameNode_t));

To:
        NameNode_t *top = (NameNode_t *)malloc(sizeof(NameNode_t));

Thirdly, I'm not sure what the significance of your usage of hostPathSeparator actually is, but on Windows either / OR \ will work with sim_dir_scan():
Fourth:  Previous commits from you have had your name (Peter Schorn peter.schorn@acm.org) as the committer/author, this commit has 'psco peter.schorn@acm.org'.  You probably want to change this.
Please undo this commit (change history on your github.com/psco/simh repo) and make the above mentioned adjustments and generate a new pull request.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,574,2018-05-19T13:36:40Z,2018-05-19T13:48:52Z,2018-05-19T13:48:52Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Replaced platform specific directory scanning with SCP API (updated),0,[],https://github.com/simh/simh/pull/574,https://github.com/psco,1,https://github.com/simh/simh/pull/574,,,True,{}
simh/simh,https://github.com/simh/simh,574,2018-05-19T13:36:40Z,2018-05-19T13:48:52Z,2018-05-19T13:48:52Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Replaced platform specific directory scanning with SCP API (updated),0,[],https://github.com/simh/simh/pull/574,https://github.com/markpizz,2,https://github.com/simh/simh/pull/574#issuecomment-390405880,,"Hmmm... Sorry.  We collided timing wise on this and a new change to the master branch has been made since you pulled from it.
Can you:
  $# Undo the last two commits:
  $ git reset HEAD^^
  $# make your github.com/psco/simh contain that repo structure (with these commits removed)
  $ git push -f 
  $# get the latest from github.com/simh/simh
  $ git pull 
  $ git commit with appropriate commit message
  $ git push

Since this pull request is connected to the original commit history, you'll have to create a new one or just let me know via email.
Sorry.",True,{}
simh/simh,https://github.com/simh/simh,575,2018-05-19T13:56:08Z,2018-05-19T13:59:44Z,2018-05-19T13:59:44Z,MERGED,True,83,109,1,https://github.com/psco,AltairZ80: Replaced platform specific directory scanning with SCP API (2),1,[],https://github.com/simh/simh/pull/575,https://github.com/psco,1,https://github.com/simh/simh/pull/575,,,True,{}
simh/simh,https://github.com/simh/simh,576,2018-05-21T23:34:27Z,2018-05-22T11:22:35Z,2018-05-22T11:22:35Z,MERGED,True,2684,348,18,https://github.com/sethm,"3B2: Common IO, CTC, and PORTS devices",6,[],https://github.com/simh/simh/pull/576,https://github.com/sethm,1,https://github.com/simh/simh/pull/576,,,True,{}
simh/simh,https://github.com/simh/simh,576,2018-05-21T23:34:27Z,2018-05-22T11:22:35Z,2018-05-22T11:22:35Z,MERGED,True,2684,348,18,https://github.com/sethm,"3B2: Common IO, CTC, and PORTS devices",6,[],https://github.com/simh/simh/pull/576,https://github.com/markpizz,2,https://github.com/simh/simh/pull/576#issuecomment-390820336,,"Seth,
Mostly looks good.
Line endings in 3b2_ctc.c and 3b2_ctc.h are LF and not CRLF.
Also, 3b2_ports.h has tabs that need to be expanded to spaces.
Also, please be stricter with your types.  Strive for a clean compile from these commands:
  $ make 3b2
  $ make 3b2 GCC=g++
  # Install clang in your environment to be comfortable that OS X compiles will also be clean
  $ make 3b2 GCC=clang
  $ make 3b2 GCC=clang++

I'm not about to commit anything else, so please fix these and resubmit.",True,{}
simh/simh,https://github.com/simh/simh,576,2018-05-21T23:34:27Z,2018-05-22T11:22:35Z,2018-05-22T11:22:35Z,MERGED,True,2684,348,18,https://github.com/sethm,"3B2: Common IO, CTC, and PORTS devices",6,[],https://github.com/simh/simh/pull/576,https://github.com/sethm,3,https://github.com/simh/simh/pull/576#issuecomment-390825456,,"Thanks for the heads up. I'll be working on this immediately.
-Seth
On Mon, May 21, 2018, at 4:57 PM, Mark Pizzolato wrote:
 Seth,
 Mostly looks good.
  Line endings in 3b2_ctc.c and 3b2_ctc.h are LF and not CRLF.
  Also, 3b2_ports.h has tabs that need to be expanded to spaces.
 Also, please be stricter with your types.  Strive for a clean compile
 from these commands:
   $ make 3b2 $ make 3b2 GCC=g++ # Install clang in your environment to
   be comfortable that OS X compiles will also be clean $ make 3b2
   GCC=clang $ make 3b2 GCC=clang++
> I'm not about to commit anything else, so please fix these and
 resubmit.> — You are receiving this because you authored the thread. Reply to
 this email directly, view it on GitHub[1], or mute the thread[2].
--
  Seth Morabito
  web@loomcom.com



Links:

  1. #576 (comment)
  2. https://github.com/notifications/unsubscribe-auth/AAAdL2RU6IInu9Moft6QLtnjKZxIyarmks5t01RggaJpZM4UHwuC",True,{}
simh/simh,https://github.com/simh/simh,576,2018-05-21T23:34:27Z,2018-05-22T11:22:35Z,2018-05-22T11:22:35Z,MERGED,True,2684,348,18,https://github.com/sethm,"3B2: Common IO, CTC, and PORTS devices",6,[],https://github.com/simh/simh/pull/576,https://github.com/sethm,4,https://github.com/simh/simh/pull/576#issuecomment-390829428,,"Line ending and tab issues have been cleaned up, and I now get a clean compile from gcc, g++, clang, and clang++.",True,{}
simh/simh,https://github.com/simh/simh,577,2018-05-22T22:25:15Z,2018-05-22T22:29:02Z,2018-05-22T22:29:02Z,MERGED,True,6,8,1,https://github.com/sethm,3b2: Tighten floppy timing,1,[],https://github.com/simh/simh/pull/577,https://github.com/sethm,1,https://github.com/simh/simh/pull/577,This change fixes a critical floppy booting issue.,This change fixes a critical floppy booting issue.,True,{}
simh/simh,https://github.com/simh/simh,579,2018-05-28T18:59:59Z,2018-05-28T19:08:01Z,2018-05-28T19:08:01Z,MERGED,True,37,20,4,https://github.com/sethm,3b2: Fix coverity scan issues,1,[],https://github.com/simh/simh/pull/579,https://github.com/sethm,1,https://github.com/simh/simh/pull/579,,,True,{}
simh/simh,https://github.com/simh/simh,586,2018-06-01T05:12:06Z,2018-06-01T05:18:13Z,2018-06-01T05:18:13Z,MERGED,True,1,1,1,https://github.com/psco,AltairZ80: Fixed integer type issue in mfdc.c,1,[],https://github.com/simh/simh/pull/586,https://github.com/psco,1,https://github.com/simh/simh/pull/586,,,True,{}
simh/simh,https://github.com/simh/simh,589,2018-06-17T06:38:42Z,2018-06-17T06:44:52Z,2018-06-17T06:44:52Z,MERGED,True,61,57,9,https://github.com/psco,AltairZ80: Clean up of source code formatting,1,[],https://github.com/simh/simh/pull/589,https://github.com/psco,1,https://github.com/simh/simh/pull/589,,,True,{}
simh/simh,https://github.com/simh/simh,590,2018-06-20T07:19:45Z,2018-06-20T07:45:58Z,2018-06-20T08:03:26Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,display: Fix bug in Type 340 vector drawing routine.,1,[],https://github.com/simh/simh/pull/590,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/590,"In the lineTwoStep function, a typo makes vectors in two quadrants drawn incorrectly.
CC @philbudne","In the lineTwoStep function, a typo makes vectors in two quadrants drawn incorrectly.
CC @philbudne",True,{}
simh/simh,https://github.com/simh/simh,590,2018-06-20T07:19:45Z,2018-06-20T07:45:58Z,2018-06-20T08:03:26Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,display: Fix bug in Type 340 vector drawing routine.,1,[],https://github.com/simh/simh/pull/590,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/590#issuecomment-398650915,"In the lineTwoStep function, a typo makes vectors in two quadrants drawn incorrectly.
CC @philbudne","The x1 (and x0) variable should only be stepped with the stepx variable, never stepy.
I have verified this with a program which draws vectors with all combinations of negative and positive Δx and Δy, and Δx less than or greater than Δy.  This should cover all branches in the lineTwoStep function.",True,{}
simh/simh,https://github.com/simh/simh,591,2018-06-20T08:08:34Z,2018-06-20T17:40:58Z,2018-06-21T07:08:50Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,display: Fix X11 crash when DISPLAY unset.,1,[],https://github.com/simh/simh/pull/591,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/591,"If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.","If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.",True,{}
simh/simh,https://github.com/simh/simh,591,2018-06-20T08:08:34Z,2018-06-20T17:40:58Z,2018-06-21T07:08:50Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,display: Fix X11 crash when DISPLAY unset.,1,[],https://github.com/simh/simh/pull/591,https://github.com/markpizz,2,https://github.com/simh/simh/pull/591#issuecomment-398835958,"If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.","This change is fine.
Meanwhile, be aware, that direct use of the x11 (and w32) interface layer code is deprecated for simh projects and will not be supported in the future.  The SDL functionality provided by sim_ws and sim_video will be the future.  A significant change to sim_video and other related display support is pending detailed review and adjustment and should be available 'soon'.",True,{}
simh/simh,https://github.com/simh/simh,591,2018-06-20T08:08:34Z,2018-06-20T17:40:58Z,2018-06-21T07:08:50Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,display: Fix X11 crash when DISPLAY unset.,1,[],https://github.com/simh/simh/pull/591,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/591#issuecomment-398986801,"If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.","Thanks.
I'm primarily fixing things in the existing Type 340 simulation.  Will it be moved over to the new APIs?",True,{}
simh/simh,https://github.com/simh/simh,591,2018-06-20T08:08:34Z,2018-06-20T17:40:58Z,2018-06-21T07:08:50Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,display: Fix X11 crash when DISPLAY unset.,1,[],https://github.com/simh/simh/pull/591,https://github.com/markpizz,4,https://github.com/simh/simh/pull/591#issuecomment-398995906,"If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.","A natural part of the merge will be to support the 340.  The 340 stuff lives on top of display.c, right?  If so, then it shouldn't be a problem.  You'll probably have to be involved in testing though.",True,{}
simh/simh,https://github.com/simh/simh,591,2018-06-20T08:08:34Z,2018-06-20T17:40:58Z,2018-06-21T07:08:50Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,display: Fix X11 crash when DISPLAY unset.,1,[],https://github.com/simh/simh/pull/591,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/591#issuecomment-398999239,"If the DISPLAY environment variable isn't set, the ws_init call to XkbSetDetectableAutoRepeat will crash due to a NULL pointer.","Yes, I think that's right.
Sure, I'll do the testing.
I think @philbudne should be in the loop on this.",True,{}
simh/simh,https://github.com/simh/simh,593,2018-06-24T21:40:30Z,2018-06-26T03:44:50Z,2018-06-26T03:44:50Z,MERGED,True,3,3,1,https://github.com/rsanchovilla,I650: Fix Coverity warnings,1,[],https://github.com/simh/simh/pull/593,https://github.com/rsanchovilla,1,https://github.com/simh/simh/pull/593,,,True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/599,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/599#issuecomment-408033495,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I can make a list of the eight PDP-11s, their uses, and the software we have for them:



Number
Name
Model
Use
Software




0
TV
11/10
Bitmapped displays
SYSTEM; TV 147


1
XGP
11/20
Laser printer
SYSENG; XGP 32


2
LISP
GT40
CONS Lisp machine
LMCONS; CCONS 478


3
CHESS
?
CHEOPS chess accelerator hardware
CHPROG; CCHEOP 484


4
LOGO
11/45
Logo group
11LOGO; ...


5
ROBOT
11/40
Robotics
nothing so far


6
VISIO
11/40
Computer vision
nothing so far


7
CHAOS
11/10
Chaosnet interface
SYSTEM; IOELEV 432



There are also some PDP-11 debuggers that can optionally be put on the machines: 11DDT, RUG, URUG.
In addition, we have some tools run from ITS:

11SIM: PDP-11 simulator.
PALX: cross assembler.
STUFF: Writes a PALX binary to PDP-11 core and starts it.
CARPET: DDT-like remote debugger.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/599#issuecomment-408045031,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","If this addition is deemed acceptable, it would also be nice though not strictly necessary to add some special hardware devices used with these PDP-11s:

TV - @aap is doing a special purpuse simulator for this.
XGP - Three hardware registers to interface with the printer.
CHESS - Outside the scope of this.  It's a 16-bit microcoded machine.
LOGO - Controller for eight vector displays, designed by Tom Knight.
CHAOS - Unibus Chaosnet interface.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/599#issuecomment-408145482,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","An intended use case is to hook up two host computers each running a simulator.  (Say, a PiDP-11 and the upcoming PiDP-10.)  Using shared memory between simulator processes would preclude this, so we went with the networking solution.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/lstewart,5,https://github.com/simh/simh/pull/599#issuecomment-408155886,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","TCP is certainly universally available, and reduces dependency on other libraries, but there are “shared memory” libraries available that work across the network, like Berkeley’s GASnet.
…
 On 2018, Jul 26, at 11:54 AM, Lars Brinkhoff ***@***.***> wrote:

 An intended use case is to hook up two host computers each running a simulator. (Say, a PiDP-11 and the upcoming PiDP-10.) Using shared memory between simulator processes would preclude this, so we went with the networking solution.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub <#599 (comment)>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAj94u4cFttI_jRGX9h5zQ0OqJcvDbx6ks5uKeY9gaJpZM4VhXft>.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,6,https://github.com/simh/simh/pull/599#issuecomment-408157727,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","If you really think that arm's length memory access (across the network) with, on the order 100's of memory reference operations per second, could reasonably model the original system's behavior, then the distributed network model would be workable.
Alternatively, if you abstract the high level operations of the actual activities that must be performed at the simh device interface level, then how it gets implemented (for actual data transport) is an implementation detail or possibly a configuration operation.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/599#issuecomment-408161609,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I'm hoping speed across a local network will be satisfactory.  All accesses to through two functions ten11_read_word and ten11_write_word, so changing the underlying implementation shouldn't be too hard.
What I'd like to know is if the socket API is ok to use, or is TMXR the SIMH-approved way to do point-to-point communication?",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,8,https://github.com/simh/simh/pull/599#issuecomment-408167993,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Direct socket use is not OK.
The primary reason is that TMXR solves all of the setup, startup sequencing and configuration activities and interface to the simh event activities for polling and event scheduling and smooth interacting with timing and idling.  These all exist in one place that is shared across any scenario that might want to use sockets for network transport rather than having all of those things re-implemented again in each simulator device that might want some sort of network communication,
Show me what you've got and I'll shake it up to use TMXR.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/599#issuecomment-408587841,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Thanks.  I posted my code as a pull request here.  (I can either continue to rework it in this pull request, or close it and open another one later.)
This is still only prototype stage.  Work in progress.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,10,https://github.com/simh/simh/pull/599#issuecomment-408649955,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","You've only got one side of the activity provided here, but there are a bunch of problems with this:

As has already been mentioned, direct use of sockets.  More problematically than was expected are direct (and includes) of platform specific socket code, rather than using the sim_sock portable socket layer which also shouldn't be used in simulator and/or device simulator code.
There is nothing which leverages the simh DEVICE and event scheduling model going on here.  Everything has been done with direct changes to the the PDP11 CPU module.  Absolutely no changes to pdp11_cpu.c should be required to add the functionality you've described.  A module named something like pdp11_ten11.c which defines a simh DEVICE (possibly named TEN11) with a couple of additional lines in pdp11_sys.c that add a reference to this DEVICE to the sim_devices array should be the only required changes to existing code in this simulator.
The TEN11 device should have an attach routine which takes arguments that describe who/what/how this side will be communicating with something else.  The attach routine will schedule a unit that will have its service routine called after some number of instructions (possibly 1).  The service routine will gather and execute commands from the requesting PDP10 system pushing back responses and reschedule itself to run after some number of instructions.  Notice that nothing I've said so far mentions any details about how data is exchanged with the PDP10 system (sockets, TMXR, shared memory).
The code provided in your pull request uses the CPU's deposit and examine interfaces.  These interfaces were never intended to be used by devices, but specifically are part of the infrastructure that provides the simh command interface.  These capabilities are a distinct superset of the described requirements to merely read or write words in the processor's memory.  Memory is directly accessible to devices (that may be doing DMA) by referencing elements of the array ""uint16 *M;"".  The upper bound on the array size is MEMSIZE.  The CPU's I/O page and all of its memory mapped consequences are directly available through the CPU's examine and deposit interfaces.

I've put together the PDP11 side of what a TEN11 device should be (leveraging what you provided).  This device has two modes: 1) the NETWORK mode which uses TMXR to detail with connection and data delivery and 2) A shared memory mode which puts the PDP11's memory in a shared memory region which can be directly accessed by another simulator in the same system.  The TMXR model uses the same wire protocol (slightly extended when an error occurs) but the messages are framed by the TMXR's default packet framing around the provided messages.  The message structure that you used 'could' be leveraged directly by the TMXR model, BUT that would be more work given that both sides of this conversation should be using TMXR, the existing message framing comes for free.  This is visible in the lars/ten11 branch of https://github.com/markpizz/simh.  Since I didn't have both sides of this dialog, this hasn't been tested, but it should be pretty close for this side.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/599#issuecomment-408694422,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Thank you very much!  I will test this.  The other side is in @rcornwell's KA10 simulator; my changes are available from my GitHub fork.
Some follow-up questions:


Is it possible to do poll() or select() from the simulator main loop?  Talking across a network connection depends on low latency.  My prototype checked for input between every instruction, but that wasn't what I had in mind for the finished solution.


The external interface can access the Unibus I/O space in addition to core memory.  Sorry, I didn't make that clear.  That's why it seemed convenient to reuse cpu_ex and cpu_dep which already had logic for this.  Is there some other function to use instead?  If not, of course I can duplicate that logic if that's the right thing to go about it.


I will build on what you posted.  I see no need for double framing, for example.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,12,https://github.com/simh/simh/pull/599#issuecomment-408715126,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Change the TEN11_POLL #define or DEPOSIT TEN11 POLL n in a configuration file.  This will cause exactly what you want to happen with the frequency you desire.  If 1 is the correct value for best system behavior, that is fine.
OK, then using the cpu device's deposit and examine routines is fine.

There really isn't any negative consequence for the double framing.  Your build() routine works well to build the packet with the length prefix which is readily handed directly for transmission.  The consequence is that the packet on the wire is two bytes larger.  The overhead of processing any packet is far more consequential than an extra two bytes of payload in a short message.
Since I didn't have both sides to test, I didn't end up having anything which confirms that a transmitted packet has made it on the wire (checking the status from tmxr_put_packet_ln()).  There are two possible cases: 1) the previous transmitted packet hasn't been fully transmitted SCPE_STALL (this case is impossible given the single request-response protocol), and 2) the TCP session is reset or otherwise closed just before the transmit and the transmit fails SCPE_LOST (for the PDP11 side of this, that problem is a don't care.  The next time the the connection is established by either side, things will work again).",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/599#issuecomment-410539381,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Hello,
I'm now ready to try to test this.  Do I understand it correctly that a network mode connection should be configured like this?
set ten11 enable
set ten11 mode=network
set ten11 peer=localhost:1235
attach ten11 1234

As far as I understand, this only listens to a port.  Is it possible to use your code to make a connection to a port?  The other side (@rcornwell's KA10 simulator) should also use TMXR, so one or the other has to make the connection.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,14,https://github.com/simh/simh/pull/599#issuecomment-410540001,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","That configuration would work fine (I don't remember the default mode, so the mode line might not be necessary).
The setup will dynamically establish the connection in both directions.  By that, I mean that both sides will try to establish a connection and both sides will be listening for one.  The first successful attempt will be used, and when a connection drops (due to one end disappearing), it will be reestablished whenever the peer side returns to availability.
The PDP10 side of this is the more complicated device since there are N potential links to pdp11_ten11 devices.   Were I writing this, there would be one device with N units that could each be configured with a peer and could be attached.  Each of the N would map to a TMXR line structure with its own listen port and peer description.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,15,https://github.com/simh/simh/pull/599#issuecomment-410540356,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Each of the N would map to a TMXR line structure with its own listen port and peer description.

The TMXR line structure is a TMLN.
I might use 2 additional UNIT_DIS UNIT structures to actually do the input/output and connection polling.  The initial N units would merely be the ATTACH and configuration targets.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,16,https://github.com/simh/simh/pull/599#issuecomment-410540946,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.",You could probably prove the functionality with your existing implementation just by wrapping the packets you put on the wire with a 2 byte length (around the existing 1 byte length) and stripping that for the response data.,True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,17,https://github.com/simh/simh/pull/599#issuecomment-415373146,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I have been struggling to make this work, but now I think I'm onto something.
Does it seem right that I need to add ten11_ldsc.rcve = 1 and tmxr_poll_rx()?",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/599#issuecomment-415469750,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","It seems to mostly work now, but suddenly hangs for some reason that I haven't figured out yet.
CC @aap who is responsible for implementing the protocol on the Knight TV system.  That's a PDP-11/10 with bitmapped frame buffers on Intel 1103 RAM chips.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,19,https://github.com/simh/simh/pull/599#issuecomment-416216683,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","There is something strange going on.  Both sides are happily exchanging messages for a while, but then it stops.
SIMH calls send() in sim_write_sock which claims data was sent.  However read() on the other side doesn't return.  I run tcpdump and don't see any packet.
This is the last exchange.  The PDP-10 side first sends two bytes with the TMXR packet length.  Then 7 more with a DATO request.  SIMH sees it and calls tmxr_put_packet_ln, utimately calling send().  But there's no payload on the wire, just an ACK.
Port 1234 is the PDP-10 side, and 54138 is the SIMH side.
14:47:48.685363 IP localhost.1234 > localhost.54138: Flags [P.], seq 214:216, ack 122, win 342, options [nop,nop,TS val 782296757 ecr 782296757], length 2
        0x0000:  4500 0036 e638 4000 4006 5687 7f00 0001
        0x0010:  7f00 0001 04d2 d37a 1cc7 46c2 0845 34fa
        0x0020:  8018 0156 fe2a 0000 0101 080a 2ea0 e6b5
        0x0030:  2ea0 e6b5 0007
14:47:48.685419 IP localhost.1234 > localhost.54138: Flags [P.], seq 216:223, ack 122, win 342, options [nop,nop,TS val 782296757 ecr 782296757], length 7
        0x0000:  4500 003b e639 4000 4006 5681 7f00 0001
        0x0010:  7f00 0001 04d2 d37a 1cc7 46c4 0845 34fa
        0x0020:  8018 0156 fe2f 0000 0101 080a 2ea0 e6b5
        0x0030:  2ea0 e6b5 0601 0001 001f 0a
14:47:48.685432 IP localhost.54138 > localhost.1234: Flags [.], ack 223, win 342, options [nop,nop,TS val 782296757 ecr 782296757], length 0
        0x0000:  4500 0034 97a4 4000 4006 a51d 7f00 0001
        0x0010:  7f00 0001 d37a 04d2 0845 34fa 1cc7 46cb
        0x0020:  8010 0156 fe28 0000 0101 080a 2ea0 e6b5
        0x0030:  2ea0 e6b5",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,20,https://github.com/simh/simh/pull/599#issuecomment-416271383,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","Maybe if I could see what you're actually doing I might have something specific to say.
Apart from showing your code, there may be a very different way to solve what you are trying to solve.
I suggest this since I really cringe at the amount of OS overhead needed to achieve the small change in the memory contents of one simulator by another simulator using any socket based approach to solve this.  I say 'any' since the OS overhead is similar with the direct socket calls in your original approach vs the approach using TMXR.  Compare this overhead to the almost 0 cost using a shared memory approach with both simulators running on the same host.
I'm thinking that you could run a handful of PDP11 simulators with each using simh throttling to some execution rate similar to the original hardware execution rate along with the PDP10 simulator on almost any multi-core host system and things would run reasonably well if all of the changes you're modeling was done in shared memory.  At first glance this doesn't meet your additional goal of having a front panel for each of the simulated systems that also modeled the original hardware.  This completely independent problem should be somewhat easy to solve if the PDP11 and the PDP10 simulator used the sim_frontpanel API to drive the frontpanel display and control activities of the simulator(s).  The current sim_frontpanel API doesn't yet support having the frontpanel application on a different host from the simulator it is controlling, but this execution model was envisioned from the beginning, but actual support was deferred until demand existed.  A frontpanel application (or applications for different simulators) can be implemented now with the existing local API and once that is working, the only change needed would be the startup API which initializes the interface to the simulator.  If you go down this path, I'll be glad to provide support for simulators remote from the front panel application.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/aap,21,https://github.com/simh/simh/pull/599#issuecomment-416283572,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.",Since for the other side of the connection we're not using simh (at least for the two main uses right now) the network protocol is really the simplest. And it's fast enough for our use case as far as we can tell.,True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,22,https://github.com/simh/simh/pull/599#issuecomment-416285128,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","What is on the other side of the connection?
Even with that case, the example I provided for the PDP11 side of the TMXR based connection, I provided both a TCP and a shared memory mode for the data exchange.  That model could readily be implemented for the PDP10 side (with multiple connections) with each connection configured as either TCP or shared memory.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/aap,23,https://github.com/simh/simh/pull/599#issuecomment-416293478,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","The other side are my TV11 emulator for the Knight TV system: https://github.com/aap/tv11
and my PDP-6 emulator for the 10-6 connection which is using almost the same protocol: https://github.com/aap/pdp6
I haven't actually looked at your code and left that to lars. I'm just bugging him for the last couple of day to implement the final protocol.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,24,https://github.com/simh/simh/pull/599#issuecomment-416324362,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","This is my code at this point:

https://github.com/larsbrinkhoff/simh/blob/mark/ten11/PDP11/pdp11_ten11.c
https://github.com/larsbrinkhoff/ka10-simh/blob/lars/unibus2/PDP10/ka10_ten11.c

I can provide disk images for the ka10 simulator if necessary.
At this stage I only tried to add to the ka10 ten11 the TMXR two-byte length prefix to the messages.  The next step would be to rewrite it to use proper SIMH devices, units, service routines, etc.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,25,https://github.com/simh/simh/pull/599#issuecomment-416326336,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I understand the overhead is cringe worthy, but I'd like to be able to use a PiDP-11 with an rPi built in, hooked up to a PC or the future PiDP-10.  If SIMH supported using select() or similar instead of frequent polling, the overhead would be smaller.
Keep in mind some applications need to access the Unibus I/O page.  I believe the shared memory option doesn't support that, correct?",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/markpizz,26,https://github.com/simh/simh/pull/599#issuecomment-416332846,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I understand the overhead is cringe worthy, but I'd like to be able to use a PiDP-11 with an rPi built in, hooked up to a PC or the future PiDP-10.

If the PiDP-11 used the sim_frontpanel API to interface between the simulator and the physical frontpanel hardware (or GUI implementation) and the simulator, then, as I said, the only change would be changing the frontpanel startup API to the as yet unimplemented remote simulator startup.

If SIMH supported using select() or similar instead of frequent polling, the overhead would be smaller.

The overhead would be smaller, but still at least one system calls per instruction executed.

Keep in mind some applications need to access the Unibus I/O page. I believe the shared memory option doesn't support that, correct?

That is currently true, but I didn't know about the I/O page access requirement when I first implemented it.  The current implementation could be enhanced to support I/O page access and the result could easily avoid system calls.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,27,https://github.com/simh/simh/pull/599#issuecomment-454667400,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","This has been resting for a while.  I now have the SIMH-based KA10 simulator talking through TXMR to a PDP-11 simulator which is not SIMH.  My intent is to pick up this pull request again and have it join the happy family.

Side note: There is another DEC shared memory interface called DTE20 used between a KL10 processor and up to four PDP-11s.  It's a more complex interface with two-way shared memory and inter-processor interrupts.  I believe all MIT KL10s used this to add MINITS frontends talking Chaosnet.  It's documented here: http://bitsavers.org/pdf/dec/pdp10/KL10/EK-DTE20-UD-003_Oct76.pdf
There's a third KL10-PDP11 shared memory interface called DL10.",True,{}
simh/simh,https://github.com/simh/simh,599,2018-07-28T06:51:25Z,,2021-03-17T12:20:13Z,OPEN,False,452,2,4,https://github.com/larsbrinkhoff,PDP11: External bus interface,1,[],https://github.com/simh/simh/pull/599,https://github.com/larsbrinkhoff,28,https://github.com/simh/simh/pull/599#issuecomment-532529869,"Context
The MIT AI lab PDP-10 had a device to access the core memories of up to eight attached PDP-11s, called the Rubin 10-11 interface.  The PDP-11 machines were used as peripheral processors or used shared memory to talk to ITS on the PDP-10.  The principle of operation is quite simple.  The PDP-10 can read or write individual words using Unibus.  The PDP-11s can only access its own memory, not the PDP-10 memory.
I have added this capability to the SIMH PDP-11 simulator.  It uses the socket API to connect to a PDP-10 simulator.  The PDP-10 can send read and write messages, and the PDP-11 will reply with a status code and data for reads.
This is only at a proof-of-concept stage.  The code is most likely not acceptable for merging yet.  Since this is implemented as point-to-point message passing, maybe TMXR can be used instead of sockets.
My question is, is this feature something that could be considered for inclusion?  If so, I could post what I have and get comments on how to rewrite it more properly.","I think @aap and I are coming around to agree with @markpizz about using shared memory.
First, experience with our socket-based (through TMXR) shared memory has showed that using it locally inside one machine is OK, but across Ethernet is slow.  It may be OK for some use cases, such as those computers that only used the shared memory interface to load programs occasionally.
Second, we have some other shared memory interfaces in mind for the future.  The MIT KL10 had two of those: DTE20 and DL10.  Unlike Rubin's 10-11 interface, they are two-way: the PDP-11 can access all of the PDP-10 memory, and vice versa.  Solving this is a different problem, and we believe using shared memory on the host is the best way.",True,{}
simh/simh,https://github.com/simh/simh,602,2018-07-28T08:43:18Z,2018-07-29T12:22:42Z,2018-07-29T12:22:42Z,CLOSED,False,4,0,1,https://github.com/larsbrinkhoff,"PDP11: Allow setting core size to 8K, 24K, 40K, and 56K.",1,[],https://github.com/simh/simh/pull/602,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/602,"I have some historical software that claims some PDP-11s had 24K and 56K octets of core memory.
This adds the full set of 8K increments < 64K.","I have some historical software that claims some PDP-11s had 24K and 56K octets of core memory.
This adds the full set of 8K increments < 64K.",True,{}
simh/simh,https://github.com/simh/simh,602,2018-07-28T08:43:18Z,2018-07-29T12:22:42Z,2018-07-29T12:22:42Z,CLOSED,False,4,0,1,https://github.com/larsbrinkhoff,"PDP11: Allow setting core size to 8K, 24K, 40K, and 56K.",1,[],https://github.com/simh/simh/pull/602,https://github.com/markpizz,2,https://github.com/simh/simh/pull/602#issuecomment-408674246,"I have some historical software that claims some PDP-11s had 24K and 56K octets of core memory.
This adds the full set of 8K increments < 64K.",Merged with Cherry pick to keep commit sequence linear.,True,{}
simh/simh,https://github.com/simh/simh,604,2018-07-30T20:27:56Z,2018-08-06T05:43:26Z,2018-08-06T05:43:26Z,MERGED,True,908,565,27,https://github.com/rcornwell,Updated Sim_Card interface.,3,[],https://github.com/simh/simh/pull/604,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/604,Updates to sim_card to support stacking. Also changes to B5500 and I7000 simulators to support these changes.,Updates to sim_card to support stacking. Also changes to B5500 and I7000 simulators to support these changes.,True,{}
simh/simh,https://github.com/simh/simh,608,2018-08-11T07:50:12Z,2018-08-11T15:46:16Z,2018-08-11T15:46:16Z,MERGED,True,15,20,5,https://github.com/psco,AltairZ80: Replaced assert() with ASSURE() for error checking at run …,1,[],https://github.com/simh/simh/pull/608,https://github.com/psco,1,https://github.com/simh/simh/pull/608,…time,…time,True,{}
simh/simh,https://github.com/simh/simh,610,2018-08-19T00:40:19Z,2018-08-19T02:53:51Z,2018-08-19T02:53:51Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Prevent CIO driver conflicts with kernel,0,[],https://github.com/simh/simh/pull/610,https://github.com/sethm,1,https://github.com/simh/simh/pull/610,"Prevent CIO drivers from stepping on kernel memory space unless they're running diagnostics.
Force offsets in fprint_sym_m to be signed.","Prevent CIO drivers from stepping on kernel memory space unless they're running diagnostics.
Force offsets in fprint_sym_m to be signed.",True,{}
simh/simh,https://github.com/simh/simh,610,2018-08-19T00:40:19Z,2018-08-19T02:53:51Z,2018-08-19T02:53:51Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Prevent CIO driver conflicts with kernel,0,[],https://github.com/simh/simh/pull/610,https://github.com/markpizz,2,https://github.com/simh/simh/pull/610#issuecomment-414096503,"Prevent CIO drivers from stepping on kernel memory space unless they're running diagnostics.
Force offsets in fprint_sym_m to be signed.","Please back out this commit, fix this warning, and generate a new pull request (rewrite history):
2>3b2_ports.c
2>..\3B2\3b2_ports.c(261) : warning C4101: 'data' : unreferenced local variable

Or, I can merge with a cherry-pick and generate the commit with you as author with that warning fixed.  Let me know your plans.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,611,2018-08-19T22:51:22Z,2018-08-20T16:23:17Z,2018-08-20T16:23:17Z,MERGED,True,411,422,18,https://github.com/sethm,CIO memory overwrite fix and warning cleanup,2,[],https://github.com/simh/simh/pull/611,https://github.com/sethm,1,https://github.com/simh/simh/pull/611,"This pull request contains two changes:


Fixes a bug that caused 12 bytes of SVR3 kernel memory to be overwritten whenever the PORTS or CTC card was initialized.


Cleans up all warnings in 3B2 code generated when compiled with -Wall, and moves static declarations out of header files and into corresponding source files.","This pull request contains two changes:


Fixes a bug that caused 12 bytes of SVR3 kernel memory to be overwritten whenever the PORTS or CTC card was initialized.


Cleans up all warnings in 3B2 code generated when compiled with -Wall, and moves static declarations out of header files and into corresponding source files.",True,{}
simh/simh,https://github.com/simh/simh,611,2018-08-19T22:51:22Z,2018-08-20T16:23:17Z,2018-08-20T16:23:17Z,MERGED,True,411,422,18,https://github.com/sethm,CIO memory overwrite fix and warning cleanup,2,[],https://github.com/simh/simh/pull/611,https://github.com/sethm,2,https://github.com/simh/simh/pull/611#issuecomment-414161743,"This pull request contains two changes:


Fixes a bug that caused 12 bytes of SVR3 kernel memory to be overwritten whenever the PORTS or CTC card was initialized.


Cleans up all warnings in 3B2 code generated when compiled with -Wall, and moves static declarations out of header files and into corresponding source files.","Please note: My Windows development environment is still not set up, so I have not compiled under Windows. I'll be working on that today. I have cleared all warnings issued when compiled with clang on OS X using -Wall, so I have high hopes that there will be no warnings under Windows.",True,{}
simh/simh,https://github.com/simh/simh,612,2018-08-23T00:16:19Z,2018-08-23T00:20:29Z,2018-08-23T00:20:29Z,MERGED,True,62,24,6,https://github.com/sethm,3b2: Fix for erratic CONTTY behavior,1,[],https://github.com/simh/simh/pull/612,https://github.com/sethm,1,https://github.com/simh/simh/pull/612,,,True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/614,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/614#issuecomment-418322032,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","To run from the ROM, use something like this which is supposed to mimic a GT40.
set cpu 11/05
set cpu 16k
set dli enable
set dli address=17775610
at dli 3456
set vt enable
set vt crt=vr14
set vt scale=1
set vt address=17772000
set rom enabled
at rom bootvt.img
go 166000",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/614#issuecomment-418322461,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Here is the ROM image file.  It's just a pure image.
boot.zip",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/614#issuecomment-418365427,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","I added a hack to get the VT11 to read data from the ROM.  Without this, the VT11 will enter a halted state and no text will be displayed.
Logging into ITS:

CC @philbudne.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/614#issuecomment-418365830,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Note that keyboard input is from the SIMH console, not the VT window!",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/614#issuecomment-418639022,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","@tlhackque suggested the ROM device should support multiple units.  That was my intention too, but I'd like advice on how to make multiple DEVICE instances.  Is there an example of this elsewhere in SIMH?",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/614#issuecomment-418789508,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Here is another test ROM.
The code required the HITMISS register to be 1.  At the end, it gets an address from 704 and jumps to that plus 2.  I don't know how that's supposed to work.
set cpu 11/70
set cpu 64k
set rom enabled
set rom address=17765000
at rom pdp1170.img
dep hitmiss 1
go 165000

1170.zip",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/614#issuecomment-419327967,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Information on the SIMH mailing list is that the ""1170"" ROM is diagnostics, which is called from a boot ROM.  The boot ROM puts a return address, minus 2, in 704.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/614#issuecomment-419359282,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","I rebased this branch on top of the latest changes.  Verified that:

The VT11 can read from the IO page ROM without my hack.
Keyboard input from the VT window works with the configuration used to simulate a GT40.

Note: type }R to make the ROM do a restart and clear the screen.  I have yet to test }L to enter loading mode.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/614#issuecomment-419366835,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","@markpizz wrote:

For now, you could leverage the multiple DIB support to potentially create multiple ROM blocks in the I/O page.

Is there an example of this I can look to for inspiration?",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/614#issuecomment-419385668,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.",I noticed pdp11_vt.c now fails to build when USE_DISPLAY is not set.  I added a commit here to fix that.,True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/markpizz,12,https://github.com/simh/simh/pull/614#issuecomment-419474295,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Lars,
Something weird is happening.
I've got commit ee2ea26 which included fixing vt_fetch() to sign extend the provided address when it is in the 16bit I/O page.
I cherry picked your USE_DISPLAY not defined fix 450e48f and now my git diff shows only your change to fix USE_DISPLAY, but if I look at the whole file produced by 450e48f all of the other changes introduced by ee2ea26 are gone.
Have you 'changed history' without telling me so I can drop your repo as a remote before I look at it again?

Mark",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/markpizz,13,https://github.com/simh/simh/pull/614#issuecomment-419481899,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.",Opps.  Never mind.  I was looking in the wrong directory.  Sorry for any confusion.,True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/614#issuecomment-419493966,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Admittedly, I do a lot of rebasing and rewriting to get a pull request into acceptable shape.  So I have been known to confuse people.  Glad you sorted it out.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/markpizz,15,https://github.com/simh/simh/pull/614#issuecomment-419674521,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Several details of feedback:

The code in rom_attach() should use a single call to sim_fread() to populate the rom_image buffer rather than the while loop and word assembly.  sim_fread() will do word assembly for you.  In fact, you can set unit flags UNIT_BUFFABLE|UNIT_MUSTBUF and call attach_unit() to do all the work.  The uptr->filebuf will then hold the ROM buffer's contents instead of you having to allocate it (rom_image goes away).  You might want to ""sim_switches |= SWMASK (""Q"");"" to silence the attach message about buffering file in memory.  If you use attach_unit as I suggest here, you won't even need to call sim_fread().
In rom_make_dib() the vector info should be explicitly left as 0 since ROMs don't have interrupts, likewise for the interrupt ack and ulnt.  Since the number of units is a compile time value, you might just want to have a DIB array which has a dimension of ROM_UNITS rather than having to dynamically allocate the DIBs.
In rom_make_dib() you need to link the ROM device's DIBs together with the DIB next field in order for a device to have multiple dibs.  You should handle someone using ROM1 (unit 1) first and then ROM0 (unit 0), or if ROM_UNITS > 2, an arbitrary attach order.  The linked list doesn't have to be in attach order it, but all attached DIBs should be linked.  The beginning of the linked list should be stored in the rom_dev.ctxt cell.
rom_reset() should NOT free up anything.  rom_reset() will be called often, but for a ROM  device it probably shouldn't do anything.  Each unit should be freed (and its address space freed with build_ubus_tab(&rom_dev, NULL) re-connect any remaining DIBs and then if any remain call build_ubus_tab(&rom_dev, remaining-dib-listhead))  This freeing belongs in rom_detach().
rom_set_addr() should return SCPE_ALATT if the unit is already attached.  You can change an attached ROM address.
for now, the range test on the ROM address requiring it be in the I/O page belongs there.  Once the memory plumbing is changed, then ROMs below the I/O page will be supported, but registering them will probably not be via build_ubus_tab().  You might want to use ""return sim_messagef(SCPE_ARG. ""ROM must be in I/O page, above 0%o\n"", IOPAGEBASE);""

That is everthing I see at first glance.  :-)",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/614#issuecomment-419693431,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Thanks.  I don't know how to use the SIMH facilities, so it's good with some advice.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/markpizz,17,https://github.com/simh/simh/pull/614#issuecomment-419711790,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Further feedback:

UNIT_IDLE is not useful for a ROM device.  UNIT_IDLE tells the SCP event dispatcher that if the unit is at the top of the event queue, idling is possible.  Since no ROM unit will ever be on the event queue, it serves no purpose.
All ROM units should have the same initial uptr->flags.  Setting these in rom_reset() with |= would be fine.  rom_reset() is called before the first simh command is read.  Appropriate initial flags should be: UNIT_RO|UNIT_MUSTBUF|UNIT_ATT|UNIT_BUFFABLE|UNIT_ATTABLE.  As I said previously, rom_reset() will be called any number of times (at simulator startup and during boot and whenever the CPU executes a RESET instruction).  uptr->unit_base and uptr->unit_end and uptr->flags&UNIT_ATT SHOULD NOT be cleared in rom_reset().
rom_attach() shouldn't be calling scp_attach_unit(), but merely attach_unit() so you don't need to declare scp_attach_unit(),  You should probably be doing an existence check for the specified file before calling attach_unit()....Maybe a 0 return from sim_fsize_name() could help with that.  Even if the file exists, if it is 0 in size, that's not a candidate for a useful ROM image.
when I earlier said: ""rom_set_addr() should return SCPE_ALATT if the unit is already attached."" I meant to also say: You CAN'T change an attached ROM's address.
in rom_attach(), if rom_make_dib() fails, you should unwind anything that's already been done to the unit so that it ends up looking like it did prior to the call to rom_attach().  I would do this cleanup in rom_detach(), which actually should do something - see 7.
in rom_make_dib(), rom_dib[0] should be initialized like all others AND it should start with dib->rd as NULL.  I'm thinking that dib->wr should never be populated, but I've asked Bob Supnik about this detail.
build_ubus_tab() does need to be called for all units as they are attached.
rom_detach() should zero the related dib->rd and dib->wr values and then call build_ubus_tab() with that dib to deregister the block of I/O page memory that has been connected to this ROM. It should also call detach_unit() to get the file closed and the buffer deallocated.
The SHOW IOSPACE command will help you see if things look right.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/614#issuecomment-419718848,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.",Thanks.  I'm still going though your first list.,True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,19,https://github.com/simh/simh/pull/614#issuecomment-419727351,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","SHOW IOSPACE looks right, but go 166000 no longer works for the VT11 ROM.
Do I need some kind of REG definitions for examine rom to work?",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/markpizz,20,https://github.com/simh/simh/pull/614#issuecomment-419747784,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","More feedback:

DIB->wr should always be NULL for ROM devices.  The CPU can't write to a ROM device.  Meanwhile, you could still support DEPOSIT to an attached ROM device if you wanted to.  You could interpret the address supplied in the DEPOSIT context in one of two ways: a) As an offset into the particular ROM unit's data, or b) as a full memory address, which you will have to explicitly range check AND mask and bound by the bus width (Q22 or U18).
I would have rom_reset() always uptr->flags |= ROM_UNIT_FLAGS; none of these ever get turned off.  This will then end up with the flags always set correctly when ROM_UNITS gets changed without having to manually add extra unit definitions with static flag assignments.
Where you have: uint16 *image = rom_unit[i].filebuf;, this should be uint16 *image = (uint16 *)rom_unit[i].filebuf; or we'll see compile warnings sometimes.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,21,https://github.com/simh/simh/pull/614#issuecomment-419871895,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","I added in the changes you emailed me.  The VT11 ROM seems to work, but I'll have to test it more later.
I'm planning to squash all these commits in preparation for merging.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,22,https://github.com/simh/simh/pull/614#issuecomment-419955480,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Booting from the VT11 ROM seems to work.  I can no longer login to ITS, but I guess that's a problem elsewhere.",True,{}
simh/simh,https://github.com/simh/simh,614,2018-09-04T10:44:01Z,2018-09-11T12:44:15Z,2019-10-08T07:01:16Z,MERGED,True,225,1,3,https://github.com/larsbrinkhoff,PDP11: ROM device.,1,[],https://github.com/simh/simh/pull/614,https://github.com/larsbrinkhoff,23,https://github.com/simh/simh/pull/614#issuecomment-419956232,"This is a ROM device for booting from the VT11 card in a GT40.
I'm posting this for review.  This is in very raw form.  If this approach is OK, I'll rework it as necessary for inclusion in SIMH.","Ah, it's just my CapsLock key is no longer mapped to Control.  Everything works OK with 122a87e.",True,{}
simh/simh,https://github.com/simh/simh,615,2018-09-06T17:56:29Z,2018-09-06T18:26:53Z,2018-09-06T18:26:53Z,CLOSED,False,8,0,2,https://github.com/larsbrinkhoff,"TMXR: Add Morton box line speeds: 25k, 40k, 50k, and 80k BPS.",1,[],https://github.com/simh/simh/pull/615,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/615,"The ""Morton box"" was a PDP-10 I/O bus device custom made at MIT.  It was a terminal multiplexer supporting high speeds.  In order for a SIMH user to set those speeds, here is a pull request to add 25k, 40k, 50k, and 80k bits/s.","The ""Morton box"" was a PDP-10 I/O bus device custom made at MIT.  It was a terminal multiplexer supporting high speeds.  In order for a SIMH user to set those speeds, here is a pull request to add 25k, 40k, 50k, and 80k bits/s.",True,{}
simh/simh,https://github.com/simh/simh,615,2018-09-06T17:56:29Z,2018-09-06T18:26:53Z,2018-09-06T18:26:53Z,CLOSED,False,8,0,2,https://github.com/larsbrinkhoff,"TMXR: Add Morton box line speeds: 25k, 40k, 50k, and 80k BPS.",1,[],https://github.com/simh/simh/pull/615,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/615#issuecomment-419189402,"The ""Morton box"" was a PDP-10 I/O bus device custom made at MIT.  It was a terminal multiplexer supporting high speeds.  In order for a SIMH user to set those speeds, here is a pull request to add 25k, 40k, 50k, and 80k bits/s.","Oh, and this is in preparation for @rcornwell's KA10 simulator.  To which I posted a pull request for simulating the Morton box.",True,{}
simh/simh,https://github.com/simh/simh,615,2018-09-06T17:56:29Z,2018-09-06T18:26:53Z,2018-09-06T18:26:53Z,CLOSED,False,8,0,2,https://github.com/larsbrinkhoff,"TMXR: Add Morton box line speeds: 25k, 40k, 50k, and 80k BPS.",1,[],https://github.com/simh/simh/pull/615,https://github.com/markpizz,3,https://github.com/simh/simh/pull/615#issuecomment-419189703,"The ""Morton box"" was a PDP-10 I/O bus device custom made at MIT.  It was a terminal multiplexer supporting high speeds.  In order for a SIMH user to set those speeds, here is a pull request to add 25k, 40k, 50k, and 80k bits/s.",Merged via Cherry Pick due to other pending changes that crossed paths with it.,True,{}
simh/simh,https://github.com/simh/simh,615,2018-09-06T17:56:29Z,2018-09-06T18:26:53Z,2018-09-06T18:26:53Z,CLOSED,False,8,0,2,https://github.com/larsbrinkhoff,"TMXR: Add Morton box line speeds: 25k, 40k, 50k, and 80k BPS.",1,[],https://github.com/simh/simh/pull/615,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/615#issuecomment-419195236,"The ""Morton box"" was a PDP-10 I/O bus device custom made at MIT.  It was a terminal multiplexer supporting high speeds.  In order for a SIMH user to set those speeds, here is a pull request to add 25k, 40k, 50k, and 80k bits/s.",Thanks!,True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/616,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/markpizz,2,https://github.com/simh/simh/pull/616#issuecomment-420013792,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.",Relevant info to look into what you're doing here is the contents of the input files you're working with...,True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/616#issuecomment-420018335,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","Right, I pass in the path to the pdp10 binary, and the configuration file which is this:
set console -u telnet=1927
set cpu its
set cpu idle
set cpu lights
set tim y2k
set dz 8b lines=8
at dz0 10004
set rp0 rp06
at rp0 out/simh/rp0.dsk

I can upload the rp0.dsk file somewhere if necessary.",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/markpizz,4,https://github.com/simh/simh/pull/616#issuecomment-420024728,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","If you zip the rp0.dsk file and the result isn't crazy big, then you can drop the zip file here, otherwise please put it on a google drive somewhere",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/616#issuecomment-420027393,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","Here's the rp0.dsk image:
http://lars.nocrew.org/its/its.zip",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/markpizz,6,https://github.com/simh/simh/pull/616#issuecomment-420084372,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","Looking at your panda.c, you have just gotten far enough to deliver the boot command to the simulator, but then your program exits.
It doesn't continue to run getting call backed data deliveries and interacting with the simulator.  The example/test program interacts with the user until the user specifically wants to exit and then it cleanly shuts things down.  Your program needs to something similar.",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/markpizz,7,https://github.com/simh/simh/pull/616#issuecomment-420084632,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","While you get the basics put together here, you might want to stub out the USB interactions (and potentially emit text) to make the simulator interactions more robust...",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/616#issuecomment-420134309,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","At some point I had it loop like this, but that didn't make a difference.
Anyway, I have come to feel unhappy about this approach.  The frontpanel API is a good fit for e.g. Blinkenbone or PiDP-8, but it's not what I had in mind for the Panda Display.
  while (sim_panel_get_state (panel) == Run) {
    usleep (100000);
  }",True,{}
simh/simh,https://github.com/simh/simh,616,2018-09-10T18:10:36Z,,2018-09-11T13:28:23Z,OPEN,False,220,1,4,https://github.com/larsbrinkhoff,Attempting a Panda Display frontpanel,2,[],https://github.com/simh/simh/pull/616,https://github.com/markpizz,9,https://github.com/simh/simh/pull/616#issuecomment-420274452,"This is a little premature for a pull request, but maybe I can get some input.
This first adds a CPU setting for enabling console lights.  Then an attempt at using this with a frontpanel application for the Panda Display.  The frontpanel seems to start the simulator, but nothing happens.  The telnet console is unresponsive.","If you manually start the simulator, and enter the configuration commands you provided and then enter ""BOOT RP0"" which is the equivalent of what panda.c does, notice what is happening...
If you look at what the FrontPanelTest.c program is doing in its startup commands, on a Linux host you'll see: ""! nohup xterm -e 'telnet localhost 1927' &\n""
The point here is that something needs to be connected to the console port of the simulated system.  An advanced configuration option (when your frontpanel app is more stable) would be to allow a console port connection to be arbitrarily delayed.  This would be done with: SET CONSOLE BUFFERED in the initial configuration file.
Once a console connection is in place (or deferred with CONSOLE BUFFERED), the BOOT command (sim_panel_exec_boot (panel, ""RP0"")) will be able to complete and the simulator will be in a RUN state.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/636,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/636#issuecomment-436263722,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","I have a work in progress:
https://github.com/larsbrinkhoff/simh/tree/lars/ch11
It adds a device called CH to PDP-11, VAX 730/750/780/8600, and PDP10 (KS10).",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/636#issuecomment-438254341,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","The device is nearly finished, but there's a problem with interrupts.  I don't know the details of Unibus interrupts, or how they're implemented in SIMH.  @markpizz, if you can give me a hint, that would be much appreciated.
Specifically, when am I supposed to use SET_INT and CLR_INT, and what should I do in the interrupt ack routine in DIB?
I'm testing this with 4.1BSD, plus MIT patches, running on a VAX 11/780.  It's detecting the card and sends out packets.  But due to some software confusion the RX interrupt is disabled when packets are coming in.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,4,https://github.com/simh/simh/pull/636#issuecomment-438299229,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","The documentation you pointed clearly described a single interrupt vector for this device.
Given the single interrupt vector, that vector must be used to signal both transmit AND receive interrupts.  The distinction between these two interrupt cases is reflected by separate interrupt enable AND receive or transmit done bits in the CSR.
The DIB should be declared with:
DIB ch_dib = {
  IOBA_AUTO, IOLN_CH, &ch_rd, &ch_wr,
  1, IVCL (CH), IOVEC_AUTO
};

You absolutely don't need a ch_int routine (remove it).  Each Unibus/Qbus device has a single bit used in the BR level interrupt pending mask for each vector that they can interrupt on.  Devices which simulate multiple instances of a particular device (DZ, RQ, etc,) will have a separate set of vectors for each simulated device instance that is configured.  The interrupt ack routine serves to let the device code return the vector of the specific device that has interrupted.
SET_INT should be invoked whenever interrupts of a particular type (receive or transmit) is enabled and I/O has completed.
CLR_INT should be invoked when no interrupts remain pending.  No interrupts remain pending can occur in two cases:

when all interrupts are disabled (by clearing both RXIE and TXIE)
when both RXD and TXD are 0.

I would change ch_command() to invoke ch_test_int () once at the end of the routine instead of the two separate times.  You should also call ch_test_int () before the auto_config() call in ch_reset().  These suggestions, along with the above DIB change and the removal of ch_int() should get you further along.

Mark",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/636#issuecomment-438387545,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Thanks, I'll try this soon!",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/636#issuecomment-439390875,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Close to working now.  Simple protocols like HOSTAT, FINGER, and TIME works.  TELNET or SUPDUP doesn't.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/636#issuecomment-439719437,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","This is now tested working with vax780 running 4.1BSD, talking to a PDP-10 running ITS.
I converted the issue to a pull request.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,8,https://github.com/simh/simh/pull/636#issuecomment-439879290,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Several points of feedback:

pdp11_ch.c should have CRLF line endings to be consistent with the rest of the simh codebase.
the bit specified in vax860_defs.h for INT_V_CH is wrong.
in pdp11_ch.c, what is the thinking behind the conditional MTAB entries specific for VM_PDP11?
The CH DEVICE structure doesn't populate the REG member with a pointer to simh REG declarations which describe the state of the device.  All variables used by the device should be included.  These will then be visible with SCP EXAMINE and DEPOSIT commands.
You've got ch_ex and ch_dep routines which don't do anything.  They probably shouldn't be there at all.
There is no reason that the tmxr transport for this data has to be UDP.  It should work correctly independent of UDP or TCP.  Let the user specify their desired transport (AND incoming port number) on the SCP ATTACH command.  The current hard setting of the incoming port number to 42043 won't work on all platforms since if both ends of the conversation are on the same host system, there will be two processes listening on the same port.  The attach string that is passed into tmxr_open_master() should have ""PACKET"" indicated along with the other relevant values.
You probably want an MTAB entry to specify the address of the peer simulator (see pdp11_dmc.c for an example of that and it's attach command).
The ch_svc unit service routine for received packets schedules itself to run every 1000 instructions.  This will effectively block a simulator's ability to idle.  Things should work just fine if you used sim_clock_coshedule().
When you make the change suggested in 6 above, you should move the call to tmxr_poll_conn out of the ch_attach() routine and perform that activity in ch_svc().  ch_svc should be activated in the ch_attach() routine after a successful call to tmxr_open_master() and canceled in the ch_detach() routine.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/636#issuecomment-439882004,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Thanks.  I'll go through your list.  For now:

This is just copying and pasting from elsewhere.  Please advise.

and

The reason for using UDP on port 42042 is to interoperate with another existing implementation.  I just updated the pull request so maybe you saw a previous revision, but now there's a PORT device configuration.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,10,https://github.com/simh/simh/pull/636#issuecomment-439907092,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","I guess that I did see an earlier version since that would explain the odd branch structure I saw after I had picked up your stuff.


This is just copying and pasting from elsewhere. Please advise.


Well, there may be some discussion about why that stuff is in the other place(s) you may have seen it, but for your device it only ever had a single address and vector, so the non-pdp11 code is the right stuff.


The reason for using UDP on port 42042 is to interoperate with another existing implementation. I just updated the pull request so maybe you saw a previous revision, but now there's a PORT device configuration.


If you remove the hard coded UDP in the attach string, someone who wanted to interoperate with the other implementation could merely specify it as part of the attach string:  ""localhost:42042,UDP"" and that would work compatibly.  I guess you could leave the UDP there, and someone who wanted TCP could specify the attach string: ""localhost:42042,TCP"".  In any case, the tmxr_poll_conn() belongs in the ch_svc() routine and the ch_unit should be scheduled after a successful call to tmxr_open_master() and it should be sim_cancel(&ch_unit) in the ch_detach() routine.  Populate the ch_help() routine to explain the usage or more specifically provide a help_attach() routine which explains the usage and the ch_help() can describe things mentioned in https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/636#issuecomment-440024166,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","I'm addressing your points. For some reason number 9 broke the device, but I'll have to check on that tomorrow. The help text is still to do.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/636#issuecomment-440173010,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","I believe these additional commits adresses all your points.  So I'll be awaiting further review comments.
When done, I intend to squash my commits before merging.  Do you want your commits squashed or to remain as is?  Or maybe you want to handle these details.  Let me know.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,13,https://github.com/simh/simh/pull/636#issuecomment-440269382,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Squashing all commits is preferred.
Further comments:

The DEVICE reset routine is part of the SCP plumbing and generally not a routine that would be called by any device code due to programmatic behavior of code within a simulator.  It's job is to perform initialization and setup interactions with the rest of the SCP framework.  It may also call routines within the device simulation that reset state.  I mention this since currently ch_command() calls ch_reset().  Maybe there should be another routine called ch_prog_reset() which ch_command() and ch_reset() call...
The info you've got in the help routine really belongs in the separate REG and MTAB entries.  For example in the PDP11 simulator, type HELP DZ REG and HELP DZ SET and HELP DZ SHOW and EXAMINE DZ STATE.  The REG and MTAB arrays are walked by the SCP HELP logic to gather that output.  It is preferred that new devices use the hierarchical help model (see HELP DMC or HELP KDP), however it is also acceptable to use the simpler non-hierarchical help model that  is just one blob of output, but uses the related device help routines (see HELP XU).
You might want to define a BITFIELD structure that describes the details of the CH device's CSR which you can then display in debug output (see DZ debug in dz_wr() and dz_rd() as a examples).
One of the purposes of the DEVICE REG array is to contain ALL of the device's state information so that a simulator can be stopped with ^E a SCP ""SAVE simu.save"" command executed, and the simulator exits, and the simulator is started again and a SCP ""RESTORE simu.save"" command executed and a ""CONTINUE"" command executes and absolutely nothing in the simulator can tell that things weren't running the whole time.  Any configuration data your device gathers through SCP SET commands is generally part of that state (the SET CH NODE=value for example).  This information usually would be described in REG structures with REG_HRO flag bits set so that EXAMINE and DEPOSIT commands don't display or change these things.
One change I made to ch_svc() really shouldn't be there.  Specifically the setting of ch_lines[0].rcve to TRUE on a successful return from tmxr_poll_conn().  The rcve state is properly managed by your existing register interaction logic.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,14,https://github.com/simh/simh/pull/636#issuecomment-440276243,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","More comments:
6) There needs to be some robust validation logic in the SET CH PEER.  Copy from dmc_setpeer().
7) After comment 4 above is addressed, to be properly behaved during a RESTORE command, the last few lines of ch_attach() should be:
  uptr->filename = (char *)realloc (uptr->filename, 1 + strlen (cptr));
  strcpy (uptr->filename, cptr);
  sim_clock_coschedule (uptr, 1000);
  return SCPE_OK;",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,15,https://github.com/simh/simh/pull/636#issuecomment-440400578,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Ok, round two finished.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/636#issuecomment-440660503,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Testing with PDP-11 now.  I have a problem configuring address and vector:
simh> set ch address=17764140 vector=270
Non-existent parameter

I had to change the MTAB definitions slightly.  Now I can set ADDRESS and VECTOR.  And the PDP-11 software makes the right register accesses.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,17,https://github.com/simh/simh/pull/636#issuecomment-440680059,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","The ch_help() is moving in the right direction.
I would suggest that essentially all of the comment you used to open this pull request would be appropriate there and you really should structure it using the code from the xu_help() in pdp11_xu.c.
This suggested structure is related to Bob's original per simulator .doc files found in the doc directory.  These historically have a section for each device and the things included there were more or less organized like the suggested xu_help() output.  The ultimate goal was to have all devices containing their own documentation and to have SCP provide a facility to either present the built in help information and/or to generate complete documentation.
Also, rather than referring to the HELP CH ATTACH in the ch_help(), just call the attach help routine (like xu_help() does).",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/636#issuecomment-440780036,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","The help text now looks like this:
CH11 Chaosnet interface

The CH11 is a Unibus device which can be used with PDP-11, VAX, and
KS10.  It's a network interface for MIT's Chaosnet.  Options allow
control of the node address and network peer.  The node address must
be a 16-bit octal number.

CH device SET commands:

set CH ADDRESS=val              Unibus address
set CH VECTOR=val               Interrupt vector
set CH PEER=val                 Remote host name and port
set CH NODE=val                 Chaosnet node address
set CH ENABLE                   Enables device CH
set CH DISABLE                  Disables device CH
set CH DEBUG                    Enables debugging for device CH
set CH NODEBUG                  Disables debugging for device CH
set CH DEBUG=TRC;REG;PKT;DAT;INT;ERR
                                Enables specific debugging for device CH
set CH NODEBUG=TRC;REG;PKT;DAT;INT;ERR
                                Disables specific debugging for device CH

*CH device DEBUG settings:
    TRC         Detailed trace
    REG         Hardware registers
    PKT         Packets
    DAT         Packet data
    INT         Interrupts
    ERR         Error conditions

Configured options and controller state can be displayed with:

CH device SHOW commands:

show CH ADDRESS                 Unibus address
show CH VECTOR                  Interrupt vector
show CH PEER                    Remote host name and port
show CH NODE                    Chaosnet node address
show CH DEBUG                   Displays debugging status for device CH

The CH11 simulation will encapsulate Chaosnet packets in UDP or TCP.
To access the network, the simulated Chaosnet interface must be attached
to a network peer.

To configure CH11, first set the local Chaosnet node address, and
the peer:

  sim> SET CH NODE=<octal address>
  sim> SET CH PEER=<remote host>:<remote port>

Then, attach a local port.  By default UDP is used:

  sim> ATTACH CH <local port>

If TCP is desired, add ""TCP"":

  sim> ATTACH CH <local port>,TCP

Software that runs on SIMH that supports this device include:
 - ITS, the PDP-10 Incompatible Timesharing System
 - Berkeley Unix with MIT patches
 - MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various
encapsulating transport mechanisms exist: UDP, IP, Ethernet.

Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,19,https://github.com/simh/simh/pull/636#issuecomment-440782586,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Looks good!
Squash and generate a clean pull request.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,20,https://github.com/simh/simh/pull/636#issuecomment-440787570,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",Squashed.  Checked that VAX is still working.,True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,21,https://github.com/simh/simh/pull/636#issuecomment-440791498,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",Why does the squashed commit have a date some 16 days ago rather than just now?,True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,22,https://github.com/simh/simh/pull/636#issuecomment-440791856,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",I'm not sure how git does these things exactly.  Maybe it's the date of the first original commit.,True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,23,https://github.com/simh/simh/pull/636#issuecomment-440792678,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",I updated the date using the commit --date option.,True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,24,https://github.com/simh/simh/pull/636#issuecomment-440809700,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Date looks good, but I'm getting some compiler warnings about signed/unsigned inconsistent types on Windows.
in ch_set_node(), please change ""x = get_uint (cptr, 8, 0177777, &r);"" to ""x = (int)get_uint (cptr, 8, 0177777, &r);"".",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,25,https://github.com/simh/simh/pull/636#issuecomment-440930275,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation",Fixed.,True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,26,https://github.com/simh/simh/pull/636#issuecomment-440941319,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Related question:
What's the difference in SIMH, between a Unibus device and a Qbus one?  Apparently the MINITS Chaosnet software for PDP-11 ran on both Unibus and Qbus machines, and there was a Qbus Chaosnet interface.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/markpizz,27,https://github.com/simh/simh/pull/636#issuecomment-441061979,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","Related question:
What's the difference in SIMH, between a Unibus device and a Qbus one? Apparently the MINITS Chaosnet software for PDP-11 ran on both Unibus and Qbus machines, and there was a Qbus Chaosnet interface.

As long as the programming interface is the same and hardware actually existed for both the Unibus and Qbus there is no real difference.  This is especially true for devices which are exclusively programmed I/O vs DMA devices.  DMA devices are implicitly different due to the different size of bus addresses on Unibus vs Qbus.  A SIMH DEVICE declares which bus it is supported on with flag bits DEV_UBUS and DEV_QBUS.  On the PDP11 simulator, changing the CPU type can change the connected bus type so when the CPU type is changed inappropriate devices for the new bus are disabled.",True,{}
simh/simh,https://github.com/simh/simh,636,2018-11-18T19:30:45Z,2018-11-22T19:14:28Z,2019-01-16T07:05:51Z,MERGED,True,576,6,16,https://github.com/larsbrinkhoff,Unibus CH11: Chaosnet interface,1,[],https://github.com/simh/simh/pull/636,https://github.com/larsbrinkhoff,28,https://github.com/simh/simh/pull/636#issuecomment-454674416,"The CH11 is a Unibus device which can be used with PDP-11, VAX, and KS10.  It's a network interface for MIT's Chaosnet.
Software that should run on SIMH that supports this device include:

ITS
Berkeley Unix with MIT patches
MINITS, a PDP-11 Chaosnet router/terminal concentrator

Outside SIMH, there's KLH10 and Lisp machine simulators.  Various encapsulating transport mechanisms exist: UDP, IP, Ethernet.
Documentation:
https://lm-3.github.io/amber.html#Hardware-Programming-Documentation","FYI, there is a plan to use MINITS running on SIMH to attach Multics to Chaosnet.",True,{}
simh/simh,https://github.com/simh/simh,638,2018-11-25T18:59:02Z,2018-11-25T20:58:58Z,2018-11-26T06:56:37Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,"PDP10, PDP11, Unibus VAX: Set CH11 TX done on reset.",1,[],https://github.com/simh/simh/pull/638,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/638,Fixes #637.,Fixes #637.,True,{}
simh/simh,https://github.com/simh/simh,638,2018-11-25T18:59:02Z,2018-11-25T20:58:58Z,2018-11-26T06:56:37Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,"PDP10, PDP11, Unibus VAX: Set CH11 TX done on reset.",1,[],https://github.com/simh/simh/pull/638,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/638#issuecomment-441463677,Fixes #637.,"Tested with:

vax780 running 4.1BSD.
pdp11 running MINITS.",True,{}
simh/simh,https://github.com/simh/simh,638,2018-11-25T18:59:02Z,2018-11-25T20:58:58Z,2018-11-26T06:56:37Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,"PDP10, PDP11, Unibus VAX: Set CH11 TX done on reset.",1,[],https://github.com/simh/simh/pull/638,https://github.com/markpizz,3,https://github.com/simh/simh/pull/638#issuecomment-441463858,Fixes #637.,Hmm...  You didn't pull before you committed this and thus missed some SCP related commits.,True,{}
simh/simh,https://github.com/simh/simh,638,2018-11-25T18:59:02Z,2018-11-25T20:58:58Z,2018-11-26T06:56:37Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,"PDP10, PDP11, Unibus VAX: Set CH11 TX done on reset.",1,[],https://github.com/simh/simh/pull/638,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/638#issuecomment-441464357,Fixes #637.,"Rebased, and rechecked.",True,{}
simh/simh,https://github.com/simh/simh,638,2018-11-25T18:59:02Z,2018-11-25T20:58:58Z,2018-11-26T06:56:37Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,"PDP10, PDP11, Unibus VAX: Set CH11 TX done on reset.",1,[],https://github.com/simh/simh/pull/638,https://github.com/markpizz,5,https://github.com/simh/simh/pull/638#issuecomment-441473137,Fixes #637.,"Merged.
Please pull from master again now before making other changes.  I made a couple of minor changes to pdp11_ch.c.

Fixing SHOW CH before NODE and PEER have been set
Adding TMXR level debug options.",True,{}
simh/simh,https://github.com/simh/simh,639,2018-12-09T00:43:19Z,2018-12-12T18:39:39Z,2018-12-12T18:39:39Z,CLOSED,False,1,0,1,https://github.com/leobru,BESM6: Printer file position must be updated.,1,[],https://github.com/simh/simh/pull/639,https://github.com/leobru,1,https://github.com/simh/simh/pull/639,"Why would a sequential file need to be re-seeked in scp.c  to the stored position  rather than to the end of file at every restart of the simulation from the CLI is unclear, but a 1-line fix solves the issue.","Why would a sequential file need to be re-seeked in scp.c  to the stored position  rather than to the end of file at every restart of the simulation from the CLI is unclear, but a 1-line fix solves the issue.",True,{}
simh/simh,https://github.com/simh/simh,639,2018-12-09T00:43:19Z,2018-12-12T18:39:39Z,2018-12-12T18:39:39Z,CLOSED,False,1,0,1,https://github.com/leobru,BESM6: Printer file position must be updated.,1,[],https://github.com/simh/simh/pull/639,https://github.com/markpizz,2,https://github.com/simh/simh/pull/639#issuecomment-446696405,"Why would a sequential file need to be re-seeked in scp.c  to the stored position  rather than to the end of file at every restart of the simulation from the CLI is unclear, but a 1-line fix solves the issue.","Why would a sequential file need to be re-seeked in scp.c to the stored position rather than to the end of file at every restart of the simulation from the CLI is unclear, but a 1-line fix solves the issue.

Well, the pos field of the unit structure (for sequential devices - UNIT_SEQ) is commonly mentioned in an explicit REG declaration (often named POS) which then enables the user to ""reposition"" a sequential device through SCP (e.g., rewind a paper tape with ""DEPOSIT POS 0"").
This was the original purpose of maintaining the unit pos variable, so to directly support that activity, SCP repositions UNIT_SEQ devices to the indicated position whenever execution starts (RUN/GO/BOOT/STEP, etc.).
A secondary reason exists to assure that all UNIT_SEQ units are properly positioned across a SAVE/RESTORE command.  Previously, this proper positioning required an explicit REG declaration that included the unit pos variable.  However, while gathering info to answer your question, I determined that the unit pos variable should always be stored and restored in any SAVE/RESTORE.  This has been added to scp.c and the behaviour you encountered documented in doc/simh.doc.
Independent of this, while that thinking was happening other commits were submitted and merged.  So this change was merged with an explicit Cherry Pick commit attributing @leobru as the author.
To get a proper view of the simh/simh repo master branch locally and in your leobru/simh repo you should probably do:
$ git reset --hard
$ git push -f https://github.com/leobru/simh
$ git pull https://github.com/simh/simh",True,{}
simh/simh,https://github.com/simh/simh,640,2018-12-11T19:30:11Z,2018-12-12T06:46:54Z,2018-12-12T07:42:05Z,CLOSED,False,2,2,1,https://github.com/larsbrinkhoff,Fix A and M in Type 340 character set,1,[],https://github.com/simh/simh/pull/640,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/640,"There are minor deviations in the Type 340 character set compared to the ""340 DISPLAY PROGRAMMING MANUAL"".  As far as I can see, only A and M are affected.  The compete sets are reproduced here for reference.


CC @philbudne","There are minor deviations in the Type 340 character set compared to the ""340 DISPLAY PROGRAMMING MANUAL"".  As far as I can see, only A and M are affected.  The compete sets are reproduced here for reference.


CC @philbudne",True,{}
simh/simh,https://github.com/simh/simh,640,2018-12-11T19:30:11Z,2018-12-12T06:46:54Z,2018-12-12T07:42:05Z,CLOSED,False,2,2,1,https://github.com/larsbrinkhoff,Fix A and M in Type 340 character set,1,[],https://github.com/simh/simh/pull/640,https://github.com/philbudne,2,https://github.com/simh/simh/pull/640#issuecomment-446391756,"There are minor deviations in the Type 340 character set compared to the ""340 DISPLAY PROGRAMMING MANUAL"".  As far as I can see, only A and M are affected.  The compete sets are reproduced here for reference.


CC @philbudne","The errors are almost certainly my fault, I hand encoded the bitmaps
for upper case from the manual mentioned in the sources.

I suggest trying the following:

diff --git a/display/type340.c b/display/type340.c
index a58e929..89fd508 100644
--- a/display/type340.c
+++ b/display/type340.c
@@ -566,7 +566,7 @@ ipoint(int i, int n, unsigned char byte)
  */
 static const unsigned char chars[128][5] = {
     { 0070, 0124, 0154, 0124, 0070 },   /* 00 blob */
-    { 0176, 0240, 0240, 0240, 0176 },   /* 01 A */
+    { 0176, 0220, 0220, 0220, 0176 },   /* 01 A */^M
     { 0376, 0222, 0222, 0222, 0154 },   /* 02 B */
     { 0174, 0202, 0202, 0202, 0104 },   /* 03 C */
     { 0376, 0202, 0202, 0202, 0174 },   /* 04 D */
@@ -578,7 +578,7 @@ static const unsigned char chars[128][5] = {
     { 0004, 0002, 0002, 0002, 0374 },   /* 12 J */
     { 0376, 0020, 0050, 0104, 0202 },   /* 13 K */
     { 0376, 0002, 0002, 0002, 0002 },   /* 14 L */
-    { 0374, 0100, 0040, 0100, 0374 },   /* 15 M */
+    { 0376, 0100, 0040, 0100, 0376 },   /* 15 M */^M
     { 0376, 0100, 0040, 0020, 0376 },   /* 16 N */
     { 0174, 0202, 0202, 0202, 0174 },   /* 17 O */
     { 0376, 0220, 0220, 0220, 0140 },   /* 20 P */",True,{}
simh/simh,https://github.com/simh/simh,640,2018-12-11T19:30:11Z,2018-12-12T06:46:54Z,2018-12-12T07:42:05Z,CLOSED,False,2,2,1,https://github.com/larsbrinkhoff,Fix A and M in Type 340 character set,1,[],https://github.com/simh/simh/pull/640,https://github.com/philbudne,3,https://github.com/simh/simh/pull/640#issuecomment-446393270,"There are minor deviations in the Type 340 character set compared to the ""340 DISPLAY PROGRAMMING MANUAL"".  As far as I can see, only A and M are affected.  The compete sets are reproduced here for reference.


CC @philbudne",Opened PR with fix: #641,True,{}
simh/simh,https://github.com/simh/simh,640,2018-12-11T19:30:11Z,2018-12-12T06:46:54Z,2018-12-12T07:42:05Z,CLOSED,False,2,2,1,https://github.com/larsbrinkhoff,Fix A and M in Type 340 character set,1,[],https://github.com/simh/simh/pull/640,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/640#issuecomment-446480788,"There are minor deviations in the Type 340 character set compared to the ""340 DISPLAY PROGRAMMING MANUAL"".  As far as I can see, only A and M are affected.  The compete sets are reproduced here for reference.


CC @philbudne",Thanks!,True,{}
simh/simh,https://github.com/simh/simh,641,2018-12-11T22:51:02Z,2018-12-12T01:05:34Z,2018-12-12T01:05:34Z,CLOSED,False,2,2,1,https://github.com/philbudne,fix for https://github.com/simh/simh/issues/640,1,[],https://github.com/simh/simh/pull/641,https://github.com/philbudne,1,https://github.com/simh/simh/pull/641,,,True,{}
simh/simh,https://github.com/simh/simh,641,2018-12-11T22:51:02Z,2018-12-12T01:05:34Z,2018-12-12T01:05:34Z,CLOSED,False,2,2,1,https://github.com/philbudne,fix for https://github.com/simh/simh/issues/640,1,[],https://github.com/simh/simh/pull/641,https://github.com/markpizz,2,https://github.com/simh/simh/pull/641#issuecomment-446422500,,Merged with Cherry pick to rewrite commit message in standard form.  Commit was done with Phil as the author.,True,{}
simh/simh,https://github.com/simh/simh,643,2018-12-14T03:44:32Z,2018-12-14T03:49:40Z,2018-12-14T03:49:40Z,CLOSED,False,3,3,1,https://github.com/sethm,[3b2] Properly initialize DMAC Current Word Count,1,[],https://github.com/simh/simh/pull/643,https://github.com/sethm,1,https://github.com/simh/simh/pull/643,"The DMAC controller ""Current Word Count"" expects to decrement beyond 0 to 0xffff. Its initial value should also be 0xffff. Setting the initial value to 0 introduced a very subtle bug related to DUART self-test following a soft power reset.","The DMAC controller ""Current Word Count"" expects to decrement beyond 0 to 0xffff. Its initial value should also be 0xffff. Setting the initial value to 0 introduced a very subtle bug related to DUART self-test following a soft power reset.",True,{}
simh/simh,https://github.com/simh/simh,643,2018-12-14T03:44:32Z,2018-12-14T03:49:40Z,2018-12-14T03:49:40Z,CLOSED,False,3,3,1,https://github.com/sethm,[3b2] Properly initialize DMAC Current Word Count,1,[],https://github.com/simh/simh/pull/643,https://github.com/sethm,2,https://github.com/simh/simh/pull/643#issuecomment-447204422,"The DMAC controller ""Current Word Count"" expects to decrement beyond 0 to 0xffff. Its initial value should also be 0xffff. Setting the initial value to 0 introduced a very subtle bug related to DUART self-test following a soft power reset.","I just realized my commit message should not use brackets, but rather a colon to separate ""3b2"" and the summary. I'm going to close this pull request, rewrite my history, and then open a new one with the proper format.",True,{}
simh/simh,https://github.com/simh/simh,644,2018-12-14T03:51:53Z,2018-12-14T04:03:13Z,2018-12-14T04:03:13Z,MERGED,True,3,3,1,https://github.com/sethm,3b2: Properly initialize DMAC Current Word Count,1,[],https://github.com/simh/simh/pull/644,https://github.com/sethm,1,https://github.com/simh/simh/pull/644,"The DMAC controller ""Current Word Count"" expects to decrement beyond 0 to 0xffff. Its initial value should also be 0xffff. Setting the initial value to 0 introduced a very subtle bug related to DUART self-test following a soft power reset.","The DMAC controller ""Current Word Count"" expects to decrement beyond 0 to 0xffff. Its initial value should also be 0xffff. Setting the initial value to 0 introduced a very subtle bug related to DUART self-test following a soft power reset.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/642,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,2,https://github.com/simh/simh/pull/642#issuecomment-447056477,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","11SIM is pretty wild!  A PDP11 simulator in 1971 on a PDP10.
That this was simulated is interesting.  How did the simulation actually connect to real display hardware?  How was the display hardware connected to the PDP10?",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/642#issuecomment-447067967,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","It is!  I almost fell off the chair the first time I saw 11SIM display simulated vector graphics.  I didn't really expect it to work.
The simulator runs on ITS, which provides a .DSTART system call to pass an address to a display list to the operating system.  ITS will then do the necessary translations from virtual addresses to physical ones and send them to the display hardware.
The Type 340 display was connected to a Type 344 interface.  This interface attached to the PDP-6 I/O bus.  It will request data on the bus with interrupts.  The PDP-6 sends a 36-bit word at a time.  The interface buffers this and sends 18-bit words to the 340.  (EDIT: I wrote PDP-10 here, but really the Type 344 was introduced with the PDP-6.  The KA10, KI10, and optionally KL10 had the some kind of I/O bus however.)
Other DEC computers, PDP-1/4/5/7/etc had their own interfacing and didn't use the 344.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/642#issuecomment-448149352,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Work in progress:
https://github.com/larsbrinkhoff/simh/commits/lars/ngdis
CC @philbudne, I'm using your XY display code for this.
There's also an input device: at least four units, each with eight buttons.  (Rotate left/right, move left/right/up/down, pass, fire.)",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/642#issuecomment-448163726,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I see sim_video mentions some SDL_JOY and SDL_CONTROLLER events, to I suppose I should build on that.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,6,https://github.com/simh/simh/pull/642#issuecomment-448260279,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","You can go there, but I'd be somewhat cautious about depending on them unless you can find JOY and CONTROLLER hardware that is supported with interfaces on multiple host systems.  Maybe this concern is nothing to worry about, I have never looked at any such devices.  Since they probably are USB connected, maybe this is not a concern at all.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/642#issuecomment-448569576,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",Made some progress running Dazzle Dart.  Some details seem wrong.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/642#issuecomment-449374292,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","This display was also used with 11LOGO... or was it?  AI memo 240, the 11SIM simlatory, and 11LOGO all agree on the CSR register.  But Dazzle Dart uses it somewhat differently.  Since Dazzle Dart doesn't work on the simulator, I believe it only ran on the real hardware.  And then it seems 11LOGO maybe only ever ran on the simulator, or at least the version of 11LOGO we have today.
I have updated my display simulation to support both versions, using a SET NG TYPE command.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/642#issuecomment-449374366,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Here are files for testing.
testing.zip
Here's a sample session with 11LOGO:
11LOGO 1005
?STARTDISPLAY
?FORWARD 40
?LEFT 45
?FORWARD 40",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/642#issuecomment-449474687,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","This seems to work.  Though it could use some polish.
Keys are 1-8 for player 1, Q-I for player 2, A-K for player 3, and Z-, for player 4.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/642#issuecomment-449591084,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","@markpizz, @philbudne,
I invite comments on this.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/642#issuecomment-449591288,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I don't seem to get any PCLK interrupts.
The Dazzle Dart code writes 115 (octal) to the PCLK CSR register, and it responds:
DBG(1)> PCLK REG: pclk_wr(PA=0x003FF560 [CSR ], access=2, data=0x4D) ERR0 DONE0 IE1 FIX0 UPDN0 MODE1 RATE=line GO1
DBG(7)> PCLK SCHED: pclk_set_ctr(val=0) - delay=65536, rv=2, xtim[rv]=16667, usecs=1092288512

I checked in a debugger that SIMH does get here in pdp11_pclk.c pclk_set_ctr():
sim_activate_after (&pclk_unit, usec_delay);

And usec_delay is 1092288512 as printed above.  That should be 1,092 milliseconds right?  Yet my breakpoint at pclk_svc doesn't trigger.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/642#issuecomment-449591755,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","No, of course it's 1092 seconds.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,14,https://github.com/simh/simh/pull/642#issuecomment-449602359,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Well, 1092 seconds sounds like a long time.  This amount of time is derived from the CSR RATE bits which seem to be selecting the the line frequency (which defaults to 60Hz) as the counter units.  Do you think the KW11P should behave differently?",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,15,https://github.com/simh/simh/pull/642#issuecomment-449636990,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Note that the KW11P manual has a programming example:

This example uses a single mode vs the repeat mode specified when the CSR is set to 115, but we're still using the same 60Hz tick size, so with a count value initialize to 0 by the system reset, the overflow will happen after 65536/60 seconds and that is 1092...",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/642#issuecomment-449642616,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Thanks.  Then it looks like the application code is in error.  Maybe Dazzle Dart was loaded by something else, and that other code set CSB to 60.  I suppose updating the Dazzle Dart code is the easiest thing to do.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,17,https://github.com/simh/simh/pull/642#issuecomment-449644157,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","To 1, I mean.  With that, the 30-second timer is counted down as expected.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/642#issuecomment-450553435,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Maybe these buttons were used for input?  ""Radia Perlman's Button Box""

From https://github.com/walterbender/logothings/blob/master/The70s.md

http://harveycohen.net/oznaki/TORTIS2OZNAKI.htm
AI memo 311, ""TORTIS - Toddler's Own Recursive Turtle Interpreter System""
https://dspace.mit.edu/bitstream/handle/1721.1/6224/AIM-311.pdf
https://lively-web.org/users/Dan/uploads/TortisButtonBox.pdf",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,19,https://github.com/simh/simh/pull/642#issuecomment-450564214,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",Hal Abelson and Charles Frankston say the TORTIS buttons were not used for Dazzle Dart.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,20,https://github.com/simh/simh/pull/642#issuecomment-450624799,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","To clarify, only the first two commits are for consideration for merging to the master branch.  The (currently) two others are for testing: programs using the display and inputs, and work in progress to use the SDL joystick API.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,21,https://github.com/simh/simh/pull/642#issuecomment-450673558,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Sorry,  Due to holiday traveling and family activities, I really haven't had time to look closely at this.
Now that I look at where you've been going,  I see you're making direct SDL calls from simulator code in pdp11_box.c.  Maybe you do this while you figure out what generically needs to be done, but then a generic solution extends what sim_video.c provides (which is the simulator interface to SDL).
A completely different angle to look at this user interface/input concept might be to write a GUI application (which uses SDL or anything else to present the UI and gather its input) and then pass button presses, etc into the simulator using the frontpanel API.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,22,https://github.com/simh/simh/pull/642#issuecomment-450724930,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","No problem, there's no rush.
I can see it was a bad idea to have experimental commits on the branch, so I removed them.  The direct calls to SDL should be gone now.  I'll rework that and submit it in another pull request.
So what we have here now is just the NG display device, and the input device.  The inputs are mapped from keyboard keys.  This isn't usable for playing the game, but good for testing.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,23,https://github.com/simh/simh/pull/642#issuecomment-450730928,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Made a tweak.  Now the ""forbidden zones"" are semi-circular.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,24,https://github.com/simh/simh/pull/642#issuecomment-453762650,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Obviously the name ""box"" is super bad.
I asked around, and apparently it was something custom made for this game.  So maybe ""daz""?",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,25,https://github.com/simh/simh/pull/642#issuecomment-455810090,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Ping @markpizz, do I need to fix anything here?",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,26,https://github.com/simh/simh/pull/642#issuecomment-455835675,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Several things:

daz_reset should ONLY install the KB event processor IF the device is enabled!
only one device should be able to have a vid_open device enabled at the same time.  Any other SET dev ENABLE should be rejected.  There are 3 devices which now can open a video display.
CH and NG devices seem to have the same bus address and vector.  You should not be able to enable both at the same time.  Look closely in pdp11_td.c and pdp11_dl.c for devices which must co-exist or be excluded simultaneously.
It is not obvious to me how these devices work.  Specifically if they do DMA, but there should be something which only enables things if the current CPU bus type is reasonable.
If either these devices exist with a single primary program that demonstrates their use, then that program should be included and probably loaded directly via a BOOT .  See BOOT VT for a similar example.
ng.c has two functions which must return a value:
USE_DISPLAY might be defined, but vid_open might return a failure status.  If so, then any attempt to SET  ENABLE should leave the device disabled (DEV_DIS).",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,27,https://github.com/simh/simh/pull/642#issuecomment-455835819,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","ng.c changes:
diff --git a/display/ng.c b/display/ng.c
index b270ca5c..ac7f71ac 100644
--- a/display/ng.c
+++ b/display/ng.c
@@ -117,12 +117,12 @@ ng_init(void *dev, int debug)
 
 static int fetch (int a, uint16 *x)
 {
-  ng_fetch (a + reloc, x);
+  return ng_fetch (a + reloc, x);
 }
 
 static int store (int a, uint16 x)
 {
-  ng_store (a + reloc, x);
+  return ng_store (a + reloc, x);
 }
 
 static void point (void)",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,28,https://github.com/simh/simh/pull/642#issuecomment-455899780,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Please try to run the PDP11 simulator when things are compiled with USE_DISPLAY:
mark@Ubuntu-18:~mark/simh-larsbrinkhoff$ BIN/pdp11
CH device in conflict with NG.
Fatal simulator initialization error
Unit already attached
Hit Return to exit:",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,29,https://github.com/simh/simh/pull/642#issuecomment-455947188,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Fatal simulator initialization error

Yes, I had this problem, but I updated the branch to fix it.  It should be gone now.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,30,https://github.com/simh/simh/pull/642#issuecomment-455949728,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Should enabling the DAZ device automatically require (or force) the NG device to be enabled and vice versa?
What about my point number 5 above?",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,31,https://github.com/simh/simh/pull/642#issuecomment-455957763,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I haven't addressed point 5 yet.  Sometimes I have to sleep and work too. ;-)
The NG device should work without DAZ, like when running 11LOGO.  DAZ only have one application: the Dazzle Dart game.  So it could require NG.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,32,https://github.com/simh/simh/pull/642#issuecomment-455960370,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Regarding 5.  The primary NG application would be 11LOGO.  And the only DAZ application is Dazzle Dart.  So I can make BOOT start those.  (I do consider it pecuilar to bundle the target software inside the simulator, but hey it doesn't hurt.)",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,33,https://github.com/simh/simh/pull/642#issuecomment-455965213,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","The goal of bundling these things is to make it very easy for a user to get started and see something without having to climb a configuration learning curve.  Otherwise the BOOT operation on these devices doesn't do anything.  Someone like this might then be inspired to dig deeper first for more games and subsequently other endeavors.
So, SET DAZ ENABLE should also enable NG.  BOOT DAZ should configure things to run Dazzle Dart and start it running.  BOOT NG should run 11LOGO...
sim_BuildROMs.c should have a line which produces the include file containing the Dazzle Dart program from the .lda file which belongs in PDP11/DazzleDart/...",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,34,https://github.com/simh/simh/pull/642#issuecomment-455966788,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",Thanks.  I'll see to it in the coming days.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,35,https://github.com/simh/simh/pull/642#issuecomment-457949184,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",I added 11LOGO and Dazzle Dart.  BOOT NG and BOOT DAZ will run them.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,36,https://github.com/simh/simh/pull/642#issuecomment-458410083,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I'll report details as I find them:
1:
start simulator:
    sim> set daz enable
    sim> set vt enable
    sim> boot daz

Please fix.
A variation on the same problem:
2:
start simulator:
    sim> set vt enable
    sim> set daz enable
    sim> boot vt

Please fix.
3:
start simulator:
    sim> set daz enable
    sim> boot daz
set focus to NG window
type a space (or any number of unexpected characters)... daz_keyboard() needs to be more accepting. :-)

Please fix.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,37,https://github.com/simh/simh/pull/642#issuecomment-458411338,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","4:
start simulator:
PDP-11 simulator V4.0-0 Current        git commit id: 390656b0
sim> set ng ena
NG device not compatible with system bus
sim> sh ng
NG      disabled
sim>

Problem:  NG video window appears anyway
Please fix.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,38,https://github.com/simh/simh/pull/642#issuecomment-458412141,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Looking at what you're doing in the daz_reset and ng_reset routines, it seems you're not considering a few things:

All device reset routines will be called when the simulator starts BEFORE any SCP commands are processed - independent of the enabled state of any device.
A device reset routine will be called when the device is enabled or disabled.
All device reset routines will be called when a BOOT command is executed.

A device reset routine should only perform activities relating to an enabled device when it knows the device is enabled AND has successfully achieved autoconfigure.
Since NG and VT both use sim_video, only one can be enabled at a time.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,39,https://github.com/simh/simh/pull/642#issuecomment-458417167,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I did some rebasing and squashing.
Thanks for the feedback.  I'll make the requested changes later this week.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,40,https://github.com/simh/simh/pull/642#issuecomment-459451323,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","1:
start simulator:
sim> set daz enable
sim> set vt enable
sim> boot daz

Please fix.
A variation on the same problem:
2:
start simulator:
sim> set vt enable
sim> set daz enable
sim> boot vt

Please fix.

I tried to fix these two, but I don't know how.  Please advice.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,41,https://github.com/simh/simh/pull/642#issuecomment-459582734,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I added a commit called ""Temporary"" in which I started some fixes.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,42,https://github.com/simh/simh/pull/642#issuecomment-460063195,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",Pick up the changes at https://github.com/markpizz/simh in the lars/ngdis branch.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,43,https://github.com/simh/simh/pull/642#issuecomment-460249914,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",Thank you.  I added your commit and rebased against current master.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,44,https://github.com/simh/simh/pull/642#issuecomment-460273108,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","I didn't look closely enough before, but after trying the BOOT NG steps to invoke 11LOGO, it seems that a potential user absolutely needs more built in help.  Specifically what are the commands that the 11LOGO program accepts?  These should either be visible in the HELP NG output OR, better yet should be displayed when the program is booted.  Maybe there could be a series of EXPECT/SEND commands that demonstrate a few things.  I don't know.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,45,https://github.com/simh/simh/pull/642#issuecomment-460275639,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","This version of 11LOGO isn't finished, so there is no help text and there are some bugs.  But it's the only version we have.  It's not very user friendly.
With that in mind, these are some commands to get started:
STARTDISPLAY - Start the display and enable turtle graphics.
FORWARD n - Move turtle n steps forward.
RIGHT n - Turn turtle n degrees to the right.
LEFT n - Turn turtle n degrees to the left.

Would this be appropriate for the help text?
There is also AI Lab memo 315, ""A glossary of Logo primitives"": https://dspace.mit.edu/bitstream/handle/1721.1/6228/AIM-315.pdf
This may or may not match the software that remains today.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,46,https://github.com/simh/simh/pull/642#issuecomment-461122764,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","The AI Labs memo seems to be describing a much more advanced version of 11 Logo.  Too bad that is no longer available.
How about listing all of the currently valid commands when the NG device is booted.  This can be done with sim_printf() statements in the ng_boot() routine.  Without that info, how would someone playing with this have a clue about what commands might work?
Digging through the source in the PDP11/11logo directory, I find that several of the files here have inconsistent line endings.  Since these are text files, all line endings should be CRLF.
I notice in the file system.327 there is a list of commands.  This is significantly long.  Maybe the boot should display this list along with a pointer to the AI labs memo 315 with the caveat that not everything may be the same.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,47,https://github.com/simh/simh/pull/642#issuecomment-461125777,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart",I rewrote history at https://github.com/markpizz/simh in the lars/ngdis branch and committed the line-endings change mentioned in the last comment.,True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,48,https://github.com/simh/simh/pull/642#issuecomment-461163003,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Brought in your changes, and added this text to boot ng:
List of 11LOGO commands:
AND, BACK, BUTFIRST, BUTLAST, COUNT, CTF, DIFFERENCE, DISPLAY, DO,
EDIT, ELSE, EMPTYP, END, EQUAL, ERASETRACE, FIRST, FORWARD, FPRINT,
FPUT, GO, GREATER, HEADING, HERE, HIDETURTLE, HOME, IF, KILLDISPLAY,
LAMPOFF, LAMPON, LAST, LEFT, LESS, LEVEL, LIST, LISTP, LPUT, MAKE,
MOD, NEWSNAP, NUMBERP, OF, OUTPUT, PENDOWN, PENUP, PRINT, PRODUCT,
QUOTIENT, REQUEST, RIGHT, RUG, SENTENCE, SETHEADING, SETTURTLE, SETX,
SETXY, SETY, SHOW, SHOWTURTLE, SNAP, STARTDISPLAY, STF, STOP, SUM,
THEN, TO, TOOT, TRACE, TYPE, VERSION, WIPE, WIPECLEAN, WORD, WORDP,
XCOR, YCOR.

MIT AI memo 315 documents a later version of 11LOGO but may be helpful
in exploring the software.  It can currently be found here:
https://dspace.mit.edu/handle/1721.1/6228

To get started with turtle graphics, type STARTDISPLAY.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/markpizz,49,https://github.com/simh/simh/pull/642#issuecomment-461203868,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","That looks good.
Feel free to squash my changes away and maybe update the date on these commits to today.",True,{}
simh/simh,https://github.com/simh/simh,642,2018-12-21T19:20:17Z,2019-02-07T13:12:34Z,2019-02-08T07:01:55Z,MERGED,True,14454,3,24,https://github.com/larsbrinkhoff,PDP11: NG - Tom Knight vector display,4,[],https://github.com/simh/simh/pull/642,https://github.com/larsbrinkhoff,50,https://github.com/simh/simh/pull/642#issuecomment-461312082,"Unibus device to control eight vector displays.
Documentation: Appendix A of AI Lab memo 240: https://dspace.mit.edu/bitstream/handle/1721.1/6195/AIM-240a.pdf
Applications:

PDP-11 Logo
Dazzle Dart","Ok, all freshened up.",True,{}
simh/simh,https://github.com/simh/simh,648,2018-12-29T12:08:28Z,,2020-04-08T05:02:32Z,OPEN,False,1727,1,10,https://github.com/apwise,H316 plt,3,[],https://github.com/simh/simh/pull/648,https://github.com/apwise,1,https://github.com/simh/simh/pull/648,"This adds a plotter device to the H316 simulator. This was an option supplied and supported by Honeywell, though it is certainly one of the lesser know options.
Beyond the additions to the simh simulator, there's a separate C++ program (h16-plt2ps) to convert the output into PostScript so it can be viewed, and a small example H316 program (tree.f compiled and linked as tree.slst).","This adds a plotter device to the H316 simulator. This was an option supplied and supported by Honeywell, though it is certainly one of the lesser know options.
Beyond the additions to the simh simulator, there's a separate C++ program (h16-plt2ps) to convert the output into PostScript so it can be viewed, and a small example H316 program (tree.f compiled and linked as tree.slst).",True,{}
simh/simh,https://github.com/simh/simh,648,2018-12-29T12:08:28Z,,2020-04-08T05:02:32Z,OPEN,False,1727,1,10,https://github.com/apwise,H316 plt,3,[],https://github.com/simh/simh/pull/648,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/648#issuecomment-610752567,"This adds a plotter device to the H316 simulator. This was an option supplied and supported by Honeywell, though it is certainly one of the lesser know options.
Beyond the additions to the simh simulator, there's a separate C++ program (h16-plt2ps) to convert the output into PostScript so it can be viewed, and a small example H316 program (tree.f compiled and linked as tree.slst).",I'm also interested in adding plotter support.  To the KA10 emulator.,True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/652,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/652#issuecomment-451832630,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43",There is some more information in the comments here: PDP-10/its#1449,True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/652#issuecomment-451842896,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","And if I may tag on another fix, ITS indicates characters are spaced 6 points apart, not 7 as per the documentation.  This can be a settable parameter in SIMH.",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/652#issuecomment-451909294,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43",CC @philbudne.,True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/652#issuecomment-452197089,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","This is the appearance of the printable ASCII characters as translated by ITS' DIS device:

My contribution is the characters [ \ ] ↑ ← ` { | } ~
Not visible here are down arrow and right arrow.",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/652#issuecomment-452223126,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43",The commits marked [REVIEW FIX] will be squashed back when the pull request is in an acceptable state.,True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/652#issuecomment-453586537,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","Updated default to 6x9.  Verified building and running with KA10 simulator.
I'm squashing the fix commits to make a clean pull request.",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/652#issuecomment-453974417,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","@markpizz, anything need changing here?",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/markpizz,9,https://github.com/simh/simh/pull/652#issuecomment-454204996,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","These changes have been merged into the master branch, but this case is strange since no current code in the master branch actually uses the affected code.",True,{}
simh/simh,https://github.com/simh/simh,652,2019-01-07T08:19:02Z,2019-01-14T23:35:46Z,2019-01-15T07:24:23Z,CLOSED,False,169,138,2,https://github.com/larsbrinkhoff,display: Update Type 340 character rendering,2,[],https://github.com/simh/simh/pull/652,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/652#issuecomment-454291477,"The Type 340 display (or really the Type 342 character generator) has two character sets (shift in and shift out) and shift characters to choose between them.  The first set is documented in the PDP-7 ""340 DISPLAY PROGRAMMING MANUAL"", but the other set is not.
@philbudne inferred the existence of lower case characters from PDP-6 Spacewar.  I have now found a translation table in ITS, from ASCII codes to 340 codes.



ASCII Character
Type 340 Code
Comment




^H
72
Backspace?


^G
63
Unclear what glyph


^[
47
Right arrow



50
Down arrow?


[
53



\
52



]
54



^
67
Non spacing character


_
60



`
66
Non spacing character


{
55



|
62



}
56



~
43","Thanks.  Yes, it's a strange situation since some code lives in the KA10 simulator, and some here.
@rcornwell, will you please bring in these commits at a time convenient to you?",True,{}
simh/simh,https://github.com/simh/simh,653,2019-01-11T17:53:53Z,2019-01-12T07:11:06Z,2019-01-12T07:36:32Z,MERGED,True,3,3,2,https://github.com/larsbrinkhoff,display: Update 340 simulation to use sim_ws.,1,[],https://github.com/simh/simh/pull/653,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/653,"I'm not sure if this is appropriate here.  It kind of straddles upstream SIMH (this repo) and @rcornwell's KA10 simulator.
The background is that I want the Type 340 simulation to use sim_ws.c instead of x11.c.  This is because I want the new vid_display_kb_event_process API.
To do this, I need to pass the SIMH dptr from the KA10 simulator, to display_init which will in turn pass it on to ws_init.  The sim_ws ws_init expects the dptr instead of the UNIT * passed to the x11 ws_init.
There's a corresponding change to the top-level makefile which replaces x11.c with sim_ws.c, but it doesn't make sense for this repository.  There's also a change to ka10_dpy.c of course.","I'm not sure if this is appropriate here.  It kind of straddles upstream SIMH (this repo) and @rcornwell's KA10 simulator.
The background is that I want the Type 340 simulation to use sim_ws.c instead of x11.c.  This is because I want the new vid_display_kb_event_process API.
To do this, I need to pass the SIMH dptr from the KA10 simulator, to display_init which will in turn pass it on to ws_init.  The sim_ws ws_init expects the dptr instead of the UNIT * passed to the x11 ws_init.
There's a corresponding change to the top-level makefile which replaces x11.c with sim_ws.c, but it doesn't make sense for this repository.  There's also a change to ka10_dpy.c of course.",True,{}
simh/simh,https://github.com/simh/simh,653,2019-01-11T17:53:53Z,2019-01-12T07:11:06Z,2019-01-12T07:36:32Z,MERGED,True,3,3,2,https://github.com/larsbrinkhoff,display: Update 340 simulation to use sim_ws.,1,[],https://github.com/simh/simh/pull/653,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/653#issuecomment-453602347,"I'm not sure if this is appropriate here.  It kind of straddles upstream SIMH (this repo) and @rcornwell's KA10 simulator.
The background is that I want the Type 340 simulation to use sim_ws.c instead of x11.c.  This is because I want the new vid_display_kb_event_process API.
To do this, I need to pass the SIMH dptr from the KA10 simulator, to display_init which will in turn pass it on to ws_init.  The sim_ws ws_init expects the dptr instead of the UNIT * passed to the x11 ws_init.
There's a corresponding change to the top-level makefile which replaces x11.c with sim_ws.c, but it doesn't make sense for this repository.  There's also a change to ka10_dpy.c of course.","I'm wondering:


Is this change ok?  I have tested it with the KA10 simulator, and it seems to work just as well as using x11.c.


Is this the right place to submit this?  Or should it all go in Rich's repository?",True,{}
simh/simh,https://github.com/simh/simh,653,2019-01-11T17:53:53Z,2019-01-12T07:11:06Z,2019-01-12T07:36:32Z,MERGED,True,3,3,2,https://github.com/larsbrinkhoff,display: Update 340 simulation to use sim_ws.,1,[],https://github.com/simh/simh/pull/653,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/653#issuecomment-453602663,"I'm not sure if this is appropriate here.  It kind of straddles upstream SIMH (this repo) and @rcornwell's KA10 simulator.
The background is that I want the Type 340 simulation to use sim_ws.c instead of x11.c.  This is because I want the new vid_display_kb_event_process API.
To do this, I need to pass the SIMH dptr from the KA10 simulator, to display_init which will in turn pass it on to ws_init.  The sim_ws ws_init expects the dptr instead of the UNIT * passed to the x11 ws_init.
There's a corresponding change to the top-level makefile which replaces x11.c with sim_ws.c, but it doesn't make sense for this repository.  There's also a change to ka10_dpy.c of course.",I have the corresponding KA10 changes in a pull request here: rcornwell/sims#88,True,{}
simh/simh,https://github.com/simh/simh,653,2019-01-11T17:53:53Z,2019-01-12T07:11:06Z,2019-01-12T07:36:32Z,MERGED,True,3,3,2,https://github.com/larsbrinkhoff,display: Update 340 simulation to use sim_ws.,1,[],https://github.com/simh/simh/pull/653,https://github.com/rcornwell,4,https://github.com/simh/simh/pull/653#issuecomment-453604345,"I'm not sure if this is appropriate here.  It kind of straddles upstream SIMH (this repo) and @rcornwell's KA10 simulator.
The background is that I want the Type 340 simulation to use sim_ws.c instead of x11.c.  This is because I want the new vid_display_kb_event_process API.
To do this, I need to pass the SIMH dptr from the KA10 simulator, to display_init which will in turn pass it on to ws_init.  The sim_ws ws_init expects the dptr instead of the UNIT * passed to the x11 ws_init.
There's a corresponding change to the top-level makefile which replaces x11.c with sim_ws.c, but it doesn't make sense for this repository.  There's also a change to ka10_dpy.c of course.",Changes can go to my repository. However I would prefer all changes to SCP level code to also be mirrored to the main SimH tree. This way when I update the SCP layer I do not have to bother dealing with local additions. This also means that all changes are tested with other simulators which will cause less problems when KA10 and other simulators are merged into the main SCP tree.,True,{}
simh/simh,https://github.com/simh/simh,654,2019-01-13T23:51:08Z,2019-01-14T06:26:57Z,2019-01-14T06:26:57Z,CLOSED,False,157,61,4,https://github.com/sethm,Floppy and hard disk controller updates,1,[],https://github.com/simh/simh/pull/654,https://github.com/sethm,1,https://github.com/simh/simh/pull/654,"Floppy controller is now a DEV_DISK device and uses the read and write sector routines from the sim_disk library.
Floppy controller device renamed from IF to IFLOPPY.
Hard disk controller device renamed from ID to IDISK.
Remove unused local variables (Alerted by windows build)","Floppy controller is now a DEV_DISK device and uses the read and write sector routines from the sim_disk library.
Floppy controller device renamed from IF to IFLOPPY.
Hard disk controller device renamed from ID to IDISK.
Remove unused local variables (Alerted by windows build)",True,{}
simh/simh,https://github.com/simh/simh,655,2019-01-14T04:06:06Z,2019-01-14T05:42:56Z,2019-01-14T05:42:56Z,MERGED,True,455,389,6,https://github.com/rcornwell,Updated B5500 and sim_card translation tables.,2,[],https://github.com/simh/simh/pull/655,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/655,,,True,{}
simh/simh,https://github.com/simh/simh,656,2019-01-14T06:27:50Z,2019-01-14T06:34:00Z,2019-01-14T06:34:00Z,MERGED,True,157,61,4,https://github.com/sethm,3b2: Make floppy controller a DEV_DISK device,1,[],https://github.com/simh/simh/pull/656,https://github.com/sethm,1,https://github.com/simh/simh/pull/656,"Formerly, the floppy controller buffered an entire diskette image
in memory using the unit buffer, and flushed it out on detach or
shutdown. This worked well enough, but it's better to have the
device use the SIMH disk sector read and write routines and
behave like a true disk.


Read Only (Write Protect) logic has also been enabled in the
floppy controller, allowing users to mount images that do not
have write permissions.


The IF (Integrated Floppy) and ID (Integrated Disk)
device names were poorly chosen. They conflict with built-in
scp commands and mess up the help system. This commit
changes them to IFLOPPY and IDISK, respectively.
NOTE!! THIS IS A BREAKING CONFIG CHANGE!!","Formerly, the floppy controller buffered an entire diskette image
in memory using the unit buffer, and flushed it out on detach or
shutdown. This worked well enough, but it's better to have the
device use the SIMH disk sector read and write routines and
behave like a true disk.


Read Only (Write Protect) logic has also been enabled in the
floppy controller, allowing users to mount images that do not
have write permissions.


The IF (Integrated Floppy) and ID (Integrated Disk)
device names were poorly chosen. They conflict with built-in
scp commands and mess up the help system. This commit
changes them to IFLOPPY and IDISK, respectively.
NOTE!! THIS IS A BREAKING CONFIG CHANGE!!",True,{}
simh/simh,https://github.com/simh/simh,660,2019-01-24T16:47:45Z,2019-01-24T16:48:39Z,2019-01-24T16:48:39Z,CLOSED,False,0,0,0,https://github.com/dslater38,Merge pull request #2 from simh/master,1,[],https://github.com/simh/simh/pull/660,https://github.com/dslater38,1,https://github.com/simh/simh/pull/660,Updating to latest,Updating to latest,True,{}
simh/simh,https://github.com/simh/simh,663,2019-02-09T16:49:44Z,2019-02-10T18:49:28Z,2019-02-10T18:49:28Z,MERGED,True,7,4,1,https://github.com/psco,AltairZ80: Fixed hard disk device boot,1,[],https://github.com/simh/simh/pull/663,https://github.com/psco,1,https://github.com/simh/simh/pull/663,Fixes #662. Note also that the updated version of https://schorn.ch/cpm/zip/cpm2.zip is needed.,Fixes #662. Note also that the updated version of https://schorn.ch/cpm/zip/cpm2.zip is needed.,True,{}
simh/simh,https://github.com/simh/simh,666,2019-02-23T12:26:13Z,2019-02-23T17:48:44Z,2019-02-23T17:48:44Z,MERGED,True,25,18,1,https://github.com/psco,AltairZ80: Make WD179X device more robust and fix Coverity issue,1,[],https://github.com/simh/simh/pull/666,https://github.com/psco,1,https://github.com/simh/simh/pull/666,Should fix CID 1477048:  Memory - illegal accesses  (OVERRUN),Should fix CID 1477048:  Memory - illegal accesses  (OVERRUN),True,{}
simh/simh,https://github.com/simh/simh,667,2019-02-28T08:02:00Z,2019-02-28T08:52:28Z,2019-02-28T08:52:28Z,MERGED,True,2,2,1,https://github.com/agn453,makefile: Fix case-sensitive path for cygwin 3 with Windows 10 WSL,1,[],https://github.com/simh/simh/pull/667,https://github.com/agn453,1,https://github.com/simh/simh/pull/667,Windows 10 1803 or later NTFS filenames are set to be case-sensitive if the Windows Subsystem for Linux (WSL) feature is turned-on. This was causing a build under cygwin 3.0.1 to fail detecting the libpcap header and library locations in the ../windows-build/winpcap directory.,Windows 10 1803 or later NTFS filenames are set to be case-sensitive if the Windows Subsystem for Linux (WSL) feature is turned-on. This was causing a build under cygwin 3.0.1 to fail detecting the libpcap header and library locations in the ../windows-build/winpcap directory.,True,{}
simh/simh,https://github.com/simh/simh,672,2019-03-09T19:26:38Z,2019-03-10T13:04:18Z,2019-03-10T13:04:18Z,MERGED,True,1859,122,12,https://github.com/sethm,3b2: NI 10Base5 Ethernet Device,1,[],https://github.com/simh/simh/pull/672,https://github.com/sethm,1,https://github.com/simh/simh/pull/672,"Implements an Ethernet device (""NI"", for ""Network Interface"") for the 3B2 simulator.","Implements an Ethernet device (""NI"", for ""Network Interface"") for the 3B2 simulator.",True,{}
simh/simh,https://github.com/simh/simh,672,2019-03-09T19:26:38Z,2019-03-10T13:04:18Z,2019-03-10T13:04:18Z,MERGED,True,1859,122,12,https://github.com/sethm,3b2: NI 10Base5 Ethernet Device,1,[],https://github.com/simh/simh/pull/672,https://github.com/sethm,2,https://github.com/simh/simh/pull/672#issuecomment-471228476,"Implements an Ethernet device (""NI"", for ""Network Interface"") for the 3B2 simulator.","PDP11/pdp11_xq.c was unfortunately a victim of automatic trailing white-space removal in my editor. I've removed that file from this commit, and it should be clean now.",True,{}
simh/simh,https://github.com/simh/simh,675,2019-03-20T17:17:35Z,2019-03-24T20:23:24Z,2019-03-24T20:23:24Z,MERGED,True,83,15,5,https://github.com/sethm,3b2: Fix Coverity identified issues,2,[],https://github.com/simh/simh/pull/675,https://github.com/sethm,1,https://github.com/simh/simh/pull/675,"This change also addresses some unused function parameter warnings issued by GNU Flycheck (not generally used by the build process, but useful when editing files with Flycheck enabled)","This change also addresses some unused function parameter warnings issued by GNU Flycheck (not generally used by the build process, but useful when editing files with Flycheck enabled)",True,{}
simh/simh,https://github.com/simh/simh,676,2019-03-24T20:16:20Z,2019-03-24T20:47:10Z,2019-03-24T20:47:10Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix issue detected by Coverity (unchecked result of sim_fs…,0,[],https://github.com/simh/simh/pull/676,https://github.com/psco,1,https://github.com/simh/simh/pull/676,…eek in n8vem.c),…eek in n8vem.c),True,{}
simh/simh,https://github.com/simh/simh,677,2019-03-24T20:52:29Z,2019-03-24T20:55:08Z,2019-03-24T20:55:08Z,MERGED,True,3,3,1,https://github.com/psco,AltairZ80: Fix issue detected by Coverity (unchecked sim_fseek in n8v…,1,[],https://github.com/simh/simh/pull/677,https://github.com/psco,1,https://github.com/simh/simh/pull/677,…em.c),…em.c),True,{}
simh/simh,https://github.com/simh/simh,680,2019-04-13T18:46:29Z,2019-04-13T19:11:45Z,2019-04-13T19:11:45Z,MERGED,True,32,2,3,https://github.com/sethm,3b2: Soft-power shutdown via TIMER command,1,[],https://github.com/simh/simh/pull/680,https://github.com/sethm,1,https://github.com/simh/simh/pull/680,"This change enables the simulator to be shut down cleanly via a
soft-power shutdown command. This is implemented in the real 3B2/400
through the sanity timer, which, if it reaches zero, sets a bus timeout
flag in the CSR and issues an interrupt at IPL 15. The operating
system (System V UNIX) treats this as a shutdown request and enters
runlevel 0.
To use this change in a SIMH startup script, for example to implement a
3B2 simulator as a service, one could add these commands:
# [... simulator setup ...]
BOOT
SET TIMER SHUTDOWN
CONTINUE
EXIT

On catching a SIGTERM, SIGINT, or SIGHUP, the simulator would return to
SCP control, set the soft power shutdown flag, and then continue
simulator execution. After the system is cleanly shut down, the
simulator would then exit back to the operating system.","This change enables the simulator to be shut down cleanly via a
soft-power shutdown command. This is implemented in the real 3B2/400
through the sanity timer, which, if it reaches zero, sets a bus timeout
flag in the CSR and issues an interrupt at IPL 15. The operating
system (System V UNIX) treats this as a shutdown request and enters
runlevel 0.
To use this change in a SIMH startup script, for example to implement a
3B2 simulator as a service, one could add these commands:
# [... simulator setup ...]
BOOT
SET TIMER SHUTDOWN
CONTINUE
EXIT

On catching a SIGTERM, SIGINT, or SIGHUP, the simulator would return to
SCP control, set the soft power shutdown flag, and then continue
simulator execution. After the system is cleanly shut down, the
simulator would then exit back to the operating system.",True,{}
simh/simh,https://github.com/simh/simh,680,2019-04-13T18:46:29Z,2019-04-13T19:11:45Z,2019-04-13T19:11:45Z,MERGED,True,32,2,3,https://github.com/sethm,3b2: Soft-power shutdown via TIMER command,1,[],https://github.com/simh/simh/pull/680,https://github.com/markpizz,2,https://github.com/simh/simh/pull/680#issuecomment-482868340,"This change enables the simulator to be shut down cleanly via a
soft-power shutdown command. This is implemented in the real 3B2/400
through the sanity timer, which, if it reaches zero, sets a bus timeout
flag in the CSR and issues an interrupt at IPL 15. The operating
system (System V UNIX) treats this as a shutdown request and enters
runlevel 0.
To use this change in a SIMH startup script, for example to implement a
3B2 simulator as a service, one could add these commands:
# [... simulator setup ...]
BOOT
SET TIMER SHUTDOWN
CONTINUE
EXIT

On catching a SIGTERM, SIGINT, or SIGHUP, the simulator would return to
SCP control, set the soft power shutdown flag, and then continue
simulator execution. After the system is cleanly shut down, the
simulator would then exit back to the operating system.","This looks good.
Alternatively, the simulator startup could say:
# [... simulator setup ...]
SET ON
ON SIGINT SET TIMER SHUTDOWN; CONTINUE
BOOT",True,{}
simh/simh,https://github.com/simh/simh,684,2019-04-24T00:28:22Z,2019-04-24T01:26:14Z,2019-04-28T23:13:20Z,CLOSED,False,249,66,23,https://github.com/9track,Further SCSI development & some minor fixes,2,[],https://github.com/simh/simh/pull/684,https://github.com/9track,1,https://github.com/simh/simh/pull/684,"Write support for SCSI tapes
Added tape devices to NCR53C94
Mapped SCSI WORM devices to use disk commands for now
Fixed setting of SCSI device type
Added missing SDL support for VAXstation simulators
Minor naming corrections to several VAX simulators","Write support for SCSI tapes
Added tape devices to NCR53C94
Mapped SCSI WORM devices to use disk commands for now
Fixed setting of SCSI device type
Added missing SDL support for VAXstation simulators
Minor naming corrections to several VAX simulators",True,{}
simh/simh,https://github.com/simh/simh,684,2019-04-24T00:28:22Z,2019-04-24T01:26:14Z,2019-04-28T23:13:20Z,CLOSED,False,249,66,23,https://github.com/9track,Further SCSI development & some minor fixes,2,[],https://github.com/simh/simh/pull/684,https://github.com/markpizz,2,https://github.com/simh/simh/pull/684#issuecomment-486031763,"Write support for SCSI tapes
Added tape devices to NCR53C94
Mapped SCSI WORM devices to use disk commands for now
Fixed setting of SCSI device type
Added missing SDL support for VAXstation simulators
Minor naming corrections to several VAX simulators","This pull request (and the commits it contains) has been merged via cherry pick.
The commit comments were rewritten into standard form which is:
component/simulator: summary comment up to 80 chars

Extra commit comments wrapped <= 80 characters",True,{}
simh/simh,https://github.com/simh/simh,685,2019-04-24T02:45:14Z,2019-04-24T03:18:43Z,2019-04-24T03:18:43Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Do not autoconfigure NI if attaching fails,0,[],https://github.com/simh/simh/pull/685,https://github.com/sethm,1,https://github.com/simh/simh/pull/685,"The NI device was autoconfiguring itself too early in the attach process, causing it to be in a bad state if attaching the device failed for any reason.
This change moves the NI device autoconfiguration to the very end of the attach routine, ensuring that the device is not visible to the system if attaching fails.","The NI device was autoconfiguring itself too early in the attach process, causing it to be in a bad state if attaching the device failed for any reason.
This change moves the NI device autoconfiguration to the very end of the attach routine, ensuring that the device is not visible to the system if attaching fails.",True,{}
simh/simh,https://github.com/simh/simh,685,2019-04-24T02:45:14Z,2019-04-24T03:18:43Z,2019-04-24T03:18:43Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Do not autoconfigure NI if attaching fails,0,[],https://github.com/simh/simh/pull/685,https://github.com/markpizz,2,https://github.com/simh/simh/pull/685#issuecomment-486047424,"The NI device was autoconfiguring itself too early in the attach process, causing it to be in a bad state if attaching the device failed for any reason.
This change moves the NI device autoconfiguration to the very end of the attach routine, ensuring that the device is not visible to the system if attaching fails.","I have to admit to never having touched (or even seen) a 3b2 system, but from my experience with various other systems, whether a network adapter happens to be connected to a LAN shouldn't affect whether the device is configured or otherwise visible within an operating system.  On a real system someone might just happen to connect (or disconnect) the network adapter from the LAN at any arbitrary time.  ATTACHing a device is logically equivalent to connecting the network cable.
That said, I'll be glad to commit this change if you really want.  It is your simulator. :-)",True,{}
simh/simh,https://github.com/simh/simh,686,2019-04-25T19:22:05Z,2019-04-26T02:46:19Z,2019-04-26T02:46:19Z,MERGED,True,2,2,1,https://github.com/pkoning2,PDP11: fix SysID message data for LQA,1,[],https://github.com/simh/simh/pull/686,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/686,"Correct the MOP data type code for the Device Type field in the SysID
message, and the value used for device type DELQA.","Correct the MOP data type code for the Device Type field in the SysID
message, and the value used for device type DELQA.",True,{}
simh/simh,https://github.com/simh/simh,686,2019-04-25T19:22:05Z,2019-04-26T02:46:19Z,2019-04-26T02:46:19Z,MERGED,True,2,2,1,https://github.com/pkoning2,PDP11: fix SysID message data for LQA,1,[],https://github.com/simh/simh/pull/686,https://github.com/markpizz,2,https://github.com/simh/simh/pull/686#issuecomment-486846603,"Correct the MOP data type code for the Device Type field in the SysID
message, and the value used for device type DELQA.","When do the values in the SysID messages come into play?
Are these part of a MOP load request or the related dialog?
I ask since I'd done some work to get these devices to succeed with a MOP boot at one time.  If you're changing anything that worked there, please test the changed code with various systems and describe what was done here.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,686,2019-04-25T19:22:05Z,2019-04-26T02:46:19Z,2019-04-26T02:46:19Z,MERGED,True,2,2,1,https://github.com/pkoning2,PDP11: fix SysID message data for LQA,1,[],https://github.com/simh/simh/pull/686,https://github.com/pkoning2,3,https://github.com/simh/simh/pull/686#issuecomment-486873235,"Correct the MOP data type code for the Device Type field in the SysID
message, and the value used for device type DELQA.","I wouldn't think so.  Load/dump is a separate protocol.  The SysID message is an informational message, intended to allow management stations to build a database of equipment on the network.
That said, I wouldn't mind doing some load tests, but I don't have any systems that do this.  Pointers would be welcome.",True,{}
simh/simh,https://github.com/simh/simh,692,2019-04-28T23:28:53Z,2019-04-28T23:38:49Z,2019-04-28T23:46:22Z,MERGED,True,16,2,6,https://github.com/9track,VAX420: Fix for LANCE when system memory > 16MB,1,[],https://github.com/simh/simh/pull/692,https://github.com/9track,1,https://github.com/simh/simh/pull/692,Fixes #689,Fixes #689,True,{}
simh/simh,https://github.com/simh/simh,693,2019-04-29T15:22:58Z,2019-04-29T15:28:44Z,2019-04-29T15:28:45Z,MERGED,True,59,45,2,https://github.com/sethm,3b2: Correct behavior for NI attach and detach,1,[],https://github.com/simh/simh/pull/693,https://github.com/sethm,1,https://github.com/simh/simh/pull/693,"Previously, the NI ethernet device expected to do all
autoconfiguration at attach time. Furthermore, if attaching failed for
some reason (e.g., permission issues on a tap device, etc.) the card
would be left autoconfigured, but in a broken state that could lead to
reading uninitialized memory.
This change fixes those bugs, and allows the device to be attached and
detached more freely. The card is now autoconfigured when it is
enabled.  Attaching and detaching are analogous to connecting or
disconnecting an ethernet transceiver from the physical device.","Previously, the NI ethernet device expected to do all
autoconfiguration at attach time. Furthermore, if attaching failed for
some reason (e.g., permission issues on a tap device, etc.) the card
would be left autoconfigured, but in a broken state that could lead to
reading uninitialized memory.
This change fixes those bugs, and allows the device to be attached and
detached more freely. The card is now autoconfigured when it is
enabled.  Attaching and detaching are analogous to connecting or
disconnecting an ethernet transceiver from the physical device.",True,{}
simh/simh,https://github.com/simh/simh,694,2019-04-30T00:49:18Z,2019-04-30T01:40:13Z,2019-04-30T01:40:13Z,MERGED,True,32,20,8,https://github.com/9track,VAX4xx: Multiple fixes,3,[],https://github.com/simh/simh/pull/694,https://github.com/9track,1,https://github.com/simh/simh/pull/694,"Memory sizing for VAX440
DMA address mapping for VAX440
Modifiers table for RZ94
Further naming corrections","Memory sizing for VAX440
DMA address mapping for VAX440
Modifiers table for RZ94
Further naming corrections",True,{}
simh/simh,https://github.com/simh/simh,695,2019-05-01T08:07:34Z,2019-05-01T10:47:54Z,2019-05-01T10:47:54Z,MERGED,True,7,5,2,https://github.com/9track,VAX8200: Added missing error bit to DWBUA CSR,1,[],https://github.com/simh/simh/pull/695,https://github.com/9track,1,https://github.com/simh/simh/pull/695,"As reported in #690
Also:

Removed some debug messages that were left in from development.
Renamed some macros to be more consistent with other simulators (xxx_RD would usually be a read mask)","As reported in #690
Also:

Removed some debug messages that were left in from development.
Renamed some macros to be more consistent with other simulators (xxx_RD would usually be a read mask)",True,{}
simh/simh,https://github.com/simh/simh,702,2019-05-16T00:16:47Z,2019-05-16T00:20:15Z,2019-05-16T00:20:15Z,MERGED,True,5,6,1,https://github.com/pkoning2,PDP11: Fix PSW handling for breakpoints and other aborts,1,[],https://github.com/simh/simh/pull/702,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/702,"Fixes #701.  The issue is more general than just breakpoints, it
potentially affects any exception dealt with by the ABORT macro.","Fixes #701.  The issue is more general than just breakpoints, it
potentially affects any exception dealt with by the ABORT macro.",True,{}
simh/simh,https://github.com/simh/simh,703,2019-05-16T21:32:39Z,2019-05-19T22:40:45Z,2019-05-19T22:40:45Z,MERGED,True,16552,16484,14,https://github.com/9track,Fixes for recent VAX simulators,5,[],https://github.com/simh/simh/pull/703,https://github.com/9track,1,https://github.com/simh/simh/pull/703,"Core test is now passing for the VAX 8200. I've updated VAX_MINIMUM_DIAGS.DSK to include EBSAA which is required for the 8200 although the extended tests are failing so they are skipped for now.
I found what appears to be a bug in the KA41-A ROM, which I had worked around previously by modifying the SIE in the cpu_boot function. This was incorrect and prevented the system from being able to boot.
The video devices were not working on the VAXstation 3100 M76. This turned out to be an incorrect implementation of the configuration/test register.
Coverity complaints from the recent run are fixed","Core test is now passing for the VAX 8200. I've updated VAX_MINIMUM_DIAGS.DSK to include EBSAA which is required for the 8200 although the extended tests are failing so they are skipped for now.
I found what appears to be a bug in the KA41-A ROM, which I had worked around previously by modifying the SIE in the cpu_boot function. This was incorrect and prevented the system from being able to boot.
The video devices were not working on the VAXstation 3100 M76. This turned out to be an incorrect implementation of the configuration/test register.
Coverity complaints from the recent run are fixed",True,{}
simh/simh,https://github.com/simh/simh,703,2019-05-16T21:32:39Z,2019-05-19T22:40:45Z,2019-05-19T22:40:45Z,MERGED,True,16552,16484,14,https://github.com/9track,Fixes for recent VAX simulators,5,[],https://github.com/simh/simh/pull/703,https://github.com/9track,2,https://github.com/simh/simh/pull/703#issuecomment-493271047,"Core test is now passing for the VAX 8200. I've updated VAX_MINIMUM_DIAGS.DSK to include EBSAA which is required for the 8200 although the extended tests are failing so they are skipped for now.
I found what appears to be a bug in the KA41-A ROM, which I had worked around previously by modifying the SIE in the cpu_boot function. This was incorrect and prevented the system from being able to boot.
The video devices were not working on the VAXstation 3100 M76. This turned out to be an incorrect implementation of the configuration/test register.
Coverity complaints from the recent run are fixed",The extended tests are also now passing for the VAX 8200. I've had to re-order vax-diag_test.ini a bit because EVKAD (compatibility mode instructions) cannot be run on this system.,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/664,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/664#issuecomment-462712031,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,Source: https://archive.org/details/AIfilms/75-logo.mp4,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/664#issuecomment-462712199,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"This may not be useful.

Source: https://archive.org/details/AIfilms/29-solar.mp4
                Mg X intensity from OSO-VI
                  August 1969 - May 1970

                  Solar Satellite Project
                Harvard College Observatory
            Supported by NASA through contracts
            NAS 5-9274 and grant NGR 22-007-211.

        Artificial Intelligence Laboratory, M.I.T.
   Supported in part by ARPA of DoD and monitored by ONR
       under Contract Number N000 14-70-A-0362-0003.

   Solar Satellite Project      Dr. Edmond Reeves
           Mg X experiment      Dr. George Withbroe
astronomy data programmers      Judy Smith and Pat Thomas
            cinematography      Michael Beeler

                           1972",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/664#issuecomment-462712795,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,See also characters in #661.,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/664#issuecomment-462728330,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"@philbudne, according to these film frames, the lower case 342 characters did have descenders below the base line.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/664#issuecomment-463071823,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"These are missing from the ""Children"" text: c, f, j, m, p, q, s, v, x, z.  Out of those, all but q, x, and z are in the barely readable ""Solar Satellite"" text.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/664#issuecomment-463184863,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"I think the ""j"" character is 9 points high, which makes it quite special.  Also awkward for the current simulator design.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/664#issuecomment-463223160,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,Knight TV character set.  Many are identical to the known 342 characters.,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/664#issuecomment-463347596,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,Work in progress.,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/664#issuecomment-463541838,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Parentheses seem to be centered in the grid.

Source: https://archive.org/details/AIfilms/45-mac.mp4",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/664#issuecomment-464034118,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Lower case x and z.  Other letters are consistent with previous evidence.  I don't know what that dot after u is.

Source: https://archive.org/details/AIfilms/81-mathlab.mp4",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/664#issuecomment-476021380,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"The binary @ TECO of unknown dating behaves differently from TECO 335.



Character
Effect




0-37
↓ + octal code in ""subscript""


^
not ^


_
not _


`
↓140


a-z
↓ + octal code in ""subscript""


{
↓173


|
↓174


}
↓175 (Altmode)


~
↓176 (Altmode)",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/664#issuecomment-476804001,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"The older @ TECO uses shift out codes 46 and 51 for ASCII ^ and _.  I believe those are arrows.  Note that 47 and 50 are also arrows, as per ITS comments.
If so, most likely codes 60 and 67 are _ and ^.  I previously thought they were arrows.
Also, code 73 is a ""half linefeed"", and 77 is the reverse motion.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/philbudne,14,https://github.com/simh/simh/pull/664#issuecomment-476820114,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"The older @ TECO uses shift out codes 46 and 51 for ASCII ^ and _.  I believe those are arrows.  Note that 47 and 50 are also arrows, as per ITS comments.
Once upon a time the ASCII codes we now use for ^ and _ were up-arrow
and back-arrow (for example on model 33 teletypes).  Do we have any
documents that record which were considered cannonical at what times?
 If so, most likely codes 60 and 67 are most likely _ and ^.  I previously thought they were arrows.
Do we know that the MIT 340 displayed both?
 Also, code 73 is a ""half linefeed"", and 77 is the reverse motion.
Neat!  An MIT thing?",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,15,https://github.com/simh/simh/pull/664#issuecomment-477001843,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Do we have any documents that record which were considered cannonical at what times?

Not really, we can only guess.  The situation with ITS is... mixed.  It started out with teletypes which I assume used the old ASCII version.  The MIDAS command line uses _ in a way consistent with a left arrow, and I believe this dates back to late 60s.
@ TECO seems to use the old ASCII arrow characters.  We don't know how old it is, but it could be from before ITS was written.  The next oldest TECO is version 335 from 1972 and it has been changed to use characters I believe to be _ and ^.  This is also what ITS uses.

Do we know that the MIT 340 displayed both?

We don't know for sure.  But it would be consistent with how the software uses the codes.

An MIT thing?

Unfortunately, we have very little information about other 342s.  At this point, we can't know if MIT modified theirs, or if these are standard features.
As luck would have it, there is another 342 at the Living Computer Museum.  And it's being examined as we speak.  Apparently the character generator isn't fully functional at this point.  And in any case, it doesn't have the second ""shift out"" character set.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/664#issuecomment-477003280,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Here is the character ""ROM"", if we can call it that.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,17,https://github.com/simh/simh/pull/664#issuecomment-477005316,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Here's a frame from a film showing the use of a ""half form feed"", i.e. ""↓14"".  I have found the corresponding code in @ TECO.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/664#issuecomment-477006428,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"I received this from Michael Beeler.  So it seems MIT did some modifications, but unclear what exactly.

I believe that someone, probably Tom Knight or Jack Holloway, strung another wire through the (very large) cores of the 340 character decoder, to implement some additional character.  Have you heard about that?  I don't remember what the character was.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,19,https://github.com/simh/simh/pull/664#issuecomment-488050726,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"More evidence, this time from STAN.K; 3406 40 timestamped 1974.  This is the PDP-6 part of the 340D Datapoint terminal emulator.  ASCII ^ and _ maps to 46 and 51.
To summarize:



ASCII
@ TECO
3406 40
TECO 335
ITS 724




-


50
50 ;DOWN ARROW


033


47
47 ;RT ARROW


136 ^
46
46
67
67


137 _
51
51
60
60",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,20,https://github.com/simh/simh/pull/664#issuecomment-488674228,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"I think 3406 is using the shift out character 71 as the cursor.  It's anyone's guess what it could be, but a rectangular block seems a reasonable choice.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,21,https://github.com/simh/simh/pull/664#issuecomment-489426640,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"I think I updated everything but ""j"".",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,22,https://github.com/simh/simh/pull/664#issuecomment-497971429,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"@markpizz this is now a pull request.
The characters have been updated to look like this, which I believe matches the evidence.

The solid boxes are unknown characters.  The last line shows ~ followed by backspace and _, and use of sub and superscript.
I'm not quite sure what to do about lowercase j, so I left it alone.",True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/markpizz,23,https://github.com/simh/simh/pull/664#issuecomment-497972111,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,Clearly you moved these commits into the sequence of commits from the master branch.  Can you do that over again and change the dates of to be more recent than 4 months ago...,True,{}
simh/simh,https://github.com/simh/simh,664,2019-06-01T18:37:15Z,2019-06-01T19:51:13Z,2019-06-02T03:38:43Z,MERGED,True,77,52,1,https://github.com/larsbrinkhoff,display: Type 342 lower case characters.,3,[],https://github.com/simh/simh/pull/664,https://github.com/larsbrinkhoff,24,https://github.com/simh/simh/pull/664#issuecomment-497972439,I'm collecting information on the Type 342 lower case characters.  I will submit a pull request when I'm done.,"Those are the git commit ""author dates"" from when I started this, and those survive rebase operations.  I updated them to the current date as of today.",True,{}
simh/simh,https://github.com/simh/simh,708,2019-06-09T19:25:53Z,2019-06-09T19:50:38Z,2019-06-09T19:50:38Z,MERGED,True,124,98,11,https://github.com/rcornwell,I7000 and B5500 updates.,2,[],https://github.com/simh/simh/pull/708,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/708,"Updated B5500 to support new sim_tape interface.
B5500 to support save/restore
I7000 for new sim_tape interface.","Updated B5500 to support new sim_tape interface.
B5500 to support save/restore
I7000 for new sim_tape interface.",True,{}
simh/simh,https://github.com/simh/simh,709,2019-06-09T21:15:05Z,2019-06-10T19:34:33Z,2019-06-10T19:34:33Z,MERGED,True,2,2,1,https://github.com/sethm,3b2: Fix for compilation warning,1,[],https://github.com/simh/simh/pull/709,https://github.com/sethm,1,https://github.com/simh/simh/pull/709,Fixes a compilation warning in 3b2_sysdev.c caused by a lack of explicit cast from void * to struct timer_ctr *,Fixes a compilation warning in 3b2_sysdev.c caused by a lack of explicit cast from void * to struct timer_ctr *,True,{}
simh/simh,https://github.com/simh/simh,714,2019-06-29T15:47:39Z,2019-06-29T16:32:05Z,2019-06-29T16:32:06Z,MERGED,True,3964,40,11,https://github.com/sethm,3b2: WE32106 Math Acceleration Unit (MAU),1,[],https://github.com/simh/simh/pull/714,https://github.com/sethm,1,https://github.com/simh/simh/pull/714,"This change adds support for the WE32106 Math Acceleration Unit (MAU).
The WE32106 is an IEEE-754 1985 compatible floating point math
acceleration unit that was an optional component on the 3B2/310 and
3B2/400.
The MAU is implemented using software floating point routines.  As
always, there may be bugs, but the MAU currently passes extensive
floating point tests with exactly the same results as a real 3B2/400
equipped with a physical MAU, so I hope these are few.","This change adds support for the WE32106 Math Acceleration Unit (MAU).
The WE32106 is an IEEE-754 1985 compatible floating point math
acceleration unit that was an optional component on the 3B2/310 and
3B2/400.
The MAU is implemented using software floating point routines.  As
always, there may be bugs, but the MAU currently passes extensive
floating point tests with exactly the same results as a real 3B2/400
equipped with a physical MAU, so I hope these are few.",True,{}
simh/simh,https://github.com/simh/simh,715,2019-06-30T02:47:27Z,2019-07-01T15:16:05Z,2019-07-01T15:16:05Z,MERGED,True,12,2,1,https://github.com/sethm,3b2: unsigned addition overflow,1,[],https://github.com/simh/simh/pull/715,https://github.com/sethm,1,https://github.com/simh/simh/pull/715,"This is a bug fix for a significant bug in unsigned addition.
Integer addition of unsigned types could fail to set the overflow flag, leading to errors in the SVR3 floating point emulation library that rely on the overflow flag to detect carry out of high bit on unsigned addition. This change will correctly set the V flag if the high bit should be carried out on an add.","This is a bug fix for a significant bug in unsigned addition.
Integer addition of unsigned types could fail to set the overflow flag, leading to errors in the SVR3 floating point emulation library that rely on the overflow flag to detect carry out of high bit on unsigned addition. This change will correctly set the V flag if the high bit should be carried out on an add.",True,{}
simh/simh,https://github.com/simh/simh,716,2019-07-01T20:23:35Z,2019-07-01T21:20:02Z,2019-07-01T21:20:02Z,MERGED,True,64,0,1,https://github.com/sethm,3b2: Provide precalibration program,1,[],https://github.com/simh/simh/pull/716,https://github.com/sethm,1,https://github.com/simh/simh/pull/716,This change adds a small infinite loop program that will be used by the simulator to establish a reasonable guess at the host's performance in order to precalibrate the system timer.,This change adds a small infinite loop program that will be used by the simulator to establish a reasonable guess at the host's performance in order to precalibrate the system timer.,True,{}
simh/simh,https://github.com/simh/simh,720,2019-07-10T01:00:40Z,2019-07-10T04:04:23Z,2019-07-10T06:13:26Z,MERGED,True,31433,8,45,https://github.com/rcornwell,KA10: Initial release of PDP10 KA/KI and PDP6 simulators.,2,[],https://github.com/simh/simh/pull/720,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/720,Initial release of PDP10 KA/KI and PDP6 simulators.,Initial release of PDP10 KA/KI and PDP6 simulators.,True,{}
simh/simh,https://github.com/simh/simh,720,2019-07-10T01:00:40Z,2019-07-10T04:04:23Z,2019-07-10T06:13:26Z,MERGED,True,31433,8,45,https://github.com/rcornwell,KA10: Initial release of PDP10 KA/KI and PDP6 simulators.,2,[],https://github.com/simh/simh/pull/720,https://github.com/markpizz,2,https://github.com/simh/simh/pull/720#issuecomment-509915223,Initial release of PDP10 KA/KI and PDP6 simulators.,"Lars,
Rich forgot to pass along the latest update to display (type340.c).  I just included type340.c from his sims repo.  Meanwhile there is a remaining warning in that module:
display/type340.c:118:33: warning: '/*' within block comment [-Wcomment]
/*  ty340word DAC;              /* Display Address Counter */

The nested comment is easily addressed by putting / before the nested /, but this module has conditional code (on TYPE347) that actually references the DAC field.   Maybe the existence of this field should be conditional on TYPE347.  Please fix.",True,{}
simh/simh,https://github.com/simh/simh,720,2019-07-10T01:00:40Z,2019-07-10T04:04:23Z,2019-07-10T06:13:26Z,MERGED,True,31433,8,45,https://github.com/rcornwell,KA10: Initial release of PDP10 KA/KI and PDP6 simulators.,2,[],https://github.com/simh/simh/pull/720,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/720#issuecomment-509916668,Initial release of PDP10 KA/KI and PDP6 simulators.,"It certainly looks that way.  All DAC references I see are inside TYPE347 conditionals.
I don't claim ownership of this code, but I'm willing to fix it.
CC @philbudne FYI",True,{}
simh/simh,https://github.com/simh/simh,720,2019-07-10T01:00:40Z,2019-07-10T04:04:23Z,2019-07-10T06:13:26Z,MERGED,True,31433,8,45,https://github.com/rcornwell,KA10: Initial release of PDP10 KA/KI and PDP6 simulators.,2,[],https://github.com/simh/simh/pull/720,https://github.com/philbudne,4,https://github.com/simh/simh/pull/720#issuecomment-509919763,Initial release of PDP10 KA/KI and PDP6 simulators.,"My suggestion/request is to put the DAC declaration under ""#ifdef NOTYET"" and remove the initial comment open.
The PC (DAC) doesn't depend on Type 347 (subroutine) support.  It would be required for Type 340C support (PDP-10 VB10C), OR I think use of the 340 with any 18-bit CPU which I believe all allowed the 340 to request display instructions directly from memory.
Without prints, it's hard to know if the PDP-6 + Type 340 combination left out the DAC circuitry or somehow bypassed it, and made the 340 beg for instructions by interrupting the host.",True,{}
simh/simh,https://github.com/simh/simh,720,2019-07-10T01:00:40Z,2019-07-10T04:04:23Z,2019-07-10T06:13:26Z,MERGED,True,31433,8,45,https://github.com/rcornwell,KA10: Initial release of PDP10 KA/KI and PDP6 simulators.,2,[],https://github.com/simh/simh/pull/720,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/720#issuecomment-509923694,Initial release of PDP10 KA/KI and PDP6 simulators.,Fixed as per above in #721.,True,{}
simh/simh,https://github.com/simh/simh,721,2019-07-10T06:07:48Z,2019-07-10T06:27:18Z,2020-01-16T12:42:48Z,MERGED,True,4,2,1,https://github.com/larsbrinkhoff,Fix unbalanced comment in type340.c,1,[],https://github.com/simh/simh/pull/721,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/721,See here: #720 (comment),See here: #720 (comment),True,{}
simh/simh,https://github.com/simh/simh,721,2019-07-10T06:07:48Z,2019-07-10T06:27:18Z,2020-01-16T12:42:48Z,MERGED,True,4,2,1,https://github.com/larsbrinkhoff,Fix unbalanced comment in type340.c,1,[],https://github.com/simh/simh/pull/721,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/721#issuecomment-509922842,See here: #720 (comment),Also fixed a line ending missing the CR.,True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/724,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,2,https://github.com/simh/simh/pull/724#issuecomment-512925709,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Are these 'jobs' done sequentially, or in parallel?  If is done in parallel, then is there some way to have a separate job that is done first before the parallel jobs start.  Specifically, a job that does 'make BIN/buildtools/BuildROMs' is needed.  Otherwise, parallel jobs will race each other (and possibly clobber something) running this internal step.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/724#issuecomment-512928512,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","I believe they are done in parallel, subject to a limited number of virtual machines.
I also believe each job is done in a separate virtual machine, so they don't clobber each other.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/724#issuecomment-513121034,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Well, all jobs finished.  Individual jobs are 1-7 minutes (16 for one outlier), but the accumulated time is over eight hours.  This is mostly because of the slow mac machines.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,5,https://github.com/simh/simh/pull/724#issuecomment-513230567,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.",I feel guilty about the resources expended as a consequence of what might be a rather minor commit which often doesn't affect the code (and thus the build outcome).  For example: c1d9db8,True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/724#issuecomment-513343497,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","That may be a concern.  Sometimes I wish there were a more selective approach to building commits, but it's all or nothing.
Maybe things will be different if a few simulators are bundled together in a job?  Let's try that and see what happens.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,7,https://github.com/simh/simh/pull/724#issuecomment-513344579,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","I'd say to go for 10 at a time.  Once this is stabilized, I'll change the make logic and the VAX test script to skip testing after more than 3 VAX simulators have run tests in a single make execution.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/724#issuecomment-513435185,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","I had each job build around seven simulators, and the build time was reduced to two hours.
I'll update it to do 10.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/724#issuecomment-513467846,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","With builds batched 10 to the job, the accumulated build time is around 1.5 hours.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,10,https://github.com/simh/simh/pull/724#issuecomment-513492060,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Before making this the method, I'm wondering if/how well/how fast a ""make -j"" would execute and if it would correctly catch build errors.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,11,https://github.com/simh/simh/pull/724#issuecomment-513492191,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Or maybe some limited -j like ""-j 4"" would be more reasonable...",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,12,https://github.com/simh/simh/pull/724#issuecomment-513492268,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","or more clearly ""--jobs=4""",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,13,https://github.com/simh/simh/pull/724#issuecomment-513496662,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","I see you've got travis jobs with 10 simulators each and a make --jobs=4 going in each.  What I actually meant, was to see if, with one travis job, --jobs=4 runs quickly enough to avoid the extra travis overhead of setting up each new VM for the job and the configuration setup for each...
Also, for the sake of testing, try putting in some garbage at the beginning of one of the source modules (say PDP10) and see if the single travis job reports an error if the make has ""--jobs=4"" on it...",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/724#issuecomment-513549598,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","Done.
Note: 98f1b80 failed because Travis stops a job if a new commit is made to the same branch.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,15,https://github.com/simh/simh/pull/724#issuecomment-513597988,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.","From this message: ""No output has been received in the last 10m0s, this potentially indicates a stalled ""
It seems that --jobs=n isn't the right path to take.  I suspect that each VM is only given a single CPU so parallel compiles will just be thrashing.  Meanwhile the lack of continuous output during the thrashing (as indicated above) gets Travis confused anyway.
So, I think the separate jobs doing maybe 15 compiles each will be reliable.",True,{}
simh/simh,https://github.com/simh/simh,724,2019-07-18T17:49:20Z,2019-08-12T16:22:46Z,2020-06-22T05:38:58Z,CLOSED,False,11,1,2,https://github.com/larsbrinkhoff,Travis matrix build.,5,[],https://github.com/simh/simh/pull/724,https://github.com/markpizz,16,https://github.com/simh/simh/pull/724#issuecomment-520494986,"Split the monolithic Travis CI ""make all"" build into several jobs, one for each simulator.",Merged a while back by Cherry pick.,True,{}
simh/simh,https://github.com/simh/simh,725,2019-07-18T18:48:43Z,2019-07-18T18:51:30Z,2019-07-18T18:51:30Z,MERGED,True,0,0,2,https://github.com/psco,AltairZ80: Remove old documentation and replace with current,1,[],https://github.com/simh/simh/pull/725,https://github.com/psco,1,https://github.com/simh/simh/pull/725,,,True,{}
simh/simh,https://github.com/simh/simh,726,2019-07-19T23:37:03Z,2019-07-19T23:47:15Z,2019-07-19T23:47:15Z,MERGED,True,381,265,2,https://github.com/sethm,3b2: Fix critical MAU issues,1,[],https://github.com/simh/simh/pull/726,https://github.com/sethm,1,https://github.com/simh/simh/pull/726,"A bug in the Square Root implementation could lead to
an infinite loop.


Incorrect rounding was used when MAU destination register
was single or double word.


Fix Coverity-discovered issues.","A bug in the Square Root implementation could lead to
an infinite loop.


Incorrect rounding was used when MAU destination register
was single or double word.


Fix Coverity-discovered issues.",True,{}
simh/simh,https://github.com/simh/simh,727,2019-07-21T03:07:00Z,2019-07-21T11:53:26Z,2019-07-21T11:53:26Z,MERGED,True,3,3,1,https://github.com/sethm,3b2: Fix Windows build warnings,1,[],https://github.com/simh/simh/pull/727,https://github.com/sethm,1,https://github.com/simh/simh/pull/727,Fixed several possible loss of precision warnings when implicitly casting t_uint64 to uint32.,Fixed several possible loss of precision warnings when implicitly casting t_uint64 to uint32.,True,{}
simh/simh,https://github.com/simh/simh,737,2019-08-12T02:15:44Z,2019-08-12T16:16:21Z,2019-08-12T16:16:22Z,CLOSED,False,1322,72,21,https://github.com/rcornwell,Regular update.,6,[],https://github.com/simh/simh/pull/737,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/737,Update simulators for pending fixes.,Update simulators for pending fixes.,True,{}
simh/simh,https://github.com/simh/simh,737,2019-08-12T02:15:44Z,2019-08-12T16:16:21Z,2019-08-12T16:16:22Z,CLOSED,False,1322,72,21,https://github.com/rcornwell,Regular update.,6,[],https://github.com/simh/simh/pull/737,https://github.com/markpizz,2,https://github.com/simh/simh/pull/737#issuecomment-520492658,Update simulators for pending fixes.,Merged via Cherry pick and reworded commit messages slightly.,True,{}
simh/simh,https://github.com/simh/simh,738,2019-08-12T05:50:34Z,2019-08-12T07:25:23Z,2019-08-12T07:25:23Z,MERGED,True,5,8,1,https://github.com/sethm,3b2: Fix STRCPY instruction,1,[],https://github.com/simh/simh/pull/738,https://github.com/sethm,1,https://github.com/simh/simh/pull/738,STRCPY must increment both source and destination pointers (R0 and R1).,STRCPY must increment both source and destination pointers (R0 and R1).,True,{}
simh/simh,https://github.com/simh/simh,740,2019-08-15T15:44:22Z,2019-08-15T15:49:10Z,2019-08-15T15:49:10Z,MERGED,True,108,30,7,https://github.com/sethm,"3b2: STRCPY fix, CTC and NI cleanup",1,[],https://github.com/simh/simh/pull/740,https://github.com/sethm,1,https://github.com/simh/simh/pull/740,"The previous fix for STRCPY introduced a new bug. STRCPY must always  copy the final NULL terminator of the string, but must NOT increment  the source or destination pointers for the NULL terminator.


The CTC simulation did not correctly support streaming mode, which can in some cases request reads that are not on 512-byte block boundaries.


To begin to support System V Release 4 UNIX, the NI card (called EMD under SVR4) needed to support several more CRC codes for pump code.","The previous fix for STRCPY introduced a new bug. STRCPY must always  copy the final NULL terminator of the string, but must NOT increment  the source or destination pointers for the NULL terminator.


The CTC simulation did not correctly support streaming mode, which can in some cases request reads that are not on 512-byte block boundaries.


To begin to support System V Release 4 UNIX, the NI card (called EMD under SVR4) needed to support several more CRC codes for pump code.",True,{}
simh/simh,https://github.com/simh/simh,743,2019-08-20T13:59:02Z,2019-08-20T15:47:48Z,2019-08-20T15:47:48Z,MERGED,True,8,3,2,https://github.com/sethm,3b2: Add correct CTC subdevice information,1,[],https://github.com/simh/simh/pull/743,https://github.com/sethm,1,https://github.com/simh/simh/pull/743,"The CTC (Cartridge Tape Drive) device has two subdevices, ""FT25"" and ""FD5"", which were not being set up correctly on initialization. This change fixes that behavior.","The CTC (Cartridge Tape Drive) device has two subdevices, ""FT25"" and ""FD5"", which were not being set up correctly on initialization. This change fixes that behavior.",True,{}
simh/simh,https://github.com/simh/simh,744,2019-08-26T03:43:16Z,2019-08-26T03:52:54Z,2019-08-26T03:52:54Z,MERGED,True,62,110,3,https://github.com/sethm,3b2: Improve NI performance,1,[],https://github.com/simh/simh/pull/744,https://github.com/sethm,1,https://github.com/simh/simh/pull/744,This change implements asynchronous (non-polling) mode for NI Ethernet packet receive.,This change implements asynchronous (non-polling) mode for NI Ethernet packet receive.,True,{}
simh/simh,https://github.com/simh/simh,745,2019-09-01T19:00:54Z,2019-09-03T07:39:24Z,2019-09-03T07:39:24Z,MERGED,True,20,19,1,https://github.com/sethm,3b2: CMP{W|H|B} instruction fix,1,[],https://github.com/simh/simh/pull/745,https://github.com/sethm,1,https://github.com/simh/simh/pull/745,"The WE32100 supports expanded datatypes for its opcodes, allowing an
opcode to override the default size (byte/halfword/word) expected by the
instruction. For example:
    CMPH &0x10000,{uword}-8(%fp)

Without the {uword} marker, this instruction would only compare the
lower 2 bytes of -8(%fp) against the lower two bytes of the constant
value 0x10000, since the CMPH instruction compares halfwords. However,
with the {uword} marker, the CMPH instruction promotes the opcode from a
halfword to an unsigned word, sign extending if appropriate.
The CMP{W|H|B} instruction implementation in the 3B2 simulator was
ignoring any expanded type markers on its opcodes when checking whether
to set the ""N"" (negative) bit in the PSW, leading to a failure in
compiling GCC. This fix causes the instruction to honor the expanded
datatype in this case.","The WE32100 supports expanded datatypes for its opcodes, allowing an
opcode to override the default size (byte/halfword/word) expected by the
instruction. For example:
    CMPH &0x10000,{uword}-8(%fp)

Without the {uword} marker, this instruction would only compare the
lower 2 bytes of -8(%fp) against the lower two bytes of the constant
value 0x10000, since the CMPH instruction compares halfwords. However,
with the {uword} marker, the CMPH instruction promotes the opcode from a
halfword to an unsigned word, sign extending if appropriate.
The CMP{W|H|B} instruction implementation in the 3B2 simulator was
ignoring any expanded type markers on its opcodes when checking whether
to set the ""N"" (negative) bit in the PSW, leading to a failure in
compiling GCC. This fix causes the instruction to honor the expanded
datatype in this case.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/746,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/746#issuecomment-531106225,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Using the build_mingw.bat script gets me this:
build_mingw
/usr/bin/sh: -c: line 1: syntax error: unexpected end of file
lib paths are: C:/MinGW/lib
include paths are: C:/MinGW/include
/usr/bin/sh: -c: line 1: syntax error: unexpected end of file
dir: cannot access '/b': No such file or directory
dir: cannot access '/s': No such file or directory
dir: cannot access '..\windows-build\libSDL\SDL.h': No such file or directory
***********************************************************************
***********************************************************************
**  This build could produce simulators with video capabilities.     **
**  However, the required files to achieve this can't be found on    **
**  this system.  Download the file:                                 **
**  https://github.com/simh/windows-build/archive/windows-build.zip  **
**  Extract the windows-build-windows-build folder it contains to    **
**  C:/projects                                                   **
***********************************************************************
***********************************************************************
.
/usr/bin/sh: -c: line 0: syntax error near unexpected token `('
/usr/bin/sh: -c: line 0: `if exist BIN\buildtools (echo buildtoolsexists) else (mkdir BIN\buildtools)'
/usr/bin/sh: -c: line 1: syntax error: unexpected end of file
/usr/bin/sh: -c: line 1: syntax error: unexpected end of file
/usr/bin/sh: -c: line 1: syntax error: unexpected end of file
***********************************************************************
***********************************************************************
**  This build is operating without the required windows-build       **
**  components and therefore will produce less than optimal          **
**  simulator operation and features.                                **
**  Download the file:                                               **
**  https://github.com/simh/windows-build/archive/windows-build.zip  **
**  Extract the windows-build-windows-build folder it contains to    **
**  C:/projects                                                   **
***********************************************************************
***********************************************************************
.
***
*** all  Simulators being built with:
*** - compiler optimizations and no debugging support. GCC Version: 5.3.0.
*** - Per simulator tests will be run.
***
*** No SDL ttf support available.  BESM-6 video panel disabled.
***
*** Info *** Install the development components of libSDL-ttf packaged by your
*** Info *** operating system distribution and rebuild your simulator to
*** Info *** enable this extra functionality.
gcc -std=gnu99 -U__STRICT_ANSI__  -O2 -finline-functions -fgcse-after-reload -fpredictive-commoning -fipa-cp-clone -fno-unsafe-loop-optimizations -fno-strict-overflow -Wno-unused-result  -DHAVE_NTDDDISK_H -DSIM_COMPILER=""GCC Version: 5.3.0"" -I . -fms-extensions -DUSE_READER_THREAD -DSIM_ASYNCH_IO   PDP1/pdp1_lp.c PDP1/pdp1_cpu.c PDP1/pdp1_stddev.c PDP1/pdp1_sys.c PDP1/pdp1_dt.c PDP1/pdp1_drm.c PDP1/pdp1_clk.c PDP1/pdp1_dcs.c PDP1/pdp1_dpy.c  scp.c sim_console.c sim_fio.c sim_timer.c sim_sock.c sim_tmxr.c sim_ether.c sim_tape.c sim_disk.c sim_serial.c sim_video.c sim_imd.c sim_card.c -I PDP1   -o BIN/pdp1.exe -lm -lwsock32 -lwinmm -lpthread  
sim_fio.c: In function 'sim_fseeko':
sim_fio.c:296:8: warning: implicit declaration of function '_fseeki64' [-Wimplicit-function-declaration]
 return _fseeki64 (st, (__int64)offset, whence);
        ^
sim_fio.c: In function 'sim_ftell':
sim_fio.c:301:18: warning: implicit declaration of function '_ftelli64' [-Wimplicit-function-declaration]
 return (t_offset)_ftelli64 (st);
                  ^
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x3f2): undefined reference to `_ftelli64'
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x434): undefined reference to `_ftelli64'
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x494): undefined reference to `_ftelli64'
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x4d9): undefined reference to `_ftelli64'
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x546): undefined reference to `_ftelli64'
C:\Users\appveyor\AppData\Local\Temp\1\ccFzVZSo.o:sim_fio.c:(.text+0x587): more undefined references to `_ftelli64' follow
collect2.exe: error: ld returned 1 exit status
makefile:2048: recipe for target 'BIN/pdp1.exe' failed
mingw32-make: *** [BIN/pdp1.exe] Error 1
Command exited with code 2",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/746#issuecomment-531143408,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Next I tried to have it build Visual Studio Projects\Simh.sln, but then AppVeyor said:
The project file ""VAX.vcproj"" is in the "".vcproj"" file format, which MSBuild no longer supports.
Please convert the project by opening it in the Visual Studio IDE or running the conversion tool,
or use MSBuild 3.5 or earlier to build it.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/746#issuecomment-531148858,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,Previously: #538 (comment),True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/746#issuecomment-531172879,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Due to the MSBuild - VS 2008 incompatibility, I'm focusing on MinGW.
The first error /usr/bin/sh: -c: line 1: syntax error: unexpected end of file is because of this line in makefile:
  ifeq (rename-build-support,$(shell if exist ..\windows-build-windows-build echo rename-build-support))

Of course, if exist is not a valid shell command but rather a Window batch file command.  If I replace this with test -d ../windows-build-windows-build && echo rename-build-support the error goes away.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,6,https://github.com/simh/simh/pull/746#issuecomment-531344631,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"See comment at #538
Meanwhile, testing the Windows build environment should be driven from Visual Studio 2008 and you can find various magic scripting pieces that you might need in ""Visual Studio Projects\Windows -Development-Binaries\BuildAll.cmd
In particular, the VS2008 scripting command should be:
vcbuild /useenv /rebuild Simh.sln ""Release|Win32""

Or, if you insist on using a later version of Visual Studio, you can open the simh.sln file from the VS GUI and it will auto-convert the VS2008 project files to a format needed for the newer VS version.  I have no idea if this auto-convert can be scripted without manual invocation from the GUI.
Back to MinGW.  MinGW started out as the poor man's Window's tool chain when there were no freely available versions of Visual Studio.  For a very long time (going on 15 years), there have been freely available versions of Visual Studio for Windows.  As such, building under MinGW is, at best, a legacy build environment which ""sort of"" still works for some combination of MinGW pieces, but should not be the place that any focus for active testing is done.  If you really want to do some CI testing (just to be sure that some of the MinGW stuff still works), this is what is needed:

it MUST be invoked from a Windows command prompt and NOT any bash or other shell environment that you might have nearby.
It will depend on the prebuilt dependent library support from the github.com/simh/windows-build repo just like the building under Visual Studio does.

CI testing should be done with Visual Studio",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/746#issuecomment-531478228,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Thanks.  I see it might not be worth trying to use the MinGW script.  At least not unless an active MinGW user comes forward.
I will shift focus back to Visual Studio and try BuildAll.cmd.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,8,https://github.com/simh/simh/pull/746#issuecomment-531479691,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"BuildAll.cmd is not what you should try to run.  It merely has the pieces needed to script the build with VS2008.  That script is what I use to build and publish on GitHub, the Windows binaries folks can access.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/746#issuecomment-531647388,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Thank you, the vcbuild command seems to work.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/746#issuecomment-531648523,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"You wrote about build_minwg.bat:

it MUST be invoked from a Windows command prompt and NOT any bash or other shell environment that you might have nearby.

I tested starting it from a regular cmd and I still got the /usr/bin/sh: -c: line 1: syntax error: unexpected end of file messages.  I'm not sure how this is supposed to work, but the makefile uses cmd syntax commands which are apparently passed to the MinWG sh.  I'm not proposing to fix it, just pointing out my findings.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/746#issuecomment-531660851,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Submitted pull request.
For this to work, you must login on AppVeyor and enable building this repository.  https://www.appveyor.com/  You can use the GitHub credentials for this.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,12,https://github.com/simh/simh/pull/746#issuecomment-531669665,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Several comments (maybe less is more):

It's not 100% clear exactly how you're getting things into the test environment, but if you drive the build using vcbuild, AND if you've got git installed on the system (and in the current path), then you don't need to download the windows-build components as a zip file which then must be expanded.  Since you're not downloading a zip file, then you don't need 7zip to unzip the windows-build.zip file.  The VS2008 build logic will automatically fetch windows-build using git when it isn't there.
VS2008 only specifically can target x86 binaries and no x64.  These binaries (built with VS2008) run on all versions of Windows from XP onward.  x64 binaries have been tested and compared with x86 binaries running on x64 Windows and simulator performance difference is in the noise.
The MinGW build is specific to x86 (i.e. MinGW32 vs MinGW64).  Recalling the original history of why this was supported, just the minimal MinGW32 environment is desired and/or needed.  No install of Msys or extra Unix commands should exist in the path.  I just tested this now and starting with mingw-get-setup.exe, I click on ""Install"", then ""Continue"".  This ends up starting the GUI installation manager, where I ONLY select: mingw32-base-bin, and mingw32-gcc-g++-bin to be marked for installation and then click ""Menu->Installation->Apply Changes"" followed by Apply and eventually Close.  After this, the simh build_mingw.bat works for me.  Almost all simulators will compile and run when this has been done.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/746#issuecomment-531725537,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,Updated as per comments.,True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/746#issuecomment-531725749,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"Build log:
https://ci.appveyor.com/project/larsbrinkhoff/simh",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,15,https://github.com/simh/simh/pull/746#issuecomment-531861760,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"This is certainly on the right track!

Since you're not specific about what ""configuration"" you are targeting in the vcbuild command line, it seems that it is building BOTH the Win32-Debug AND the Win32-Release versions of things.  This runs approximately twice as long as just running a single target with out much value gain.  The more rigorous compile is the Win32-Release case.  Doing only this would seem to be equivalent to the normal makefile build on other OSes.  Using the makefile, you have to explicitly specify DEBUG=1 on the make command line to generate debug targets.
Poking around the AppVeyor site it seems that you get 2 HyperThreads/Cores.  Given that, a parallel build would significantly speed up execution time.  There is logic in BuildAll.cmd to invoke vcbuild to do a parallel build based on the number of available CPUs.  If that logic can't be directly embedded in the AppVeyor configuration file, it certainly can be embedded in a Windows command file as is done in BuildAll.cmd.
I feel guilty about all of the work that flows out of pushing every commit to the github/simh/simh master branch and having that trigger the whole cascade of CI activities.  It seems that AppVeyor has support for a ""Build cache"" that can be leveraged to retain some things that don't change often (like the ../windows-build directory).  Similarly, if commits only affect doc/, **/.md, **/*.txt files, then builds it seems like the supported file filtering can be leveraged to not run a full CI build.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/746#issuecomment-532072183,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"With ""Release|Win32"" and /M2 the build time is down to 10 minutes.
I'm checking if %NUMBER_OF_PROCESSORS% can be used to determine parallelism.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,17,https://github.com/simh/simh/pull/746#issuecomment-532083871,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"I think for appveyor.xml, we can simply use vcbuild /M%NUMBER_OF_PROCESSORS%.  It's set to 2.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/746#issuecomment-532142949,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,I added caching and skipping of commits.,True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,19,https://github.com/simh/simh/pull/746#issuecomment-532174022,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"With ""Release|Win32"" and /M2 the build time is down to 10 minutes.

That's incredible.  The systems doing this must be much more powerful than those doing the Travis CI builds...

I think for appveyor.xml, we can simply use vcbuild /M%NUMBER_OF_PROCESSORS%. It's set to 2.

If you look at the logic in BuildAll.cmd:
set _SIM_PARALLEL=8
if %_SIM_PARALLEL% GTR %NUMBER_OF_PROCESSORS% set _SIM_PARALLEL=%NUMBER_OF_PROCESSORS%
vcbuild /M%_SIM_PARALLEL% /useenv /rebuild Simh.sln ""Release|Win32""

This logic puts an upper on bound parallelism of 8.
When developing BuildAll.cmd, parallelism initially started at 2, then it went to %NUMBER_OF_PROCESSORS% and ultimately ended up with this upper bound of 8.  On the systems I tested this on, more than 8 either slowed things down, caused things to come to a grinding halt or caused a less than nice failure.   vcbuild was developed when an environment with a NUMBER_OF_PROCESSORS never could exceed 8, so this limit was more than acceptable.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,20,https://github.com/simh/simh/pull/746#issuecomment-532177567,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"I don't think you can implement that logic directly in the appveyor.yml file, but you certainly could imbed that logic in a .cmd file that the appveyor.yml then invokes.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,21,https://github.com/simh/simh/pull/746#issuecomment-532177634,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"I did see the logic, but I didn't consider it necessary to add it to the appveyor.yml file unless NUMBER_OF_PROCESSORS would suddenly increase which I would think is unlikely.  The yml file is pretty much guaranteed never to be used in any other context.
But if you insist, I can create a new cmd file for it.",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/markpizz,22,https://github.com/simh/simh/pull/746#issuecomment-532179329,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"I don't think we need it now, but someday AppVeyor may be more free with available processors in the free version or someone may pay for more and it would be nice if the lesson learned didn't have to be relearned.
Getting back to what it takes to actually run this automatically, exactly what should I do to make this actually work in the github/simh/simh master branch?",True,{}
simh/simh,https://github.com/simh/simh,746,2019-09-16T06:51:50Z,2019-09-17T11:34:22Z,2019-09-17T11:49:59Z,MERGED,True,14,0,2,https://github.com/larsbrinkhoff,Visual Studio CI build,1,[],https://github.com/simh/simh/pull/746,https://github.com/larsbrinkhoff,23,https://github.com/simh/simh/pull/746#issuecomment-532180394,I'm experimenting with AppVeyor to add Windows continuous integration to SIMH.,"You have to log in here: http://appveyor.com/
You can use your GitHub credentials.
Then click Projects -> NEW PROJECT -> GitHub -> simh -> simh -> ADD.",True,{}
simh/simh,https://github.com/simh/simh,751,2019-09-17T19:32:36Z,2019-09-17T19:50:04Z,2019-09-18T05:59:48Z,MERGED,True,2,2,1,https://github.com/larsbrinkhoff,PDP11: Fix NG bugs.,2,[],https://github.com/simh/simh/pull/751,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/751,"Resolves #750 NG device has too many vectors.  This fix is needed for MIT's SITS operating system.
Also fixes wrong text.","Resolves #750 NG device has too many vectors.  This fix is needed for MIT's SITS operating system.
Also fixes wrong text.",True,{}
simh/simh,https://github.com/simh/simh,751,2019-09-17T19:32:36Z,2019-09-17T19:50:04Z,2019-09-18T05:59:48Z,MERGED,True,2,2,1,https://github.com/larsbrinkhoff,PDP11: Fix NG bugs.,2,[],https://github.com/simh/simh/pull/751,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/751#issuecomment-532372654,"Resolves #750 NG device has too many vectors.  This fix is needed for MIT's SITS operating system.
Also fixes wrong text.",I asked some time ago about SIMH supporting multiple display windows.  This is an actual use case.  The SITS binary I run is configured for five NG displays.  Hopefully I can assemble a new binary with just one.,True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/752,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/752#issuecomment-533066811,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ",The 340 option adds these instructions to the PDP-7 processor.,True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/752#issuecomment-533077282,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","This is a work in progress.  I have married the pdp18b and type340 code together but stubbed out the functionality for now.
https://github.com/larsbrinkhoff/simh/commits/lars/pdp7",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/752#issuecomment-533173431,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","A small PDP-7 test program and a very short display list seems to work now.  Many things still need to be fixed, but the basics are there.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/philbudne,5,https://github.com/simh/simh/pull/752#issuecomment-533183502,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
 http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
 http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf

Is there any software to test/use it with??
 A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
 http://www.linfo.org/pdp-7.html

While I've seen a DEC (field service?) list of 18-bit systems that
shows the likely system (a PDP-7 with EAE, and an ""RC09"" disk), which
lists a includes a 340.  The PDP-7 UNIX system expects a custom Bell
Labs ""GRAPHIC 2"" display controller.  The UNIX-7 system uses it ONLY
as a ""Glass TTY"", and thankfully scans of documentation describing the
controller came along with the UNIX-7 source listings.  I wrote a
simulation of JUST enough of the hardware to allow a ""second seat"" via
TELNET in PDP18/pdp18b_g2tty.c -- while UNIX-7 allowed user supplied
display lists, no such programs survive.

Given that the hardware was abandoned (and likely not upgraded in the
time Thompson used it), and Space Travel was likely to have been done
on the exact same hardware as UNIX-7, I think it likely that Space
Travel used GRAPHIC 2 display hardware rather than the 340.

The GRAPHIC 2 memos we have:
    https://www.tuhs.org/Archive/Distributions/Research/McIlroy_v0/02-hw.pdf
    https://www.tuhs.org/Archive/Distributions/Research/McIlroy_v0/03-scope.pdf pp20-30

Show that the hardware was also used on PDP-9 systems, and my surmise
is that the abandoned '7 was a test bed for the GRAPHIC 2 based CAD
system, and that production systems used PDP-9's.

I have some recall of having read something suggesting that DEC might
have built the GRAPHIC 2 hardware for the production systems, but that
may or may not be true.
 The PDP-6 simulator already have support for the 340, but the interfacing is different.
My original design for type340.c assumed that it was always an
independent DMA device which kept/used the DAC (display address
counter) and made a call back into the interface glue to fetch the
next display instruction.  However the PDP-6 interface (also used on
the AI KA10 at MIT) did not use DMA/DAC, and issued an interrupt each
time the 340 needed a new 36-bit word (containing two 18-bit display
instructions), so the DAC related code is all turned off (in one place
by ""#ifdef NOTYET"" and ""#if 0"" in another).

BUT it's all moot unless there is actual code that can be run!
 @livingcomputermuseum has a working PDP-7 with a 340 display.
I know LCM has the 340 tube (and deflection hardware, but not any
other ""guts""?) from the University of Western Australia PDP-6 (S/N 3?),
but hadn't heard about it being interfaced with anything.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/752#issuecomment-533200697,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Is there any software to test/use it with??
Not as far as I know.  This is more of a preemptive strike.

I understand there were some PDP-7 versions of Spacewar, so I'm holding
out a small hope.
 I think it likely that Space Travel used GRAPHIC 2 display hardware
 rather than the 340.
Ok.
 so the DAC related code is all turned off (in one place by ""#ifdef
 NOTYET"" and ""#if 0"" in another).
Yes, I see it and I intend to use it.
 I know LCM has the 340 tube (and deflection hardware, but not any
 other ""guts""?) from the University of Western Australia PDP-6 (S/N 3?),
 but hadn't heard about it being interfaced with anything.
They actually have a second 340 that was stored well and has been
restored to runnable condition.  It's attached to their PDP-7.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/SMJ,7,https://github.com/simh/simh/pull/752#issuecomment-533201401,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","On Sep 19, 2019, at 8:25 AM, Phil Budne ***@***.***> wrote:

 While I've seen a DEC (field service?) list of 18-bit systems that
 shows the likely system (a PDP-7 with EAE, and an ""RC09"" disk), which
 lists a includes a 340. The PDP-7 UNIX system expects a custom Bell
 Labs ""GRAPHIC 2"" display controller. The UNIX-7 system uses it ONLY
 as a ""Glass TTY"", and thankfully scans of documentation describing the
 controller came along with the UNIX-7 source listings. I wrote a
 simulation of JUST enough of the hardware to allow a ""second seat"" via
 TELNET in PDP18/pdp18b_g2tty.c -- while UNIX-7 allowed user supplied
 display lists, no such programs survive.
Thank you for your work on this.  Have you ever seen ""The Incredible Machine""?
It shows the GRAPHIC-1 computer where the light pen and 340 display are used
to build and simulate a simple circuit.   Do you know if any of that was incorporated
in GRAPHIC-2 or the UNIX-7 system?

 > @livingcomputermuseum has a working PDP-7 with a 340 display.

 I know LCM has the 340 tube (and deflection hardware, but not any
 other ""guts""?) from the University of Western Australia PDP-6 (S/N 3?),
 but hadn't heard about it being interfaced with anything.
That is correct, PDP-6 sn4's 340 (I believe sn9) is at LCM+L, however there is a
complete 340 and controller+char generator that is running on the PDP-7 they are
working to shoe horn UNIX into.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/752#issuecomment-533208518,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Have you ever seen ""The Incredible Machine""?  It shows the GRAPHIC-1
 computer where the light pen and 340 display are used to build and
 simulate a simple circuit.
Is there any information or vague guesses that support that Space Travel
was done on GRAPHIC-1 or GRAPHIC-2?  Phil said the 2 and I have no
reason to object to that, just throwing the question out there.

There's also the Project MAC ""kludge"" display which I believe used a
PDP-7 and a 340 display.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/DoctorWkt,9,https://github.com/simh/simh/pull/752#issuecomment-533324148,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","The GRAPHIC-2 instructions seem to be documented in these files:
https://www.tuhs.org/Archive/Distributions/Research/McIlroy_v0/02-hw.pdf
https://www.tuhs.org/Archive/Distributions/Research/McIlroy_v0/03-scope.pdf
Sorry, just saw Phil has already put these links in above.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/752#issuecomment-533399666,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","The GRAPHIC-2 instructions seem to be documented in these files:
Thanks!  It looks somewhat similar to the 340, so maybe I'll do that
next.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/752#issuecomment-533413852,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","There is now a small test with parameter mode, point mode, and vector mode.
CC @masswerk, here is a working 340 simulation.  More info in the comments.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/752#issuecomment-537383155,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ",Project MAC PDP-7 with 340.,True,{'EYES': ['https://github.com/avindra']}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/752#issuecomment-537540336,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","This is now a pull request.
I updated display/type340.c to add a few things for the PDP-7 hardware interface.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/markpizz,14,https://github.com/simh/simh/pull/752#issuecomment-537727843,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","pdp18b_dpy.c needs to have logic that depends on USE_DISPLAY which won't be defined if SDL isn't available in the build environment.
The other 18b simulators (pdp4 and pdp9) have strange build issues since they're now building with pdp18b_dpy.c but they really don't have the display device and under some conditions the extra build flags get defined.  For example:
make clean
make pdp4 pdp7 pdp9

This done with libsdl available.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,15,https://github.com/simh/simh/pull/752#issuecomment-537809355,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","${DISPLAYL} contains sim_ws.c, which includes sim_video.h, which conditionally includes SDL.h.  If USE_SIM_VIDEO is not defined, sim_ws.c will have build errors.  Since only pdp7 sets VIDEO_USEFUL, this fails for the oher 18-bit simulators.
Maybe it's better to only include ${DISPLAYL} in the pdp7 simulator and not the rest of the 18 bit simulators?",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/markpizz,16,https://github.com/simh/simh/pull/752#issuecomment-537918712,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Maybe it's better to only include ${DISPLAYL} in the pdp7 simulator and not the rest of the 18 bit simulators?

True.   And maybe only pdp18b_dpy.c for the pdp7 as well.
This makefile does that and it also includes an updated pdp7.vcproj:
makefile.zip",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/philbudne,17,https://github.com/simh/simh/pull/752#issuecomment-538028119,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","For whatever it's worth, my file of DEC ""type"" codes
http://www.ultimate.com/phil/pdp10/types

says I've seen reference to Type 340 having been see in reference
to PDP-4 and PDP-9 as well as PDP-7.  No idea about PDP-15s!

In the KA10 era the Type 340 was the basis of the VB10C (which
included relocation and limit registers in the interface), so it's
possible that if it was used on PDP-15's it was assigned an option
name that was in the new (letter letter digit digit) format.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/752#issuecomment-538264876,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","I updated the commit with the new makefile and VC project.  Thanks, I was going to try blindly hand editing the project file, but now I don't have to.
I'm happy to extend this to the other 18-bit simuators as deemed appropriate.  I picked the PDP-7 because that's what the manuals refer to.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,19,https://github.com/simh/simh/pull/752#issuecomment-538620071,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Jim Blinn has an interesting banner image on his home page: http://www.jimblinn.com/
I asked him about it, and he says it's a Type 339 attached to a PDP-9.
This is probably another photo of it: 
I found a PDF file with a listing for the software: ""An executive system for a DEC 339 computer display terminal""
https://deepblue.lib.umich.edu/bitstream/handle/2027.42/5732/bac5133.0001.001.pdf
However, this is really outside the scope of this pull request.  Even though the 339 seems similar to the 340 in some respects, it operates with 12-bit words rather than 18.  My understanding is that it has a PDP-8 inside.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/philbudne,20,https://github.com/simh/simh/pull/752#issuecomment-538663783,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","I have:

mail% grep 338 ~www/ult/phil/pdp10/types
338	PDP-8/9 DISPLAY-8 Programmed Buffered Display (vector graphics) ~1967
339	PDP-9 Programmed Buffered Display (338 + VL09) 900lbs
mail% grep VL ~www/ult/phil/pdp10/options
VL09	PDP-9 interface logic for type 339 display

The 338 is discussed in chapter 25 of Bell's ""Computer Structures"" book
http://gordonbell.azurewebsites.net/cgb%20files/computer%20structures%20readings%20and%20examples%201971.pdf
The section discussing it starts at pdf p. 323.

It's also mentioned in Bell's ""Computer Engineering, a DEC view of hardware systems design"" for its position in the ""wheel of reincarnation""
http://www.bitsavers.org/pdf/dec/_Books/Bell-ComputerEngineering.pdf
pdf p 224 which says

""although the 338 had the right general capabilities, it did not have the refinements of later display processors for the PDP-IS and PDP-II (GT40 and GT60).""

Also found this:
https://priorart.ip.com/IPCOM/000128414

The purpose of the interface to the PDP-7 described below is to allow  the modified DEC 338 display control (a DEC 338 display without a PDP-8  processor) to operate with the PDP-7 as its processor.  The resulting  interface will accept any device that will interface to a PDP-8 except  those using the extended data-break facility (three-cycle data break).  The addition of such a feature would be a logical extension of the design  of this interface but was not attempted because no need existed for it at  the time of the original design, and thus it was not economically  attractive",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/markpizz,21,https://github.com/simh/simh/pull/752#issuecomment-538705893,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","I will repeat one point I raised earlier:

pdp18b_dpy.c needs to have logic that depends on USE_DISPLAY which won't be defined if SDL isn't available in the build environment.

Marksimh$ make pdp7
lib paths are: /lib/ /lib/x86_64-linux-gnu/ /lib32/ /usr/lib/ /usr/lib/x86_64-linux-gnu/ /usr/lib/x86_64-linux-gnu/libfakeroot/ /usr/lib32/
include paths are:  /usr/lib/gcc/x86_64-linux-gnu/7/include /usr/local/include /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed /usr/include/x86_64-linux-gnu /usr/include
using libm: /usr/lib/x86_64-linux-gnu/libm.so
using librt: /usr/lib/x86_64-linux-gnu/librt.so
using libpthread: /usr/lib/x86_64-linux-gnu/libpthread.so /usr/include/pthread.h
using libpcreposix: /usr/lib/x86_64-linux-gnu/libpcreposix.so /usr/lib/x86_64-linux-gnu/libpcre.so /usr/include/pcreposix.h /usr/include/pcre.h
using semaphore: /usr/include/semaphore.h
using libdl: /usr/lib/x86_64-linux-gnu/libdl.so /usr/include/dlfcn.h
using mman: /usr/include/x86_64-linux-gnu/sys/mman.h
*** Info ***
*** Info *** The simulator you are building could provide more
*** Info *** functionality if video support were available on your system.
*** Info *** Install the development components of libSDL or libSDL2
*** Info *** packaged for your operating system distribution for
*** Info *** your Linux system:
*** Info ***        $ sudo apt-get install libsdl2-dev libpng-dev
*** Info ***    or
*** Info ***        $ sudo apt-get install libsdl-dev
*** Info ***
***
*** pdp7 Simulator being built with:
*** - compiler optimizations and no debugging support. GCC Version: 7.4.0.
*** - Per simulator tests will be run.
***
*** git commit id is 0918dccd5c476e40e256b5f8a0c53e2a75c71892.
*** git commit time is 2019-09-19T12:52:01+0200.
***
gcc -std=gnu99 -U__STRICT_ANSI__  -O2 -finline-functions -fgcse-after-reload -fpredictive-commoning -fipa-cp-clone -fno-unsafe-loop-optimizations -fno-strict-overflow -Wno-unused-result -Wno-format-truncation -DSIM_GIT_COMMIT_ID=0918dccd5c476e40e256b5f8a0c53e2a75c71892 -DSIM_GIT_COMMIT_TIME=2019-09-19T12:52:01+0200  -DSIM_COMPILER=""GCC Version: 7.4.0"" -I . -D_GNU_SOURCE -DUSE_READER_THREAD -DSIM_ASYNCH_IO  -DHAVE_PCREPOSIX_H -DHAVE_SEMAPHORE -DHAVE_SYS_IOCTL -DHAVE_LINUX_CDROM -DHAVE_DLOPEN=so -DHAVE_UTIME -DHAVE_GLOB -DHAVE_SHM_OPEN  PDP18B/pdp18b_dt.c PDP18B/pdp18b_drm.c PDP18B/pdp18b_cpu.c PDP18B/pdp18b_lp.c PDP18B/pdp18b_mt.c PDP18B/pdp18b_rf.c PDP18B/pdp18b_rp.c PDP18B/pdp18b_stddev.c PDP18B/pdp18b_sys.c PDP18B/pdp18b_rb.c PDP18B/pdp18b_tt1.c PDP18B/pdp18b_fpp.c PDP18B/pdp18b_g2tty.c PDP18B/pdp18b_dr15.c PDP18B/pdp18b_dpy.c   scp.c sim_console.c sim_fio.c sim_timer.c sim_sock.c sim_tmxr.c sim_ether.c sim_tape.c sim_disk.c sim_serial.c sim_video.c sim_imd.c sim_card.c -DPDP7 -I PDP18B   -o BIN/pdp7 -lm -lrt -lpthread -lpcreposix -lpcre -ldl
/tmp/ccsfbzcu.o: In function `dpy_svc':
pdp18b_dpy.c:(.text+0x26): undefined reference to `display_age'
pdp18b_dpy.c:(.text+0x2b): undefined reference to `ty340_cycle'
/tmp/ccsfbzcu.o: In function `dpy_reset':
pdp18b_dpy.c:(.text+0x50): undefined reference to `display_reset'
pdp18b_dpy.c:(.text+0x5a): undefined reference to `ty340_reset'
/tmp/ccsfbzcu.o: In function `dpy07':
pdp18b_dpy.c:(.text+0xae): undefined reference to `ty340_clear'
pdp18b_dpy.c:(.text+0xeb): undefined reference to `ty340_sense'
/tmp/ccsfbzcu.o: In function `dpy10':
pdp18b_dpy.c:(.text+0x129): undefined reference to `ty340_get_asr'
pdp18b_dpy.c:(.text+0x16b): undefined reference to `ty340_sense'
/tmp/ccsfbzcu.o: In function `dpy05':
pdp18b_dpy.c:(.text+0x1b4): undefined reference to `ty340_clear'
pdp18b_dpy.c:(.text+0x1fb): undefined reference to `ty340_sense'
pdp18b_dpy.c:(.text+0x211): undefined reference to `ty340_get_dac'
/tmp/ccsfbzcu.o: In function `dpy06':
pdp18b_dpy.c:(.text+0x257): undefined reference to `ty340_clear'
pdp18b_dpy.c:(.text+0x2a2): undefined reference to `ty340_sense'
pdp18b_dpy.c:(.text+0x2bb): undefined reference to `ty340_set_dac'
pdp18b_dpy.c:(.text+0x2d1): undefined reference to `ty340_set_dac'
collect2: error: ld returned 1 exit status
makefile:2074: recipe for target 'BIN/pdp7' failed
make: *** [BIN/pdp7] Error 1
Mark/simh$",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,22,https://github.com/simh/simh/pull/752#issuecomment-538722306,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","I made an update to only define TYPE340 is USE_DISPLAY is defined.  If TYPE340 is not defined, DPY will not be included in sim_devices, and pdp18b_dpy.c will compile to just a char variable.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/markpizz,23,https://github.com/simh/simh/pull/752#issuecomment-538773825,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Merged with Cherry Pick to get the commit date to be after the latest commit from the master branch, I attributed you as the author.",True,{'HEART': ['https://github.com/avindra']}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,24,https://github.com/simh/simh/pull/752#issuecomment-538929186,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ",Thanks!,True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/philbudne,25,https://github.com/simh/simh/pull/752#issuecomment-544637905,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","BTW, was looking at the PDP-9 user's guide
http://www.bitsavers.org/pdf/dec/pdp9/PDP-9_UsersManual.pdf (for the
registers in the RB09 disk controller used by UNIX-7), and stumbled on
the PDP-9 instructions for the PDP-9 340C display interface (p. 70)

The only other place I've seen mention of the 340/C is related to the
KA10 VB09/C interface, which is different than from PDP-6 Type 344
interface to the 340: It implements DMA for instruction fetches, and
has base/limit values to control what the DMA accesses see.  I've
never found docs for the VB09C, but the TOPS-10 6.03A monitor code
shows that the CONI/CONO bits are somewhat different from the type
344, and that the DMA base/limit registers appear at separate device
code (all of this is documented at the top of PDP10/kx10_dpy.c)",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,26,https://github.com/simh/simh/pull/752#issuecomment-544810938,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Interesting, thanks!",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,27,https://github.com/simh/simh/pull/752#issuecomment-572691933,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","There wasn't any software when I did this, but now maybe there is.  @SMJ @livingcomputermuseum is posting videos and photos from their Type 340.  I don't now if it's PDP-7 software or if they use something else.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/philbudne,28,https://github.com/simh/simh/pull/752#issuecomment-572709767,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","BTW, I was recently contacted by someone here in Massachusetts with a
DECtape, which may contain PDP-7 340 spacewar (or it might be a PDP-1
""microtape"") which he was trying to read.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/livingcomputermuseum,29,https://github.com/simh/simh/pull/752#issuecomment-572710452,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","If they need someone to read the dectape, we’d be more than happy to take it on.

- Josh


From: Phil Budne <notifications@github.com>
Sent: Thursday, January 9, 2020 11:12 AM
To: simh/simh <simh@noreply.github.com>
Cc: Josh Dersch <JoshD@livingcomputers.org>; Mention <mention@noreply.github.com>
Subject: Re: [simh/simh] PDP7: Type 340 support. (#752)

BTW, I was recently contacted by someone here in Massachusetts with a
DECtape, which may contain PDP-7 340 spacewar (or it might be a PDP-1
""microtape"") which he was trying to read.


—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<#752?email_source=notifications&email_token=AE44TBYIYFKDN4ZXFM4ZSVDQ45ZIRA5CNFSM4IYG5ETKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEIRNXBY#issuecomment-572709767>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AE44TB3CRC65G5RI7UUBQSLQ45ZIRANCNFSM4IYG5ETA>.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/AlKossow,30,https://github.com/simh/simh/pull/752#issuecomment-572713505,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","On 1/9/20 11:12 AM, Phil Budne wrote:
 BTW, I was recently contacted by someone here in Massachusetts with a
 DECtape, which may contain PDP-7 340 spacewar (or it might be a PDP-1
 ""microtape"") which he was trying to read.
someone just contacted me about it. It sounded like it actually was for the MIT PDP-1X timesharing system",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/mgthompson,31,https://github.com/simh/simh/pull/752#issuecomment-572740851,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","I was also contacted.
…
On Thu, Jan 9, 2020 at 2:21 PM kossow ***@***.***> wrote:


 On 1/9/20 11:12 AM, Phil Budne wrote:
 > BTW, I was recently contacted by someone here in Massachusetts with a
 > DECtape, which may contain PDP-7 340 spacewar (or it might be a PDP-1
 > ""microtape"") which he was trying to read.


 someone just contacted me about it. It sounded like it actually was for
 the MIT PDP-1X timesharing system


 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#752?email_source=notifications&email_token=ABAVIHWOD27QEY4XG3QQLJDQ452KPA5CNFSM4IYG5ETKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEIROUII#issuecomment-572713505>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABAVIHSXHUKNHA3GVETQGFLQ452KPANCNFSM4IYG5ETA>
 .


-- 
Michael Thompson",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,32,https://github.com/simh/simh/pull/752#issuecomment-572901253,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Wow, that sounds really interesting!  Either PDP-7/340 or PDP-1X software would be really exciting.  I hope someone does succeed in getting the tape read.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,33,https://github.com/simh/simh/pull/752#issuecomment-572902655,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","@MattisLind, what is this PDP-9 Spacewar?
http://www.datormuseum.se/documentation-software/paper-tapes",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/AlKossow,34,https://github.com/simh/simh/pull/752#issuecomment-573011013,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","On 1/9/20 11:00 PM, Lars Brinkhoff wrote:
 Wow, that sounds really interesting! Either PDP-7/340 or PDP-1X software would be really exciting.
There is PDP-1X software in
http://bitsavers.org/bits/DEC/pdp1/papertapeImages

The problem is the 1X was hacked throughout its lifetime, to the point where it ended up as a 2s
compliment machine.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/MattisLind,35,https://github.com/simh/simh/pull/752#issuecomment-573013425,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","@larsbrinkhoff
It is a paper tape which is used to load a Dectape containing a PDP-9 Spacewar. I think that DECtape is called GAMES. Anders Sandahl has dumped it (among several other tapes): https://www.pdp-9.net/docs/dectapes/...ctapes-203.zip
Anders supposedly have the same paper tape in his collection of dumped paper tapes: http://www.bitsavers.org/bits/DEC/pdp9/papertapeImages/Sandahl_PDP9_Tape_Collection/",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/MattisLind,36,https://github.com/simh/simh/pull/752#issuecomment-573019720,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","@larsbrinkhoff
I once tried to load the GAMES tape (AFI23) in Anders collection with the GAME LOADER paper tape that Anders also dumped. This in PDP-9 SimH.
http://www.vcfed.org/forum/showthread.php?67085-A-new-G888-manchester-read-write-module/page4
I am not sure what is supposed to happen and never tried it much more. Probably lacking the 34H hardware emulation.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,37,https://github.com/simh/simh/pull/752#issuecomment-573032237,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Thank you @MattisLind,
I tried to reproduce this:
sim> attach dt1 /Users/mattis/Downloads/pdp9-dectapes-203/afi23.tu56
DT1: 18b/36b format, buffering file in memory
sim> attach dt2 /Users/mattis/Downloads/pdp9-dectapes-203/afi23.tu56
sim> load -R /Users/mattis/Downloads/Sandahl_PDP9_Tape_Collection/tape09/data.bin 17640
sim> d sr 400000
sim> go 17640

 CONTROL 2/69 
>

But it seems to just hang forever after ""go"".  (I had do add set g2in disabled.)  I used these inputs:
https://www.pdp-9.net/docs/dectapes/pdp9-dectapes-203.zip
http://www.bitsavers.org/bits/DEC/pdp9/papertapeImages/Sandahl_PDP9_Tape_Collection/Sandahl_PDP9_Tape_Collection.zip
Can you still get to this point?",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/MattisLind,38,https://github.com/simh/simh/pull/752#issuecomment-575753830,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Yes, I can.
But for some strange reason I need to have the tape attached to dt0 and dt1.

PDP-9 simulator V4.0-0 Beta        git commit id: f1a6d538
sim>  attach dt0 /Users/mattis_lind/Downloads/pdp9-dectapes-203/afi23.tu56
DT0: 18b/36b format, buffering file in memory
sim> attach dt1 /Users/mattis_lind/Downloads/pdp9-dectapes-203/afi23.tu56
DT1: 18b/36b format, buffering file in memory
sim> load -R /Users/mattis_lind/Downloads/Sandahl_PDP9_Tape_Collection/tape09/data.bin 17640
sim>  d sr 400000
sim> go 17640



 CONTROL 2/69 

>

But if this is the correct behaviour, well I have no clue at all.",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/MattisLind,39,https://github.com/simh/simh/pull/752#issuecomment-575757602,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Testing with other SR settings. Most give a HALT. Some of them hangs. But 10000 give a single '?'
sim> d sr 100000
sim> load -R /Users/mattis_lind/Downloads/Sandahl_PDP9_Tape_Collection/tape09/data.bin 17640
sim> go 17640
?",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/mgthompson,40,https://github.com/simh/simh/pull/752#issuecomment-575801235,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","The gameloader.bin file seems to be corrupt. The data.bin file looks much
better.

I am reverse engineering that now.
…
On Fri, Jan 17, 2020 at 2:13 PM Mattis Lind ***@***.***> wrote:
 Testing with other SR settings. Most give a HALT. Some of them hangs. But
 10000 give a single '?'

 sim> d sr 100000
 sim> load -R /Users/mattis_lind/Downloads/Sandahl_PDP9_Tape_Collection/tape09/data.bin 17640
 sim> go 17640
 ?

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#752?email_source=notifications&email_token=ABAVIHX2YQ3IRK4CLTCQYUDQ6H7MLA5CNFSM4IYG5ETKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEJIV2IQ#issuecomment-575757602>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABAVIHW3PIBCBSKCNV2IXVDQ6H7MLANCNFSM4IYG5ETA>
 .


-- 
Michael Thompson",True,{}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/SimHacker,41,https://github.com/simh/simh/pull/752#issuecomment-596889617,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","This is so wonderful, Lars!
I too would love to have a PDP-7 emulator that supports the Type 340 Display, so I really appreciate your work on that, as well as all the other cool stuff you've done with ITS emulation!
There is a CAD system called PIXIE that ran on Cambridge University's PDP-7, and the person who programmed it, Dr. Heinz Lemke, still has the code, and would love to see it running again after all these years.
PIXIE is the first known implementation of what are now called ""pie menus"".
Here is a short demo of PIXIE:
https://donhopkins.com/home/movies/FlightOfThePIXIE_YujaWang.mp4
And here are the full films that the Cambridge Library recently digitized, presented with a paper about PIXIE.
https://www.cl.cam.ac.uk/library/archives.html
Here is that paper about PIXIE:
PIXIE: A New Approach to Graphical Man-Machine Communication.
Wiseman, N.E., Lemke, H.U. & Hiles, J.O. (1969), Proceedings of 1969
CAD Conference Southampton, IEEE Conference Publication 51, 463–471.
https://donhopkins.com/home/documents/PIXIE%20a%20new%20approach%20to%20man-machine%20communication.pdf
Dr. Lemke is working on digging up and digitizing more info like the PIXIE manual, and the code itself.
What is the status of the 340 display and light pen driver, and how can I help?",True,{'HEART': ['https://github.com/avindra']}
simh/simh,https://github.com/simh/simh,752,2019-10-02T09:56:22Z,2019-10-06T18:24:22Z,2020-03-10T04:36:15Z,CLOSED,False,360,8,9,https://github.com/larsbrinkhoff,PDP7: Type 340 support.,1,[],https://github.com/simh/simh/pull/752,https://github.com/larsbrinkhoff,42,https://github.com/simh/simh/pull/752#issuecomment-596898132,"The PDP-7 simulator should add support for the DEC Type 340 display.  It's described here:
http://bitsavers.org/pdf/dec/graphics/7-13_340_Display_Programming_Manual.pdf
http://bitsavers.org/pdf/dec/graphics/H-340_Type_340_Precision_Incremental_CRT_System_Nov64.pdf
A 340 was attach to the Bell Labs' PDP-7.  I believe it may have been used for Space Travel.
http://www.linfo.org/pdp-7.html
The PDP-6 simulator already have support for the 340, but the interfacing is different.
@livingcomputermuseum has a working PDP-7 with a 340 display.
CC @philbudne, @kossow, @DoctorWkt, @aap, @SMJ","Wow, thanks for this!
The status is that this is merged and working to the extent I can see, but we don't have any PDP-7 software for the 340.  I did this because at the time I thought it would help resurrect Space Travel.
So having PIXIE run would be great!",True,{}
simh/simh,https://github.com/simh/simh,757,2019-10-20T20:28:45Z,2019-10-24T19:54:47Z,2019-10-24T19:54:47Z,MERGED,True,14,11,2,https://github.com/sethm,3b2: Fix coverity issues,1,[],https://github.com/simh/simh/pull/757,https://github.com/sethm,1,https://github.com/simh/simh/pull/757,,,True,{}
simh/simh,https://github.com/simh/simh,759,2019-10-28T11:25:33Z,2019-10-29T07:39:54Z,2019-10-29T07:39:54Z,CLOSED,False,1,2,1,https://github.com/ptroja,IBM1130: simplify code for string duplication.,1,[],https://github.com/simh/simh/pull/759,https://github.com/ptroja,1,https://github.com/simh/simh/pull/759,,,True,{}
simh/simh,https://github.com/simh/simh,759,2019-10-28T11:25:33Z,2019-10-29T07:39:54Z,2019-10-29T07:39:54Z,CLOSED,False,1,2,1,https://github.com/ptroja,IBM1130: simplify code for string duplication.,1,[],https://github.com/simh/simh/pull/759,https://github.com/markpizz,2,https://github.com/simh/simh/pull/759#issuecomment-547294767,,"This change is merely a 1 line change for the sake of change.  It doesn't solve a problem or add functionality.
If you come up with something more substantive, we'll be glad to embrace it.",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/762,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","This is to work around a bug in Homebrew, but it may be a good idea anyway.",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/762#issuecomment-547298529,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","The Travis build passes the deps.sh run on Mac, so I'd say this solves the problem.",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/markpizz,3,https://github.com/simh/simh/pull/762#issuecomment-547300491,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","Looking back over the last several Travis build logs for the simh/simh repo seems to show that sometimes there is a bunch of brew related output and the build fails, and sometimes it doesn't.
#659, #660 fail in the same way as #664, #665 and #667 while 2 in the middle #661 and #662 were successful.",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/762#issuecomment-547302014,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","I should also post this link:
https://travis-ci.community/t/syntax-error-unexpected-keyword-rescue-expecting-keyword-end-in-homebrew/5623
It points to a recent problem with Homebrew ""auto update"".  Workarounds suggested are to disable auto update, or do a manual update.  This pull request does the latter.",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/markpizz,5,https://github.com/simh/simh/pull/762#issuecomment-547456362,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","So, do you believe that this looks good now?",True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/762#issuecomment-547464125,"This is to work around a bug in Homebrew, but it may be a good idea anyway.",Yes.,True,{}
simh/simh,https://github.com/simh/simh,762,2019-10-29T07:41:09Z,2019-10-29T15:10:04Z,2020-03-19T08:05:17Z,CLOSED,False,1,0,1,https://github.com/larsbrinkhoff,Run 'brew update' before installing packages.,1,[],https://github.com/simh/simh/pull/762,https://github.com/markpizz,7,https://github.com/simh/simh/pull/762#issuecomment-547469723,"This is to work around a bug in Homebrew, but it may be a good idea anyway.","Merged with Cherry Pick, slight rephrased commit message, attribute Lars as author",True,{}
simh/simh,https://github.com/simh/simh,763,2019-10-29T08:20:33Z,2019-10-29T15:09:36Z,2020-03-19T08:05:30Z,CLOSED,False,11,0,2,https://github.com/larsbrinkhoff,Add CI email notifications.,2,[],https://github.com/simh/simh/pull/763,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/763,"Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications","Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications",True,{}
simh/simh,https://github.com/simh/simh,763,2019-10-29T08:20:33Z,2019-10-29T15:09:36Z,2020-03-19T08:05:30Z,CLOSED,False,11,0,2,https://github.com/larsbrinkhoff,Add CI email notifications.,2,[],https://github.com/simh/simh/pull/763,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/763#issuecomment-547308765,"Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications","I'm adding myself too.
The default behaviour is to always send a message when a build fails, and also when a failing build has been fixed.",True,{}
simh/simh,https://github.com/simh/simh,763,2019-10-29T08:20:33Z,2019-10-29T15:09:36Z,2020-03-19T08:05:30Z,CLOSED,False,11,0,2,https://github.com/larsbrinkhoff,Add CI email notifications.,2,[],https://github.com/simh/simh/pull/763,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/763#issuecomment-547309102,"Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications",I'll let this hang around in draft state for a while so I can test failing builds.,True,{}
simh/simh,https://github.com/simh/simh,763,2019-10-29T08:20:33Z,2019-10-29T15:09:36Z,2020-03-19T08:05:30Z,CLOSED,False,11,0,2,https://github.com/larsbrinkhoff,Add CI email notifications.,2,[],https://github.com/simh/simh/pull/763,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/763#issuecomment-547370839,"Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications",I think this should work.,True,{}
simh/simh,https://github.com/simh/simh,763,2019-10-29T08:20:33Z,2019-10-29T15:09:36Z,2020-03-19T08:05:30Z,CLOSED,False,11,0,2,https://github.com/larsbrinkhoff,Add CI email notifications.,2,[],https://github.com/simh/simh/pull/763,https://github.com/markpizz,5,https://github.com/simh/simh/pull/763#issuecomment-547469440,"Email messages should be sent to @markpizz when Travis CI builds fail, or are fixed, etc.
See this for details:
https://docs.travis-ci.com/user/notifications","Merged with Cherry Pick, slight rephrased commit message, attribute Lars as author",True,{}
simh/simh,https://github.com/simh/simh,765,2019-11-03T23:56:42Z,2019-11-04T03:45:21Z,2019-11-04T03:45:21Z,MERGED,True,1066,342,17,https://github.com/rcornwell,Regular update.,2,[],https://github.com/simh/simh/pull/765,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/765,Regular update to sim_card and KA10. This is to match current master branch.,Regular update to sim_card and KA10. This is to match current master branch.,True,{}
simh/simh,https://github.com/simh/simh,769,2019-11-17T18:42:58Z,2019-11-17T18:56:47Z,2019-11-17T18:56:48Z,MERGED,True,1,3,1,https://github.com/sethm,3b2: Remove unnecessary branch condition,1,[],https://github.com/simh/simh/pull/769,https://github.com/sethm,1,https://github.com/simh/simh/pull/769,,,True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/deltecent,1,https://github.com/simh/simh/pull/774,,,True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/markpizz,2,https://github.com/simh/simh/pull/774#issuecomment-562760084,,"A Couple of comments:

routines that interface with a SCP command (link ATTACH, or SET and SHOW) should emit error messages by calling sim_messagef().
The comment block at the top of the new source code module (s100_tarbell.c) should have something that looks a lot like what is in all the other simh source code modules.  Look at altairz80_cpu.c for an starting point.
I notice that you're including windows.h when _WIN32 is defined.  This certainly doesn't belong here, but I now see that you did this since it was done in many of the other modules in this simulator.  This include will be removed from the rest of the AltairZ80, but you should remove it from your module.",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/markpizz,3,https://github.com/simh/simh/pull/774#issuecomment-562870481,,"Additionally, the compile of this module fails on Windows under Visual Studio.  The following errors are produced.  On the fly loop variable declarations are some of these.  The others are due to passing a uint16 track and sector values to parameters which are only uint8.
1>Compiling...
1>s100_tarbell.c
1>..\AltairZ80\s100_tarbell.c(318) : error C2143: syntax error : missing ';' before 'type'
1>..\AltairZ80\s100_tarbell.c(318) : error C2143: syntax error : missing ';' before 'type'
1>..\AltairZ80\s100_tarbell.c(318) : error C2143: syntax error : missing ')' before 'type'
1>..\AltairZ80\s100_tarbell.c(318) : error C2143: syntax error : missing ';' before 'type'
1>..\AltairZ80\s100_tarbell.c(318) : warning C4552: '<' : operator has no effect; expected operator with side-effect
1>..\AltairZ80\s100_tarbell.c(318) : error C2059: syntax error : ')'
1>..\AltairZ80\s100_tarbell.c(318) : error C2143: syntax error : missing ';' before '{'
1>..\AltairZ80\s100_tarbell.c(628) : warning C4028: formal parameter 2 different from declaration
1>..\AltairZ80\s100_tarbell.c(770) : warning C4244: 'function' : conversion from 'uint16' to 'uint8', possible loss of data
1>..\AltairZ80\s100_tarbell.c(770) : warning C4244: 'function' : conversion from 'uint16' to 'uint8', possible loss of data
1>..\AltairZ80\s100_tarbell.c(795) : warning C4244: 'function' : conversion from 'uint16' to 'uint8', possible loss of data
1>..\AltairZ80\s100_tarbell.c(795) : warning C4244: 'function' : conversion from 'uint16' to 'uint8', possible loss of data",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/markpizz,4,https://github.com/simh/simh/pull/774#issuecomment-563074100,,"Making progress.
Meanwhile, windows still sees:
2>s100_tarbell.c
2>..\AltairZ80\s100_tarbell.c(557) : warning C4101: 'rtn' : unreferenced local variable
2>..\AltairZ80\s100_tarbell.c(554) : warning C4101: 'driveNum' : unreferenced local variable
2>..\AltairZ80\s100_tarbell.c(637) : warning C4028: formal parameter 2 different from declaration
2>..\AltairZ80\s100_tarbell.c(639) : warning C4101: 'driveNum' : unreferenced local variable

Additionally, you should read through the comment block at the top of the s100_tarbell.c file and change Peter Schorn's name to yours...  :-)",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/markpizz,5,https://github.com/simh/simh/pull/774#issuecomment-563075478,,"This message:
2>..\AltairZ80\s100_tarbell.c(637) : warning C4028: formal parameter 2 different from declaration

got me to look closely at the declaration of this routine as well as others in this module.
It is somewhat unusual for me to see parameters to routines that are passed by value to be explicitly declared as const:
static uint8 TARBELL_Write(const uint32 Addr, const int32 Data)

I guess that this would hopefully get the compiler to complain about any attempt within that routine to change the value of these parameters, but I'm not sure that really does much...",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/deltecent,6,https://github.com/simh/simh/pull/774#issuecomment-563080753,,"I think you're right about the const declarations. I removed them.
I don't have a Windows compiler, but I enabled -Wall for gcc. Hopefully Windows doesn't find any more problems.",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/markpizz,7,https://github.com/simh/simh/pull/774#issuecomment-563082456,,"No more Windows problems now.  I'm waiting for Peter Schorn's review of this since he maintains/owns this simulator.  He's been traveling, and said he'd get to it tomorrow.",True,{}
simh/simh,https://github.com/simh/simh,774,2019-12-06T18:14:29Z,2019-12-10T01:23:03Z,2019-12-10T01:23:04Z,MERGED,True,1181,0,4,https://github.com/deltecent,ALTAIRZ80: Adds TARBELL device for Tarbell SSSD Disk Controller,11,[],https://github.com/simh/simh/pull/774,https://github.com/deltecent,8,https://github.com/simh/simh/pull/774#issuecomment-563089950,,"That sounds great. I appreciate all of the help. Mike Douglas has run it through some tests without any problems. I do want to improve the documentation on how the Tarbell controller and FD1771 actually work, and I still need to implement the read track function, but I have to write a program to test that first since that function doesn't seem to be used by CP/M. I'll push a PR when I have those ready for review.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,1,https://github.com/simh/simh/pull/775,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,2,https://github.com/simh/simh/pull/775#issuecomment-562916804,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Just as a data point, using the pull request on a Release build:
cmake-build cmake-merge = $ ctest                                                                                       Test project C:/Users/scoot/play/simh-merge/cmake-build
    Start 1: test-vax
1/9 Test #1: test-vax .........................   Passed    3.24 sec
    Start 2: test-microvax1
2/9 Test #2: test-microvax1 ...................   Passed    1.95 sec
    Start 3: test-rtvax1000
3/9 Test #3: test-rtvax1000 ...................   Passed    1.67 sec
    Start 4: test-microvax2
4/9 Test #4: test-microvax2 ...................   Passed    1.77 sec
    Start 5: test-vax730
5/9 Test #5: test-vax730 ......................   Passed    5.10 sec
    Start 6: test-vax750
6/9 Test #6: test-vax750 ......................   Passed    6.25 sec
    Start 7: test-vax780
7/9 Test #7: test-vax780 ......................   Passed    5.68 sec
    Start 8: test-vax8200
8/9 Test #8: test-vax8200 .....................   Passed    5.75 sec
    Start 9: test-vax8600
9/9 Test #9: test-vax8600 .....................   Passed    8.97 sec

100% tests passed, 0 tests failed out of 9

Total Test time (real) =  40.52 sec",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,3,https://github.com/simh/simh/pull/775#issuecomment-563126796,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Attempting to follow you instructions produces less than useful results:
simh$ mkdir cmake-ninja
simh$ cd cmake-ninja/
simh/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
CMake Error at /usr/share/cmake-3.10/Modules/CMakeDetermineSystem.cmake:186 (configure_file):
  configure_file Problem configuring file
Call Stack (most recent call first):
  CMakeLists.txt:20 (project)


CMake Error: CMake was unable to find a build program corresponding to ""Ninja"".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
-- Configuring incomplete, errors occurred!
See also ""/mnt/c/Users/Mark/Documents/simh/cmake-ninja/CMakeFiles/CMakeOutput.log"".

This is more complicated than:
simh$ make
lib paths are: /lib/ /lib/x86_64-linux-gnu/ /lib32/ /usr/lib/ /usr/lib/x86_64-linux-gnu/ /usr/lib/x86_64-linux-gnu/libfakeroot/ /usr/lib32/
include paths are:  /usr/lib/gcc/x86_64-linux-gnu/7/include /usr/local/include /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed /usr/include/x86_64-linux-gnu /usr/include
using libm: /usr/lib/x86_64-linux-gnu/libm.so
using librt: /usr/lib/x86_64-linux-gnu/librt.so
using libpthread: /usr/lib/x86_64-linux-gnu/libpthread.so /usr/include/pthread.h
using libpcreposix: /usr/lib/x86_64-linux-gnu/libpcreposix.so /usr/lib/x86_64-linux-gnu/libpcre.so /usr/include/pcreposix.h /usr/include/pcre.h
using semaphore: /usr/include/semaphore.h
using libdl: /usr/lib/x86_64-linux-gnu/libdl.so /usr/include/dlfcn.h
using mman: /usr/include/x86_64-linux-gnu/sys/mman.h
using libSDL2: /usr/include/SDL2/SDL.h
*** Warning ***
*** Warning *** all  Simulators are being built WITHOUT
*** Warning *** libpcap networking support
*** Warning ***
*** Warning *** To build simulator(s) with libpcap networking support you
*** Warning *** should install the libpcap development components for
*** Warning *** for your Linux system:
*** Warning ***        $ sudo apt-get install libpcap-dev
*** Warning ***
*** Info ***
*** Info *** Simulators on your Linux platform can also be built with
*** Info *** extended LAN Ethernet networking support by using VDE Ethernet.
*** Info ***
*** Info *** To build simulator(s) with extended networking support you
*** Info *** should install the vde2 package to provide this
*** Info *** functionality for your Linux system:
*** Info ***        $ sudo apt-get install libvdeplug-dev
*** Info ***
[...]

At least more instructions are needed.  If platform specific instructions are needed, please provide specific details for those as well.
Detailed platform instructions for Windows are absolutely needed beyond the common case of installing Visual Studio.
You say:
`simh` is a difficult package to build from scratch, especially if you're on a
Windows platform. There's a separate directory tree you have to check out that
has to sit parallel to the main `simh` codebase (aka `sim-master`.) That's not a
particularly clean or intuitive way of building software. It's also prone to
errors and doesn't lend itself to upgrading dependency libraries.

In fact, there is no need to do anything specifically relating to windows-build if you're building under Visual Studio and are working in a git repo.  The windows-build components are automatically fetched and updated when needed.  No extra steps.  Open the ""Visual Studio Projects\simh.sln"" file and build either everything or just the simulator you want.
Long ago (10 years at least), it was observed that letting folks, on their own, fetch and build dependent packages that were needed by simh sometimes worked fine, and sometimes produced random odd behaviors that were impossible to support.  As a result of this, a policy was adopted that

made dependent packages optional, resulting in diminished behavior, but otherwise working simulators.
required  dependent packages to be provided by OS or global package maintainers and explicitly NOT packages build locally by users.  This assured that those who actually packaged these components for a particular host system were happy that the particular setup of each package was known to work well on that host for other related packages that they also maintained and distributed.  Often these have host specific build details which are not necessarily how the default downloaded package would produce - hence our original problem.

Windows is a host platform that doesn't have OS supplied packages for the dependencies that simh needs, so I am the package maintainer for the dependencies that simh needs.  I package and confirm reliable simh functionality for these packages on the full range of Windows version that simh simulators run on.  The simh simulator executables that are built with Visual Studio 2008 are standalone binaries (with no external DLL dependencies) that will run on all Windows versions from XP onward.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/775#issuecomment-563134394,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I suggest that build scripts for AppVeyor and Travis CI be added.
Those scipts would be useful as guides how to invoke CMake and install
prerequisites.",True,{'THUMBS_UP': ['https://github.com/avindra']}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,5,https://github.com/simh/simh/pull/775#issuecomment-563348433,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: I rather gathered that was your rationale for having the parallel Windows dependency source tree. I've ""been there, done that"" as a developer and learned my lesson to never do that again. When I first opened the simh solution and compiled, it was a less-than-ideal waiting for VS1029 solution upgrades, couldn't find the Debug versions of libraries, etc. -- and I'm a fairly experienced developer.
I also realize that part of your rationale is to head off dumbass questions, aka compile FAQs. I also assume that anyone who's going to compile up simh is not a n00bie, but often, that's a poor assumption.
That said, I should provide better prerequisites in the README-cmake.md.
@larsbrinkhoff: I've held back from updating appveyor.yml; I do have a working one. Two issues: (a) the appveyor images have the Ninja build system in them, so you wouldn't see it get installed; (b) If something goes Tango Foxtrot Uniform, do you really want to see Mark's face wracked in perplexity and confusion?",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,6,https://github.com/simh/simh/pull/775#issuecomment-563376289,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Another failing case on Ubuntu 19.04 x64:
sim-bscottm$ mkdir cmake-ninja
sim-bscottm$ cd cmake-ninja/
simh-bscottm/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
CMake Error: CMake was unable to find a build program corresponding to ""Ninja"".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
-- Configuring incomplete, errors occurred!
See also ""./simh-bscottm/cmake-ninja/CMakeFiles/CMakeOutput.log"".
simh-bscottm/cmake-ninja$ cat simh-bscottm/cmake-ninja/CMakeFiles/CMakeOutput.log
The system is: Linux - 5.0.0-27-generic - x86_64
simh-bscottm/cmake-ninja$ 

Before I can look more closely at what you've provided I need to get something that at least works a little bit.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,7,https://github.com/simh/simh/pull/775#issuecomment-563394688,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Ok, already, I get it. Did you install the Ninja package via your favorite package manager? Give me a chance to update README-cmake.md.
One of the magic incantations for *nix is:
$ cmake -G ""Unix Makefiles"" -DCMAKE_BUILD_TYPE=Release ..
$ make",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/rcornwell,8,https://github.com/simh/simh/pull/775#issuecomment-563419608,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Looking at the build jobs, I see that for the PDP10-KA and PDP10-KI you are including PDP11 as a dependency. These simulators do not depend on the PDP11 for anything. I also notice you don't have the USE_INT64 from the simulators. But I see you have INT64 on most simulators. Compiling simulators that do not use 64 bit will break many simulators (this changes the size of t_value). Also PDP10-KA and PDP10-KI should have networking support enabled.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,9,https://github.com/simh/simh/pull/775#issuecomment-563427007,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Your CMake quickstart needs to spell out the system dependencies.  At least the need for Ninja.  So I installed the ninja-build package and I get further, but not far enough:
ark@mark$ cd simh-bscottm/
mark@mark simh-bscottm$ mkdir cmake-ninja
mark@mark simh-bscottm$ cd cmake-ninja/
mark@mark simh-bscottm/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
-- The C compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- SIMH_DEP_TOPDIR is simh-bscottm/cmake-ninja/build-stage
-- Creating build-stage directory hierarchy (include, lib, bin)
-- Performing Test HAVE_SSE
-- Performing Test HAVE_SSE - Success
-- Performing Test HAVE_SSE2
-- Performing Test HAVE_SSE2 - Success
-- Performing Test HAVE_SSE3
-- Performing Test HAVE_SSE3 - Success
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") 
-- Found PCRE: /usr/lib/x86_64-linux-gnu/libpcre.so  
-- Found PNG: /usr/lib/x86_64-linux-gnu/libpng.so (found version ""1.6.36"") 
-- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDE_DIRS) 
-- Building Freetype from github repository.
-- Could NOT find SDL2_ttf (missing: SDL2_ttf_DIR)
CMake Error at /usr/share/cmake-3.13/Modules/ExternalProject.cmake:2835 (get_property):
  get_property could not find TARGET SDL2::SDL2.  Perhaps it has not yet been
  created.
Call Stack (most recent call first):
  /usr/share/cmake-3.13/Modules/ExternalProject.cmake:3108 (_ep_add_configure_command)
  cmake/video-deps.cmake:114 (ExternalProject_Add)
  CMakeLists.txt:155 (include)


-- Building SDL2_ttf from https://www.libsdl.org/release/SDL2_ttf-2.0.15.zip.
-- Found PCAP: /usr/lib/x86_64-linux-gnu/libpcap.so  
-- 
-- Libraries and features:
--   Thread support .................. Linux builtin pthreads
--   zlib ............................ installed ZLIB
--   Perl-Compatible RegExps.......... installed pcre
--   PNG, Freetype, SDL2, SDL2_ttf ... installed PNG, Freetype source build, installed SDL2, SDL2_ttf source build
--   Packet Capture (PCAP) ........... installed PCAP
-- 
-- Build options:
--   Video/graphics support ....... TRUE
--   Networking ................... ON
--   Asynchronous I/O ............. ON
--   Build internal ROMS .......... Yes
--   'cppcheck' ................... 'cppcheck' not installed.
-- 
-- 
-- The following dependencies need to be built:
-- 
--   freetype;SDL2_ttf
-- 
-- Execute 'cmake --build . --config <Release|Debug|...>'
-- 
-- Reconfigure CMake after the build is complete and successful (no errors)
-- 
-- Configuring incomplete, errors occurred!
See also ""simh-bscottm/cmake-ninja/CMakeFiles/CMakeOutput.log"".
mark@mark simh-bscottm/cmake-ninja$ cmake --build . --config Release
ninja: error: loading 'build.ninja': No such file or directory
mark@mark simh-bscottm/cmake-ninja$ cd ..
mark@mark simh-bscottm$ cmake --build . --config Release
Error: could not load cache

Please start from a new clone on a *nix system and record each of the input steps to get things working.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,10,https://github.com/simh/simh/pull/775#issuecomment-563485782,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Following your quickstart on Windows with Visual Studio 2019 also doesn't work:
**********************************************************************
** Visual Studio 2019 Developer Command Prompt v16.4.0
** Copyright (c) 2019 Microsoft Corporation
**********************************************************************

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community>cd \Users\Mark\Documents\simh\

C:\Users\Mark\Documents\simh>mkdir cmake-ninja

C:\Users\Mark\Documents\simh>cd cmake-ninja

C:\Users\Mark\Documents\simh\cmake-ninja>cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
-- The C compiler identification is MSVC 19.24.28314.0
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- SIMH_DEP_TOPDIR is C:/Users/Mark/Documents/simh/cmake-ninja/build-stage
-- Creating build-stage directory hierarchy (include, lib, bin)
-- Could NOT find PTW (missing: PTW_C_LIBRARY PTW_INCLUDE_DIR)
-- Building Pthreads4w from Git repository https://github.com/bscottm/pthreads4w.git
-- Could NOT find ZLIB (missing: ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
-- Building ZLIB from github repository.
-- Building PCRE from https://ftp.pcre.org/pub/pcre/pcre2-10.33.zip
-- Could NOT find ZLIB (missing: ZLIB_LIBRARY ZLIB_INCLUDE_DIR)
-- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR)
-- Building PNG from https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/libpng-1.6.37.tar.xz/download
-- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDE_DIRS)
-- Building Freetype from github repository.
-- Could NOT find SDL2 (missing: SDL2_DIR)
-- Could NOT find SDL2_ttf (missing: SDL2_ttf_DIR)
-- Building SDL2 from https://www.libsdl.org/release/SDL2-2.0.10.zip.
-- Building SDL2_ttf from https://www.libsdl.org/release/SDL2_ttf-2.0.15.zip.
-- Could NOT find PCAP (missing: PCAP_LIBRARIES PCAP_INCLUDE_DIRS)
-- Building PCAP from github repository
--
-- Libraries and features:
--   Thread support .................. pthreads4w source build
--   zlib ............................ ZLIB source build
--   Perl-Compatible RegExps.......... pcre2 dependent build
--   PNG, Freetype, SDL2, SDL2_ttf ... PNG source build, Freetype source build, SDL2 source build, SDL2_ttf source build
--   Packet Capture (PCAP) ........... PCAP source build
--
-- Build options:
--   Video/graphics support ....... TRUE
--   Networking ................... ON
--   Asynchronous I/O ............. ON
--   Build internal ROMS .......... Yes
--   'cppcheck' ................... 'cppcheck' not installed.
--
--
-- The following dependencies need to be built:
--
--   pthreads4w;zlib;pcre;png;freetype;SDL2;SDL2_ttf;pcap
--
-- Execute 'cmake --build . --config <Release|Debug|...>'
--
-- Reconfigure CMake after the build is complete and successful (no errors)
--
-- Configuring done
-- Generating done
-- Build files have been written to: C:/Users/Mark/Documents/simh/cmake-ninja

C:\Users\Mark\Documents\simh\cmake-ninja>cmake --build . --config Release
[5/64] Performing download step (download, verify and extract) for 'sdl2-dep'
-- Downloading...
   dst='C:/Users/Mark/Documents/simh/cmake-ninja/sdl2-dep-prefix/src/SDL2-2.0.10.zip'
   timeout='none'
-- Using src='https://www.libsdl.org/release/SDL2-2.0.10.zip'
-- [download 0% complete]
[...]
-- [download 100% complete]
-- Downloading... done
-- extracting...
     src='C:/Users/Mark/Documents/simh/cmake-ninja/sdl2-dep-prefix/src/SDL2-2.0.10.zip'
     dst='C:/Users/Mark/Documents/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep'
-- extracting... [tar xfz]
-- extracting... [analysis]
-- extracting... [rename]
-- extracting... [clean up]
-- extracting... done
[8/64] Performing configure step for 'sdl2-dep'
-- The C compiler identification is MSVC 19.24.28314.0
-- The CXX compiler identification is MSVC 19.24.28314.0
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe
-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe
-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE)
-- Performing Test HAVE_WIN32_CC
-- Performing Test HAVE_WIN32_CC - Success
-- Performing Test HAVE_XINPUT_H
-- Performing Test HAVE_XINPUT_H - Success
-- Performing Test HAVE_XINPUT_GAMEPAD_EX
-- Performing Test HAVE_XINPUT_GAMEPAD_EX - Failed
-- Performing Test HAVE_XINPUT_STATE_EX
-- Performing Test HAVE_XINPUT_STATE_EX - Failed
-- Looking for d3d9.h
-- Looking for d3d9.h - found
-- Looking for d3d11_1.h
-- Looking for d3d11_1.h - found
-- Looking for ddraw.h
-- Looking for ddraw.h - found
-- Looking for dsound.h
-- Looking for dsound.h - found
-- Looking for dinput.h
-- Looking for dinput.h - found
-- Looking for dxgi.h
-- Looking for dxgi.h - found
-- Looking for mmdeviceapi.h
-- Looking for mmdeviceapi.h - found
-- Looking for audioclient.h
-- Looking for audioclient.h - found
-- Looking for endpointvolume.h
-- Looking for endpointvolume.h - found
--
-- SDL2 was configured with the following options:
--
-- Platform: Windows-10.0.18363
-- 64-bit:   FALSE
-- Compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.24.28314/bin/Hostx86/x86/cl.exe
--
-- Subsystems:
--   Atomic:    ON
--   Audio:     ON
--   Video:     ON
--   Render:    ON
--   Events:    ON
--   Joystick:  ON
--   Haptic:    ON
--   Power:     ON
--   Threads:   ON
--   Timers:    ON
--   File:      ON
--   Loadso:    ON
--   CPUinfo:   ON
--   Filesystem:        ON
--   Dlopen:    ON
--   Sensor:    ON
--
-- Options:
--   3DNOW                  (Wanted: ON): ON
--   ALSA                   (Wanted: OFF): OFF
--   ALSA_SHARED            (Wanted: OFF): OFF
--   ALTIVEC                (Wanted: ON): OFF
--   ARTS                   (Wanted: OFF): OFF
--   ARTS_SHARED            (Wanted: OFF): OFF
--   ASSEMBLY               (Wanted: ON): OFF
--   ASSERTIONS             (Wanted: auto): auto
--   BACKGROUNDING_SIGNAL   (Wanted: OFF): OFF
--   CLOCK_GETTIME          (Wanted: OFF): OFF
--   DIRECTFB_SHARED        (Wanted: OFF): OFF
--   DIRECTX                (Wanted: ON): ON
--   DISKAUDIO              (Wanted: ON): ON
--   DUMMYAUDIO             (Wanted: ON): ON
--   ESD                    (Wanted: OFF): OFF
--   ESD_SHARED             (Wanted: OFF): OFF
--   FOREGROUNDING_SIGNAL   (Wanted: OFF): OFF
--   FUSIONSOUND            (Wanted: OFF): OFF
--   FUSIONSOUND_SHARED     (Wanted: OFF): OFF
--   GCC_ATOMICS            (Wanted: OFF): OFF
--   HIDAPI                 (Wanted: ON): ON
--   INPUT_TSLIB            (Wanted: OFF): OFF
--   JACK                   (Wanted: OFF): OFF
--   JACK_SHARED            (Wanted: OFF): OFF
--   KMSDRM_SHARED          (Wanted: OFF): OFF
--   LIBC                   (Wanted: OFF): OFF
--   LIBSAMPLERATE          (Wanted: OFF): OFF
--   LIBSAMPLERATE_SHARED   (Wanted: OFF): OFF
--   MMX                    (Wanted: ON): ON
--   NAS                    (Wanted: OFF): OFF
--   NAS_SHARED             (Wanted: OFF): OFF
--   OSS                    (Wanted: OFF): OFF
--   PTHREADS               (Wanted: OFF): OFF
--   PTHREADS_SEM           (Wanted: OFF): OFF
--   PULSEAUDIO             (Wanted: OFF): OFF
--   PULSEAUDIO_SHARED      (Wanted: OFF): OFF
--   RENDER_D3D             (Wanted: ON): ON
--   RPATH                  (Wanted: OFF): OFF
--   SDL_DLOPEN             (Wanted: ON): OFF
--   SDL_STATIC_PIC         (Wanted: OFF): OFF
--   SDL_TEST               (Wanted: OFF): OFF
--   SNDIO                  (Wanted: OFF): OFF
--   SSE                    (Wanted: ON): ON
--   SSE2                   (Wanted: OFF): ON
--   SSE3                   (Wanted: OFF): ON
--   SSEMATH                (Wanted: OFF): OFF
--   VIDEO_COCOA            (Wanted: OFF): OFF
--   VIDEO_DIRECTFB         (Wanted: OFF): OFF
--   VIDEO_DUMMY            (Wanted: ON): ON
--   VIDEO_KMSDRM           (Wanted: OFF): OFF
--   VIDEO_OPENGL           (Wanted: ON): ON
--   VIDEO_OPENGLES         (Wanted: ON): ON
--   VIDEO_RPI              (Wanted: OFF): OFF
--   VIDEO_VIVANTE          (Wanted: OFF): OFF
--   VIDEO_VULKAN           (Wanted: ON): ON
--   VIDEO_WAYLAND          (Wanted: OFF): OFF
--   VIDEO_WAYLAND_QT_TOUCH (Wanted: OFF): OFF
--   VIDEO_X11              (Wanted: OFF): OFF
--   VIDEO_X11_XCURSOR      (Wanted: OFF): OFF
--   VIDEO_X11_XINERAMA     (Wanted: OFF): OFF
--   VIDEO_X11_XINPUT       (Wanted: OFF): OFF
--   VIDEO_X11_XRANDR       (Wanted: OFF): OFF
--   VIDEO_X11_XSCRNSAVER   (Wanted: OFF): OFF
--   VIDEO_X11_XSHAPE       (Wanted: OFF): OFF
--   VIDEO_X11_XVM          (Wanted: OFF): OFF
--   WASAPI                 (Wanted: ON): OFF
--   WAYLAND_SHARED         (Wanted: OFF): OFF
--   X11_SHARED             (Wanted: OFF): OFF
--
--  CFLAGS:        /DWIN32 /D_WINDOWS /W3  -IC:/Users/Mark/Documents/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep/src/hidapi/hidapi
--  EXTRA_CFLAGS:
--  EXTRA_LDFLAGS:
--  EXTRA_LIBS:    user32;gdi32;winmm;imm32;ole32;oleaut32;version;uuid;advapi32;setupapi;shell32;dinput8
--
--  Build Shared Library: ON
--  Build Static Library: ON
--  Build Static Library with Position Independent Code: OFF
--
-- Configuring done
-- Generating done
CMake Warning:
  Manually-specified variables were not used by the project:

    CMAKE_INCLUDE_PATH


-- Build files have been written to: C:/Users/Mark/Documents/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep-build
      0 [main] sh (17136) C:\Program Files\Git\usr\bin\sh.exe: *** fatal error - add_item (""\??\C:\Program Files\Git"", ""/"", ...) failed, errno 1
[9/64] Performing download step (git clone) for 'pthreads4w-ext'
FAILED: pthreads4w-ext-prefix/src/pthreads4w-ext-stamp/pthreads4w-ext-download
cmd.exe /C ""cd /D C:\Users\Mark\Documents\simh\cmake-ninja\pthreads4w-ext-prefix\src && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -P C:/Users/Mark/Documents/simh/cmake-ninja/pthreads4w-ext-prefix/tmp/pthreads4w-ext-gitclone.cmake && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E touch C:/Users/Mark/Documents/simh/cmake-ninja/pthreads4w-ext-prefix/src/pthreads4w-ext-stamp/pthreads4w-ext-download""
Cloning into 'pthreads4w-ext'...
Branch 'mingw' set up to track remote branch 'mingw' from 'origin'.
Switched to a new branch 'mingw'
      0 [main] sh (17136) C:\Program Files\Git\usr\bin\sh.exe: *** fatal error - add_item (""\??\C:\Program Files\Git"", ""/"", ...) failed, errno 1
Stack trace:
Frame        Function    Args
000FFFF9BC0  0018006137E (00180272D02, 0018024E199, 00600010000, 000FFFF8B40)
000FFFF9BC0  00180049229 (000FFFFABF0, 000FFFF9BC0, 00000000000, 00000000000)
000FFFF9BC0  00180049262 (000FFFF9BC0, 00000000001, 00600010000, 505C3A435C3F3F5C)
000FFFF9BC0  001800DAE6B (00000000000, 00040000024, 00000000000, 00000000000)
1D5AEE68E6AC190  0018012A455 (001800C201C, 00000000000, 00000000000, 00000000000)
000FFFFCCD0  00180049853 (00000000000, 00000000000, 00000000000, 00000000000)
00000000000  00180048343 (00000000000, 00000000000, 00000000000, 00000000000)
000FFFFFFF0  001800483F4 (00000000000, 00000000000, 00000000000, 00000000000)
End of stack trace
CMake Error at C:/Users/Mark/Documents/simh/cmake-ninja/pthreads4w-ext-prefix/tmp/pthreads4w-ext-gitclone.cmake:49 (message):
  Failed to update submodules in:
  'C:/Users/Mark/Documents/simh/cmake-ninja/pthreads4w-ext-prefix/src/pthreads4w-ext'


      1 [main] sh (15972) C:\Program Files\Git\usr\bin\sh.exe: *** fatal error - add_item (""\??\C:\Program Files\Git"", ""/"", ...) failed, errno 1
[10/64] Performing download step (git clone) for 'pcap-dep'
FAILED: pcap-dep-prefix/src/pcap-dep-stamp/pcap-dep-download
cmd.exe /C ""cd /D C:\Users\Mark\Documents\simh\cmake-ninja\pcap-dep-prefix\src && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -P C:/Users/Mark/Documents/simh/cmake-ninja/pcap-dep-prefix/tmp/pcap-dep-gitclone.cmake && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E touch C:/Users/Mark/Documents/simh/cmake-ninja/pcap-dep-prefix/src/pcap-dep-stamp/pcap-dep-download""
Cloning into 'pcap-dep'...
Branch 'cmake_library_architecture' set up to track remote branch 'cmake_library_architecture' from 'origin'.
Switched to a new branch 'cmake_library_architecture'
      1 [main] sh (15972) C:\Program Files\Git\usr\bin\sh.exe: *** fatal error - add_item (""\??\C:\Program Files\Git"", ""/"", ...) failed, errno 1
Stack trace:
Frame        Function    Args
000FFFF9BC0  0018006137E (00180272D02, 0018024E199, 00600010000, 000FFFF8B40)
000FFFF9BC0  00180049229 (000FFFFABF0, 000FFFF9BC0, 00000000000, 00000000000)
000FFFF9BC0  00180049262 (000FFFF9BC0, 00000000001, 00600010000, 505C3A435C3F3F5C)
000FFFF9BC0  001800DAE6B (00000000000, 00040000024, 00000000000, 00000000000)
1D5AEE68F8F6B6E  0018012A455 (001800C201C, 00000000000, 00000000000, 00000000000)
000FFFFCCD0  00180049853 (00000000000, 00000000000, 00000000000, 00000000000)
00000000000  00180048343 (00000000000, 00000000000, 00000000000, 00000000000)
000FFFFFFF0  001800483F4 (00000000000, 00000000000, 00000000000, 00000000000)
End of stack trace
CMake Error at C:/Users/Mark/Documents/simh/cmake-ninja/pcap-dep-prefix/tmp/pcap-dep-gitclone.cmake:49 (message):
  Failed to update submodules in:
  'C:/Users/Mark/Documents/simh/cmake-ninja/pcap-dep-prefix/src/pcap-dep'


[11/64] Performing build step for 'sdl2-dep'
[1/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_audiodev.c.obj
[2/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL_error.c.obj
[3/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_wave.c.obj
[4/303] Building C object CMakeFiles\SDL2-static.dir\src\atomic\SDL_atomic.c.obj
[5/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_audiotypecvt.c.obj
[6/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_mixer.c.obj
[7/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_audiocvt.c.obj
[8/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL_dataqueue.c.obj
[9/303] Building C object CMakeFiles\SDL2-static.dir\src\atomic\SDL_spinlock.c.obj
[10/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL_log.c.obj
[11/303] Building C object CMakeFiles\SDL2-static.dir\src\cpuinfo\SDL_cpuinfo.c.obj
[12/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_atan2.c.obj
[13/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_dropevents.c.obj
[14/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL_assert.c.obj
[15/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\SDL_audio.c.obj
[16/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_clipboardevents.c.obj
[17/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_exp.c.obj
[18/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_displayevents.c.obj
[19/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_log.c.obj
[20/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_fmod.c.obj
[21/303] Building C object CMakeFiles\SDL2-static.dir\src\dynapi\SDL_dynapi.c.obj
[22/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_keyboard.c.obj
[23/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_sqrt.c.obj
[24/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_pow.c.obj
[25/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_gesture.c.obj
[26/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_quit.c.obj
[27/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_rem_pio2.c.obj
[28/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\k_sin.c.obj
[29/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\k_rem_pio2.c.obj
[30/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\k_cos.c.obj
[31/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_mouse.c.obj
[32/303] Building C object CMakeFiles\SDL2-static.dir\src\file\SDL_rwops.c.obj
[33/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_cos.c.obj
[34/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\e_log10.c.obj
[35/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_scalbn.c.obj
[36/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_atan.c.obj
[37/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_events.c.obj
[38/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_copysign.c.obj
[39/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_touch.c.obj
[40/303] Building C object CMakeFiles\SDL2-static.dir\src\render\SDL_d3dmath.c.obj
[41/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\k_tan.c.obj
[42/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_floor.c.obj
[43/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_sin.c.obj
[44/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_fabs.c.obj
[45/303] Building C object CMakeFiles\SDL2-static.dir\src\libm\s_tan.c.obj
[46/303] Building C object CMakeFiles\SDL2-static.dir\src\render\psp\SDL_render_psp.c.obj
[47/303] Building C object CMakeFiles\SDL2-static.dir\src\render\opengles\SDL_render_gles.c.obj
[48/303] Building C object CMakeFiles\SDL2-static.dir\src\render\SDL_yuv_sw.c.obj
[49/303] Building C object CMakeFiles\SDL2-static.dir\src\events\SDL_windowevents.c.obj
[50/303] Building C object CMakeFiles\SDL2-static.dir\src\render\opengles2\SDL_shaders_gles2.c.obj
[51/303] Building C object CMakeFiles\SDL2-static.dir\src\render\SDL_render.c.obj
[52/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_drawpoint.c.obj
[53/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_blendfillrect.c.obj
[54/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_drawline.c.obj
[55/303] Building C object CMakeFiles\SDL2-static.dir\src\render\opengles2\SDL_render_gles2.c.obj
[56/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_render_sw.c.obj
[57/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_blendline.c.obj
[58/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_getenv.c.obj
[59/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_string.c.obj
[60/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_blendpoint.c.obj
[61/303] Building C object CMakeFiles\SDL2-static.dir\src\render\opengl\SDL_render_gl.c.obj
[62/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_iconv.c.obj
[63/303] Building C object CMakeFiles\SDL2-static.dir\src\render\direct3d\SDL_shaders_d3d.c.obj
[64/303] Building C object CMakeFiles\SDL2-static.dir\src\render\opengl\SDL_shaders_gl.c.obj
[65/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_qsort.c.obj
[66/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_stdlib.c.obj
[67/303] Building C object CMakeFiles\SDL2-static.dir\src\render\direct3d11\SDL_render_d3d11.c.obj
[68/303] Building C object CMakeFiles\SDL2-static.dir\src\render\software\SDL_rotate.c.obj
[69/303] Building C object CMakeFiles\SDL2-static.dir\src\render\direct3d11\SDL_shaders_d3d11.c.obj
[70/303] Building C object CMakeFiles\SDL2-static.dir\src\stdlib\SDL_malloc.c.obj
[71/303] Building C object CMakeFiles\SDL2-static.dir\src\render\direct3d\SDL_render_d3d.c.obj
[72/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_0.c.obj
[73/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_A.c.obj
[74/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_copy.c.obj
[75/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_auto.c.obj
[76/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_N.c.obj
[77/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_bmp.c.obj
[78/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\SDL_thread.c.obj
[79/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_fillrect.c.obj
[80/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_rect.c.obj
[81/303] Building C object CMakeFiles\SDL2-static.dir\src\timer\SDL_timer.c.obj
[82/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\disk\SDL_diskaudio.c.obj
[83/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\dummy\SDL_dummyaudio.c.obj
[84/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_slow.c.obj
[85/303] Building C object CMakeFiles\SDL2-static.dir\src\haptic\SDL_haptic.c.obj
[86/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_RLEaccel.c.obj
[87/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_egl.c.obj
[88/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit.c.obj
[89/303] Building C object CMakeFiles\SDL2-static.dir\src\power\SDL_power.c.obj
[90/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_clipboard.c.obj
[91/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_stretch.c.obj
[92/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_blit_1.c.obj
[93/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_yuv.c.obj
[94/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_pixels.c.obj
[95/303] Building C object CMakeFiles\SDL2-static.dir\src\video\dummy\SDL_nullframebuffer.c.obj
[96/303] Building C object CMakeFiles\SDL2-static.dir\src\video\dummy\SDL_nullevents.c.obj
[97/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_shape.c.obj
[98/303] Building C object CMakeFiles\SDL2-static.dir\src\video\yuv2rgb\yuv_rgb.c.obj
[99/303] Building C object CMakeFiles\SDL2-static.dir\src\sensor\SDL_sensor.c.obj
[100/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_vulkan_utils.c.obj
[101/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_surface.c.obj
[102/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\SDL_joystick.c.obj
[103/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\SDL_gamecontroller.c.obj
[104/303] Building C object CMakeFiles\SDL2-static.dir\src\video\SDL_video.c.obj
[105/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowskeyboard.c.obj
[106/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsopengles.c.obj
[107/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsmessagebox.c.obj
[108/303] Building C object CMakeFiles\SDL2-static.dir\src\core\windows\SDL_xinput.c.obj
[109/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsmouse.c.obj
[110/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsopengl.c.obj
[111/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\winmm\SDL_winmm.c.obj
[112/303] Building C object CMakeFiles\SDL2-static.dir\src\sensor\dummy\SDL_dummysensor.c.obj
[113/303] Building C object CMakeFiles\SDL2-static.dir\src\video\dummy\SDL_nullvideo.c.obj
[114/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsframebuffer.c.obj
[115/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\wasapi\SDL_wasapi_win32.c.obj
[116/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\directsound\SDL_directsound.c.obj
[117/303] Building C object CMakeFiles\SDL2-static.dir\src\core\windows\SDL_windows.c.obj
[118/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsmodes.c.obj
[119/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\windows\SDL_systhread.c.obj
[120/303] Building C object CMakeFiles\SDL2-static.dir\src\audio\wasapi\SDL_wasapi.c.obj
[121/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\windows\SDL_sysmutex.c.obj
[122/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\generic\SDL_syscond.c.obj
[123/303] Building C object CMakeFiles\SDL2main.dir\src\main\windows\SDL_windows_main.c.obj
[124/303] Building C object CMakeFiles\SDL2-static.dir\src\haptic\windows\SDL_xinputhaptic.c.obj
[125/303] Linking C static library SDL2maind.lib
[126/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsclipboard.c.obj
[127/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsevents.c.obj
C:\Users\Mark\Documents\simh\cmake-ninja\sdl2-dep-prefix\src\sdl2-dep\src\video\windows\SDL_windowsevents.c(1166): warning C4996: 'GetVersion': was declared deprecated
C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\um\sysinfoapi.h(144): note: see declaration of 'GetVersion'
[128/303] Building C object CMakeFiles\SDL2-static.dir\src\power\windows\SDL_syspower.c.obj
[129/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\windows\SDL_syssem.c.obj
[130/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsvulkan.c.obj
[131/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsshape.c.obj
[132/303] Building C object CMakeFiles\SDL2-static.dir\src\thread\windows\SDL_systls.c.obj
[133/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\hidapi\SDL_hidapi_switch.c.obj
[134/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\hidapi\SDL_hidapi_xbox360.c.obj
[135/303] Building C object CMakeFiles\SDL2-static.dir\src\loadso\windows\SDL_sysloadso.c.obj
[136/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\windows\SDL_mmjoystick.c.obj
[137/303] Building C object CMakeFiles\SDL2-static.dir\src\timer\windows\SDL_systimer.c.obj
[138/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowswindow.c.obj
[139/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\hidapi\SDL_hidapi_xboxone.c.obj
[140/303] Building C object CMakeFiles\SDL2-static.dir\src\video\windows\SDL_windowsvideo.c.obj
[141/303] Building C object CMakeFiles\SDL2.dir\src\SDL_hints.c.obj
[142/303] Building C object CMakeFiles\SDL2-static.dir\src\filesystem\windows\SDL_sysfilesystem.c.obj
[143/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\hidapi\SDL_hidapijoystick.c.obj
[144/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\hidapi\SDL_hidapi_ps4.c.obj
[145/303] Building C object CMakeFiles\SDL2.dir\src\atomic\SDL_atomic.c.obj
[146/303] Building C object CMakeFiles\SDL2.dir\src\SDL_error.c.obj
[147/303] Building C object CMakeFiles\SDL2.dir\src\SDL_dataqueue.c.obj
[148/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\windows\SDL_dinputjoystick.c.obj
[149/303] Building C object CMakeFiles\SDL2.dir\src\SDL_log.c.obj
[150/303] Building C object CMakeFiles\SDL2.dir\src\SDL_assert.c.obj
[151/303] Building C object CMakeFiles\SDL2-static.dir\src\haptic\windows\SDL_dinputhaptic.c.obj
[152/303] Building C object CMakeFiles\SDL2-static.dir\src\haptic\windows\SDL_windowshaptic.c.obj
[153/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_audiodev.c.obj
[154/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\windows\SDL_xinputjoystick.c.obj
[155/303] Building C object CMakeFiles\SDL2.dir\src\SDL.c.obj
[156/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_mixer.c.obj
[157/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_audiotypecvt.c.obj
[158/303] Building C object CMakeFiles\SDL2-static.dir\src\hidapi\windows\hid.c.obj
[159/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_wave.c.obj
[160/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_audiocvt.c.obj
[161/303] Building C object CMakeFiles\SDL2.dir\src\atomic\SDL_spinlock.c.obj
[162/303] Building C object CMakeFiles\SDL2-static.dir\src\joystick\windows\SDL_windowsjoystick.c.obj
[163/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_atan2.c.obj
[164/303] Building C object CMakeFiles\SDL2.dir\src\cpuinfo\SDL_cpuinfo.c.obj
[165/303] Building C object CMakeFiles\SDL2.dir\src\audio\SDL_audio.c.obj
[166/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_quit.c.obj
[167/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_mouse.c.obj
[168/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_dropevents.c.obj
[169/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_displayevents.c.obj
[170/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_gesture.c.obj
[171/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_log10.c.obj
[172/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_touch.c.obj
[173/303] Building C object CMakeFiles\SDL2.dir\src\file\SDL_rwops.c.obj
[174/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_clipboardevents.c.obj
[175/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_log.c.obj
[176/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_exp.c.obj
[177/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_fmod.c.obj
[178/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_windowevents.c.obj
[179/303] Building C object CMakeFiles\SDL2.dir\src\render\opengles2\SDL_shaders_gles2.c.obj
[180/303] Building C object CMakeFiles\SDL2.dir\src\render\psp\SDL_render_psp.c.obj
[181/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_blendpoint.c.obj
[182/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_events.c.obj
[183/303] Building C object CMakeFiles\SDL2.dir\src\dynapi\SDL_dynapi.c.obj
[184/303] Building C object CMakeFiles\SDL2.dir\src\libm\k_cos.c.obj
[185/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_sqrt.c.obj
[186/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_blendline.c.obj
[187/303] Building C object CMakeFiles\SDL2.dir\src\libm\k_tan.c.obj
[188/303] Building C object CMakeFiles\SDL2.dir\src\events\SDL_keyboard.c.obj
[189/303] Building C object CMakeFiles\SDL2.dir\src\libm\k_sin.c.obj
[190/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_rem_pio2.c.obj
[191/303] Building C object CMakeFiles\SDL2.dir\src\libm\k_rem_pio2.c.obj
[192/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_drawline.c.obj
[193/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_blendfillrect.c.obj
[194/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_atan.c.obj
[195/303] Building C object CMakeFiles\SDL2.dir\src\libm\e_pow.c.obj
[196/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_cos.c.obj
[197/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_fabs.c.obj
[198/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_sin.c.obj
[199/303] Building C object CMakeFiles\SDL2.dir\src\render\opengles2\SDL_render_gles2.c.obj
[200/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_floor.c.obj
[201/303] Building C object CMakeFiles\SDL2.dir\src\render\SDL_d3dmath.c.obj
[202/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_copysign.c.obj
[203/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_scalbn.c.obj
[204/303] Building C object CMakeFiles\SDL2.dir\src\libm\s_tan.c.obj
[205/303] Building C object CMakeFiles\SDL2.dir\src\render\opengles\SDL_render_gles.c.obj
[206/303] Building C object CMakeFiles\SDL2.dir\src\render\SDL_yuv_sw.c.obj
[207/303] Building C object CMakeFiles\SDL2.dir\src\render\SDL_render.c.obj
[208/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_qsort.c.obj
[209/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_iconv.c.obj
[210/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_render_sw.c.obj
[211/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_drawpoint.c.obj
[212/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_string.c.obj
[213/303] Building C object CMakeFiles\SDL2.dir\src\render\opengl\SDL_shaders_gl.c.obj
[214/303] Building C object CMakeFiles\SDL2.dir\src\render\opengl\SDL_render_gl.c.obj
[215/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_getenv.c.obj
[216/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_0.c.obj
[217/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_malloc.c.obj
[218/303] Building C object CMakeFiles\SDL2.dir\src\stdlib\SDL_stdlib.c.obj
[219/303] Building C object CMakeFiles\SDL2.dir\src\render\direct3d\SDL_shaders_d3d.c.obj
[220/303] Building C object CMakeFiles\SDL2.dir\src\thread\SDL_thread.c.obj
[221/303] Building C object CMakeFiles\SDL2.dir\src\render\direct3d11\SDL_render_d3d11.c.obj
[222/303] Building C object CMakeFiles\SDL2.dir\src\render\software\SDL_rotate.c.obj
[223/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit.c.obj
[224/303] Building C object CMakeFiles\SDL2.dir\src\render\direct3d\SDL_render_d3d.c.obj
[225/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_RLEaccel.c.obj
[226/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_A.c.obj
[227/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_slow.c.obj
[228/303] Building C object CMakeFiles\SDL2.dir\src\render\direct3d11\SDL_shaders_d3d11.c.obj
[229/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_bmp.c.obj
[230/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_N.c.obj
[231/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_copy.c.obj
[232/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_auto.c.obj
[233/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_rect.c.obj
[234/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_fillrect.c.obj
[235/303] Building C object CMakeFiles\SDL2.dir\src\timer\SDL_timer.c.obj
[236/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_stretch.c.obj
[237/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_yuv.c.obj
[238/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_clipboard.c.obj
[239/303] Building C object CMakeFiles\SDL2.dir\src\power\SDL_power.c.obj
[240/303] Building C object CMakeFiles\SDL2.dir\src\video\yuv2rgb\yuv_rgb.c.obj
[241/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_vulkan_utils.c.obj
[242/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_blit_1.c.obj
[243/303] Building C object CMakeFiles\SDL2.dir\src\audio\disk\SDL_diskaudio.c.obj
[244/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_surface.c.obj
[245/303] Building C object CMakeFiles\SDL2.dir\src\audio\dummy\SDL_dummyaudio.c.obj
[246/303] Building C object CMakeFiles\SDL2.dir\src\haptic\SDL_haptic.c.obj
[247/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_egl.c.obj
[248/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_pixels.c.obj
[249/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_shape.c.obj
[250/303] Building C object CMakeFiles\SDL2.dir\src\joystick\SDL_gamecontroller.c.obj
[251/303] Building C object CMakeFiles\SDL2.dir\src\video\SDL_video.c.obj
[252/303] Building C object CMakeFiles\SDL2.dir\src\sensor\SDL_sensor.c.obj
[253/303] Building C object CMakeFiles\SDL2.dir\src\core\windows\SDL_xinput.c.obj
[254/303] Building C object CMakeFiles\SDL2.dir\src\audio\winmm\SDL_winmm.c.obj
[255/303] Building C object CMakeFiles\SDL2.dir\src\video\dummy\SDL_nullframebuffer.c.obj
[256/303] Building C object CMakeFiles\SDL2.dir\src\joystick\SDL_joystick.c.obj
[257/303] Building C object CMakeFiles\SDL2.dir\src\video\dummy\SDL_nullevents.c.obj
[258/303] Building C object CMakeFiles\SDL2.dir\src\core\windows\SDL_windows.c.obj
[259/303] Building C object CMakeFiles\SDL2.dir\src\video\dummy\SDL_nullvideo.c.obj
[260/303] Building C object CMakeFiles\SDL2.dir\src\audio\directsound\SDL_directsound.c.obj
[261/303] Building C object CMakeFiles\SDL2.dir\src\audio\wasapi\SDL_wasapi_win32.c.obj
[262/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsevents.c.obj
C:\Users\Mark\Documents\simh\cmake-ninja\sdl2-dep-prefix\src\sdl2-dep\src\video\windows\SDL_windowsevents.c(1166): warning C4996: 'GetVersion': was declared deprecated
C:\Program Files (x86)\Windows Kits\10\include\10.0.18362.0\um\sysinfoapi.h(144): note: see declaration of 'GetVersion'
[263/303] Building C object CMakeFiles\SDL2.dir\src\audio\wasapi\SDL_wasapi.c.obj
[264/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowskeyboard.c.obj
[265/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsmouse.c.obj
[266/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsmessagebox.c.obj
[267/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsclipboard.c.obj
[268/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsopengl.c.obj
[269/303] Building C object CMakeFiles\SDL2.dir\src\thread\windows\SDL_systls.c.obj
[270/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsopengles.c.obj
[271/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsframebuffer.c.obj
[272/303] Building C object CMakeFiles\SDL2.dir\src\thread\generic\SDL_syscond.c.obj
[273/303] Building C object CMakeFiles\SDL2.dir\src\thread\windows\SDL_sysmutex.c.obj
[274/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsmodes.c.obj
[275/303] Building C object CMakeFiles\SDL2.dir\src\thread\windows\SDL_syssem.c.obj
[276/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsvulkan.c.obj
[277/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsvideo.c.obj
[278/303] Building C object CMakeFiles\SDL2.dir\src\joystick\hidapi\SDL_hidapi_xbox360.c.obj
[279/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowsshape.c.obj
[280/303] Building C object CMakeFiles\SDL2.dir\src\joystick\hidapi\SDL_hidapi_xboxone.c.obj
[281/303] Building C object CMakeFiles\SDL2.dir\src\joystick\hidapi\SDL_hidapi_switch.c.obj
[282/303] Building C object CMakeFiles\SDL2.dir\src\power\windows\SDL_syspower.c.obj
[283/303] Building C object CMakeFiles\SDL2.dir\src\thread\windows\SDL_systhread.c.obj
[284/303] Building C object CMakeFiles\SDL2.dir\src\joystick\windows\SDL_mmjoystick.c.obj
[285/303] Building C object CMakeFiles\SDL2.dir\src\loadso\windows\SDL_sysloadso.c.obj
[286/303] Building C object CMakeFiles\SDL2.dir\src\sensor\dummy\SDL_dummysensor.c.obj
[287/303] Building C object CMakeFiles\SDL2.dir\src\timer\windows\SDL_systimer.c.obj
[288/303] Building C object CMakeFiles\SDL2.dir\src\video\windows\SDL_windowswindow.c.obj
[289/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL_hints.c.obj
[290/303] Building RC object CMakeFiles\SDL2.dir\src\main\windows\version.rc.res
Microsoft (R) Windows (R) Resource Compiler Version 10.0.10011.16384
Copyright (C) Microsoft Corporation.  All rights reserved.

[291/303] Building C object CMakeFiles\SDL2.dir\src\joystick\hidapi\SDL_hidapijoystick.c.obj
[292/303] Building C object CMakeFiles\SDL2.dir\src\filesystem\windows\SDL_sysfilesystem.c.obj
[293/303] Building C object CMakeFiles\SDL2.dir\src\joystick\windows\SDL_dinputjoystick.c.obj
[294/303] Building C object CMakeFiles\SDL2.dir\src\joystick\hidapi\SDL_hidapi_ps4.c.obj
[295/303] Building C object CMakeFiles\SDL2.dir\src\joystick\windows\SDL_windowsjoystick.c.obj
[296/303] Building C object CMakeFiles\SDL2.dir\src\joystick\windows\SDL_xinputjoystick.c.obj
[297/303] Building C object CMakeFiles\SDL2.dir\src\haptic\windows\SDL_windowshaptic.c.obj
[298/303] Building C object CMakeFiles\SDL2-static.dir\src\SDL.c.obj
[299/303] Building C object CMakeFiles\SDL2.dir\src\haptic\windows\SDL_dinputhaptic.c.obj
[300/303] Building C object CMakeFiles\SDL2.dir\src\haptic\windows\SDL_xinputhaptic.c.obj
[301/303] Building C object CMakeFiles\SDL2.dir\src\hidapi\windows\hid.c.obj
[302/303] Linking C static library SDL2-staticd.lib
[303/303] Linking C shared library SDL2d.dll
   Creating library SDL2d.lib and object SDL2d.exp
   Creating library SDL2d.lib and object SDL2d.exp
[12/64] Performing download step (git clone) for 'zlib-dep'
Cloning into 'zlib-dep'...
Note: switching to 'v1.2.11'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at cacf7f1 zlib 1.2.11
ninja: build stopped: subcommand failed.

C:\Users\Mark\Documents\simh\cmake-ninja>

sh barfs a couple of times, and then zlib doesn't build.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,11,https://github.com/simh/simh/pull/775#issuecomment-564391197,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Answers to a couple of questions...
add_simulator takes an option FULL64 that should set both 64-bit integers and pointers. If that's missing for a particular simulator, that's my bad. The INT64 option only sets 64-bit integers.
Not sure what's happening with your MinGW/MSYS environment. I've never seen that happen.
Current status: I'm working through a more complete set of build instructions. I can close this pull request and re-open when the build instructions are ready for redlining. Option (b) is for me to ping you via the pull request when README-cmake.md is more mature.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,12,https://github.com/simh/simh/pull/775#issuecomment-564396545,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I do not have a MingW/Msys environment.
Both of the non Visual Studio failures I'm seeing failures on are Ubuntu Linux of two different flavors:

Ubuntu 19.04 x64
and
Ubuntu running under WSL (Windows Subsystem for Linux).

Once something actually works for me, I'm 100% sure I will have significant other feedback.  Without anything that works can say much yet.  Keeping things here is fine.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,13,https://github.com/simh/simh/pull/775#issuecomment-564693727,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Git installs a version of MSYS. While it may not be part of your ""normal"" environment, Git relies on it. It's still weird to see this particular crash.
I haven't tried WSL; I tested a build on Ubuntu under Hyper-V (and travis)",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,14,https://github.com/simh/simh/pull/775#issuecomment-564701488,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.",@markpizz: Removed the PDP11 include paths from the pdp10-ka and pdp10-ki targets for hygiene. Both targets had 64-bit integers enabled.,True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,15,https://github.com/simh/simh/pull/775#issuecomment-564731074,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I'm glad that you got something to work on some Ubuntu environment.
Meanwhile, since you're proposing this new build process, you're the one who is responsible to get it to work for anyone who comes along and tries to use it.  So far, I've tried from 3 different directions and each one has failed.
Which users are likely to come along and have this work for them?",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,16,https://github.com/simh/simh/pull/775#issuecomment-564848655,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: I know I'm responsible for maintaining the CMake build environment, if I get your (eventual) buy-in. I'm a bit surprised that you're having an issue, since it's worked ""out of the box"" for me on a Windows environment (and I'm usually a FreeBSD- and Linux-based developer.)
One upside of CMake is that you might not need to maintain all of the VS solution files, should this prove to be successful enough. CMake will generate the VS solution files for 2019, 2017 (and possibly older versions.)
Another set of users might be the apt and rpm builders, since cmake does understand how to package software. I haven't enabled that yet, but it is a CMake feature.
PS> mkdir some-subdirectory
PS> cd some-subdirectory
## Configure the dependencies build
PS> cmake -G ""Visual Studio 16 2019"" -A Win32
## Build the deps
PS> cmake --build . --config Release
## Reconfigure to use the deps
PS> cmake -G ""Visual Studio 16 2019"" -A Win32
## Build the simulators
## Alternatively, there will be a simh.sln file in this directory you can open in VS 2019.
PS> cmake --build . --config Release

I can never remember the proper msbuild incantation. cmake remembers it for me.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,17,https://github.com/simh/simh/pull/775#issuecomment-564862083,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Let's explore and discuss extended ideas AFTER what you've got actually works ""out of the box"" for at least me!
The support model for this project is one where, when a reasonable user trys something, and reports details of the failure, we try to reproduce the details of the failure and then fix it or steer them in the right direction.  Answers like: ""I'm a bit surprised that you're having an issue..."" ""it works for me"" aren't particularly helpful.   If you need more info to reproduce and fix the failing case, you need to ask for details.
On Windows, my environment Windows 10 - 1909 using ""Git For Windows"" installed from https://git-scm.com/download/win.  The Git install enabled git from the command line but nothing else, thus git is added to the path.
I installed VS2019 and as part of that install, installed cmake.
Since cmake wasn't added to the default path, I invoked ""x64 Native Tools Command Prompt for VS 2019"" and got a command prompt.  From there I changed directory to my local simh clone of your repo contents and I entered the commands you spelled out in your quickstart instructions and the results I previously provided are what happened.
I did somewhat similar things on the two different Linux contexts that I tried (after installing cmake and ninja-build).
If you need more info to reproduce these problems then you get to specifically ask for it.  When users come to me with problems on a system that is new or somehow updated, I spin up a VM and install what they describe as their environment and reproduce the user's problem and either fix it or tell them where they've gone wrong.   If the problem has the potential to happen to someone else, I look to find a way to avoid it happening to someone else, or enhance the information that the build spits out so that they can solve it themselves.
Right now we're 3 strikes along with cmake and I'm not ready to call it out yet, but I'm getting close.
The ball is in your court!",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,18,https://github.com/simh/simh/pull/775#issuecomment-565127219,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: My focus is maturing README-cmake.md so that the process is easier to diagnose -- which means that I'm not taking issue with your approach or reports, nor am I discounting them. Maturing the instructions includes running it through from top to bottom to ensure that I haven't overlooked something obvious. Consequently, your reports are useful but not immediately actionable, because, as you rightly point out, the instructions need to be better.
BTW: Do you use a particular package manager on Windows, e.g., Scoop or Chocolatey? Or do you directly install software packages?",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,19,https://github.com/simh/simh/pull/775#issuecomment-565154850,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","BTW: Do you use a particular package manager on Windows, e.g., Scoop or Chocolatey? Or do you directly install software packages?

The simh required packages are designed the way they are due to the potential random locations that arbitrary build from source environments will produce and the strong desire to bound the Windows side dependencies to Visual Studio, optionally with git installed.  That is all the existing build procedures require.  This Visual Studio can be avoided for someone who wants to come from the MingW32 point of view.
I therefore have no other package managers installed or desired.
On the Linux environments I've tested this cmake approach from (with the failures reported previously), the OS provided apt facilities were used with gcc, cmake, ninja-build and git installed.
None of these work ""out of the box"".

Maturing the instructions includes running it through from top to bottom to ensure that I haven't overlooked something obvious.

Hopefully what you've got could be run from ""top to bottom"" within a script (possibly different script depending on OS) so a user merely has to perform a single step without having to perform a series of steps, but just one after the initial git clone.  Given ""top to bottom"" that works from within a script, the enhancements you're making to README-cmake.md would best be located with that script for someone that is interested in the individual steps, and README-cmake.md minimally describes the required pieces (Visual Studio, cmake, ninja-build, git).
Essentially none of the simh users want to struggle with tool chain issues.  They want to get access to the running simulator as quickly as possible so they can work with the world and operating systems of days gone by.

Consequently, your reports are useful but not immediately actionable, because, as you rightly point out, the instructions need to be better.

As I've already said, I will have much more feedback about what's here once I can see something actually work.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,20,https://github.com/simh/simh/pull/775#issuecomment-565521849,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Thanks for the WSL suggestion, gives me an interesting platform to debug.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,21,https://github.com/simh/simh/pull/775#issuecomment-565521982,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Thanks for the WSL suggestion, gives me an interesting platform to debug.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,22,https://github.com/simh/simh/pull/775#issuecomment-565527478,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Thanks for the WSL suggestion, gives me an interesting platform for debugging Linux issues without the overhead of Hyper-V.
Let's chat a bit more about package managers for Windows. I prefer [Scoop][https://scoop.sh] because everything installs locally under %USERPROFILE%\scoop and can be nuked in one shot (and you have to edit your PATH variable to remove references to %USERPROFILE%\scoop.) Others prefer Chocolatey. Still others, like you, prefer direct installs. I don't think it's a particular hardship to suggest that the target audience, developers, consider a package manager like Scoop or Chocolatey to install tools/utilities. Windows has always been a weird platform when it comes to library dependencies. (For sure, this won't help XP developers or Win95 developers, but I don't think they're the target demographic here.)",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/LegalizeAdulthood,23,https://github.com/simh/simh/pull/775#issuecomment-566234899,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I like this idea and proposed the idea on the mailing list but didn't get to an implementation; I know CMake pretty well, so if there's anything I can do to help out, feel free to ping me.  I have access to Windows and ubuntu environments.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,24,https://github.com/simh/simh/pull/775#issuecomment-566889683,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@LegalizeAdulthood: Check out the cmake-merge branch in my simh-cmake repo and bang on it. Where I'm stuck: Ubuntu 18 and detecting SDL_ttf reliably. Give me a bit to add you to my repo so you can commit directly. README-cmake.md is a work-in-progress, but has skeletal build instructions. Alternatively, there is the newly created cmake-builder.ps1 script for (ordinary) Powershell.
@markpizz: Added a Powershell script cmake-builder.ps1 to script builds. I'm testing out appveyor.yml to support both the maintained solution and cmake builds. If you want to bang on the script:
## Inside a plain Powershell, should _not_ need to use one of the VS Powershell scripts.
## It's how I test.
##
## The ""-help"" flag shows help. 
##
## Default is a VS 2019 Release build ""Batteries included"" (all simh options)
PS> .\cmake-builder
## VS 2015
PS> .\cmake-builder -flavor 2015 -clean
## MinGW-W64 build
PS> .\cmake-builder -flavor mingw -clean",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,25,https://github.com/simh/simh/pull/775#issuecomment-567238101,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I'm trying to use this 'much better/easier' way to build simh and I once again encounter at least 3 things:

On Windows, this doesn't work 'out of the box':

Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\Mark> cd .\Documents\bscottm
PS C:\Users\Mark\Documents\bscottm> git clone https://github.com/bscottm/simh-cmake.git simh
Cloning into 'simh'...
remote: Enumerating objects: 423, done.
remote: Counting objects: 100% (423/423), done.
remote: Compressing objects: 100% (296/296), done.
remote: Total 30674 (delta 221), reused 230 (delta 125), pack-reused 30251R
Receiving objects: 100% (30674/30674), 54.23 MiB | 14.74 MiB/s, done.
Resolving deltas: 100% (23884/23884), done.
PS C:\Users\Mark\Documents\bscottm> cd simh
PS C:\Users\Mark\Documents\bscottm\simh> git checkout cmake
Switched to a new branch 'cmake'
Branch 'cmake' set up to track remote branch 'cmake' from 'origin'.
PS C:\Users\Mark\Documents\bscottm\simh> .\cmake-builder
.\cmake-builder : File C:\Users\Mark\Documents\bscottm\simh\cmake-builder.ps1 cannot be loaded because running scripts
is disabled on this system. For more information, see about_Execution_Policies at
https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ .\cmake-builder
+ ~~~~~~~~~~~~~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException
    + FullyQualifiedErrorId : UnauthorizedAccess
PS C:\Users\Mark\Documents\bscottm\simh>

I then enable power schell script execution, and get this:
PS C:\Users\Mark\Documents\bscottm\simh> .\cmake-builder
-- Build directory: C:\Users\Mark\Documents\bscottm\simh\cmake-build


    Directory: C:\Users\Mark\Documents\bscottm\simh


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----       12/18/2019   9:45 AM                cmake-build
cmake : The term 'cmake' is not recognized as the name of a cmdlet, function, script file, or operable program. Check
the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\Mark\Documents\bscottm\simh\cmake-builder.ps1:95 char:1
+ cmake -G ""$cmakeGen"" $cmake_target_arch $topdir
+ ~~~~~
    + CategoryInfo          : ObjectNotFound: (cmake:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

cmake : The term 'cmake' is not recognized as the name of a cmdlet, function, script file, or operable program. Check
the spelling of the name, or if a path was included, verify that the path is correct and try again.
At C:\Users\Mark\Documents\bscottm\simh\cmake-builder.ps1:96 char:1
+ cmake --build . --config $cmake_config --target install
+ ~~~~~
    + CategoryInfo          : ObjectNotFound: (cmake:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException


I tried to follow your current ""quick start"" on WSL and got no where:

mark@RedWorker10:~$ mkdir bscottm
mark@RedWorker10:~$ cd bscottm
mark@RedWorker10:~/bscottm$ git clone https://github.com/bscottm/simh-cmake.git simh
Cloning into 'simh'...
remote: Enumerating objects: 423, done.
remote: Counting objects: 100% (423/423), done.
remote: Compressing objects: 100% (296/296), done.
remote: Total 30674 (delta 221), reused 230 (delta 125), pack-reused 30251
Receiving objects: 100% (30674/30674), 54.23 MiB | 13.64 MiB/s, done.
Resolving deltas: 100% (23884/23884), done.
Checking out files: 100% (1360/1360), done.
mark@RedWorker10:~/bscottm$ cd simh
mark@RedWorker10:~/bscottm/simh$ sudo apt install ninja-build
[sudo] password for mark:
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  ninja-build
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 93.3 kB of archives.
After this operation, 296 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 ninja-build amd64 1.8.2-1 [93.3 kB]
Fetched 93.3 kB in 1s (83.5 kB/s)
Selecting previously unselected package ninja-build.
(Reading database ... 44981 files and directories currently installed.)
Preparing to unpack .../ninja-build_1.8.2-1_amd64.deb ...
Unpacking ninja-build (1.8.2-1) ...
Setting up ninja-build (1.8.2-1) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
mark@RedWorker10:~/bscottm/simh$ git co cmake
git: 'co' is not a git command. See 'git --help'.

The most similar commands are
        commit
        clone
        log
mark@RedWorker10:~/bscottm/simh$ git checkout cmake
Checking out files: 100% (1209/1209), done.
Branch 'cmake' set up to track remote branch 'cmake' from 'origin'.
Switched to a new branch 'cmake'
mark@RedWorker10:~/bscottm/simh$ mkdir cmake-ninja
mark@RedWorker10:~/bscottm/simh$ cd cmake-ninja/
mark@RedWorker10:~/bscottm/simh/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
-- The C compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- SIMH_DEP_TOPDIR = /home/mark/bscottm/simh/cmake-ninja/build-stage
-- Creating build-stage directory hierarchy (include, lib, bin)
-- Performing Test HAVE_SSE
-- Performing Test HAVE_SSE - Success
-- Performing Test HAVE_SSE2
-- Performing Test HAVE_SSE2 - Success
-- Performing Test HAVE_SSE3
-- Performing Test HAVE_SSE3 - Success
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"")
-- Found PCRE: /usr/lib/x86_64-linux-gnu/libpcre.so
-- Found PNG: /usr/lib/x86_64-linux-gnu/libpng.so (found version ""1.6.34"")
-- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDE_DIRS)
-- Building Freetype from github repository.
-- Could NOT find SDL2_ttf (missing: SDL2_ttf_DIR)
-- Building SDL2_ttf from https://www.libsdl.org/release/SDL2_ttf-2.0.15.zip.
-- LIB_PATH_SUFFIXES lib64;lib/x64;lib/amd64;lib/x86_64-linux-gnu;lib
-- PCAP_LIBRARY is /usr/lib/x86_64-linux-gnu/libpcap.so
-- PACKET_LIBRARY is
-- Found PCAP: /usr/lib/x86_64-linux-gnu/libpcap.so
--
-- Libraries and features:
--   Thread support .................. Linux builtin pthreads
--   zlib ............................ installed ZLIB
--   Perl-Compatible RegExps.......... installed pcre
--   PNG, Freetype, SDL2, SDL2_ttf ... installed PNG, Freetype source build, installed SDL2, SDL2_ttf source build
--   Packet Capture (PCAP) ........... installed PCAP
--
-- Build options:
--   Video/graphics support ....... TRUE
--   Networking ................... ON
--   Asynchronous I/O ............. ON
--   Build internal ROMS .......... Yes
--   'cppcheck' ................... 'cppcheck' not installed.
--
--
-- The following dependencies need to be built:
--
--   freetype;SDL2_ttf
--
-- Execute 'cmake --build . --config <Release|Debug|...>'
--
-- Reconfigure CMake after the build is complete and successful (no errors)
--
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja
mark@RedWorker10:~/bscottm/simh/cmake-ninja$ cmake --build . --config Release
[2/16] Performing download step (git clone) for 'freetype-dep'
Cloning into 'freetype-dep'...
warning: redirecting to https://git.savannah.nongnu.org/r/freetype/freetype2.git/
Note: checking out 'VER-2-10-1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 8cf046c38 * Version 2.10.1 released. ==========================
[5/16] Performing configure step for 'freetype-dep'
-- The C compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version ""0.29.1"")
-- Could NOT find harfbuzz (missing: HARFBUZZ_INCLUDE_DIRS HARFBUZZ_LIBRARIES)
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"")
-- Found PNG: /usr/lib/x86_64-linux-gnu/libpng.so (found version ""1.6.34"")
-- Could NOT find BZip2 (missing: BZIP2_LIBRARIES BZIP2_INCLUDE_DIR)
-- Looking for unistd.h
-- Looking for unistd.h - found
-- Looking for fcntl.h
-- Looking for fcntl.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/freetype-dep-prefix/src/freetype-dep-build
[6/16] Performing build step for 'freetype-dep'
[...]
[40/41] Building C object CMakeFiles/freetype.dir/src/truetype/truetype.c.o
[41/41] Linking C static library libfreetype.a
[7/16] Performing install step for 'freetype-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2
[...]
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config-noconfig.cmake
[10/16] Performing download step (download, verify and extract) for 'sdl2-ttf-dep'
-- Downloading...
   dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/SDL2_ttf-2.0.15.zip'
   timeout='none'
-- Using src='https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.15.zip'
-- [download 0% complete]
[...]
-- [download 100% complete]
-- Downloading... done
-- extracting...
     src='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/SDL2_ttf-2.0.15.zip'
     dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep'
-- extracting... [tar xfz]
-- extracting... [analysis]
-- extracting... [rename]
-- extracting... [clean up]
-- extracting... done
[13/16] Performing configure step for 'sdl2-ttf-dep'
FAILED: sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-stamp/sdl2-ttf-dep-configure
cd /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-build && /usr/bin/cmake -DCMAKE_INSTALL_PREFIX=/home/mark/bscottm/simh/cmake-ninja/build-stage -GNinja /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep && /usr/bin/cmake -E touch /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-stamp/sdl2-ttf-dep-configure
-- The C compiler identification is GNU 7.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found Freetype: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libfreetype.a (found version ""2.10.1"")
-- Configuring done
CMake Error at CMakeLists.txt:24 (add_library):
  Target ""SDL2_ttf"" links to target ""SDL2::SDL2"" but the target was not
  found.  Perhaps a find_package() call is missing for an IMPORTED target, or
  an ALIAS target is missing?


-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-build
ninja: build stopped: subcommand failed.
mark@RedWorker10:~/bscottm/simh/cmake-ninja$


I tried to follow your 'quick start' on a Ubuntu 19.04 VM.

mark@Ubuntu-19:~/bscottm$ git clone https://github.com/bscottm/simh-cmake.git simh
Cloning into 'simh'...
remote: Enumerating objects: 423, done.
remote: Counting objects: 100% (423/423), done.
remote: Compressing objects: 100% (296/296), done.
remote: Total 30674 (delta 221), reused 230 (delta 125), pack-reused 30251
Receiving objects: 100% (30674/30674), 54.23 MiB | 17.47 MiB/s, done.
Resolving deltas: 100% (23884/23884), done.
mark@Ubuntu-19:~/bscottm$ cd simh
mark@Ubuntu-19:~/bscottm/simh$ git co cmake
git: 'co' is not a git command. See 'git --help'.

The most similar commands are
	commit
	clone
	log
mark@Ubuntu-19:~/bscottm/simh$ git checkout cmake
Branch 'cmake' set up to track remote branch 'cmake' from 'origin'.
Switched to a new branch 'cmake'
mark@Ubuntu-19:~/bscottm/simh$ mkdir cmake-ninja
mark@Ubuntu-19:~/bscottm/simh$ cd cmake-ninja
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
-- The C compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- SIMH_DEP_TOPDIR = /home/mark/bscottm/simh/cmake-ninja/build-stage
-- Creating build-stage directory hierarchy (include, lib, bin)
-- Performing Test HAVE_SSE
-- Performing Test HAVE_SSE - Success
-- Performing Test HAVE_SSE2
-- Performing Test HAVE_SSE2 - Success
-- Performing Test HAVE_SSE3
-- Performing Test HAVE_SSE3 - Success
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") 
-- Found PCRE: /usr/lib/x86_64-linux-gnu/libpcre.so  
-- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR) 
-- Building PNG from https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/libpng-1.6.37.tar.xz/download
-- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDE_DIRS) 
-- Building Freetype from github repository.
-- Could NOT find SDL2 (missing: SDL2_DIR)
-- Could NOT find SDL2_ttf (missing: SDL2_ttf_DIR)
-- Building SDL2 from https://www.libsdl.org/release/SDL2-2.0.10.zip.
-- Building SDL2_ttf from https://www.libsdl.org/release/SDL2_ttf-2.0.15.zip.
-- LIB_PATH_SUFFIXES lib64;lib/x64;lib/amd64;lib/x86_64-linux-gnu;lib
-- PCAP_LIBRARY is /usr/lib/x86_64-linux-gnu/libpcap.so
-- PACKET_LIBRARY is 
-- Found PCAP: /usr/lib/x86_64-linux-gnu/libpcap.so  
-- 
-- Libraries and features:
--   Thread support .................. Linux builtin pthreads
--   zlib ............................ installed ZLIB
--   Perl-Compatible RegExps.......... installed pcre
--   PNG, Freetype, SDL2, SDL2_ttf ... PNG source build, Freetype source build, SDL2 source build, SDL2_ttf source build
--   Packet Capture (PCAP) ........... installed PCAP
-- 
-- Build options:
--   Video/graphics support ....... TRUE
--   Networking ................... ON
--   Asynchronous I/O ............. ON
--   Build internal ROMS .......... Yes
--   'cppcheck' ................... 'cppcheck' not installed.
-- 
-- 
-- The following dependencies need to be built:
-- 
--   png;freetype;SDL2;SDL2_ttf
-- 
-- Execute 'cmake --build . --config <Release|Debug|...>'
-- 
-- Reconfigure CMake after the build is complete and successful (no errors)
-- 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ cmake --build . --config Release
[3/32] Performing download step (download, verify and extract) for 'sdl2-dep'
-- Downloading...
   dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-dep-prefix/src/SDL2-2.0.10.zip'
   timeout='none'
-- Using src='https://www.libsdl.org/release/SDL2-2.0.10.zip'
-- [download 0% complete]
[..]
-- [download 100% complete]
-- Downloading... done
-- extracting...
     src='/home/mark/bscottm/simh/cmake-ninja/sdl2-dep-prefix/src/SDL2-2.0.10.zip'
     dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep'
-- extracting... [tar xfz]
-- extracting... [analysis]
-- extracting... [rename]
-- extracting... [clean up]
-- extracting... done
[6/32] Performing download step (download, verify and extract) for 'png-dep'
-- Downloading...
   dst='/home/mark/bscottm/simh/cmake-ninja/png-dep-prefix/src/libpng-1.6.37.tar.xz'
   timeout='none'
-- Using src='https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/libpng-1.6.37.tar.xz/download'
-- [download 100% complete]
-- [download 2% complete]
[..]
-- [download 100% complete]
-- Downloading... done
-- extracting...
     src='/home/mark/bscottm/simh/cmake-ninja/png-dep-prefix/src/libpng-1.6.37.tar.xz'
     dst='/home/mark/bscottm/simh/cmake-ninja/png-dep-prefix/src/png-dep'
-- extracting... [tar xfz]
-- extracting... [analysis]
-- extracting... [rename]
-- extracting... [clean up]
-- extracting... done
[9/32] Performing configure step for 'png-dep'
-- The C compiler identification is GNU 8.3.0
-- The ASM compiler identification is GNU
-- Found assembler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") 
-- Performing Test HAVE_LD_VERSION_SCRIPT
-- Performing Test HAVE_LD_VERSION_SCRIPT - Success
-- Symbol prefix: 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/png-dep-prefix/src/png-dep-build
[10/32] Performing build step for 'png-dep'
[1/64] Generating pngprefix.h
[2/64] Generating pnglibconf.c
[3/64] Building C object CMakeFiles/png-fix-itxt.dir/contrib/tools/png-fix-itxt.c.o
[4/64] Generating scripts/pnglibconf.c
[5/64] Generating scripts/symbols.out
[6/64] Generating pnglibconf.out
[7/64] Linking C executable png-fix-itxt
[8/64] Generating scripts/symbols.chk
[9/64] Generating pnglibconf.h
[10/64] Generating scripts/prefix.out
[11/64] Generating scripts/sym.out
[12/64] Generating scripts/vers.out
[13/64] Generating scripts/intprefix.out
[14/64] Generating libpng.sym
[15/64] Generating libpng.vers
[16/64] Building C object CMakeFiles/pngimage.dir/contrib/libtests/pngimage.c.o
[17/64] Building C object CMakeFiles/png.dir/pngerror.c.o
[18/64] Building C object CMakeFiles/png.dir/pngget.c.o
[19/64] Building C object CMakeFiles/png.dir/pngmem.c.o
[20/64] Building C object CMakeFiles/png.dir/png.c.o
[21/64] Building C object CMakeFiles/pngfix.dir/contrib/tools/pngfix.c.o
[22/64] Building C object CMakeFiles/png.dir/pngrio.c.o
[23/64] Building C object CMakeFiles/png.dir/pngpread.c.o
[24/64] Building C object CMakeFiles/png.dir/pngread.c.o
[25/64] Building C object CMakeFiles/png.dir/pngwio.c.o
[26/64] Building C object CMakeFiles/png.dir/pngrtran.c.o
[27/64] Building C object CMakeFiles/png.dir/pngtrans.c.o
[28/64] Building C object CMakeFiles/png.dir/pngset.c.o
[29/64] Building C object CMakeFiles/png.dir/pngrutil.c.o
[30/64] Building C object CMakeFiles/png.dir/intel/intel_init.c.o
[31/64] Building C object CMakeFiles/png.dir/pngwrite.c.o
[32/64] Building C object CMakeFiles/png.dir/pngwtran.c.o
[33/64] Building C object CMakeFiles/png.dir/pngwutil.c.o
[34/64] Building C object CMakeFiles/png_static.dir/pngerror.c.o
[35/64] Building C object CMakeFiles/png.dir/intel/filter_sse2_intrinsics.c.o
[36/64] Building C object CMakeFiles/png_static.dir/pngmem.c.o
[37/64] Building C object CMakeFiles/png_static.dir/pngget.c.o
[38/64] Building C object CMakeFiles/png_static.dir/png.c.o
[39/64] Building C object CMakeFiles/png_static.dir/pngpread.c.o
[40/64] Linking C shared library libpng16.so.16.37.0
[41/64] Building C object CMakeFiles/png_static.dir/pngrio.c.o
[42/64] Creating library symlink libpng16.so.16 libpng16.so
[43/64] Building C object CMakeFiles/png_static.dir/pngread.c.o
[44/64] Linking C executable pngfix
[45/64] Building C object CMakeFiles/pngvalid.dir/contrib/libtests/pngvalid.c.o
In file included from /usr/include/signal.h:25,
                 from /home/mark/bscottm/simh/cmake-ninja/png-dep-prefix/src/png-dep/contrib/libtests/pngvalid.c:26:
/usr/include/features.h:185:3: warning: #warning ""_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE"" [-Wcpp]
 # warning ""_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE""
   ^~~~~~~
[46/64] Building C object CMakeFiles/png_static.dir/pngset.c.o
[47/64] Linking C executable pngimage
[48/64] Building C object CMakeFiles/png_static.dir/pngrtran.c.o
[49/64] Linking C executable pngvalid
[50/64] Building C object CMakeFiles/png_static.dir/pngwio.c.o
[51/64] Building C object CMakeFiles/png_static.dir/pngtrans.c.o
[52/64] Building C object CMakeFiles/png_static.dir/pngrutil.c.o
[53/64] Building C object CMakeFiles/png_static.dir/pngwtran.c.o
[54/64] Building C object CMakeFiles/png_static.dir/intel/intel_init.c.o
[55/64] Building C object CMakeFiles/png_static.dir/pngwrite.c.o
[56/64] Building C object CMakeFiles/pngtest.dir/pngtest.c.o
[57/64] Building C object CMakeFiles/png_static.dir/pngwutil.c.o
[58/64] Linking C executable pngtest
[59/64] Building C object CMakeFiles/png_static.dir/intel/filter_sse2_intrinsics.c.o
[60/64] Building C object CMakeFiles/pngunknown.dir/contrib/libtests/pngunknown.c.o
[61/64] Linking C static library libpng16.a
[62/64] Linking C executable pngunknown
[63/64] Building C object CMakeFiles/pngstest.dir/contrib/libtests/pngstest.c.o
[64/64] Linking C executable pngstest
[11/32] Performing install step for 'png-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng16.so.16.37.0
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng16.so.16
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng16.so
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng16.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng.so
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/png.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/pngconf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/pnglibconf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/libpng16/png.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/libpng16/pngconf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/libpng16/pnglibconf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/libpng-config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/libpng16-config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/pngfix
-- Set runtime path of ""/home/mark/bscottm/simh/cmake-ninja/build-stage/bin/pngfix"" to """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/png-fix-itxt
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/share/man/man3/libpng.3
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/share/man/man3/libpngpf.3
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/share/man/man5/png.5
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/libpng.pc
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/libpng-config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/libpng16.pc
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/libpng16-config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng/libpng16.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng/libpng16-noconfig.cmake
[14/32] Performing configure step for 'sdl2-dep'
-- The C compiler identification is GNU 8.3.0
-- The CXX compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version ""0.29.1"") 
-- Performing Test HAVE_GCC_WALL
-- Performing Test HAVE_GCC_WALL - Success
-- Performing Test HAVE_GCC_NO_STRICT_ALIASING
-- Performing Test HAVE_GCC_NO_STRICT_ALIASING - Success
-- Performing Test HAVE_GCC_WDECLARATION_AFTER_STATEMENT
-- Performing Test HAVE_GCC_WDECLARATION_AFTER_STATEMENT - Success
-- Performing Test HAVE_GCC_WERROR_DECLARATION_AFTER_STATEMENT
-- Performing Test HAVE_GCC_WERROR_DECLARATION_AFTER_STATEMENT - Success
-- Performing Test HAVE_GCC_ATOMICS
-- Performing Test HAVE_GCC_ATOMICS - Success
-- Performing Test HAVE_GCC_PREFERRED_STACK_BOUNDARY
-- Performing Test HAVE_GCC_PREFERRED_STACK_BOUNDARY - Failed
-- Performing Test HAVE_GCC_FVISIBILITY
-- Performing Test HAVE_GCC_FVISIBILITY - Success
-- Performing Test HAVE_GCC_WSHADOW
-- Performing Test HAVE_GCC_WSHADOW - Success
-- Performing Test HAVE_NO_UNDEFINED
-- Performing Test HAVE_NO_UNDEFINED - Success
-- Performing Test HAVE_MMX
-- Performing Test HAVE_MMX - Success
-- Performing Test HAVE_3DNOW
-- Performing Test HAVE_3DNOW - Success
-- Performing Test HAVE_SSE
-- Performing Test HAVE_SSE - Success
-- Performing Test HAVE_SSE2
-- Performing Test HAVE_SSE2 - Success
-- Performing Test HAVE_SSE3
-- Performing Test HAVE_SSE3 - Success
-- Looking for immintrin.h
-- Looking for immintrin.h - found
-- Performing Test HAVE_ALTIVEC_H_HDR
-- Performing Test HAVE_ALTIVEC_H_HDR - Failed
-- Performing Test HAVE_ALTIVEC
-- Performing Test HAVE_ALTIVEC - Failed
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdio.h
-- Looking for stdio.h - found
-- Looking for stdlib.h
-- Looking for stdlib.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Looking for stdarg.h
-- Looking for stdarg.h - found
-- Looking for malloc.h
-- Looking for malloc.h - found
-- Looking for memory.h
-- Looking for memory.h - found
-- Looking for string.h
-- Looking for string.h - found
-- Looking for limits.h
-- Looking for limits.h - found
-- Looking for strings.h
-- Looking for strings.h - found
-- Looking for wchar.h
-- Looking for wchar.h - found
-- Looking for inttypes.h
-- Looking for inttypes.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for ctype.h
-- Looking for ctype.h - found
-- Looking for math.h
-- Looking for math.h - found
-- Looking for iconv.h
-- Looking for iconv.h - found
-- Looking for signal.h
-- Looking for signal.h - found
-- Looking for libunwind.h
-- Looking for libunwind.h - not found
-- Looking for 8 include files dlfcn.h, ..., float.h
-- Looking for 8 include files dlfcn.h, ..., float.h - found
-- Check size of size_t
-- Check size of size_t - done
-- Looking for M_PI
-- Looking for M_PI - found
-- Performing Test HAVE_MPROTECT
-- Performing Test HAVE_MPROTECT - Success
-- Looking for strtod
-- Looking for strtod - found
-- Looking for malloc
-- Looking for malloc - found
-- Looking for calloc
-- Looking for calloc - found
-- Looking for realloc
-- Looking for realloc - found
-- Looking for free
-- Looking for free - found
-- Looking for getenv
-- Looking for getenv - found
-- Looking for setenv
-- Looking for setenv - found
-- Looking for putenv
-- Looking for putenv - found
-- Looking for unsetenv
-- Looking for unsetenv - found
-- Looking for qsort
-- Looking for qsort - found
-- Looking for abs
-- Looking for abs - found
-- Looking for bcopy
-- Looking for bcopy - found
-- Looking for memset
-- Looking for memset - found
-- Looking for memcpy
-- Looking for memcpy - found
-- Looking for memmove
-- Looking for memmove - found
-- Looking for memcmp
-- Looking for memcmp - found
-- Looking for strlen
-- Looking for strlen - found
-- Looking for strlcpy
-- Looking for strlcpy - not found
-- Looking for strlcat
-- Looking for strlcat - not found
-- Looking for _strrev
-- Looking for _strrev - not found
-- Looking for _strupr
-- Looking for _strupr - not found
-- Looking for _strlwr
-- Looking for _strlwr - not found
-- Looking for strchr
-- Looking for strchr - found
-- Looking for strrchr
-- Looking for strrchr - found
-- Looking for strstr
-- Looking for strstr - found
-- Looking for itoa
-- Looking for itoa - not found
-- Looking for _ltoa
-- Looking for _ltoa - not found
-- Looking for _uitoa
-- Looking for _uitoa - not found
-- Looking for _ultoa
-- Looking for _ultoa - not found
-- Looking for strtol
-- Looking for strtol - found
-- Looking for strtoul
-- Looking for strtoul - found
-- Looking for _i64toa
-- Looking for _i64toa - not found
-- Looking for _ui64toa
-- Looking for _ui64toa - not found
-- Looking for strtoll
-- Looking for strtoll - found
-- Looking for strtoull
-- Looking for strtoull - found
-- Looking for atoi
-- Looking for atoi - found
-- Looking for atof
-- Looking for atof - found
-- Looking for strcmp
-- Looking for strcmp - found
-- Looking for strncmp
-- Looking for strncmp - found
-- Looking for _stricmp
-- Looking for _stricmp - not found
-- Looking for strcasecmp
-- Looking for strcasecmp - found
-- Looking for _strnicmp
-- Looking for _strnicmp - not found
-- Looking for strncasecmp
-- Looking for strncasecmp - found
-- Looking for vsscanf
-- Looking for vsscanf - found
-- Looking for vsnprintf
-- Looking for vsnprintf - found
-- Looking for fopen64
-- Looking for fopen64 - found
-- Looking for fseeko
-- Looking for fseeko - found
-- Looking for fseeko64
-- Looking for fseeko64 - found
-- Looking for sigaction
-- Looking for sigaction - found
-- Looking for setjmp
-- Looking for setjmp - found
-- Looking for nanosleep
-- Looking for nanosleep - found
-- Looking for sysconf
-- Looking for sysconf - found
-- Looking for sysctlbyname
-- Looking for sysctlbyname - not found
-- Looking for getauxval
-- Looking for getauxval - found
-- Looking for poll
-- Looking for poll - found
-- Looking for _Exit
-- Looking for _Exit - found
-- Looking for pow in m
-- Looking for pow in m - found
-- Looking for atan
-- Looking for atan - found
-- Looking for atan2
-- Looking for atan2 - found
-- Looking for ceil
-- Looking for ceil - found
-- Looking for copysign
-- Looking for copysign - found
-- Looking for cos
-- Looking for cos - found
-- Looking for cosf
-- Looking for cosf - found
-- Looking for fabs
-- Looking for fabs - found
-- Looking for floor
-- Looking for floor - found
-- Looking for log
-- Looking for log - found
-- Looking for pow
-- Looking for pow - found
-- Looking for scalbn
-- Looking for scalbn - found
-- Looking for sin
-- Looking for sin - found
-- Looking for sinf
-- Looking for sinf - found
-- Looking for sqrt
-- Looking for sqrt - found
-- Looking for sqrtf
-- Looking for sqrtf - found
-- Looking for tan
-- Looking for tan - found
-- Looking for tanf
-- Looking for tanf - found
-- Looking for acos
-- Looking for acos - found
-- Looking for asin
-- Looking for asin - found
-- Looking for iconv_open in iconv
-- Looking for iconv_open in iconv - not found
-- Looking for alloca.h
-- Looking for alloca.h - found
-- Looking for alloca
-- Looking for alloca - not found
-- Performing Test HAVE_SA_SIGACTION
-- Performing Test HAVE_SA_SIGACTION - Success
-- Looking for dlopen
-- Looking for dlopen - not found
-- Looking for dlopen in dl
-- Looking for dlopen in dl - found
-- Performing Test OSS_FOUND
-- Performing Test OSS_FOUND - Success
-- Looking for alsa/asoundlib.h
-- Looking for alsa/asoundlib.h - found
-- Looking for snd_pcm_recover in asound
-- Looking for snd_pcm_recover in asound - found
-- dynamic libasound -> libasound.so.2
-- Checking for module 'jack'
--   No package 'jack' found
-- Checking for module 'libpulse-simple'
--   Found libpulse-simple, version 12.2
-- dynamic libpulse-simple -> libpulse-simple.so.0
-- Checking for module 'esound'
--   No package 'esound' found
-- Looking for audio/audiolib.h
-- Looking for audio/audiolib.h - not found
-- Looking for sndio.h
-- Looking for sndio.h - found
-- Looking for samplerate.h
-- Looking for samplerate.h - not found
-- Checking for modules 'bcm_host;brcmegl'
--   No package 'bcm_host' found
--   No package 'brcmegl' found
-- Performing Test HAVE_VIDEO_RPI
-- Performing Test HAVE_VIDEO_RPI - Failed
-- dynamic libX11 -> libX11.so.6
-- dynamic libXext -> libXext.so.6
-- dynamic libXcursor -> libXcursor.so.1
-- dynamic libXinerama -> libXinerama.so.1
-- dynamic libXi -> libXi.so.6
-- dynamic libXrandr -> libXrandr.so.2
-- dynamic libXrender -> libXrender.so.1
-- dynamic libXss -> libXss.so.1
-- dynamic libXxf86vm -> libXxf86vm.so.1
-- Looking for X11/Xcursor/Xcursor.h
-- Looking for X11/Xcursor/Xcursor.h - found
-- Looking for X11/extensions/Xinerama.h
-- Looking for X11/extensions/Xinerama.h - found
-- Looking for X11/extensions/XInput2.h
-- Looking for X11/extensions/XInput2.h - found
-- Looking for X11/extensions/Xrandr.h
-- Looking for X11/extensions/Xrandr.h - found
-- Looking for X11/extensions/Xrender.h
-- Looking for X11/extensions/Xrender.h - found
-- Looking for X11/extensions/scrnsaver.h
-- Looking for X11/extensions/scrnsaver.h - found
-- Looking for X11/extensions/shape.h
-- Looking for X11/extensions/shape.h - found
-- Looking for include files X11/Xlib.h, X11/extensions/xf86vmode.h
-- Looking for include files X11/Xlib.h, X11/extensions/xf86vmode.h - found
-- Looking for 3 include files X11/Xlib.h, ..., X11/extensions/Xext.h
-- Looking for 3 include files X11/Xlib.h, ..., X11/extensions/Xext.h - found
-- Looking for shmat
-- Looking for shmat - found
-- Performing Test HAVE_CONST_XEXT_ADDDISPLAY
-- Performing Test HAVE_CONST_XEXT_ADDDISPLAY - Success
-- Performing Test HAVE_XGENERICEVENT
-- Performing Test HAVE_XGENERICEVENT - Success
-- Looking for XkbKeycodeToKeysym
-- Looking for XkbKeycodeToKeysym - found
-- Performing Test HAVE_XINPUT2_MULTITOUCH
-- Performing Test HAVE_XINPUT2_MULTITOUCH - Success
-- Performing Test HAVE_VIDEO_OPENGL
-- Performing Test HAVE_VIDEO_OPENGL - Success
-- Performing Test HAVE_VIDEO_OPENGL_EGL
-- Performing Test HAVE_VIDEO_OPENGL_EGL - Success
-- Performing Test HAVE_VIDEO_OPENGLES_V1
-- Performing Test HAVE_VIDEO_OPENGLES_V1 - Failed
-- Performing Test HAVE_VIDEO_OPENGLES_V2
-- Performing Test HAVE_VIDEO_OPENGLES_V2 - Success
-- Checking for modules 'wayland-client;wayland-scanner;wayland-protocols;wayland-egl;wayland-cursor;egl;xkbcommon'
--   No package 'wayland-protocols' found
-- Performing Test HAVE_VIDEO_VIVANTE_VDK
-- Performing Test HAVE_VIDEO_VIVANTE_VDK - Failed
-- Performing Test HAVE_VIDEO_VIVANTE_EGL_FB
-- Performing Test HAVE_VIDEO_VIVANTE_EGL_FB - Failed
-- Checking for modules 'libdrm;gbm;egl'
--   No package 'gbm' found
-- Performing Test HAVE_INPUT_EVENTS
-- Performing Test HAVE_INPUT_EVENTS - Success
-- Performing Test HAVE_INPUT_KD
-- Performing Test HAVE_INPUT_KD - Success
-- Looking for libudev.h
-- Looking for libudev.h - found
-- Checking for one of the modules 'dbus-1;dbus'
-- Checking for one of the modules 'ibus-1.0;ibus'
-- Looking for fcitx/frontend.h
-- Looking for fcitx/frontend.h - not found
-- Performing Test HAVE_INPUT_TSLIB
-- Performing Test HAVE_INPUT_TSLIB - Failed
-- Looking for hid_init in usbhid
-- Looking for hid_init in usbhid - not found
-- Looking for usb.h
-- Looking for usb.h - not found
-- Looking for libusb.h
-- Looking for libusb.h - not found
-- Looking for hid_init in usb
-- Looking for hid_init in usb - not found
-- Performing Test HAVE_USBHID
-- Performing Test HAVE_USBHID - Failed
-- Performing Test HAVE_PTHREADS
-- Performing Test HAVE_PTHREADS - Success
-- Performing Test HAVE_RECURSIVE_MUTEXES
-- Performing Test HAVE_RECURSIVE_MUTEXES - Success
-- Performing Test HAVE_PTHREADS_SEM
-- Performing Test HAVE_PTHREADS_SEM - Success
-- Performing Test HAVE_SEM_TIMEDWAIT
-- Performing Test HAVE_SEM_TIMEDWAIT - Success
-- Performing Test HAVE_PTHREAD_NP_H
-- Performing Test HAVE_PTHREAD_NP_H - Failed
-- Looking for pthread_setname_np
-- Looking for pthread_setname_np - found
-- Looking for pthread_set_name_np
-- Looking for pthread_set_name_np - not found
-- Looking for linux/version.h
-- Looking for linux/version.h - found
-- Performing Test HAVE_ENABLE_NEW_DTAGS
-- Performing Test HAVE_ENABLE_NEW_DTAGS - Success
-- 
-- SDL2 was configured with the following options:
-- 
-- Platform: Linux-5.0.0-37-generic
-- 64-bit:   TRUE
-- Compiler: /usr/bin/cc
-- 
-- Subsystems:
--   Atomic:	ON
--   Audio:	ON
--   Video:	ON
--   Render:	ON
--   Events:	ON
--   Joystick:	ON
--   Haptic:	ON
--   Power:	ON
--   Threads:	ON
--   Timers:	ON
--   File:	ON
--   Loadso:	ON
--   CPUinfo:	ON
--   Filesystem:	ON
--   Dlopen:	ON
--   Sensor:	ON
-- 
-- Options:
--   3DNOW                  (Wanted: ON): ON
--   ALSA                   (Wanted: ON): ON
--   ALSA_SHARED            (Wanted: ON): ON
--   ALTIVEC                (Wanted: ON): OFF
--   ARTS                   (Wanted: ON): OFF
--   ARTS_SHARED            (Wanted: ON): OFF
--   ASSEMBLY               (Wanted: ON): ON
--   ASSERTIONS             (Wanted: auto): auto
--   BACKGROUNDING_SIGNAL   (Wanted: OFF): OFF
--   CLOCK_GETTIME          (Wanted: OFF): OFF
--   DIRECTFB_SHARED        (Wanted: OFF): OFF
--   DIRECTX                (Wanted: OFF): OFF
--   DISKAUDIO              (Wanted: ON): ON
--   DUMMYAUDIO             (Wanted: ON): ON
--   ESD                    (Wanted: ON): OFF
--   ESD_SHARED             (Wanted: ON): OFF
--   FOREGROUNDING_SIGNAL   (Wanted: OFF): OFF
--   FUSIONSOUND            (Wanted: OFF): OFF
--   FUSIONSOUND_SHARED     (Wanted: OFF): OFF
--   GCC_ATOMICS            (Wanted: ON): ON
--   HIDAPI                 (Wanted: OFF): OFF
--   INPUT_TSLIB            (Wanted: ON): OFF
--   JACK                   (Wanted: ON): OFF
--   JACK_SHARED            (Wanted: ON): OFF
--   KMSDRM_SHARED          (Wanted: ON): OFF
--   LIBC                   (Wanted: ON): ON
--   LIBSAMPLERATE          (Wanted: ON): OFF
--   LIBSAMPLERATE_SHARED   (Wanted: ON): OFF
--   MMX                    (Wanted: ON): ON
--   NAS                    (Wanted: ON): OFF
--   NAS_SHARED             (Wanted: ON): OFF
--   OSS                    (Wanted: ON): ON
--   PTHREADS               (Wanted: ON): ON
--   PTHREADS_SEM           (Wanted: ON): ON
--   PULSEAUDIO             (Wanted: ON): ON
--   PULSEAUDIO_SHARED      (Wanted: ON): ON
--   RENDER_D3D             (Wanted: OFF): OFF
--   RPATH                  (Wanted: ON): ON
--   SDL_DLOPEN             (Wanted: ON): ON
--   SDL_STATIC_PIC         (Wanted: OFF): OFF
--   SDL_TEST               (Wanted: OFF): OFF
--   SNDIO                  (Wanted: ON): ON
--   SSE                    (Wanted: ON): ON
--   SSE2                   (Wanted: ON): ON
--   SSE3                   (Wanted: ON): ON
--   SSEMATH                (Wanted: ON): OFF
--   VIDEO_COCOA            (Wanted: OFF): OFF
--   VIDEO_DIRECTFB         (Wanted: OFF): OFF
--   VIDEO_DUMMY            (Wanted: ON): ON
--   VIDEO_KMSDRM           (Wanted: ON): OFF
--   VIDEO_OPENGL           (Wanted: ON): ON
--   VIDEO_OPENGLES         (Wanted: ON): ON
--   VIDEO_RPI              (Wanted: ON): OFF
--   VIDEO_VIVANTE          (Wanted: ON): OFF
--   VIDEO_VULKAN           (Wanted: ON): ON
--   VIDEO_WAYLAND          (Wanted: ON): OFF
--   VIDEO_WAYLAND_QT_TOUCH (Wanted: ON): OFF
--   VIDEO_X11              (Wanted: ON): ON
--   VIDEO_X11_XCURSOR      (Wanted: ON): ON
--   VIDEO_X11_XINERAMA     (Wanted: ON): ON
--   VIDEO_X11_XINPUT       (Wanted: ON): ON
--   VIDEO_X11_XRANDR       (Wanted: ON): ON
--   VIDEO_X11_XSCRNSAVER   (Wanted: ON): ON
--   VIDEO_X11_XSHAPE       (Wanted: ON): ON
--   VIDEO_X11_XVM          (Wanted: ON): ON
--   WASAPI                 (Wanted: OFF): OFF
--   WAYLAND_SHARED         (Wanted: ON): OFF
--   X11_SHARED             (Wanted: ON): ON
-- 
--  CFLAGS:        -g -O3 -idirafter /home/mark/bscottm/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep/src/video/khronos -DHAVE_LINUX_VERSION_H
--  EXTRA_CFLAGS:  -I/usr/include -D_REENTRANT -msse3 -msse2 -msse -m3dnow -mmmx -Wshadow -fvisibility=hidden -Wdeclaration-after-statement -Werror=declaration-after-statement -fno-strict-aliasing -Wall 
--  EXTRA_LDFLAGS: -Wl,--no-undefined;-pthread
--  EXTRA_LIBS:    m;dl;/usr/lib/x86_64-linux-gnu/libsndio.so;dbus-1;ibus-1.0;gio-2.0;gobject-2.0;glib-2.0
-- 
--  Build Shared Library: ON
--  Build Static Library: ON
--  Build Static Library with Position Independent Code: OFF
-- 
-- If something was not detected, although the libraries
-- were installed, then make sure you have set the
-- CFLAGS and LDFLAGS environment variables correctly.
-- 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/sdl2-dep-prefix/src/sdl2-dep-build
[15/32] Performing download step (git clone) for 'freetype-dep'
Cloning into 'freetype-dep'...
warning: redirecting to https://git.savannah.nongnu.org/r/freetype/freetype2.git/
Note: checking out 'VER-2-10-1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 8cf046c38 * Version 2.10.1 released. ==========================
[18/32] Performing configure step for 'freetype-dep'
-- The C compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found PkgConfig: /usr/bin/pkg-config (found version ""0.29.1"") 
-- Could NOT find harfbuzz (missing: HARFBUZZ_INCLUDE_DIRS HARFBUZZ_LIBRARIES) 
-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") 
-- Found PNG: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libpng.so (found version ""1.6.37"") 
-- Could NOT find BZip2 (missing: BZIP2_LIBRARIES BZIP2_INCLUDE_DIR) 
-- Looking for unistd.h
-- Looking for unistd.h - found
-- Looking for fcntl.h
-- Looking for fcntl.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/freetype-dep-prefix/src/freetype-dep-build
[19/32] Performing build step for 'freetype-dep'
[1/41] Building C object CMakeFiles/freetype.dir/src/base/ftbbox.c.o
[2/41] Building C object CMakeFiles/freetype.dir/src/base/ftbdf.c.o
[3/41] Building C object CMakeFiles/freetype.dir/src/base/ftcid.c.o
[4/41] Building C object CMakeFiles/freetype.dir/src/base/ftbitmap.c.o
[5/41] Building C object CMakeFiles/freetype.dir/src/base/ftfstype.c.o
[6/41] Building C object CMakeFiles/freetype.dir/src/base/ftgasp.c.o
[7/41] Building C object CMakeFiles/freetype.dir/src/base/ftglyph.c.o
[8/41] Building C object CMakeFiles/freetype.dir/src/base/ftgxval.c.o
[9/41] Building C object CMakeFiles/freetype.dir/src/base/ftinit.c.o
[10/41] Building C object CMakeFiles/freetype.dir/src/base/ftmm.c.o
[11/41] Building C object CMakeFiles/freetype.dir/src/base/ftotval.c.o
[12/41] Building C object CMakeFiles/freetype.dir/src/base/ftpatent.c.o
[13/41] Building C object CMakeFiles/freetype.dir/src/base/ftpfr.c.o
[14/41] Building C object CMakeFiles/freetype.dir/src/base/ftsynth.c.o
[15/41] Building C object CMakeFiles/freetype.dir/src/base/ftsystem.c.o
[16/41] Building C object CMakeFiles/freetype.dir/src/base/ftstroke.c.o
[17/41] Building C object CMakeFiles/freetype.dir/src/base/ftwinfnt.c.o
[18/41] Building C object CMakeFiles/freetype.dir/src/autofit/autofit.c.o
[19/41] Building C object CMakeFiles/freetype.dir/src/base/fttype1.c.o
[20/41] Building C object CMakeFiles/freetype.dir/src/bzip2/ftbzip2.c.o
[21/41] Building C object CMakeFiles/freetype.dir/src/base/ftbase.c.o
[22/41] Building C object CMakeFiles/freetype.dir/src/cid/type1cid.c.o
[23/41] Building C object CMakeFiles/freetype.dir/src/gzip/ftgzip.c.o
[24/41] Building C object CMakeFiles/freetype.dir/src/cache/ftcache.c.o
[25/41] Building C object CMakeFiles/freetype.dir/src/bdf/bdf.c.o
[26/41] Building C object CMakeFiles/freetype.dir/src/lzw/ftlzw.c.o
[27/41] Building C object CMakeFiles/freetype.dir/src/pcf/pcf.c.o
[28/41] Building C object CMakeFiles/freetype.dir/src/cff/cff.c.o
[29/41] Building C object CMakeFiles/freetype.dir/src/pfr/pfr.c.o
[30/41] Building C object CMakeFiles/freetype.dir/src/pshinter/pshinter.c.o
[31/41] Building C object CMakeFiles/freetype.dir/src/raster/raster.c.o
[32/41] Building C object CMakeFiles/freetype.dir/src/psnames/psnames.c.o
[33/41] Building C object CMakeFiles/freetype.dir/src/smooth/smooth.c.o
[34/41] Building C object CMakeFiles/freetype.dir/src/type42/type42.c.o
[35/41] Building C object CMakeFiles/freetype.dir/src/psaux/psaux.c.o
[36/41] Building C object CMakeFiles/freetype.dir/src/base/ftdebug.c.o
[37/41] Building C object CMakeFiles/freetype.dir/src/winfonts/winfnt.c.o
[38/41] Building C object CMakeFiles/freetype.dir/src/type1/type1.c.o
[39/41] Building C object CMakeFiles/freetype.dir/src/sfnt/sfnt.c.o
[40/41] Building C object CMakeFiles/freetype.dir/src/truetype/truetype.c.o
[41/41] Linking C static library libfreetype.a
[20/32] Performing install step for 'freetype-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/ft2build.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/tttags.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftadvanc.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftrender.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbdf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsynth.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftwinfnt.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlcdfil.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftparams.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fterrors.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcolor.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgzip.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftglyph.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fttrigon.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgxval.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftpfr.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftincrem.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmodapi.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsizes.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fterrdef.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ttnameid.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/freetype.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsnames.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftfntfmt.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmoderr.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlist.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/t1tables.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/tttables.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftstroke.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftstdlib.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftheader.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftmodule.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbzip2.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbitmap.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmm.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftotval.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftoutln.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlzw.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbbox.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftdriver.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcache.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcid.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsystem.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmac.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fttypes.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftchapters.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftimage.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgasp.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftconfig.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftoption.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/freetype2.pc
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libfreetype.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config-noconfig.cmake
[22/32] Performing build step for 'sdl2-dep'
[1/307] Building C object CMakeFiles/SDL2.dir/src/SDL_hints.c.o
[2/307] Building C object CMakeFiles/SDL2.dir/src/SDL_log.c.o
[3/307] Building C object CMakeFiles/SDL2.dir/src/SDL_error.c.o
[4/307] Building C object CMakeFiles/SDL2.dir/src/atomic/SDL_atomic.c.o
[5/307] Building C object CMakeFiles/SDL2.dir/src/atomic/SDL_spinlock.c.o
[6/307] Building C object CMakeFiles/SDL2.dir/src/SDL_assert.c.o
[7/307] Building C object CMakeFiles/SDL2.dir/src/SDL_dataqueue.c.o
[8/307] Building C object CMakeFiles/SDL2.dir/src/SDL.c.o
[9/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_audiodev.c.o
[10/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_audiotypecvt.c.o
[11/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_mixer.c.o
[12/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_clipboardevents.c.o
[13/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_wave.c.o
[14/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_audio.c.o
[15/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_displayevents.c.o
[16/307] Building C object CMakeFiles/SDL2.dir/src/audio/SDL_audiocvt.c.o
[17/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_dropevents.c.o
[18/307] Building C object CMakeFiles/SDL2.dir/src/cpuinfo/SDL_cpuinfo.c.o
[19/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_gesture.c.o
[20/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_quit.c.o
[21/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_keyboard.c.o
[22/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_mouse.c.o
[23/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_windowevents.c.o
[24/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_events.c.o
[25/307] Building C object CMakeFiles/SDL2.dir/src/events/SDL_touch.c.o
[26/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_atan2.c.o
[27/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_exp.c.o
[28/307] Building C object CMakeFiles/SDL2.dir/src/file/SDL_rwops.c.o
[29/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_log.c.o
[30/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_log10.c.o
[31/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_fmod.c.o
[32/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_sqrt.c.o
[33/307] Building C object CMakeFiles/SDL2.dir/src/libm/k_cos.c.o
[34/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_pow.c.o
[35/307] Building C object CMakeFiles/SDL2.dir/src/libm/e_rem_pio2.c.o
[36/307] Building C object CMakeFiles/SDL2.dir/src/libm/k_tan.c.o
[37/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_copysign.c.o
[38/307] Building C object CMakeFiles/SDL2.dir/src/libm/k_sin.c.o
[39/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_atan.c.o
[40/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_fabs.c.o
[41/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_cos.c.o
[42/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_floor.c.o
[43/307] Building C object CMakeFiles/SDL2.dir/src/libm/k_rem_pio2.c.o
[44/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_scalbn.c.o
[45/307] Building C object CMakeFiles/SDL2.dir/src/render/SDL_d3dmath.c.o
[46/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_sin.c.o
[47/307] Building C object CMakeFiles/SDL2.dir/src/libm/s_tan.c.o
[48/307] Building C object CMakeFiles/SDL2.dir/src/render/direct3d/SDL_render_d3d.c.o
[49/307] Building C object CMakeFiles/SDL2.dir/src/render/SDL_yuv_sw.c.o
[50/307] Building C object CMakeFiles/SDL2.dir/src/render/direct3d11/SDL_render_d3d11.c.o
[51/307] Building C object CMakeFiles/SDL2.dir/src/render/direct3d/SDL_shaders_d3d.c.o
[52/307] Building C object CMakeFiles/SDL2.dir/src/render/direct3d11/SDL_shaders_d3d11.c.o
[53/307] Building C object CMakeFiles/SDL2.dir/src/render/opengles/SDL_render_gles.c.o
[54/307] Building C object CMakeFiles/SDL2.dir/src/render/opengl/SDL_shaders_gl.c.o
[55/307] Building C object CMakeFiles/SDL2.dir/src/render/opengles2/SDL_shaders_gles2.c.o
[56/307] Building C object CMakeFiles/SDL2.dir/src/render/psp/SDL_render_psp.c.o
[57/307] Building C object CMakeFiles/SDL2.dir/src/render/opengl/SDL_render_gl.c.o
[58/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_blendpoint.c.o
[59/307] Building C object CMakeFiles/SDL2.dir/src/render/opengles2/SDL_render_gles2.c.o
[60/307] Building C object CMakeFiles/SDL2.dir/src/render/SDL_render.c.o
[61/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_blendfillrect.c.o
[62/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_drawpoint.c.o
[63/307] Building C object CMakeFiles/SDL2.dir/src/dynapi/SDL_dynapi.c.o
[64/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_drawline.c.o
[65/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_getenv.c.o
[66/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_qsort.c.o
[67/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_malloc.c.o
[68/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_rotate.c.o
[69/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_iconv.c.o
[70/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_stdlib.c.o
[71/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_render_sw.c.o
[72/307] Building C object CMakeFiles/SDL2.dir/src/thread/SDL_thread.c.o
[73/307] Building C object CMakeFiles/SDL2.dir/src/stdlib/SDL_string.c.o
[74/307] Building C object CMakeFiles/SDL2.dir/src/timer/SDL_timer.c.o
[75/307] Building C object CMakeFiles/SDL2.dir/src/render/software/SDL_blendline.c.o
[76/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit.c.o
[77/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_0.c.o
[78/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_copy.c.o
[79/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_slow.c.o
[80/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_1.c.o
[81/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_clipboard.c.o
[82/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_RLEaccel.c.o
[83/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_bmp.c.o
[84/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_egl.c.o
[85/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_rect.c.o
[86/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_fillrect.c.o
[87/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_A.c.o
[88/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_pixels.c.o
[89/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_shape.c.o
[90/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_stretch.c.o
[91/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_vulkan_utils.c.o
[92/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_slow.c.o
[93/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_surface.c.o
[94/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_N.c.o
[95/307] Building C object CMakeFiles/SDL2.dir/src/joystick/SDL_gamecontroller.c.o
[96/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_video.c.o
[97/307] Building C object CMakeFiles/SDL2.dir/src/joystick/SDL_joystick.c.o
[98/307] Building C object CMakeFiles/SDL2.dir/src/power/SDL_power.c.o
[99/307] Building C object CMakeFiles/SDL2.dir/src/haptic/SDL_haptic.c.o
[100/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_yuv.c.o
[101/307] Building C object CMakeFiles/SDL2.dir/src/audio/dummy/SDL_dummyaudio.c.o
[102/307] Building C object CMakeFiles/SDL2.dir/src/audio/disk/SDL_diskaudio.c.o
[103/307] Building C object CMakeFiles/SDL2.dir/src/sensor/SDL_sensor.c.o
[104/307] Building C object CMakeFiles/SDL2.dir/src/loadso/dlopen/SDL_sysloadso.c.o
[105/307] Building C object CMakeFiles/SDL2.dir/src/video/dummy/SDL_nullevents.c.o
[106/307] Building C object CMakeFiles/SDL2.dir/src/video/dummy/SDL_nullframebuffer.c.o
[107/307] Building C object CMakeFiles/SDL2.dir/src/audio/pulseaudio/SDL_pulseaudio.c.o
[108/307] Building C object CMakeFiles/SDL2.dir/src/video/dummy/SDL_nullvideo.c.o
[109/307] Building C object CMakeFiles/SDL2.dir/src/audio/alsa/SDL_alsa_audio.c.o
[110/307] Building C object CMakeFiles/SDL2.dir/src/video/SDL_blit_auto.c.o
[111/307] Building C object CMakeFiles/SDL2.dir/src/audio/dsp/SDL_dspaudio.c.o
[112/307] Building C object CMakeFiles/SDL2.dir/src/audio/sndio/SDL_sndioaudio.c.o
[113/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11clipboard.c.o
[114/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11framebuffer.c.o
[115/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11events.c.o
[116/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11keyboard.c.o
[117/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11dyn.c.o
[118/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11mouse.c.o
[119/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11modes.c.o
[120/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11opengles.c.o
[121/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11opengl.c.o
[122/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11messagebox.c.o
[123/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11shape.c.o
[124/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11touch.c.o
[125/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11vulkan.c.o
[126/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/imKStoUCS.c.o
[127/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11xinput2.c.o
[128/307] Building C object CMakeFiles/SDL2.dir/src/core/unix/SDL_poll.c.o
[129/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11video.c.o
[130/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/edid-parse.c.o
[131/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_fcitx.c.o
[132/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_dbus.c.o
[133/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_evdev.c.o
[134/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_threadprio.c.o
[135/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_ime.c.o
[136/307] Building C object CMakeFiles/SDL2.dir/src/video/x11/SDL_x11window.c.o
[137/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_evdev_kbd.c.o
[138/307] Building C object CMakeFiles/SDL2.dir/src/joystick/steam/SDL_steamcontroller.c.o
[139/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_udev.c.o
[140/307] Building C object CMakeFiles/SDL2.dir/src/haptic/linux/SDL_syshaptic.c.o
[141/307] Building C object CMakeFiles/SDL2.dir/src/thread/pthread/SDL_sysmutex.c.o
[142/307] Building C object CMakeFiles/SDL2.dir/src/core/linux/SDL_ibus.c.o
[143/307] Building C object CMakeFiles/SDL2.dir/src/thread/pthread/SDL_systhread.c.o
[144/307] Building C object CMakeFiles/SDL2.dir/src/thread/pthread/SDL_syscond.c.o
[145/307] Building C object CMakeFiles/SDL2.dir/src/joystick/linux/SDL_sysjoystick.c.o
[146/307] Building C object CMakeFiles/SDL2.dir/src/thread/pthread/SDL_syssem.c.o
[147/307] Building C object CMakeFiles/SDL2.dir/src/thread/pthread/SDL_systls.c.o
[148/307] Building C object CMakeFiles/SDL2.dir/src/filesystem/unix/SDL_sysfilesystem.c.o
[149/307] Building C object CMakeFiles/SDL2.dir/src/timer/unix/SDL_systimer.c.o
[150/307] Building C object CMakeFiles/SDL2main.dir/src/main/dummy/SDL_dummy_main.c.o
[151/307] Building C object CMakeFiles/SDL2.dir/src/sensor/dummy/SDL_dummysensor.c.o
[152/307] Building C object CMakeFiles/SDL2.dir/src/power/linux/SDL_syspower.c.o
[153/307] Linking C static library libSDL2main.a
[154/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL_error.c.o
[155/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL_hints.c.o
[156/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL.c.o
[157/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL_assert.c.o
[158/307] Building C object CMakeFiles/SDL2-static.dir/src/atomic/SDL_spinlock.c.o
[159/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL_dataqueue.c.o
[160/307] Building C object CMakeFiles/SDL2-static.dir/src/atomic/SDL_atomic.c.o
[161/307] Building C object CMakeFiles/SDL2-static.dir/src/SDL_log.c.o
[162/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_audiodev.c.o
[163/307] Building C object CMakeFiles/SDL2.dir/src/video/yuv2rgb/yuv_rgb.c.o
[164/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_mixer.c.o
[165/307] Linking C shared library libSDL2-2.0.so.0.10.0
[166/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_audio.c.o
[167/307] Creating library symlink libSDL2-2.0.so.0 libSDL2-2.0.so
[168/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_audiotypecvt.c.o
[169/307] Building C object CMakeFiles/SDL2-static.dir/src/cpuinfo/SDL_cpuinfo.c.o
[170/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_wave.c.o
[171/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_clipboardevents.c.o
[172/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_displayevents.c.o
[173/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_dropevents.c.o
[174/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/SDL_audiocvt.c.o
[175/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_keyboard.c.o
[176/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_gesture.c.o
[177/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_quit.c.o
[178/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_mouse.c.o
[179/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_windowevents.c.o
[180/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_touch.c.o
[181/307] Building C object CMakeFiles/SDL2-static.dir/src/events/SDL_events.c.o
[182/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_atan2.c.o
[183/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_exp.c.o
[184/307] Building C object CMakeFiles/SDL2-static.dir/src/file/SDL_rwops.c.o
[185/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_fmod.c.o
[186/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_log10.c.o
[187/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_log.c.o
[188/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_pow.c.o
[189/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_rem_pio2.c.o
[190/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/e_sqrt.c.o
[191/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/k_cos.c.o
[192/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/k_sin.c.o
[193/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/k_tan.c.o
[194/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_atan.c.o
[195/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_copysign.c.o
[196/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/k_rem_pio2.c.o
[197/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_cos.c.o
[198/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_fabs.c.o
[199/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_floor.c.o
[200/307] Building C object CMakeFiles/SDL2-static.dir/src/render/SDL_d3dmath.c.o
[201/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_tan.c.o
[202/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_sin.c.o
[203/307] Building C object CMakeFiles/SDL2-static.dir/src/libm/s_scalbn.c.o
[204/307] Building C object CMakeFiles/SDL2-static.dir/src/render/direct3d/SDL_render_d3d.c.o
[205/307] Building C object CMakeFiles/SDL2-static.dir/src/render/direct3d11/SDL_render_d3d11.c.o
[206/307] Building C object CMakeFiles/SDL2-static.dir/src/render/direct3d11/SDL_shaders_d3d11.c.o
[207/307] Building C object CMakeFiles/SDL2-static.dir/src/render/direct3d/SDL_shaders_d3d.c.o
[208/307] Building C object CMakeFiles/SDL2-static.dir/src/render/opengles/SDL_render_gles.c.o
[209/307] Building C object CMakeFiles/SDL2-static.dir/src/render/SDL_yuv_sw.c.o
[210/307] Building C object CMakeFiles/SDL2-static.dir/src/render/opengles2/SDL_shaders_gles2.c.o
[211/307] Building C object CMakeFiles/SDL2-static.dir/src/render/psp/SDL_render_psp.c.o
[212/307] Building C object CMakeFiles/SDL2-static.dir/src/render/opengl/SDL_shaders_gl.c.o
[213/307] Building C object CMakeFiles/SDL2-static.dir/src/render/opengl/SDL_render_gl.c.o
[214/307] Building C object CMakeFiles/SDL2-static.dir/src/render/opengles2/SDL_render_gles2.c.o
[215/307] Building C object CMakeFiles/SDL2-static.dir/src/dynapi/SDL_dynapi.c.o
[216/307] Building C object CMakeFiles/SDL2-static.dir/src/render/SDL_render.c.o
[217/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_blendpoint.c.o
[218/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_drawpoint.c.o
[219/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_blendfillrect.c.o
[220/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_drawline.c.o
[221/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_getenv.c.o
[222/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_malloc.c.o
[223/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_render_sw.c.o
[224/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_qsort.c.o
[225/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_iconv.c.o
[226/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_stdlib.c.o
[227/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_rotate.c.o
[228/307] Building C object CMakeFiles/SDL2-static.dir/src/stdlib/SDL_string.c.o
[229/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/SDL_thread.c.o
[230/307] Building C object CMakeFiles/SDL2-static.dir/src/timer/SDL_timer.c.o
[231/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit.c.o
[232/307] Building C object CMakeFiles/SDL2-static.dir/src/render/software/SDL_blendline.c.o
[233/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_0.c.o
[234/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_copy.c.o
[235/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_1.c.o
[236/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_RLEaccel.c.o
[237/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_bmp.c.o
[238/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_clipboard.c.o
[239/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_egl.c.o
[240/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_fillrect.c.o
[241/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_pixels.c.o
[242/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_A.c.o
[243/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_rect.c.o
[244/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_stretch.c.o
[245/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_shape.c.o
[246/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_vulkan_utils.c.o
[247/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_surface.c.o
[248/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_N.c.o
[249/307] Building C object CMakeFiles/SDL2-static.dir/src/joystick/SDL_gamecontroller.c.o
[250/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_video.c.o
[251/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_yuv.c.o
[252/307] Building C object CMakeFiles/SDL2-static.dir/src/power/SDL_power.c.o
[253/307] Building C object CMakeFiles/SDL2-static.dir/src/haptic/SDL_haptic.c.o
[254/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/dummy/SDL_dummyaudio.c.o
[255/307] Building C object CMakeFiles/SDL2-static.dir/src/sensor/SDL_sensor.c.o
[256/307] Building C object CMakeFiles/SDL2-static.dir/src/video/SDL_blit_auto.c.o
[257/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/disk/SDL_diskaudio.c.o
[258/307] Building C object CMakeFiles/SDL2-static.dir/src/loadso/dlopen/SDL_sysloadso.c.o
[259/307] Building C object CMakeFiles/SDL2-static.dir/src/video/dummy/SDL_nullframebuffer.c.o
[260/307] Building C object CMakeFiles/SDL2-static.dir/src/joystick/SDL_joystick.c.o
[261/307] Building C object CMakeFiles/SDL2-static.dir/src/video/dummy/SDL_nullevents.c.o
[262/307] Building C object CMakeFiles/SDL2-static.dir/src/video/dummy/SDL_nullvideo.c.o
[263/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/sndio/SDL_sndioaudio.c.o
[264/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/alsa/SDL_alsa_audio.c.o
[265/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/dsp/SDL_dspaudio.c.o
[266/307] Building C object CMakeFiles/SDL2-static.dir/src/audio/pulseaudio/SDL_pulseaudio.c.o
[267/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11clipboard.c.o
[268/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11keyboard.c.o
[269/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11framebuffer.c.o
[270/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11events.c.o
[271/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11mouse.c.o
[272/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11dyn.c.o
[273/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11modes.c.o
[274/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11messagebox.c.o
[275/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11opengl.c.o
[276/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11opengles.c.o
[277/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11touch.c.o
[278/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11shape.c.o
[279/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11vulkan.c.o
[280/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/imKStoUCS.c.o
[281/307] Building C object CMakeFiles/SDL2-static.dir/src/core/unix/SDL_poll.c.o
[282/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11video.c.o
[283/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/edid-parse.c.o
[284/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11xinput2.c.o
[285/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_fcitx.c.o
[286/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_dbus.c.o
[287/307] Building C object CMakeFiles/SDL2-static.dir/src/video/x11/SDL_x11window.c.o
[288/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_evdev_kbd.c.o
[289/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_threadprio.c.o
[290/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_ime.c.o
[291/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_evdev.c.o
[292/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_udev.c.o
[293/307] Building C object CMakeFiles/SDL2-static.dir/src/joystick/steam/SDL_steamcontroller.c.o
[294/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/pthread/SDL_systhread.c.o
[295/307] Building C object CMakeFiles/SDL2-static.dir/src/haptic/linux/SDL_syshaptic.c.o
[296/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/pthread/SDL_sysmutex.c.o
[297/307] Building C object CMakeFiles/SDL2-static.dir/src/core/linux/SDL_ibus.c.o
[298/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/pthread/SDL_syscond.c.o
[299/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/pthread/SDL_systls.c.o
[300/307] Building C object CMakeFiles/SDL2-static.dir/src/thread/pthread/SDL_syssem.c.o
[301/307] Building C object CMakeFiles/SDL2-static.dir/src/filesystem/unix/SDL_sysfilesystem.c.o
[302/307] Building C object CMakeFiles/SDL2-static.dir/src/joystick/linux/SDL_sysjoystick.c.o
[303/307] Building C object CMakeFiles/SDL2-static.dir/src/sensor/dummy/SDL_dummysensor.c.o
[304/307] Building C object CMakeFiles/SDL2-static.dir/src/timer/unix/SDL_systimer.c.o
[305/307] Building C object CMakeFiles/SDL2-static.dir/src/video/yuv2rgb/yuv_rgb.c.o
[306/307] Building C object CMakeFiles/SDL2-static.dir/src/power/linux/SDL_syspower.c.o
[307/307] Linking C static library libSDL2.a
[23/32] Performing install step for 'sdl2-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2-2.0.so.0.10.0
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2-2.0.so.0
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2-2.0.so
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2main.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2Targets.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2Targets-noconfig.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2Config.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2ConfigVersion.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_assert.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_atomic.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_audio.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_bits.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_blendmode.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_clipboard.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_android.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_iphoneos.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_macosx.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_minimal.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_os2.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_pandora.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_psp.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_windows.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_winrt.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config_wiz.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_copying.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_cpuinfo.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_egl.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_endian.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_error.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_events.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_filesystem.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_gamecontroller.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_gesture.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_haptic.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_hints.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_joystick.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_keyboard.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_keycode.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_loadso.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_log.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_main.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_messagebox.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_mouse.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_mutex.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_name.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengl.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengl_glext.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles2.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles2_gl2.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles2_gl2ext.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles2_gl2platform.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_opengles2_khrplatform.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_pixels.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_platform.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_power.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_quit.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_rect.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_render.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_revision.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_rwops.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_scancode.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_sensor.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_shape.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_stdinc.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_surface.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_system.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_syswm.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_assert.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_common.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_compare.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_crc32.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_font.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_fuzzer.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_harness.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_images.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_log.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_md5.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_memory.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_test_random.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_thread.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_timer.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_touch.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_types.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_version.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_video.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_vulkan.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/begin_code.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/close_code.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_config.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2.so
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/sdl2.pc
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/bin/sdl2-config
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/share/aclocal/sdl2.m4
[26/32] Performing download step (down...verify and extract) for 'sdl2-ttf-dep'
-- Downloading...
   dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/SDL2_ttf-2.0.15.zip'
   timeout='none'
-- Using src='https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.15.zip'
-- [download 0% complete]
[..]
-- [download 100% complete]
-- Downloading... done
-- extracting...
     src='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/SDL2_ttf-2.0.15.zip'
     dst='/home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep'
-- extracting... [tar xfz]
-- extracting... [analysis]
-- extracting... [rename]
-- extracting... [clean up]
-- extracting... done
[29/32] Performing configure step for 'sdl2-ttf-dep'
-- The C compiler identification is GNU 8.3.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Found Freetype: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libfreetype.a (found version ""2.10.1"") 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-build
[30/32] Performing build step for 'sdl2-ttf-dep'
[1/2] Building C object CMakeFiles/SDL2_ttf.dir/SDL_ttf.c.o
[2/2] Linking C static library libSDL2_ttf.a
[31/32] Performing install step for 'sdl2-ttf-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2_ttf.a
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_ttf.h
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfTargets.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfTargets-noconfig.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfConfig.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfConfigVersion.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/SDL2_ttf.pc
[32/32] Completed 'sdl2-ttf-dep'
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ cnaje -G Ninja -DCMAKE_BUILD_TYPE=Release ..
cnaje: command not found
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
-- SIMH_DEP_TOPDIR = /home/mark/bscottm/simh/cmake-ninja/build-stage
-- Creating build-stage directory hierarchy (include, lib, bin)
-- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR) 
-- Building PNG from https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/libpng-1.6.37.tar.xz/download
-- Could NOT find Freetype (missing: FREETYPE_LIBRARY FREETYPE_INCLUDE_DIRS) 
-- Building Freetype from github repository.
-- Could NOT find SDL2_ttf (missing: SDL2_ttf_DIR)
-- Building SDL2_ttf from https://www.libsdl.org/release/SDL2_ttf-2.0.15.zip.
-- LIB_PATH_SUFFIXES lib64;lib/x64;lib/amd64;lib/x86_64-linux-gnu;lib
-- PCAP_LIBRARY is /usr/lib/x86_64-linux-gnu/libpcap.so
-- PACKET_LIBRARY is 
-- 
-- Libraries and features:
--   Thread support .................. Linux builtin pthreads
--   zlib ............................ installed ZLIB
--   Perl-Compatible RegExps.......... installed pcre
--   PNG, Freetype, SDL2, SDL2_ttf ... PNG source build, Freetype source build, installed SDL2, SDL2_ttf source build
--   Packet Capture (PCAP) ........... installed PCAP
-- 
-- Build options:
--   Video/graphics support ....... TRUE
--   Networking ................... ON
--   Asynchronous I/O ............. ON
--   Build internal ROMS .......... Yes
--   'cppcheck' ................... 'cppcheck' not installed.
-- 
-- 
-- The following dependencies need to be built:
-- 
--   png;freetype;SDL2_ttf
-- 
-- Execute 'cmake --build . --config <Release|Debug|...>'
-- 
-- Reconfigure CMake after the build is complete and successful (no errors)
-- 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ cmake --build . --config Release
[2/10] Performing configure step for 'freetype-dep'
-- Could NOT find harfbuzz (missing: HARFBUZZ_INCLUDE_DIRS HARFBUZZ_LIBRARIES) 
-- Could NOT find BZip2 (missing: BZIP2_LIBRARIES BZIP2_INCLUDE_DIR) 
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/freetype-dep-prefix/src/freetype-dep-build
[3/10] Performing build step for 'freetype-dep'
ninja: no work to do.
[4/10] Performing install step for 'freetype-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/ft2build.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/tttags.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftadvanc.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftrender.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbdf.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsynth.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftwinfnt.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlcdfil.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftparams.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fterrors.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcolor.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgzip.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftglyph.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fttrigon.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgxval.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftpfr.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftincrem.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmodapi.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsizes.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fterrdef.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ttnameid.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/freetype.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsnames.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftfntfmt.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmoderr.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlist.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/t1tables.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/tttables.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftstroke.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftstdlib.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftheader.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftmodule.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbzip2.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbitmap.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmm.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftotval.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftoutln.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftlzw.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftbbox.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftdriver.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcache.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftcid.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftsystem.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftmac.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/fttypes.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftchapters.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftimage.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/ftgasp.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftconfig.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/freetype2/freetype/config/ftoption.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/freetype2.pc
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libfreetype.a
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/freetype/freetype-config-noconfig.cmake
[7/10] Performing configure step for 'sdl2-ttf-dep'
-- Configuring done
-- Generating done
-- Build files have been written to: /home/mark/bscottm/simh/cmake-ninja/sdl2-ttf-dep-prefix/src/sdl2-ttf-dep-build
[8/10] Performing build step for 'sdl2-ttf-dep'
ninja: no work to do.
[9/10] Performing install step for 'sdl2-ttf-dep'
[0/1] Install the project...
-- Install configuration: """"
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/libSDL2_ttf.a
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/include/SDL2/SDL_ttf.h
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfTargets.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfTargets-noconfig.cmake
-- Installing: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfConfig.cmake
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/cmake/SDL2/SDL2_ttfConfigVersion.cmake
-- Up-to-date: /home/mark/bscottm/simh/cmake-ninja/build-stage/lib/pkgconfig/SDL2_ttf.pc
[10/10] Completed 'sdl2-ttf-dep'
mark@Ubuntu-19:~/bscottm/simh/cmake-ninja$ 

The quick start instructions repeat the exact two prior steps and don't suggest what is needed to actually build simulators.
So far I've failed at least 6 times, and haven't gotten anything to work once.
YOU should test your 'quick start' directions BEFORE you suggest that something is there and/or that it works.  It is your job to make this easy to do.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,26,https://github.com/simh/simh/pull/775#issuecomment-567328263,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Been working fine on appveyor. Other than an unfortunate name clash in sim_disk.c and an outdated cmake on the Visual Studio 2013 appveyor image, cmake-builder.ps1 seems reasonably solid. (I separated out the tests as their own step and introduced some build breakage, but that should be fixed shortly.)
Re: quickstart directions: I've admitted they're evolving as I work through testing them on each system. The CMake build has two parts -- build dependencies and build simulators. That's the reason why the instructions seem to repeat themselves, if the dependencies need building. You run the cmake -G ... step to (re)configure and pick up the locally compiled dependencies, then run the cmake --build .. step to build the simulators. Once the simulators are built, cmake --install . will copy the executables and DLLs to the BIN directory (or BIN/Win32/{Release|Debug} if MSVC.)
Re: cmake-builder.ps1: It's possible that you're lagging behind a pull or two. The script should tell you when required tools are missing:
!! cmake-builder error:

The 'cmake' command was not found. Please ensure that you have installed CMake
and that your PATH environment variable references the directory in which it
was installed.

Not sure if you can see these build results. Hopefully you can. And no problem accommodating the simh-maintained solution build. Although this pull request seems to pick up the new appveyor.yml, so you should be able to see current build result here.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,27,https://github.com/simh/simh/pull/775#issuecomment-567819446,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz, @larsbrinkhoff: Successful build for MSVC flavors and MinGW on appveyor, top to bottom, Release and Debug builds.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,28,https://github.com/simh/simh/pull/775#issuecomment-567937382,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","There is more detailed info in the readme, but it still doesn't describe an end to end process that builds simulators on Linux.  You really need to follow the all of steps you write down, notice the incorrect ones and take through to building the simulators.
It is nice that you now describe that ""this approach for developers"", but that doesn't absolve you of correctly describing steps that work, nor should they have to dig through some AppVeyor logs to see how you managed to get something to work someplace.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,29,https://github.com/simh/simh/pull/775#issuecomment-568021905,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: I've repeatedly stated that README-cmake.md is still a work-in-progress. My purpose for adding Appveyor support was to demonstrate that the CMake-based build does, in fact, work and the existing build infrastructure works next to it, side-by-side.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,30,https://github.com/simh/simh/pull/775#issuecomment-568038321,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: I've repeatedly stated that README-cmake.md is still a work-in-progress.

It may be a work in progress, that can be enriched over time, but what it says at any point in time that you want me to look at it should have been tested and should actually work.  This is where anyone (myself included) walking up will start looking at this idea.  Sure, maybe you've used AppVeyor to test some of this, but the instructions certainly don't reflect those details.
We've had AppVeyor building the standard simh Visual Studio support for quite some time.
Let me know when you've got something that actually has been tested and has instructions which work first on Linux and then on Windows and I'll look again.  As I've said previously, once I see some results, I will certainly have feedback about the details that I see.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,31,https://github.com/simh/simh/pull/775#issuecomment-568149518,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: Rather pointless, isn't this.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,32,https://github.com/simh/simh/pull/775#issuecomment-568199648,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","So the only real point of your efforts was to add MinGW64 as a supported tool chain??
This cmake idea is coming along and solving something that wasn't broken anywhere.  That you got it to run under AppBeyor didn't add anything since we already had builds working there.
Meanwhile, the current master branch simh codebase builds under windows with the latest versions of all the dependent libraries other than SDL2_ttf.  SDL2_ttf is only used by the Russian BESM6 simulator to display labels above its front panel lights.  SDL2_ttf will get upgraded eventually.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/bscottm,33,https://github.com/simh/simh/pull/775#issuecomment-568231837,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","@markpizz: No, it wasn't. As I said elsewhere, it's about enabling a variety of build environments via CMake and addressing various simh ""-ilities."" Supporting MSYS2 and MinGW-W64 is a byproduct (do you really want to have to maintain those project and solution files if CMake can automagically generate them for you?) The MSYS2/MinGW-W64 environment is generally what I see software developers installing rather than MinGW.
Given the amount of pushback on just changing the names of two static functions, I've reassessed the value of contributing.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/markpizz,34,https://github.com/simh/simh/pull/775#issuecomment-573444489,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","When I first looked at your cmake stuff I wanted to run an end to end build example so I could observe it before making comments about the whole process.  That wasn't possible until you updated the README-cmake.md to provide the Linux steps that I finally was able to see building and look at the results.
I was concerned about the scattering of file changes throughout the simh source tree that your patch provided.  My preference would be for cmake support to be contained in a dedicated cmake directory.
Looking through what you had, and the powerful capabilities of cmake, it was actually easy enough to move each of the directory specific CMakeLists.txt files into a set of related sub directories in the cmake directory reflecting the simh source tree, and to move the top level CMakeLists.txt file into the cmake directory.  Likewise, I merely moved your dep-patches directory into the cmake directory.
That solved concern #1.
Concern #2 was the fact that the build component information for each simulator was now logically replicated in multiple places and changes now have to be made in more than one place as simulators are added and/or evolve.  Multiple places being the primary makefile and any related CMakeLists.txt files.
Clearly, you spent a good amount of time tediously going through the makefile creating each simulator's CMakeLists.txt file.
These mostly worked (I7080 had the INT64 option when it shouldn't have), and it seems that you only made CMakeFiles.txt for simulators listed in the all makefile target.  These inconsistencies are just a case in point about maintaining the same logical information in more than one place.  To address this problem I wrote a program to digest the existing makefile and emit the correct cmake add_simulator configuration details for all of the simulators in the makefile.
This removes the duplicate configuration management and removes all of the per simulator manually generated CMakeLists.txt files.
Since I was only concerned about simulator building and not anything to do with your efforts to gather dependent libraries, I only tested this on Linux (Ubuntu) and Windows Subsystem for Linux (Ubuntu) with all of the dependent packages installed with ""apt install ..."".
I also changed the README-cmake.md file slightly to suggest that build directories be sub directories of the BIN directory so that all generated content be sanely left in BIN and thus implicitly excluded in the .gitignore.
This can be found in the potential-cmake-support branch of the https://github.com/markpizz/simh repo.
There are several issues currently not addressed by this cmake build
environment:
Required to fix before merge into the master branch:

Builds must somehow provide the current git commit id at compile
time with the results visible in the ""SHOW VERSION"" output.

Annoyances:


Missing network transport features:
a) TAP - This has different include dependencies on Linux vs OS/X
but no library dependencies.
b) VDE - This has external package support on Linux and OS/X.
Slirp support should not be an option.  Like basic UDP, it has no
external dependencies.  If network capabilities are added, then
slirp should always be there.  The only reason the makefile
specifically tests for the existence of the slirp directory is
due to the fact that one simulator developer didn't initially
carry that directory in their copied (not cloned) personal repo's.
Once they added network support to their simulators they realized
the need for the slirp pieces.  I fixed this already.
Since you're gathering all the dependencies (or leveraging what is
already installed), PCAP should always be included in set of network
transports provided.


There is no current provision for dynamically loading shared
libraries or dlls (HAVE_DLOPEN).  There should never be a need to
build libpcap (or winpcap or npcap) from source since the only
requirement to have pcap support available is to have pcap.h be
included so the library APIs are defined, and thus can be dynamically
loaded if the host system has the functionality (dll or shared object)
installed.  USE_SHARED controls dynamically loading of these network
components.  This will thus leverage the latest package installed on
the local system.  The pcap.h APIs used by simh been stable for well
more than 10 years, so newer functionality which may be mentioned
in newer versions is not a factor for functionality needed by
simulated network devices.


As a related issue (to HAVE_DLOPEN), command line editing is
dynamically provided by loading readline on the fly.  Folks can
live without this, but I'm sure they would prefer not.


Since you're gathering all the dependencies (or leveraging what is
already installed), what value comes from making VIDEO and/or
DISPLAY functionality not being available in all simulators that
may be able to leverage them.  Why are you specifically providing
a way to disable them?


Each of:
HAVE_SEMAPHORE
HAVE_SYS_IOCTL
HAVE_LINUX_CDROM
HAVE_UTIME
HAVE_SHM_OPEN
HAVE_GLOB or HAVE_FNMATCH
should be set according to the capabilities available on non Windows
hosts.


You originally didn't provide a CMakeLists.txt (add_simulator) for the
BESM6 simulator, probably due to it accidentally not being mentioned in the 'all' target of the base makefile.  The BESM6 simulator is the only simulator that uses SDL2_ttf functionality and it's related dependencies.  This simulator currently builds without the ttf functionality.  The SDL and TTF results are visible by entering SET CPU PANEL at the sim> prompt.  A related complexity for this simulator is the specific font selection which needs to be somehow worked out in cmake.
The simh makefile's provisions for building without ASYCH_IO is a vestige of the very earliest days of Asynch I/O support in simh some
9 years ago.  It was only provided to allow explicit disabling of any asynch behaviors to avoid any blame that may be cast on the asynch code.  Asynch I/O has proven to be very reliable and the need to depend on an external build option to disable this was supplanted by the addition of the SET NOASYNC and SET ASYNCH commands.
The option to build simulators without network support really shouldn't be there.  It was necessary 16 years ago when what we needed from pcap was still evolving on many platforms, but that has long stabilized.
All interesting host platforms have easy access to the required functionality built into the kernels on Linux and OS/X, accessible via the library, and on Windows via WinPcap or Npcap.
Sadly, the folks who packaged simh for Linux built simulators without network support.  Since the vast majority of users use vax or pdp11 simulators, everyone had to pick up source and build for themselves to get useful things working.  Maybe that was good for traffic to github.com/simh/simh, but it was less than useful for the users.
If you want to clean up the above mention issues and subsequently finish and test the dependent library stuff that started you down this road, we can add the results to the simh master branch.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/promovicz,35,https://github.com/simh/simh/pull/775#issuecomment-703968823,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","This ticket is a surprise for me because I have been doing the same thing for a while: https://github.com/promovicz/simh/tree/feature/cmake-build
IMO simh absolutely needs a modern build system, be it CMake or some python thing or even autoconf/automake.
The reason is that the current makefile is almost impossible to integrate into packaging and embedded builds. It follows none of the modern conventions and does not handle dependencies in a transparent way. Cross-compiling simh is currently completely impossible and will never work well with the current build systems.",True,{'THUMBS_UP': ['https://github.com/eschaton']}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/promovicz,36,https://github.com/simh/simh/pull/775#issuecomment-703975928,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I have some arguments to let go on this matter.
Packaging: simh currently follows the idiosyncratic packaging practices of a foregone age. To be viable this needs to change so that there can be usable packages in distributions. This will not happen with the current build systems, which only allows maintainers to do half of their job. I have no problem with keeping the old MMS and even makefile builds. But there needs to be a modern alternative that integrates correctly with package build systems.
A cross-compiling use-case: I often work with buildroot and would love to create raspberry pi images that boot a raspberry as a VAX. The current makefile has no provisions for correctly detecting dependencies in a cross-build. It was easier to take my CMake branch and do it with that. The package description in build root only needs to be 10 lines this way. The alternative would have been to do it manually, which is enough to keep me (or others) from even doing something like this.
Dealing with contributors: I have been around open-source for a long time, and I have worked successfully with all kinds of people. Opinions often differ when meeting people online for the first time, and it is important to recognize that and deal with it. The tone used by @markpizz on this issue is not conducive to that, and I am not surprised that the contributor got scared off. Even people whose patches get rejected should leave on a good mood if possible. Being mega-critical and textwalling people won't achieve that.",True,{'THUMBS_UP': ['https://github.com/eschaton']}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/rcornwell,37,https://github.com/simh/simh/pull/775#issuecomment-703978432,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I myself would like to see autoconf added to the build to configure which options are supported on a platform. I am not convinced that CMAKE is needed. I also would avoid using things like Python and the like.
Also please keep in mind that one of the major issues with simH is testing all the different simulators. Just because a simulator compiles without error or warnings does not mean it works correctly.
Also I regularly run Coverity scans on my simulators, this includes the main SCP files.",True,{'HEART': ['https://github.com/promovicz']}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/promovicz,38,https://github.com/simh/simh/pull/775#issuecomment-703980825,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","I myself would like to see autoconf added to the build to configure which options are supported on a platform. I am not convinced that CMAKE is needed. I also would avoid using things like Python and the like.

IMO autoconf makes build systems more complicated and requires to much wizardry, but it works for me. I have good practical experience with CMake - it is a great compromise.

Also please keep in mind that one of the major issues with simH is testing all the different simulators. Just because a simulator compiles without error or warnings does not mean it works correctly.

I am aware of that and was delighted to see some actual tests pop up in simh. I will add them to my (currently personal) CMake build.

Also I regularly run Coverity scans on my simulators, this includes the main SCP files.

You might like to give your opinion on the matter of warnings: #932 .",True,{'THUMBS_UP': ['https://github.com/eschaton']}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/rcornwell,39,https://github.com/simh/simh/pull/775#issuecomment-703983034,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Testing simulators is not easy, it requires large amount of disk/tape images to do this.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/promovicz,40,https://github.com/simh/simh/pull/775#issuecomment-704010230,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Testing simulators is not easy, it requires large amount of disk/tape images to do this.

I am aware of that, but it does not have much to do with the build system per-se. There simply needs to be some standard layout for all those files that people can replicate - at least for the specific simulators they are working on. Tests with no appropriate images available should simply be skipped.
The software problem can also be solved in part by hosting most of these images in France, where hosting abandonware is perfectly (and in some cases transitively) legal. An example for someone doing this is https://winworldpc.com/.",True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/rcornwell,41,https://github.com/simh/simh/pull/775#issuecomment-704014853,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.",For some of the simulators I have written I don't have diagnostics to run. However running diagnostics on some of my simulators will result in errors. Also diags can pass but the simulator might not run the OS. It can currently take me a day or two to validate my simulators.,True,{}
simh/simh,https://github.com/simh/simh,775,2019-12-08T05:41:49Z,2021-10-13T20:44:04Z,2021-10-13T20:44:04Z,CLOSED,False,20363,44518,172,https://github.com/bscottm,CMake-based build system alternative,25,[],https://github.com/simh/simh/pull/775,https://github.com/XVilka,42,https://github.com/simh/simh/pull/775#issuecomment-902467484,"Add CMake build support as a parallel alternative to the makefile-based build system. This is not intended to be a replacement for the makefile-based build system (or the collection of Visual Studio solutions, for that matter.)
CMake is a meta-build system: It generates the build environment for a multiplicity of build systems (Ninja, VS 2019, VS 2015, MinGW Makefiles, to name a few). Documentation for how to use is in README-cmake.md.","Another option would be to use Meson buildsystem. It works with Ninja as well, has saner syntax than CMake, and popular among C projects, including the QEMU emulator itself. Recently big projects like GNOME, Mesa, Xorg, systemd all switched to Meson. We (Rizin) use it as well and quite happy with that.",True,{}
simh/simh,https://github.com/simh/simh,776,2019-12-08T20:29:07Z,2019-12-08T21:00:08Z,2019-12-08T21:00:08Z,MERGED,True,2,2,3,https://github.com/rcornwell,I7000: Fixed type inconsistencies.,1,[],https://github.com/simh/simh/pull/776,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/776,,,True,{}
simh/simh,https://github.com/simh/simh,777,2019-12-10T07:44:45Z,2019-12-10T08:39:40Z,2019-12-10T08:39:40Z,MERGED,True,16,248,22,https://github.com/psco,AltairZ80: Replace WIN32 dependencies with SIMH API calls and remove …,1,[],https://github.com/simh/simh/pull/777,https://github.com/psco,1,https://github.com/simh/simh/pull/777,…redundant includes,…redundant includes,True,{}
simh/simh,https://github.com/simh/simh,778,2019-12-11T03:13:36Z,2019-12-11T05:25:12Z,2019-12-11T05:25:13Z,CLOSED,False,4,2,1,https://github.com/deltecent,TARBELL: Properly set current drive and drive not ready flag on reset,1,[],https://github.com/simh/simh/pull/778,https://github.com/deltecent,1,https://github.com/simh/simh/pull/778,"Fixes problem with current drive and drive not ready flags being set incorrect upon device reset. This was also causing ""boot tarbell"" to fail.","Fixes problem with current drive and drive not ready flags being set incorrect upon device reset. This was also causing ""boot tarbell"" to fail.",True,{}
simh/simh,https://github.com/simh/simh,778,2019-12-11T03:13:36Z,2019-12-11T05:25:12Z,2019-12-11T05:25:13Z,CLOSED,False,4,2,1,https://github.com/deltecent,TARBELL: Properly set current drive and drive not ready flag on reset,1,[],https://github.com/simh/simh/pull/778,https://github.com/markpizz,2,https://github.com/simh/simh/pull/778#issuecomment-564385534,"Fixes problem with current drive and drive not ready flags being set incorrect upon device reset. This was also causing ""boot tarbell"" to fail.",Merged with cherry pick.,True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/deltecent,1,https://github.com/simh/simh/pull/779,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/markpizz,2,https://github.com/simh/simh/pull/779#issuecomment-564398461,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,"Unless you say you're really done.  I'm going to hold off on merging this until you do some more testing and collect any other changes.  I screwed up merging your other commits.  I intended to squash them all into a single commit that added the tarbell device, but was distracted by other things and broke my own rules.",True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/markpizz,3,https://github.com/simh/simh/pull/779#issuecomment-564401529,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,"There are couple of conventions we like to follow here:

Commits start with the affected simulator name (or global component) followed by a colon, with a summary of the commit up to 80 characters.  If extra commit message info is appropriate, a blank line follows the first line and then as much extra comments are needed with lines < 80 characters.
Prior to you issuing any commit, you should pull from the github.com/simh/simh master branch and then commit your change and generate a pull request.  If you do this, my merge process is simple and most of the time I can just pull your change(s) and then push it out to the master branch..  The commit rate on this project is very low (usually at most a couple of commits a day, often with days or weeks without any).  Therefore multiple commits from different folks are rare.

I'm specifically mentioning this now since your last pull request has already been merged, and yet this pull request still contains the commit from that request.  When I don't have to rewrite commit message and/or otherwise cherry pick a commit (and then remember to credit you as the author), things go much smoother.",True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/markpizz,4,https://github.com/simh/simh/pull/779#issuecomment-564403248,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,"I'm in no way suggesting that you shouldn't commit your work often, you can follow any pattern you want.  I'm just saying that if you commit often, you can probably collect any number of commits and then generate a pull request.  This lets you manage your own working environment however you want.
Then you can create a dedicated branch squash your own commit sets and pull from github.com/simh/simh master in preparation for a pull request - that pull request can be from a separate temporarily created branch dedicated to the particular pull activity.  After that request is merged you create a new one and go again.",True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/deltecent,5,https://github.com/simh/simh/pull/779#issuecomment-564591066,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,Going to hold off on this PR for now.,True,{}
simh/simh,https://github.com/simh/simh,779,2019-12-11T05:52:20Z,2019-12-11T15:15:17Z,2019-12-11T15:17:04Z,CLOSED,False,25,7,1,https://github.com/deltecent,TARBELL: fix uptr NULL pointer before attach,3,[],https://github.com/simh/simh/pull/779,https://github.com/deltecent,6,https://github.com/simh/simh/pull/779#issuecomment-564591574,Fixes possible NULL pointer when issuing commands to the controller before a disk has been attached.,"Mark, I completely understand and will do my best to follow these conventions.

Patrick
…
 On Dec 10, 2019, at 10:35 PM, Mark Pizzolato ***@***.***> wrote:

 There are couple of conventions we like to follow here:

 	• Commits start with the affected simulator name (or global component) followed by a colon, with a summary of the commit up to 80 characters. If extra commit message info is appropriate, a blank line follows the first line and then as much extra comments are needed with lines < 80 characters.
 	• Prior to you issuing any commit, you should pull from the github.com/simh/simh master branch and then commit your change and generate a pull request. If you do this, my merge process is simple and most of the time I can just pull your change(s) and then push it out to the master branch.. The commit rate on this project is very low (usually at most a couple of commits a day, often with days or weeks without any). Therefore multiple commits from different folks are rare.
 I'm specifically mentioning this now since your last pull request has already been merged, and yet this pull request still contains the commit from that request. When I don't have to rewrite commit message and/or otherwise cherry pick a commit (and then remember to credit you as the author), things go much smoother.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/deltecent,1,https://github.com/simh/simh/pull/783,This version should be ready.,This version should be ready.,True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/markpizz,2,https://github.com/simh/simh/pull/783#issuecomment-566289739,This version should be ready.,"Patrick,
Several things:

in your code you seem to be assuming that the interval argument to sim_activate() is milliseconds.  What the interval value really is is instructions.  Many simulators schedule completion activities for devices using this paradigm and pick a minimal number of instructions that the original hardware would have been able to execute before the device completes the requested operation.  This minimal timing approach has devices which are very responsive when compared to the timing behavior of the original hardware, and since the processor for this simulator is running much faster than the original hardware ran everything is VERY snappy.  In order for this approach to make sense, your time reference needs to not be wall clock time, but the number of instructions executed.  Wall clock time is returned by sim_os_msec(), the number of instructions executed is returned by calls to sim_grtime() or sim_gtime().   If you really want the device to behave with timing characteristics that approximate the speed of the original hardware, then all of your timing activities should be using wall clock values, so sim_os_msec() with calls to sim_activate_after() is the approach you should take.  sim_activate_after() takes wall clock microseconds as its delay value.
I see you calling: sim_cancel() followed immediately by sim_activate().  The sim_activate_abs() achieves this to force scheduling based on instructions.  Similarly there is sim_activate_after_abs() to force scheduling based on wall clock time.
Your git pull request management isn't following the project standards I spelled out earlier:


There are couple of conventions we like to follow here:
Commits start with the affected simulator name (or global component) followed by a colon, with a summary of the commit up to 80 characters. If extra commit message info is appropriate, a blank line follows the first line and then as much extra comments are needed with lines < 80 characters.

The file you're making changes to is s100_tarbell.c, which is a component of the AltairZ80 simulator, so the commit message should start with AltairZ80: with a summary of the changes being made and extra description as needed after a blank line.  Although TARBELL is important to you, it really isn't a global component.  :-)

Prior to you issuing any commit, you should pull from the github.com/simh/simh master branch and then commit your change and generate a pull request. If you do this, my merge process is simple and most of the time I can just pull your change(s) and then push it out to the master branch.. The commit rate on this project is very low (usually at most a couple of commits a day, often with days or weeks without any). Therefore multiple commits from different folks are rare.
I also said:
I'm in no way suggesting that you shouldn't commit your work often, you can follow any pattern you want. I'm just saying that if you commit often, you can probably collect any number of commits and then generate a pull request. This lets you manage your own working environment however you want.
Then you can create a dedicated branch, squash your own commit sets, and pull from github.com/simh/simh master in preparation for a pull request - that pull request can be from a separate temporarily created branch dedicated to the particular pull activity. After that request is merged you create a new branch and go again.  The temporary branch gets dropped and you start from the state in the master branch going forward.

Since, what you are asking me to merge are some minor changes you worked through to the same file, I'm looking for a single commit based on the current HEAD of the master branch containing these changes.  I can quickly merge pull requests submitted this way with just a couple of clicks.  If I've got to squash your commits and compose a summary message about what's been done I won't be in a hurry to merge it.
Let me know if you want to think through these points and make other changes and adjust your process before committing the current stuff.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/deltecent,3,https://github.com/simh/simh/pull/783#issuecomment-566405194,This version should be ready.,"Did I miss the documentation somewhere that explains all this?
…
Sent from my iPhone
 On Dec 16, 2019, at 3:09 PM, Mark Pizzolato ***@***.***> wrote:

 ﻿
 Patrick,

 Several things:

 in your code you seem to be assuming that the interval argument to sim_activate() is milliseconds. What the interval value really is is instructions. Many simulators schedule completion activities for devices using this paradigm and pick a minimal number of instructions that the original hardware would have been able to execute before the device completes the requested operation. This minimal timing approach has devices which are very responsive when compared to the timing behavior of the original hardware, and since the processor for this simulator is running much faster than the original hardware ran everything is VERY snappy. In order for this approach to make sense, your time reference needs to not be wall clock time, but the number of instructions executed. Wall clock time is returned by sim_os_msec(), the number of instructions executed is returned by calls to sim_grtime() or sim_gtime(). If you really want the device to behave with timing characteristics that approximate the speed of the original hardware, then all of your timing activities should be using wall clock values, so sim_os_msec() with calls to sim_activate_after() is the approach you should take. sim_activate_after() takes wall clock microseconds as its delay value.
 I see you calling: sim_cancel() followed immediately by sim_activate(). The sim_activate_abs() achieves this to force scheduling based on instructions. Similarly there is sim_activate_after_abs() to force scheduling based on wall clock time.
 Your git pull request management isn't following the project standards I spelled out earlier:
 There are couple of conventions we like to follow here:

 Commits start with the affected simulator name (or global component) followed by a colon, with a summary of the commit up to 80 characters. If extra commit message info is appropriate, a blank line follows the first line and then as much extra comments are needed with lines < 80 characters.

 The file you're making changes to is s100_tarbell.c, which is a component of the AltairZ80 simulator, so the commit message should start with AltairZ80: with a summary of the changes being made and extra description as needed after a blank line. Although TARBELL is important to you, it really isn't a global component. :-)

 Prior to you issuing any commit, you should pull from the github.com/simh/simh master branch and then commit your change and generate a pull request. If you do this, my merge process is simple and most of the time I can just pull your change(s) and then push it out to the master branch.. The commit rate on this project is very low (usually at most a couple of commits a day, often with days or weeks without any). Therefore multiple commits from different folks are rare.
 I also said:
 I'm in no way suggesting that you shouldn't commit your work often, you can follow any pattern you want. I'm just saying that if you commit often, you can probably collect any number of commits and then generate a pull request. This lets you manage your own working environment however you want.
 Then you can create a dedicated branch, squash your own commit sets, and pull from github.com/simh/simh master in preparation for a pull request - that pull request can be from a separate temporarily created branch dedicated to the particular pull activity. After that request is merged you create a new branch and go again. The temporary branch gets dropped and you start from the state in the master branch going forward.

 Since, what you are asking me to merge are some minor changes you worked through to the same file, I'm looking for a single commit based on the current HEAD of the master branch containing these changes. I can quickly merge pull requests submitted this way with just a couple of clicks. If I've got to squash your commits and compose a summary message about what's been done I won't be in a hurry to merge it.

 Let me know if you want to think through these points and make other changes and adjust your process before committing the current stuff.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/markpizz,4,https://github.com/simh/simh/pull/783#issuecomment-566548456,This version should be ready.,"The documentation about the API's can be found in the doc/simh.doc.
This describes the specific API, but it doesn't cover the philosophical choice that a simulator developer gets to make regarding the goals of the simulator (or device simulator) that they're writing.  The choice is either 1) design something that will run all historical software that ran on or against the target simulator, or 2) design something that really feels like how the original system behaved while also running the original software.  ""Feels"" like here relates to wall clock timing.  The choice of which philosophy to take often depends on what kind of device is being implemented and how the original device ""interacted"" with a user.  Both of these choices can produce an accurate simulation.  Your choice of the different APIs you are using made it clear that you didn't understand how these things worked and thus mixed these different goals without understanding the consequences.  It was a lack of understanding/experience on your part, which I'm trying to educate you about.
I noticed these things since your pull request didn't follow the project's ""simple to merge"" pull request strategy and I had to dig into the scattered set of patches to come up with a single ""squashed"" change set and commit message.
After I first explained about the pull request ""easy to merge"" project philosophy, if you didn't understand precisely what I was talking about, you could have asked for details.  Since you didn't ask, but you once again presented a new pull request I had to look at what was happening with a microscope before I could merge it.
If you really want your latest change set merged into the master branch, I can do that, but given the mixed API set that I saw when I looked through things, it would seem that you might want to take a different stab at how you're doing things.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/deltecent,5,https://github.com/simh/simh/pull/783#issuecomment-566612858,This version should be ready.,"I thought I understood the merge process. I misunderstood using ""TARBELL:"" instead of ""AltairZ80:""

I was mostly interested in the APIs. I've been trying to understand them by looking at the source and other software. I never did really understand the timer mechanisms. The only time I'm attempting to reproduce is 2 revolutions of the floppy disk before the head unloads. Not really important for anyone. But I wanted it because I'm writing a diagnostic tool (which is working great now, thanks to most of the work being done on the simulator).

I am certainly going to look at changing the timer work. I just therw numbers in there until it worked. I'm glad you pointed out the more proper way to do it.

I also work on ElvishArtisan/rivendell on GitHub. It took a while to learn their paradigms too.

Patrick
…
 On Dec 17, 2019, at 5:48 AM, Mark Pizzolato ***@***.***> wrote:

 The documentation about the API's can be found in the doc/simh.doc.

 This describes the specific API, but it doesn't cover the philosophical choice that a simulator developer gets to make regarding the goals of the simulator (or device simulator) that they're writing. The choice is either 1) design something that will run all historical software that ran on or against the target simulator, or 2) design something that really feels like how the original system behaved while also running the original software. ""Feels"" like here relates to wall clock timing. The choice of which philosophy to take often depends on what kind of device is being implemented and how the original device ""interacted"" with a user. Both of these choices can produce an accurate simulation. Your choice of the different APIs you are using made it clear that you didn't understand how these things worked and thus mixed these different goals without understanding the consequences. It was a lack of understanding/experience on your part, which I'm trying to educate you about.

 I noticed these things since your pull request didn't follow the project's ""simple to merge"" pull request strategy and I had to dig into the scattered set of patches to come up with a single ""squashed"" change set and commit message.

 After I first explained about the pull request ""easy to merge"" project philosophy, if you didn't understand precisely what I was talking about, you could have asked for details. Since you didn't ask, but you once again presented a new pull request I had to look at what was happening with a microscope before I could merge it.

 If you really want your latest change set merged into the master branch, I can do that, but given the mixed API set that I saw when I looked through things, it would seem that you might want to take a different stab at how you're doing things.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/markpizz,6,https://github.com/simh/simh/pull/783#issuecomment-566677505,This version should be ready.,"Useful info about using git to squash several commits:  https://stackoverflow.com/questions/6934752/combining-multiple-commits-before-pushing-in-git
Once your pull request has been merged into the master branch (either directly or by some local manipulation on my part), you pretty much always want to discard (delete) the branch you were working in for those changes.  Later on, you add new changes starting from the then current contents of the github.com/simh/simh/master branch.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/deltecent,7,https://github.com/simh/simh/pull/783#issuecomment-566788667,This version should be ready.,"Ah, I now see what you're getting at... yes, I will rebase and put in a correct commit comment.

Thank you for your patience.

Patrick
…
 On Dec 17, 2019, at 9:59 AM, Mark Pizzolato ***@***.***> wrote:

 Useful info about using git to squash several commits: https://stackoverflow.com/questions/6934752/combining-multiple-commits-before-pushing-in-git

 Once your pull request has been merged into the master branch (either directly or by some local manipulation on my part), you pretty much always want to discard (delete) the branch you were working in for those changes. Later on, you add new changes starting from the then current contents of the github.com/simh/simh/master branch.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/deltecent,8,https://github.com/simh/simh/pull/783#issuecomment-566803120,This version should be ready.,"I now have the timer working as you specified. It works much better.

The AltairZ80 emulator has an option to sleep between keyboard input checks. This seems to impact the event timers. Do you know if there is a way for the Tarbell device to check if the SIO device Unit 0 has the UNIT_SIO_SLEEP option enabled and adjust the usec time accordingly?

Thank you,

Patrick
…
 On Dec 17, 2019, at 9:59 AM, Mark Pizzolato ***@***.***> wrote:

 Useful info about using git to squash several commits: https://stackoverflow.com/questions/6934752/combining-multiple-commits-before-pushing-in-git

 Once your pull request has been merged into the master branch (either directly or by some local manipulation on my part), you pretty much always want to discard (delete) the branch you were working in for those changes. Later on, you add new changes starting from the then current contents of the github.com/simh/simh/master branch.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/markpizz,9,https://github.com/simh/simh/pull/783#issuecomment-567949600,This version should be ready.,"The AltairZ80 emulator has an option to sleep between keyboard input checks. This seems to impact the event timers. Do you know if there is a way for the Tarbell device to check if the SIO device Unit 0 has the UNIT_SIO_SLEEP option enabled and adjust the usec time accordingly?

I don't actually.  The AltairZ80 simulator is Peter Schorn's (@psco) baby.  I'm pretty sure that this simulator existed before the simh framework had idle support (not waste host CPU cycles when the simulator knew that no useful progress would be made until something external to the simulator happened).  When idle support is leveraged by the simulator (calling sim_idle() during idle times), the simulator timing activities are very well behaved.  Any direct calling of sim_os_sleep() will interfere with the framework's management of timing activities.",True,{}
simh/simh,https://github.com/simh/simh,783,2019-12-16T22:21:46Z,2019-12-20T14:51:14Z,2020-06-30T22:22:23Z,CLOSED,False,79,54,1,https://github.com/deltecent,AltairZ80: adds Tarbell SSSD disk interface,10,[],https://github.com/simh/simh/pull/783,https://github.com/markpizz,10,https://github.com/simh/simh/pull/783#issuecomment-567950950,This version should be ready.,"You properly reorganized the commits against the master branch, so I closing this pull request.
The discussion about ""idle"" may be worth bringing up with @psco, but since what's there now has been there forever and it works, I'm not sure much reorganization is appropriate.",True,{}
simh/simh,https://github.com/simh/simh,786,2019-12-19T22:38:32Z,2019-12-19T22:54:47Z,2019-12-19T22:54:48Z,CLOSED,False,12,12,1,https://github.com/bscottm,Fix CreateVirtualDisk name clash with Windows VD API,1,[],https://github.com/simh/simh/pull/786,https://github.com/bscottm,1,https://github.com/simh/simh/pull/786,"Room for all kinds of snarky comments about virtual disks and VD. Still, the name clash needs to be resolved. One such proposal is below.
Apologies for all of the extraneous NOP commits that dragged along.","Room for all kinds of snarky comments about virtual disks and VD. Still, the name clash needs to be resolved. One such proposal is below.
Apologies for all of the extraneous NOP commits that dragged along.",True,{}
simh/simh,https://github.com/simh/simh,786,2019-12-19T22:38:32Z,2019-12-19T22:54:47Z,2019-12-19T22:54:48Z,CLOSED,False,12,12,1,https://github.com/bscottm,Fix CreateVirtualDisk name clash with Windows VD API,1,[],https://github.com/simh/simh/pull/786,https://github.com/bscottm,2,https://github.com/simh/simh/pull/786#issuecomment-567713706,"Room for all kinds of snarky comments about virtual disks and VD. Still, the name clash needs to be resolved. One such proposal is below.
Apologies for all of the extraneous NOP commits that dragged along.",Closing. Performed surgery on my repo for better pull request.,True,{}
simh/simh,https://github.com/simh/simh,787,2019-12-19T22:56:50Z,2019-12-21T18:41:06Z,2019-12-21T18:41:06Z,CLOSED,False,12,12,1,https://github.com/bscottm,Fix Windows VD API name clash,1,[],https://github.com/simh/simh/pull/787,https://github.com/bscottm,1,https://github.com/simh/simh/pull/787,"There's more than enough room for snarky and creative commends about virtual disks and the abbreviation ""VD"". :-)
Nonetheless, proposed name changes to allow MinGW-W64/MSYS2 compiles to move forward:
CreateVirtualDisk             -> ConstructVHD
CreateDifferencingVirtualDisk -> ConstructDifferencingVHD","There's more than enough room for snarky and creative commends about virtual disks and the abbreviation ""VD"". :-)
Nonetheless, proposed name changes to allow MinGW-W64/MSYS2 compiles to move forward:
CreateVirtualDisk             -> ConstructVHD
CreateDifferencingVirtualDisk -> ConstructDifferencingVHD",True,{}
simh/simh,https://github.com/simh/simh,788,2019-12-20T05:52:29Z,2019-12-20T14:46:05Z,2019-12-20T14:46:05Z,MERGED,True,109,57,1,https://github.com/deltecent,AltairZ80: Adjust head unload timer usec value for SIO sleep/no sleep setting,1,[],https://github.com/simh/simh/pull/788,https://github.com/deltecent,1,https://github.com/simh/simh/pull/788,,,True,{}
simh/simh,https://github.com/simh/simh,789,2019-12-27T20:18:41Z,2019-12-28T09:26:39Z,2019-12-28T09:26:40Z,CLOSED,False,4,3,1,https://github.com/rcornwell,B5500: Fixed DTC to fix error caused by SCP changes,2,[],https://github.com/simh/simh/pull/789,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/789,,,True,{}
simh/simh,https://github.com/simh/simh,789,2019-12-27T20:18:41Z,2019-12-28T09:26:39Z,2019-12-28T09:26:40Z,CLOSED,False,4,3,1,https://github.com/rcornwell,B5500: Fixed DTC to fix error caused by SCP changes,2,[],https://github.com/simh/simh/pull/789,https://github.com/rcornwell,2,https://github.com/simh/simh/pull/789#issuecomment-569351859,,"I know why the change was put into place.
I can change the code to put out a ^S and ^Q if that is better.",True,{}
simh/simh,https://github.com/simh/simh,789,2019-12-27T20:18:41Z,2019-12-28T09:26:39Z,2019-12-28T09:26:40Z,CLOSED,False,4,3,1,https://github.com/rcornwell,B5500: Fixed DTC to fix error caused by SCP changes,2,[],https://github.com/simh/simh/pull/789,https://github.com/markpizz,3,https://github.com/simh/simh/pull/789#issuecomment-569378044,,"My last comment was done from my phone, without a clear view of what was really there.
You avoid the NUL in the debug output by:
                 if (c1 != 0)
                     sim_debug(DEBUG_DATA, &dtc_dev,
                        ""Datacomm transmit %d %02o %c\n"", ln, c&077, c1);

How about sticking with logging every output character, since it might be useful:
                 sim_debug(DEBUG_DATA, &dtc_dev,
                         ""Datacomm transmit %d %02o->0%o %c\n"", ln, c&077, c1, isalnum(cl) ? cl : '.');


Why bother masking c with 077 in the debug statement, when you've already used the unmasked value in the line:
c1 = con_to_ascii[c];",True,{}
simh/simh,https://github.com/simh/simh,789,2019-12-27T20:18:41Z,2019-12-28T09:26:39Z,2019-12-28T09:26:40Z,CLOSED,False,4,3,1,https://github.com/rcornwell,B5500: Fixed DTC to fix error caused by SCP changes,2,[],https://github.com/simh/simh/pull/789,https://github.com/rcornwell,4,https://github.com/simh/simh/pull/789#issuecomment-569388001,,Try this change.,True,{}
simh/simh,https://github.com/simh/simh,789,2019-12-27T20:18:41Z,2019-12-28T09:26:39Z,2019-12-28T09:26:40Z,CLOSED,False,4,3,1,https://github.com/rcornwell,B5500: Fixed DTC to fix error caused by SCP changes,2,[],https://github.com/simh/simh/pull/789,https://github.com/markpizz,5,https://github.com/simh/simh/pull/789#issuecomment-569401423,,Squashed two commits with rebase.,True,{}
simh/simh,https://github.com/simh/simh,790,2020-01-05T23:19:37Z,2020-01-06T18:43:49Z,2020-01-10T00:18:49Z,CLOSED,False,68,20,12,https://github.com/bscottm,"MS CRT deprecation: Use ""ISO names"" vice POSIX.",1,[],https://github.com/simh/simh/pull/790,https://github.com/bscottm,1,https://github.com/simh/simh/pull/790,"sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)","sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)",True,{}
simh/simh,https://github.com/simh/simh,790,2020-01-05T23:19:37Z,2020-01-06T18:43:49Z,2020-01-10T00:18:49Z,CLOSED,False,68,20,12,https://github.com/bscottm,"MS CRT deprecation: Use ""ISO names"" vice POSIX.",1,[],https://github.com/simh/simh/pull/790,https://github.com/markpizz,2,https://github.com/simh/simh/pull/790#issuecomment-571198233,"sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)","Let's hold off on ""solving"" the problem of MS removing one or more routines if/when it actually arises.  These C run time routines have been around for a very long time.  Some/all may have alternate implementations or slightly different ""safer"" APIs, but I believe that Microsoft has done all they ever will do (i.e. issue the warnings they do now and provide a reasonable way to suppress those warnings).  If you can cite an example of any vendor who has actually removed one of these (or similar) routines from the C specified run time library, we can talk about it.
You may have seen the apparent replacement of many/most/all of the ctype.h character classification routines as a possible example of why we should do this, but those routines were added when it became apparent that the MS provided routines were actually broken.  The implementation of the MS implemented <ctype.h> routines took the character argument and used it as an index into a table with attributes for each character.  The broken part was that the routines only worked when the character being examined was between 0 and 127.  Characters between 128 and 255 were working as negative indexes into this classification array and went off into the weeds.  We saw characters with greater than 127 values when some users came along and had non-ansi native character sets.  When the MS ctype.h problem was first noticed, an effort was initially made to try to change all the code that used these routines to be changed to explicitly call the locally implemented routines.  It became apparent that trying to change all the current and future code to call the sim_xxx implementations was going to be a tail chasing effort.  I realized that a better solution was to 1) include the native local ctype.h, 2) #undefine any macro implementations of these routines and then 3) #define a macro for each name to call the local implementation.  This works reliably since sim_defs.h #includes <ctype.h> at the top to be sure that the C #include guard for that routine will get defined and that will implicitly protect any macros which are defined locally in the event that a user #includes <ctype.h> after #including sim_defs.h.  When MS (or some other vendor) actually removes one of the routines you're addressing here, the same approach should be taken in sim_defs.h, but let's wait until it actually is needed.",True,{}
simh/simh,https://github.com/simh/simh,790,2020-01-05T23:19:37Z,2020-01-06T18:43:49Z,2020-01-10T00:18:49Z,CLOSED,False,68,20,12,https://github.com/bscottm,"MS CRT deprecation: Use ""ISO names"" vice POSIX.",1,[],https://github.com/simh/simh/pull/790,https://github.com/bscottm,3,https://github.com/simh/simh/pull/790#issuecomment-571259148,"sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)","ctype.h is an interesting corner case that has functionality issues. These, by contrast, are not functional changes, specifically, just renames to reduce deprecation warnings (which, obviously, can be turned off with the _CRT_NONSTDC_NO_WARNINGS manifest constant.) That notwithstanding, source should compile with the minimal set of warnings without manifest constants that silence them.
Patch is obviously here when you think it is necessary.",True,{}
simh/simh,https://github.com/simh/simh,790,2020-01-05T23:19:37Z,2020-01-06T18:43:49Z,2020-01-10T00:18:49Z,CLOSED,False,68,20,12,https://github.com/bscottm,"MS CRT deprecation: Use ""ISO names"" vice POSIX.",1,[],https://github.com/simh/simh/pull/790,https://github.com/Rhialto,4,https://github.com/simh/simh/pull/790#issuecomment-572784792,"sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)","On Mon 06 Jan 2020 at 08:06:48 -0800, Mark Pizzolato wrote:
 You may have seen the apparent replacement of many/most/all of the
 ctype.h character classification routines as a possible example of why
 we should do this, but those routines were added when it became
 apparent that the MS provided routines were actually broken.  The
 implementation of the MS implemented <ctype.h> routines took the
 character argument and used it as an index into a table with
 attributes for each character.  The broken part was that the routines
 only worked when the character being examined was between 0 and 127.
 Characters between 128 and 255 were working as negative indexes into
 this classification array and went off into the weeds.  We saw
 characters with greater than 127 values when some users came along and
 had non-ansi native character sets.  When the MS ctype.h problem was
Well *that* sort of implementation is actually very much allowed by the
relevant standards.  The ctype functions or macros, such as isalpha(),
are declared to take int parameters (to be compatible with history, I
presume). If you give them a char, it will be converted to int. But of
course the char may signed, hence ""values between 128 and 255"" don't
exist in that case. Instead you (most likely) get negative values and
any value differing from EOF lands you in the ""undefined behaviour""
terrirory.

Here is a fragment from the NetBSD manual ctype(3):
```
STANDARDS
     These functions, with the exception of isblank(), conform to ANSI
     X3.159-1989 (""ANSI C89"").  All described functions, including isblank(),
     also conform to IEEE Std 1003.1-2001 (""POSIX.1"").

CAVEATS
     The first argument of these functions is of type int, but only a very
     restricted subset of values are actually valid.  The argument must either
     be the value of the macro EOF (which has a negative value), or must be a
     non-negative value within the range representable as unsigned char.
     Passing invalid values leads to undefined behavior.

     Values of type int that were returned by getc(3), fgetc(3), and similar
     functions or macros are already in the correct range, and may be safely
     passed to these ctype functions without any casts.

     Values of type char or signed char must first be cast to unsigned char,
     to ensure that the values are within the correct range.  Casting a
     negative-valued char or signed char directly to int will produce a
     negative-valued int, which will be outside the range of allowed values
     (unless it happens to be equal to EOF, but even that would not give the
     desired result).
```
n1570 (the C11 draft document, which is the freely available version
most close to the C11 standard; http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf )
says the same, more briefly:
```
7.4 [Character handling ]

1   The header <ctype.h> declares several functions useful for classifying and mapping
    characters.198) In all cases the argument is an int, the value of which shall be
    representable as an unsigned char or shall equal the value of the macro EOF. If the
    argument has any other value, the behavior is undefined.
```

Yes, it is annoying, but either one uses unsigned char everywhere, or
uses char with casts to unsigned char. Or one uses replacement
functions/macros with such a strategy.
…
-Olaf.
-- 
Olaf 'Rhialto' Seibert -- rhialto at falu dot nl
___  Anyone who is capable of getting themselves made President should on
\X/  no account be allowed to do the job.       --Douglas Adams, ""THGTTG""",True,{}
simh/simh,https://github.com/simh/simh,790,2020-01-05T23:19:37Z,2020-01-06T18:43:49Z,2020-01-10T00:18:49Z,CLOSED,False,68,20,12,https://github.com/bscottm,"MS CRT deprecation: Use ""ISO names"" vice POSIX.",1,[],https://github.com/simh/simh/pull/790,https://github.com/markpizz,5,https://github.com/simh/simh/pull/790#issuecomment-572816628,"sim_iso_names.h provides the shim to rename functions that the MS CRT
considers ""deprecated"".  Added to future-proof the simh code base when
MS eventually decides to fully remove them from the CRT.
Can remove _CRT_NONSTDC_NO_WARNINGS from MSVC build.
(Close the pull request if not interested.)","Yes, it is annoying, but either one uses unsigned char everywhere, or
uses char with casts to unsigned char. Or one uses replacement
functions/macros with such a strategy.

All true, thus the replacement ctype functions are implemented and used via new macros pointing at these functions.  This is deliberate since these functions (macros) are used to act on user input which has proven to possibly included signed characters which have the high bit set.  I brought these into the discussion as an example of how/why replacement functions are sometimes justified in simh.
Meanwhile, this patch was about replacements for things like:
chdir(), unlink(), strdup(), mktemp(), mkdir(), fileno(), etc. which all work fine now but the MS compiler spits out a warning about being deprecated.  If any other system also warned about any of these, we might adopt a change, but these warnings are unique to MS and easily suppressed by compiling with _CRT_NONSTDC_NO_WARNINGS.  The choice is either compile with this #define, or change many places in the code now and future submissions to avoid these warnings that can safely be ignored.  This to me isn't a change that fixes a problem, but one that possibly adds more problems migrating to the replacement APIs when future simulators and/or simulated devices are added.",True,{}
simh/simh,https://github.com/simh/simh,792,2020-01-20T11:00:38Z,2020-01-20T18:06:51Z,2020-01-20T18:06:51Z,MERGED,True,9,0,1,https://github.com/mengstr,PDP8: Fix prematurely stopped diag test,1,[],https://github.com/simh/simh/pull/792,https://github.com/mengstr,1,https://github.com/simh/simh/pull/792,The D0AB (PDP-8: Basic Instruction Test 1) stops after just three instructions to let the operator verify that the CLA and HLT instructions works properly. After that the operator is expected to press the CONT switch to continue to the rest of the tests in the diag.,The D0AB (PDP-8: Basic Instruction Test 1) stops after just three instructions to let the operator verify that the CLA and HLT instructions works properly. After that the operator is expected to press the CONT switch to continue to the rest of the tests in the diag.,True,{}
simh/simh,https://github.com/simh/simh,795,2020-01-30T03:34:56Z,2020-01-30T04:30:20Z,2020-01-30T04:30:20Z,MERGED,True,1,0,1,https://github.com/rcornwell,B5500: Fix error with punch of binary data.,1,[],https://github.com/simh/simh/pull/795,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/795,,,True,{}
simh/simh,https://github.com/simh/simh,796,2020-01-30T05:37:11Z,2020-01-30T10:08:58Z,2020-02-04T00:10:48Z,CLOSED,False,4,4,2,https://github.com/markpizz,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/796,https://github.com/markpizz,1,https://github.com/simh/simh/pull/796,"Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...","Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...",True,{}
simh/simh,https://github.com/simh/simh,796,2020-01-30T05:37:11Z,2020-01-30T10:08:58Z,2020-02-04T00:10:48Z,CLOSED,False,4,4,2,https://github.com/markpizz,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/796,https://github.com/rcornwell,2,https://github.com/simh/simh/pull/796#issuecomment-580106372,"Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...","I will have to verify these changes don't break anything.
I have pulled in the latest SCP as of today. I pulled the sim_card changes in the other day.",True,{}
simh/simh,https://github.com/simh/simh,796,2020-01-30T05:37:11Z,2020-01-30T10:08:58Z,2020-02-04T00:10:48Z,CLOSED,False,4,4,2,https://github.com/markpizz,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/796,https://github.com/markpizz,3,https://github.com/simh/simh/pull/796#issuecomment-580138232,"Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...","I looked at this carefully.  print_opcode is called in 3 places:

in b5500_cpu.c with an explicit uint16 argument from the saved history record.
in b5500_sys.c/344 with what was an int argument that is computed with a shift and then a masked with 07777.  I changed the int to uint16.
in b5500_sys.c/413 with what was an int argument that is computed with a shift and then a masked with 07777.  I changed the int to uint16.

I merely created this a pull request to show you the code and give you the choice of either doing it this way or merely casting the t_value to uint16 inside of print_opcode.  Since all the callers are really dealing with 12 or 16 bits of data, it seemed appropriate to change the argument type from t_value to uint16.",True,{}
simh/simh,https://github.com/simh/simh,796,2020-01-30T05:37:11Z,2020-01-30T10:08:58Z,2020-02-04T00:10:48Z,CLOSED,False,4,4,2,https://github.com/markpizz,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/796,https://github.com/markpizz,4,https://github.com/simh/simh/pull/796#issuecomment-580180567,"Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...","I'm closing this pull request now since someone else has also generated another pull request and the change history won't be sequential.
Please let me know if the change I suggested was OK and I'll merge the commit behind other changes which are happening.",True,{}
simh/simh,https://github.com/simh/simh,796,2020-01-30T05:37:11Z,2020-01-30T10:08:58Z,2020-02-04T00:10:48Z,CLOSED,False,4,4,2,https://github.com/markpizz,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/796,https://github.com/rcornwell,5,https://github.com/simh/simh/pull/796#issuecomment-580282286,"Some compilers correctly generate this warning:
simh-markpizz\B5500\b5500_sys.c(349,13): warning C4244: '=': conversion from 't_value' to 'uint
16', possible loss of data [C:\Users\Mark\Documents\simh-markpizz\BIN\cmake-vs2019\b5500.vcxproj]
This is one way to fix this.  A direct cast would be fewer changes, but all the input data is already uint16 or even 12 bits, so this seemed appropriate.
OK to merge.
BTW, there was a minor change to sim_card.c recently which you should migrate back to your repo...","This looks ok, I will apply it to my repo and push it over to the main simh tonight.",True,{}
simh/simh,https://github.com/simh/simh,797,2020-01-30T08:59:58Z,2020-01-30T10:26:38Z,2020-01-30T10:26:38Z,MERGED,True,4,2,1,https://github.com/psco,AltairZ80: Fix Coverity detected issues in s100_tarbell.c,1,[],https://github.com/simh/simh/pull/797,https://github.com/psco,1,https://github.com/simh/simh/pull/797,,,True,{}
simh/simh,https://github.com/simh/simh,798,2020-01-31T02:38:07Z,2020-01-31T08:21:56Z,2020-01-31T08:21:56Z,CLOSED,False,4,4,2,https://github.com/rcornwell,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/798,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/798,,,True,{}
simh/simh,https://github.com/simh/simh,798,2020-01-31T02:38:07Z,2020-01-31T08:21:56Z,2020-01-31T08:21:56Z,CLOSED,False,4,4,2,https://github.com/rcornwell,B5500: Avoid potential truncataion warning with type consistency,1,[],https://github.com/simh/simh/pull/798,https://github.com/markpizz,2,https://github.com/simh/simh/pull/798#issuecomment-580633613,,"Somehow I didn't get the notice about this pull request until after another commit had been made and then pushed out to the master branch.  I picked up this commit with a Cherry Pick.  As a result the tip of your master branch is not in sync with the github.com/simh/simh master branch.
   $ git reset --hard HEAD^
   $ git push -f ..

should fix things up for you.",True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/800,As discussed in rcornwell/sims#179,As discussed in rcornwell/sims#179,True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/800#issuecomment-583470763,As discussed in rcornwell/sims#179,"This adds to sim_video.h:
typedef void (*VID_GAMEPAD_CALLBACK)(int, int, int);
t_stat vid_register_gamepad_motion_callback (VID_GAMEPAD_CALLBACK);
t_stat vid_register_gamepad_button_callback (VID_GAMEPAD_CALLBACK);

This makes it possible to register functions to be called back when a joystick or game controller event happens.
A motion event will supply the unit, the axis, and the value.  Values are in the range -32678 to 32676.
A button event will supply the unit, the button, and the state.  The state is 1 for pushed, and 0 for released.",True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/800#issuecomment-583476269,As discussed in rcornwell/sims#179,Further development is planned: #799,True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/markpizz,4,https://github.com/simh/simh/pull/800#issuecomment-583665378,As discussed in rcornwell/sims#179,"I should have checked this earlier, but please fix this warning:
./sim_video.c: In function ‘void vid_controller_button(SDL_ControllerButtonEvent*)’:
./sim_video.c:1309:55: error: invalid conversion from ‘Uint8 {aka unsigned char}’ to ‘SDL_GameControllerButton’ [-fpermissive]
     b = SDL_GameControllerGetBindForButton (c, event->button);
                                                ~~~~~~~^~~~~~
In file included from /usr/include/SDL2/SDL_events.h:37:0,
                 from /usr/include/SDL2/SDL.h:41,
                 from ./sim_video.h:229,
                 from ./sim_video.c:30:
/usr/include/SDL2/SDL_gamecontroller.h:336:1: note:   initializing argument 2 of ‘SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(SDL_GameController*, SDL_GameControllerButton)’
 SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

visible with:
    $ make GCC=g++ pdp11",True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/markpizz,5,https://github.com/simh/simh/pull/800#issuecomment-583858911,As discussed in rcornwell/sims#179,"Looking at the routine that the error I'm seeing is reported in and you've still got some compile time version checking going on.  The API's that the your game controller support are using were present in earlier versions of SDL2, but they just didn't work due to an internal error.  The checks against the runtime SDL2 version are more than sufficient, right?",True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/800#issuecomment-583866561,As discussed in rcornwell/sims#179,"The one compile time check is there to avoid a compile time error, yet allow using SDL 2.0.0-2.0.3.
I believe the ""game controller"" API was added with SDL 2.0.0.  SDL1 only had the joystick API.
My code depends on SDL_GameControllerFromInstanceID being present, which was added in SDL 2.0.4.  If some were to compile against 2.0.3 or earlier, the compile time check will avoid a compile time error.  And the run time check will fall back to the joystick API.",True,{}
simh/simh,https://github.com/simh/simh,800,2020-02-07T15:59:49Z,2020-02-07T16:58:12Z,2020-02-09T16:45:20Z,MERGED,True,190,3,2,https://github.com/larsbrinkhoff,VIDEO: Add support for SDL2 game controllers,2,[],https://github.com/simh/simh/pull/800,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/800#issuecomment-583866611,As discussed in rcornwell/sims#179,The fix for the g++ compile error is in #803.,True,{}
simh/simh,https://github.com/simh/simh,802,2020-02-07T20:14:31Z,2020-02-07T21:34:42Z,2020-02-09T14:48:24Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,display: Add display_close.,1,[],https://github.com/simh/simh/pull/802,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/802,"As per request.
Adds to display.h:
extern void display_close(void *dptr); 

Used to close a display and associated resources.  Should be called from SIMH device reset routines when DEV_DIS is off.","As per request.
Adds to display.h:
extern void display_close(void *dptr); 

Used to close a display and associated resources.  Should be called from SIMH device reset routines when DEV_DIS is off.",True,{}
simh/simh,https://github.com/simh/simh,802,2020-02-07T20:14:31Z,2020-02-07T21:34:42Z,2020-02-09T14:48:24Z,MERGED,True,17,0,2,https://github.com/larsbrinkhoff,display: Add display_close.,1,[],https://github.com/simh/simh/pull/802,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/802#issuecomment-583592839,"As per request.
Adds to display.h:
extern void display_close(void *dptr); 

Used to close a display and associated resources.  Should be called from SIMH device reset routines when DEV_DIS is off.","Opened as a draft.  I will add calls to PDP11, PDP18b, PDP1, and TX-0 as appropriate.",True,{}
simh/simh,https://github.com/simh/simh,803,2020-02-09T15:02:38Z,2020-02-09T21:16:41Z,2020-02-09T21:16:41Z,CLOSED,False,2,1,1,https://github.com/larsbrinkhoff,video: SDL_ControllerButtonEvent button conversion.,1,[],https://github.com/simh/simh/pull/803,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/803,Uint8 needs casting to SDL_GameControllerButton.,Uint8 needs casting to SDL_GameControllerButton.,True,{}
simh/simh,https://github.com/simh/simh,803,2020-02-09T15:02:38Z,2020-02-09T21:16:41Z,2020-02-09T21:16:41Z,CLOSED,False,2,1,1,https://github.com/larsbrinkhoff,video: SDL_ControllerButtonEvent button conversion.,1,[],https://github.com/simh/simh/pull/803,https://github.com/markpizz,2,https://github.com/simh/simh/pull/803#issuecomment-583894384,Uint8 needs casting to SDL_GameControllerButton.,Merged via Cherry Pick since other commits had already been made almost simultaneously,True,{}
simh/simh,https://github.com/simh/simh,799,2020-02-11T20:03:33Z,2020-02-11T20:45:44Z,2020-02-11T20:46:42Z,MERGED,True,78,1,2,https://github.com/larsbrinkhoff,"PDP-1, PDP-11: USB gamepad/joystick support",2,[],https://github.com/simh/simh/pull/799,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/799,"When this KA10 pull request is done, I'd like to do the same for PDP-1 Spacewar and PDP-11 Dazzle Dart.","When this KA10 pull request is done, I'd like to do the same for PDP-1 Spacewar and PDP-11 Dazzle Dart.",True,{}
simh/simh,https://github.com/simh/simh,799,2020-02-11T20:03:33Z,2020-02-11T20:45:44Z,2020-02-11T20:46:42Z,MERGED,True,78,1,2,https://github.com/larsbrinkhoff,"PDP-1, PDP-11: USB gamepad/joystick support",2,[],https://github.com/simh/simh/pull/799,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/799#issuecomment-583476652,"When this KA10 pull request is done, I'd like to do the same for PDP-1 Spacewar and PDP-11 Dazzle Dart.",Update.  When #800 is done.,True,{}
simh/simh,https://github.com/simh/simh,805,2020-02-18T10:56:48Z,2020-02-18T11:37:10Z,2020-02-18T11:37:11Z,MERGED,True,4,2,2,https://github.com/psco,AltairZ80: Fix error handling of bad IMD disks and sector size comput…,1,[],https://github.com/simh/simh/pull/805,https://github.com/psco,1,https://github.com/simh/simh/pull/805,…ation,…ation,True,{}
simh/simh,https://github.com/simh/simh,806,2020-02-23T03:03:21Z,2020-02-23T03:07:32Z,2020-02-23T03:07:32Z,MERGED,True,1,1,1,https://github.com/rcornwell,CARD: Clean up typo from Coverity fix.,1,[],https://github.com/simh/simh/pull/806,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/806,Fixed minor error in sim_card.c with Binary card image format cards.,Fixed minor error in sim_card.c with Binary card image format cards.,True,{}
simh/simh,https://github.com/simh/simh,807,2020-02-25T05:43:24Z,2020-02-25T05:47:34Z,2020-02-25T05:50:54Z,MERGED,True,20,7,2,https://github.com/larsbrinkhoff,Display/video fixes.,2,[],https://github.com/simh/simh/pull/807,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/807,"If there is more than one display device and they call display_close from their reset routines, they will conflict.  This adds a check that only the device that opened the display is allowed to close it.
The other commit is a cleanup as per SDL documentation.  Maybe it's harmless to initialize and quit both subsystems, but I'd rather err on the side of cautiousness here.","If there is more than one display device and they call display_close from their reset routines, they will conflict.  This adds a check that only the device that opened the display is allowed to close it.
The other commit is a cleanup as per SDL documentation.  Maybe it's harmless to initialize and quit both subsystems, but I'd rather err on the side of cautiousness here.",True,{}
simh/simh,https://github.com/simh/simh,807,2020-02-25T05:43:24Z,2020-02-25T05:47:34Z,2020-02-25T05:50:54Z,MERGED,True,20,7,2,https://github.com/larsbrinkhoff,Display/video fixes.,2,[],https://github.com/simh/simh/pull/807,https://github.com/markpizz,2,https://github.com/simh/simh/pull/807#issuecomment-590696252,"If there is more than one display device and they call display_close from their reset routines, they will conflict.  This adds a check that only the device that opened the display is allowed to close it.
The other commit is a cleanup as per SDL documentation.  Maybe it's harmless to initialize and quit both subsystems, but I'd rather err on the side of cautiousness here.","@larsbrinkhoff In the future, please include the rich explanation you provided above in the commit message as well as here.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,807,2020-02-25T05:43:24Z,2020-02-25T05:47:34Z,2020-02-25T05:50:54Z,MERGED,True,20,7,2,https://github.com/larsbrinkhoff,Display/video fixes.,2,[],https://github.com/simh/simh/pull/807,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/807#issuecomment-590696326,"If there is more than one display device and they call display_close from their reset routines, they will conflict.  This adds a check that only the device that opened the display is allowed to close it.
The other commit is a cleanup as per SDL documentation.  Maybe it's harmless to initialize and quit both subsystems, but I'd rather err on the side of cautiousness here.",Ok.,True,{}
simh/simh,https://github.com/simh/simh,808,2020-02-26T21:18:38Z,2020-02-27T02:39:51Z,2020-02-27T02:39:52Z,CLOSED,False,0,0,0,https://github.com/sethm,3b2: Fix incorrect register width,0,[],https://github.com/simh/simh/pull/808,https://github.com/sethm,1,https://github.com/simh/simh/pull/808,"Several registers in the TIMERS device were described as being 16 bits wide, when they are in fact 8 bits wide.","Several registers in the TIMERS device were described as being 16 bits wide, when they are in fact 8 bits wide.",True,{}
simh/simh,https://github.com/simh/simh,809,2020-02-27T01:14:38Z,2020-02-27T01:27:37Z,2020-02-27T01:27:37Z,MERGED,True,4,4,4,https://github.com/rcornwell,Update register definitions.,2,[],https://github.com/simh/simh/pull/809,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/809,Update B5500 and KA10 register definitions.,Update B5500 and KA10 register definitions.,True,{}
simh/simh,https://github.com/simh/simh,810,2020-02-29T00:39:40Z,2020-03-02T15:28:42Z,2020-03-02T15:28:42Z,MERGED,True,44,33,5,https://github.com/rcornwell,I7000: Updated Register definitions for 7080 CPU.,2,[],https://github.com/simh/simh/pull/810,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/810,,,True,{}
simh/simh,https://github.com/simh/simh,811,2020-03-02T16:19:49Z,2020-03-03T18:21:41Z,2020-03-03T18:21:41Z,CLOSED,False,44,44,4,https://github.com/psco,AltairZ80: Update clock register definitions,3,[],https://github.com/simh/simh/pull/811,https://github.com/psco,1,https://github.com/simh/simh/pull/811,,,True,{}
simh/simh,https://github.com/simh/simh,812,2020-03-03T18:25:19Z,2020-03-07T10:20:47Z,2020-03-07T10:20:47Z,CLOSED,False,2,2,1,https://github.com/psco,AltairZ80: Further updates of register definitions,1,[],https://github.com/simh/simh/pull/812,https://github.com/psco,1,https://github.com/simh/simh/pull/812,,,True,{}
simh/simh,https://github.com/simh/simh,814,2020-03-10T00:28:39Z,2020-03-10T17:45:02Z,2020-03-10T17:45:02Z,CLOSED,False,13675,2524,42,https://github.com/rcornwell,KA10: Add support for KL10A/B,2,[],https://github.com/simh/simh/pull/814,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/814,Add support for KL10A/B.,Add support for KL10A/B.,True,{}
simh/simh,https://github.com/simh/simh,814,2020-03-10T00:28:39Z,2020-03-10T17:45:02Z,2020-03-10T17:45:02Z,CLOSED,False,13675,2524,42,https://github.com/rcornwell,KA10: Add support for KL10A/B,2,[],https://github.com/simh/simh/pull/814,https://github.com/markpizz,2,https://github.com/simh/simh/pull/814#issuecomment-597222356,Add support for KL10A/B.,"The First commit was merged directly.  The second was included as part of a number of pieces relating to build, doc, etc. with you as author.",True,{}
simh/simh,https://github.com/simh/simh,816,2020-03-12T04:13:22Z,2020-03-12T04:28:53Z,2020-03-12T04:28:53Z,MERGED,True,24,32,3,https://github.com/rcornwell,KA10: Minor code fixes.,2,[],https://github.com/simh/simh/pull/816,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/816,"Removed PACK references, add polling to NIA if async eth fails.
Cleaned up some extended addressing instruction errors.","Removed PACK references, add polling to NIA if async eth fails.
Cleaned up some extended addressing instruction errors.",True,{}
simh/simh,https://github.com/simh/simh,819,2020-03-20T06:07:14Z,2020-03-20T18:31:35Z,2020-06-22T05:38:48Z,MERGED,True,20,18,4,https://github.com/larsbrinkhoff,PDP11: Fix register definitions.,1,[],https://github.com/simh/simh/pull/819,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/819,Work in progress.  Feel free to comment though.,Work in progress.  Feel free to comment though.,True,{}
simh/simh,https://github.com/simh/simh,819,2020-03-20T06:07:14Z,2020-03-20T18:31:35Z,2020-06-22T05:38:48Z,MERGED,True,20,18,4,https://github.com/larsbrinkhoff,PDP11: Fix register definitions.,1,[],https://github.com/simh/simh/pull/819,https://github.com/markpizz,2,https://github.com/simh/simh/pull/819#issuecomment-602146724,Work in progress.  Feel free to comment though.,Wrong issue id in the latest commit comment.  I meant #817,True,{}
simh/simh,https://github.com/simh/simh,824,2020-03-26T02:37:46Z,2020-03-26T04:17:02Z,2020-03-26T04:17:03Z,CLOSED,False,118,75,7,https://github.com/rcornwell,KA10: Corrected error in NIA Padding. Handle disabled RH devices.,1,[],https://github.com/simh/simh/pull/824,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/824,Regular update to KA10. Fixed incorrect handling of NIA20 Padding. RH devices now return correct status for disabled devices.,Regular update to KA10. Fixed incorrect handling of NIA20 Padding. RH devices now return correct status for disabled devices.,True,{}
simh/simh,https://github.com/simh/simh,824,2020-03-26T02:37:46Z,2020-03-26T04:17:02Z,2020-03-26T04:17:03Z,CLOSED,False,118,75,7,https://github.com/rcornwell,KA10: Corrected error in NIA Padding. Handle disabled RH devices.,1,[],https://github.com/simh/simh/pull/824,https://github.com/markpizz,2,https://github.com/simh/simh/pull/824#issuecomment-604219453,Regular update to KA10. Fixed incorrect handling of NIA20 Padding. RH devices now return correct status for disabled devices.,Merged with Cherry Pick,True,{}
simh/simh,https://github.com/simh/simh,825,2020-03-26T20:20:03Z,2020-03-26T20:28:34Z,2020-03-26T20:29:21Z,CLOSED,False,8865,668,34,https://github.com/sethm,3b2: Refactor in preparation for new Rev 3 simulator,2,[],https://github.com/simh/simh/pull/825,https://github.com/sethm,1,https://github.com/simh/simh/pull/825,,,True,{}
simh/simh,https://github.com/simh/simh,825,2020-03-26T20:20:03Z,2020-03-26T20:28:34Z,2020-03-26T20:29:21Z,CLOSED,False,8865,668,34,https://github.com/sethm,3b2: Refactor in preparation for new Rev 3 simulator,2,[],https://github.com/simh/simh/pull/825,https://github.com/markpizz,2,https://github.com/simh/simh/pull/825#issuecomment-604666416,,"Seth,
I pushed out a commit just before I sent you that message saying you were clear.  It seems that you didn't pick up that commit before adding the changes in this pull request.  :-(",True,{}
simh/simh,https://github.com/simh/simh,825,2020-03-26T20:20:03Z,2020-03-26T20:28:34Z,2020-03-26T20:29:21Z,CLOSED,False,8865,668,34,https://github.com/sethm,3b2: Refactor in preparation for new Rev 3 simulator,2,[],https://github.com/simh/simh/pull/825,https://github.com/sethm,3,https://github.com/simh/simh/pull/825#issuecomment-604667392,,"On Thu, Mar 26, 2020, at 1:25 PM, Mark Pizzolato wrote:
 Seth,
 I pushed out a commit just before I sent you that message saying you were clear. It seems that you didn't pick up that commit before adding the changes in this pull request. :-(
Drat, I thought for sure I had done a pull to check for last minute changes. I'll sort that out.
…
-Seth
--
 Seth Morabito
 Poulsbo, WA
 web@loomcom.com",True,{}
simh/simh,https://github.com/simh/simh,825,2020-03-26T20:20:03Z,2020-03-26T20:28:34Z,2020-03-26T20:29:21Z,CLOSED,False,8865,668,34,https://github.com/sethm,3b2: Refactor in preparation for new Rev 3 simulator,2,[],https://github.com/simh/simh/pull/825,https://github.com/sethm,4,https://github.com/simh/simh/pull/825#issuecomment-604668185,,I am going to squash them onto a fresh copy of upstream/master. I will open a new pull request as soon as that's done.,True,{}
simh/simh,https://github.com/simh/simh,826,2020-03-26T20:31:08Z,2020-03-26T22:27:19Z,2020-03-26T22:27:19Z,MERGED,True,8870,669,34,https://github.com/sethm,3b2: Refactoring in preparation for Rev 3,1,[],https://github.com/simh/simh/pull/826,https://github.com/sethm,1,https://github.com/simh/simh/pull/826,"Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.","Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.",True,{}
simh/simh,https://github.com/simh/simh,826,2020-03-26T20:31:08Z,2020-03-26T22:27:19Z,2020-03-26T22:27:19Z,MERGED,True,8870,669,34,https://github.com/sethm,3b2: Refactoring in preparation for Rev 3,1,[],https://github.com/simh/simh/pull/826,https://github.com/markpizz,2,https://github.com/simh/simh/pull/826#issuecomment-604689351,"Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.","These files don't have CRLF line endings:
3b2_1000_defs.h
3b2_400_defs.h
rom_1000_bin.h
3b2.vcproj has references to:
3b2_cpu.h
3b2_mau.h
3b2_mmu.h
3b2_sys.h
3b2_sysdev.h
and no references to any new include files.
In the makefile, I'm thinking that you're probably going to do the other 3b2 models in the same 3b2 directory, so it would seem that you should keep the ATT3B2D as the directory symbol for all of your files while you may indeed have model specific ATT3B2M400_OPT symbols.  Also, maybe like the vax which when the later models were added, we moved to model specific simulator names, that was also done for the vax (microvax3900) but since folks (or scripts) may exist for the original name, the build copies the microvax3900 binary to the original simulator name (vax).",True,{}
simh/simh,https://github.com/simh/simh,826,2020-03-26T20:31:08Z,2020-03-26T22:27:19Z,2020-03-26T22:27:19Z,MERGED,True,8870,669,34,https://github.com/sethm,3b2: Refactoring in preparation for Rev 3,1,[],https://github.com/simh/simh/pull/826,https://github.com/sethm,3,https://github.com/simh/simh/pull/826#issuecomment-604707918,"Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.","Hi Mark. I've pushed a new change to address the line endings, vcproj file, and makefile.
My plan is to rename the ""3b2"" target to ""3b2-400"" and introduce a new ""3b2-1000"" target alongside it when the time comes. I think you're right that the ATT3B2M400_OPT and ATT3B2M400D are not needed, I've moved those back to ATT3B2_OPT and ATT3B2D, respectively. They will be shared between both targets. I'll likely follow the VAX model and copy 3b2-400 to 3b2 in a similar fashion when that time comes.",True,{}
simh/simh,https://github.com/simh/simh,826,2020-03-26T20:31:08Z,2020-03-26T22:27:19Z,2020-03-26T22:27:19Z,MERGED,True,8870,669,34,https://github.com/sethm,3b2: Refactoring in preparation for Rev 3,1,[],https://github.com/simh/simh/pull/826,https://github.com/markpizz,4,https://github.com/simh/simh/pull/826#issuecomment-604711401,"Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.","Sorry to nit pick, but I notice that the BuildROMs file that you're generating translates rom_1000.bin to rom_1000.bin.h.  The resulting file name has 2 '.'s.  All the others translate the original extension separator to an underscore.  Please fix and back out these commits and submit a single commit.  I will drop your repo from my local integration repo and re-add the remote to fetch your changed history.  If you change the generated name, then you should recapture the output of BuildROMs and remove line endings and commit that version.",True,{}
simh/simh,https://github.com/simh/simh,826,2020-03-26T20:31:08Z,2020-03-26T22:27:19Z,2020-03-26T22:27:19Z,MERGED,True,8870,669,34,https://github.com/sethm,3b2: Refactoring in preparation for Rev 3,1,[],https://github.com/simh/simh/pull/826,https://github.com/sethm,5,https://github.com/simh/simh/pull/826#issuecomment-604714870,"Refactor in preparation for the addition of a Rev 3 simulator for the
3B2/1000 system.
This change also includes a full cleanup of the rat's-nest of includes
and externs that plagued the 3B2 simulator and made it difficult to
understand and maintain. Headers are now required in the following
order:
compilation unit -> ""3b2_defs.h"" -> {... dependencies ...}
Finally, HELP has been added to the CPU device.","I believe this latest push has everything all in one commit, now, including the correctly named ROM file with correct line endings.",True,{}
simh/simh,https://github.com/simh/simh,829,2020-03-30T18:35:30Z,2020-03-31T16:08:25Z,2020-03-31T16:08:25Z,MERGED,True,1,1,1,https://github.com/sethm,makefile: Fix incorrect 3B2 include directory,1,[],https://github.com/simh/simh/pull/829,https://github.com/sethm,1,https://github.com/simh/simh/pull/829,I was alerted to the fact that the 3B2 target was using the wrong include directory variable: -I ${ATT3B2M400D} should have been -I ${ATT3B2D}. This change corrects the problem.,I was alerted to the fact that the 3B2 target was using the wrong include directory variable: -I ${ATT3B2M400D} should have been -I ${ATT3B2D}. This change corrects the problem.,True,{}
simh/simh,https://github.com/simh/simh,832,2020-04-04T14:06:48Z,2020-04-04T15:33:07Z,2020-06-22T05:38:43Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,PDP11: Fix warning about ~0 not fitting in an uint16.,1,[],https://github.com/simh/simh/pull/832,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/832,,,True,{}
simh/simh,https://github.com/simh/simh,833,2020-04-14T03:46:03Z,2020-04-18T15:59:33Z,2020-04-18T15:59:33Z,CLOSED,False,0,0,0,https://github.com/rcornwell,Regular updates to KA10 and I7000,0,[],https://github.com/simh/simh/pull/833,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/833,"Changes to for potential memory access error in some of the I7000 simulators.
Minor changes and bug fixes to KA10.","Changes to for potential memory access error in some of the I7000 simulators.
Minor changes and bug fixes to KA10.",True,{}
simh/simh,https://github.com/simh/simh,834,2020-04-14T05:46:17Z,2020-04-14T13:48:24Z,2020-04-14T13:48:24Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,Fix some warnings.,2,[],https://github.com/simh/simh/pull/834,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/834,"Shifting a negative value.
size_t converted to uint16.","Shifting a negative value.
size_t converted to uint16.",True,{}
simh/simh,https://github.com/simh/simh,835,2020-04-14T09:29:13Z,2020-04-14T14:24:35Z,2020-04-14T14:24:35Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Client socket needs to be non blocking,0,[],https://github.com/simh/simh/pull/835,https://github.com/psco,1,https://github.com/simh/simh/pull/835,,,True,{}
simh/simh,https://github.com/simh/simh,835,2020-04-14T09:29:13Z,2020-04-14T14:24:35Z,2020-04-14T14:24:35Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Client socket needs to be non blocking,0,[],https://github.com/simh/simh/pull/835,https://github.com/markpizz,2,https://github.com/simh/simh/pull/835#issuecomment-613457653,,"This change is not necessary.  Look closely at the definition of sim_connect_sock in sim_sock.h.
Did you observe an actual problem or were you merely looking at other changes that had happened?
Please back out (change history) all of the recent commits in your psco/simh master branch to just before c1b4493 and then pull from simh/simh master to resynch the master branch in your repo.",True,{}
simh/simh,https://github.com/simh/simh,836,2020-04-14T17:15:27Z,2020-04-14T21:52:19Z,2020-04-14T21:52:19Z,MERGED,True,1,1,1,https://github.com/psco,AltairZ80: Use non blocking socket for net device,1,[],https://github.com/simh/simh/pull/836,https://github.com/psco,1,https://github.com/simh/simh/pull/836,,,True,{}
simh/simh,https://github.com/simh/simh,839,2020-04-29T01:02:54Z,2020-04-29T02:30:14Z,2020-11-18T18:10:54Z,CLOSED,False,221,2,1,https://github.com/deltecent,"ALTAIRZ80: Added ""SET/SHOW CPU HISTORY"" and ""HELP CPU""",1,[],https://github.com/simh/simh/pull/839,https://github.com/deltecent,1,https://github.com/simh/simh/pull/839,"This PR adds a CPU instruction history ring buffer that other emulators have.
It also adds ""HELP CPU"".
Reference #838","This PR adds a CPU instruction history ring buffer that other emulators have.
It also adds ""HELP CPU"".
Reference #838",True,{}
simh/simh,https://github.com/simh/simh,839,2020-04-29T01:02:54Z,2020-04-29T02:30:14Z,2020-11-18T18:10:54Z,CLOSED,False,221,2,1,https://github.com/deltecent,"ALTAIRZ80: Added ""SET/SHOW CPU HISTORY"" and ""HELP CPU""",1,[],https://github.com/simh/simh/pull/839,https://github.com/deltecent,2,https://github.com/simh/simh/pull/839#issuecomment-620958507,"This PR adds a CPU instruction history ring buffer that other emulators have.
It also adds ""HELP CPU"".
Reference #838","This should not have ""HELP CPU"" in it.",True,{}
simh/simh,https://github.com/simh/simh,840,2020-04-29T02:53:06Z,2020-04-29T13:55:54Z,2020-04-29T13:55:54Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",2,[],https://github.com/simh/simh/pull/840,https://github.com/deltecent,1,https://github.com/simh/simh/pull/840,"Added CPU instruction history similar to other simulators.
Reference #838","Added CPU instruction history similar to other simulators.
Reference #838",True,{}
simh/simh,https://github.com/simh/simh,840,2020-04-29T02:53:06Z,2020-04-29T13:55:54Z,2020-04-29T13:55:54Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",2,[],https://github.com/simh/simh/pull/840,https://github.com/psco,2,https://github.com/simh/simh/pull/840#issuecomment-621048132,"Added CPU instruction history similar to other simulators.
Reference #838","Thanks for this - two comments:

The Z80 with its additional / alternate registers should be supported as well. DDT/Z format would be consistent:
S H N E  A =FF BC =0000 DE =0000 HL =0C06 SP=C1FE PC=0BE3       INC  (HL)
A'=00 BC'=0000 DE'=0000 HL'=0000 IX=0000 IY=0000 I=00

Also the history data structure needs to take care of the fact that Z80 instructions can have up to 4 bytes not only 3 as for the 8080.

The message
6874        sim_printf(""History buffer maximum size: %d\n"", HIST_MAX);
is also displayed when the user enters a number which is too small (i.e. less than HIST_MIN).",True,{}
simh/simh,https://github.com/simh/simh,840,2020-04-29T02:53:06Z,2020-04-29T13:55:54Z,2020-04-29T13:55:54Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",2,[],https://github.com/simh/simh/pull/840,https://github.com/markpizz,3,https://github.com/simh/simh/pull/840#issuecomment-621198633,"Added CPU instruction history similar to other simulators.
Reference #838","While you're addressing @psco comments, please fix the windows build problems:
4>altairz80_cpu.c
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2143: syntax error : missing ';' before 'type'
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2143: syntax error : missing ';' before 'type'
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2143: syntax error : missing ')' before 'type'
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2143: syntax error : missing ';' before 'type'
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2065: 'i' : undeclared identifier
4>..\AltairZ80\altairz80_cpu.c(6166) : warning C4552: '<' : operator has no effect; expected operator with side-effect
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2065: 'i' : undeclared identifier
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2059: syntax error : ')'
4>..\AltairZ80\altairz80_cpu.c(6166) : error C2143: syntax error : missing ';' before '{'
4>..\AltairZ80\altairz80_cpu.c(6167) : error C2065: 'i' : undeclared identifier
4>..\AltairZ80\altairz80_cpu.c(6167) : error C2065: 'i' : undeclared identifier

On the fly variable declarations aren't legal in older Windows compilers:

  for (int i=0; i < 3; i++) {


Also, there is little cost to limit  HIST_MAX to only 1024.",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/deltecent,1,https://github.com/simh/simh/pull/841,"Fixed issues reported by Peter and Mark.
Reference #838","Fixed issues reported by Peter and Mark.
Reference #838",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/markpizz,2,https://github.com/simh/simh/pull/841#issuecomment-621307972,"Fixed issues reported by Peter and Mark.
Reference #838","Patrick,
Given the low commit rate on this repo, I like to keep a single commit line without merge commits.  To achieve this, we strive to get everyone to do a pull from the master branch before the commit in their pull request.  Please do that, or you don't want to be recorded as the committer of your changes, I'll cherry pick your changes and attribute you as the author and commit it myself.

Mark",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/psco,3,https://github.com/simh/simh/pull/841#issuecomment-621310577,"Fixed issues reported by Peter and Mark.
Reference #838","I think the ""t_value op[3];"" and related read/write needs to be ""t_value op[4];"" as the Z80 also has 4-byte instructions. Otherwise the symbolic disassembler will access incorrect memory locations when disassembling 4-byte instructions.",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/deltecent,4,https://github.com/simh/simh/pull/841#issuecomment-621344880,"Fixed issues reported by Peter and Mark.
Reference #838","I will make that change. I don’t know anything about the Z80. I should probably download a data sheet.
…
Sent from my iPhone
 On Apr 29, 2020, at 9:09 AM, Peter Schorn ***@***.***> wrote:

 ﻿
 I think the ""t_value op[3];"" and related read/write needs to be ""t_value op[4];"" as the Z80 also has 4-byte instructions. Otherwise the symbolic disassembler will access incorrect memory locations when disassembling 4-byte instructions.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/deltecent,5,https://github.com/simh/simh/pull/841#issuecomment-621345310,"Fixed issues reported by Peter and Mark.
Reference #838","I remember being scolded on this before. No problem.
…
Sent from my iPhone
 On Apr 29, 2020, at 9:04 AM, Mark Pizzolato ***@***.***> wrote:

 ﻿
 Patrick,

 Given the low commit rate on this repo, I like to keep a single commit line without merge commits. To achieve this, we strive to get everyone to do a pull from the master branch before the commit in their pull request. Please do that, or you don't want to be recorded as the committer of your changes, I'll cherry pick your changes and attribute you as the author and commit it myself.

 Mark
 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/markpizz,6,https://github.com/simh/simh/pull/841#issuecomment-621484564,"Fixed issues reported by Peter and Mark.
Reference #838",Hold off for a bit I'm pushing out other commits.,True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/markpizz,7,https://github.com/simh/simh/pull/841#issuecomment-621485017,"Fixed issues reported by Peter and Mark.
Reference #838",Good to go now.,True,{}
simh/simh,https://github.com/simh/simh,841,2020-04-29T14:01:52Z,2020-04-30T03:06:27Z,2020-04-30T03:27:18Z,CLOSED,False,195,1,1,https://github.com/deltecent,"ALTAIRZ80: Added support for ""SET CPU HISTORY"" and ""SHOW CPU HISTORY""",1,[],https://github.com/simh/simh/pull/841,https://github.com/deltecent,8,https://github.com/simh/simh/pull/841#issuecomment-621590916,"Fixed issues reported by Peter and Mark.
Reference #838","I merged with master and now I'm getting the following warnings:

./sim_disk.c:2740:94: warning: unknown escape sequence '\.' [-Wunknown-escape-sequence]
                sim_messagef (SCPE_OK, ""%s: No File System found on '%s', skipping autosizing\.n"", sim_uname (uptr), cptr);
                                                                                             ^~
./sim_disk.c:5566:26: warning: incompatible pointer types passing 'uint32 *' (aka 'unsigned int *') to parameter of type 'size_t *' (aka 'unsigned long *')
      [-Wincompatible-pointer-types]
                         BytesRead,
                         ^~~~~~~~~
./sim_disk.c:4403:79: note: passing argument to parameter 'bytesread' here
static t_stat ReadFilePosition(FILE *File, void *buf, size_t bufsize, size_t *bytesread, uint64 position)
                                                                              ^
./sim_disk.c:5601:30: warning: incompatible pointer types passing 'uint32 *' (aka 'unsigned int *') to parameter of type 'size_t *' (aka 'unsigned long *')
      [-Wincompatible-pointer-types]
                             &BytesThisRead,
                             ^~~~~~~~~~~~~~
./sim_disk.c:4403:79: note: passing argument to parameter 'bytesread' here
static t_stat ReadFilePosition(FILE *File, void *buf, size_t bufsize, size_t *bytesread, uint64 position)
                                                                              ^
./sim_disk.c:5690:27: warning: incompatible pointer types passing 'uint32 *' (aka 'unsigned int *') to parameter of type 'size_t *' (aka 'unsigned long *')
      [-Wincompatible-pointer-types]
                          BytesWritten,
                          ^~~~~~~~~~~~
./sim_disk.c:4419:80: note: passing argument to parameter 'byteswritten' here
static t_stat WriteFilePosition(FILE *File, void *buf, size_t bufsize, size_t *byteswritten, uint64 position)
                                                                               ^
./sim_disk.c:5833:31: warning: incompatible pointer types passing 'uint32 *' (aka 'unsigned int *') to parameter of type 'size_t *' (aka 'unsigned long *')
      [-Wincompatible-pointer-types]
                              &BytesThisWrite,
                              ^~~~~~~~~~~~~~~
./sim_disk.c:4419:80: note: passing argument to parameter 'byteswritten' here
static t_stat WriteFilePosition(FILE *File, void *buf, size_t bufsize, size_t *byteswritten, uint64 position)
…
 On Apr 29, 2020, at 2:53 PM, Mark Pizzolato ***@***.***> wrote:


 Good to go now.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,842,2020-04-30T03:30:19Z,2020-04-30T10:00:09Z,2020-11-18T18:10:52Z,MERGED,True,197,1,1,https://github.com/deltecent,"ALTAIRZ80: Add ""SET CPU HISTORY"" and ""SHOW CPU HISTORY"" for 8080/Z80",1,[],https://github.com/simh/simh/pull/842,https://github.com/deltecent,1,https://github.com/simh/simh/pull/842,,,True,{}
simh/simh,https://github.com/simh/simh,842,2020-04-30T03:30:19Z,2020-04-30T10:00:09Z,2020-11-18T18:10:52Z,MERGED,True,197,1,1,https://github.com/deltecent,"ALTAIRZ80: Add ""SET CPU HISTORY"" and ""SHOW CPU HISTORY"" for 8080/Z80",1,[],https://github.com/simh/simh/pull/842,https://github.com/psco,2,https://github.com/simh/simh/pull/842#issuecomment-621634324,,This looks fine - thank you.,True,{}
simh/simh,https://github.com/simh/simh,844,2020-04-30T12:12:19Z,2020-04-30T16:54:32Z,2020-04-30T16:54:32Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Documentation update and minor formatting cleanup,0,[],https://github.com/simh/simh/pull/844,https://github.com/psco,1,https://github.com/simh/simh/pull/844,,,True,{}
simh/simh,https://github.com/simh/simh,844,2020-04-30T12:12:19Z,2020-04-30T16:54:32Z,2020-04-30T16:54:32Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Documentation update and minor formatting cleanup,0,[],https://github.com/simh/simh/pull/844,https://github.com/markpizz,2,https://github.com/simh/simh/pull/844#issuecomment-621942630,,"Hi Peter,
It seems we had overlapping commits.  Please redo this one to avoid a merge commit.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,845,2020-04-30T17:02:31Z,2020-04-30T17:09:26Z,2020-04-30T17:09:27Z,MERGED,True,24,24,2,https://github.com/psco,AltairZ80: Documentation update and small formatting cleanup,1,[],https://github.com/simh/simh/pull/845,https://github.com/psco,1,https://github.com/simh/simh/pull/845,,,True,{}
simh/simh,https://github.com/simh/simh,849,2020-05-05T15:42:03Z,2020-05-05T20:01:55Z,2020-05-05T20:01:55Z,MERGED,True,2,4,1,https://github.com/bsdimp,FreeBSD tweak,1,[],https://github.com/simh/simh/pull/849,https://github.com/bsdimp,1,https://github.com/simh/simh/pull/849,FreeBSD doesn't up the tap interface by default. Work around this by changing the default,FreeBSD doesn't up the tap interface by default. Work around this by changing the default,True,{}
simh/simh,https://github.com/simh/simh,851,2020-05-15T07:48:52Z,2020-05-15T11:25:04Z,2020-05-15T11:25:04Z,MERGED,True,4460,11,6,https://github.com/psco,AltairZ80: Added symbolic assembler for M68K CPU including bison/yacc…,1,[],https://github.com/simh/simh/pull/851,https://github.com/psco,1,https://github.com/simh/simh/pull/851,… source.,… source.,True,{}
simh/simh,https://github.com/simh/simh,856,2020-05-23T05:11:40Z,2020-05-23T10:48:19Z,2020-05-23T12:12:08Z,CLOSED,False,1245,0,3,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/856,https://github.com/deltecent,1,https://github.com/simh/simh/pull/856,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,True,{}
simh/simh,https://github.com/simh/simh,856,2020-05-23T05:11:40Z,2020-05-23T10:48:19Z,2020-05-23T12:12:08Z,CLOSED,False,1245,0,3,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/856,https://github.com/markpizz,2,https://github.com/simh/simh/pull/856#issuecomment-633025397,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,"@deltecent,

Please remove the tabs in s100_jadedd.c
Please add the changed files in this zip jadedd.zip to your revised commit (located in the directories that they're already found).

@psco this is OK, right?
@deltecent If @psco is OK with this, please submit a new pull request with these things fixed.",True,{}
simh/simh,https://github.com/simh/simh,856,2020-05-23T05:11:40Z,2020-05-23T10:48:19Z,2020-05-23T12:12:08Z,CLOSED,False,1245,0,3,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/856,https://github.com/psco,3,https://github.com/simh/simh/pull/856#issuecomment-633026250,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,"Yes, this is OK. Please proceed.",True,{}
simh/simh,https://github.com/simh/simh,856,2020-05-23T05:11:40Z,2020-05-23T10:48:19Z,2020-05-23T12:12:08Z,CLOSED,False,1245,0,3,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/856,https://github.com/markpizz,4,https://github.com/simh/simh/pull/856#issuecomment-633040044,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,"By the way, also, please fix:",True,{}
simh/simh,https://github.com/simh/simh,856,2020-05-23T05:11:40Z,2020-05-23T10:48:19Z,2020-05-23T12:12:08Z,CLOSED,False,1245,0,3,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/856,https://github.com/markpizz,5,https://github.com/simh/simh/pull/856#issuecomment-633040105,This PR adds a JADE Double D disk controller JADEDD device to the AltairZ80 simulator.,"1>..\AltairZ80\s100_jadedd.c(536) : warning C4101: 'sio_uptr' : unreferenced local variable
1>..\AltairZ80\s100_jadedd.c(535) : warning C4101: 'sio_dptr' : unreferenced local variable",True,{}
simh/simh,https://github.com/simh/simh,857,2020-05-23T14:34:11Z,2020-05-23T16:38:22Z,2020-11-18T18:10:51Z,MERGED,True,1253,5,5,https://github.com/deltecent,ALTAIRZ80: Add JADEDD Jade Double D disk controller device,1,[],https://github.com/simh/simh/pull/857,https://github.com/deltecent,1,https://github.com/simh/simh/pull/857,Let's give this one a shot. And I think I finally figured out how to merge commits!,Let's give this one a shot. And I think I finally figured out how to merge commits!,True,{}
simh/simh,https://github.com/simh/simh,858,2020-05-23T17:08:22Z,2020-05-23T20:50:01Z,2020-05-23T20:50:01Z,MERGED,True,2550,2283,2,https://github.com/psco,AltairZ80: Update m68kasm for newer Bison,2,[],https://github.com/simh/simh/pull/858,https://github.com/psco,1,https://github.com/simh/simh/pull/858,,,True,{}
simh/simh,https://github.com/simh/simh,860,2020-05-24T07:37:06Z,2020-05-24T10:41:57Z,2020-05-24T10:41:58Z,MERGED,True,16,17,2,https://github.com/psco,AltairZ80: Minor cleanup,1,[],https://github.com/simh/simh/pull/860,https://github.com/psco,1,https://github.com/simh/simh/pull/860,,,True,{}
simh/simh,https://github.com/simh/simh,863,2020-05-27T08:31:40Z,2020-05-27T12:38:47Z,2020-05-27T17:03:30Z,MERGED,True,339,413,30,https://github.com/psco,AltairZ80: Improved resource mapping diagnostics.,1,[],https://github.com/simh/simh/pull/863,https://github.com/psco,1,https://github.com/simh/simh/pull/863,,,True,{}
simh/simh,https://github.com/simh/simh,863,2020-05-27T08:31:40Z,2020-05-27T12:38:47Z,2020-05-27T17:03:30Z,MERGED,True,339,413,30,https://github.com/psco,AltairZ80: Improved resource mapping diagnostics.,1,[],https://github.com/simh/simh/pull/863,https://github.com/markpizz,2,https://github.com/simh/simh/pull/863#issuecomment-634797418,,"Is this related to the activities in #854 ?  If so, does it change anything that was observed there?",True,{}
simh/simh,https://github.com/simh/simh,863,2020-05-27T08:31:40Z,2020-05-27T12:38:47Z,2020-05-27T17:03:30Z,MERGED,True,339,413,30,https://github.com/psco,AltairZ80: Improved resource mapping diagnostics.,1,[],https://github.com/simh/simh/pull/863,https://github.com/psco,3,https://github.com/simh/simh/pull/863#issuecomment-634805314,,It does not change anything related to #854 but it can help to better understand what happens when a device is reset.,True,{}
simh/simh,https://github.com/simh/simh,867,2020-06-05T08:55:39Z,2020-06-05T10:13:18Z,2020-06-05T10:13:18Z,MERGED,True,0,0,1,https://github.com/psco,AltairZ80: Updated documentation with input from Patrick Linstruth (J…,1,[],https://github.com/simh/simh/pull/867,https://github.com/psco,1,https://github.com/simh/simh/pull/867,…ADE Double D Disk Controller),…ADE Double D Disk Controller),True,{}
simh/simh,https://github.com/simh/simh,869,2020-06-07T09:50:06Z,2020-06-07T11:18:28Z,2020-06-07T11:18:28Z,MERGED,True,237,315,25,https://github.com/psco,AltairZ80: Removed obsolete platform dependency,1,[],https://github.com/simh/simh/pull/869,https://github.com/psco,1,https://github.com/simh/simh/pull/869,,,True,{}
simh/simh,https://github.com/simh/simh,870,2020-06-07T11:38:17Z,2020-06-07T11:42:38Z,2020-06-07T11:42:38Z,MERGED,True,227,227,3,https://github.com/psco,AltairZ80: Removed tabs from sources,1,[],https://github.com/simh/simh/pull/870,https://github.com/psco,1,https://github.com/simh/simh/pull/870,,,True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/868,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,2,https://github.com/simh/simh/pull/868#issuecomment-639443393,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Several things to fix along the way:
On VS2008:
1>imlac_tty.c
1>..\imlac\imlac_tty.c(134) : error C2275: 'int32' : illegal use of this type as an expression
1>        c:\Users\Mark\Documents\simh-video\sim_defs.h(201) : see declaration of 'int32'
1>..\imlac\imlac_tty.c(134) : error C2146: syntax error : missing ';' before identifier 'ch'
1>..\imlac\imlac_tty.c(134) : error C2065: 'ch' : undeclared identifier
1>..\imlac\imlac_tty.c(135) : error C2065: 'ch' : undeclared identifier
1>..\imlac\imlac_tty.c(136) : error C2065: 'ch' : undeclared identifier
1>imlac_sys.c

On Ubuntu without libsdl2:
lib paths are: /lib/ /lib/x86_64-linux-gnu/ /lib32/
include paths are:  /usr/lib/gcc/x86_64-linux-gnu/9/include /usr/local/include /usr/include/x86_64-linux-gnu /usr/include
using libm: /lib/x86_64-linux-gnu/libm.so
using librt: /lib/x86_64-linux-gnu/librt.so
using libpthread: /lib/x86_64-linux-gnu/libpthread.so /usr/include/pthread.h
using semaphore: /usr/include/semaphore.h
using libdl: /lib/x86_64-linux-gnu/libdl.so /usr/include/dlfcn.h
using mman: /usr/include/x86_64-linux-gnu/sys/mman.h
*** Info ***
*** Info *** The simulator you are building could provide more
*** Info *** functionality if video support were available on your system.
*** Info *** Install the development components of libSDL2 packaged for
*** Info *** your operating system distribution for your Linux
*** Info *** system:
*** Info ***        $ sudo apt-get install libsdl2-dev libpng-dev
*** Info ***
***
*** imlac Simulator being built with:
*** - compiler optimizations and no debugging support. GCC Version: 9.3.0.
*** - Per simulator tests will be run.
***
*** git commit id is 5349a253ee632c03228af60643668a0209ac8947.
*** git commit time is 2020-05-25T13:55:15+02:00.
***
gcc -std=gnu99 -U__STRICT_ANSI__  -O2 -finline-functions -fgcse-after-reload -fpredictive-commoning -fipa-cp-clone -fno-unsafe-loop-optimizations -fno-strict-overflow -DSIM_GIT_COMMIT_ID=5349a253ee632c03228af60643668a0209ac8947 -DSIM_GIT_COMMIT_TIME=2020-05-25T13:55:15+02:00  -DSIM_COMPILER=""GCC Version: 9.3.0"" -DSIM_BUILD_TOOL=simh-makefile -I . -D_GNU_SOURCE -DUSE_READER_THREAD -DSIM_ASYNCH_IO  -DHAVE_SEMAPHORE -DHAVE_SYS_IOCTL -DHAVE_LINUX_CDROM -DHAVE_DLOPEN=so -DHAVE_UTIME -DHAVE_GLOB -DHAVE_SHM_OPEN  ./imlac/imlac_sys.c ./imlac/imlac_cpu.c ./imlac/imlac_dp.c ./imlac/imlac_crt.c ./imlac/imlac_kbd.c ./imlac/imlac_tty.c ./imlac/imlac_pt.c ./imlac/imlac_sync.c ./imlac/imlac_bel.c ./imlac/imlac_mse.c ./imlac/imlac_xy.c   ./scp.c ./sim_console.c ./sim_fio.c ./sim_timer.c ./sim_sock.c ./sim_tmxr.c ./sim_ether.c ./sim_tape.c ./sim_disk.c ./sim_serial.c ./sim_video.c ./sim_imd.c ./sim_card.c -I ./imlac  -o BIN/imlac -lm -lrt -lpthread -ldl
./imlac/imlac_xy.c:33:8: error: unknown type name ‘SDL_AudioDeviceID’
   33 | static SDL_AudioDeviceID dev = -1;
      |        ^~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c: In function ‘xy_init’:
./imlac/imlac_xy.c:40:3: error: unknown type name ‘SDL_AudioSpec’
   40 |   SDL_AudioSpec want, have;
      |   ^~~~~~~~~~~~~
./imlac/imlac_xy.c:46:19: warning: implicit declaration of function ‘SDL_GetNumAudioDevices’ [-Wimplicit-function-declaration]
   46 |   for (i = 0; i < SDL_GetNumAudioDevices (0); i++)
      |                   ^~~~~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c:47:35: warning: implicit declaration of function ‘SDL_GetAudioDeviceName’ [-Wimplicit-function-declaration]
   47 |     printf (""Device %d: %s\n"", i, SDL_GetAudioDeviceName (i, 0));
      |                                   ^~~~~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c:47:26: warning: format ‘%s’ expects argument of type ‘char *’, but argument 3 has type ‘int’ [-Wformat=]
   47 |     printf (""Device %d: %s\n"", i, SDL_GetAudioDeviceName (i, 0));
      |                         ~^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                          |        |
      |                          char *   int
      |                         %d
./imlac/imlac_xy.c:49:3: warning: implicit declaration of function ‘SDL_memset’; did you mean ‘memset’? [-Wimplicit-function-declaration]
   49 |   SDL_memset(&want, 0, sizeof want);
      |   ^~~~~~~~~~
      |   memset
./imlac/imlac_xy.c:50:7: error: request for member ‘freq’ in something not a structure or union
   50 |   want.freq = 44100;
      |       ^
./imlac/imlac_xy.c:51:7: error: request for member ‘format’ in something not a structure or union
   51 |   want.format = AUDIO_S16SYS;
      |       ^
./imlac/imlac_xy.c:51:17: error: ‘AUDIO_S16SYS’ undeclared (first use in this function)
   51 |   want.format = AUDIO_S16SYS;
      |                 ^~~~~~~~~~~~
./imlac/imlac_xy.c:51:17: note: each undeclared identifier is reported only once for each function it appears in
./imlac/imlac_xy.c:52:7: error: request for member ‘channels’ in something not a structure or union
   52 |   want.channels = CHANNELS;
      |       ^
./imlac/imlac_xy.c:53:7: error: request for member ‘samples’ in something not a structure or union
   53 |   want.samples = 4096;
      |       ^
./imlac/imlac_xy.c:54:7: error: request for member ‘callback’ in something not a structure or union
   54 |   want.callback = NULL;
      |       ^
./imlac/imlac_xy.c:55:7: error: request for member ‘userdata’ in something not a structure or union
   55 |   want.userdata = NULL;
      |       ^
./imlac/imlac_xy.c:57:3: warning: implicit declaration of function ‘SDL_Init’ [-Wimplicit-function-declaration]
   57 |   SDL_Init (SDL_INIT_AUDIO);
      |   ^~~~~~~~
./imlac/imlac_xy.c:57:13: error: ‘SDL_INIT_AUDIO’ undeclared (first use in this function)
   57 |   SDL_Init (SDL_INIT_AUDIO);
      |             ^~~~~~~~~~~~~~
./imlac/imlac_xy.c:59:9: warning: implicit declaration of function ‘SDL_OpenAudioDevice’ [-Wimplicit-function-declaration]
   59 |   dev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_FREQUENCY_CHANGE);
      |         ^~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c:59:52: error: ‘SDL_AUDIO_ALLOW_FREQUENCY_CHANGE’ undeclared (first use in this function)
   59 |   dev = SDL_OpenAudioDevice(NULL, 0, &want, &have, SDL_AUDIO_ALLOW_FREQUENCY_CHANGE);
      |                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c:61:5: warning: implicit declaration of function ‘SDL_Log’ [-Wimplicit-function-declaration]
   61 |     SDL_Log(""Failed to open audio: %s"", SDL_GetError());
      |     ^~~~~~~
./imlac/imlac_xy.c:61:41: warning: implicit declaration of function ‘SDL_GetError’ [-Wimplicit-function-declaration]
   61 |     SDL_Log(""Failed to open audio: %s"", SDL_GetError());
      |                                         ^~~~~~~~~~~~
./imlac/imlac_xy.c:64:13: error: request for member ‘format’ in something not a structure or union
   64 |     if (have.format != want.format)
      |             ^
./imlac/imlac_xy.c:64:28: error: request for member ‘format’ in something not a structure or union
   64 |     if (have.format != want.format)
      |                            ^
./imlac/imlac_xy.c:66:13: error: request for member ‘freq’ in something not a structure or union
   66 |     if (have.freq != want.freq)
      |             ^
./imlac/imlac_xy.c:66:26: error: request for member ‘freq’ in something not a structure or union
   66 |     if (have.freq != want.freq)
      |                          ^
./imlac/imlac_xy.c:68:13: error: request for member ‘channels’ in something not a structure or union
   68 |     if (have.channels != want.channels)
      |             ^
./imlac/imlac_xy.c:68:30: error: request for member ‘channels’ in something not a structure or union
   68 |     if (have.channels != want.channels)
      |                              ^
./imlac/imlac_xy.c:70:41: error: request for member ‘format’ in something not a structure or union
   70 |     fprintf(stderr, ""Format: %x\n"", have.format);
      |                                         ^
./imlac/imlac_xy.c:71:44: error: request for member ‘freq’ in something not a structure or union
   71 |     fprintf(stderr, ""Frequency: %d\n"", have.freq);
      |                                            ^
./imlac/imlac_xy.c:72:43: error: request for member ‘channels’ in something not a structure or union
   72 |     fprintf(stderr, ""Channels: %d\n"", have.channels);
      |                                           ^
./imlac/imlac_xy.c:73:42: error: request for member ‘samples’ in something not a structure or union
   73 |     fprintf(stderr, ""Samples: %d\n"", have.samples);
      |                                          ^
./imlac/imlac_xy.c:74:39: error: request for member ‘size’ in something not a structure or union
   74 |     fprintf(stderr, ""Size: %d\n"", have.size);
      |                                       ^
./imlac/imlac_xy.c:75:5: warning: implicit declaration of function ‘SDL_PauseAudioDevice’ [-Wimplicit-function-declaration]
   75 |     SDL_PauseAudioDevice(dev, 0);
      |     ^~~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c: In function ‘xy_xyz’:
./imlac/imlac_xy.c:86:10: warning: implicit declaration of function ‘SDL_GetQueuedAudioSize’ [-Wimplicit-function-declaration]
   86 |   while (SDL_GetQueuedAudioSize (dev) > 10*CHANNELS*2*44100)
      |          ^~~~~~~~~~~~~~~~~~~~~~
./imlac/imlac_xy.c:87:5: warning: implicit declaration of function ‘SDL_Delay’ [-Wimplicit-function-declaration]
   87 |     SDL_Delay (10);
      |     ^~~~~~~~~
./imlac/imlac_xy.c:94:3: warning: implicit declaration of function ‘SDL_QueueAudio’ [-Wimplicit-function-declaration]
   94 |   SDL_QueueAudio (dev, data, sizeof data);
      |   ^~~~~~~~~~~~~~
./imlac/imlac_xy.c: In function ‘xy_idle’:
./imlac/imlac_xy.c:194:3: error: unknown type name ‘Uint32’; did you mean ‘uint32’?
  194 |   Uint32 n = SDL_GetQueuedAudioSize (dev);
      |   ^~~~~~
      |   uint32
./imlac/imlac_xy.c: In function ‘xy_clear’:
./imlac/imlac_xy.c:207:5: warning: implicit declaration of function ‘SDL_ClearQueuedAudio’ [-Wimplicit-function-declaration]
  207 |     SDL_ClearQueuedAudio (dev);
      |     ^~~~~~~~~~~~~~~~~~~~
make: *** [makefile:2213: BIN/imlac] Error 1

Fix these, then provide a bootstrap ROM and I can look into your other first three points.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/868#issuecomment-639479137,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Thanks.  Only the first commit on the branch is in a good state.  I have updated the branch to reflect this, and fixed the compile error.
I'm mostly befuddled by the crash.  It seems to come up after a while, and sooner if lots of graphics has been displayed.  My host computer freezes for a whle and then the SIMH process is killed, which looks like it's over consuming memory.  I'll have to come up with a good test case to reproduce this.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/868#issuecomment-639486148,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Here's a light test.  Use the clock.simh scrip to run the file clock.iml.  Adjust debug output to taste.
Keyboard controls: f/b runs the clock forward/backward.  Arrow keys left/right make h/m/s adjust the hour/minute/second arm either way.
clock.zip",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/868#issuecomment-639487098,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.",Making this screenshot with those exact files I did get the freeze I described.  It could also be related to the amount of debug output.,True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/868#issuecomment-639535050,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","By the way, I'll be the first to claim the blame for any malfunction.  It's probably something I did wrong rather than something in SIMH.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/868#issuecomment-640216828,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Fix these, then provide a bootstrap ROM and I can look into your other first three points.

I believe these are all fixed now.  The clock.zip file attached above is a useful test.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/868#issuecomment-640217441,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Here's another test, but assumes some familiarity with ITS.
Expected output after typing Control-Z is:

ssv.zip",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/868#issuecomment-640262069,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","I'm making this a ""work in progress"" pull request with the intent that this could go in soon, but with the caveat that there are some problems to be fixed first.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,10,https://github.com/simh/simh/pull/868#issuecomment-642432087,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Sorry I haven't had a chance to dig deeply into this problem.  I'm too busy.
In any case, I just committed a change which may improve things for this situation.  Please give the latest code a try.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/868#issuecomment-642451226,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","No problem.  I'm trying to chip away at the problem on my end.
I'm running the Imlac simulator on my Linux laptop as well as on a Raspberry Pi 3.  On the Pi it dies very quickly.  I have confirmed memory over consumption is the problem, because the ""out-of-memory killer"" is invoked to remove a process and it selects the imlac process to go.  I have determined that the call to display_age triggers the crash; without this call the simulator runs fine.
I tried your latest updates, and they don't solve the problem but it's probably an improvement.  The simulator now dies from a segmentation fault in vid_draw, line 724 in sim_video.c.  The backtrace is:
#0  0x00000000004853cb in vid_draw (x=0, y=0, w=1024, h=1024, 
    buf=0x7fffef986010) at ./sim_video.c:724
#1  0x000000000040ce9e in ws_sync () at ./display/sim_ws.c:477
#2  0x000000000040b79f in display_sync () at ./display/display.c:1025
#3  0x000000000040aa9d in display_age (t=1, slowdown=0)
    at ./display/display.c:658
#4  0x000000000040cfb8 in imlac_cycle (us=100, slowdown=0)
    at ./display/imlac.c:47
#5  0x0000000000409392 in crt_svc (uptr=0x6c0f40 <crt_unit>)
    at ./imlac/imlac_crt.c:60
#6  0x000000000042a2f5 in sim_process_event () at ./scp.c:11325
#7  0x0000000000407b16 in sim_instr () at ./imlac/imlac_cpu.c:419
#8  0x0000000000423157 in run_cmd (flag=1, cptr=0x7fffffff0202 """")
    at ./scp.c:8532
#9  0x0000000000412d92 in do_cmd_label (flag=0, 
    fcptr=0x7fffffff96b0 ""ssv22.simh"", label=0x0) at ./scp.c:3911
#10 0x0000000000412059 in do_cmd (flag=0, fcptr=0x7fffffff96b0 ""ssv22.simh"")
    at ./scp.c:3735
#11 0x000000000040e119 in main (argc=2, argv=0x77b040) at ./scp.c:2834

Line 724 is this: (vid_dst_last->x == x) && (vid_dst_last->y == y) && /* AND identical position? */.  vid_dst_last is 0 at this point.  It shouldn't be referenced because it's first checked against 0, but according to my debugger it is.  I'll examine this further.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/868#issuecomment-642457165,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Your update also affects the PDP-11 simulator the same way.  Steps to reproduce:

Build pdp11 with DEBUG=1.
Start pdp11.
set daz enabled
boot daz
Wait 1-5 minutes.
Crash in vid_draw.

I believe I had this running for hours before.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,13,https://github.com/simh/simh/pull/868#issuecomment-642676809,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.",Hmmm... All accesses to the prior draw state weren't protected by the mutex.  They now are.,True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/868#issuecomment-642837314,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Thank you, that does seem to fix the problem.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,15,https://github.com/simh/simh/pull/868#issuecomment-642838428,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Just the new segfault, and memory blow up problem, right?
Are there still other issues?",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/868#issuecomment-642864992,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Yes, segfault and memory problems no longer appear.
I can't seem to type ^E or ^F or whatever's supposed to break out to the sim> prompt.  That's the only major outstanding issue.  It used to work but stopped at some point along the when when I added more features.  I'll look into it tomorrow.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,17,https://github.com/simh/simh/pull/868#issuecomment-642905323,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Clock test works for me on Windows, including ^E.
Another update to the video code moving the gamecontroller/joystick initialization/cleanup to a more appropriate place so that it doesn't shutdown while some events may be pending.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/868#issuecomment-643095454,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Looks like I need to call sim_poll_kbd for ^E to work.  (I have a vague memory this worked without sim_poll_kbd before I implemented imlac_kbd.c, but never mind.)
With that fixed, I declare this ""ready for review"".",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,19,https://github.com/simh/simh/pull/868#issuecomment-643271740,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Looks like I need to call sim_poll_kbd for ^E to work. (I have a vague memory this worked without sim_poll_kbd before I implemented imlac_kbd.c, but never mind.)

There was a bug that disabled auto detecting WRU if sim_video was in use on Linux.  That has been fixed now.  You no longer need to be calling sim_poll_kbd().
Otherwise:

imlac_kbd.c has tabs in it.
Correct line endings to CRLF
Squash these commits
Use a current commit date rather than a couple of months back

FYI.  There is a new sim_video which properly initializes (and cleans up) the newly added draw mutex and gamepad/joystick initialization on different host setups.",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/markpizz,20,https://github.com/simh/simh/pull/868#issuecomment-643277399,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Build fails without libSDL2.
Please fix:
*** Info ***
*** Info *** The simulator you are building could provide more
*** Info *** functionality if video support were available on your system.
*** Info *** Install the development components of libSDL2 packaged for
*** Info *** your operating system distribution for your Linux
*** Info *** system:
*** Info ***        $ sudo apt-get install libsdl2-dev libpng-dev
*** Info ***
***
*** imlac Simulator being built with:
*** - compiler optimizations and no debugging support. GCC Version: 9.3.0.
*** - Per simulator tests will be run.
***
*** git commit id is 9a760126d66ca2a3818faf52b0b3421a5d1c8ad6.
*** git commit time is 2020-06-11T13:22:37-0700.
***
gcc -std=gnu99 -U__STRICT_ANSI__  -O2 -finline-functions -fgcse-after-reload -fpredictive-commoning -fipa-cp-clone -fno-unsafe-loop-optimizations -fno-strict-overflow -DSIM_GIT_COMMIT_ID=9a760126d66ca2a3818faf52b0b3421a5d1c8ad6 -DSIM_GIT_COMMIT_TIME=2020-06-11T13:22:37-0700  -DSIM_COMPILER=""GCC Version: 9.3.0"" -DSIM_BUILD_TOOL=simh-makefile -I . -D_GNU_SOURCE -DUSE_READER_THREAD -DSIM_ASYNCH_IO  -DHAVE_PCRE_H -DHAVE_SEMAPHORE -DHAVE_SYS_IOCTL -DHAVE_LINUX_CDROM -DHAVE_DLOPEN=so -DHAVE_UTIME -DHAVE_LIBPNG -DHAVE_ZLIB -DHAVE_GLOB -DHAVE_SHM_OPEN  ./imlac/imlac_sys.c ./imlac/imlac_cpu.c ./imlac/imlac_dp.c ./imlac/imlac_crt.c ./imlac/imlac_kbd.c ./imlac/imlac_tty.c ./imlac/imlac_pt.c   ./scp.c ./sim_console.c ./sim_fio.c ./sim_timer.c ./sim_sock.c ./sim_tmxr.c ./sim_ether.c ./sim_tape.c ./sim_disk.c ./sim_serial.c ./sim_video.c ./sim_imd.c ./sim_card.c -I ./imlac  -o BIN/imlac -lm -lrt -lpthread -lpcre -ldl -lpng -lz
/usr/bin/ld: /tmp/ccTAgHh4.o: in function `crt_svc':
imlac_crt.c:(.text+0x10): undefined reference to `imlac_cycle'
/usr/bin/ld: /tmp/ccTAgHh4.o: in function `crt_reset':
imlac_crt.c:(.text+0x3f): undefined reference to `display_close'
/usr/bin/ld: imlac_crt.c:(.text+0x59): undefined reference to `display_reset'
/usr/bin/ld: imlac_crt.c:(.text+0x66): undefined reference to `imlac_init'
/usr/bin/ld: /tmp/ccTAgHh4.o: in function `crt_point':
imlac_crt.c:(.text+0xf9): undefined reference to `imlac_point'
/usr/bin/ld: /tmp/ccTAgHh4.o: in function `crt_line':
imlac_crt.c:(.text+0x1a6): undefined reference to `imlac_line'
/usr/bin/ld: /tmp/cclBkOC3.o: in function `kbd_reset':
imlac_kbd.c:(.text+0x379): undefined reference to `vid_display_kb_event_process'
/usr/bin/ld: imlac_kbd.c:(.text+0x3bd): undefined reference to `vid_display_kb_event_process'
/usr/bin/ld: /tmp/cclBkOC3.o: in function `kbd_event':
imlac_kbd.c:(.text+0x44c): undefined reference to `vid_key_name'
collect2: error: ld returned 1 exit status
make: *** [makefile:2223: BIN/imlac] Error 1",True,{}
simh/simh,https://github.com/simh/simh,868,2020-06-07T18:43:13Z,2020-06-12T14:24:17Z,2020-06-12T14:24:17Z,MERGED,True,3429,3,16,https://github.com/larsbrinkhoff,Add Imlac simulator,1,[],https://github.com/simh/simh/pull/868,https://github.com/larsbrinkhoff,21,https://github.com/simh/simh/pull/868#issuecomment-643290470,"I will turn this into a pull request when the Imlac simulator is ready for merging.
For now, there are some things that need fixing:

 Crash after a minute or so.
 Not possible to interrupt with Control-E.
 Configuration for bootstrap ROM.
 Line drawing algorithm needs polish.
 Check that keyboard input is fully working.","Thanks.  I believe your comments have been adressed:

No longer using sim_poll_kbd for ^E.
Expanded tabs.
Fixed line endings.
There is only one commit, so nothing to squash.
Date is now Fri Jun 12 16:05:50 2020 +0200.
Added #ifdef HAVE_LIBSDL where necessary.",True,{}
simh/simh,https://github.com/simh/simh,872,2020-06-08T07:26:03Z,2020-06-08T09:49:03Z,2020-06-08T09:49:03Z,MERGED,True,33,32,1,https://github.com/psco,AltairZ80: Fixed breakpoint detection after PC wrap around,1,[],https://github.com/simh/simh/pull/872,https://github.com/psco,1,https://github.com/simh/simh/pull/872,,,True,{}
simh/simh,https://github.com/simh/simh,875,2020-06-11T10:05:44Z,2020-06-11T12:47:50Z,2020-06-11T12:47:50Z,MERGED,True,0,0,1,https://github.com/psco,AltairZ80: Updated documentation for North Star MDS-A from Mike Douglas,1,[],https://github.com/simh/simh/pull/875,https://github.com/psco,1,https://github.com/simh/simh/pull/875,,,True,{}
simh/simh,https://github.com/simh/simh,881,2020-06-14T14:20:46Z,2020-06-14T16:32:26Z,2020-06-22T05:38:28Z,MERGED,True,4,4,1,https://github.com/larsbrinkhoff,IMLAC: Fix bug in shift/rotate instructions.,1,[],https://github.com/simh/simh/pull/881,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/881,Instruction decoding used wrong bits.,Instruction decoding used wrong bits.,True,{}
simh/simh,https://github.com/simh/simh,882,2020-06-14T16:40:20Z,2020-06-14T16:53:16Z,2020-06-14T16:53:16Z,MERGED,True,19,6,1,https://github.com/larsbrinkhoff,IMLAC: Implement 8-level return stack for display processor.,1,[],https://github.com/simh/simh/pull/882,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/882,The Imlac display processor would only allow one single level of subroutine calls.  An option expanded this to an eight level stack.  This is needed by the Maze game.,The Imlac display processor would only allow one single level of subroutine calls.  An option expanded this to an eight level stack.  This is needed by the Maze game.,True,{}
simh/simh,https://github.com/simh/simh,882,2020-06-14T16:40:20Z,2020-06-14T16:53:16Z,2020-06-14T16:53:16Z,MERGED,True,19,6,1,https://github.com/larsbrinkhoff,IMLAC: Implement 8-level return stack for display processor.,1,[],https://github.com/simh/simh/pull/882,https://github.com/markpizz,2,https://github.com/simh/simh/pull/882#issuecomment-643792104,The Imlac display processor would only allow one single level of subroutine calls.  An option expanded this to an eight level stack.  This is needed by the Maze game.,"When you've got various activities that you work on on the side in separate branches and then eventually put them up as pull requests, please date them with current dates (or dates in sequence with the master branch if commits have been quiet) in the pull request commits.  This one is an example of that.",True,{}
simh/simh,https://github.com/simh/simh,882,2020-06-14T16:40:20Z,2020-06-14T16:53:16Z,2020-06-14T16:53:16Z,MERGED,True,19,6,1,https://github.com/larsbrinkhoff,IMLAC: Implement 8-level return stack for display processor.,1,[],https://github.com/simh/simh/pull/882,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/882#issuecomment-643792601,The Imlac display processor would only allow one single level of subroutine calls.  An option expanded this to an eight level stack.  This is needed by the Maze game.,I'll try to remember that.  Commit date updated.,True,{}
simh/simh,https://github.com/simh/simh,885,2020-06-14T17:58:25Z,2020-06-14T18:03:37Z,2020-06-14T18:03:37Z,MERGED,True,3,3,1,https://github.com/larsbrinkhoff,IMLAC: Fix bug in long vector instruction.,1,[],https://github.com/simh/simh/pull/885,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/885,X and Y were swapped.,X and Y were swapped.,True,{}
simh/simh,https://github.com/simh/simh,885,2020-06-14T17:58:25Z,2020-06-14T18:03:37Z,2020-06-14T18:03:37Z,MERGED,True,3,3,1,https://github.com/larsbrinkhoff,IMLAC: Fix bug in long vector instruction.,1,[],https://github.com/simh/simh/pull/885,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/885#issuecomment-643800530,X and Y were swapped.,Maze now fully working.,True,{}
simh/simh,https://github.com/simh/simh,887,2020-06-15T10:44:33Z,2020-06-15T14:11:15Z,2020-06-15T14:11:15Z,MERGED,True,73,2,5,https://github.com/larsbrinkhoff,IMLAC: Add MIT bell.,1,[],https://github.com/simh/simh/pull/887,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/887,A hardware device particular to MIT with some kind of bell sound.,A hardware device particular to MIT with some kind of bell sound.,True,{}
simh/simh,https://github.com/simh/simh,888,2020-06-15T16:07:03Z,2020-06-15T17:59:50Z,2020-06-15T17:59:50Z,MERGED,True,2,3,1,https://github.com/larsbrinkhoff,IMLAC: Fix keyboard TYPE=CONSOLE.,1,[],https://github.com/simh/simh/pull/888,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/888,Explicitly call the reset function for the modifier to take effect.,Explicitly call the reset function for the modifier to take effect.,True,{}
simh/simh,https://github.com/simh/simh,889,2020-06-16T12:24:36Z,2020-06-16T12:47:29Z,2020-06-16T12:47:29Z,MERGED,True,21,10,2,https://github.com/larsbrinkhoff,IMLAC: Fix data switches.,1,[],https://github.com/simh/simh/pull/889,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/889,"Minor fixes for the data switches.
Many Imlac programs require data switch 0 to be on by convention.  Switch 0 is the most significant bit in the data switch register, so type DEPOSIT DS 100000 to set it.","Minor fixes for the data switches.
Many Imlac programs require data switch 0 to be on by convention.  Switch 0 is the most significant bit in the data switch register, so type DEPOSIT DS 100000 to set it.",True,{}
simh/simh,https://github.com/simh/simh,890,2020-06-16T16:36:59Z,2020-06-16T17:59:34Z,2020-06-16T17:59:40Z,CLOSED,False,2,0,1,https://github.com/larsbrinkhoff,APPVEYOR: Save built artifacts in a zip file.,1,[],https://github.com/simh/simh/pull/890,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/890,"I'm not sure if this will work, but according to https://www.appveyor.com/docs/packaging-artifacts/, this should put the entire BIN directory in a zip file on the Appveyor web site.
The pull request is in a draft state until I can verify it works.  Also, is it a good thing to do?","I'm not sure if this will work, but according to https://www.appveyor.com/docs/packaging-artifacts/, this should put the entire BIN directory in a zip file on the Appveyor web site.
The pull request is in a draft state until I can verify it works.  Also, is it a good thing to do?",True,{}
simh/simh,https://github.com/simh/simh,890,2020-06-16T16:36:59Z,2020-06-16T17:59:34Z,2020-06-16T17:59:40Z,CLOSED,False,2,0,1,https://github.com/larsbrinkhoff,APPVEYOR: Save built artifacts in a zip file.,1,[],https://github.com/simh/simh/pull/890,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/890#issuecomment-644893723,"I'm not sure if this will work, but according to https://www.appveyor.com/docs/packaging-artifacts/, this should put the entire BIN directory in a zip file on the Appveyor web site.
The pull request is in a draft state until I can verify it works.  Also, is it a good thing to do?",I do see a BIN.zip for download here: https://ci.appveyor.com/project/simh/simh/builds/33557392/artifacts,True,{}
simh/simh,https://github.com/simh/simh,890,2020-06-16T16:36:59Z,2020-06-16T17:59:34Z,2020-06-16T17:59:40Z,CLOSED,False,2,0,1,https://github.com/larsbrinkhoff,APPVEYOR: Save built artifacts in a zip file.,1,[],https://github.com/simh/simh/pull/890,https://github.com/markpizz,3,https://github.com/simh/simh/pull/890#issuecomment-644916474,"I'm not sure if this will work, but according to https://www.appveyor.com/docs/packaging-artifacts/, this should put the entire BIN directory in a zip file on the Appveyor web site.
The pull request is in a draft state until I can verify it works.  Also, is it a good thing to do?",I see essentially no value for a accumulation of these (especially including all the build intermediate files in BIN/NT/Projects).  These aren't interesting to provide for every commit.  I already push out a set of binaries for Windows users who just want to get the binaries from time to time into the https://github.com/simh/Win32-Development-Binaries repo.,True,{}
simh/simh,https://github.com/simh/simh,890,2020-06-16T16:36:59Z,2020-06-16T17:59:34Z,2020-06-16T17:59:40Z,CLOSED,False,2,0,1,https://github.com/larsbrinkhoff,APPVEYOR: Save built artifacts in a zip file.,1,[],https://github.com/simh/simh/pull/890,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/890#issuecomment-644919728,"I'm not sure if this will work, but according to https://www.appveyor.com/docs/packaging-artifacts/, this should put the entire BIN directory in a zip file on the Appveyor web site.
The pull request is in a draft state until I can verify it works.  Also, is it a good thing to do?","I think the zip file could be restricted to the BIN/Win32-Release directory, but it seems you prefer your Win32-Development-Binaries solution so I'll close this.",True,{}
simh/simh,https://github.com/simh/simh,895,2020-06-19T19:57:58Z,2020-06-19T21:30:45Z,2020-06-19T21:30:45Z,MERGED,True,3,3,2,https://github.com/larsbrinkhoff,IMLAC: Fix two minor bugs.,1,[],https://github.com/simh/simh/pull/895,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/895,"Display PC masked to be inside core memory.
Do not sign extend characters read from TTY.","Display PC masked to be inside core memory.
Do not sign extend characters read from TTY.",True,{}
simh/simh,https://github.com/simh/simh,896,2020-06-20T14:01:38Z,2020-06-20T15:32:05Z,2020-06-20T15:32:05Z,MERGED,True,78,7,3,https://github.com/larsbrinkhoff,"IMLAC: Implement PTR, paper tape reader.",1,[],https://github.com/simh/simh/pull/896,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/896,,,True,{}
simh/simh,https://github.com/simh/simh,897,2020-06-21T21:48:08Z,2020-06-22T16:24:26Z,2020-11-18T18:10:48Z,CLOSED,False,767,0,4,https://github.com/deltecent,"AltairZ80: adds ""PMMI"" MM-103 modem device",1,[],https://github.com/simh/simh/pull/897,https://github.com/deltecent,1,https://github.com/simh/simh/pull/897,"This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.","This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.",True,{}
simh/simh,https://github.com/simh/simh,897,2020-06-21T21:48:08Z,2020-06-22T16:24:26Z,2020-11-18T18:10:48Z,CLOSED,False,767,0,4,https://github.com/deltecent,"AltairZ80: adds ""PMMI"" MM-103 modem device",1,[],https://github.com/simh/simh/pull/897,https://github.com/psco,2,https://github.com/simh/simh/pull/897#issuecomment-647532931,"This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.","Ok to merge, updated documentation with reference to sample software to follow.",True,{}
simh/simh,https://github.com/simh/simh,897,2020-06-21T21:48:08Z,2020-06-22T16:24:26Z,2020-11-18T18:10:48Z,CLOSED,False,767,0,4,https://github.com/deltecent,"AltairZ80: adds ""PMMI"" MM-103 modem device",1,[],https://github.com/simh/simh/pull/897,https://github.com/markpizz,3,https://github.com/simh/simh/pull/897#issuecomment-647597762,"This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.","Neither this nor your other pull request were done on top of the latest state in the master branch.
How about making a single pull request which has 2 commits, each of which contains the separate commits you've provided here that are indeed based on you having done a pull from the master branch just prior to doing this.
Also, the explanation/justification you've provided in the pull request text for each of these pull requests should be included as the extended commit message for each of the respective commits.  Extended commit message means:
Current Title line

Extended commit message text, lines wrapped before 80.",True,{}
simh/simh,https://github.com/simh/simh,897,2020-06-21T21:48:08Z,2020-06-22T16:24:26Z,2020-11-18T18:10:48Z,CLOSED,False,767,0,4,https://github.com/deltecent,"AltairZ80: adds ""PMMI"" MM-103 modem device",1,[],https://github.com/simh/simh/pull/897,https://github.com/deltecent,4,https://github.com/simh/simh/pull/897#issuecomment-647616895,"This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.","How about making a single pull request which has 2 commits, each of which contains the separate commits you've provided here that are indeed based on you having done a pull from the master branch just prior to doing this.

I was scorned at before for having more than 1 commit, but I will change it.

Neither this nor your other pull request were done on top of the latest state in the master branch.

My sincere apologies for missing possible changes within that 7 hour window. I will strive to do better.
commit d6f8f204344b2d582166935bcbe4928978f4a6e1 (HEAD -> 2sio, origin/2sio)
Author: Patrick Linstruth <patrick@deltecent.com>
Date:   Sun Jun 21 21:03:38 2020 -0700

    AltairZ80: Add `M2SIO0` and `M2SIO1` MITS 88-2SIO devices that support TMXR.

commit 136e16d54e976c43e9ab6f33a5e4977fa12f01fa (upstream/master, origin/master, master)
Author: Mark Pizzolato <mark@infocomm.com>
Date:   Sun Jun 21 14:18:03 2020 -0700

    TMXR: Add option to avoid connect message for incoming TCP connections
    
    As discussed in #843",True,{}
simh/simh,https://github.com/simh/simh,897,2020-06-21T21:48:08Z,2020-06-22T16:24:26Z,2020-11-18T18:10:48Z,CLOSED,False,767,0,4,https://github.com/deltecent,"AltairZ80: adds ""PMMI"" MM-103 modem device",1,[],https://github.com/simh/simh/pull/897,https://github.com/markpizz,5,https://github.com/simh/simh/pull/897#issuecomment-647621171,"This PR adds a PMMI device to the AltairZ80 simulator that emulates the PMMI Communications MM-103 MODEM & Communications Adapter.
This device was added at the request of a Facebook user that is attempting to preserve and document various relevant communications programs for CP/M and allow users to experience   communicating and sharing information with other remote computers of the same period, all on modern hardware.
This device does a reasonable job emulating the MC6860L digital modem chip in such a way that communications software can communicate over a serial port or socket.","I was scorned at before for having more than 1 commit, but I will change it.

If you're generating 2 pull requests at the same time both can't possibly be be directly derived from the master branch and be derived from each other.
Feel free to generate one at a time, but then you get to wait until the prior one has been merged before doing the second one.",True,{}
simh/simh,https://github.com/simh/simh,898,2020-06-22T04:09:33Z,2020-06-22T16:03:41Z,2020-07-02T00:32:43Z,CLOSED,False,777,0,4,https://github.com/deltecent,"AltairZ80: adds ""M2SIO0"" and ""M2SIO1"" MITS 88-2SIO devices that support TMXR.",1,[],https://github.com/simh/simh/pull/898,https://github.com/deltecent,1,https://github.com/simh/simh/pull/898,"This PR adds two new devices, M2SIO0 and M2SIO1. These two independent devices provide ""raw"" 88-2SIO ports that can be used instead of the SIO device for attaching socket and serial ports using TMXR.","This PR adds two new devices, M2SIO0 and M2SIO1. These two independent devices provide ""raw"" 88-2SIO ports that can be used instead of the SIO device for attaching socket and serial ports using TMXR.",True,{}
simh/simh,https://github.com/simh/simh,898,2020-06-22T04:09:33Z,2020-06-22T16:03:41Z,2020-07-02T00:32:43Z,CLOSED,False,777,0,4,https://github.com/deltecent,"AltairZ80: adds ""M2SIO0"" and ""M2SIO1"" MITS 88-2SIO devices that support TMXR.",1,[],https://github.com/simh/simh/pull/898,https://github.com/psco,2,https://github.com/simh/simh/pull/898#issuecomment-647533311,"This PR adds two new devices, M2SIO0 and M2SIO1. These two independent devices provide ""raw"" 88-2SIO ports that can be used instead of the SIO device for attaching socket and serial ports using TMXR.","Ok to merge, updated documentation with reference to sample software to follow.",True,{}
simh/simh,https://github.com/simh/simh,899,2020-06-22T16:31:03Z,2020-06-22T17:50:37Z,2020-11-18T18:10:46Z,MERGED,True,1543,0,5,https://github.com/deltecent,AltairZ80: adds MITS 88-2SIO and PMMI MM-103 devices,2,[],https://github.com/simh/simh/pull/899,https://github.com/deltecent,1,https://github.com/simh/simh/pull/899,,,True,{}
simh/simh,https://github.com/simh/simh,900,2020-06-22T22:11:24Z,2020-06-22T23:38:09Z,2020-11-18T18:10:45Z,MERGED,True,20,18,2,https://github.com/deltecent,AltairZ80: fixes incorrect type usage for t_stat in PMMI and 88-2SIO,2,[],https://github.com/simh/simh/pull/900,https://github.com/deltecent,1,https://github.com/simh/simh/pull/900,,,True,{}
simh/simh,https://github.com/simh/simh,902,2020-06-24T01:06:36Z,2020-06-24T03:36:24Z,2020-06-24T03:36:24Z,MERGED,True,273,55,19,https://github.com/rcornwell,Regular update.,4,[],https://github.com/simh/simh/pull/902,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/902,"Update B5500 and I7000 and PDP10 output only devices to default to append mode.
PDP10-KA: various fixes for WAITS support. New TOD device for WAITS.","Update B5500 and I7000 and PDP10 output only devices to default to append mode.
PDP10-KA: various fixes for WAITS support. New TOD device for WAITS.",True,{}
simh/simh,https://github.com/simh/simh,904,2020-06-26T12:20:59Z,2020-06-26T17:01:34Z,2020-06-26T17:01:35Z,MERGED,True,84,2,3,https://github.com/larsbrinkhoff,IMLAC: Three updates.,3,[],https://github.com/simh/simh/pull/904,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/904,"Implement CPU instruction execution history.
Load ""block"" register when loading DPC.

Added:

Remove unused variable.","Implement CPU instruction execution history.
Load ""block"" register when loading DPC.

Added:

Remove unused variable.",True,{}
simh/simh,https://github.com/simh/simh,904,2020-06-26T12:20:59Z,2020-06-26T17:01:34Z,2020-06-26T17:01:35Z,MERGED,True,84,2,3,https://github.com/larsbrinkhoff,IMLAC: Three updates.,3,[],https://github.com/simh/simh/pull/904,https://github.com/markpizz,2,https://github.com/simh/simh/pull/904#issuecomment-650219555,"Implement CPU instruction execution history.
Load ""block"" register when loading DPC.

Added:

Remove unused variable.","Time is moving backwards again.  Please fix,
This would be an opportunity to just fix the compiler warning we discussed the other day.",True,{}
simh/simh,https://github.com/simh/simh,904,2020-06-26T12:20:59Z,2020-06-26T17:01:34Z,2020-06-26T17:01:35Z,MERGED,True,84,2,3,https://github.com/larsbrinkhoff,IMLAC: Three updates.,3,[],https://github.com/simh/simh/pull/904,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/904#issuecomment-650224443,"Implement CPU instruction execution history.
Load ""block"" register when loading DPC.

Added:

Remove unused variable.","Oh, right.  I'll fix that.",True,{}
simh/simh,https://github.com/simh/simh,904,2020-06-26T12:20:59Z,2020-06-26T17:01:34Z,2020-06-26T17:01:35Z,MERGED,True,84,2,3,https://github.com/larsbrinkhoff,IMLAC: Three updates.,3,[],https://github.com/simh/simh/pull/904,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/904#issuecomment-650241745,"Implement CPU instruction execution history.
Load ""block"" register when loading DPC.

Added:

Remove unused variable.",Fixed.,True,{}
simh/simh,https://github.com/simh/simh,906,2020-06-30T22:25:48Z,2020-07-13T16:53:55Z,2020-07-13T17:07:40Z,CLOSED,False,588,355,1,https://github.com/deltecent,AltairZ80: Adds Tarbell MDL-2022 double density disk controller support to the TARBELL device.,1,[],https://github.com/simh/simh/pull/906,https://github.com/deltecent,1,https://github.com/simh/simh/pull/906,"Tarbell produced single and double density floppy disk controllers.
The first version of the TARBELL device only supported the single
density controller. This PR adds support for the double density
controller. The TARBELL device can be configured as a single
density or double density controller by using the ""SET TARBELL
MODEL={SD|DD}"" command.","Tarbell produced single and double density floppy disk controllers.
The first version of the TARBELL device only supported the single
density controller. This PR adds support for the double density
controller. The TARBELL device can be configured as a single
density or double density controller by using the ""SET TARBELL
MODEL={SD|DD}"" command.",True,{}
simh/simh,https://github.com/simh/simh,908,2020-07-02T00:33:46Z,2020-07-13T16:53:43Z,2020-07-13T22:53:15Z,CLOSED,False,16,8,1,https://github.com/deltecent,AltairZ80: Fixes console input race condition when both M2SIOx ports are enabled and unattached.,1,[],https://github.com/simh/simh/pull/908,https://github.com/deltecent,1,https://github.com/simh/simh/pull/908,,,True,{}
simh/simh,https://github.com/simh/simh,908,2020-07-02T00:33:46Z,2020-07-13T16:53:43Z,2020-07-13T22:53:15Z,CLOSED,False,16,8,1,https://github.com/deltecent,AltairZ80: Fixes console input race condition when both M2SIOx ports are enabled and unattached.,1,[],https://github.com/simh/simh/pull/908,https://github.com/markpizz,2,https://github.com/simh/simh/pull/908#issuecomment-657822586,,"Submit this commit against the HEAD of the master branch and I'll accept it as long as the commit message is < 80 characters.
Extended commit message contents should wrap before 80 and be separated from the primary line by a blank line.
The tarbell commit, which can be part of the same pull request, but likewise should have a commit message that follows these rules.
If you make it part of the same commit, they will be in sequence and can be merged directly without separate merge commits which we avoid.",True,{}
simh/simh,https://github.com/simh/simh,908,2020-07-02T00:33:46Z,2020-07-13T16:53:43Z,2020-07-13T22:53:15Z,CLOSED,False,16,8,1,https://github.com/deltecent,AltairZ80: Fixes console input race condition when both M2SIOx ports are enabled and unattached.,1,[],https://github.com/simh/simh/pull/908,https://github.com/deltecent,3,https://github.com/simh/simh/pull/908#issuecomment-657829653,,"I am no longer submitting PRs. I'll just maintain my own fork.
…
 On Jul 13, 2020, at 3:22 PM, Mark Pizzolato ***@***.***> wrote:


 Submit this commit against the HEAD of the master branch and I'll accept it as long as the commit message is < 80 characters.

 Extended commit message contents should wrap before 80 and be separated from the primary line by a blank line.

 The tarbell commit, which can be part of the same pull request, but likewise should have a commit message that follows these rules.

 If you make it part of the same commit, they will be in sequence and can be merged directly without separate merge commits which we avoid.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,908,2020-07-02T00:33:46Z,2020-07-13T16:53:43Z,2020-07-13T22:53:15Z,CLOSED,False,16,8,1,https://github.com/deltecent,AltairZ80: Fixes console input race condition when both M2SIOx ports are enabled and unattached.,1,[],https://github.com/simh/simh/pull/908,https://github.com/markpizz,4,https://github.com/simh/simh/pull/908#issuecomment-657842588,,"Meanwhile, I was offline for more than a week due to both a physical move and a significant infrastructure build and thus missed your updates.
Fine with me keep away though. Good Luck.",True,{}
simh/simh,https://github.com/simh/simh,911,2020-07-08T06:40:57Z,2020-07-08T15:39:04Z,2020-07-09T06:07:52Z,MERGED,True,55,7,3,https://github.com/larsbrinkhoff,IMLAC: Fullscreen mode.,3,[],https://github.com/simh/simh/pull/911,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/911,"This adds sim_video APIs for querying and setting fullscreen mode.  And then uses these APIs from the Imlac simulator.
When in fullscreen mode, the frame buffer is scaled to the size of the display and positioned in the center.","This adds sim_video APIs for querying and setting fullscreen mode.  And then uses these APIs from the Imlac simulator.
When in fullscreen mode, the frame buffer is scaled to the size of the display and positioned in the center.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,1,https://github.com/simh/simh/pull/912,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,2,https://github.com/simh/simh/pull/912#issuecomment-657270012,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"The problem is what happens when PMMI raises
DTR. In this scenario, tmxr_poll_conn() will no longer accept the
connection, tmxr_set_get_modem_bits() will and there is no way for
the DEVICE to know that a connection was actually accepted at
the time DTR is set or in the _svc routine. The only way to know
that there is now an active connection is to look directly at
tmln.conn.

Not true.  Once you've raised DTR, you can then call tmxr_set_get_modem_bits() again, and at that point if the line is connected, DSR will be set and DCD will also be set if you have set CTS.  Neither DSR or DCD will be set if there is no connection.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,3,https://github.com/simh/simh/pull/912#issuecomment-657271375,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"I didn't think it was possible to set CTS as that's in input which is set by TMXR. Did you mean RTS?
So what you're saying is:
tmxr_set_get_modem_bits(raise DTR);
tmxr_set_get_modem_bits(get incoming status);
connected = DSR | DCD status;

That seems like a better solution if that's what you're getting at.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,4,https://github.com/simh/simh/pull/912#issuecomment-657271954,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"Actually, I misspoke.  if you've set RTS (as well as DTR), then CTS will be set AND then DCD will also be set.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,5,https://github.com/simh/simh/pull/912#issuecomment-657274844,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"I'm glad you brought this up. I was fixated on using tmln.conn for knowing the connection status, not modem status lines. And since the PMMI only has DTR, RI, and CTS, I wasn't paying much attention to the others. I'll give this other way a try and report back. I also have the option to have RTS follow DTR, and the default is off. I may change the default to have RTS follow DTR.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,6,https://github.com/simh/simh/pull/912#issuecomment-657283959,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,Your logic treats a socket connection differently from a serial port.  Why is that?  The point is for devices to actually be unaware of the physical connection issues.,True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,7,https://github.com/simh/simh/pull/912#issuecomment-657302446,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"Your logic treats a socket connection differently from a serial port. Why is that? The point is for devices to actually be unaware of the physical connection issues.

A serial port will work just fine without DTR or RTS. Some S100 devices only have DTR, some only have RTS, some have RI and CTS, some have DCD and DSR, some use CTS for DCD, some don't have RI or DCD. With TMXR just passing through these signals with a serial port, the device can use them, manipulate them, or ignore them. I don't see that flexibility with TMXR and sockets. TMXR assumes that DTR must be present to accept a socket connection, for example. Now if there's a way to treat sockets with passthru like a serial port (just tell me when there's a connection and when it goes away), then all the modem signals could be emulated by the device rather than TMXR, but I have not discovered a way to do that.
I have not dug into this too deeply, but in another case, it looks like TMXR raises DTR and RTS when the serial port is attached. The device wants them to default to off because they shouldn't turn on until the software tells them to, so when the serial connection comes in from tmxr_poll_conn, they're dropped, and I can still transmit and receive data. If I do that with a socket, it won't accept the socket connections, so data can be sent/received, so I only drop DTR/RTS if it's a serial port. TMXR is emulating serial port signals a specific way. Not all simulated devices work that way.
As before, I am not a TMXR expert. I didn't write it and the documentation does not state how much of it works. Much of it is trial and error and the source code is written in such a way that is hard for me to read (I like my opening and closing braces lined up, for example), so trial and error is sometimes easier than figuring out the code.
If you know a better way of doing this, I'm always eager to learn from the authors.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,8,https://github.com/simh/simh/pull/912#issuecomment-657321788,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"I'm not sure i follow your thinking.
When connecting to physical serial ports, your simulator sets the modem bits you can set and it gets the incoming bits from the physical serial port.
Things logically plugged into serial ports are DCE devices (Modems), or if they're not they connect via a ""NULL Modem"" wiring situation which presents enough stuff for the port to work.  Often such connections present DSR (and/or DCD) on.  When these signals are present on the serial port connector, then TMXR will make them visible to the simulated device.  In the case of socket connections, the simulated modem signals follow the behaviors of how DCE would behave.
If it is important to present connection state into the simulated system by the device, then setting DTR (possibly all the time) and observing the DSR DCD signals passes that info inward.  If, on the other hand, the simulated system really doesn't care about actual connection, then you can send output to the port all day long and just like with a physical serial port, that output will collect on the floor in the back of the computer.  Since these output bits have no dimension, they collection behind the computer could go on infinitely.  :-)",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,9,https://github.com/simh/simh/pull/912#issuecomment-657331517,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"Things logically plugged into serial ports are DCE devices (Modems), or if they're not they connect via a ""NULL Modem"" wiring situation which presents enough stuff for the port to work.

That is a false assumption when attempting to simulate 1970s hardware.

If it is important to present connection state into the simulated system by the device, then setting DTR (possibly all the time) and observing the DSR DCD signals passes that info inward.

That assumes that CBBS, written in 1978 for the PMMI modem, uses DTR and CTS the way you think it should use DTR and CTS. It doesn't, which isn't an issue when using TMXR with a serial port, only with a socket.

In the case of socket connections, the simulated modem signals follow the behaviors of how DCE would behave.

A DCE In 1976 or 2020? That's the issue. There was no standard behavior in 1976 (the MITS 88-2SIO works different than the PMMI modem). TMXR is attempting to emulate modem signals for a communications device (socket) that has no modem signals, thus they have to be emulated based on assumptions that may not work when emulating various serial devices, especially when emulating devices built in the 1970s. That is the reason TMXR itself must treat a socket connection different from a serial port, because they are different. I can jumper DCD on my modem to DSR on the host, or to CTS, or to CTS and DSR, or maybe just RI, raise DTR or not raise DTR, depending on what the emulated hardware and software need, and TMXR doesn't care because the tmxr_set_modem_control_passthru()` seems to cause TMXR to ""get out of the way"" when using a serial port, but not when using a socket. That is why the device must be aware of the physical connection because TMXR behaves differently when using a socket than when using a serial port. If one of TMXR's socket assumptions gets in the way, the device needs to do what it can to get around that assumption. An emulated serial device that's attached to a serial port doesn't need to worry about TMXR's assumptions because there aren't any. The input and output signals are physical, not emulated, and TMXR doesn't seem to care if DTR or high or low, it will still send/receive data or do whatever it is the device tells it. That's not the case when using a socket. If TMXR actually behaved the same when using a socket or serial port, then yes, the device wouldn't need to care, but that's not how TMXR appears to work.
One of the assumptions I'm trying to get around is TMXR not accepting an incoming socket connection, rather only raising RI and queuing the connection, if DTR is low. The assumption is DTR is to be used for flow control whether the device wants it to or not and an incoming connection will be used to drive RI whether the DEVICE wants it to or not, all of which could be done in the DEVICE if the author chose. This behavior does not exist when using a serial port.

...then you can send output to the port all day long and just like with a physical serial port, that output will collect on the floor in the back of the computer

I don't believe that statement to be true. All a serial port needs is TX, RX, and Ground, unless the DEVICE and/or SOFTWARE say otherwise. A serial port isn't a logical connection like a socket. A serial port's connection is always physical. Bits won't fall on the ground like they will if TMXR doesn't handle an incoming socket connection. The RS-232 signals on the wire don't care and TMXR doesn't impose its will on a DEVICE when using a serial port, only when using a socket, essentially making the DEVICE and all the 40+ year old software be redesigned, rewritten or patched to conform to TMXR, but only when using a socket.
I think a better solution would be to allow the device to handle the socket without the use of DTR, for example, have tmxr_poll_conn let the device know there is a pending connection and then a way to tell TMXR to accept it, leaving modem signals out of the logical connection part. TMXR could still emulate RI and other signals, but not require that all software ever written use DTR in a specific way that isn't required when using a serial port.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,10,https://github.com/simh/simh/pull/912#issuecomment-657722227,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"In the case of socket connections, the simulated modem signals follow the behaviors of how DCE would behave.

A DCE In 1976 or 2020? That's the issue. There was no standard behavior in 1976 (the MITS 88-2SIO works different than the PMMI modem).
TMXR is attempting to emulate modem signals for a communications device (socket) that has no modem signals, thus they have to be emulated based on assumptions that may not work when emulating various serial devices, especially when emulating devices built in the 1970s.

Actually, it was specifically designed to behave line DTE/DCE interactions from the 1970's, and it works well with many devices.

That is the reason TMXR itself must treat a socket connection different from a serial port, because they are different. I can jumper DCD on my modem to DSR on the host, or to CTS, or to CTS and DSR, or maybe just RI, raise DTR or not raise DTR, depending on what the emulated hardware and software need, and TMXR doesn't care because the tmxr_set_modem_control_passthru()` seems to cause TMXR to ""get out of the way"" when using a serial port, but not when using a socket.

It is not clear what you would want when using a socket.  You can transmit all day on a socket based line whether it is connected or not just like you can do with a physical serial port.  You can read from a disconnected socket all day and just like a serial port without anything plugged into it, you won't get anything.
When and why does your DEVICE need to know if a line is connected?

That is why the device must be aware of the physical connection because TMXR behaves differently when using a socket than when using a serial port. If one of TMXR's socket assumptions gets in the way, the device needs to do what it can to get around that assumption. An emulated serial device that's attached to a serial port doesn't need to worry about TMXR's assumptions because there aren't any. The input and output signals are physical, not emulated, and TMXR doesn't seem to care if DTR or high or low, it will still send/receive data or do whatever it is the device tells it. That's not the case when using a socket. If TMXR actually behaved the same when using a socket or serial port, then yes, the device wouldn't need to care, but that's not how TMXR appears to work.


One of the assumptions I'm trying to get around is TMXR not accepting an incoming socket connection, rather only raising RI and queuing the connection, if DTR is low. The assumption is DTR is to be used for flow control whether the device wants it to or not and an incoming connection will be used to drive RI whether the DEVICE wants it to or not, all of which could be done in the DEVICE if the author chose. This behavior does not exist when using a serial port.

Well, TMXR, for socket connections, is emulating a modem.  Modems in 1976 DID NOT answer incoming calls unless the connected device presented DTR.  If software running in the simulated system wants to support arbitrary connections from modems, then it can interact with the RI sequencing, or leave DTR turned on all the time.  Supporting this should be up to the software running inside the simulator.  If that software supported modem connections then it will behave this way.  Please point to a specific reference that describes a modem that was sold that used DTR for flow control.  Sure, some random piece of hardware may have done this, but that's not a candidate to connect via TMXR's socket interface.  If you want to connect such a device, us a serial port.


...then you can send output to the port all day long and just like with a physical serial port, that output will collect on the floor in the back of the computer



I don't believe that statement to be true. All a serial port needs is TX, RX, and Ground, unless the DEVICE and/or SOFTWARE say otherwise. A serial port isn't a logical connection like a socket. A serial port's connection is always physical. Bits won't fall on the ground like they will if TMXR doesn't handle an incoming socket connection.

If nothing is connected to a physical serial port, were do transmitted bits go when they are sent out that port?  I believe the fall on the ground.  Transmitted bits through TMXR behave the same way if nothing is connected to either a configured serial port or a socket defined link.

The RS-232 signals on the wire don't care and TMXR doesn't impose its will on a DEVICE when using a serial port, only when using a socket, essentially making the DEVICE and all the 40+ year old software be redesigned, rewritten or patched to conform to TMXR, but only when using a socket.

What 40+ year old software talked to modems, and didn't raise DTR?",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/markpizz,11,https://github.com/simh/simh/pull/912#issuecomment-657819178,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"Looking more closely at the description you've got at the top of the s100_pmmi.c module, you say:

PMMI Communications MM-103 Modem & Communications
adapter.

Is this a modem, or is it a serial port you could connect random devices to?  It would seem that it must be one or the other, but not both.
If it is a modem, then the DEVICE needs to interact with TMXR as TMXR needs and not necessarily expose those details to the simulated system.",True,{}
simh/simh,https://github.com/simh/simh,912,2020-07-12T19:56:13Z,2020-07-13T16:53:32Z,2020-11-18T18:10:28Z,CLOSED,False,10,5,1,https://github.com/deltecent,AltairZ80: Change how PMMI device monitors socket connections.,1,[],https://github.com/simh/simh/pull/912,https://github.com/deltecent,12,https://github.com/simh/simh/pull/912#issuecomment-657830175,Change PMMI to rely on CTS modem input status to determine if there is a socket connection rather than tmxr_poll_conn(). Also change default RTS setting to follow DTR.,"I am no longer submitting PRs. I'll just maintain my own fork.
…
 On Jul 13, 2020, at 3:12 PM, Mark Pizzolato ***@***.***> wrote:


 Looking more closely at the description you've got at the top of the s100_pmmi.c module, you say:

 PMMI Communications MM-103 Modem & Communications
 adapter.

 Is this a modem, or is it a serial port you could connect random devices to? It would seem that it must be one or the other, but not both.

 If it is a modem, then the DEVICE needs to interact with TMXR as TMXR needs and not necessarily expose those details to the simulated system.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
simh/simh,https://github.com/simh/simh,913,2020-07-13T16:47:42Z,2020-07-13T16:53:22Z,2020-07-13T17:07:30Z,CLOSED,False,2,2,1,https://github.com/deltecent,AltairZ80: Fix SS1 device to return correct 2-digit year.,1,[],https://github.com/simh/simh/pull/913,https://github.com/deltecent,1,https://github.com/simh/simh/pull/913,"The SS1 device was returning (tm.tm_year-22) for the 2 digit year
causing the current year to be returned as '98' (120-22=98). This
PR changes the year calculation to (tm.tm_year%100).","The SS1 device was returning (tm.tm_year-22) for the 2 digit year
causing the current year to be returned as '98' (120-22=98). This
PR changes the year calculation to (tm.tm_year%100).",True,{}
simh/simh,https://github.com/simh/simh,913,2020-07-13T16:47:42Z,2020-07-13T16:53:22Z,2020-07-13T17:07:30Z,CLOSED,False,2,2,1,https://github.com/deltecent,AltairZ80: Fix SS1 device to return correct 2-digit year.,1,[],https://github.com/simh/simh/pull/913,https://github.com/markpizz,2,https://github.com/simh/simh/pull/913#issuecomment-657672196,"The SS1 device was returning (tm.tm_year-22) for the 2 digit year
causing the current year to be returned as '98' (120-22=98). This
PR changes the year calculation to (tm.tm_year%100).",@psco absolutely needs to agree with this one.  This change returns a year which most programs that ran on this system would likely be surprised by.,True,{}
simh/simh,https://github.com/simh/simh,914,2020-07-15T06:18:10Z,2020-07-16T03:25:35Z,2020-07-16T03:25:35Z,MERGED,True,0,0,1,https://github.com/psco,AltairZ80: Documentation update covering new devices,1,[],https://github.com/simh/simh/pull/914,https://github.com/psco,1,https://github.com/simh/simh/pull/914,,,True,{}
simh/simh,https://github.com/simh/simh,916,2020-07-17T06:36:12Z,2020-07-17T14:31:45Z,2020-07-17T14:31:45Z,MERGED,True,99,53,3,https://github.com/psco,AltairZ80: SS1 bug fix and unused variable removal,1,[],https://github.com/simh/simh/pull/916,https://github.com/psco,1,https://github.com/simh/simh/pull/916,,,True,{}
simh/simh,https://github.com/simh/simh,921,2020-08-16T07:32:17Z,2020-08-16T12:47:44Z,2020-08-16T12:47:44Z,MERGED,True,726,1,6,https://github.com/psco,AltairZ80: Added Hayes modem and minor bug fix,1,[],https://github.com/simh/simh/pull/921,https://github.com/psco,1,https://github.com/simh/simh/pull/921,,,True,{}
simh/simh,https://github.com/simh/simh,924,2020-09-08T06:56:13Z,2020-09-08T08:27:07Z,2020-09-08T08:27:07Z,MERGED,True,1,1,1,https://github.com/psco,AltairZ80: Minor code clean up to avoid compiler warning,1,[],https://github.com/simh/simh/pull/924,https://github.com/psco,1,https://github.com/simh/simh/pull/924,,,True,{}
simh/simh,https://github.com/simh/simh,925,2020-09-08T13:31:09Z,2020-09-08T15:00:45Z,2020-09-08T15:00:45Z,MERGED,True,6,3,1,https://github.com/sethm,3b2: Fix clang warnings,1,[],https://github.com/simh/simh/pull/925,https://github.com/sethm,1,https://github.com/simh/simh/pull/925,Explicitly cast booleans to t_uint64 before doing logical negation.,Explicitly cast booleans to t_uint64 before doing logical negation.,True,{}
simh/simh,https://github.com/simh/simh,926,2020-09-21T23:51:07Z,2020-09-22T01:25:16Z,2020-09-22T01:25:16Z,MERGED,True,27,10,8,https://github.com/rcornwell,Regular updates.,4,[],https://github.com/simh/simh/pull/926,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/926,Just some minor updates.,Just some minor updates.,True,{}
simh/simh,https://github.com/simh/simh,927,2020-09-22T16:14:51Z,2020-09-22T16:33:22Z,2020-09-22T16:33:22Z,MERGED,True,27,1,2,https://github.com/rcornwell,CARD: Updated comments on raw and other special formats.,1,[],https://github.com/simh/simh/pull/927,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/927,Documentation for raw formats.,Documentation for raw formats.,True,{}
simh/simh,https://github.com/simh/simh,929,2020-09-26T12:15:16Z,2020-09-26T21:40:28Z,2020-09-26T21:40:28Z,CLOSED,False,2,2,1,https://github.com/Quantx,Fixed issue with Nova carry flag not showing CPU history,1,[],https://github.com/simh/simh/pull/929,https://github.com/Quantx,1,https://github.com/simh/simh/pull/929,"Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.","Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.",True,{}
simh/simh,https://github.com/simh/simh,929,2020-09-26T12:15:16Z,2020-09-26T21:40:28Z,2020-09-26T21:40:28Z,CLOSED,False,2,2,1,https://github.com/Quantx,Fixed issue with Nova carry flag not showing CPU history,1,[],https://github.com/simh/simh/pull/929,https://github.com/markpizz,2,https://github.com/simh/simh/pull/929#issuecomment-699496167,"Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.","This is a reasonable change.

The simh project conventions, due to the low commit rate, are generally to avoid merge commits in the repo master branch.  This is generally achieved by doing a pull from the master branch BEFORE your commit (and push to your repo) followed immediately by generating a pull request and/or an email notifying me of your actions.
The simh commit message convention is to format commit messages as:
SIMULATOR/COMPONENT: <80 char summary text>
<blank-line-if-additional explanation is appropriate>
<optional-additional explanation wrapped at less than 80>

Therefore an appropriate commit message for this change might be:
NOVA: Fix carry display in CPU instruction history
Additionally, Some part of your local git setup has your email text name as Quantx rather than ""Samuel Deutsch"" which then causes Quantx to be the committer name visible in the resulting commit.  Keep this if you want, but most folks usually appreciate name recognition.
I can cherry pick this commit and commit it with you as author, with the suggested commit message, or you can drop this pull request and rework it with the above feedback.
By the way, no harm in including the whole problem description and solution you describe in this pull request as optional additional explanation in the actual commit message.  Then the details are represented in all instances of the repository.",True,{}
simh/simh,https://github.com/simh/simh,929,2020-09-26T12:15:16Z,2020-09-26T21:40:28Z,2020-09-26T21:40:28Z,CLOSED,False,2,2,1,https://github.com/Quantx,Fixed issue with Nova carry flag not showing CPU history,1,[],https://github.com/simh/simh/pull/929,https://github.com/Quantx,3,https://github.com/simh/simh/pull/929#issuecomment-699551234,"Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.",I think I'll close this pull request and open a new one with the changes you've recommended. Thanks for your help.,True,{}
simh/simh,https://github.com/simh/simh,930,2020-09-26T22:02:55Z,2020-09-26T23:15:29Z,2020-09-27T00:36:14Z,MERGED,True,2,2,1,https://github.com/Quantx,NOVA: Fix carry display in CPU instruction history,1,[],https://github.com/simh/simh/pull/930,https://github.com/Quantx,1,https://github.com/simh/simh/pull/930,"Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.","Problem: Currently when viewing the Nova CPU history the carry flag is always displayed as 0 regardless of it's actual value at the time.
Cause: The carry bit is stored in bit 17 and is lost when stored into the int16 carry member of struct Hist_entry
Solution: Shift carry into bit 0 before storing it in the CPU history. Improve code for displaying carry bit.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/promovicz,1,https://github.com/simh/simh/pull/932,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/markpizz,2,https://github.com/simh/simh/pull/932#issuecomment-703970293,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","Rather than changing the makefile, if your efforts compiling with different compilers and/or compiler options actually illuminate true bugs, or raise questions about some things (which you mention in passing as surefire bugs), PLEASE create issues which suggest that there is a problem and, if possible, offer suggestions about how to fix each of them.
The change you suggest here is effectively equivalent to:
$ make GCC=""gcc --Wall""

and thus should suffice for the situations you may try to create.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/promovicz,3,https://github.com/simh/simh/pull/932#issuecomment-703976901,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","I disagree. These warnings need to be visible to everyone so that they can be fixed. Otherwise they will just accumulate and continue to produce subtle bugs.
Can this please be given some serious consideration?
I am perfectly willing to reformulate my patch however you want, but I strongly believe in the bug fixing power of warnings and would really appreciate if we could work together to do something about this.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/promovicz,4,https://github.com/simh/simh/pull/932#issuecomment-703978105,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","Also: I am perfectly willing to hunt down the actual warnings that pop up when this gets enabled. I just think that this needs to be a community effort, and enabling warnings is the first step to achieving that.
It works well for most other packages in the world. The standard seems to be ""-Wall everywhere"" and ""-Wextra for developers only"". Maybe simh should follow?",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/markpizz,5,https://github.com/simh/simh/pull/932#issuecomment-703980905,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","After the plethora of noise produced by -Wall (most of  which is actually not operational) comes down to a murmur in the simh codebase, we can consider such a change to the base makefile.
I didn't in anyway intend to suggest that problems need not be fixed, but every warning is not a problem, especially for this codebase which compiles the same modules for different simulators with different build options and thus the same module may emit warnings for some but not others.",True,"{'THUMBS_DOWN': ['https://github.com/clausecker', 'https://github.com/eschaton']}"
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/promovicz,6,https://github.com/simh/simh/pull/932#issuecomment-703981990,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","I am particularly worried about the enormous prevalence of unitialized variable use.
But fair enough. Fix warnings first, enable them later.
As for ""not every warning is a problem"" I don't agree. Code isn't maintained by computers but by humans. When I patch simh I want to submit only code that is warning-free, and that is impossible with the current mess.",True,{'THUMBS_UP': ['https://github.com/eschaton']}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/markpizz,7,https://github.com/simh/simh/pull/932#issuecomment-703982830,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","I am particularly worried about the enormous prevalence of unitialized variable use.

These warnings are a feature of recent gcc functionality.  They may actually be true, or not.  The compiler doesn't seem to be doing as deep a code analysis as the Coverity scans do.  We've aggressively pursued issues that those scans point out about issues like this.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/rcornwell,8,https://github.com/simh/simh/pull/932#issuecomment-703986687,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.",Doing a build with -Wall results in a whole bunch of stupid warnings in sim_debug macro when &dev is used instead of dptr!,True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/promovicz,9,https://github.com/simh/simh/pull/932#issuecomment-703987403,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","I am particularly worried about the enormous prevalence of unitialized variable use.

These warnings are a feature of recent gcc functionality. They may actually be true, or not. The compiler doesn't seem to be doing as deep a code analysis as the Coverity scans do. We've aggressively pursued issues that those scans point out about issues like this.

Cool. That actually alleviates my worries somewhat, although maintainability still suffers.
I suppose this is for another day then. Feel free to close unless you want to keep this discussion for reference.",True,{}
simh/simh,https://github.com/simh/simh,932,2020-10-06T00:56:19Z,2020-10-25T19:59:26Z,2020-10-25T19:59:26Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/932,https://github.com/markpizz,10,https://github.com/simh/simh/pull/932#issuecomment-716203114,"I build simh with custom compiler options. One of the things I'm doing out of habit is enabling -Wall.
It used to be that simh wasn't to bad about it. A warning here and there. But this has changed dramatically since I last checked.
Building simh with just -Wall (no -Wextra, which is less portable in its effect) creates a thunderstorm of warnings, many of which look like they are surefire bugs.
It is my belief that - in the interest of everybody - warnings should be enabled by default and also in travis builds so that this can be fixed incrementally.","The noise level of warnings has been reduced to a minor level when building with -Wall, but we're not going to go with -Wall as a default since there are a good number of cases where variables and/or routines are defined but sometimes not used depending on particular simulator feature needs.
This discussion will remain for reference even as a closed pull request.",True,{}
simh/simh,https://github.com/simh/simh,933,2020-10-07T01:57:38Z,2020-10-07T16:15:16Z,2020-10-07T16:18:07Z,CLOSED,False,581,356,1,https://github.com/deltecent,AltairZ80: Adds support for the Tarbell 2022 double density controller,1,[],https://github.com/simh/simh/pull/933,https://github.com/deltecent,1,https://github.com/simh/simh/pull/933,"The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers.
The model is selected using the ""SET TARBELL MODEL={SD|DD}"" command.","The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers.
The model is selected using the ""SET TARBELL MODEL={SD|DD}"" command.",True,{}
simh/simh,https://github.com/simh/simh,933,2020-10-07T01:57:38Z,2020-10-07T16:15:16Z,2020-10-07T16:18:07Z,CLOSED,False,581,356,1,https://github.com/deltecent,AltairZ80: Adds support for the Tarbell 2022 double density controller,1,[],https://github.com/simh/simh/pull/933,https://github.com/psco,2,https://github.com/simh/simh/pull/933#issuecomment-704768236,"The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers.
The model is selected using the ""SET TARBELL MODEL={SD|DD}"" command.",This looks good and should be included.,True,{}
simh/simh,https://github.com/simh/simh,933,2020-10-07T01:57:38Z,2020-10-07T16:15:16Z,2020-10-07T16:18:07Z,CLOSED,False,581,356,1,https://github.com/deltecent,AltairZ80: Adds support for the Tarbell 2022 double density controller,1,[],https://github.com/simh/simh/pull/933,https://github.com/markpizz,3,https://github.com/simh/simh/pull/933#issuecomment-704850469,"The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers.
The model is selected using the ""SET TARBELL MODEL={SD|DD}"" command.","Hi Patrick,
Please reformat your commit message to follow this pattern:
<affected-component>: 1 line summary description of change < 80 in total length
<blank-line-if-extra-commit-message-is-appropriate>
<Extra commit message content wrapped with lines less than 80>

You might as well remove the unused variables while you're at it.
I could do both and commit with you as author, but some folks prefer to get credit for commits...",True,{}
simh/simh,https://github.com/simh/simh,936,2020-10-07T16:16:27Z,2020-10-07T17:25:41Z,2020-11-18T18:10:27Z,MERGED,True,581,356,1,https://github.com/deltecent,AltairZ80: Adds support for the Tarbell 2022 double density controller,1,[],https://github.com/simh/simh/pull/936,https://github.com/deltecent,1,https://github.com/simh/simh/pull/936,"The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers. The model is
selected using the ""SET TARBELL MODEL={SD|DD}"" command. Also removed
some unused local variables.","The 'tarbell' device now supports Tarbell model 1011 single density
and model 2022 double density floppy disk controllers. The model is
selected using the ""SET TARBELL MODEL={SD|DD}"" command. Also removed
some unused local variables.",True,{}
simh/simh,https://github.com/simh/simh,937,2020-10-09T07:14:06Z,2020-10-09T12:11:43Z,2020-10-09T12:11:43Z,MERGED,True,5,12,1,https://github.com/psco,AltairZ80: Removal of unnecessary variable in s100_pmmi.c,1,[],https://github.com/simh/simh/pull/937,https://github.com/psco,1,https://github.com/simh/simh/pull/937,,,True,{}
simh/simh,https://github.com/simh/simh,938,2020-10-12T19:32:12Z,2020-10-13T00:44:20Z,2020-10-13T00:44:21Z,CLOSED,False,220,264,32,https://github.com/rcornwell,Remove some compiler warnings.,3,[],https://github.com/simh/simh/pull/938,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/938,,,True,{}
simh/simh,https://github.com/simh/simh,938,2020-10-12T19:32:12Z,2020-10-13T00:44:20Z,2020-10-13T00:44:21Z,CLOSED,False,220,264,32,https://github.com/rcornwell,Remove some compiler warnings.,3,[],https://github.com/simh/simh/pull/938,https://github.com/rcornwell,2,https://github.com/simh/simh/pull/938#issuecomment-707417359,,I found some more compiler warnings. Will close this and reopen a new request.,True,{}
simh/simh,https://github.com/simh/simh,939,2020-10-14T00:07:15Z,2020-10-14T01:17:03Z,2020-10-14T01:17:04Z,MERGED,True,303,347,41,https://github.com/rcornwell,Removed compiler warnings.,3,[],https://github.com/simh/simh/pull/939,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/939,,,True,{}
simh/simh,https://github.com/simh/simh,941,2020-10-19T18:34:56Z,2020-10-20T00:28:20Z,2020-10-20T00:28:20Z,MERGED,True,7,8,4,https://github.com/sethm,3b2: Removed compiler warnings.,1,[],https://github.com/simh/simh/pull/941,https://github.com/sethm,1,https://github.com/simh/simh/pull/941,,,True,{}
simh/simh,https://github.com/simh/simh,946,2020-10-26T22:42:16Z,2020-10-27T00:23:58Z,2020-10-27T00:23:58Z,MERGED,True,4,1,2,https://github.com/rcornwell,KA10: Fixed bug in POP instruction on KL10B.,1,[],https://github.com/simh/simh/pull/946,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/946,,,True,{}
simh/simh,https://github.com/simh/simh,947,2020-10-28T01:32:32Z,2020-10-28T07:47:21Z,2020-10-28T07:47:21Z,MERGED,True,10,16,6,https://github.com/rcornwell,Updates for SCP negative sim_interval.,3,[],https://github.com/simh/simh/pull/947,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/947,,,True,{}
simh/simh,https://github.com/simh/simh,948,2020-10-30T08:54:02Z,2020-10-30T21:20:33Z,2020-10-30T21:20:33Z,MERGED,True,4,7,4,https://github.com/psco,AltairZ80: Additional updates for SCP internal time base,1,[],https://github.com/simh/simh/pull/948,https://github.com/psco,1,https://github.com/simh/simh/pull/948,,,True,{}
simh/simh,https://github.com/simh/simh,949,2020-10-31T15:57:48Z,2020-10-31T19:33:39Z,2020-10-31T19:33:39Z,MERGED,True,11,19,16,https://github.com/rcornwell,Remove redundant include of time.h,4,[],https://github.com/simh/simh/pull/949,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/949,,,True,{}
simh/simh,https://github.com/simh/simh,952,2020-11-04T13:41:47Z,2020-11-04T17:27:31Z,2020-12-01T06:48:09Z,MERGED,True,6,3,2,https://github.com/larsbrinkhoff,IMLAC: Improve debug output.,1,[],https://github.com/simh/simh/pull/952,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/952,Minor updates for better debugging.,Minor updates for better debugging.,True,{}
simh/simh,https://github.com/simh/simh,954,2020-11-07T20:02:08Z,2020-11-07T20:18:06Z,2020-11-07T20:18:06Z,MERGED,True,10,19,2,https://github.com/hharte,sim_imd: clean up debug output.,1,[],https://github.com/simh/simh/pull/954,https://github.com/hharte,1,https://github.com/simh/simh/pull/954,,,True,{}
simh/simh,https://github.com/simh/simh,955,2020-11-10T00:36:38Z,2020-11-10T00:52:46Z,2020-11-10T00:52:46Z,MERGED,True,58,59,4,https://github.com/rcornwell,Updated card translation tables for 029.,3,[],https://github.com/simh/simh/pull/955,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/955,,,True,{}
simh/simh,https://github.com/simh/simh,956,2020-11-10T04:13:10Z,2020-11-22T18:48:02Z,2020-11-22T18:48:03Z,CLOSED,False,1,1,1,https://github.com/hharte,sim_imd: Add missing format specifier in debug print.,1,[],https://github.com/simh/simh/pull/956,https://github.com/hharte,1,https://github.com/simh/simh/pull/956,,,True,{}
simh/simh,https://github.com/simh/simh,956,2020-11-10T04:13:10Z,2020-11-22T18:48:02Z,2020-11-22T18:48:03Z,CLOSED,False,1,1,1,https://github.com/hharte,sim_imd: Add missing format specifier in debug print.,1,[],https://github.com/simh/simh/pull/956,https://github.com/markpizz,2,https://github.com/simh/simh/pull/956#issuecomment-731812192,,I solved this a while back by explicitly casting the ftell() result to an (int) which certainly should be fine for any floppy disk image which sim_imd is targeted at.,True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/935,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/935#issuecomment-707008657,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I imagine perhaps simulators could optionally call a new API like sim_display to select the currently active window.  If not called, fall back to the old behavior with a single window.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/markpizz,3,https://github.com/simh/simh/pull/935#issuecomment-716190427,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","This goes deeper than users of display.c.  display is layered over sim_video so multiple video window support needs to exist there and then be exposed to users of display.c.
As you say, we don't want to break any of the already significant uses of display.c and sim_video, so extending the APIs in an upward compatible way will be needed.  It would seem not too hard to extend these to allow for multiple windows for video output, but getting input events (keyboard and mouse) would be trickier.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/935#issuecomment-721556352,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","My intent is to use both display.c and the underlying sim_video APIs, one for each of the two displays.
I have started by putting most of the toplevel global variables in sim_video.c into a struct.  I added a vid_current variable which points to the currently active window.  All references to global variables to through this pointer instead.  This is all very experimental for now.  My new TT2500 simulator is running on top of this change, but still only uses one single window.
As you say, the input event side of things is more challenging.  The event thread will have to consider the windowID to find the right SIMH window.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/935#issuecomment-721559205,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","Other potential use cases for SIMH simulators would be various timesharing systems:

PDP-10 running WAITS: multiple III and DD displays.  @rcornwell has shown some interest in this.
PDP-10 running ITS: one 340 display and one color scope.
PDP-11 running SITS/Logo: multiple raster displays, and/or vector displays.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/935#issuecomment-727267095,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","This is now a crude proof-of-concept pull request.  It's just barely enough to make the TT2500 simulator display two windows.  I'm posting this for comments and to check whether this is roughly on the right track, or if it's headed in the wrong direction.
The main gist of it is that the global window state is captured in a VID_DISPLAY struct.  A new API vid_set_current sets the index into an array of those.  Essentially, a simulator with multiple windows has to call this API before it calls any other sim_video API to indicate which window it's currently adressing.  This may sound awkward, and I welcome other suggestions.
On the event side, care must be taken to check which window an even comes from.  This hasn't been fully fleshed out yet since the TT2500 only has one keyboard and no mouse.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/935#issuecomment-727824817,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I updated this to also handle events.
Tested with the TT2500 simulator and by playing GT40 Lunar Lander.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/markpizz,8,https://github.com/simh/simh/pull/935#issuecomment-731140198,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I'd like to get this to a good state for merging.  Of course there's no urgency, so if other things have higher priority I will wait.  My pull request seems to be fully working, but there's the matter of extending the sim_video API.  (I haven't touched the vector display library.  It still works as one of the sim_video displays, but just one.)

As it turns out, I was just looking at this pull request yesterday and was drafting my comments and other feedback.

My prototype has two added function calls:

vid_set_current (int n) - Select display index n.  Future sim_video
API calls will apply to display n.
vid_close_all () - Close all displays.



The global vid_active variable is changed from a t_bool to an int, indicating how many active displays there are.  The event structs have added a DEVICE * to indicate from which display the even was generated.
(Maybe change to UNIT *, see below.)

So far, so good, but let's keep away from entangling the video aspect and the simh UNIT structure.  Most specifically, due to the fact that there may be several independent DEVICEs and their related UNITs involved here (Video, Keyboard, and Mouse, Joystick in some cases, etc.).

I suggest there could at the very least be a new function to dynamically allocate a new display and return an index (or pointer) for use with vid_set_current.  The current vid_open expects a DEVICE * for the display.  If there are many displays, it's awkward to make one DEVICE for each.  Maybe there could be a way to use a UNIT instead?

t_stat vid_open_new (int *index, UNIT *unit, const char *title, uint32 width, uint32 height, int flags);
Specifically, what an API like this returns could be a DISPLAY* or a window number.  I don't think that matters too much.
Comments on your PR:
""More than one"" in your current test case is merely 2.  Certainly the jump from 1 to 2 is most significant, but while you're here, let's try and make this more general and either make it dynamic, or make it static, but larger (larger is less desirable than dynamic).
So, with more than one window, I would have preferred that ""legacy"" window DEVICEs in all existing simulators use whatever vid_XXX APIs they have always used, with each of those APIs merely be some sort of wrapper that then invokes the newer implementation passing the ""initial or default"" window context structure (vid_close_all() is fine).  Meanwhile, newer window DEVICEs that support multiple windows should use ""extended"" vid_XXX APIs which provide some type of reference to the window context that they are accessing.  This approach would seem to avoid the rather continuous need for all sorts of things calling vid_set_current() all the time (which vid_set_curren then be un-necessary), Otherwise, please explain the thinking behind this...
The vid_screenshot() API should, if more than one window is active, screenshot all active windows and use the filename+window# as the desired filename for the set of screenshot files, otherwise in the single window case, behave as it did before.
Please pickup commit: 01801e0 from the lars/dual branch at https://github.com/markpizz/simh and include it in your next revision or I can commit those minor changes to the master branch and you'll then pick up the pieces...  Let me know.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/935#issuecomment-731145846,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","Thanks for the feedback.  The current state is very much only a proof of concept, and I'm wide open to changes in both the implementation and the APIs.  Basically, whatever you think is best for SIMH.

let's keep away from entangling the video aspect and the simh UNIT structure.

Ok.

""More than one"" in your current test case is merely 2.

That's just the prototype.  I imagine new displays should malloc their data and link into a list or other suitable data structure.

each of those APIs merely be some sort of wrapper that then invokes the newer implementation passing the ""initial or default"" window context structure

Ok, I will then provide a new set of APIs that extends the old ones by taking a ""display"" (probably pointer) as input.  And vid_set_current will go away.

The vid_screenshot() API should...

Ok.

Please pickup commit: 01801e0

Ok, I will do that later today.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/935#issuecomment-732131499,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I believe I have addresses all your points above.

There are new APIs that parallel the old but adds a display pointer parameter.
The display structs are now allocated dynamically and linked into a list.
Taking a screenshot writes numbered fles.
Your commit is included.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/935#issuecomment-732132435,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","If I may, I'd like to add another sim_video extension to this pull request.  It's to allow use of the alpha channel.  It's a separate commit.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/markpizz,12,https://github.com/simh/simh/pull/935#issuecomment-732326497,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","If I may, I'd like to add another sim_video extension to this pull request. It's to allow use of the alpha channel. It's a separate commit.

You are out of my domain of expertise here.  Please explain how this would be relevant in the context of a simulated graphical device or otherwise be relevant to simh.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/935#issuecomment-732341502,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","Please explain how this would be relevant in the context of a simulated graphical device

My immediate use is for simulating a random-scan point-plotting CRT.  It's much like the PDP-1 Type 30 display supported by the display library, except it's a color TV tube.  So the points can be any color.  This particular device had a rather large dot size that could overlap with neighbouring dots.
I draw individual dots using a Gaussian distribution in a small square, like 7x7 pixels.  If two dots are drawn close, or even superimposed, the alpha channel will ensure additive color blending.  I first looked into using the display library, but it doesn't support this use case and only handles dual-phosphor tubes.
Other uses are possible, like antialiased vector lines.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/935#issuecomment-732343673,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","Here's a screencast of another simulation I made using an OpenGL shader:
https://www.youtube.com/watch?v=3WH4yAwaU6I
Compare against historical film footage off the CRT:",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/markpizz,15,https://github.com/simh/simh/pull/935#issuecomment-732517763,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I somehow thought I had passed along an explicit request to change the sim_video API names from XXX_display to XXX_window so as to not be so in bed with your primary use case in the display/ directory.
Please fix these.  Thanks.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/935#issuecomment-732685166,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","I somehow thought I had passed along an explicit request to change the sim_video API names from XXX_display to XXX_window

Ok, fixed.
On second thought, I dropped the ""alpha channel"" commit to work on that separately.",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/markpizz,17,https://github.com/simh/simh/pull/935#issuecomment-732901618,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","The alpha channel looked simple enough.  Feel free to add it.  It doesn't break anything.
In the process of testing before merge, I notice these minor warnings:
1>sim_video.c
1>..\sim_video.c(386) : warning C4101: 'i' : unreferenced local variable
1>..\sim_video.c(843) : warning C4098: 'vid_draw' : 'void' function returning a value
1>..\sim_video.c(959) : warning C4098: 'vid_refresh' : 'void' function returning a value",True,{}
simh/simh,https://github.com/simh/simh,935,2020-11-14T21:08:47Z,2020-11-24T12:42:41Z,2020-11-24T13:44:44Z,MERGED,True,493,281,3,https://github.com/larsbrinkhoff,VIDEO: Support for multiple displays,1,[],https://github.com/simh/simh/pull/935,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/935#issuecomment-732944132,"I'm working on a simulation of the General Turtle TT2500.  As can be seen below, it had two separate displays: one for text, and another for vector strokes.  I wonder if extending the SIMH video API to multiple displays would be under consideration?","Thanks, those three warnings are fixed now.
I have compiled with gcc, g++, and clang++ to catch as many warnings as possible.  But not many are enabled.  Is there a small subset of useful warnings that could be turned on?  Maybe just -Wunused-variable?
Regarding the alpha channel, I found there are a few more changes needed to get the right effect.  I'll let the dust settle here first, and then work on a new pull request.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/deltecent,1,https://github.com/simh/simh/pull/959,For @markpizz and @psco to consider.,For @markpizz and @psco to consider.,True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/psco,2,https://github.com/simh/simh/pull/959#issuecomment-729562916,For @markpizz and @psco to consider.,"This should be rejected as the ""reasonable"" instruction mix is in fact a busy wait loop on an uninitialised disk device.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/deltecent,3,https://github.com/simh/simh/pull/959#issuecomment-729727196,For @markpizz and @psco to consider.,"My understanding is the instruction mix isn't really supposed to do anything useful. It is to be 3-4 instructions that exercise various paths through the VM to give SIMH a general starting point for timing. If there is a problem banging on port 8, then we can probably use FF.

The simulator framework provides a means of pre-calibrating the instruction execution rate.  A sequence of three to four instructions that run in a tight loop can be used at simulator startup time to compute the execution rate.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/markpizz,4,https://github.com/simh/simh/pull/959#issuecomment-729753290,For @markpizz and @psco to consider.,"The goal of the pre-calibrate exercise is to come up with a reasonable approximation of a  somewhat ""normal"" instruction mix that actually runs at a similar rate to how real instructions do when the simulator is doing something useful.
I can't personally tell if the results, in this case, are true.  However, other simulators tend to get much faster instruction rates when the mix they test with doesn't include some percentage of non computational (i.e. instructions which reference some aspect of other pieces of the simulator which support I/O activities).
Much faster pre-calibration is not better.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/psco,5,https://github.com/simh/simh/pull/959#issuecomment-729765964,For @markpizz and @psco to consider.,"One problem is that if you do I/O (i.e. IN or OUT instructions, any port btw.) you are invoking parts of the simulator which are for all we know in basically an undefined state. The other problem is that having one out of four instructions an I/O instruction is hardly what is a ""reasonable approximation of a somewhat ""normal"" instruction mix"".",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/deltecent,6,https://github.com/simh/simh/pull/959#issuecomment-729769974,For @markpizz and @psco to consider.,"@psco it is probably best that you come up with an instruction mix, assuming you want to add pre-calibration to AltairZ80.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/markpizz,7,https://github.com/simh/simh/pull/959#issuecomment-729771548,For @markpizz and @psco to consider.,"The goal is to get  a number which is similar to the numbers observed when doing something useful.  Surely the device(s) may be in an indeterminate state, but that state will be the same each time the simulator is started so some consistent behaviors/timings can be measured.",True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/psco,8,https://github.com/simh/simh/pull/959#issuecomment-729791351,For @markpizz and @psco to consider.,Honestly I am not keen at all to add yet another piece of timer related complexity with unclear benefit and a high potential of more trouble down the road. Furthermore I see only few simulators implementing this which is not encouraging either.,True,{}
simh/simh,https://github.com/simh/simh,959,2020-11-17T21:51:38Z,2020-11-18T16:35:02Z,2020-11-18T18:10:22Z,CLOSED,False,16,0,1,https://github.com/deltecent,AltairZ80: set sim_clock_precalibrate_commands and sim_vm_initial_ips,1,[],https://github.com/simh/simh/pull/959,https://github.com/deltecent,9,https://github.com/simh/simh/pull/959#issuecomment-729798670,For @markpizz and @psco to consider.,"As I may be the only person that uses AltairZ80 in a way where timing is important, that course of action seems reasonable. I'll maintain the timing changes in my own fork. What I learned through this process is that the internal workings of the timer functions are mystical voodoo magic, but they seem to work when used appropriately.",True,{}
simh/simh,https://github.com/simh/simh,961,2020-11-18T03:08:14Z,2020-11-18T03:17:16Z,2020-11-18T03:17:16Z,MERGED,True,69,31,5,https://github.com/rcornwell,"New Card translation tables, and TOPS20 bug fix.",3,[],https://github.com/simh/simh/pull/961,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/961,,,True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/deltecent,1,https://github.com/simh/simh/pull/962,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/markpizz,2,https://github.com/simh/simh/pull/962#issuecomment-730665892,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","Without any additional changes to SCP, there are already specific message format related and other features which are available.
All RUN related commands (RUN, BOOT, GO, CONTINUE, STEP, NEXT, etc.) invoke fprint_stopped() as a result of this being the message format routine for the run_cmd dispatch.  This routine already has an optional simulator specific provided routine to, in a simulator specific way, to format simulator specific stop return codes via the sim_vm_fprint_stopped function pointer.  This indeed is only dispatched to for simulator specific sim_instr() exit/stop codes (i.e. not for normal SCPE_xx codes).
Meanwhile, you could:
sim> SET ON
sim> ON STEP EXAMINE CPU STATE

and have all the CPU REGisters displayed.  In their ""natural"" format (where ""natural"" is the precise way they are described in the each REGister's definition.  Such a REGister definition can already display both a complete register value as well as any internal bit fields that the register may contain (again with a proper REGister description that describes the interesting bit fields).
For example, the PDP11 simulator  might want to:
sim> SET ON
sim> ON STEP EXAMINE CPU PC,PSW,R0,R1,R2,R3,R4,R5
sim> STEP
Step expired, PC: 000100 (INC 120)
PC:     000100
PSW:    000000  CM=K PM=K RS0 FPD0 IPL=0 TBIT0 N0 Z0 V0 C0
R0:     000000
R1:     000000
R2:     000000
R3:     000000
R4:     000000
R5:     000000
sim>

This leaves the user (vs the simulator writer) the flexibility of precisely specifying what they're interested on this particular SCPE_xx stop code, but also potentially different setup for other stop codes they may desire.  All without changing simulator code.",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/rcornwell,3,https://github.com/simh/simh/pull/962#issuecomment-731225435,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","This could be somewhat useful. I added the stop function to my IBM360 simulator to display the PSW. What is interesting is that when you add the sim_vm_fprint_stopped it is only called for user stop codes. I think it should be called for any stop code.
Also a fprint_register function could be useful.",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/markpizz,4,https://github.com/simh/simh/pull/962#issuecomment-731279095,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","This could be somewhat useful. I added the stop function to my IBM360 simulator to display the PSW. What is interesting is that when you add the sim_vm_fprint_stopped it is only called for user stop codes. I think it should be called for any stop code.

As I mentioned, there already is a sim_vm_fprint_stopped function pointer which can optionally be supplied by a simulator to format simulator specific stop code information which are presumably unique to each simulator.

Also a fprint_register function could be useful.

After you add BITFIELD REGister declarations where appropriate (as is demonstrated in the previous PDP11 PSW example), to some of your simulators, please come back and describe the problem you need to solve.",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/rcornwell,5,https://github.com/simh/simh/pull/962#issuecomment-731593764,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","BITFIELD seems very useful, however it will not work for the IBM360 since there are 2 formats for the PSW based on the mode the CPU is in.",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/markpizz,6,https://github.com/simh/simh/pull/962#issuecomment-731687484,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","BITFIELD seems very useful, however it will not work for the IBM360 since there are 2 formats for the PSW based on the mode the CPU is in.

Nothing says that you can't have multiple REGister definitions, pointing at exactly the same spot in memory each with different BITFIELDS defined.  It seems that your IBM360 doesn't define PSW as a simh REGister anyway...  Should it?",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/rcornwell,7,https://github.com/simh/simh/pull/962#issuecomment-733046814,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","The format of the PSW is controlled by the type of the processor and the mode it is in. BC or EC/67 EC/370. The user just want do do Examine/Deposit PSW, not have to know which version to use. This is why a call the examine/deposit a register would be useful. A flag in the REG entry could signal the need to call either of these functions. It would then pass the REG * and value or return a value. This would no break any existing simulators, and simplify some of them. For simulators where there was a bunch of register bits stored in different variables BITFIELD would work.
Also if sim_vm_fprint_stopped is defined this should be called regardless of the error code. If the user does not wish to handle it, the code can do the current default of printing the PC register.",True,{}
simh/simh,https://github.com/simh/simh,962,2020-11-19T20:08:01Z,2020-11-27T20:47:47Z,2020-11-29T05:14:21Z,CLOSED,False,6,0,2,https://github.com/deltecent,SCP: Adds VM-specific stopped message handler,1,[],https://github.com/simh/simh/pull/962,https://github.com/deltecent,8,https://github.com/simh/simh/pull/962#issuecomment-733050086,"Adds the ability for a VM to define its own stopped message for all
codes, including SCPE errors. For example, on the AltairZ80 simulator,
a custom stop message handler could also display CPU flags and registers:
Simulation stopped C0Z0M0E0I0 A=61 B=1108 D=B818 H=D398 S=BC33 P=CC71 IN 0Ah
sim> s
Step expired C0Z0M0E0I0 A=11 B=1108 D=B818 H=D398 S=BC33 P=CC73 MOV M,A
sim_vm_fprint_stopped_gen = &my_vm_stopped_gen;
t_bool my_vm_stopped_gen (FILE *st, t_stat v, REG *pc, DEVICE dptr) {
/ display stopped message */
fprintf(st, ""My VM stopped!"");
return TRUE;  /* display SCP stopped message */

return FALSE; /* do not display SCP stopped message */

}","This [PR] would not break any existing simulators, and simplify some of them.

I agree.",True,{}
simh/simh,https://github.com/simh/simh,963,2020-11-20T02:22:27Z,2020-11-20T02:31:30Z,2020-11-20T02:31:30Z,MERGED,True,346,342,6,https://github.com/rcornwell,KA10: Cleanup minor issues.,3,[],https://github.com/simh/simh/pull/963,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/963,,,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/965,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,2,https://github.com/simh/simh/pull/965#issuecomment-732990753,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","There are issues with this code.
First, the choice of a variable name CHAR (as an array) which in some places collides with other names that may be defined system wide.
Beyond that, we've got:
1>..\tt2500\tt2500_cpu.c(218) : warning C4033: 'mem_read' must return a value
1>..\tt2500\tt2500_cpu.c(226) : error C2143: syntax error : missing ';' before 'type'
1>..\tt2500\tt2500_cpu.c(227) : error C2181: illegal else without matching if
1>..\tt2500\tt2500_cpu.c(383) : warning C4098: 'cpu_bus' : 'void' function returning a value
1>..\tt2500\tt2500_cpu.c(388) : warning C4098: 'cpu_bus' : 'void' function returning a value
1>..\tt2500\tt2500_cpu.c(389) : warning C4098: 'cpu_bus' : 'void' function returning a value
1>..\tt2500\tt2500_cpu.c(390) : warning C4098: 'cpu_bus' : 'void' function returning a value
There may be other problems concealed by the earlier errors with the CHAR array",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/965#issuecomment-733026996,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Thanks, I didn't know about CHAR being reserved.  The problems should be fixed now.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,4,https://github.com/simh/simh/pull/965#issuecomment-733118264,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","1>tt2500_dpy.c
1>..\tt2500\tt2500_dpy.c(213) : warning C4244: '=' : conversion from 'uint16' to 'uint8', possible loss of data
1>tt2500_cpu.c
1>..\tt2500\tt2500_cpu.c(226) : warning C4244: '=' : conversion from 'uint16' to 'uint8', possible loss of data",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,5,https://github.com/simh/simh/pull/965#issuecomment-733172291,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Looking through the tt2500 and imlac simulators you've got conditional compiles looking at HAVE_LIBSDL which then disables some sim_video code references.
The presumption is:  In general simulator specific code generally shouldn't have any platform specific references (specifically HAVE_LIBSDL in this case).  At most, such references ""should"" only be used to potentially provide the default enabled or disabled state for some DEVICEs.
The simulator code's references to the video functionality (in this case), when video isn't available, should end up being references to the stub routines for the various APIs which are available in the ""not available"" path in sim_video.  There should be stubs for the new XXX_window APIs that sim_video provides, but that's not the real problem here.  Somehow the pdp11 simulator doesn't have any references to HAVE_LIBSDL, and yet it builds both with and without libsdl being available.  All the VAX simulators that have different video devices, only have references to USE_SIM_VIDEO && HAVE_LIBSDL to control enabling the respective video DEVICE's and not to influence calling various APIs.  The pdp11 uses both sim_video and display/display.c.
I'm trying to figure out how the pdp11 and vax simulators work out but the the tt2500 and imlac don't...
Please look into adding stubs to the newer sim_video API's.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/965#issuecomment-733549352,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",I added the stubs in #967.,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/965#issuecomment-733555376,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","I updated the TT2500 simulator to use the sim_video stubs rather than #ifdefs.  The #ifdefs for the display library are still in place until I know what to do with them.
I see the PDP11 simulator has #ifdef USE_DISPLAY everywhere the display library is referenced.  Is that the right thing to do?",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,8,https://github.com/simh/simh/pull/965#issuecomment-733689045,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","I'm trying to figure out how the pdp11 and vax simulators work out but the the tt2500 and imlac don't...


I was confused by my own doing starting from the Visual Studio projects (which always have libsdl provided by the windows-build dependent parallel repo) and thus was looking in vt11.c which always was calling display functions.  In the non libsdl case (as spelled out in the makefile) vt11.c doesn't get included in the pdp11 build.

I see the PDP11 simulator has #ifdef USE_DISPLAY everywhere the display library is referenced. Is that the right thing to do?

Given the structure of the makefile it certainly seems so.  Go with that.  Thanks.

Your travis,yml is building the tt2500 twice.

I picked up your lars/unused commit.

I need more sleep.  I'll look at your lars/tt2500 stuff later.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/965#issuecomment-733750300,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Updated #ifdefs to reference USE_DISPLAY.
Fixed duplication in .travis.yml.
By all means, take your time.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,10,https://github.com/simh/simh/pull/965#issuecomment-735882796,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","The first non comment line of  tt2500_test.ini should be:
cd %~p0

This changes the directory to the location of tt2500_test.ini
Then the load command should merely be
load test.ascii

I would expect that the RESET followed by GO 100 should be replicable by RUN 100, but as you have mentioned this somehow isn't working.  I'm looking at that problem.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,11,https://github.com/simh/simh/pull/965#issuecomment-735897011,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",The reason for changing the directory is due to the fact that the default directory during the Visual Studio build is not the top directory in the repo.,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/965#issuecomment-735907060,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Thanks, updated.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,13,https://github.com/simh/simh/pull/965#issuecomment-736058953,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","The RESET + GO nnn being equivalent to RUN nnn is now fixed.
The problem, in your case, was the fact that your CPU DEVICE reset routine was reasonably setting the PC to 0, while the original scp run_cmd implementation set the PC value to nnn before calling the reset routine.  It now sets the PC value after invoking the reset routine.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/965#issuecomment-736250144,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",Thanks!  Updated.,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,15,https://github.com/simh/simh/pull/965#issuecomment-736798441,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","Your hand edited Visual Studio solution was broken.  Use this one.
simh-sln.zip",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,16,https://github.com/simh/simh/pull/965#issuecomment-736914590,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",Fix the commit time and I'll merge it!,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,17,https://github.com/simh/simh/pull/965#issuecomment-737010595,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.",Commit time updated!,True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/965#issuecomment-737044193,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","I made another update, but I need to test it more before merging.",True,{}
simh/simh,https://github.com/simh/simh,965,2020-11-24T13:23:02Z,2020-12-02T13:35:36Z,2020-12-03T06:46:14Z,MERGED,True,3324,2,19,https://github.com/larsbrinkhoff,"New simulator: Turtle Terminal 2500, from General Turtle Inc.",1,[],https://github.com/simh/simh/pull/965,https://github.com/markpizz,19,https://github.com/simh/simh/pull/965#issuecomment-737437614,"Custom TTL design by Marvin Minsky.  There are two displays: one raster scan for bitmapped characters, and another random scan for vector graphics.  There is also a keyboard, and a UART for talking to a host computer.
The processor is intended for microcoding rather than a general-purpose computer.  There is no interrupt facility, so the software must check frequently for hardware wanting attention.  Some pipeline hazards are exposed.  The microcode was written by Danny Hillis, and implements a Datapoint terminal emulator and Logo turtle graphics.","I didn't see your most recent comment before I merged.  Oh, well, fix as needed later... 😁",True,{}
simh/simh,https://github.com/simh/simh,966,2020-11-24T13:34:45Z,2020-11-24T13:43:28Z,2020-11-24T13:44:27Z,MERGED,True,8,5,3,https://github.com/larsbrinkhoff,IMLAC: Fix compiler warnings.,1,[],https://github.com/simh/simh/pull/966,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/966,Fixes warnings generated by g++ -Wall and clang++ -Wall,Fixes warnings generated by g++ -Wall and clang++ -Wall,True,{}
simh/simh,https://github.com/simh/simh,967,2020-11-25T08:26:21Z,2020-11-25T12:05:19Z,2020-11-26T12:46:16Z,MERGED,True,60,8,5,https://github.com/larsbrinkhoff,"VIDEO, IMLAC: Add new sim_video stubs.  Use them in Imlac simulator.",2,[],https://github.com/simh/simh/pull/967,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/967,"As per #965 (comment).
This cleans up some uses of #ifdef HAVE_LIBSDL in the Imlac simulator.  The sim_video component offers stubs when SDL isn't available, but the display library doesn't and isn''t even linked in by the makefile.","As per #965 (comment).
This cleans up some uses of #ifdef HAVE_LIBSDL in the Imlac simulator.  The sim_video component offers stubs when SDL isn't available, but the display library doesn't and isn''t even linked in by the makefile.",True,{}
simh/simh,https://github.com/simh/simh,967,2020-11-25T08:26:21Z,2020-11-25T12:05:19Z,2020-11-26T12:46:16Z,MERGED,True,60,8,5,https://github.com/larsbrinkhoff,"VIDEO, IMLAC: Add new sim_video stubs.  Use them in Imlac simulator.",2,[],https://github.com/simh/simh/pull/967,https://github.com/markpizz,2,https://github.com/simh/simh/pull/967#issuecomment-734271820,"As per #965 (comment).
This cleans up some uses of #ifdef HAVE_LIBSDL in the Imlac simulator.  The sim_video component offers stubs when SDL isn't available, but the display library doesn't and isn''t even linked in by the makefile.","In case you hadn't noticed, due to all the other Travis and AppVeyor messages, this commit broke the imlac Windows build.
The specific change that actually caused this is the fact that the CRT DEVICE is now ENABLED when libsdl is available.
As it turns out, the failure is NOT related to any of the recent sim_video changes.  Setting the CRT DEVICE ENABLED prior to the recent changes in sim_video() causes the same problem.
The problem is indicative of an infinite loop producing this message:
vid_thread(): Unexpected user event code: 8

The problem is platform specific due to the fact that on some platforms the events are processed on either the main process thread or on a separate thread depending platform requirements.
In any case, the CRT DEVICE is now presenting a window very early in SCP's startup sequence BEFORE all of SCP has been properly initialized.  The build invokes the simulator with ""RegisterSanityCheck"" that is designed to walk all the REGister definitions in the simulator to assure that they have reasonable definitions which can't be done by a compiler.  This check then immediately exits the simulator indicating success or failure of that sanity check for the build.  The problem here is due to the immediate exit of SCP's main routine without going through all the cleanup steps that always occur when the simulator has been fully initialized.  I've changed scp to unwind everything on the way out in this case and the build problem is now solved.
Meanwhile, maybe it isn't a good idea for windows to pop up windows this early in the simulator's execution.  It pops up due to the ""reset_all_p()"" call that exists to ""power up"" all the simulator's DEVICES.  DEVICEs can distinguish this call to their reset routine by the presence of the SWMASK('P') in sim_switches.  DEVICE reset routines will be called again later as a consequence of one of: RESET, RUN or BOOT commands.",True,{}
simh/simh,https://github.com/simh/simh,967,2020-11-25T08:26:21Z,2020-11-25T12:05:19Z,2020-11-26T12:46:16Z,MERGED,True,60,8,5,https://github.com/larsbrinkhoff,"VIDEO, IMLAC: Add new sim_video stubs.  Use them in Imlac simulator.",2,[],https://github.com/simh/simh/pull/967,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/967#issuecomment-734278708,"As per #965 (comment).
This cleans up some uses of #ifdef HAVE_LIBSDL in the Imlac simulator.  The sim_video component offers stubs when SDL isn't available, but the display library doesn't and isn''t even linked in by the makefile.","Sorry, I didn't notice.  I will hurry to fix it.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/968,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/rcornwell,2,https://github.com/simh/simh/pull/968#issuecomment-733745328,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",Do not remove ascii_to_hol_ebcdic this may be used by in future if I decide to add EBCDIC translation to sim_card.,True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/968#issuecomment-733748219,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","I reckoned it might be useful in the future, so I just #if 0'ed it.
My thinking is that this commit makes it possible to add -Wunused-variable to the makefile to catch more mistakes in the future.  But it's up to @markpizz whether he wants to do that.  If so, I could fix some other warnings too.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/psco,4,https://github.com/simh/simh/pull/968#issuecomment-733760193,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","I fail to see why type casts such as
char *fmt;
...
fmt = ""7E2""; // old
fmt = (char *)""7E2""; // new

are useful. I do not want this in the AltairZ80 files.
@markpizz Please reject the changes for the AltairZ80.
@larsbrinkhoff Please reach out to me first before proposing any changes. I maintain the AltairZ80 and I'm happy to perform any changes which have a real benefit.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/968#issuecomment-733766663,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","@psco, no problem I will update the commit.
The reason is that C++ is picky about some things.  A void * will not cast automatically to other pointers like in C.  A string constant isn't a plain char *.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/markpizz,6,https://github.com/simh/simh/pull/968#issuecomment-733767749,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",Don't bother updating it.  I will take these changes in pieces as appropriate for the different code,True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/markpizz,7,https://github.com/simh/simh/pull/968#issuecomment-733768500,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","Additionally, we really don't have to get rid of every theoretical warning produced by -Wall.  That is why many/most of these have been left in place already.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/968#issuecomment-733830525,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","we really don't have to get rid of every theoretical warning produced by -Wall.

Undrstood.  I only picked -Wunused-variable because apparently the Windows compilers warn about them, but gcc and clang doesn't.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/markpizz,9,https://github.com/simh/simh/pull/968#issuecomment-733838514,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","Actually, the windows compiler only flags variables that are declared but never used for anything.
Merely setting a value as part of the declaration ""counts"" as being ""used""  by that compiler even if it is subsequently never used again.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/psco,10,https://github.com/simh/simh/pull/968#issuecomment-733845656,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",Actually I am a big fan getting rid of unused variables (and functions for that matter) as they are confusing and often point to a deeper issue. But I'm pretty sure you did not find any in AltairZ80 (otherwise I'm very interested to know).,True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/markpizz,11,https://github.com/simh/simh/pull/968#issuecomment-733853783,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.","@markpizz Please reject the changes for the AltairZ80.

As I said, I was going to bring the AltairZ80 stuff directly with you.  Lars was a little over aggressive, but well meaning.
Historically, I occasionally compile the simulators with as many compilers as possible (across platforms) to get as much natural feedback.  This includes compiling as C++.  I haven't done that in quite a while, nor have we had a Coverity scan which might have flagged some of the same issues.
In any case, various things in the code that Patrick has contributed recently could use a C++ cleanup.
This mostly means changing various ""char *"" to ""const char *"" reasonably casting void * into the type we're expecting.
Look at the output of ""make altairz80 GCC=clang++"" and see if find anything that should be cleaned up...
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/psco,12,https://github.com/simh/simh/pull/968#issuecomment-733868850,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",Perfect - I'll submit a PR for the cleaning up.,True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/larsbrinkhoff,13,https://github.com/simh/simh/pull/968#issuecomment-737054138,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",I rebased this.  But feel free to close it or cherry-pick bits and pieces as appropriate.,True,{}
simh/simh,https://github.com/simh/simh,968,2020-11-25T14:10:33Z,2020-12-02T22:48:25Z,2020-12-02T22:48:25Z,CLOSED,False,13,61,12,https://github.com/larsbrinkhoff,"I650, IBM1130, PDP11, PDP18b, VAX, Sigma, CARD: Fix set but unused variables.",1,[],https://github.com/simh/simh/pull/968,https://github.com/markpizz,14,https://github.com/simh/simh/pull/968#issuecomment-737542672,"And some other warnings.
All simulators were compiled with gcc, g++, and clang++ with -Wunused-variable enabled.  All warnings except the dummy_declaration in VAX files were fixed.",Cherry picked the relevant changes.,True,{}
simh/simh,https://github.com/simh/simh,969,2020-11-25T19:46:09Z,2020-11-25T20:37:41Z,2020-11-25T20:38:35Z,CLOSED,False,366,393,4,https://github.com/deltecent,"AltairZ80: Fix clang++ warning messages for HAYES, M2SIO and PMMI devices",1,[],https://github.com/simh/simh/pull/969,https://github.com/deltecent,1,https://github.com/simh/simh/pull/969,,,True,{}
simh/simh,https://github.com/simh/simh,969,2020-11-25T19:46:09Z,2020-11-25T20:37:41Z,2020-11-25T20:38:35Z,CLOSED,False,366,393,4,https://github.com/deltecent,"AltairZ80: Fix clang++ warning messages for HAYES, M2SIO and PMMI devices",1,[],https://github.com/simh/simh/pull/969,https://github.com/psco,2,https://github.com/simh/simh/pull/969#issuecomment-733920232,,Looks ok and should proceed. Thanks Patrick!,True,{}
simh/simh,https://github.com/simh/simh,969,2020-11-25T19:46:09Z,2020-11-25T20:37:41Z,2020-11-25T20:38:35Z,CLOSED,False,366,393,4,https://github.com/deltecent,"AltairZ80: Fix clang++ warning messages for HAYES, M2SIO and PMMI devices",1,[],https://github.com/simh/simh/pull/969,https://github.com/markpizz,3,https://github.com/simh/simh/pull/969#issuecomment-733924597,,"Stray tab character found in s100_hayes.c.  Please fix and resubmit a PR.
Meanwhile, I'm committing something else, so don't forget to do a pull immediately before your commit and generating the new PR.",True,{}
simh/simh,https://github.com/simh/simh,969,2020-11-25T19:46:09Z,2020-11-25T20:37:41Z,2020-11-25T20:38:35Z,CLOSED,False,366,393,4,https://github.com/deltecent,"AltairZ80: Fix clang++ warning messages for HAYES, M2SIO and PMMI devices",1,[],https://github.com/simh/simh/pull/969,https://github.com/deltecent,4,https://github.com/simh/simh/pull/969#issuecomment-733934977,,One of these days I'll figure out Git.,True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,1,https://github.com/simh/simh/pull/970,,,True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,2,https://github.com/simh/simh/pull/970#issuecomment-734012444,,"Some of the additional compile warnings could be removed if:
Line 592 of s100_2sio.c
was:
    const char *fmt;
instead of:
    char *fmt;",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,3,https://github.com/simh/simh/pull/970#issuecomment-734013121,,"I don't get any additional compiler warnings. If there's some compiler switch I need to enable, that would helpful.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,4,https://github.com/simh/simh/pull/970#issuecomment-734089061,,"make GCC=clang++ altairz80

on Linux
on macOS I don't seem to get that error, but there certainly is no harm with the declaration of fmt to be 'const char *' I suggested.  All of your assignments of fmt assign it to a constant character string, right?",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,5,https://github.com/simh/simh/pull/970#issuecomment-734309268,,"Some of the additional compile warnings could be removed...

That comment indicates there are multiple warnings. Is fmt at line 592 the only one?",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,6,https://github.com/simh/simh/pull/970#issuecomment-734411324,,"That comment indicates there are multiple warnings. Is fmt at line 592 the only one?

Every assignment of fmt to a constant string produced a warning.  with const char * they all go away.
It looks OK now.
Meanwhile, Your changes weren't on the latest commit in the master branch when I checked this AM, so please pull before committing this stuff.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,7,https://github.com/simh/simh/pull/970#issuecomment-734451760,,"There are other commits on the master branch that aren't included in your void branch.
I'll either cherry pick the changes and commit them with you as author, or preferably, you drop this PR and do a pull from the master branch before committing again.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,8,https://github.com/simh/simh/pull/970#issuecomment-734457551,,"I'll either cherry pick the changes and commit them...

I like that plan.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/970#issuecomment-734459856,,"You can update an existing pull request by pushing to its branch, and completely rewrite it by force pushing.
I tried to jot down some hints for rewriting git branches:
https://github.com/larsbrinkhoff/fearless-git",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,10,https://github.com/simh/simh/pull/970#issuecomment-734467225,,"Lars seems to do that all the time.
I just get the Pull Requests and don't generate them, so I'm not familiar with the more subtle means of working with them.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,11,https://github.com/simh/simh/pull/970#issuecomment-734497303,,"This branch has no conflicts with the base branch

I've never understood the need to have the very latest master changes in a pull request when there aren't any conflicts. Github doesn't know the difference as it is only looking at the deltas between the master branch and pull request. No other open source projects I participate with have this requirement.

I just get the Pull Requests and don't generate them, so I'm not familiar with the more subtle means of working with them.

That probably explains why it's a requirement here and nowhere else.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,12,https://github.com/simh/simh/pull/970#issuecomment-734519546,,"That probably explains why it's a requirement here and nowhere else.

Nope.
The ""requirement"" is based on the fact that this repo has a relatively low commit rate, which can easily allow folks to follow the desired pull before commit pattern.  Otherwise, following your suggestion, I can either do more work and have to Cherry pick your commits and then have to remember to attribute the work to you (much more work for me), or I could merely ""merge"" your contribution(s) which would then clutter the commit history with merge commits, almost 1 for 1 for each of the external contributions.  A graphical representation of the commit history and the related branches then looks quite like spaghetti cluttered with all of these merge commits rather than a simple straight line history of the actual changes.
You just merged from the github.com/simh/simh master branch and produced a merge commit which, like I've said repeatedly I'm not interested in collecting.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/deltecent,13,https://github.com/simh/simh/pull/970#issuecomment-734524857,,"I can either do more work and have to Cherry pick your commits

When I open a PR there's only 1 commit until you continually ask me to make more of them by incorporating other commits (which have nothing to with my commit) into my working branch. The PRs I submit shouldn't require any cherry picking at all. I, like you, am not a Git expert, so from my perspective, you are turning something simple that Git handles very well, into something unnecessarily complicated. So, yes, if you want these changes, cherry pick away through the massive amount of commits, provide command line examples of how to do this the Mark way, or delete the PR and someone else can submit the changes.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/markpizz,14,https://github.com/simh/simh/pull/970#issuecomment-734621379,,"Like I said previously, I don't do PRs, but if I were to guess (@larsbrinkhoff  please confirm or correct), the steps you'd need to do in this case are:

working the branch you've setup for this PR:
git reset --soft HEAD^
git pull https://github. com/song/simh master
commit your local changes which should be still sitting there
git push -f https://github. com/deltecent/simh

I'm pretty sure this is what @larsbrinkhoff does on a regular basis while a PR is pending and his stuff changes or something else in the master branch does.
The above mention of HEAD^ will probably need to be HEAD^^ to also remove the merge commit you recently created.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/larsbrinkhoff,15,https://github.com/simh/simh/pull/970#issuecomment-735220800,,"For the most common, uncomplicated case, I will do this whenever the master branch moves forward and I have a pending pull request:

git checkout branch
git fetch upstream
git rebase upstream/master
git push -f

branch means the feature branch, i.e. the branch used to submit the pull request.  upstream is a ""remote"" I created for the official simh repository.  I do it like this:
git remote add upstream https://github.com/simh/simh
As for why I do it, it's the same reason Mark provided above.  I prefer a linear commit history without merge commits.  I didn't know this was a requirement for simh pull requests, it's just what I normally do.  Mark has an additional requirement that commit dates should also be monotonic.",True,{}
simh/simh,https://github.com/simh/simh,970,2020-11-25T20:43:51Z,2020-11-27T17:53:16Z,2020-11-28T17:52:50Z,CLOSED,False,292,367,3,https://github.com/deltecent,"AltairZ80: Fixed clang++ warnings in HAYES, M2SIO, and PMMI devices",2,[],https://github.com/simh/simh/pull/970,https://github.com/Rhialto,16,https://github.com/simh/simh/pull/970#issuecomment-735269204,,"There is this one thing I find annoying about the github workflow and pull requests(not specifically with simh, but I'll use it as an example). In order to make a pull request, you need to fork the original simh repository to your own simh version on github. Then you need to clone that to your local computer. There you create a branch, do your fixes, etc. You push that back to your simh on github, and you can create a pull request, which the upstream simh maintainer can accept.
So far so good.
But now you have a fork of simh on github, but it's out of date (because your nice pull request has been accepted). If you want to keep working and make some next improvement, there is nothing on github that helps you to keep your forked simh up to date.
You really have to go the circuitous route of adding the original simh as another remote to your local computer's simh. Then you must pull from from it, and push it back to your own github simh.
Github has nothing to make this easier. Gitlab at least has an automatic pulling mechanism to stay in sync. See for instance https://gitlab.com/Rhialto/k-9: ""Mirrored from https://github.com/k9mail/k-9.git.  Pull mirroring updated 5 minutes ago. """,True,{}
simh/simh,https://github.com/simh/simh,971,2020-11-26T13:23:40Z,2020-11-26T17:10:27Z,2020-11-26T19:54:18Z,MERGED,True,8,8,2,https://github.com/larsbrinkhoff,IMLAC: Fixes for the display.,1,[],https://github.com/simh/simh/pull/971,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/971,"Don't open a display window during power-on reset.
Change #ifdefs to USE_DISPLAY.","Don't open a display window during power-on reset.
Change #ifdefs to USE_DISPLAY.",True,{}
simh/simh,https://github.com/simh/simh,972,2020-11-28T09:09:34Z,2020-11-28T12:57:05Z,2020-11-28T12:57:05Z,CLOSED,False,0,0,0,https://github.com/psco,"AltairZ80: New iCOM device, PTP port command, code cleanup",0,[],https://github.com/simh/simh/pull/972,https://github.com/psco,1,https://github.com/simh/simh/pull/972,,,True,{}
simh/simh,https://github.com/simh/simh,972,2020-11-28T09:09:34Z,2020-11-28T12:57:05Z,2020-11-28T12:57:05Z,CLOSED,False,0,0,0,https://github.com/psco,"AltairZ80: New iCOM device, PTP port command, code cleanup",0,[],https://github.com/simh/simh/pull/972,https://github.com/markpizz,2,https://github.com/simh/simh/pull/972#issuecomment-735225593,,"One issue noted in Windows build:
2>s100_icom.c
2>..\AltairZ80\s100_icom.c(1172) : warning C4244: 'function' : conversion from 'uint16' to 'uint8', possible loss of data
also s100_icom.c also has some tabs.",True,{}
simh/simh,https://github.com/simh/simh,973,2020-11-28T13:03:12Z,2020-11-28T13:10:48Z,2020-11-28T13:10:48Z,MERGED,True,2007,469,13,https://github.com/psco,"AltairZ80: New iCOM device, PTP port command, code cleanup",1,[],https://github.com/simh/simh/pull/973,https://github.com/psco,1,https://github.com/simh/simh/pull/973,,,True,{}
simh/simh,https://github.com/simh/simh,974,2020-11-29T08:40:05Z,2020-11-29T11:31:06Z,2020-11-29T11:31:06Z,MERGED,True,0,0,1,https://github.com/psco,AltairZ80: Updated documentation for iCOM device,1,[],https://github.com/simh/simh/pull/974,https://github.com/psco,1,https://github.com/simh/simh/pull/974,,,True,{}
simh/simh,https://github.com/simh/simh,975,2020-11-29T12:55:48Z,2020-11-29T16:56:02Z,2020-12-03T14:37:34Z,MERGED,True,173,0,2,https://github.com/larsbrinkhoff,IMLAC: Sample program: SSV 22.,1,[],https://github.com/simh/simh/pull/975,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/975,"SSV (""Scroll Saver"") was the Imlac console program and ""terminal emulator"" at MIT's Dynamic Modeling group.  It was written mainly by @dlebling618.  This copy is from Purdue University, courtesy of @tuban: http://www.ubanproductions.com/imlac_sw.html
SSV is required to run Maze; the game expects to find SSV's font data in core.  The game loading process includes jumping to location 40, which is why the sample configuration enables the ""Special TTY"" ROM bootstrap.","SSV (""Scroll Saver"") was the Imlac console program and ""terminal emulator"" at MIT's Dynamic Modeling group.  It was written mainly by @dlebling618.  This copy is from Purdue University, courtesy of @tuban: http://www.ubanproductions.com/imlac_sw.html
SSV is required to run Maze; the game expects to find SSV's font data in core.  The game loading process includes jumping to location 40, which is why the sample configuration enables the ""Special TTY"" ROM bootstrap.",True,{}
simh/simh,https://github.com/simh/simh,975,2020-11-29T12:55:48Z,2020-11-29T16:56:02Z,2020-12-03T14:37:34Z,MERGED,True,173,0,2,https://github.com/larsbrinkhoff,IMLAC: Sample program: SSV 22.,1,[],https://github.com/simh/simh/pull/975,https://github.com/markpizz,2,https://github.com/simh/simh/pull/975#issuecomment-735400714,"SSV (""Scroll Saver"") was the Imlac console program and ""terminal emulator"" at MIT's Dynamic Modeling group.  It was written mainly by @dlebling618.  This copy is from Purdue University, courtesy of @tuban: http://www.ubanproductions.com/imlac_sw.html
SSV is required to run Maze; the game expects to find SSV's font data in core.  The game loading process includes jumping to location 40, which is why the sample configuration enables the ""Special TTY"" ROM bootstrap.","I notice in your ssv.simh file you have:
# Reset and run.
reset
go

FYI: There is a simpler way to say this:
run

As I mentioned with you adjusted the reset logic in the imlac simulator:

DEVICE reset routines will be called again later as a consequence of one of: RESET, RUN or BOOT commands.

Why is this stuff, by itself, being added to the simh repo?  If it is part of something bigger, shouldn't that also be here?",True,{}
simh/simh,https://github.com/simh/simh,975,2020-11-29T12:55:48Z,2020-11-29T16:56:02Z,2020-12-03T14:37:34Z,MERGED,True,173,0,2,https://github.com/larsbrinkhoff,IMLAC: Sample program: SSV 22.,1,[],https://github.com/simh/simh/pull/975,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/975#issuecomment-735402480,"SSV (""Scroll Saver"") was the Imlac console program and ""terminal emulator"" at MIT's Dynamic Modeling group.  It was written mainly by @dlebling618.  This copy is from Purdue University, courtesy of @tuban: http://www.ubanproductions.com/imlac_sw.html
SSV is required to run Maze; the game expects to find SSV's font data in core.  The game loading process includes jumping to location 40, which is why the sample configuration enables the ""Special TTY"" ROM bootstrap.","I first tried run, but it didn't work the same as reset plus go.  I haven't investigated why.
Since there was no imlac/tests directory at all, I submitted this as a useful test and also a way to use the simulator as a terminal.  The bigger picture includes ITS running on a PDP-10 simulator, but that's not appropriate to check into the SIMH repository.",True,{}
simh/simh,https://github.com/simh/simh,976,2020-12-02T19:11:11Z,2020-12-02T22:47:35Z,2020-12-03T09:20:34Z,MERGED,True,16,21,2,https://github.com/larsbrinkhoff,TT2500: Fix unit flags.,1,[],https://github.com/simh/simh/pull/976,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/976,The previous commit had some untested last-minute changes.,The previous commit had some untested last-minute changes.,True,{}
simh/simh,https://github.com/simh/simh,977,2020-12-03T10:49:12Z,2020-12-03T13:07:16Z,2020-12-04T07:34:09Z,MERGED,True,1,0,1,https://github.com/larsbrinkhoff,TRAVIS: Update Mac build to use Xcode 12.,1,[],https://github.com/simh/simh/pull/977,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/977,"Older Xcode versions no longer work with Homebrew.  The Travis CI build has been failing for a while, and this fixes that.","Older Xcode versions no longer work with Homebrew.  The Travis CI build has been failing for a while, and this fixes that.",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/978,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/978#issuecomment-743090352,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"Here's what it should look like after the branch has been merged:
https://github.com/larsbrinkhoff/simh/actions",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/markpizz,3,https://github.com/simh/simh/pull/978#issuecomment-743169375,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"For the uninformed (me), please explain the net result of this.  What is the logical change?  Will Travis go away?  Will the osx builds be less likely to fail for ""environmental"" reasons rather than actual issues in the simh codebase?",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/978#issuecomment-743208428,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"I have only been testing this for a few hours, so I don't know if the GitHub Actions will be more stable than Travis CI.  The the builds seem good so far, though.  Certainly much faster.
Rumor has it that Travis CI will reduce their service: https://twitter.com/james_hilliard/status/1336081776691843072
I think I have seen jobs staying queued up for longer lately.
So at this point, the net result is a redundant second source of CI builds.  In the future, it could be an exit path away from Travis CI.",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/markpizz,5,https://github.com/simh/simh/pull/978#issuecomment-743213636,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"To me, it seems somewhat wasteful to have some system(s) spend what seems like a ton of cycles doing all of the build work on every ""push"" to the repo.  Having BOTH GitHub and Travis do it would then be doubly so.
If this is the new norm, then who am I to say it shouldn't be done.  Is there some way to limit these activities to at most 'n' times per some time interval?",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/978#issuecomment-743218195,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"I remember your concern about wasted cycles, which is why I set on: [pull_request]  I don't know what it means exactly, but roughly that builds are only started when a pull request is opened.  Commits pushed to regular branches will not be built.
Also, if one of the jobs fail, all the other jobs will be stopped.
I can see Travis CI being sunsetted soon.  This is one possible option.  In two years, maybe there's something new again.  Speaking of wasteful cycles.",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/markpizz,7,https://github.com/simh/simh/pull/978#issuecomment-743225489,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"I remember your concern about wasted cycles, which is why I set on: [pull_request] I don't know what it means exactly, but roughly that builds are only started when a pull request is opened. Commits pushed to regular branches will not be built.

That seems good for pull requests since they really don't come at a crazy pace.  However, Travis stuff seems to run every time I push one (or more) commits to the repo.  This inspires me to hold back some pushes, to avoid wasting cycles after a spelling error correction, but that then leaves the HEAD of the master branch on my local system ahead of GitHub and thus potentially staging sequencing issues with newly arriving pull requests...  I merely get to deal with it...",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/markpizz,8,https://github.com/simh/simh/pull/978#issuecomment-743226954,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"How about we run with both GitHub Actions and Travis for a month and then take a measure of the advantage of GitHub Actions.  If it does well, then we retire the Travis stuff...",True,{}
simh/simh,https://github.com/simh/simh,978,2020-12-11T09:39:27Z,2020-12-11T15:19:23Z,2020-12-11T18:36:48Z,MERGED,True,37,2,3,https://github.com/larsbrinkhoff,CI: Build using GitHub Actions.,1,[],https://github.com/simh/simh/pull/978,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/978#issuecomment-743237313,Continuous integration build using GitHub Actions.  See https://github.com/features/actions,"Yes, that sounds like a good plan.",True,{}
simh/simh,https://github.com/simh/simh,979,2020-12-13T04:04:01Z,2020-12-13T17:08:02Z,2020-12-13T17:08:02Z,MERGED,True,132,96,1,https://github.com/hharte,AltairZ80: Add Z80 Interrupt mode registers and add support for B810 RAM card.,2,[],https://github.com/simh/simh/pull/979,https://github.com/hharte,1,https://github.com/simh/simh/pull/979,,,True,{}
simh/simh,https://github.com/simh/simh,979,2020-12-13T04:04:01Z,2020-12-13T17:08:02Z,2020-12-13T17:08:02Z,MERGED,True,132,96,1,https://github.com/hharte,AltairZ80: Add Z80 Interrupt mode registers and add support for B810 RAM card.,2,[],https://github.com/simh/simh/pull/979,https://github.com/markpizz,2,https://github.com/simh/simh/pull/979#issuecomment-743947256,,"3 Issues:

@psco please approve these details

I strive to avoid merge commits and thus have pull requests in sequence behind the current state of the master branch AND in sequence dates moving forward in the commit/history line:

These commits are 5 commits behind the head of the master branch (last commit a day ago).  Please pull before you commit or rebase as needed into your own master branch or a PR specific actions (again based on the current state of the master branch).
The date on these commits are 6 days back.

You shouldn't have to close this PR as long as your fix your branch state and the push -f to your github repo...",True,{}
simh/simh,https://github.com/simh/simh,979,2020-12-13T04:04:01Z,2020-12-13T17:08:02Z,2020-12-13T17:08:02Z,MERGED,True,132,96,1,https://github.com/hharte,AltairZ80: Add Z80 Interrupt mode registers and add support for B810 RAM card.,2,[],https://github.com/simh/simh/pull/979,https://github.com/psco,3,https://github.com/simh/simh/pull/979#issuecomment-744011257,,This looks good and should proceed.,True,{}
simh/simh,https://github.com/simh/simh,980,2020-12-13T23:27:12Z,2020-12-13T23:45:54Z,2020-12-13T23:45:54Z,MERGED,True,120,65,4,https://github.com/hharte,sim_imd: Properly calculate IMD sectsize.,2,[],https://github.com/simh/simh/pull/980,https://github.com/hharte,1,https://github.com/simh/simh/pull/980,"The ImageDisk sectsize field was incorrectly set to the number of
bytes in the sector, when it should be an index as follows:
00 =  128 bytes/sector
01 =  256 bytes/sector
02 =  512 bytes/sector
03 = 1024 bytes/sector
04 = 2048 bytes/sector
05 = 4096 bytes/sector
06 = 8192 bytes/sector
Tested disk formatting on MS-DOS 1.25, Cromemco CP/M 2.2,
Cromemco CDOS, OASIS 5.6.","The ImageDisk sectsize field was incorrectly set to the number of
bytes in the sector, when it should be an index as follows:
00 =  128 bytes/sector
01 =  256 bytes/sector
02 =  512 bytes/sector
03 = 1024 bytes/sector
04 = 2048 bytes/sector
05 = 4096 bytes/sector
06 = 8192 bytes/sector
Tested disk formatting on MS-DOS 1.25, Cromemco CP/M 2.2,
Cromemco CDOS, OASIS 5.6.",True,{}
simh/simh,https://github.com/simh/simh,981,2020-12-14T00:05:32Z,2020-12-14T00:22:33Z,2020-12-14T00:22:33Z,MERGED,True,416,262,1,https://github.com/hharte,AltairZ80: HDC-1001: Complete the implementation.,1,[],https://github.com/simh/simh/pull/981,https://github.com/hharte,1,https://github.com/simh/simh/pull/981,"The ADC HDC-1001 in SIMH was incomplete and non-functional.
Finish the simulation to be functional under CP/M 2.2, CP/M 3.0,
and OASIS 5.6.","The ADC HDC-1001 in SIMH was incomplete and non-functional.
Finish the simulation to be functional under CP/M 2.2, CP/M 3.0,
and OASIS 5.6.",True,{}
simh/simh,https://github.com/simh/simh,983,2020-12-17T08:32:47Z,2020-12-17T21:36:41Z,2020-12-17T21:36:41Z,MERGED,True,56,31,3,https://github.com/psco,AltairZ80: Updated M2SIO device,1,[],https://github.com/simh/simh/pull/983,https://github.com/psco,1,https://github.com/simh/simh/pull/983,,,True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/leobru,1,https://github.com/simh/simh/pull/986,,,True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/leobru,2,https://github.com/simh/simh/pull/986#issuecomment-753455909,,What's the use compiling with -std=gnu99 for Linux if Visual Studio requires a much older standard?,True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/markpizz,3,https://github.com/simh/simh/pull/986#issuecomment-753458278,,"Leo,
Somehow besm6_vu.c ended up with a couple of tab characters,  Please fix and force push again.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/markpizz,4,https://github.com/simh/simh/pull/986#issuecomment-753547440,,"I'm not sure when or who supplied the -std=gnu99, but it doesn't hurt, right?",True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/leobru,5,https://github.com/simh/simh/pull/986#issuecomment-753558644,,"I'm not sure when or who supplied the -std=gnu99, but it doesn't hurt, right?

It's an inconvenience. For example, when a C99 feature (mid-block variable declaration) was used, it compiled successfully in Linux, and in MacOS during the pull request pre-check, but failed to compile in Visual Studio. Having a consistent language standard across platforms will make the pull request process more efficient.",True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/markpizz,6,https://github.com/simh/simh/pull/986#issuecomment-753612095,,"I hear your problem.
I don't see an obvious change to the -std=gnu99 setting that will catch the problem you observed, but I'm open to suggestions...
That's one of the reasons I build each locally before accepting changes.",True,{}
simh/simh,https://github.com/simh/simh,986,2021-01-02T09:18:47Z,2021-01-02T18:34:37Z,2021-01-08T22:30:24Z,MERGED,True,767,25,9,https://github.com/leobru,BESM6: Implemented punched card input and punched tape output,1,[],https://github.com/simh/simh/pull/986,https://github.com/WILLIAMCORCORAN,7,https://github.com/simh/simh/pull/986#issuecomment-757030724,,"Hello,  can I get a status as to when my order will ship?  Thank you!


Truly,

Bill Corcoran


On Jan 2, 2021, at 10:30 PM, ReActiveMicro.com <sales@reactivemicro.com> wrote:

﻿

I'm not sure when or who supplied the -std=gnu99, but it doesn't hurt, right?

It's an inconvenience. For example, when a C99 feature (mid-block variable declaration) was used, it compiled successfully in Linux, and in MacOS during the pull request pre-check, but failed to compile in Visual Studio. Having a consistent language standard across platforms will make the pull request process more efficient.

—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub<https://urldefense.com/v3/__https://github.com/simh/simh/pull/986*issuecomment-753558644__;Iw!!IaAMF8jX!T_ia3TBidH8ywJvARY1UaLjKj1ZhmvESWyN7w09rQWnXiLx8iSEU4BvLfTSN_A$>, or unsubscribe<https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/ADXBZ7GSZJ5XZBVTET3K7GDSX7JUXANCNFSM4VQ5PC6Q__;!!IaAMF8jX!T_ia3TBidH8ywJvARY1UaLjKj1ZhmvESWyN7w09rQWnXiLx8iSEU4BuZ7fHN3w$>.",True,{}
simh/simh,https://github.com/simh/simh,987,2021-01-02T18:05:06Z,2021-01-02T18:05:50Z,2021-01-02T18:06:14Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/987,https://github.com/promovicz,1,https://github.com/simh/simh/pull/987,"This patch enables -Wall on all makefile builds so that people can see
how bad it has gotten.","This patch enables -Wall on all makefile builds so that people can see
how bad it has gotten.",True,{}
simh/simh,https://github.com/simh/simh,987,2021-01-02T18:05:06Z,2021-01-02T18:05:50Z,2021-01-02T18:06:14Z,CLOSED,False,2,1,1,https://github.com/promovicz,Enable warnings in build,1,[],https://github.com/simh/simh/pull/987,https://github.com/promovicz,2,https://github.com/simh/simh/pull/987#issuecomment-753510049,"This patch enables -Wall on all makefile builds so that people can see
how bad it has gotten.","Sorry, it was not my intention to push this to mainline simh.",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/anders-code,1,https://github.com/simh/simh/pull/989,fixes #988,fixes #988,True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/markpizz,2,https://github.com/simh/simh/pull/989#issuecomment-753613987,fixes #988,"Before looking  closely at this, the goal of the messy things that are being done (which certainly may not be being done in a reasonable way) is explicitly to determine the commit-id of simh that is being used and not the commit of any repo it may be contained in.
Folks have been known to either submodule, or worse yet, randomly copy simh pieces (all, most, or only some) to some other repo and then the results have no useful connection to the state of the repo (and the point in time) that what they're working with.  Then they come along and ask questions.
If they're going to do this, starting from a git archive of the simh repo would be a better solution since the archive has sim_rev.h populated with the the commit the archive was made from.",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/anders-code,3,https://github.com/simh/simh/pull/989#issuecomment-753653373,fixes #988,"I totally understand and this patch results in exactly the behavior you want - the .git-commit-id file contains the git commit ID of simh not some random other repo.
The issue is that instead of using git submodule in the parent repo (which is unreliably detected) and using awk to parse out the simh git commit (which doesn't work when there are other submodules), just let the ""I am a git repo"" test use -e .git instead of -d .git so that the normal git commands work normally.",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/markpizz,4,https://github.com/simh/simh/pull/989#issuecomment-753709939,fixes #988,"If we're going to mess with anything here, I want to actually test it.  Do you have a repo that references simh as a submodule in the way you want to use it that I can clone and test with?",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/anders-code,5,https://github.com/simh/simh/pull/989#issuecomment-753718780,fixes #988,"Yes, I should be able to post something this evening.",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/anders-code,6,https://github.com/simh/simh/pull/989#issuecomment-753850151,fixes #988,"please take a look a : https://github.com/anders-code/vax-unix
it's a work in progress
make submodules
make -j8",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/markpizz,7,https://github.com/simh/simh/pull/989#issuecomment-754282875,fixes #988,"OK.  That change seems to work as you describe.
Three things:

Your commit is against an earlier state of the repo (i.e. the master branch already has another commit after yours), so ""merging it"" will produce a merge commit.  I strive to avoid that level of noise.
Your github profile doesn't have your last name...
The commit message doesn't follow the general convention we try to shoot for in this repo.  which is:

affected-simulator-or-code-section: 1-line summary of activity less than 80

extra-lines-wrapped-before-80
I can cherry pick this commit and list you as the author.
or you can base the change on the head of the master branch, changing the commit message along the way.
A good commit message for this would be:
makefile: allow .git to be a file or directory to handle submodules

Fixes #988

This is certainly a lot of  messing for a 1 character change to the makefile.  :-)",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/anders-code,8,https://github.com/simh/simh/pull/989#issuecomment-754799832,fixes #988,"absolutely, I definitely prefer the rebase (or rebase and merge) workflow as well. Honestly I'm used to bitbucket and gitlabs and have not used github merging of PRs, but had assumed this was an option in the web too at merge time (if there weren't conflicts or other changes). Updated and rebased.


absolutely! I also use and prefer this style. What you see here is an abortive attempt to do the one bit code change with the stupid github online editor. It did not go well (I got some editor garbage pasted in the wrong place, can't see the wrap margins, etc.) vi is the way to go.


Yes, a simple change, but the amount of back-forth is more to do with process and is not incommensurate with the time it took to track down - the makefile was not the easiest thing to figure out. So if I can fix a tricky problem with a single bit flip, I believe that is the theoretical ideal situation!
Thank you for being so responsive; this is sadly not all universal among other projects. Yay!",True,{}
simh/simh,https://github.com/simh/simh,989,2021-01-03T07:11:49Z,2021-01-05T17:55:35Z,2021-01-05T18:19:32Z,MERGED,True,1,1,1,https://github.com/anders-code,allow .git to be a file or directory to handle submodules,1,[],https://github.com/simh/simh/pull/989,https://github.com/markpizz,9,https://github.com/simh/simh/pull/989#issuecomment-754811542,fixes #988,"No problem.  Reasonable and correct requests are always engaged.
Except for managing issues (and PRs which are counted as issues), I don't drive things from the web UI.
Would you please update your GitHub profile to contain your full name???",True,{}
simh/simh,https://github.com/simh/simh,990,2021-01-03T08:41:11Z,2021-01-03T13:17:24Z,2021-01-03T13:17:24Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Added Morrow Disk Jockey disk controller,0,[],https://github.com/simh/simh/pull/990,https://github.com/psco,1,https://github.com/simh/simh/pull/990,,,True,{}
simh/simh,https://github.com/simh/simh,990,2021-01-03T08:41:11Z,2021-01-03T13:17:24Z,2021-01-03T13:17:24Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Added Morrow Disk Jockey disk controller,0,[],https://github.com/simh/simh/pull/990,https://github.com/markpizz,2,https://github.com/simh/simh/pull/990#issuecomment-753612853,,"Please fix:
2>s100_dj2d.c
2>..\AltairZ80\s100_dj2d.c(1194) : warning C4244: '=' : conversion from 'uint16' to 'uint8', possible loss of data
2>..\AltairZ80\s100_dj2d.c(1196) : warning C4244: '=' : conversion from 'uint16' to 'uint8', possible loss of data
2>..\AltairZ80\s100_dj2d.c(1520) : warning C4244: 'function' : conversion from 't_offset' to 't_addr', possible loss of data",True,{}
simh/simh,https://github.com/simh/simh,991,2021-01-03T13:25:05Z,2021-01-03T13:32:57Z,2021-01-03T13:32:57Z,MERGED,True,2078,0,5,https://github.com/psco,AltairZ80: Added Morrow Disk Jockey disk controller,1,[],https://github.com/simh/simh/pull/991,https://github.com/psco,1,https://github.com/simh/simh/pull/991,,,True,{}
simh/simh,https://github.com/simh/simh,996,2021-01-16T21:43:27Z,2021-01-16T22:53:43Z,2021-01-16T22:53:43Z,MERGED,True,6,14,1,https://github.com/hharte,AltairZ80: mdfc: Fix unit detach.,1,[],https://github.com/simh/simh/pull/996,https://github.com/hharte,1,https://github.com/simh/simh/pull/996,,,True,{}
simh/simh,https://github.com/simh/simh,996,2021-01-16T21:43:27Z,2021-01-16T22:53:43Z,2021-01-16T22:53:43Z,MERGED,True,6,14,1,https://github.com/hharte,AltairZ80: mdfc: Fix unit detach.,1,[],https://github.com/simh/simh/pull/996,https://github.com/hharte,2,https://github.com/simh/simh/pull/996#issuecomment-761683908,,"FYI, @psco",True,{}
simh/simh,https://github.com/simh/simh,996,2021-01-16T21:43:27Z,2021-01-16T22:53:43Z,2021-01-16T22:53:43Z,MERGED,True,6,14,1,https://github.com/hharte,AltairZ80: mdfc: Fix unit detach.,1,[],https://github.com/simh/simh/pull/996,https://github.com/psco,3,https://github.com/simh/simh/pull/996#issuecomment-761687164,,"The assignment
r = diskClose(&mfdc_info->drive[i].imd);
looks a bit strange as r is always overwritten by
r = detach_unit(uptr);  /* detach unit */",True,{}
simh/simh,https://github.com/simh/simh,996,2021-01-16T21:43:27Z,2021-01-16T22:53:43Z,2021-01-16T22:53:43Z,MERGED,True,6,14,1,https://github.com/hharte,AltairZ80: mdfc: Fix unit detach.,1,[],https://github.com/simh/simh/pull/996,https://github.com/psco,4,https://github.com/simh/simh/pull/996#issuecomment-761689588,,"This looks good, thanks.",True,{}
simh/simh,https://github.com/simh/simh,997,2021-01-17T17:38:39Z,2021-01-18T18:46:09Z,2021-01-18T18:46:09Z,MERGED,True,11,18,1,https://github.com/hharte,AltairZ80: vfdhd: Fix unit detach.,1,[],https://github.com/simh/simh/pull/997,https://github.com/hharte,1,https://github.com/simh/simh/pull/997,"FYI, @psco","FYI, @psco",True,{}
simh/simh,https://github.com/simh/simh,997,2021-01-17T17:38:39Z,2021-01-18T18:46:09Z,2021-01-18T18:46:09Z,MERGED,True,11,18,1,https://github.com/hharte,AltairZ80: vfdhd: Fix unit detach.,1,[],https://github.com/simh/simh/pull/997,https://github.com/psco,2,https://github.com/simh/simh/pull/997#issuecomment-761858111,"FYI, @psco",Looks good,True,{}
simh/simh,https://github.com/simh/simh,997,2021-01-17T17:38:39Z,2021-01-18T18:46:09Z,2021-01-18T18:46:09Z,MERGED,True,11,18,1,https://github.com/hharte,AltairZ80: vfdhd: Fix unit detach.,1,[],https://github.com/simh/simh/pull/997,https://github.com/markpizz,3,https://github.com/simh/simh/pull/997#issuecomment-761864197,"FYI, @psco",Actually.  It could be improved since there are now return statements in a row (lines 340 & 342).  Only the first will be effective and the second will be  dead code...,True,{}
simh/simh,https://github.com/simh/simh,997,2021-01-17T17:38:39Z,2021-01-18T18:46:09Z,2021-01-18T18:46:09Z,MERGED,True,11,18,1,https://github.com/hharte,AltairZ80: vfdhd: Fix unit detach.,1,[],https://github.com/simh/simh/pull/997,https://github.com/psco,4,https://github.com/simh/simh/pull/997#issuecomment-761865453,"FYI, @psco","You're absolutely right. And while we are at it, one could remove the variable r altogether and have
return detach_unit(uptr);  /* detach unit */
as the last statement of vfdhd_detach.",True,{}
simh/simh,https://github.com/simh/simh,997,2021-01-17T17:38:39Z,2021-01-18T18:46:09Z,2021-01-18T18:46:09Z,MERGED,True,11,18,1,https://github.com/hharte,AltairZ80: vfdhd: Fix unit detach.,1,[],https://github.com/simh/simh/pull/997,https://github.com/hharte,5,https://github.com/simh/simh/pull/997#issuecomment-761873530,"FYI, @psco","Thanks for the feedback, updated.",True,{}
simh/simh,https://github.com/simh/simh,998,2021-01-18T19:08:35Z,2021-01-18T19:50:03Z,2021-01-18T19:50:03Z,MERGED,True,517,76,9,https://github.com/psco,AltairZ80: Updated Morrow Disk Jockey disk controller and minor code …,1,[],https://github.com/simh/simh/pull/998,https://github.com/psco,1,https://github.com/simh/simh/pull/998,…cleanup,…cleanup,True,{}
simh/simh,https://github.com/simh/simh,998,2021-01-18T19:08:35Z,2021-01-18T19:50:03Z,2021-01-18T19:50:03Z,MERGED,True,517,76,9,https://github.com/psco,AltairZ80: Updated Morrow Disk Jockey disk controller and minor code …,1,[],https://github.com/simh/simh/pull/998,https://github.com/markpizz,2,https://github.com/simh/simh/pull/998#issuecomment-762429450,…cleanup,"Please fix:
1>s100_dj2d.c
1>..\AltairZ80\s100_dj2d.c(2034) : warning C4244: '=' : conversion from 't_offset' to 'uint32', possible loss of data
1>..\AltairZ80\s100_dj2d.c(2065) : warning C4244: 'function' : conversion from 't_offset' to 't_addr', possible loss of data",True,{}
simh/simh,https://github.com/simh/simh,1003,2021-02-01T06:09:57Z,2021-02-01T06:22:06Z,2021-02-01T06:22:06Z,MERGED,True,4,0,1,https://github.com/larsbrinkhoff,PDP11: Toggle NG display fullscreen with F11.,1,[],https://github.com/simh/simh/pull/1003,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1003,Typing F11 toggles the window between fullscreen and window mode.,Typing F11 toggles the window between fullscreen and window mode.,True,{}
simh/simh,https://github.com/simh/simh,1004,2021-02-01T17:29:43Z,2021-02-01T18:09:17Z,2021-02-01T18:15:37Z,MERGED,True,33,0,1,https://github.com/larsbrinkhoff,PDP11: New VT11 setting to enable/disable switches.,1,[],https://github.com/simh/simh/pull/1004,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1004,"Use SET VT KEYBOARD=SWITCHES or NOSWITCHES to enable/disable toggling switches with the keyboard.  Default is SWITCHES.
Resolves #1001.","Use SET VT KEYBOARD=SWITCHES or NOSWITCHES to enable/disable toggling switches with the keyboard.  Default is SWITCHES.
Resolves #1001.",True,{}
simh/simh,https://github.com/simh/simh,1004,2021-02-01T17:29:43Z,2021-02-01T18:09:17Z,2021-02-01T18:15:37Z,MERGED,True,33,0,1,https://github.com/larsbrinkhoff,PDP11: New VT11 setting to enable/disable switches.,1,[],https://github.com/simh/simh/pull/1004,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1004#issuecomment-771026166,"Use SET VT KEYBOARD=SWITCHES or NOSWITCHES to enable/disable toggling switches with the keyboard.  Default is SWITCHES.
Resolves #1001.","On Monday, February 1, 2021 at 2:41 AM, Mark Pizzolato wrote:

A few things about this:

The default should be the historic behavior
I'm thinking the option should be specifically admit the spacewar
keybindings.  Simply mentioning SWITCHES may be meaningful to you, but it
is less than clear to other folks.
SET VT KEYBOARD=SPACEWAR
and  SET VT KEYBOARD=NOSPACEWAR
The default MTAB behavior sets UNIT.flags, not DEVICE.flags, which is fine.
You should define UNIT_SWITCHES instead of DEV_SWITCHES.  If you really
want to use a DEVICE flag, then you'll need a specific MTAB set routine you
should have a MTAB show routine.


Your updated change is better.
In vt_set_kb() you should use (MATCH_CMD(gbuf, ""SWITCHES"") == 0) instead of (strcasecmp(gbuf, ""SWITCHES"") == 0), likewise for ""NOSWITCHES"".  If neither matches, then you should report an error with return sim_messagef (SCPE_ARG, ""Unexpected Keyboard setting: %s\n"", gbuf);
In vt_show_kb() the string ""KEYBOARD="" should be ""keyboard="" to be consistent with the various other details of this device:
sim> set vt ena
sim> show vt
VT      crt=VR17, scale=2, hspace=normal
        vspace=normal, address=17772000-17772007, vector=300-314*, BR4
        KEYBOARD=SWITCHES
sim> set vt key=nosw

No error reported!
sim> show vt
VT      crt=VR17, scale=2, hspace=normal
        vspace=normal, address=17772000-17772007, vector=300-314*, BR4
        KEYBOARD=SWITCHES
sim> set vt key=noswitches
sim> show vt
VT      crt=VR17, scale=2, hspace=normal
        vspace=normal, address=17772000-17772007, vector=300-314*, BR4
        KEYBOARD=NOSWITCHES
sim> 

Still no mention of this existing for spacewar.  Why not?  The MTAB entry string ""keyboard"" is lacking useful detail.  It could be ""Disable or Enable Spacewar switches"".  Also, the MTAB string which currently says ""KEYBOARD=SWITCHES"" should mention the choices: ""KEYBOARD={NOSWITCHES|SWITCHES}""",True,{}
simh/simh,https://github.com/simh/simh,1004,2021-02-01T17:29:43Z,2021-02-01T18:09:17Z,2021-02-01T18:15:37Z,MERGED,True,33,0,1,https://github.com/larsbrinkhoff,PDP11: New VT11 setting to enable/disable switches.,1,[],https://github.com/simh/simh/pull/1004,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/1004#issuecomment-771035074,"Use SET VT KEYBOARD=SWITCHES or NOSWITCHES to enable/disable toggling switches with the keyboard.  Default is SWITCHES.
Resolves #1001.",Updated per comments.,True,{}
simh/simh,https://github.com/simh/simh,1005,2021-02-03T15:04:16Z,2021-02-03T20:00:50Z,2021-02-03T20:00:50Z,MERGED,True,2,2,1,https://github.com/larsbrinkhoff,PDP11: Use MATCH_CMD to match comand strings.,1,[],https://github.com/simh/simh/pull/1005,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1005,As per request.,As per request.,True,{}
simh/simh,https://github.com/simh/simh,1006,2021-02-09T12:35:33Z,2021-02-09T17:22:23Z,2021-02-09T17:22:23Z,MERGED,True,69,32,1,https://github.com/psco,AltairZ80: Updated ICOM device,1,[],https://github.com/simh/simh/pull/1006,https://github.com/psco,1,https://github.com/simh/simh/pull/1006,,,True,{}
simh/simh,https://github.com/simh/simh,1007,2021-02-15T19:04:44Z,2021-02-15T20:33:50Z,2021-02-15T20:33:50Z,MERGED,True,5,10,1,https://github.com/hharte,AltairZ80: Fix North Star MDS-AD for NSDOS,1,[],https://github.com/simh/simh/pull/1007,https://github.com/hharte,1,https://github.com/simh/simh/pull/1007,"The ""Window"" bit was getting cleared too late, causing the ""next"" sector
to be written under North Star DOS.  Due to differences between CP/M and
North Star disk access routines, this was not an issue under CP/M.
Test: Verify that North Star DOS and CP/M can format, copy and verify an
entire disk.
North Star Disk Operating System, Version 2.1.1, at  100
+GO DT 2
SINGLE(S) OR DOUBLE(D) DENSITY TEST? D
BOTH SIDES (Y OR N)? Y
LOAD DISKETTE THEN PRESS RETURN TO BEGIN TEST
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
CONTROL-C STOP
+GO CD 1 2
COPY BOTH SIDES (Y OR N)? Y
LOAD DISKETTES AND PRESS RETURN WHEN READY.
COPY COMPLETED.
+GO CK 1
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+GO CK 2
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+","The ""Window"" bit was getting cleared too late, causing the ""next"" sector
to be written under North Star DOS.  Due to differences between CP/M and
North Star disk access routines, this was not an issue under CP/M.
Test: Verify that North Star DOS and CP/M can format, copy and verify an
entire disk.
North Star Disk Operating System, Version 2.1.1, at  100
+GO DT 2
SINGLE(S) OR DOUBLE(D) DENSITY TEST? D
BOTH SIDES (Y OR N)? Y
LOAD DISKETTE THEN PRESS RETURN TO BEGIN TEST
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
CONTROL-C STOP
+GO CD 1 2
COPY BOTH SIDES (Y OR N)? Y
LOAD DISKETTES AND PRESS RETURN WHEN READY.
COPY COMPLETED.
+GO CK 1
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+GO CK 2
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+",True,{}
simh/simh,https://github.com/simh/simh,1007,2021-02-15T19:04:44Z,2021-02-15T20:33:50Z,2021-02-15T20:33:50Z,MERGED,True,5,10,1,https://github.com/hharte,AltairZ80: Fix North Star MDS-AD for NSDOS,1,[],https://github.com/simh/simh/pull/1007,https://github.com/hharte,2,https://github.com/simh/simh/pull/1007#issuecomment-779403205,"The ""Window"" bit was getting cleared too late, causing the ""next"" sector
to be written under North Star DOS.  Due to differences between CP/M and
North Star disk access routines, this was not an issue under CP/M.
Test: Verify that North Star DOS and CP/M can format, copy and verify an
entire disk.
North Star Disk Operating System, Version 2.1.1, at  100
+GO DT 2
SINGLE(S) OR DOUBLE(D) DENSITY TEST? D
BOTH SIDES (Y OR N)? Y
LOAD DISKETTE THEN PRESS RETURN TO BEGIN TEST
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
CONTROL-C STOP
+GO CD 1 2
COPY BOTH SIDES (Y OR N)? Y
LOAD DISKETTES AND PRESS RETURN WHEN READY.
COPY COMPLETED.
+GO CK 1
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+GO CK 2
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+","FYI, @psco",True,{}
simh/simh,https://github.com/simh/simh,1007,2021-02-15T19:04:44Z,2021-02-15T20:33:50Z,2021-02-15T20:33:50Z,MERGED,True,5,10,1,https://github.com/hharte,AltairZ80: Fix North Star MDS-AD for NSDOS,1,[],https://github.com/simh/simh/pull/1007,https://github.com/psco,3,https://github.com/simh/simh/pull/1007#issuecomment-779434110,"The ""Window"" bit was getting cleared too late, causing the ""next"" sector
to be written under North Star DOS.  Due to differences between CP/M and
North Star disk access routines, this was not an issue under CP/M.
Test: Verify that North Star DOS and CP/M can format, copy and verify an
entire disk.
North Star Disk Operating System, Version 2.1.1, at  100
+GO DT 2
SINGLE(S) OR DOUBLE(D) DENSITY TEST? D
BOTH SIDES (Y OR N)? Y
LOAD DISKETTE THEN PRESS RETURN TO BEGIN TEST
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
PASS COMPLETE
CONTROL-C STOP
+GO CD 1 2
COPY BOTH SIDES (Y OR N)? Y
LOAD DISKETTES AND PRESS RETURN WHEN READY.
COPY COMPLETED.
+GO CK 1
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+GO CK 2
DISKETTE CHECK, VERSION 1
CHECK CODE: 46513
+",Thanks Howard!,True,{}
simh/simh,https://github.com/simh/simh,1008,2021-02-15T21:36:05Z,2021-02-15T21:56:43Z,2021-02-15T21:56:43Z,MERGED,True,58,25,1,https://github.com/hharte,AltairZ80: Add MDS-AD support for single-density,1,[],https://github.com/simh/simh/pull/1008,https://github.com/hharte,1,https://github.com/simh/simh/pull/1008,"The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.","The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.",True,{}
simh/simh,https://github.com/simh/simh,1008,2021-02-15T21:36:05Z,2021-02-15T21:56:43Z,2021-02-15T21:56:43Z,MERGED,True,58,25,1,https://github.com/hharte,AltairZ80: Add MDS-AD support for single-density,1,[],https://github.com/simh/simh/pull/1008,https://github.com/hharte,2,https://github.com/simh/simh/pull/1008#issuecomment-779458097,"The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.","FYI, @psco",True,{}
simh/simh,https://github.com/simh/simh,1008,2021-02-15T21:36:05Z,2021-02-15T21:56:43Z,2021-02-15T21:56:43Z,MERGED,True,58,25,1,https://github.com/hharte,AltairZ80: Add MDS-AD support for single-density,1,[],https://github.com/simh/simh/pull/1008,https://github.com/psco,3,https://github.com/simh/simh/pull/1008#issuecomment-779463816,"The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.",Thanks Howard!,True,{}
simh/simh,https://github.com/simh/simh,1008,2021-02-15T21:36:05Z,2021-02-15T21:56:43Z,2021-02-15T21:56:43Z,MERGED,True,58,25,1,https://github.com/hharte,AltairZ80: Add MDS-AD support for single-density,1,[],https://github.com/simh/simh/pull/1008,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1008#issuecomment-779464403,"The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.","@psco, does Thanks mean you're OK with this?",True,{}
simh/simh,https://github.com/simh/simh,1008,2021-02-15T21:36:05Z,2021-02-15T21:56:43Z,2021-02-15T21:56:43Z,MERGED,True,58,25,1,https://github.com/hharte,AltairZ80: Add MDS-AD support for single-density,1,[],https://github.com/simh/simh/pull/1008,https://github.com/psco,5,https://github.com/simh/simh/pull/1008#issuecomment-779465357,"The North Star MDS-AD disk controller supports both single- and
double-density operation.  While mixed-density is supported by the
controller, it is not supported by AltairZ80 due to a limitation of the
.nsi image file format.  The .nsi image file format requires all sectors
to be of the same density.","Yes, this PR is fine.",True,{}
simh/simh,https://github.com/simh/simh,1010,2021-02-19T07:59:07Z,2021-02-27T15:01:51Z,2021-02-27T15:01:51Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1010,https://github.com/psco,1,https://github.com/simh/simh/pull/1010,,,True,{}
simh/simh,https://github.com/simh/simh,1010,2021-02-19T07:59:07Z,2021-02-27T15:01:51Z,2021-02-27T15:01:51Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1010,https://github.com/psco,2,https://github.com/simh/simh/pull/1010#issuecomment-786637202,,"Hi Mark, please let me know if there is any issue. On the other hand I seem to have difficulties contacting your mail server.",True,{}
simh/simh,https://github.com/simh/simh,1010,2021-02-19T07:59:07Z,2021-02-27T15:01:51Z,2021-02-27T15:01:51Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1010,https://github.com/markpizz,3,https://github.com/simh/simh/pull/1010#issuecomment-786725086,,"Hi Peter,
I was very distracted over the past week and completely forgot about this pull request.  I guess this will be a perfect opportunity to unwind that commit and force push out your master branch again.
I'm very sorry.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1010,2021-02-19T07:59:07Z,2021-02-27T15:01:51Z,2021-02-27T15:01:51Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1010,https://github.com/psco,4,https://github.com/simh/simh/pull/1010#issuecomment-786750747,,"No worry - Thanks, Peter",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,1,https://github.com/simh/simh/pull/1011,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1011#issuecomment-784439353,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Hi Jos,
Glad you put all of it together so the full needs of HITMISS behavior have been determined.  Meanwhile, I'm looking first at the details of your resulting HITMISS changes.  I'm considering this pull request as a work in progress until we get things looking well all around.
My first goal here is to coalesce the HITMISS stuff so that I can pass it to back to Bob Supnik (the author of the PDP11 simulator) with minimal changes to the existing code for his review and advice.
My initial reactions to these changes are:

You may notice that the existing PDP11 codebase has very minimal specific references to CPU specific options scattered throughout the various simulator & DEVICE source modules (only one reference to a CPU model feature (OPT_RH11 exists in pdp11_rh)).  This suggests that the ""if (CPUO (OPT_CACHE))"" tests actually belong within the setHITMISS routine.
Not knowing precisely the specific behavior of the cache in these systems, it would seem that the actual call to setHITMISS() would belong directly in RdMemW(), WrMemW(), RdMemB(), and WrMemB().
These changes would then mean that pdp11_rh.c, pdp11_io.c and pdp11_sys.c would not need to be modified for proper HITMISS behavior.

Related to this, the setHITMISS routine would seem to belong in the pdp11_cpumod.c module since that is where CPU model specific features are implemented.  This would then remove the need for changes in pdp11_cpu.c.
Hmm... RdMemB, RdMemW, WrMemB and WrMemW are macros.  These macros can be changed to invoke new routines in pdp11_cpumod.c which then implement the similar logic as is already done for the UC15 variant.  This gets into where Bob would make the call about doing this.  The consequence here is that we're adding performance implications to essentially all simulated memory references.  My gut says that Bob would argue for accuracy and simplicity in implementation so the performance hit will be justified, and likely very hard to actually observe in running simulators.  From my quick observation this simplifies the HITMISS changes to involve pdp11_cpumod.c., pdp11_cpumod.h, the OPT_CACHE change and redefining RdMem* and WrMem* macros in pdp11_defs.h.
Lets see if you can do just the HITMISS logic in a separate branch in your repo.  Once that looks good, the M9312 stuff can derive from that HITMISS branch (which will ultimately be added to the master branch as a single commit squashing your various steps along the way).
Please avoid committing changes to simh.sln since that file gets modified by the newer Visual Studio versions when they convert the VS2008 sln and proj files.  Committing that breaks things for VS2008.  We don't maintain other VS version details in the repo since they can all be derived dynamically from the VS2008 info.  ""Visual Studio Projects/0ReadMe_Projects.txt"" describes where you can find the installer for VS2008 which installs cleanly on all Windows environments since Vista.  Use VS2008 or your current version, but don't commit simh.sln.
Looking ahead to the M93212 details, it would seem useful to enrich the m93211_help routine to explain  details about the available device ROMs and provide specific examples of how to configure them.  Please, also explain which systems actually supported this module.
The M9312 DEVICE flags should initially specify DEV_DIS as a default which makes it compatible with legacy configurations.
The logic in the m9312_reset routine:

should behave differently when the M9312 is disabled.
should only allow the M9312 to be enabled for CPUs that supported it and otherwise it should actively set DEVICE_DIS.

The m9312_rd routine should always return NXM if the M9312 DEVICE is disabled.
In general, you should probably be using strcasecmp rather than strcmp,.  Additionally, rather than strncpy, we're migrating things to strlcpy.
Lastly, how is the ROM code in M9312 actually engaged by the user of the system?  How did original hardware end up running ROM code?
Is there really something called M93212?  You've used that name in several places (Initial Pull Request title and branch names in your Repo)...

Mark",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,3,https://github.com/simh/simh/pull/1011#issuecomment-785395958,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Jos,
After sleeping on this, I realized that Bob may think that the HITMISS changes may not be a good idea (I was looking only at the change set to the code rather than thinking through the value/implication of the change).  Bob may state that simh's goal is to be true to the hardware so that software that ran on the hardware still runs.  You may say that ROM based software is logically included since it ran on the hardware.
Well, maybe and maybe not.  Bob's goal of ""running software"" explicitly does not include running every diagnostic.  This is true since diagnostics very often test things timing with instruction loops or obtuse things about the original hardware which may have indeed been useful when the diagnostic was written but otherwise serve absolutely no purpose other than passing a particular diagnostic test and doesn't benefit any other software that ran on the system.  Due to this, numerous other ROM based diagnostics that run on simh simulators (the various VAX models in particular) have slightly modified ROM images which disable tests like this (cache behaviors in particular) and thus allow the other functions of the original ROMs to still be leveraged in simulation.  Given the 20 years the simh PDP11 has been running the many varied operating systems that actually ran on the original PDP11 hardware, implementing support for the cache diagnostic will likely be classified as something which should be patched in the ROM to be disabled...
Sorry I didn't think of this yesterday.  Meanwhile, looking through the M9312 listing details at https://www.ak6dn.com/PDP-11/M9312/, I don't see specific references to the HITMISS register which should be at 017745, right?  Where/how did you observe HITMISS failures?

Mark",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/1011#issuecomment-785693401,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Seeing HITMISS ran a faint bell for me.  I found #614, where a PDP-11/70 ROM requires the HITMISS register to be 1 for success.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/1011#issuecomment-785694797,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos",Isn't the existing ROM device (pdp11_rom.c) close or similar to the M9312?,True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1011#issuecomment-786040852,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Seeing HITMISS ran a faint bell for me. I found #614, where a PDP-11/70 ROM requires the HITMISS register to be 1 for success.

How (under what conditions) did you observe this need?

Isn't the existing ROM device (pdp11_rom.c) close or similar to the M9312?

I'm not sure yet, but part of what it is doing is specifically oriented around the many ROM images at  https://www.ak6dn.com/PDP-11/M9312/",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/1011#issuecomment-786169309,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","How (under what conditions) did you observe this need?

My memory of this is very vague now, but I think it was some small self test before doing the main function of the ROM.
#614 (comment)",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,8,https://github.com/simh/simh/pull/1011#issuecomment-786175948,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","How (under what conditions) did you observe this need?

My memory of this is very vague now, but I think it was some small self test before doing the main function of the ROM.
#614 (comment)

So, the code that referenced the HITMISS register was part of the early ROM contents, and the solution which worked was merely to set the HITMISS register to 1, right?",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,9,https://github.com/simh/simh/pull/1011#issuecomment-786430618,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Yes, in this case just setting it to the static value 1 made the test pass.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,10,https://github.com/simh/simh/pull/1011#issuecomment-787439381,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Jos,
I see you're working on this stuff in your simh repo.
Please participate in this discussion and answer the questions various questions that have been raised.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,11,https://github.com/simh/simh/pull/1011#issuecomment-789539296,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Mark, Lars,
Unfortunately my replies to your comments didn't reach this thread. The Github notification e-mails state that I can reply directly but that doesn't function. Sorry about the silence.
To my surprise a ""dep hitmiss 1"" indeed works and I therefore checked the execution of the diagnostic ROM code and the behaviour of simh.
In TEST16 of the diagnostic code at address 165544 the following instructions are executed:
ROR @177752  ; Check the HITMISS register if the last memory reference was a hit
BCS 165556    ; Branch if yes
This instruction sequence is executed at least 1000 times for subsequent memory adresses and you would expect that the BCS would fail in the second pass of that code. In the subsequent passes however the HITMISS register still has the value 1. The reason for that is that the register is - as documented in the Processor Handbooks - read-only. The implementation in cpu70_wr() probably is correct: the the PSW C-bit is set whilst the HITMISS register is not modified and an SCPE_OK is returned.
As the HITMISS register is read-only the simh ""dep hitmiss 1"" command however should fail I think.
I now see three options to make the diagnostic code pass the HITMISS register test:


Adapt the diagnostic code. Although this is an easy option, I personally wouldn't like it as I'm of the opinion that the simulator should be adapted to make original code function and not the other way around, adapt the code to make it run on a simulator.


Initialise the HITMISS register to 1 or make the cpu70_rd() function return 1, something like the implementation in CPUJ_rd(). Although not very nice, while properly documented I personally would find that an acceptable solution.


Implement the behaviour of the HITMISS register up to a point that it is accepted by the diagnostic code. Personally I would find that the cleanest solution and I now have - I think - a clean implementation ready.


Do you see other options? Which option do you prefer?
Regards,
Jos",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/1011#issuecomment-790309345,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","(Note, I'm not replying in any SIMH official capacity.  Mark and Bob call the shots.)
I don't think the HITMISS register needs to be read-only as far as DEPOSIT goes.  The important thing is that executing PDP-11 code shouldn't be able to write it.
With regards to your points 1-2-3, recall that the stated goal of SIMH is first and foremost to run real operating systems and applications.  Diagnostics take a distinct second seat, and may not always be supported.  I think we should be happy that a simple DEPOSIT HITMISS 1 makes this diagnostic run to completion.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,13,https://github.com/simh/simh/pull/1011#issuecomment-790424960,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Hi Lars,
I'm sorry to say that - with all respect - I have to disagree with you. Using a ""DEPOSIT HITMISS 1"" to make the diagnostic code function is an option that ugly that I didn't even consider it. I fully agree with you (and Bob and probably Mark) that as Mark stated ""'running software' explicitly does not include running every diagnostic"". The 11/70 cache e.g. has two cache groups that can separately be enabled or disabled. The XXDP diagnostics enable and disable these groups thereby verifying that memory accesses accordingly produce hits or misses. Implementing that behaviour has no added value for simh and for me that's the point where an implementation of the HITMSS register should end.
Being able to execute the diagnostic code that was built in the machines however is another story. In my opinion simh should reflect at the outside as much as useful and possible of the original behaviour. There are no patches made to e.g. drivers to make them run on simh and in my opinion m9312 diagnostic and boot ROMS have at least the same status. And this way ""playing"" with simh, making it as realistic as possible is fun, adapting original code to make it run om simh is a disappointment.
In that line I would also argue in favor of marking the HITMISS register read-only so a ""DEPOSIT HITMISS"" would return an error. Allowing a write on the registers causes confusion and put me on the wrong track.
Needless to say that I'll leave the verdict to Mark and Bob and will adapt my M9312 implementation to their choice.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,14,https://github.com/simh/simh/pull/1011#issuecomment-791819022,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","I'm working with Bob on the HITMISS subject.
Meanwhile, I had asked:

how is the ROM code in M9312 actually engaged by the user of the system? How did original hardware end up running ROM code?

Please answer this and provide potential configuration instructions to I can actually see the M9312 stuff in action.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,15,https://github.com/simh/simh/pull/1011#issuecomment-791899689,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Mark,
My apologies for not answering all your questions, unfortunately my answers didn't reach the thread.
An actual (hardware) M9312 module is filled with ROMs in (two or more of) its five sockets. This makes the ROM code available at the (16-bit) addresses 176500, 173000, 173200, 173400 and 173600. In my m9312 implementation the sockets are filled with the simh command ""SET M9312 SOCKET[0-4]="". ROM codes are e.g. B0 for the 11/60,70 Diagnostic and DL for a RL01/02 disk. The following commands e.g. configure a PDP-11/70 for booting from a RL02 disk:
simh> set cpu 11/70, 4M
simh> set m9312 socket0=b0
simh> set m9312 socket1=dp
simh> set rl0 rl02
simh> attach -r -e rl0 
The ROM code is then booted just as in an original system by starting at 173004 (for a start without execution of the diagnostics) or at 173006 (for a start with execution of the diagnostics). The ROM code can also be started at 165744 with a code in the switch register to specify the device and unit to boot from. It all works exactly as documented in the ""M9312 bootstrap/terminator module technical manual"".
The added value of this boot procedure is that the system can now be booted the authentic way: by starting on an appropriate address in the ROM code. This is especially nice on Blinkenbone and PiDP systems as they can now be booted by a LOAD ADDRSS - START sequence.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/1011#issuecomment-791914219,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","I for one think this effort is laudable.  My reason for adding the pdp11_rom device was to boot a GT40 in the ""authentic"" way with the VT11 ROM.  I'm wondering if your use case could be satisfied by adding one more slot to pdp11_rom (it only has four now).?  I see nothing so far in your description that says otherwise.
If (and only if) your M9312 device overlaps largely with my pdp11_rom, I think it would be wasteful duplication to have two ROM implementations.  I'm happy to accomodate changes to pdp11_rom if that's appropriate.
@friesga, could you send me, or point me to, the ROM image files?
There's the matter of HITMISS, but I think it's entirely orthogonal to the ROM device.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,17,https://github.com/simh/simh/pull/1011#issuecomment-792262350,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Lars,
My 9312 implementation indeed has some overlap with the ROM device. (Actually I used the ROM device to check that my approach was feasible). I agree with you that it would be better if there were one implementation for all ROM devices and I certainly would be willing to cooperate in implementing such a solution.
Our approaches however differ somewhat and it might be a challenge to merge their functionality. My approach for the m9312 implementation was to make its use as easy as possible for the users. I didn't want them having to search for ROM images and having these lying around somewhere and therefore included the ROM code as arrays built into the device (see pdp11_m9312.h in the pull request). I copied that approach from pdp11_xq_bootrom.h.
I we were to merge our two devices it should have the functionality of both devices, i.e. the M9312 ROMs built in plus the option to attach images as ROMs. Moreover, if our goal is to have just one ROM device, the design should be extensible to include possible future developments for other ROM devices too, like the M9301. Perhaps we could define a ROM layout parameter, indicating the number of sockets, the addresses at which the ROMS are accessible and the available ROMs per socket. ""No layout"" could then indicate the behaviour of the ROM device as it is. Would that be a feasible approach?
As source for the ROM code in the arrays I used the sources on Don North's site (https://www.ak6dn.com/PDP-11/M9312/). I assembled the sources and converted them to arrays by a modified version of Don's obj2bin (https://github.com/AK6DN/obj2bin). As a result of this approach there are no image files I can point you to.
The HITMISS matter is indeed more or less orthogonal to the m9312 implementation, but taking the effort for an implementation would be somehow useless if the ROM code then would fail to boot the system.Lars,",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,18,https://github.com/simh/simh/pull/1011#issuecomment-792324044,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Something like set rom m9312 and set rom m9301 etc should be feasible.  I imagine this would set the number, addresses, and memory contents of the sockets.  That is, if the part number uniquely identifies these details.
The maximum number of sockets could be raised to something that ""should be enough for anyone"", or dynamically allocated if possible.
I'll bow out of the HITMISS discussion.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,19,https://github.com/simh/simh/pull/1011#issuecomment-792358371,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","My 9312 implementation indeed has some overlap with the ROM device. (Actually I used the ROM device to check that my approach was feasible). I agree with you that it would be better if there were one implementation for all ROM devices and I certainly would be willing to cooperate in implementing such a solution.

We never really spoke about exactly what device @larsbrinkhoff's ROM device actually simulated and thus never explored the Qbus/Unibus constraints that may have existed with the actual hardware.  Maybe this was a M9301, right?  In any case, we need to revisit this and also add the additional constraint that either a M9301 OR a M9312 could exist in a system and not both, so it would seem most reasonable that a SET ROM M9312|M9301 would be appropriate.

Our approaches however differ somewhat and it might be a challenge to merge their functionality. My approach for the m9312 implementation was to make its use as easy as possible for the users. I didn't want them having to search for ROM images and having these lying around somewhere and therefore included the ROM code as arrays built into the device (see pdp11_m9312.h in the pull request). I copied that approach from pdp11_xq_bootrom.h.

I believe that the built-in ROM images are absolutely most useful specifically for the reason @friesga states along with the fact that, these things are VERY stable and hardly ever modified (They're ROMs right!).  That said, there is also significant flexibility in allowing a developer (or user) to manually load a particular file and use it as a ROM's contents.  There are existing cases where this happens in current simulators: The various Qbus VAX simulators support explicitly loading a ROM image before booting the system with a fallback to loading the default (built-in) ROM image if a processor boot is attempted and the ROM hasn't yet been loaded.  Something like this should be supported here.  Meanwhile, since it is already known that an 11/60 & 11/70 want the B0 ROM, that should be the default when the CPU is one of these and the alternates should be set based on processor type and allow the user to override as desired.  It should certainly be easy enough to add a couple of GT40 and/or related ROM's to the set of built-ins which may then only be usable in M9301 mode...

The ROM code is then booted just as in an original system by starting at 173004 (for a start without execution of the diagnostics) or at 173006 (for a start with execution of the diagnostics). The ROM code can also be started at 165744 with a code in the switch register to specify the device and unit to boot from. It all works exactly as documented in the ""M9312 bootstrap/terminator module technical manual"".

You mention the ""switch register"", which the ""M9312 bootstrap/terminator module technical manual"" indicates as a set of switches on the M9312 board.  It would seem that this should then be exposed as a simh REGister or at least settable by a SET  SWITCH=xxx (without knowing more I'm thinking a simh REG is the best choice).  Meanwhile, once such a register exists, how does the code running from ROM access the contents of this switch register?

The ROM code is then booted just as in an original system by starting at 173004 (for a start without execution of the diagnostics) or at 173006 (for a start with execution of the diagnostics). The ROM code can also be started at 165744 with a code in the switch register to specify the device and unit to boot from. It all works exactly as documented in the ""M9312 bootstrap/terminator module technical manual"".

I was only slightly a PDP11 user a few times and never had to boot one.  Are you saying that each time a PDP 11/70 booted someone had to flip a bunch of switches on the system front panel any number of times in order to achieve a boot?  There was no way to setup a system that would just boot to some specific device when you powered it on? Sort of like how the VAX 11/750 (or 730) had a knob to point to one of 4 boot device choices and a reset button on the panel which would cause a boot, and/or a switch on the front which would enable auto-boot from power on...

The added value of this boot procedure is that the system can now be booted the authentic way: by starting on an appropriate address in the ROM code. This is especially nice on Blinkenbone and PiDP systems as they can now be booted by a LOAD ADDRSS - START sequence.

What is this ""LOAD ADDRSS - START sequence.""?

As for the HITMISS question, what you implemented didn't actually model the true hardware cache, but merely somehow produced different results from time to time.  Johnny Billquist test on real PDP 11/70 hardware showed a HITMISS register value of 000044.  This value clearly indicates that there are more bits of information/meaning in what it provides that reflect more complicated behaviors on the true hardware cache.  For simh uses.  it would seem sufficient to set the HITMISS register to 1 as a fudge value in the ROM/M9312 device's reset routine if the processor had actual cache (44/60/70).",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,20,https://github.com/simh/simh/pull/1011#issuecomment-792995303,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","@friesga, I see you asking on the simh list about the HITMISS for various systems with KDJ11-A and KDJ11-B boards.  Answers there may be interesting for the curious, but the answers aren't particularly relevant to a M9312 implementation.
Bob Supnik reminded me of the Unibus specificity of the M9312.  Maybe there existed a Qbus ROM boards, which may be relevant to this effort, but not for running the code which specifically was designed for the Unibus systems.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,21,https://github.com/simh/simh/pull/1011#issuecomment-793006354,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","My 9312 implementation indeed has some overlap with the ROM device. (Actually I used the ROM device to check that my approach was feasible). I agree with you that it would be better if there were one implementation for all ROM devices and I certainly would be willing to cooperate in implementing such a solution.



We never really spoke about exactly what device @larsbrinkhoff's ROM device actually simulated and thus never explored the Qbus/Unibus constraints that may have existed with the actual hardware. Maybe this was a M9301, right? In any case, we need to revisit this and also add the additional constraint that either a M9301 OR a M9312 could exist in a system and not both, so it would seem most reasonable that a SET ROM M9312|M9301 would be appropriate.

Agreed.


Our approaches however differ somewhat and it might be a challenge to merge their functionality. My approach for the m9312 implementation was to make its use as easy as possible for the users. I didn't want them having to search for ROM images and having these lying around somewhere and therefore included the ROM code as arrays built into the device (see pdp11_m9312.h in the pull request). I copied that approach from pdp11_xq_bootrom.h.



I believe that the built-in ROM images are absolutely most useful specifically for the reason @friesga states along with the fact that, these things are VERY stable and hardly ever modified (They're ROMs right!). That said, there is also significant flexibility in allowing a developer (or user) to manually load a particular file and use it as a ROM's contents. There are existing cases where this happens in current simulators: The various Qbus VAX simulators support explicitly loading a ROM image before booting the system with a fallback to loading the default (built-in) ROM image if a processor boot is attempted and the ROM hasn't yet been loaded. Something like this should be supported here. Meanwhile, since it is already known that an 11/60 & 11/70 want the B0 ROM, that should be the default when the CPU is one of these and the alternates should be set based on processor type and allow the user to override as desired. It should certainly be easy enough to add a couple of GT40 and/or related ROM's to the set of built-ins which may then only be usable in M9301 mode...

That’s an interesting thought! I already was thinking about some kind of autoconfiguration for the ROMs. That might be challenging as there is just room for the boot code for four or five devices. (most ROMS support one device type, some support two) but I like challenges 😊.


The ROM code is then booted just as in an original system by starting at 173004 (for a start without execution of the diagnostics) or at 173006 (for a start with execution of the diagnostics). The ROM code can also be started at 165744 with a code in the switch register to specify the device and unit to boot from. It all works exactly as documented in the ""M9312 bootstrap/terminator module technical manual"".



You mention the ""switch register"", which the ""M9312 bootstrap/terminator module technical manual"" indicates as a set of switches on the M9312 board. It would seem that this should then be exposed as a simh REGister or at least settable by a SET SWITCH=xxx (without knowing more I'm thinking a simh REG is the best choice). Meanwhile, once such a register exists, how does the code running from ROM access the contents of this switch register?

The switches determine the starting address in the ROM code and that determines the device to boot from. This could perform an auto boot a power up if desired.


The ROM code is then booted just as in an original system by starting at 173004 (for a start without execution of the diagnostics) or at 173006 (for a start with execution of the diagnostics). The ROM code can also be started at 165744 with a code in the switch register to specify the device and unit to boot from. It all works exactly as documented in the ""M9312 bootstrap/terminator module technical manual"".



I was only slightly a PDP11 user a few times and never had to boot one. Are you saying that each time a PDP 11/70 booted someone had to flip a bunch of switches on the system front panel any number of times in order to achieve a boot? There was no way to setup a system that would just boot to some specific device when you powered it on? Sort of like how the VAX 11/750 (or 730) had a knob to point to one of 4 boot device choices and a reset button on the panel which would cause a boot, and/or a switch on the front which would enable auto-boot from power on...

The switches on the M9312 could be used to configure an auto boot on power up from a specific device, but that meant that the system had to boot always from the same device. In practice I never saw that option used and indeed someone “had to flip a bunch of switches on the system front panel any number of times in order to achieve a boot”.


The added value of this boot procedure is that the system can now be booted the authentic way: by starting on an appropriate address in the ROM code. This is especially nice on Blinkenbone and PiDP systems as they can now be booted by a LOAD ADDRSS - START sequence.



What is this ""LOAD ADDRSS - START sequence.""?

That is setting the address to start at in the console switch register, pressing the LOAD ADRESS switch and then pressing the START switch.

As for the HITMISS question, what you implemented didn't actually model the true hardware cache, but merely somehow produced different results from time to time. Johnny Billquist test on real PDP 11/70 hardware showed a HITMISS register value of 000044. This value clearly indicates that there are more bits of information/meaning in what it provides that reflect more complicated behaviors on the true hardware cache. For simh uses. it would seem sufficient to set the HITMISS register to 1 as a fudge value in the ROM/M9312 device's reset routine if the processor had actual cache (44/60/70).

You’re completely right in your observation that my implementation doesn’t actually model a hardware cache, but it does produce a more realistic behaviour than just one fixed value. The value 044 in the HITMISS register indicates a HIT-MISS-MISS-HIT-MISS-MISS sequence in that order and my implementation could yield that result too. But I will be perfectly happen to have a fixed value if that will satisfy all ROM diagnostics.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,22,https://github.com/simh/simh/pull/1011#issuecomment-793123283,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","You mention the ""switch register"", which the ""M9312 bootstrap/terminator module technical manual"" indicates as a set of switches on the M9312 board. It would seem that this should then be exposed as a simh REGister or at least settable by a SET SWITCH=xxx (without knowing more I'm thinking a simh REG is the best choice). Meanwhile, once such a register exists, how does the code running from ROM access the contents of this switch register?

The switches determine the starting address in the ROM code and that determines the device to boot from. This could perform an auto boot a power up if desired.

How does the PDP11 CPU know where to start execution on power-up in an auto-boot case?
Related... Was an auto-boot model available on ALL or only some Unibus systems?


As for the HITMISS question, what you implemented didn't actually model the true hardware cache, but merely somehow produced different results from time to time. Johnny Billquist test on real PDP 11/70 hardware showed a HITMISS register value of 000044. This value clearly indicates that there are more bits of information/meaning in what it provides that reflect more complicated behaviors on the true hardware cache. For simh uses. it would seem sufficient to set the HITMISS register to 1 as a fudge value in the ROM/M9312 device's reset routine if the processor had actual cache (44/60/70).

You’re completely right in your observation that my implementation doesn’t actually model a hardware cache, but it does produce a more realistic behavior than just one fixed value. The value 044 in the HITMISS register indicates a HIT-MISS-MISS-HIT-MISS-MISS sequence in that order and my implementation could yield that result too. But I will be perfectly happen to have a fixed value if that will satisfy all ROM diagnostics.

How do you measure ROM diagnostic satisfaction?  Using the B0 and RL ROMS, hard setting a 11/70 HITMISS to 1 (by changing line 585 in pdp11_cpumod.c to:
*data = 1; //HITMISS;

and starting at 173006 lets the system successfully boot from the RL0 disk.
Hard setting it to 0 causes a CPU HALT at 165554.  Are we expected to see some other sort of error message?
Using the MEM and RL ROMs, hard setting HITMISS to 1 or 0 on an 11/70 runs infinitely without producing output.  Is this expected?
As far as I can tell, the one fixed value seems to produce observably (to a normal user) equivalent results.  Maybe the ROM code is looping through different instructions but that is hardly interesting to a generic user running a simulator.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,23,https://github.com/simh/simh/pull/1011#issuecomment-793448198,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","@markpizz wrote:

We never really spoke about exactly what device @larsbrinkhoff's ROM device actually simulated and thus never explored the Qbus/Unibus constraints that may have existed with the actual hardware. Maybe this was a M9301, right?

My primary concern was the ROM that comes with the VT11 in a GT40.  I don't know if the ROM is built into one of the VT11 boards, or if it's a separate board.  Noel Chiappa usually knows his PDP-11 stuff but his page here doesn't say: https://gunkies.org/wiki/VT11_Graphic_Display_Processor
I didn't have a single ROM type or bus in mind.  The ROMs just occupy a particular address range in the IO page, and the size depends on the file attached.

In any case, we need to revisit this and also add the additional constraint that either a M9301 OR a M9312 could exist in a system and not both

I don't know, but with the proviso that knowledge of PDP-11 hardware is quite weak, I don't see any reason why multiple boards couldn't be installed.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,24,https://github.com/simh/simh/pull/1011#issuecomment-793452370,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","@friesga wrote:

The switches determine the starting address in the ROM code

To clarify, are these switches on the ROM board (jumpers or DIP type switches)?  Hmm, yes I suppose they must be for auto boot.
(General information follows.)  This should not be confused with the front panel switches.  By toggling the switches to an address and pressing LOAD ADDRESS, and next START, you load an address into the PC and has the CPU go from there.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,25,https://github.com/simh/simh/pull/1011#issuecomment-793460851,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","If we are getting down to nitty gritty details or proposing updated ROM configurations, here is my current use case:
set rom enabled
set rom0 address=17766000
at rom0 out/pdp10-ka/bootvt.img
boot rom0

This places the ROM0 socket in the IO page and loads the code from a file.  The file size determines the address range.  BOOT is provided as a convenience but is much like DEPOSIT PC ROM_start_address followed by GO.
A suggested update would be to add SET ROM TYPE=x or SET ROMn TYPE=x as appropriate.  I think this should set the address, size, and contents.  The address could be overridden by using SET ROMn ADDRESS.
...
Now that I'm reading this http://gunkies.org/wiki/M9312_ROM I see a single M9312 type ROM board can have many different memory contents.  So just setting TYPE=M9312 isn't enough.  It seems the M designation is the DEC module, or board?  And it could be fitted with many different ROM parts.  So maybe something like SET ROMn TYPE=M9301-YA or SET ROMn TYPE=23-760A9 (see web page for part number), or SET TYPE=RL02 to be more user friendly.
The M9312 has a jumper to set the address.  SET ROMn JUMPER=x could address that, or SET ROMn ADDRESS explicitly.
The M9302 has a DIP switch, see https://gunkies.org/wiki/M9301_ROM.  SET ROMn SWITCH=x",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,26,https://github.com/simh/simh/pull/1011#issuecomment-793464598,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Here's detailed information about the M9312.  The photo clearly shows four ROM chips and a DIP switch.
https://www.pdp-11.nl/pdp11-34a/cpu/options/bootstrap-info.html
Here's a page about the M9301:
https://fritzm.github.io/m9301-troubles.html",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,27,https://github.com/simh/simh/pull/1011#issuecomment-793505346,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","@friesga, I see you asking on the simh list about the HITMISS for various systems with KDJ11-A and KDJ11-B boards. Answers there may be interesting for the curious, but the answers aren't particularly relevant to a M9312 implementation.


Bob Supnik reminded me of the Unibus specificity of the M9312. Maybe there existed a Qbus ROM boards, which may be relevant to this effort, but not for running the code which specifically was designed for the Unibus systems.

Thanks for your comment Mark, I just want to be sure I understand all intricacies and uses of the HITMISS register. I don't want to contradict Bob, but maybe there is a connection with the M9312 as a11/84 (a UNIBUS-system) was equipped with both a KDJ11-B and M9312 compatible ROMs?",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,28,https://github.com/simh/simh/pull/1011#issuecomment-793521406,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","You mention the ""switch register"", which the ""M9312 bootstrap/terminator module technical manual"" indicates as a set of switches on the M9312 board. It would seem that this should then be exposed as a simh REGister or at least settable by a SET SWITCH=xxx (without knowing more I'm thinking a simh REG is the best choice). Meanwhile, once such a register exists, how does the code running from ROM access the contents of this switch register?





The switches determine the starting address in the ROM code and that determines the device to boot from. This could perform an auto boot a power up if desired.



How does the PDP11 CPU know where to start execution on power-up in an auto-boot case?

That is determined by the switches on the M9312 board.

Related... Was an auto-boot model available on ALL or only some Unibus systems?

As the auto-boot is a M9312 feature and the M9312 is a Unibus bootstrap/terminator module it would be available on all Unibus systems.



As for the HITMISS question, what you implemented didn't actually model the true hardware cache, but merely somehow produced different results from time to time. Johnny Billquist test on real PDP 11/70 hardware showed a HITMISS register value of 000044. This value clearly indicates that there are more bits of information/meaning in what it provides that reflect more complicated behaviors on the true hardware cache. For simh uses. it would seem sufficient to set the HITMISS register to 1 as a fudge value in the ROM/M9312 device's reset routine if the processor had actual cache (44/60/70).





You’re completely right in your observation that my implementation doesn’t actually model a hardware cache, but it does produce a more realistic behavior than just one fixed value. The value 044 in the HITMISS register indicates a HIT-MISS-MISS-HIT-MISS-MISS sequence in that order and my implementation could yield that result too. But I will be perfectly happen to have a fixed value if that will satisfy all ROM diagnostics.



How do you measure ROM diagnostic satisfaction? Using the B0 and RL ROMS, hard setting a 11/70 HITMISS to 1 (by changing line 585 in pdp11_cpumod.c to:


*data = 1; //HITMISS;

and starting at 173006 lets the system successfully boot from the RL0 disk.
Hard setting it to 0 causes a CPU HALT at 165554. Are we expected to see some other sort of error message?

That is the expected behaviour on a cache failure.

Using the MEM and RL ROMs, hard setting HITMISS to 1 or 0 on an 11/70 runs infinitely without producing output. Is this expected?

I'll see if I can reproduce that and check the cause.

As far as I can tell, the one fixed value seems to produce observably (to a normal user) equivalent results. Maybe the ROM code is looping through different instructions but that is hardly interesting to a generic user running a simulator.

I agree. As I pointed out in an earlier post that is thanks to the fact the HITMISS register is read-only and the ROR that is executed on the HITMISS register in the diagnostic code has no effect on the register itself.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,29,https://github.com/simh/simh/pull/1011#issuecomment-793526399,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","The switches determine the starting address in the ROM code



To clarify, are these switches on the ROM board (jumpers or DIP type switches)? Hmm, yes I suppose they must be for auto boot.

You're right, for an auto-boot the address can be set in the switches on the M9312 module.

(General information follows.) This should not be confused with the front panel switches. By toggling the switches to an address and pressing LOAD ADDRESS, and next START, you load an address into the PC and has the CPU go from there.

Completely right! That would be the ""normal"" use case.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,30,https://github.com/simh/simh/pull/1011#issuecomment-793539003,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Now that I'm reading this http://gunkies.org/wiki/M9312_ROM I see a single M9312 type ROM board can have many different memory contents. So just setting TYPE=M9312 isn't enough. It seems the M designation is the DEC module, or board?

The ""M"" indeed indicates DEC module or board.

And it could be fitted with many different ROM parts. So maybe something like SET ROMn TYPE=M9301-YA or SET ROMn TYPE=23-760A9 (see web page for part number), or SET TYPE=RL02 to be more user friendly.

You're right that the M9312 could be fitted with many different ROM's. It had to be equipped with the correct ROMs for an installation. Just one type indication for a M9312 won't suffice, for each socket you have to specify the ROM type it is fitted with (you could leave sockets unfitted). In my implementation that is performed with a ""SET M9312 SOCKET[0-4] = ""  command.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,31,https://github.com/simh/simh/pull/1011#issuecomment-793841368,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","The switches determine the starting address in the ROM code

To clarify, are these switches on the ROM board (jumpers or DIP type switches)? Hmm, yes I suppose they must be for auto boot.

You're right, for an auto-boot the address can be set in the switches on the M9312 module.

For auto booting on power up to work, setting the dip switches on the board to indicate the autoboot device is only part of the problem/solution.  Like I asked earlier, somehow the primary ROM code must be able to read the contents of these switches so that it can dispatch to the right device ROM with a specifier for the unit to actually boot.  It would seem that the contents of these switches somehow exist in the I/O page.  That detail needs to be understood and simulated.


How does the PDP11 CPU know where to start execution on power-up in an auto-boot case?

That is determined by the switches on the M9312 board.

Sounds like a chicken and egg answer here... :-)
There must be 2 things:

something physical configures the system to auto boot vs not.   What/how is that configured?
once auto boot is configured, something must somehow force the PC to point at the ROM and start execution there on power-up (equivalent to the manual LOAD ADDRESS ... START steps previously described).  How is this done?",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,32,https://github.com/simh/simh/pull/1011#issuecomment-793867731,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","Thanks for your comment Mark, I just want to be sure I understand all intricacies and uses of the HITMISS register. I don't want to contradict Bob, but maybe there is a connection with the M9312 as a11/84 (a UNIBUS-system) was equipped with both a KDJ11-B and M9312 compatible ROMs?

I'm not specifically familiar with the details of the PDP11 model differences, but Bob mentioned the following:

More on the HITMISS register.
It's built into the CPU chipset. The cache is expected to operate synchronously with the CPU. There's a pin, MISS, that external logic asserts to ""stretch out"" the data in cycle so that real memory can be accessed. The HITMISS register samples that line on every data read.
By the time the J11 was retired, memory had become so fast, and so dense, that the CPU module could simply be  populated with 4MB of fast RAM, and the ""cache"" never missed.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,33,https://github.com/simh/simh/pull/1011#issuecomment-793896466,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","By the time the J11 was retired, memory had become so fast, and so dense, that the CPU module could simply be populated with 4MB of fast RAM, and the ""cache"" never missed.

Did the ROM self test still work?  If the cache never misses, what does HITMISS contain?",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/markpizz,34,https://github.com/simh/simh/pull/1011#issuecomment-793908149,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","I would guess that it contained 0177777 reflecting hits on every reference, but that is a SWAG.  This value, being non-zero does allow the M9312 boot diag to pass and invoke the device specific boot.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,35,https://github.com/simh/simh/pull/1011#issuecomment-795125091,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","For auto booting on power up to work, setting the dip switches on the board to indicate the autoboot device is only part of the problem/solution. Like I asked earlier, somehow the primary ROM code must be able to read the contents of these switches so that it can dispatch to the right device ROM with a specifier for the unit to actually boot. It would seem that the contents of these switches somehow exist in the I/O page. That detail needs to be understood and simulated.

The M9312 manual states: ""Automatic booting on power-up can be enabled or disabled using the power-up boot enable switch (SI-2). If this switch is set to the OFF position, the processor will execute its power-up routine normally, obtaining a new program counter (PC) from memory location 24 (8) and a new processor status word (PSW) from location 26 (8). When the switch is in the ON position during a power-up, the processor will obtain its new PC and PSW from locations 773024 (8) and 773026 (8) respectively. The address of the Offset Switch Bank (SI-l and SI-3 through SI-10) is 773024 (8) (773224 (8) if the processor traps to 224 (8) on power-up).""

There must be 2 things:
1. something physical configures the system to auto boot vs not.   What/how is that configured?


As described above that is determined by switch  SI-2.

2. once auto boot is configured, something must somehow force the PC to point at the ROM and start execution there on power-up (equivalent to the manual LOAD ADDRESS ... START steps previously described).  How is this done?


That is configured by switches SI-1  and SI3-SI-10. The value of these switches maps to 773024 and the processor loads that adress in the PC. The M9312 technical manual describes the details of this operation.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,36,https://github.com/simh/simh/pull/1011#issuecomment-796857427,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","My primary concern was the ROM that comes with the VT11 in a GT40. I don't know if the ROM is built into one of the VT11 boards, or if it's a separate board. Noel Chiappa usually knows his PDP-11 stuff but his page here doesn't say: https://gunkies.org/wiki/VT11_Graphic_Display_Processor

@larsbrinkhoff  Is the source code of that ROM in machine readable form available somewhere? I found the GT40 Diagnostics Listing and I presume the code listed there is the bootprom code, but it's barely readable and a lot of work to type it over.
If it's available I could include it as a built-in ROM in my m9312/ROM device extension.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/larsbrinkhoff,37,https://github.com/simh/simh/pull/1011#issuecomment-796881140,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","I got the source code from here:
http://www.brouhaha.com/~eric/retrocomputing/dec/gt40/software/bootrom/bootvt.s09

I've recreated the GT40's bootstrap loader ROM source code from the listing in the maintenance manual. It doesn't match the ROMs in my GT40; I'm in the process of disassembling them and will present the results here when I'm finished.

This code is assembled as part of the ITS build.  The result is attached:
bootrom.zip",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,38,https://github.com/simh/simh/pull/1011#issuecomment-797318315,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos","I got the source code from here:
http://www.brouhaha.com/~eric/retrocomputing/dec/gt40/software/bootrom/bootvt.s09

Great! Thanks Lars.",True,{}
simh/simh,https://github.com/simh/simh,1011,2021-02-23T09:09:03Z,2021-04-09T15:53:34Z,2021-04-09T15:53:35Z,CLOSED,False,1037,434,9,https://github.com/friesga,M9312 implementation,15,[],https://github.com/simh/simh/pull/1011,https://github.com/friesga,39,https://github.com/simh/simh/pull/1011#issuecomment-816779471,"Hi Mark,
This is a pull request for implementation of the HITMISS register and the m9312 in the pdp-11. I tried to separate the pull requests but the m9312 implementation is dependent on the HITMISS changes, as they both effect pdp11_sys.c. The changes for the HITMISS register are in pdp11_cpu.c, pdp11_cpumod.h, pdp11_defs.h, pdp11_io.c, pdp11_rh.c en pdp11_sys.c. For the m9312 implementation I added two files: pdp11_m9312.h and pdp11m9312.c, and added a reference to m9312_dev in pdp11_sys.c. Feel free to ask if you have any questions!
Kind regards,
Jos",Closed on issue of the renewed pull request.,True,{}
simh/simh,https://github.com/simh/simh,1013,2021-02-27T13:45:20Z,2021-02-27T13:53:08Z,2021-02-27T18:24:48Z,MERGED,True,60,7,2,https://github.com/larsbrinkhoff,VIDEO: Allow setting alpha blending mode.,1,[],https://github.com/simh/simh/pull/1013,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1013,"As discussed in #935 (comment) and below, here is added support for using the alpha channel in sim_video.","As discussed in #935 (comment) and below, here is added support for using the alpha channel in sim_video.",True,{}
simh/simh,https://github.com/simh/simh,1014,2021-02-27T15:07:14Z,2021-02-28T07:13:23Z,2021-02-28T07:13:23Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1014,https://github.com/psco,1,https://github.com/simh/simh/pull/1014,,,True,{}
simh/simh,https://github.com/simh/simh,1014,2021-02-27T15:07:14Z,2021-02-28T07:13:23Z,2021-02-28T07:13:23Z,CLOSED,False,0,0,0,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,0,[],https://github.com/simh/simh/pull/1014,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1014#issuecomment-787211890,,"Arrgh...  Somehow I missed this warning in Howard's recent commit to this file:
2>s100_mdsad.c
2>..\AltairZ80\s100_mdsad.c(507) : warning C4018: '<' : signed/unsigned mismatch

Since this PR is changing the same file so you want to fix it as part of this PR or another?",True,{}
simh/simh,https://github.com/simh/simh,1015,2021-02-28T05:55:21Z,2022-02-10T20:27:44Z,2022-02-10T20:27:44Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Added emulation of magnetic tapes,0,[],https://github.com/simh/simh/pull/1015,https://github.com/leobru,1,https://github.com/simh/simh/pull/1015,"Added emulation of formatted BESM-6 tapes. Formatting is done automatically when a new file is attached to a device.
Formatting of blank tapes by the O/S does not work yet.","Added emulation of formatted BESM-6 tapes. Formatting is done automatically when a new file is attached to a device.
Formatting of blank tapes by the O/S does not work yet.",True,{}
simh/simh,https://github.com/simh/simh,1015,2021-02-28T05:55:21Z,2022-02-10T20:27:44Z,2022-02-10T20:27:44Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Added emulation of magnetic tapes,0,[],https://github.com/simh/simh/pull/1015,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1015#issuecomment-787494766,"Added emulation of formatted BESM-6 tapes. Formatting is done automatically when a new file is attached to a device.
Formatting of blank tapes by the O/S does not work yet.","Hi Leo,
Several comments about the new besm6_mg:
1 - sum_with_right_carry and log_data are unused functions - no problem just FYI,
2 - in several places, direct references to UNIT->fileref (specifically ferror(u->fileref)) should be avoided.  If there are structure or I/O problems with the internal tape format or problems with accessing the file data, the sim_tape_* API returning non success status should trigger error aborts.  The meaning of success should be contextually flexible (encountering a tape mark or end of media, etc. at appropriate times is success).
3 - in mg_attach, after success return from sim_tape_attach, you should use u->filename rather than cptr as the name of the attached file.  This is appropriate since, depending on flags set in sim_switches the cptr input sim_tape_attach may contain more than the simple file name that actually gets opened.
4 - in mg_attach, the ""goto out;"" could simply be ""break;"" and the out: label wouldn't be needed.  Since this logic is reporting an error, it would seem that rather than calling sim_printf to issue these error messages, you should call s = sim_messagef (SCPE_ARG,. ""%s: filename must contain volume number 1..2047\n"", sim_uname (u)) and then save the newly created tape name, and ""sim_tape_detach(u);"" and then ""remove (saved_name);""  ""return s;"" rather than break.
5 - The subsequent ""if (!sim_quiet && !(sim_switches & SWMASK ('Q')))"" and then sim_printf could be reduced to: ""sim_messagef (SCPE_OK, ""%s: formatting tape volume %d\n"", sim_uname (u), tapeno);""
6 - in mg_attach, the use of the SWMASK('N') bit in sim_switches is a little confusing.  It seems that you are trying to either open an existing tape image, or force newly created tapes to get ""formatted"".  These are reasonable goals, but this logic will allow essentially any already existing file to be attached regardless of whether it has an appropriate name OR if it has appropriate format data at the beginning of the tape.  Maybe a filename check belongs outside the while (1) loop, and the some logic which reads and validates the existing tape formatting information should exist, right?
- Mark",True,{}
simh/simh,https://github.com/simh/simh,1015,2021-02-28T05:55:21Z,2022-02-10T20:27:44Z,2022-02-10T20:27:44Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Added emulation of magnetic tapes,0,[],https://github.com/simh/simh/pull/1015,https://github.com/leobru,3,https://github.com/simh/simh/pull/1015#issuecomment-788586696,"Added emulation of formatted BESM-6 tapes. Formatting is done automatically when a new file is attached to a device.
Formatting of blank tapes by the O/S does not work yet.","Hi Mark,

1 - sum_with_right_carry and log_data are unused functions - no problem just FYI,

I've modeled besm6_mg.c after besm6_disk.c, and forgot to cleanup; will do. sum_with_right_carry is specific to disk formatting.

2 - in several places, direct references to UNIT->fileref (specifically ferror(u->fileref)) should be avoided. If there are structure or I/O problems with the internal tape format or problems with accessing the file data, the sim_tape_* API returning non success status should trigger error aborts. The meaning of success should be contextually flexible (encountering a tape mark or end of media, etc. at appropriate times is success).

Noted; will do.

3 - in mg_attach, after success return from sim_tape_attach, you should use u->filename rather than cptr as the name of the attached file. This is appropriate since, depending on flags set in sim_switches the cptr input sim_tape_attach may contain more than the simple file name that actually gets opened.

Using u->filename may be fine, but for my purposes parsing the exact argument of the attach command will do just as well. I'm not treating it as a hierarchical file name anyway, I only need to find the rightmost sequence of digits in it. And in the (theoretical?) case of versioning filesystems where the canonicalized file name might be appended with a suffix, like a version number in the form of ""semicolon-number"", or ""@YYYY-MM-DD"", or some such, parsing cptr as opposed to u->filename to extract the label number is a must.

4 - in mg_attach, the ""goto out;"" could simply be ""break;"" and the out: label wouldn't be needed. Since this logic is reporting an error, it would seem that rather than calling sim_printf to issue these error messages, you should call s = sim_messagef (SCPE_ARG,. ""%s: filename must contain volume number 1..2047\n"", sim_uname (u)) and then save the newly created tape name, and ""sim_tape_detach(u);"" and then ""remove (saved_name);"" ""return s;"" rather than break.
5 - The subsequent ""if (!sim_quiet && !(sim_switches & SWMASK ('Q')))"" and then sim_printf could be reduced to: ""sim_messagef (SCPE_OK, ""%s: formatting tape volume %d\n"", sim_uname (u), tapeno);""
6 - in mg_attach, the use of the SWMASK('N') bit in sim_switches is a little confusing. It seems that you are trying to either open an existing tape image, or force newly created tapes to get ""formatted"". These are reasonable goals, but this logic will allow essentially any already existing file to be attached regardless of whether it has an appropriate name OR if it has appropriate format data at the beginning of the tape. Maybe a filename check belongs outside the while (1) loop, and the some logic which reads and validates the existing tape formatting information should exist, right?

What would you suggest should happen when a non-empty file not conforming to the SIMH tape format is attached? At the moment, it is treated as an unformatted tape: the OS will attempt to find a label and will fail, thus the unit will be inaccessible.
Allowing to attach existing files with arbitrary names is intentional. The numerical part of the file name is only needed when a new volume is being created. If switches could have arguments, the file name would not need to be parsed, and the attach command would have been either

attach [-E] device filename (here the file must exist with or without -E, otherwise the command will error out)
or
attach -N -L label device filename (discards the existing contents of the file, if any; formats the volume with the label)
or
attach -L label device filename (performs as (1) if the file exists, as (2) otherwise)

Lacking that mechanism, the numerical part of the file name is used.",True,{}
simh/simh,https://github.com/simh/simh,1015,2021-02-28T05:55:21Z,2022-02-10T20:27:44Z,2022-02-10T20:27:44Z,CLOSED,False,0,0,0,https://github.com/leobru,BESM6: Added emulation of magnetic tapes,0,[],https://github.com/simh/simh/pull/1015,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1015#issuecomment-788898961,"Added emulation of formatted BESM-6 tapes. Formatting is done automatically when a new file is attached to a device.
Formatting of blank tapes by the O/S does not work yet.","What would you suggest should happen when a non-empty file not conforming to the SIMH tape format is attached? At the moment, it is treated as an unformatted tape: the OS will attempt to find a label and will fail, thus the unit will be inaccessible.

If the OS is not actually capable of handling useful operations on ""non conforming"" tapes (i.e. those without the format initialized front-end), you should validate that format for pre-existing tapes at attach time so that the operator can immediately know about the error while interacting with SCP.  Otherwise., an arbitrary amount of time can exist between when the attach happens and when some other activity within the running system separately decides to attempt to access the tape.  This validation need not be related to the filename, but looking at the data in your formatting structure you should be able to find it or not.

If switches could have arguments

Ahh...  Switches for tape attach DO have arguments (maybe not particularly useful for your situation), but this is precisely why to access the actual name of the file that has been opened you should parse u->filename which will then have all arguments extracted.

the file name would not need to be parsed, and the attach command would have been either
attach [-E] device filename (here the file must exist with or without -E, otherwise the command will error out)
or
attach -N -L label device filename (discards the existing contents of the file, if any; formats the volume with the label)
or
attach -L label device filename (performs as (1) if the file exists, as (2) otherwise)
Lacking that mechanism, the numerical part of the file name is used.

Well, there is a relatively large set of switches that are meaningful to sim_tape_attach (with more potentially being used in the future).  Currently these are: BCDEFLNVKQVX.  Lets say we reserve some switches for the sim_tape user, or you pick an unused switch name, or you decide that some particular currently used switch would never be useful to a user of your simulator.  Your code could:
1 - see the flag set in sim_switches, note that detail and remove it from sim_switches before calling sim_tape_attach and you would own its interpretation.
2 - If interpreting this switch requires argument data. you can require its use to present arguments in your preferred order.  Note that  general simh argument parsing has all switches specified at the beginning of whatever cptr initially points at followed by each argument that may be implied by the respective switches.  The only place simulator authors encounter this is while parsing argument data in ATTACH commands, but the parsing paradigm is the same across all of SCP.  For example, say a command has switches A, B, and C that have no arguments, but switches D and E have require arguments with E (if specified) coming first.  These commands all follow these rules: and all present an identical sim_switches and cptr when SCP dispatches to the command:
CMD -EDAC E-argument D-argument
CMD -ED -AC E-argument D-argument
CMD -E -D -A -C E-argument D-argument
CMD -ACDE E-argument D-argument

Lets say you pick Z as your flag to specify the label, the code would have:
t_bool label_specified = (sim_switches & SWMASK ('Z') != 0);
char label[CBUFSIZE];

sim_switches &= ~SWMASK ('Z');           /* remove label switch */
if (label_specified)
    cptr = get_glyph (cptr, label, 0);   /* get label */
if ((cptr == NULL) || (*cptr))
    return sim_messagef (SCPE_ARG, ""Missing filename argument\n"");
s = sim_tape_attach (u, cptr);           /* attach with remaining arguments */",True,{}
simh/simh,https://github.com/simh/simh,1016,2021-02-28T07:23:35Z,2021-02-28T10:39:19Z,2021-02-28T10:39:19Z,MERGED,True,2,3,1,https://github.com/psco,AltairZ80: Fix showdata in MDS-AD device,1,[],https://github.com/simh/simh/pull/1016,https://github.com/psco,1,https://github.com/simh/simh/pull/1016,,,True,{}
simh/simh,https://github.com/simh/simh,1018,2021-03-06T09:00:25Z,2021-03-06T13:21:31Z,2021-03-06T13:21:31Z,MERGED,True,1,1,1,https://github.com/larsbrinkhoff,VIDEO: Fix use of uninitialized variable.,1,[],https://github.com/simh/simh/pull/1018,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1018,As per request in email.,As per request in email.,True,{}
simh/simh,https://github.com/simh/simh,1026,2021-03-28T13:40:31Z,2021-04-06T18:20:50Z,2021-04-06T18:20:51Z,CLOSED,False,6,0,1,https://github.com/Gorggg,makefile: Fix building with musl libc,1,[],https://github.com/simh/simh/pull/1026,https://github.com/Gorggg,1,https://github.com/simh/simh/pull/1026,"Linux systems with musl libc do not print anything upon invocation of ldconfig -p, making it so that the existing method of determining library search paths did not turn up paths that possibly contained SDL or libpcap libraries. This fixes such behaviour by automatically adding /lib and /usr/lib as library paths if they weren't found with ldconfig.
Thank you for looking at this. If there is anything I can clarify or improve, please let me know.","Linux systems with musl libc do not print anything upon invocation of ldconfig -p, making it so that the existing method of determining library search paths did not turn up paths that possibly contained SDL or libpcap libraries. This fixes such behaviour by automatically adding /lib and /usr/lib as library paths if they weren't found with ldconfig.
Thank you for looking at this. If there is anything I can clarify or improve, please let me know.",True,{}
simh/simh,https://github.com/simh/simh,1026,2021-03-28T13:40:31Z,2021-04-06T18:20:50Z,2021-04-06T18:20:51Z,CLOSED,False,6,0,1,https://github.com/Gorggg,makefile: Fix building with musl libc,1,[],https://github.com/simh/simh/pull/1026,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1026#issuecomment-808916346,"Linux systems with musl libc do not print anything upon invocation of ldconfig -p, making it so that the existing method of determining library search paths did not turn up paths that possibly contained SDL or libpcap libraries. This fixes such behaviour by automatically adding /lib and /usr/lib as library paths if they weren't found with ldconfig.
Thank you for looking at this. If there is anything I can clarify or improve, please let me know.","You don't point at a system setup which actually does this, so I can't look at details.  Please elaborate on where this problem is actually observed.
Why is this a simh  problem and not a musl problem?  Linux link libraries are universally referenced specifically by the ldconfg paradigm.",True,{}
simh/simh,https://github.com/simh/simh,1026,2021-03-28T13:40:31Z,2021-04-06T18:20:50Z,2021-04-06T18:20:51Z,CLOSED,False,6,0,1,https://github.com/Gorggg,makefile: Fix building with musl libc,1,[],https://github.com/simh/simh/pull/1026,https://github.com/Gorggg,3,https://github.com/simh/simh/pull/1026#issuecomment-809013626,"Linux systems with musl libc do not print anything upon invocation of ldconfig -p, making it so that the existing method of determining library search paths did not turn up paths that possibly contained SDL or libpcap libraries. This fixes such behaviour by automatically adding /lib and /usr/lib as library paths if they weren't found with ldconfig.
Thank you for looking at this. If there is anything I can clarify or improve, please let me know.","Thank you for your reply.

1. You don't point at a system setup which actually does this, so I can't look at details.  Please elaborate on where this problem is actually observed.


I first found this issue on Void Linux x86_64 musl. It is also present on Alpine Linux 3.13.3 x86_64.

2. Why is this a simh  problem and not a musl problem?  Linux link libraries are universally referenced specifically by the ldconfg paradigm.


In glibc-based systems, ldconfig is provided by glibc. Musl itself doesn't provide an ldconfig as described here: https://wiki.musl-libc.org/faq.html.
I'm sorry I can't speak to the full rationale behind this design decision. Various distributions provide a non-fully-featured ldconfig by symlinking to /bin/true or providing a script that can add library paths, but none of those that I have seen support the -p option. I wasn't able to find references to ldconfig in either the POSIX specifications or the Linux Standard Base, and the ldconfig implementations present on the BSDs don't support -p either. From what I can tell, ldconfig -p seems to be a glibc-specific feature, if you find that relevant.",True,{}
simh/simh,https://github.com/simh/simh,1026,2021-03-28T13:40:31Z,2021-04-06T18:20:50Z,2021-04-06T18:20:51Z,CLOSED,False,6,0,1,https://github.com/Gorggg,makefile: Fix building with musl libc,1,[],https://github.com/simh/simh/pull/1026,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1026#issuecomment-814339182,"Linux systems with musl libc do not print anything upon invocation of ldconfig -p, making it so that the existing method of determining library search paths did not turn up paths that possibly contained SDL or libpcap libraries. This fixes such behaviour by automatically adding /lib and /usr/lib as library paths if they weren't found with ldconfig.
Thank you for looking at this. If there is anything I can clarify or improve, please let me know.",Fixed in master branch with slightly modified solution.,True,{'THUMBS_UP': ['https://github.com/Gorggg']}
simh/simh,https://github.com/simh/simh,1027,2021-03-29T10:40:17Z,2021-03-29T19:00:26Z,2021-03-30T06:01:18Z,MERGED,True,84,335,12,https://github.com/larsbrinkhoff,display: Add vector stroke primitive,3,[],https://github.com/simh/simh/pull/1027,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1027,"I suggest to add to the display library a vector stroke primitive, similar to the diplay_point API.
CC @Isysxp @philbudne","I suggest to add to the display library a vector stroke primitive, similar to the diplay_point API.
CC @Isysxp @philbudne",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,1,https://github.com/simh/simh/pull/1030,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1030#issuecomment-816844069,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Feedback:

The build fails on VS2008 due to the use of C language features not supported on that C dialect (variable declarations that aren't done at the beginning of a code block (right after a {):

1>Compiling...
1>pdp11_rom.c
1>..\PDP11\pdp11_rom.c(220) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(220) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(220) : error C2143: syntax error : missing ')' before 'type'
1>..\PDP11\pdp11_rom.c(220) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(220) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(220) : warning C4552: '<' : operator has no effect; expected operator with side-effect
1>..\PDP11\pdp11_rom.c(220) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(220) : error C2059: syntax error : ')'
1>..\PDP11\pdp11_rom.c(221) : error C2143: syntax error : missing ';' before '{'
1>..\PDP11\pdp11_rom.c(222) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(225) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(226) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(235) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(238) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(251) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(254) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(261) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(264) : error C2065: 'module_number' : undeclared identifier
1>..\PDP11\pdp11_rom.c(267) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(267) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(267) : error C2143: syntax error : missing ')' before 'type'
1>..\PDP11\pdp11_rom.c(267) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(267) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(267) : error C2223: left of '->image' must point to struct/union
1>..\PDP11\pdp11_rom.c(267) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(267) : error C2143: syntax error : missing ';' before ')'
1>..\PDP11\pdp11_rom.c(359) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(362) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(364) : error C2065: 'buffer' : undeclared identifier
1>..\PDP11\pdp11_rom.c(364) : warning C4047: '!=' : 'int' differs in levels of indirection from 'void *'
1>..\PDP11\pdp11_rom.c(365) : error C2065: 'buffer' : undeclared identifier
1>..\PDP11\pdp11_rom.c(365) : warning C4047: 'function' : 'char *' differs in levels of indirection from 'int'
1>..\PDP11\pdp11_rom.c(365) : warning C4024: 'vsprintf' : different types for formal and actual parameter 1
1>..\PDP11\pdp11_rom.c(367) : error C2065: 'buffer' : undeclared identifier
1>..\PDP11\pdp11_rom.c(367) : warning C4047: 'return' : 'char *' differs in levels of indirection from 'int'
1>..\PDP11\pdp11_rom.c(376) : error C2061: syntax error : identifier 'rom_reset'
1>..\PDP11\pdp11_rom.c(376) : error C2059: syntax error : ';'
1>..\PDP11\pdp11_rom.c(376) : error C2059: syntax error : 'type'
1>..\PDP11\pdp11_rom.c(534) : error C2275: 'module' : illegal use of this type as an expression
1>        c:\users\mark\documents\simh-45d8c90\pdp11\pdp11_rom.h(91) : see declaration of 'module'
1>..\PDP11\pdp11_rom.c(534) : error C2065: 'modptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(535) : error C2275: 'rom_socket' : illegal use of this type as an expression
1>        c:\users\mark\documents\simh-45d8c90\pdp11\pdp11_rom.h(63) : see declaration of 'rom_socket'
1>..\PDP11\pdp11_rom.c(535) : error C2065: 'socketptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(535) : error C2065: 'modptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(535) : error C2223: left of '->sockets' must point to struct/union
1>..\PDP11\pdp11_rom.c(538) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(538) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(538) : error C2143: syntax error : missing ')' before 'type'
1>..\PDP11\pdp11_rom.c(538) : error C2143: syntax error : missing ';' before 'type'
1>..\PDP11\pdp11_rom.c(538) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(538) : error C2223: left of '->image' must point to struct/union
1>..\PDP11\pdp11_rom.c(538) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(538) : error C2143: syntax error : missing ';' before ')'
1>..\PDP11\pdp11_rom.c(546) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(546) : error C2223: left of '->image' must point to struct/union
1>..\PDP11\pdp11_rom.c(547) : error C2065: 'socketptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(547) : error C2223: left of '->base_address' must point to struct/union
1>..\PDP11\pdp11_rom.c(548) : error C2065: 'socketptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(548) : error C2223: left of '->base_address' must point to struct/union
1>..\PDP11\pdp11_rom.c(548) : error C2065: 'socketptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(548) : error C2223: left of '->size' must point to struct/union
1>..\PDP11\pdp11_rom.c(549) : error C2065: 'socketptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(549) : error C2223: left of '->size' must point to struct/union
1>..\PDP11\pdp11_rom.c(553) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(553) : error C2223: left of '->rom_attached' must point to struct/union
1>..\PDP11\pdp11_rom.c(554) : error C2065: 'romptr' : undeclared identifier
1>..\PDP11\pdp11_rom.c(554) : error C2223: left of '->rom_attached' must point to struct/union
1>..\PDP11\pdp11_rom.c(562) : error C2059: syntax error : 'return'
1>..\PDP11\pdp11_rom.c(564) : error C2059: syntax error : 'default'
1>..\PDP11\pdp11_rom.c(566) : error C2059: syntax error : '}'


Tabs in source code files need to be expanded to spaces
I see you explicitly messing with the uname field of the UNIT structure in rom_reset.  There are two reasons you shouldn't be doing this: 1) SCP exposes an explicit API to set the uname field to a non default value sim_set_uname().  2) The value you are setting uname to is precisely what the default value for the ROM device's uname will be if you don't set it.
The only remaining use of buffer_printf() would then be equivalent to strdup(), so buffer_printf() isn't needed.
Even though the changes you're making to this module are extensive, the project rule is that when modifying an existing module, you are expected to follow the indentation and brace indent styles already in place in the module that is being changed.  This also goes for the """" in pointer declarations (i.e. ""char "" vs ""char "").  Likewise comment characters should follow what's already in use (/ */ vs //).  When you create new modules, you get to follow your own favorite convention.
rom_wr() should probably always return SCPE_NXM
Building with gcc produces these:

In file included from ./PDP11/pdp11_m9312.h:35,
                 from ./PDP11/pdp11_rom.c:25:
./PDP11/pdp11_rom.h:109:8: warning: extra tokens at end of #endif directive [-Wendif-labels]
  109 | #endif PDP11_ROM_H
      |        ^~~~~~~~~~~
./PDP11/pdp11_rom.c: In function ‘rom_show_module’:
./PDP11/pdp11_rom.c:289:28: warning: format ‘%s’ expects argument of type ‘char *’, but argument 3 has type ‘module *’ {aka ‘struct <anonymous> *’} [-Wformat=]
  289 |  fprintf (f, ""module type %s"", (module*) module_list[selected_module]->name);
      |                           ~^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                            |   |
      |                            |   module * {aka struct <anonymous> *}
      |                            char *

Why is that cast happening?

rom_reset() should do the sanity check for rom compatibility with CPU type since it will always be called whenever the simulator's CPU type is changed.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,3,https://github.com/simh/simh/pull/1030#issuecomment-817873712,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Thanks for your swift feedback. Regarding your first point. I made a clean install of VS2008 and tried to compile simh/PDP11 with the compiler provided by that version. This results in literally thousands of errors (8058 to be precise), similar to the ones below.
1>------ Rebuild All started: Project: PDP11, Configuration: Debug Win32 ------
1>Deleting intermediate and output files for project 'PDP11', configuration 'Debug|Win32'
1>Check for required build dependencies & git commit id
1>Library support for Visual Studio 2008 is available
1>Compiling...
1>udp.c
1>C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(171) : error C2008: '$' : unexpected in macro definition
1>C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(172) : error C2008: '$' : unexpected in macro definition
1>C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(172) : warning C4005: '__' : macro redefinition
1>        C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(171) : see previous definition of '__'
1>C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(173) : error C2008: '$' : unexpected in macro definition
1>C:\Program Files\Microsoft SDKs\Windows\v6.0A\include\specstrings.h(173) : warning C4005: '__' : macro redefinition

How is the code expected to compile using VS2008?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1030#issuecomment-817905871,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Did you install VS2008 using the instructions in the ""Visual Studio Projects\0ReadMe_Projects.txt"" file?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,5,https://github.com/simh/simh/pull/1030#issuecomment-817920655,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Did you install VS2008 using the instructions in the ""Visual Studio Projects\0ReadMe_Projects.txt"" file?

Yes, I did. I removed all parts of previous VS installations, downloaded VS 2008 from the provided link, installed VCExpress from that DVD, opened the PDP11.vcproj file and selected ""Rebuild PDP11"".",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1030#issuecomment-817977995,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","I'm pretty sure I had told you when you first came along with your first pull request, that VS2008 could readily coexist with newer Visual Studio versions.  I don't know what you did to ""removed all parts of previous VS installations"", but that certainly wasn't necessary.
Looking back, I specifically said:

Please avoid committing changes to simh.sln since that file gets modified by the newer Visual Studio versions when they convert the VS2008 sln and proj files. Committing that breaks things for VS2008. We don't maintain other VS version details in the repo since they can all be derived dynamically from the VS2008 info. ""Visual Studio Projects/0ReadMe_Projects.txt"" describes where you can find the installer for VS2008 which installs cleanly on all Windows environments since Vista. Use VS2008 or your current version, but don't commit simh.sln.

I didn't mention coexistence, but I also never suggested that you should try to remove newer versions or pieces of it as well...  Sorry.  I'll update the 0ReadMe_Projects.txt.
I just tested this on a Virtual Machine I've got with Windows 10, and Visual Studio 2019 installed.  I merely installed VS2008 precisely as mentioned in the 0ReadMe_Projects.txt file.  I was prompted to install a required older .NET version which went smoothly, and then the rest of VS2008 installed.  Once it had been installed I opened the VS2008 Express app and opened the PDP11.vcproj project just as you said, and did a Rebuild and it compiled just fine.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,7,https://github.com/simh/simh/pull/1030#issuecomment-817998486,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Interesting. I started doing more or less the same. I first installed VS 2008 alongside VS 2019 but could not select VS2008 as Target Platform. In Use native multi-targeting in Visual Studio to build old projects is stated that I should also install VS2010. That's what I did and then I could select VS2008 as Target Platform. Building then produced errors similar to the ones in my previous comment. That's the reason I decided to start afresh with VS2008.

I'm pretty sure I had told you when you first came along with your first pull request, that VS2008 could readily coexist with newer Visual Studio versions. I don't know what you did to ""removed all parts of previous VS installations"", but that certainly wasn't necessary.
Looking back, I specifically said:

Please avoid committing changes to simh.sln since that file gets modified by the newer Visual Studio versions when they convert the VS2008 sln and proj files. Committing that breaks things for VS2008. We don't maintain other VS version details in the repo since they can all be derived dynamically from the VS2008 info. ""Visual Studio Projects/0ReadMe_Projects.txt"" describes where you can find the installer for VS2008 which installs cleanly on all Windows environments since Vista. Use VS2008 or your current version, but don't commit simh.sln.


I did reread that post before I started my action to resolve the issue.

I didn't mention coexistence, but I also never suggested that you should try to remove newer versions or pieces of it as well... Sorry. I'll update the 0ReadMe_Projects.txt.

I don't blame you at all and I appreciate your comments and your help. It was entirely my own decision to try to start with a clean installation.

I just tested this on a Virtual Machine I've got with Windows 10, and Visual Studio 2019 installed. I merely installed VS2008 precisely as mentioned in the 0ReadMe_Projects.txt file. I was prompted to install a required older .NET version which went smoothly, and then the rest of VS2008 installed. Once it had been installed I opened the VS2008 Express app and opened the PDP11.vcproj project just as you said, and did a Rebuild and it compiled just fine.

Curious. Clearly our systems have some kind of difference.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,8,https://github.com/simh/simh/pull/1030#issuecomment-818024450,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Interesting. I started doing more or less the same. I first installed VS 2008 alongside VS 2019 but could not select VS2008 as Target Platform. In Use native multi-targeting in Visual Studio to build old projects is stated that I should also install VS2010. That's what I did and then I could select VS2008 as Target Platform. Building then produced errors similar to the ones in my previous comment. That's the reason I decided to start afresh with VS2008.

VS versions after VS2008 convert the VS2008 projects (which have a .vcproj extension) to later versions which have a .vcxproj extension leaving the .vcproj files unmodified.  The simh.sln file is changed and can't be opened directly from the VS2008 GUI, but the original (unmodified) .vcproj files can be opened directly by VS2008.  VS2008 has no knowledge of multi-targeting, so I've no idea what you may have been doing which prompted you about this.  On Windows 10 systems, the VS2008 Express application is found in the ""Microsoft Visual C++ 2008 Express Edition"" folder of the Start Menu and is called ""Microsoft Visual C++ 2008 Express Edition"".  The newer VS versions have different names and are found directly in the Start Menu with names like ""Visual Studio XXXX"" where XXXX is 2019 or some other year.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,9,https://github.com/simh/simh/pull/1030#issuecomment-818355126,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Try cloning https://github.com/simh/simh into a different folder and then ONLY use VS2008 to open the simh.sln file in that directory and build the PDP11 simulator.  If that works, then you've got a useful VS2008 and something about things in your other directory has been mangled.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,10,https://github.com/simh/simh/pull/1030#issuecomment-818545340,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","I managed to get it working. An important point is that I had to open Simh.sln and not just PDP11.vcproj. And a restart was probably useful.
I now have VS2019 en VS2008 side by side. I can build simh from VS2008 and in VS2019 I can select VS2008 as Target Platform (in the project properties) and build it the same way.
Once again, thanks for your support. I'll come back your other remarks later.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,11,https://github.com/simh/simh/pull/1030#issuecomment-818955054,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Additional Comments:
 * As the iodispR[] entries for the address range are not nullified when the
 * when build_ubus_tab() is called with a nullified pointer to the read function,
 * this function can be called while the image is detached. Therefore we have to
 * check if the read access is valid.

The verbiage about build_ubus_tab not nulliifying this is not true anymore.  Please fix the comments lest someone think this was true.
Likewise for this:
/*
 * Detach file or built in image from unit.
 * Note that although the pointer to the read function in dib->rd is 
 * nullified, build_ubus_tab() does not clear the iodispR[] entries.
 */
t_stat rom_detach (UNIT *uptr)

For now, you should pull in (merge) the current state of the master branch to pick up the build_ubus_tab() fix.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,12,https://github.com/simh/simh/pull/1030#issuecomment-819405802,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Feedback:


1. The build fails on VS2008 due to the use of C language features not supported on that C dialect (variable declarations that aren't done at the beginning of a code block (right after a {):


Solved.

2. Tabs in source code files need to be expanded to spaces


Adapted.

3. I see you explicitly messing with the uname field of the UNIT structure in rom_reset.  There are two reasons you shouldn't be doing this: 1) SCP exposes an explicit API to set the uname field to a non default value sim_set_uname().  2) The value you are setting uname to is precisely what the default value for the ROM device's uname will be if you don't set it.


This is a remnant of the previous implementation when the units were called “sockets”. A function with a formatting string seemed more useful than the fixed string parameter of sim_set_uname.

4. The only remaining use of buffer_printf() would then be equivalent to strdup(), so buffer_printf() isn't needed.


Well spotted.

5. Even though the changes you're making to this module are extensive, the project rule is that when modifying an existing module, you are expected to follow the indentation and brace indent styles already in place in the module that is being changed.  This also goes for the ""_"" in pointer declarations (i.e. ""char _"" vs ""char_ "").  Likewise comment characters should follow what's already in use (/_ */ vs //).  When you create new modules, you get to follow your own favorite convention.


I would suggest to introduce a project-wide editorconfig to achieve a consistent code styling throughout the entire code base, independent of history and personal taste.

6. rom_wr() should probably always return SCPE_NXM


An “operation not allowed” error might be more appropriate error as the ROM certainly is in the I/O address space, but such an error code currently is not available. I'll return an SCPE_NXM for now.

7. Building with gcc produces these:


Corrected.

Why is that cast happening?

That’s probably a copy/paste error. Corrected.

8. rom_reset() should do the sanity check for rom compatibility with CPU type since it will always be called whenever the simulator's CPU type is changed.


Great tip! Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,13,https://github.com/simh/simh/pull/1030#issuecomment-820387223,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Making progress!
Additional Feedback:

You've reformatted things and removed tabs.  That's good, but you're not yet conformant to the style that existed previously.  Specifically:
a) Code within functions starts in column 1 not one tab stop in.
b) Most open braces (for array/structure declarations, and if/for/while blocks have the brace start on the if/for/while line and the closing brace is indented and aligns with last line in the code block enclosed by the braces.
c) In general, there usually is a blank line after variable declarations.
The ROM help should spell out more about each of the potential ""known"" ROM socket types, and give several alternate examples that may be useful.
The MTAB action routines should leverage sim_messagef() for the sake of clarity whenever a non-success status is returned.  i.e. at the end of rom_set_module() you might have:
return sim_messagef (SCPE_ARG, ""Module Type \""%s\"" not found.\n"", cptr);
Similarly for other failure returns.  SCPE_INVSW is an error relating to SCP command switches (-A -B -X, etc.), and not related to hardware switches that may exist in your device.  In this context, SCPE_ARG would be appropriate along with explanatory text via sim_messagef().
The rom structure should probably have a description field which contains a short description of what the particular rom code does, and this should be output by the SHOW ROM and possibly be listed in the help output.
ROM_UNIT_INIT should either leverage a pre-existing UDATA (if it is useful), OR the members of the DEVICE UNIT array should each be initialized by code in the DEVICE reset routine.  This is necessary since the UNIT structure may change and we wouldn't want such a change to break your code.  The initialization code in the reset routine can leverage a static local variable to record that the initialization has been done.  I recently did stuff similar to this in the TD device td_reset routine to properly describe REGister variables that didn't have static initializers.
The use/existence of rom_wr() should depend on how real hardware behaved when an instruction attempted to write to ROM addresses.  The possibilities are:
a) Change nothing and return success.
b) Change nothing and trap as things would referencing non existing memory (This might be achieved by not even having a rom_wr() routine defined and leaving its value in the DIB always NULL, or it might require you to return SCPE_NXM).
That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.
Now that the ROM contents are memory resident, what are your thoughts about the various switches on the M9312 board which influence autoboot and which of the several bootable ROM slots is used to boot?  I have some ideas, but what are you thinking?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/larsbrinkhoff,14,https://github.com/simh/simh/pull/1030#issuecomment-820440244,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Now that the ROM contents are memory resident

I read the commits some time ago to verify contents loaded from file was still possible.  I hope it remains so!",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,15,https://github.com/simh/simh/pull/1030#issuecomment-820988078,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","I read the commits some time ago to verify contents loaded from file was still possible. I hope it remains so!

Hi Lars, don't worry, loading ROM contents from a file will remain possible. The original behaviour of the ROM device is the default functionality.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/larsbrinkhoff,16,https://github.com/simh/simh/pull/1030#issuecomment-820990429,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Great, thanks!",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,17,https://github.com/simh/simh/pull/1030#issuecomment-821823452,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Additional Feedback:


1. You've reformatted things and removed tabs.  That's good, but you're not yet conformant to the style that existed previously.  Specifically:
   a) Code within functions starts in column 1 not one tab stop in.


I'm afraid that coding style is a no-go area for me. It makes the code unreadable. Perhaps we can compromise on this. For the time being - until the moment you're ready to merge my additions - I keep my formatting intact. At that moment I will create a clang-format style that meets your demands and I will format the code than according to that style.

2. The ROM help should spell out more about each of the potential ""known"" ROM socket types, and give several alternate examples that may be useful.


That will result in a very long help text, but in combination with your point 4 something useful could be created. I also wrote a draft text for inclusion in the ""PDP-11 Simulator Usage"" that explains the details of ROM configuration. What is the procedure to get that text included?

3. The MTAB action routines should leverage sim_messagef() for the sake of clarity whenever a non-success status is returned.  i.e. at the end of rom_set_module() you might have:
   `return sim_messagef (SCPE_ARG, ""Module Type \""%s\"" not found.\n"", cptr);`


Great tip! I'll check that out!

   Similarly for other failure returns.  SCPE_INVSW is an error relating to SCP command switches (-A -B -X, etc.), and not related to hardware switches that may exist in your device.  In this context, SCPE_ARG would be appropriate along with explanatory text via sim_messagef().


Ok, thanks!

4. The rom structure should probably have a description field which contains a short description of what the particular rom code does, and this should be output by the SHOW ROM and possibly be listed in the help output.


Sounds as a useful idea, I'll see what I can do.

5. ROM_UNIT_INIT should either leverage a pre-existing UDATA (if it is useful), OR the members of the DEVICE UNIT array should each be initialized by code in the DEVICE reset routine.  This is necessary since the UNIT structure may change and we wouldn't want such a change to break your code.  The initialization code in the reset routine can leverage a static local variable to record that the initialization has been done.  I recently did stuff similar to this in the TD device td_reset routine to properly describe REGister variables that didn't have static initializers.


Thanks for your explanation. I didn't realize that that was the idea behind the UDATA definition. I'll adapt the code.

6. The use/existence of rom_wr() should depend on how real hardware behaved when an instruction attempted to write to ROM addresses. 


As you probably read in the simh mailing list, SCPE_NXM is the correct error code.

   That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.


Hm, I'm not fond of that idea. In my humble opinion simh should reflect as much as possible and useful the original hardware. ROM could definitely not be written and I wouldn't like to introduce a functionality that isn't present in the real hardware. Someone hacking at ROM code could change the ROM file and - using the BLANK module - attach it to the ROM device.

7. Now that the ROM contents are memory resident, what are your thoughts about the various switches on the M9312 board which influence autoboot and which of the several bootable ROM slots is used to boot?  I have some ideas, but what are you thinking?


My appraoch would be:

Implement a powerfail/powerup command. This command should be executable while the simulator is running. I'm not sure how that could be accomplished,
Execution of this command performs a ""setTRAP (TRAP_PWRFL)"", or - if the m9312 is selected - a setTRAP (773024).
I'm curious hearing your ideas.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,18,https://github.com/simh/simh/pull/1030#issuecomment-821872166,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","1. You've reformatted things and removed tabs.  That's good, but you're not yet conformant to the style that existed previously.  Specifically:
   a) Code within functions starts in column 1 not one tab stop in.


I'm afraid that coding style is a no-go area for me. It makes the code unreadable. Perhaps we can compromise on this. For the time being - until the moment you're ready to merge my additions - I keep my formatting intact. At that moment I will create a clang-format style that meets your demands and I will format the code than according to that style.

If you want to setup an automatic tool to do this, that's fine.  I'd be just as happy to tell you that when we're done and actually ready for final merge I'll be reformatting the ROM code by hand which will probably take less time than defining the clang-format style,  The demands are based merely on consistency when modifying existing code.  Like I said previously, you get to define the style in completely new modules (as long as you're self consistent within those modules).


2. The ROM help should spell out more about each of the potential ""known"" ROM socket types, and give several alternate examples that may be useful.


That will result in a very long help text, but in combination with your point 4 something useful could be created. I also wrote a draft text for inclusion in the ""PDP-11 Simulator Usage"" that explains the details of ROM configuration. What is the procedure to get that text included?

There is absolutely no problem with arbitrarily long help text.  The real goal is to have everything that historically was in the PDP-11 Simulator Usage document be directly available in help without the need for external documents.  Some future version of the help system may then produce the external document directly from the available internal help.  Please explore the current help and point me at things which may be missing in some devices and I'll certainly add it.


6. The use/existence of rom_wr() should depend on how real hardware behaved when an instruction attempted to write to ROM addresses. 


As you probably read in the simh mailing list, SCPE_NXM is the correct error code.

True, I haven't looked closely, but that may actually be what happens if you merely set the DIB wr field as NULL rather than even having a rom_wr() routine...


   That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.


Hm, I'm not fond of that idea. In my humble opinion simh should reflect as much as possible and useful the original hardware. ROM could definitely not be written and I wouldn't like to introduce a functionality that isn't present in the real hardware. Someone hacking at ROM code could change the ROM file and - using the BLANK module - attach it to the ROM device.

We've got other simulators with ROM functionality that was usefully modified by DEPOSIT.  In this case, the ROM variants existed in the original sold systems which differed by a single byte.  This byte was used by the ROM to configure what the system answered to the ""what type of system is this a server or a multi-user system, which then had different software licenses"".
In any case, the simulator providing a means of depositing to ROM (at the SCP interface via the DEPOSIT command) absolutely doesn't veer from how the real hardware worked since the real hardware never provided a SCP interface.  This would be more akin to a hardware in circuit emulator which never existed for this system (I don't think).


7. Now that the ROM contents are memory resident, what are your thoughts about the various switches on the M9312 board which influence autoboot and which of the several bootable ROM slots is used to boot?  I have some ideas, but what are you thinking?


My appraoch would be:

Implement a powerfail/powerup command. This command should be executable while the simulator is running. I'm not sure how that could be accomplished,
Execution of this command performs a ""setTRAP (TRAP_PWRFL)"", or - if the m9312 is selected - a setTRAP (773024).
I'm curious hearing your ideas.


Well, I haven't looked closely at how this stuff was actually implemented in the M9312, but on your first pull request you had said:


For auto booting on power up to work, setting the dip switches on the board to indicate the autoboot device is only part of the problem/solution. Like I asked earlier, somehow the primary ROM code must be able to read the contents of these switches so that it can dispatch to the right device ROM with a specifier for the unit to actually boot. It would seem that the contents of these switches somehow exist in the I/O page. That detail needs to be understood and simulated.

The M9312 manual states: ""Automatic booting on power-up can be enabled or disabled using the power-up boot enable switch (SI-2). If this switch is set to the OFF position, the processor will execute its power-up routine normally, obtaining a new program counter (PC) from memory location 24 (8) and a new processor status word (PSW) from location 26 (8). When the switch is in the ON position during a power-up, the processor will obtain its new PC and PSW from locations 773024 (8) and 773026 (8) respectively. The address of the Offset Switch Bank (SI-l and SI-3 through SI-10) is 773024 (8) (773224 (8) if the processor traps to 224 (8) on power-up).""

There must be 2 things:
1. something physical configures the system to auto boot vs not.   What/how is that configured?


As described above that is determined by switch  SI-2.

2. once auto boot is configured, something must somehow force the PC to point at the ROM and start execution there on power-up (equivalent to the manual LOAD ADDRESS ... START steps previously described).  How is this done?


That is configured by switches SI-1  and SI3-SI-10. The value of these switches maps to 773024 and the processor loads that adress in the PC. The M9312 technical manual describes the details of this operation.

When in M9312 mode, the ROM needs to have DIB structures which respond to the addresses you mention which contain config info.  The ROM device should probably have MTAB entries which specify Auto booting and the other switches.  These would be simh REGisters which will then persist across SAVE/RESTORE.
Rather than creating a new command (powerfail/powerup as you suggest), we leverage the existing command set and fill in a little extra stuff.  Specifically, we can add a BOOT routine to PDP11 CPU device.  This routine will look for a ROM device (which may not be built in but is easily found by walking the sim_devices array), and if it is found, will dispatch to the ROM boot routine which will then look at the mode (confirming M9312) and the M9312 switches and start things running from there.  If the ROM isn't found, or M9312 mode isn't reasonably configured, then these boot routines return SCPE_NOFNC.
Thus:
    sim> BOOT CPU 
or equivalently since the CPU is the default device
    sim> BOOT

will serve...

BTW, I recall that the M9312 has a total of 5 sockets, right?  How does the current code handle this?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,19,https://github.com/simh/simh/pull/1030#issuecomment-826057078,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","1. You've reformatted things and removed tabs.  That's good, but you're not yet conformant to the style that existed previously.  Specifically:
   a) Code within functions starts in column 1 not one tab stop in.


I'm afraid that coding style is a no-go area for me. It makes the code unreadable. Perhaps we can compromise on this. For the time being - until the moment you're ready to merge my additions - I keep my formatting intact. At that moment I will create a clang-format style that meets your demands and I will format the code than according to that style.

If you want to setup an automatic tool to do this, that's fine. I'd be just as happy to tell you that when we're done and actually ready for final merge I'll be reformatting the ROM code by hand which will probably take less time than defining the clang-format style, The demands are based merely on consistency when modifying existing code. Like I said previously, you get to define the style in completely new modules (as long as you're self consistent within those modules).

Great, thanks in advance!



2. The ROM help should spell out more about each of the potential ""known"" ROM socket types, and give several alternate examples that may be useful.


That will result in a very long help text, but in combination with your point 4 something useful could be created. I also wrote a draft text for inclusion in the ""PDP-11 Simulator Usage"" that explains the details of ROM configuration. What is the procedure to get that text included?

There is absolutely no problem with arbitrarily long help text. The real goal is to have everything that historically was in the PDP-11 Simulator Usage document be directly available in help without the need for external documents. Some future version of the help system may then produce the external document directly from the available internal help. Please explore the current help and point me at things which may be missing in some devices and I'll certainly add it.

I agree with you that having documentation in the application itself is to be preferred over having documentation in an external document and I therefore integrated my texts in the HELP system. This was quite a job and took some time. I hope the structure and contents of the texts are clear.



6. The use/existence of rom_wr() should depend on how real hardware behaved when an instruction attempted to write to ROM addresses. 


As you probably read in the simh mailing list, SCPE_NXM is the correct error code.

True, I haven't looked closely, but that may actually be what happens if you merely set the DIB wr field as NULL rather than even having a rom_wr() routine...

You're, right. I removed the rom_wr routine.



   That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.


Hm, I'm not fond of that idea. In my humble opinion simh should reflect as much as possible and useful the original hardware. ROM could definitely not be written and I wouldn't like to introduce a functionality that isn't present in the real hardware. Someone hacking at ROM code could change the ROM file and - using the BLANK module - attach it to the ROM device.

We've got other simulators with ROM functionality that was usefully modified by DEPOSIT. In this case, the ROM variants existed in the original sold systems which differed by a single byte. This byte was used by the ROM to configure what the system answered to the ""what type of system is this a server or a multi-user system, which then had different software licenses"".
In any case, the simulator providing a means of depositing to ROM (at the SCP interface via the DEPOSIT command) absolutely doesn't veer from how the real hardware worked since the real hardware never provided a SCP interface. This would be more akin to a hardware in circuit emulator which never existed for this system (I don't think).

You might be overlooking the fact that the DEPOSIT command reflects the deposit operation from the PDP-11 console or ODT. The Blinkenbone uses of simh provide a console that reflects the real hardware console and if the ROM could be written deposit operations from that console would succeed and that behaviour would contradict with the behaviour of the real hardware. That's the reason I wouldn't be in favour of being able to write to a ROM.
Perhaps a clean solution would be to implement a DUMP ROM command, providing users with the option to patch the dumped ROM image and then attach the patched image?



7. Now that the ROM contents are memory resident, what are your thoughts about the various switches on the M9312 board which influence autoboot and which of the several bootable ROM slots is used to boot?  I have some ideas, but what are you thinking?


My appraoch would be:

Implement a powerfail/powerup command. This command should be executable while the simulator is running. I'm not sure how that could be accomplished,
Execution of this command performs a ""setTRAP (TRAP_PWRFL)"", or - if the m9312 is selected - a setTRAP (773024).
I'm curious hearing your ideas.


Well, I haven't looked closely at how this stuff was actually implemented in the M9312, but on your first pull request you had said:


For auto booting on power up to work, setting the dip switches on the board to indicate the autoboot device is only part of the problem/solution. Like I asked earlier, somehow the primary ROM code must be able to read the contents of these switches so that it can dispatch to the right device ROM with a specifier for the unit to actually boot. It would seem that the contents of these switches somehow exist in the I/O page. That detail needs to be understood and simulated.



On powerup a hardware PDP-11 performs a power-up sequence in which the processor attempts to read PC and PSW addresses from memory locations 24 and 26 to obtain a PC and PSW. (An 11/60 traps through locations 224 and 226.) When the M9312 detects the power up sequence and its boot enable switch is on, the M9312 - logically seen - or's the current address on the Unibus with 765000, thus forcing the CPU to read PC and PSW from locations 765024 and 7765026 (765224 and 765226 for a 11/60) in its address space.  The contents of location 765024 (i.e. the PC to start from) are set by the dip switches on the M9312. Forcing the CPU to use a specific address offset is not functionality restricted to the M9312, every device on the Unibus can use this method to force the CPU to start at a particular address.
[Some text removed for clarity]

When in M9312 mode, the ROM needs to have DIB structures which respond to the addresses you mention which contain config info. The ROM device should probably have MTAB entries which specify Auto booting and the other switches. These would be simh REGisters which will then persist across SAVE/RESTORE.
Agreed.


Rather than creating a new command (powerfail/powerup as you suggest), we leverage the existing command set and fill in a little extra stuff. Specifically, we can add a BOOT routine to PDP11 CPU device. This routine will look for a ROM device (which may not be built in but is easily found by walking the sim_devices array), and if it is found, will dispatch to the ROM boot routine which will then look at the mode (confirming M9312) and the M9312 switches and start things running from there. If the ROM isn't found, or M9312 mode isn't reasonably configured, then these boot routines return SCPE_NOFNC.

That would be feasable, but would imply that the locations 765024 and 7765026 have to be ""wired in"" while these locations are device-specific. May I suggest a slightly different variant:

A specific command (BOOT CPU or RESET -P) executes the powerup sequence,
Any device can indicate that on a power up sequence, the PC and PSW have to read from a specific address; this could be implemented by a CPU modifier, e.g. POWERUPVECTOR,
In the powerup sequence the PC and PSW are read from locations 24 and 26, unless the POWERUPVECTOR has been set; in that case the locations POWERUPVECTOR and POWERUPVECTOR+2 are used,
In principle the modifier can be set by every device, wanting to force the CPU to start from code in its address space,
If multiple devices have indicated this functionality (this is a configuration error), the last POWERUPVECTOR set is used,
The hardware M9312 comprises an internal switch (S1) which indicates the boot enable switch (S1-2) and the offset address (S1-1 and S1-3 through S1-10), this switch is simulated by means of a register (S1),
Just as in a hardware M9312, the value of S1-1 and S1-3 through S1-10 is transformed (x<<1|173000) to an address, available in location 765024 (765224 for a 11/60),
The default value of switch S1-2 is boot enable off as the M9312 has to be properly configured for a correct boot sequence.


Thus:
    sim> BOOT CPU 
or equivalently since the CPU is the default device
    sim> BOOT

will serve...

That's a nice solution.

BTW, I recall that the M9312 has a total of 5 sockets, right? How does the current code handle this?

The M9312 indeed has five sockets. This is reflected by the five units of the ROM device. Does that answer your question?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,20,https://github.com/simh/simh/pull/1030#issuecomment-831090628,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark,
Do you have any feedback on my latest commit? I'm unsure of the status of my pull request with a workflow awaiting approval.
In the meantime I added an auto-configuration modifier to the ROM device. A ""SET ROM CONFIG=AUTO"" populates the ROM device with the appropriate console emulator/diagnostics ROM for the CPU model and boot ROMS for the first four enabled devices a device scan encounters.
I would now like to implement the M9312 switches and powerup procedure. Are you ok with my proposal on that matter?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,21,https://github.com/simh/simh/pull/1030#issuecomment-835305003,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Dear Mark,
The past days I've been experimenting with the implementation of a powerup boot functionality of the M9312. As a consequence I have to confess that I am getting more and more dissatisfied with our decision to combine the functionality of the original ROM module by Lars with the M9312 implementation into one device (named ROM). There are two reasons for my dissatisfaction.
The first one is that up to now I was able to combine the functionality of both module types (ROM and M9312) in one device. With the addition of the functionality for the powerup boot of the M9312, we are getting at a point where a clean implementation of both ROM modules in the same device is getting unfeasible.
The addition of M9312 specific functionality in registers or modifiers seems impossible with the constraints that (1) a SAVE/RESTORE cycle should always restore the original state of the simulator and (2) M9312 specific functionality should not appear in the functionality of the original ROM device. This could be solved by hiding M9312 registers or modifiers when the original ROM module is selected, but in that case the complete simulator state cannot be restored from a state in which they were visible.
The second reason for my dissatisfaction is that by adding functionality to the M9312, more and more conditional code is needed to differentiate between the ROM and M9312 functionality. As I want to refrain from statements like ""if module_type == M9312"" I added a module data structure, describing the particulars of the module. With the addition of every feature this structure grows, adding complexity to the code, now to a point where the code is getting complex and is lacking transparency.
Things would get much clearer if the M9312 was split off in its own source module. The M9312 functionality could be implemented completely in a for the users transparent way and the maintainability of both the ROM and the M9312 code would improve vastly. I therefore would like to propose that split. Would you agree with such a decision?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,22,https://github.com/simh/simh/pull/1030#issuecomment-835576128,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Jos,
I'm sorry I haven't gotten back to you yet.  Last week was travel, this week it's email infrastructure issues.
In any case, please hold off on making additional changes until I get back to you,  Part of this pending feedback, I belive,will simplify the points you raised today but still proceed in this general direction.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,23,https://github.com/simh/simh/pull/1030#issuecomment-841902986,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","The ROM help should spell out more about each of the potential ""known"" ROM socket types, and give several alternate examples that may be useful.
That will result in a very long help text, but in combination with your point 4 something useful could be created. I also wrote a draft text for inclusion in the ""PDP-11 Simulator Usage"" that explains the details of ROM configuration. What is the procedure to get that text included?



There is absolutely no problem with arbitrarily long help text. The real goal is to have everything that historically was in the PDP-11 Simulator Usage document be directly available in help without the need for external documents. Some future version of the help system may then produce the external document directly from the available internal help. Please explore the current help and point me at things which may be missing in some devices and I'll certainly add it.

I agree with you that having documentation in the application itself is to be preferred over having documentation in an external document and I therefore integrated my texts in the HELP system. This was quite a job and took some time. I hope the structure and contents of the texts are clear.

Hmmm...  Since this is your first device implementation, you don't have experience with the actual help paradigm.  There are two options when composing help:

A single help blob (with potential additional ATTACH specific help) which is a single ""blob"" of text describing everything.  Many/most of the blob device helps were originally extracted from the related section in Bob's original pdp11_doc.doc document.
2)The much preferred hierarchical device help.  See examples: pdp11_xq.c, pdp11_dmc.c, pdp11_dup.c, pdp11_kmc.c, pdp11_vt.c

Also, useful examples for each of the various ways that the device may be configured and/or used really belong in the help.





The use/existence of rom_wr() should depend on how real hardware behaved when an instruction attempted to write to ROM addresses.
As you probably read in the simh mailing list, SCPE_NXM is the correct error code.



True, I haven't looked closely, but that may actually be what happens if you merely set the DIB wr field as NULL rather than even having a rom_wr() routine...

You're, right. I removed the rom_wr routine.
....



That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.
Hm, I'm not fond of that idea. In my humble opinion simh should reflect as much as possible and useful the original hardware. ROM could definitely not be written and I wouldn't like to introduce a functionality that isn't present in the real hardware. Someone hacking at ROM code could change the ROM file and - using the BLANK module - attach it to the ROM device.


We've got other simulators with ROM functionality that was usefully modified by DEPOSIT. In this case, the ROM variants existed in the original sold systems which differed by a single byte. This byte was used by the ROM to configure what the system answered to the ""what type of system is this a server or a multi-user system, which then had different software licenses"".
In any case, the simulator providing a means of depositing to ROM (at the SCP interface via the DEPOSIT command) absolutely doesn't veer from how the real hardware worked since the real hardware never provided a SCP interface. This would be more akin to a hardware in circuit emulator which never existed for this system (I don't think).

You might be overlooking the fact that the DEPOSIT command reflects the deposit operation from the PDP-11 console or ODT. The Blinkenbone uses of simh provide a console that reflects the real hardware console and if the ROM could be written deposit operations from that console would succeed and that behavior would contradict with the behavior of the real hardware. That's the reason I wouldn't be in favor of being able to write to a ROM.

The real ODT implementation for the PDP11 has always been various pieces of OS debugging facilities which are completely PDP11 software, OR the M9312 is the A0 ROM interface is perfect additional example.  All of these are the precise way a user of a real PDP11 could do a DEPOSIT.  Any of these will use an instruction to write the DEPOSIT target location which, if the DEPOSIT was attempting to write to a ROM address, this will result in a NXM result and not modify anything, just as the current ROM logic will do.

Perhaps a clean solution would be to implement a DUMP ROM command, providing users with the option to patch the dumped ROM image and then attach the patched image?

The fact that the blinkenbone implementation exposes the sim> interface is absolutely NOT precisely how the hardware worked and therefore should not be a reason to not provide a SCP DEPOSIT to ROM data.  Maybe the blinkenbone stuff should be enriched to leverage the M9312 console interface...





Now that the ROM contents are memory resident, what are your thoughts about the various switches on the M9312 board which influence autoboot and which of the several bootable ROM slots is used to boot?  I have some ideas, but what are you thinking?
My appraoch would be:


o  Implement a powerfail/powerup command. This command should be executable while the simulator is running. I'm not sure how that could be accomplished,
o  Execution of this command performs a ""setTRAP (TRAP_PWRFL)"", or - if the m9312 is selected - a setTRAP (773024).
I'm curious hearing your ideas.
Well, I haven't looked closely at how this stuff was actually implemented in the M9312, but on your first pull request you had said:



For auto booting on power up to work, setting the dip switches on the board to indicate the autoboot device is only part of the problem/solution. Like I asked earlier, somehow the primary ROM code must be able to read the contents of these switches so that it can dispatch to the right device ROM with a specifier for the unit to actually boot. It would seem that the contents of these switches somehow exist in the I/O page. That detail needs to be understood and simulated.



On powerup a hardware PDP-11 performs a power-up sequence in which the processor attempts to read PC and PSW addresses from memory locations 24 and 26 to obtain a PC and PSW. (An 11/60 traps through locations 224 and 226.) When the M9312 detects the power up sequence and its boot enable switch is on, the M9312 - logically seen - or's the current address on the Unibus with 765000, thus forcing the CPU to read PC and PSW from locations 765024 and 7765026 (765224 and 765226 for a 11/60) in its address space. The contents of location 765024 (i.e. the PC to start from) are set by the dip switches on the M9312. Forcing the CPU to use a specific address offset is not functionality restricted to the M9312, every device on the Unibus can use this method to force the CPU to start at a particular address.
[Some text removed for clarity]

When in M9312 mode, the ROM needs to have DIB structures which respond to the addresses you mention which contain config info. The ROM device should probably have MTAB entries which specify Auto booting and the other switches. These would be simh REGisters which will then persist across SAVE/RESTORE.
Agreed.
Rather than creating a new command (powerfail/powerup as you suggest), we leverage the existing command set and fill in a little extra stuff. Specifically, we can add a BOOT routine to PDP11 CPU device. This routine will look for a ROM device (which may not be built in but is easily found by walking the sim_devices array), and if it is found, will dispatch to the ROM boot routine which will then look at the mode (confirming M9312) and the M9312 switches and start things running from there. If the ROM isn't found, or M9312 mode isn't reasonably configured, then these boot routines return SCPE_NOFNC.

That would be feasible, but would imply that the locations 765024 and 7765026 have to be ""wired in"" while these locations are device-specific. May I suggest a slightly different variant:
o  A specific command (BOOT CPU or RESET -P) executes the powerup sequence,
o  Any device can indicate that on a power up sequence, the PC and PSW have to read from a specific address; this could be implemented by a CPU modifier, e.g. POWERUPVECTOR,
o  In the powerup sequence the PC and PSW are read from locations 24 and 26, unless the POWERUPVECTOR has been set; in that case the locations POWERUPVECTOR and POWERUPVECTOR+2 are used,
In principle the modifier can be set by every device, wanting to force the CPU to start from code in its address space,
o  If multiple devices have indicated this functionality (this is a configuration error), the last POWERUPVECTOR set is used,
o  The hardware M9312 comprises an internal switch (S1) which indicates the boot enable switch (S1-2) and the offset address (S1-1 and S1-3 through S1-10), this switch is simulated by means of a register (S1),
o  Just as in a hardware M9312, the value of S1-1 and S1-3 through S1-10 is transformed (x<<1|173000) to an address, available in location 765024 (765224 for a 11/60),
o  The default value of switch S1-2 is boot enable off as the M9312 has to be properly configured for a correct boot sequence.

Effectively all of what you've outlined is logic that belongs in the rom_boot() routine based on the rom mode (M9312 or other) and various configuration information details for the M9312.  Look at the current code which simply calls cpu_set_boot () with an appropriate PC (you derive that from the config switches in M9312 mode or the ROM base/start address otherwise).



Thus:
sim> BOOT CPU 
or equivalently since the CPU is the default device
sim> BOOT

will serve...

That's a nice solution.

BTW, I recall that the M9312 has a total of 5 sockets, right? How does the current code handle this?
The M9312 indeed has five sockets. This is reflected by the five units of the ROM device. Does that answer your question?

Well, yes.
Meanwhile, I've looked closely at the structure of this code and there are several things that should be changed:

You've picked the term ""module"" to describe M9312 or its alternatives.  However, every DEVICE in the PDP11 simulator also was a Module in DEC's terms, but they each are now DEVICES.  The code is present now in pdp11_rom.c which is correct and ROM is the DEVICE name, but rather than SET ROM MODULE=, things should really SET ROM MODE={BLANK|M9312|VT40}.  Look in the MTAB entries in the pdp11_xq.c code and use some of them as examples of how those commands should look.  Look at the output of HELP XQ SET and make the ROM ones provide reasonable help output.  The HELP  SET and HELP  SHOW output walks the MTAB entries explicitly.
simh UNIT structures serve 3 basic purposes:
a) A mechanism to provide scheduled event related events
b) Possibly an ATTACH point for some unit specific state
c) Possibly a way to store a handful of unit/device state variables which get SAVED and RESTORED that are stored in the various UNIT fields (u3, u4, u5, u6, etc. fields).

The ROM device has no need for event scheduling (a).
ONLY one of the UNITs in the ROM device has any need to be ATTACHed.
Any state variables information stored in ROM device UNIT structures could readily be stored in simh REGister variables.
The ROM device should only have one UNIT defined.
There should be REG declarations that hold the base and end addresses for
uint16 mode;				/* M9312, BLANK, VT40 */
uint16 active_sockets;
uint32 start[5];
uint32 end[5];

REG rom_reg[] = {
  { ORDATAD (MODE,     mode, 16,                                   ""Mode"") },
  { ORDATAD (SOCKETS, active_sockets, 16,                   ""Socket Count"") },
  { BRDATAD ( START,     start,       32,  8, sizeof (start), ""Socket Start Addresses"") },
  { BRDATAD ( END,        end,         32,  8, sizeof (end),  ""Socket End Addresses"") },
};

Additional REGs should be defined to record the logical conditions of the various M9312 configuration switches with appropriate MTAB entries to enable these features.  This should be reflected NOT by stating the physical switch numbers, but by
Given you've now only got a single UNIT, the rom_attach routine for M9312 mode should allow a comma separated list of separated names, for example:
       sim> ATTACH ROM A0,DK,DL,DM,DX

The M9312 mode attach logic should allow 1 thru 5 comma separated values which reflect the 5 sockets.
Your auto setup mode is a good idea.  It might be useful if the auto logic should walk the sim_devices array and add up to 4 ROM entries ONLY for devices which are enabled...",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,24,https://github.com/simh/simh/pull/1030#issuecomment-843770239,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Mark,
Thanks for your elaborate feedback and ideas, see my reactions below. I shortened some texts for clarity. At the end are some points I need your advice on.

Hmmm... Since this is your first device implementation, you don't have experience with the actual help paradigm. There are two options when composing help:

A single help blob (with potential additional ATTACH specific help) which is a single ""blob"" of text describing everything.  Many/most of the blob device helps were originally extracted from the related section in Bob's original pdp11_doc.doc document.
The much preferred hierarchical device help.  See examples: pdp11_xq.c, pdp11_dmc.c, pdp11_dup.c, pdp11_kmc.c, pdp11_vt.c

Also, useful examples for each of the various ways that the device may be configured and/or used really belong in the help.

As the documentation in its current form is already structured hierarchically a conversion to the hierarchical device help should be possible. I'll tackle this when the commands have their definitive form.





That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM.  Thus the DEVICE could have deposit routine.







You might be overlooking the fact that the DEPOSIT command reflects the deposit operation from the PDP-11 console or ODT. The Blinkenbone uses of simh provide a console that reflects the real hardware console and if the ROM could be written deposit operations from that console would succeed and that behavior would contradict with the behavior of the real hardware. That's the reason I wouldn't be in favor of being able to write to a ROM.



The real ODT implementation for the PDP11 has always been various pieces of OS debugging facilities which are completely PDP11 software, OR the M9312 is the A0 ROM interface is perfect additional example. All of these are the precise way a user of a real PDP11 could do a DEPOSIT. Any of these will use an instruction to write the DEPOSIT target location which, if the DEPOSIT was attempting to write to a ROM address, this will result in a NXM result and not modify anything, just as the current ROM logic will do.

Yes, I agree and and precisely for this reason I would like to keep the ROM read-only. The Blinkenbone software maps the control of switches of a 11/70 physical console to SCP commands. A press on the console DEP switch executes a SCP DEPOSIT command. Implementing that command would result in the fact that on a Blinkenbone console the ROM could be modified by using the DEP switch which is unrealistic.

The fact that the blinkenbone implementation exposes the sim> interface is absolutely NOT precisely how the hardware worked and therefore should not be a reason to not provide a SCP DEPOSIT to ROM data. Maybe the blinkenbone stuff should be enriched to leverage the M9312 console interface...

I understand your point, but currently simh provides no other way to control a machine than via the SCP interface. Pressing the START switch maps to the RUN/GO command, idem for the CONT switch, pressing the HALT switch maps to ^E, pressing the EXAM switch maps to the EXAMINE command and consequently the DEP switch maps to the DEPOSIT command. It might be useful to implement a kind of BLinkenbone/firmware ODT-type of interface to simh but that would bring about extensive changes to both Blinkenbone and simh.
The read-only aspect of a ROM is important to me as my M9312 development started with the intention to make the Blinkenbone 11/70 console more usable than it currently is. I you were to insist on the writeability of a ROM I could agree with that if at least the default behaviour is that a ROM is read-only and that only after an explicit action of a user the ROM becomes writeable.


That would be feasible, but would imply that the locations 765024 and 7765026 have to be ""wired in"" while these locations are device-specific. May I suggest a slightly different variant:
o  A specific command (BOOT CPU or RESET -P) executes the powerup sequence,
o  Any device can indicate that on a power up sequence, the PC and PSW have to read from a specific address; this could be implemented by a CPU modifier, e.g. POWERUPVECTOR,
o  In the powerup sequence the PC and PSW are read from locations 24 and 26, unless the POWERUPVECTOR has been set; in that case the locations POWERUPVECTOR and POWERUPVECTOR+2 are used,
In principle the modifier can be set by every device, wanting to force the CPU to start from code in its address space,
o  If multiple devices have indicated this functionality (this is a configuration error), the last POWERUPVECTOR set is used,
o  The hardware M9312 comprises an internal switch (S1) which indicates the boot enable switch (S1-2) and the offset address (S1-1 and S1-3 through S1-10), this switch is simulated by means of a register (S1),
o  Just as in a hardware M9312, the value of S1-1 and S1-3 through S1-10 is transformed (x<<1|173000) to an address, available in location 765024 (765224 for a 11/60),
o  The default value of switch S1-2 is boot enable off as the M9312 has to be properly configured for a correct boot sequence.

Effectively all of what you've outlined is logic that belongs in the rom_boot() routine based on the rom mode (M9312 or other) and various configuration information details for the M9312. Look at the current code which simply calls cpu_set_boot () with an appropriate PC (you derive that from the config switches in M9312 mode or the ROM base/start address otherwise).

Well, not every bit of this procedure should be part of rom_boot() I presume? The first four points (using a POWERUP vector) should be part of a cpu_boot() as other devices than the M9312 could set that vector too. I'll implement the remaining part of the procedure in the boot_rom() function, that's a relatively clean solution.

Meanwhile, I've looked closely at the structure of this code and there are several things that should be changed:
1. You've picked the term ""module"" to describe M9312 or its alternatives.  However, every DEVICE in the PDP11 simulator also was a Module in DEC's terms, but they each are now DEVICES.  The code is present now in pdp11_rom.c which is correct and ROM is the DEVICE name, but rather than SET ROM MODULE=, things should really SET ROM MODE={BLANK|M9312|VT40}.  Look in the MTAB entries in the pdp11_xq.c code and use some of them as examples of how those commands should look.  Look at the output of HELP XQ SET and make the ROM ones provide reasonable help output.  The HELP  SET and HELP  SHOW output walks the MTAB entries explicitly.


In that case I propose ""SET ROM TYPE={BLANK|M9312|VT40}"". That would be really appropriate terminology and that modifier is used for several other devices too.
I understand that ""modules"" correspond with ""devices"" and that's the reason I originally created an M9312 device. My intention was to create a device that resembled the M9312 as much as possible. Therefore my original implementation used the term ""sockets"" instead of units where sockets were implemented via units. In that respect I just extended the original ROM implementation by Lars that was already part of simh and that already used four units.

Any state variables information stored in ROM device UNIT structures could readily be stored in simh REGister variables.
The ROM device should only have one UNIT defined.
There should be REG declarations that hold the base and end addresses for
Additional REGs should be defined to record the logical conditions of the various M9312 configuration switches with appropriate MTAB entries to enable these features. This should be reflected NOT by stating the physical switch numbers, but by

The combination of using registers to store the ROM device state with setting and showing the state via modifiers is a very useful idea!

Given you've now only got a single UNIT, the rom_attach routine for M9312 mode should allow a comma separated list of separated names, for example:
       sim> ATTACH ROM A0,DK,DL,DM,DX

The M9312 mode attach logic should allow 1 thru 5 comma separated values which reflect the 5 sockets.

Interesting idea too. I like the idea we could speak in terms of ROMs that are placed in sockets (instead of attached to units). The original ROM device implementation by Lars provides four units however. How would you like to handle the incompatibility that will result? Should an ""ATTACH ROM"" also provide the functionality to specify a sequence of filenames?
Consequently the SET ADDRESS command (for the BLANK ROM type) should also consist of a sequence of addresses, but that syntax currently is not supported?
An ATTACH ROM command in this form is less flexible than placing a specific ROM in a specific unit. That doesn't have to be an issue, but is something we should realize. Is an ""ATTACH ROM ,,DL"" command e.g. also acceptable?
Would a DETACH command have a comparable form or should we remove it? (I see no particular use for that command.)

Your auto setup mode is a good idea. It might be useful if the auto logic should walk the sim_devices array and add up to 4 ROM entries ONLY for devices which are enabled...

The code already takes into account only enabled devices.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,25,https://github.com/simh/simh/pull/1030#issuecomment-844856345,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Jos,
see my additional feedback below. I shortened some texts for clarity.






That said, it might be useful for someone hacking at ROM code to be able to use SCP commands to DEPOSIT into ROM. Thus the DEVICE could have deposit routine.



You might be overlooking the fact that the DEPOSIT command reflects the deposit operation from the PDP-11 console or ODT. The Blinkenbone uses of simh provide a console that reflects the real hardware console and if the ROM could be written deposit operations from that console would succeed and that behavior would contradict with the behavior of the real hardware. That's the reason I wouldn't be in favor of being able to write to a ROM.

The real ODT implementation for the PDP11 has always been various pieces of OS debugging facilities which are completely PDP11 software, OR the M9312 is the A0 ROM interface is perfect additional example. All of these are the precise way a user of a real PDP11 could do a DEPOSIT. Any of these will use an instruction to write the DEPOSIT target location which, if the DEPOSIT was attempting to write to a ROM address, this will result in a NXM result and not modify anything, just as the current ROM logic will do.

Yes, I agree and and precisely for this reason I would like to keep the ROM read-only. The Blinkenbone software maps the control of switches of a 11/70 physical console to SCP commands. A press on the console DEP switch executes a SCP DEPOSIT command. Implementing that command would result in the fact that on a Blinkenbone console the ROM could be modified by using the DEP switch which is unrealistic.

The fact that the blinkenbone implementation exposes the sim> interface is absolutely NOT precisely how the hardware worked and therefore should not be a reason to not provide a SCP DEPOSIT to ROM data. Maybe the blinkenbone stuff should be enriched to leverage the M9312 console interface...

I understand your point, but currently simh provides no other way to control a machine than via the SCP interface. Pressing the START switch maps to the RUN/GO command, idem for the CONT switch, pressing the HALT switch maps to ^E, pressing the EXAM switch maps to the EXAMINE command and consequently the DEP switch maps to the DEPOSIT command. It might be useful to implement a kind of BLinkenbone/firmware ODT-type of interface to simh but that would bring about extensive changes to both Blinkenbone and simh.
The read-only aspect of a ROM is important to me as my M9312 development started with the intention to make the Blinkenbone 11/70 console more usable than it currently is. I you were to insist on the writeability of a ROM I could agree with that if at least the default behaviour is that a ROM is read-only and that only after an explicit action of a user the ROM becomes writeable.

If you add a MTAB entry which enabled DEPOSIT to ROM, that would be OK.



That would be feasible, but would imply that the locations 765024 and 7765026 have to be ""wired in"" while these locations are device-specific. May I suggest a slightly different variant:
o A specific command (BOOT CPU or RESET -P) executes the powerup sequence,
o Any device can indicate that on a power up sequence, the PC and PSW have to read from a specific address; this could be implemented by a CPU modifier, e.g. POWERUPVECTOR,
o In the powerup sequence the PC and PSW are read from locations 24 and 26, unless the POWERUPVECTOR has been set; in that case the locations POWERUPVECTOR and POWERUPVECTOR+2 are used,
In principle the modifier can be set by every device, wanting to force the CPU to start from code in its address space,
o If multiple devices have indicated this functionality (this is a configuration error), the last POWERUPVECTOR set is used,
o The hardware M9312 comprises an internal switch (S1) which indicates the boot enable switch (S1-2) and the offset address (S1-1 and S1-3 through S1-10), this switch is simulated by means of a register (S1),
o Just as in a hardware M9312, the value of S1-1 and S1-3 through S1-10 is transformed (x<<1|173000) to an address, available in location 765024 (765224 for a 11/60),
o The default value of switch S1-2 is boot enable off as the M9312 has to be properly configured for a correct boot sequence.

Effectively all of what you've outlined is logic that belongs in the rom_boot() routine based on the rom mode (M9312 or other) and various configuration information details for the M9312. Look at the current code which simply calls cpu_set_boot () with an appropriate PC (you derive that from the config switches in M9312 mode or the ROM base/start address otherwise).

Well, not every bit of this procedure should be part of rom_boot() I presume? The first four points (using a POWERUP vector) should be part of a cpu_boot() as other devices than the M9312 could set that vector too. I'll implement the remaining part of the procedure in the boot_rom() function, that's a relatively clean solution.

Actually, there is no specific need to dispatch through a vector.  The PDP11 simulator boot process (as a result of all existing BOOT commands), act as if the vector you're referring to is already being acted upon and the SCP's BOOT command processing acts like the vector dispatch is happening.
The a CPU boot with no arguments will be equivalent to BOOT ROM.  Both of these (BOOT alone or BOOT ROM) will call rom_boot().  rom_boot() will check the details in the ROM device to determine if and/or how it should behave based on the various SET ROM and ATTACH ROM commands that have been executed.  If an actual bootable set of configuration commands have not been executed such that it is bootable, then it returns SCPE_NOFNC.  Otherwise, based on configured SCPE_NOFNC parameters, it determines the appropriate PC address and calls cpu_set_boot() and returns SCPE_OK.


Meanwhile, I've looked closely at the structure of this code and there are several things that should be changed:

You've picked the term ""module"" to describe M9312 or its alternatives.  However, every DEVICE in the PDP11 simulator also was a Module in DEC's terms, but they each are now DEVICES.  The code is present now in pdp11_rom.c which is correct and ROM is the DEVICE name, but rather than SET ROM MODULE=, things should really SET ROM MODE={BLANK|M9312|VT40}.  Look in the MTAB entries in the pdp11_xq.c code and use some of them as examples of how those commands should look.  Look at the output of HELP XQ SET and make the ROM ones provide reasonable help output.  The HELP  SET and HELP  SHOW output walks the MTAB entries explicitly.
In that case I propose ""SET ROM TYPE={BLANK|M9312|VT40}"". That would be really appropriate terminology and that modifier is used for several other devices too.


I understand that ""modules"" correspond with ""devices"" and that's the reason I originally created an M9312 device. My intention was to create a device that resembled the M9312 as much as possible. Therefore my original implementation used the term ""sockets"" instead of units where sockets were implemented via units. In that respect I just extended the original ROM implementation by Lars that was already part of simh and that already used four units.

Well, the cases where SET TYPE= exist (i.e. SET XQ TYPE=DEQNA|DELQA|DELQA_T, etc.) are for devices which from a software point of view are subtly different, but one actually emulates the other and the TYPE enables the subtle differences or extensions.  The set of ROM features are significantly different for each of the modes of behavior we're looking at.  That is why I think MODE is more appropriate than TYPE.


Given you've now only got a single UNIT, the rom_attach routine for M9312 mode should allow a comma separated list of separated names, for example:
   sim> ATTACH ROM A0,DK,DL,DM,DX

The M9312 mode attach logic should allow 1 thru 5 comma separated values which reflect the 5 sockets.

Interesting idea too. I like the idea we could speak in terms of ROMs that are placed in sockets (instead of attached to units). The original ROM device implementation by Lars provides four units however. How would you like to handle the incompatibility that will result? Should an ""ATTACH ROM"" also provide the functionality to specify a sequence of filenames?
Consequently the SET ADDRESS command (for the BLANK ROM type) should also consist of a sequence of addresses, but that syntax currently is not supported?
An ATTACH ROM command in this form is less flexible than placing a specific ROM in a specific unit. That doesn't have to be an issue, but is something we should realize. Is an ""ATTACH ROM ,,DL"" command e.g. also acceptable?

Maybe a better way to do this would be to allow multiple ATTACH commands for the single unit.
Maybe there's a SET ROM SOCKETS=n MTAB entry which changes the default number of sockets (with the default set by the SET ROM MODE|TYPE={M9312|BLANK|VT40}).  This would set/change the maximum number of sockets.
Then there could be up to n separate ATTACH ROM xxx commands, OR just one with n comma separated arguments.  The rom_unit dynflags field should have the UNIT_ATTMULT bit set in the rom_attach routine.  This will allow the rom_attach routine to be called multiple times.  The rom_attach routine should manage the set of ""attached"" comma separated values (limiting them appropriately) and if/as subsequent ATTACH commands are issued, the set of ATTACH arguments should be added to the string stored in rom_unit.filename as a new comma separated string.  This will allow it to properly handle restoring things after a SAVE/RESTORE.  Look in sim_card_aattach in sim_card.c for similar behaviors for managing sets of card decks and how to handle the multiple attach or comma separated activities.
The address setting logic could also parse a comma separated list of addresses, and/or accept up to n separate SET commands similar to the above described attach logic.  These values would be stored in an array rather than be maintained as strings.  The array should have a maximum dimension and that should be the maximum number that the SET ROM SOCKETS=n accepts.

Would a DETACH command have a comparable form or should we remove it? (I see no particular use for that command.)

The ROM DETACH routine should undo the ATTACH and leave the device as if it was just enabled.


Your auto setup mode is a good idea. It might be useful if the auto logic should walk the sim_devices array and add up to 4 ROM entries ONLY for devices which are enabled...

The code already takes into account only enabled devices.

Great!",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,26,https://github.com/simh/simh/pull/1030#issuecomment-848612743,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark,
In your feedback you justly argued that units have no functionality in a ROM device and that state can be preserved using registers. In the original ROM inplementation by Lars, units resembled sockets and units therefore also were used as a placeholder for the unit/socket address, specified in the SET ADDRESS command. The command ""SET ROM[0-3] ADDRESS=<address>"" set the base address for a specific unit/socket.
In the design you proposed in your feedback the resemblence of units with sockets is left and therefore units can no longer be used in the SET ADDRESS command. That requires a new syntax for that command. My proposal for that syntax would be: ""SET ROM ADDRESS=<address>{;<address>}"".
As you stated that units have no functionality in a ROM device and state can be preserved using registers, the ROM device could (and perhaps should) be implemented without any units. I would be in favour for that because as we leave the idea that units resemble sockets, a unit has no equivalent object in a hardware ROM module. This also would provide the opportunity to define a syntax for placing ROMs in sockets using appropriate terminology from that domain. My proposal for that syntax would be: ""SET ROM CONTENTS=<rom>{;<rom>}"". The advantage of this syntax is the uniformity with the syntax of the SET ADDRESS command.
Summing up, I propose the following command repertoire for the ROM device:
sim> SET ROM TYPE={BLANK|M9312|VT40}
sim> SET ROM ADDRESS=<address>{;<address>}     - only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<file>{;<file>}                 -  only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<rom>{;<rom>}             - only for ROM TYPE M9312
sim> SET ROM CONFIGMODE=AUTO|MANUAL
sim> SET ROM BOOT_ENABLE=ON|OFF		              - only for ROM TYPE M9312
sim> SET ROM ADDRESS_OFFSET=<offset>		      - only for ROM TYPE M9312
sim> SET ROM WRITE_ENABLE={ON|OFF}
sim> SHOW ROM
sim> HELP ROM
Is that ok for you?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/larsbrinkhoff,27,https://github.com/simh/simh/pull/1030#issuecomment-848641956,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.",How do you attach multiple ROMs with this proposed command set?,True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/larsbrinkhoff,28,https://github.com/simh/simh/pull/1030#issuecomment-848644618,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Ah, using the semicolon separator?  So, for example,
SET ROM TYPE=BLANK
SET ROM CONTENTS=file1;file2;file3
SET ROM ADDRESS=176000;176400;177100",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,29,https://github.com/simh/simh/pull/1030#issuecomment-848653919,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark,
In your feedback you justly argued that units have no functionality in a ROM device and that state can be preserved using registers. In the original ROM inplementation by Lars, units resembled sockets and units therefore also were used as a placeholder for the unit/socket address, specified in the SET ADDRESS command. The command ""SET ROM[0-3] ADDRESS=<address>"" set the base address for a specific unit/socket.
In the design you proposed in your feedback the resemblence of units with sockets is left and therefore units can no longer be used in the SET ADDRESS command. That requires a new syntax for that command. My proposal for that syntax would be: ""SET ROM ADDRESS=<address>{;<address>}"".
As you stated that units have no functionality in a ROM device and state can be preserved using registers, the ROM device could (and perhaps should) be implemented without any units. I would be in favour for that because as we leave the idea that units resemble sockets, a unit has no equivalent object in a hardware ROM module. This also would provide the opportunity to define a syntax for placing ROMs in sockets using appropriate terminology from that domain. My proposal for that syntax would be: ""SET ROM CONTENTS=<rom>{;<rom>}"". The advantage of this syntax is the uniformity with the syntax of the SET ADDRESS command.
Summing up, I propose the following command repertoire for the ROM device:
sim> SET ROM TYPE={BLANK|M9312|VT40}
sim> SET ROM ADDRESS=<address>{;<address>}     - only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<file>{;<file>}                 -  only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<rom>{;<rom>}             - only for ROM TYPE M9312
sim> SET ROM CONFIGMODE=AUTO|MANUAL
sim> SET ROM BOOT_ENABLE=ON|OFF		              - only for ROM TYPE M9312
sim> SET ROM ADDRESS_OFFSET=<offset>		      - only for ROM TYPE M9312
sim> SET ROM WRITE_ENABLE={ON|OFF}
sim> SHOW ROM
sim> HELP ROM
Is that ok for you?

Ah, using the semicolon separator? So, for example,
SET ROM TYPE=BLANK
SET ROM CONTENTS=file1;file2;file3
SET ROM ADDRESS=176000;176400;177100


Yes, that's correct!",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,30,https://github.com/simh/simh/pull/1030#issuecomment-849419443,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Jos,

Summing up, I propose the following command repertoire for the ROM device:

sim> SET ROM TYPE={BLANK|M9312|VT40}
sim> SET ROM ADDRESS=<address>{;<address>} - only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<file>{;<file>} - only for ROM TYPE BLANK
sim> SET ROM CONTENTS=<rom>{;<rom>} - only for ROM TYPE M9312
sim> SET ROM CONFIGMODE=AUTO|MANUAL
sim> SET ROM BOOT_ENABLE=ON|OFF - only for ROM TYPE M9312
sim> SET ROM ADDRESS_OFFSET=<offset> - only for ROM TYPE M9312
sim> SET ROM WRITE_ENABLE={ON|OFF}
sim> SHOW ROM
sim> HELP ROM

This looks close.  The ; should be changed to , since the semicolon is a command separator in various commands, maybe not likely in config setup, but it still should be get generally avoided.
Completely avoiding simh UNITs will introduce a problem across a SAVE/RESTORE for SET ROM TYPE=BLANK mode.  The reset routine is not invoked after REGisters are restored, and there is no way to configure and repopulate the ROM contents on a RESTORE.  This is why I suggested the alternate multiple or (multiple argument) ATTACH approach.
There probably should be a;
 #define ROM_MAX_SOCKETS 5

which is sufficient now, but maybe a future ROM TYPE might have more sockets...
With ROM TYPE BLANK, the same number of addresses specified by SET ROM ADDRESS must then be supplied in the ATTACH command, or the set of ATTACH commands.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,31,https://github.com/simh/simh/pull/1030#issuecomment-850999991,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Just back after a short break.

This looks close. The ; should be changed to , since the semicolon is a command separator in various commands, maybe not likely in config setup, but it still should be get generally avoided.

That would be my preference too, but the command ""SET ROM ADDRESS=<address>,<address>"" is a command form scp currently doesn't allow. How should that be handled? Accepting the semicolon as a separator or adapting scp to allow this format?

Completely avoiding simh UNITs will introduce a problem across a SAVE/RESTORE for SET ROM TYPE=BLANK mode. The reset routine is not invoked after REGisters are restored, and there is no way to configure and repopulate the ROM contents on a RESTORE. This is why I suggested the alternate multiple or (multiple argument) ATTACH approach.

I figured two solutions for that issue (the second one being my preference):

Put the ROM id's (or hashes) in registers so they are saved and restored and on a ROM read (and write) check that the ROM id of the currently loaded ROM equals the ROM id in the register. If they don't match the ROM has to be reloaded by means of information in the registers.
Save the ROM contents in registers by means of the VBRDATA macro. This would result in a maximum of 1*512 + 4*128 = 1Kb data stored in the saved image which seems an acceptable size.


There probably should be a;
 #define ROM_MAX_SOCKETS 5

which is sufficient now, but maybe a future ROM TYPE might have more sockets...

That definition exists in a #define MAX_NUMBER_SOCKETS 5, but your name is more appropriate.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,32,https://github.com/simh/simh/pull/1030#issuecomment-851074110,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","This looks close. The ; should be changed to , since the semicolon is a command separator in various commands, maybe not likely in config setup, but it still should be get generally avoided.

That would be my preference too, but the command ""SET ROM ADDRESS=<address>,<address>"" is a command form scp currently doesn't allow. How should that be handled? Accepting the semicolon as a separator or adapting scp to allow this format?

Well, "","" separated arguments in SCP SET and SHOW commands is a base feature.  It allows SET/SHOW <dev>|<unit> arg1{,arg2...} where each arg matches one of the DEVICE's MTAB entries.
The ATTACH command has no such additional interpretation its arguments and thus will allow arbitrary argument interpretation which can include additional meaning completely up to the code in the DEVICE's attach routine.


Completely avoiding simh UNITs will introduce a problem across a SAVE/RESTORE for SET ROM TYPE=BLANK mode. The reset routine is not invoked after REGisters are restored, and there is no way to configure and repopulate the ROM contents on a RESTORE. This is why I suggested the alternate multiple or (multiple argument) ATTACH approach.

I figured two solutions for that issue (the second one being my preference):

Put the ROM id's (or hashes) in registers so they are saved and restored and on a ROM read (and write) check that the ROM id of the currently loaded ROM equals the ROM id in the register. If they don't match the ROM has to be reloaded by means of information in the registers.


I agree this is not a great idea.


Save the ROM contents in registers by means of the VBRDATA macro. This would result in a maximum of 1512 + 4128 = 1Kb data stored in the saved image which seems an acceptable size.


Hmmm...  The size of such a region would not be a concern, but it should certainly be bigger than you suggest since other ROMs may not be as small as the total in the M9312.  The size of this ""array"" (and all REGister data) has to be defined statically at compile time.  The amount of the array that has meaningful data can be defined in another register.
The DIB information also needs to survive a SAVE/RESTORE which might be tricky or impossible in REGisters.  As I said previously, the only DEVICE specific code which gets invoked at RESTORE time is the attach routine (for attached units), so taking that approach allows this stuff to be reconstructed naturally by the attach code.
The ADDRESS info could easily live in REGisters, but we've got the parsing problem with the comma vs semi-colon.  You could solve this by using a + character as a separator and also allow multiple successive SET ROM ADDRESS commands to add to the set of known addresses.
Alternatively, you could again use the attach routine to handle things and have a separate UNIT which is used only to gather this information.  This additional unit can be named ROMADDR and have that name set by sim_set_uname() which will then allow ATTACH ROMADDR addr1{,addr2...}
Note that there was a SCP bug which didn't allow SET/SHOW/ATTACH commands to operate on UNITs with alternate names (set via sim_set_uname()).  I've just committed a fix to solve this.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,33,https://github.com/simh/simh/pull/1030#issuecomment-855232642,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Thanks for sharing uour insights, Mark. I hadn't realized yet that the DIB information isn't saved and restored automatically. So, all in all I agree that using the ATTACH command proably is the best approach.
Using a second unit to set the adress however seems rather contrived. I have given this some thought and would propose a syntax for the ATTACH command in which all relevant parameters can be combined into one command: ATTACH ROM SOCKET=<socket number>,ADDRESS=<address>,IMAGE=<rom image name>.
The order of the parameters is insignificant and parameters can be abbreviated to one letter, so the command can be as short as ""ATTACH ROM S=0,A=17765000,I=rom.img"". The ADDRESS and IMAGE parameters are optional, just the SOCKET parameter is required in a command. Placing a ROM can thus also be accomplished by specifying the two commands ""ATTACH ROM SOCKET=0,ADDRESS=17765000"" and ""ATTACH ROM SOCKET=0,IMAGE=rom.img"".
This syntax has several advantages:

It is in a familiar format, using parameters with commas as separator,
A ROM image can placed by just one command,
It enables a clear syntax for its counterpart, the DETACH command: DETACH ROM SOCKET=<socket number>,
The syntax is very close to what one wants to express when placing a ROM in a socket.

I hope we can agree on this command syntax.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,34,https://github.com/simh/simh/pull/1030#issuecomment-855253545,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Thanks for sharing your insights, Mark. I hadn't realized yet that the DIB information isn't saved and restored automatically. So, all in all I agree that using the ATTACH command probably is the best approach.

The DIB is a simulator specific concept/structure.  DIBs happen to appear in many simulators but in any case is defined by simulator code and contains simulator specific information.

Using a second unit to set the address however seems rather contrived.

It certainly was a contrived idea.  :-)  I'm open to better suggestions which you've come up with below.

I have given this some thought and would propose a syntax for the ATTACH command in which all relevant parameters can be combined into one command: ATTACH ROM SOCKET=<socket number>,ADDRESS=<address>,IMAGE=<rom image name>.

This is a really good idea.

The order of the parameters is insignificant and parameters can be abbreviated to one letter, so the command can be as short as ""ATTACH ROM S=0,A=17765000,I=rom.img"".
The ADDRESS and IMAGE parameters are optional, just the SOCKET parameter is required in a command. Placing a ROM can thus also be accomplished by specifying the two commands ""ATTACH ROM SOCKET=0,ADDRESS=17765000"" and ""ATTACH ROM SOCKET=0,IMAGE=rom.img"".
This syntax has several advantages:

It is in a familiar format, using parameters with commas as separator,


Agreed.


A ROM image can placed by just one command,


In fact, ALL rom images can be placed by just one ATTACH command, or a reasonable combination of many ATTACH commands which merely accumulate the effects of the previous ATTACH commands.  Look closely at sim_card code I pointed you at.  The point of accumulating this info in the UNIT->filename string is precisely so that at RESTORE time, the total accumulated information will be available and the complete DEVICE will be  setup properly.


It enables a clear syntax for its counterpart, the DETACH command: DETACH ROM SOCKET=,


As I said previously, the DEVICE detach routine should effectively restore every aspect of the ROM device to its initial state.  Leaving the ROM TYPE unmodified.  There are no arguments passed to the this routine except the single unit which is an abstraction in this device.


The syntax is very close to what one wants to express when placing a ROM in a socket.


Note that you say the SOCKET parameter is required.  It actually needn't be.
The only real requirement is that the ADDRESS and IMAGE parameters appear in socket order.  Not necessarily grouped together, but adjacent grouping would be easier for folks to relate to.  The different ROM TYPEs seem to  potentially need more constraints on what is needed or not.  Interpreting the ATTACH arguments differently depending on ROM TYPE is completely reasonable and will work well across SAVE/RESTORE since prior to a SAVE the ROM TYPE must be set before ATTACH and is invalid once the device is attached.  At RESTORE time, REGisters are restored before UNITS are ATTACHed so the TYPE will be consistent with the ATTACH string as long as the filename string saves the whole accumulated info entered in original setup ATTACH command(s).
It would seem that the logic in the attach routine should keep track of whether the ATTACH arguments that have been processed will actually work (i.e. that IMAGEs have been supplied for every ADDRESS that's been seen, then only then mark the device as
'good' where this 'good' state means that things are bootable, and/or EXAMINE and/or rom_rd will provide useful/meaningful info.


I hope we can agree on this command syntax.


We are definitely on the right track.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,35,https://github.com/simh/simh/pull/1030#issuecomment-860168417,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","It enables a clear syntax for its counterpart, the DETACH command: DETACH ROM SOCKET=,


As I said previously, the DEVICE detach routine should effectively restore every aspect of the ROM device to its initial state. Leaving the ROM TYPE unmodified. There are no arguments passed to the this routine except the single unit which is an abstraction in this device.

I overlooked the fact that the detach function has no cptr parameter, so that is the only possibility.

Note that you say the SOCKET parameter is required. It actually needn't be.
The only real requirement is that the ADDRESS and IMAGE parameters appear in socket order. Not necessarily grouped together, but adjacent grouping would be easier for folks to relate to. The different ROM TYPEs seem to potentially need more constraints on what is needed or not. Interpreting the ATTACH arguments differently depending on ROM TYPE is completely reasonable [...]

I'll first implement one attach action per ATTACH call and then extend the ATTACH command to provide multiple attaches per call.
All in all it is quite a large refactor. I'm busy implementing the attach-approach but it probably will be a few weeks before I can come up with an update on the pull request,",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,36,https://github.com/simh/simh/pull/1030#issuecomment-891046407,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","After a few weeks of steady development, I'm done with the refactor. The ROM device now has the following features:

Using just one unit. This had implications for the syntax of the ATTACH command, as the previous SET and ATTACH commands made use of the device units,
A new, (hopefully) improved syntax of the ATTACH command,
Auto-configuration of M9312 and VT40 modules,
Symbolic specification of ROM start addresses,
Extensive hierarchical help texts,
Possibility to write-enable the ROMs.

The ROM device now supports the following commands:
SET ROM TYPE=BLANK|M9312|VT40
SET ROM CONFIGURATION=AUTO|MANUAL - only for ROM type M9312
SET ROM START_ADDRESS=<address> - only for ROM type BLANK
SET ROM START_ADDRESS=<address>|<ROM>+DIAG|<ROM>-DIAG - only for ROM type M9312
SET ROM WRITE=ENABLE|DISABLE
ATTACH ROM {socket:}<address>/file - only for ROM type BLANK
ATTACH ROM {socket:}<ROM> - only for ROM type M9312
DETACH ROM
RESET ROM

SHOW ROM
SHOW ROM SOCKETS
SHOW ROM TYPE
SHOW ROM CONFIGURATION
SHOW ROM START_ADDRESS

HELP ROM
HELP ROM SET
HELP ROM SHOW
HELP ROM ATTACH
BOOT ROM

The ATTACH command now provides the possibility to specify all for the attach required parameters in one command and provides the ability to attach multiple ROMs in one command:
ATTACH ROM 0:17765000/23-616F1.IMG - Attach a file on socket 0 at address 17765000 for the BLANK module,
ATTACH ROM B0 - Attach the B0 ROM on socket 0 for the M9312,
ATTACH ROM 1:DL - Attach the DL ROM on socket 1 for the M9312,
ATTACH ROM 0:B0,1:DL - Provides the same result as the two previous commands,
ATTACH ROM B0,DL,DK - Attach ROMs B0, DL and DK on sockets 0, 1 and 2 for the M9312.

The start address can be specified numerically or, for the M9312, as a symbolic address. All ROMs generally have two start address, one for starting without excution of the diagnostics and one for prior execution of the diagnostics. These addresses have been given the symbolic names ""<ROM>-DIAG"" and ""<ROM>+DIAG"". These names can be used as the specification of a start address.
SET ROM START_ADDRESS=173004
SET ROM START_ADDRESS=DL-DIAG
SET ROM START_ADDRESS=DL+DIAG

After setting the start address the system can be started with the BOOT ROM or BOOT CPU command. For a more extensive explanation of the commands see the help texts.
I merged all my commits into the m9312_impl_v2 branch. I hope this implementation satisfies all your requests.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,37,https://github.com/simh/simh/pull/1030#issuecomment-895764707,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark, did you notice my update of the pull request? Do you have time to review and hopefully merge the pull request?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/larsbrinkhoff,38,https://github.com/simh/simh/pull/1030#issuecomment-895773722,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.",Maybe it would be easier to review if the branch was rewritten into a few commits?  It is currently 73 commits which is quite a lot to take in as a reviewer.,True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,39,https://github.com/simh/simh/pull/1030#issuecomment-895777706,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","It would have been better if I had squashed all commits into one commit. It wasn't my intention to let you review all commits separately. The best way to look at the pull request is to take the latest commit and review that code. The implementation has now changed substantially from the original ROM device implementation, even since the last update of the pull request, and I wouldn't advice you to check every single commit.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,40,https://github.com/simh/simh/pull/1030#issuecomment-895811661,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.",And if it would be more convenient for Mark and you I could close this pull request and issue a new fresh one with just one commit.,True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,41,https://github.com/simh/simh/pull/1030#issuecomment-896240846,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","@larsbrinkhoff I'll have no problem reviewing this PR by @friesga.  I'm definitely only looking at the handful of interesting files related to this in his current branch (pdp11_rom.c, pdp11_m9312.h, pdp11_rom.h, pdp11_vt40boot.h).   The many separate commits will disappear when we're both finally happy with how this works and how it looks.  I've promised, when were finished with functional details) to reformat the code in pdp11_rom.c to consistently reflect the style in the original pdp11_rom.c since he's modifying an existing module, project rules say that we follow the style in the module being modified.  Only new modules get to have the author's favorite styling...
I've been very busy with a few fires here and not been able to get to look at the details in this PR yet.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,42,https://github.com/simh/simh/pull/1030#issuecomment-898994388,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","All in all, this is great stuff.  These are the relatively minor points of feedback that I see with the latest Pdp11_rom details:

How/why would it make any sense to have READ ONLY MEMORY (ROM) be writable?  Writable (as currently implemented) is writable directly from instructions executing within the simulator.  This certainly doesn’t match any aspect of how the original hardware really worked.  My point here is distinctly different from the earlier discussion about allowing DEPOSIT to work on ROM contents.  DEPOSITing is something that a ROM content developer might occasionally use (or advise a ROM user) to subtly tweak the behavior of the code in an existing ROM.  The relevant use case example that might come up is with the original simh VAX simulator’s console ROM.  In this case, users were advise to change the contents of 1 byte in the ROM (after loading the ROM but before booting) so that what the OS saw after booting was a simulator which was sold by DEC as a “Server” or a “Multi-User System” (for different prices).  These different system types had different licensing requirements (and costs), but under the covers, the system board merely differed by 1 byte to distinguish this, hence the advice to DEPOSIT a particular value in a particular place in the ROM.  This advice possibly seemed slightly strange to the average simh user, so subsequently, I add a SET CPU MODEL=xxx command that actually did this deposit under the covers.
You’ve migrated the information in the ROM DEVICE help to hierarchical orientation.  This is fantastic.  One consideration when writing help content is that it not look funny when viewed in a display/window which is 80 columns wide.  It seems you’ve kept to a precise 80 column width, BUT emitting text lines that go all the way to column 80 will often produce an unexpected line wrap which appears as a newline on screen.  Minor reformatting of the these long lines should be done to address this.
The HELP ROM text starts with text that doesn’t really read well:

sim> help rom
ROM help.  Type <CR> to exit, HELP for navigation help
ROM
    A hardware PDP-11 comprises a module with Read Only Memory (ROM) code,
    containing console emulator, diagnostic and bootstrap functionality.
    Each module has one or more ROMs available, the contents of which can be
    accessed by a reserved address space in the I/O page.

    Currently the ROM device supports the following module types:

        1. BLANK        Provides the contents of a file as a ROM
        2. M9312        Emulator, diagnostics and boot functionality for Unibus models
        3. VT40         The VT40 ROM for a GT40 graphical terminal

Specifically: “A hardware PDP-11 comprises a module with Read Only Memory”.  That certainly isn’t true…

I’m not sure BLANK is the right name for this ROM type.  Maybe BASIC or SIMPLE?  Blank suggests a piece of paper with nothing on it, or a confused or empty look on someone’s face.
New code (which this is) should strive to avoid the use of strncpy and leverage strlcpy and strlcat as needed instead.
Is the ROM device being disabled completely equivalent to the ROM device not being attach?  If so, then maybe the ROM device shouldn’t be DEV_DISABLE.  Thoughts? @larsbrinkhoff
After a RESTORE, the ROM configuration mode is MANUAL and not AUTO which is what it was when the simulator state was SAVEd.
Currently sim> HELP ROM ATTACH displays the attach syntax for the currently selected ROM type.  It may not be obvious (to someone who hasn’t explored the full hierarchical ROM help that this is different based on TYPE.  Maybe the hierarchical help should be reorganized to have ATTACH as a higher level with sub levels for each specific type.
It would seem to me that things should work best with fewer inputs from a user.  Why not this behavior:  If a user enters SET CPU 11/70 without having done anything else, and then SET ROM TYPE=M9312, the mode should default to AUTOMATIC and the currently configured devices be automatically attached.  Help should describe that if additional devices are enabled after the SET ROM TYPE=M9312 command, then a SET ROM CONF=AUTO should be done.
Should M9312 AUTO mode not only walk the enabled list of devices in the system, but also their UNITs and then possibly only enable ROMs that have attached units and potentially complain if none are found?
Shouldn’t M9312 AUTO mode set a potentially workable address, which could be overwritten by a subsequent SET ROM START_ADDRESS=.  The symbolic start address syntax you allow in the get_symbolic_start_address routine is fantastic but doesn’t seem to be mentioned in the help.
The last paragraph of HELP ROM M9312_Configuration ADDRESSing that says:

    With a DL boot ROM in socket 1 e.g., a RL01 disk can be booted from unit 0,
    without performing the diagnostics, by starting at address 173004. With the
    same boot ROM placed in socket 2 that unit can be booted by starting at
    address 1732004. Note that the start address specifies whether or not the
    diagnostics code is executed.

Note that the last address mentioned 1732004 seems to have more digits than all the other address references display in the addressing section!
After you look over and we discuss the above I'll come back to things.  Sorry it took me so long to get to this.  I've had some other priorities that had to be addressed.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/markpizz,43,https://github.com/simh/simh/pull/1030#issuecomment-898995182,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","If I had done:
sim> set cpu 11/70
sim> set rom type=m9312
sim> set rom conf=auto
sim> save rom-state.save
sim> exit
start simulator again
sim> restore rom-state.save
sim> set rom type=vt40
Module is not compatible with current cpu and/or bus type

Maybe all these steps weren't necessary to encounter this, but the message is at least a little confusing.  It could say something like ""Module VT40 is not compatible with current cpu (11/70) and/or bus type (Unibus)"".  More is context which you've checked internally is better for fools like me who just type random commands. :-)",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,44,https://github.com/simh/simh/pull/1030#issuecomment-899490642,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","All in all, this is great stuff.

Thanks! :-)


How/why would it make any sense to have READ ONLY MEMORY (ROM) be writable?  Writable (as currently implemented)
is writable directly from instructions executing within the simulator.  This certainly doesn’t match any aspect of how the original hardware really worked.  My point here is distinctly different from the earlier discussion about allowing DEPOSIT to work on ROM contents.  DEPOSITing is something that a ROM content developer might occasionally use (or advise a ROM user) to subtly tweak the behavior of the code in an existing ROM.


I agree with you that writing ROM code from instructions executing within the simulator is undesired behaviour. I'm not sure however if and how that can be prevented if ROMs are to be writable by means of DEPOSIT commands. All writes to the IOPAGE and therefore to the ROM, either via a DEPOSIT command or via instructions, pass through cpu_ex() and iopageW(). I don't see how a distinction between a DEPOSIT and a write following from instructions could be made?


You’ve migrated the information in the ROM DEVICE help to hierarchical orientation.  This is fantastic.  One consideration when writing help content is that it not look funny when viewed in a display/window which is 80 columns wide.  It seems you’ve kept to a precise 80 column width, BUT emitting text lines that go all the way to column 80 will often produce an unexpected line wrap which appears as a newline on screen.  Minor reformatting of the these long lines should be done to address this.


Ok, I'll bring all lines to a maximum of 79 characters.


The HELP ROM text starts with text that doesn’t really read well:
Specifically: “A hardware PDP-11 comprises a module with Read Only Memory”. That certainly isn’t true…


Well, at least in general this is true? To my knowledge all PDP-11 had ROM's except for the later Q-bus models in which this could be optional?


I’m not sure BLANK is the right name for this ROM type.  Maybe BASIC or SIMPLE?  Blank suggests a piece of paper with nothing on it, or a confused or empty look on someone’s face.


The essence of that ROM type is that it is completely ""blank"", i.e. it has no addresses assigned to the sockets, unlike the M9312 and VT40 ROM types that do have assigned addresses. That's the reason I chose BLANK as a name, a more appropriate name however would be fine with me.


New code (which this is) should strive to avoid the use of strncpy and leverage strlcpy and strlcat as needed instead.


I'll check that.


Is the ROM device being disabled completely equivalent to the ROM device not being attach?  If so, then maybe the ROM device shouldn’t be DEV_DISABLE.  Thoughts? @larsbrinkhoff


Your remark made me discover the device currently doesn't handle a disabled state correctly. On a disabled ROM device, ROMs can be auto-configured and read for example. My proposal would be to reject all commands on a disabled ROM device, to reflect the state that a system has no ROM module.


After a RESTORE, the ROM configuration mode is MANUAL and not AUTO which is what it was when the simulator state was SAVEd.


I'll put the configuration mode in a register in order to save and restore the state.


Currently sim> HELP ROM ATTACH displays the attach syntax for the currently selected ROM type.  It may not be obvious (to someone who hasn’t explored the full hierarchical ROM help that this is different based on TYPE.  Maybe the hierarchical help should be reorganized to have ATTACH as a higher level with sub levels for each specific type.


Putting the help text for the ATTACH command at a higher level would be inconsistent with the help structure for the other commands (and getting a for the user clear and consistent structure took a considerable effort). But you're right that it might be confusing, so I'll put a note at the bottom of the text to point at the difference.


It would seem to me that things should work best with fewer inputs from a user.  Why not this behavior:  If a user enters SET CPU 11/70 without having done anything else, and then SET ROM TYPE=M9312, the mode should default to AUTOMATIC and the currently configured devices be automatically attached.  Help should describe that if additional devices are enabled after the SET ROM TYPE=M9312 command, then a SET ROM CONF=AUTO should be done.


Ok, good idea. I'll implement that.


Should M9312 AUTO mode not only walk the enabled list of devices in the system, but also their UNITs and then possibly only enable ROMs that have attached units and potentially complain if none are found?


Aha, I thought about that too! :-) I'll implement that too.


Shouldn’t M9312 AUTO mode set a potentially workable address, which could be overwritten by a subsequent SET ROM START_ADDRESS=.  The symbolic start address syntax you allow in the get_symbolic_start_address routine is fantastic but doesn’t seem to be mentioned in the help.


The start address could be set to the first device found with an image attached to unit zero of the device and. That is good idea too that I'll implement. The SET ROM START_ADDRESS command is described in e.g. the HELP ROM M9312_Configuration SET_Commands START_ADDRESS text.


The last paragraph of HELP ROM M9312_Configuration ADDRESSing that says:

    With a DL boot ROM in socket 1 e.g., a RL01 disk can be booted from unit 0,
    without performing the diagnostics, by starting at address 173004. With the
    same boot ROM placed in socket 2 that unit can be booted by starting at
    address 1732004. Note that the start address specifies whether or not the
    diagnostics code is executed.

Note that the last address mentioned 1732004 seems to have more digits than all the other address references display in the addressing section!

The last address is incorrect.

After you look over and we discuss the above I'll come back to things. Sorry it took me so long to get to this. I've had some other priorities that had to be addressed.

Thanks for your feedback! I understand you have other affairs to attend to.

sim> set rom type=vt40
Module is not compatible with current cpu and/or bus type

Maybe all these steps weren't necessary to encounter this, but the message is at least a little confusing. It could say something like ""Module VT40 is not compatible with current cpu (11/70) and/or bus type (Unibus)"". More is context which you've checked internally is better for fools like me who just type random commands. :-)

For this error message I was inspired by a similar message in pdp-11_io_lib.c, but I agree that some addition could make the message clearer.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,45,https://github.com/simh/simh/pull/1030#issuecomment-906349993,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","In response to your remarks I made a number of modifications and merged them in the M9312 impl v2 branch. See my responses to your remarks below.


How/why would it make any sense to have READ ONLY MEMORY (ROM) be writable?  Writable (as currently implemented)
is writable directly from instructions executing within the simulator.


I still don't see if and how a distinction between a DEPOSIT and a write following from instructions could be made. My preference still is to cancel the possibility to write to a ROM.


Minor reformatting of the these long [help text] lines should be done to address this.


All help texts now fit in 80 columns.


The HELP ROM text starts with text that doesn’t really read well:
Specifically: “A hardware PDP-11 comprises a module with Read Only Memory”. That certainly isn’t true…


Well, at least in general this is true? To my knowledge all PDP-11 had ROM's except for the later Q-bus models in which this could be optional?


I’m not sure BLANK is the right name for this ROM type.  Maybe BASIC or SIMPLE?  Blank suggests a piece of paper with nothing on it, or a confused or empty look on someone’s face.


The essence of that ROM type is that it is completely ""blank"", i.e. it has no addresses assigned to the sockets, unlike the M9312 and VT40 ROM types that do have assigned addresses. That's the reason I chose BLANK as a name, a more appropriate name however would be fine with me.


New code (which this is) should strive to avoid the use of strncpy and leverage strlcpy and strlcat as needed instead.


Replaced strncpy calls by strlcpy. I left calls of strncpy in other parts of the simulator untouched.


Is the ROM device being disabled completely equivalent to the ROM device not being attach?  If so, then maybe the ROM device shouldn’t be DEV_DISABLE.  Thoughts? @larsbrinkhoff


Detachment of the ROM device is now handled correctly. In the detached state ROMs are not readable, cannot be attached and settings cannot be changed.


After a RESTORE, the ROM configuration mode is MANUAL and not AUTO which is what it was when the simulator state was SAVEd.


This issue had more consequences than I anticipated. The configuration mode could not be saved in a register as on a RESTORE the state is restored by means of ATTACH commands and execution of these commands reset the configuration mode to MANUAL. I chose to abolish the configuration mode altogether and changed the command into a ""single shot"" command that performs an auto-configuration without setting a state. That also better reflects the functionality of the command as a configuration mode AUTO suggested that the ROM configuration would be adapted automatically to the simulator configuration (and that is not the case). I consequently changed the syntax of the command to SET ROM AUTO_CONFIGURE (without arguments).


Currently sim> HELP ROM ATTACH displays the attach syntax for the currently selected ROM type.  It may not be obvious (to someone who hasn’t explored the full hierarchical ROM help that this is different based on TYPE.  Maybe the hierarchical help should be reorganized to have ATTACH as a higher level with sub levels for each specific type.


I put a note at the bottom of the text to point at the difference.


It would seem to me that things should work best with fewer inputs from a user.  Why not this behavior:  If a user enters SET CPU 11/70 without having done anything else, and then SET ROM TYPE=M9312, the mode should default to AUTOMATIC and the currently configured devices be automatically attached.  Help should describe that if additional devices are enabled after the SET ROM TYPE=M9312 command, then a SET ROM CONF=AUTO should be done.


I implemented that and changed the help texts accordingly.


Should M9312 AUTO mode not only walk the enabled list of devices in the system, but also their UNITs and then possibly only enable ROMs that have attached units and potentially complain if none are found?


Implemented too.


Shouldn’t M9312 AUTO mode set a potentially workable address, which could be overwritten by a subsequent SET ROM START_ADDRESS=.  The symbolic start address syntax you allow in the get_symbolic_start_address routine is fantastic but doesn’t seem to be mentioned in the help.


Implemented too. The SET ROM START_ADDRESS command is described in e.g. the HELP ROM M9312_Configuration SET_Commands START_ADDRESS text.


The last paragraph of HELP ROM M9312_Configuration ADDRESSing that says:
Note that the last address mentioned 1732004 seems to have more digits than all the other address references display in the addressing section!


Corrected.

sim> set rom type=vt40
Module is not compatible with current cpu and/or bus type

Maybe all these steps weren't necessary to encounter this, but the message is at least a little confusing. It could say something like ""Module VT40 is not compatible with current cpu (11/70) and/or bus type (Unibus)"". [...]

I adapted the message.",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,46,https://github.com/simh/simh/pull/1030#issuecomment-918217841,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Hi Mark, I would appreciate your comments on my latest update of the pull request. Are there any impediments for a merge of the pull request in the master?",True,{}
simh/simh,https://github.com/simh/simh,1030,2021-04-09T15:52:33Z,,2021-10-06T06:58:52Z,OPEN,False,3042,135,4,https://github.com/friesga,M9312 impl v2,101,[],https://github.com/simh/simh/pull/1030,https://github.com/friesga,47,https://github.com/simh/simh/pull/1030#issuecomment-935608051,"Hi Mark,
This is another pull request for inclusion of the M9312 in simh. In this version I merged my first m9312 implementation with Lars' ROM device, corrected several issues and added the bootvt ROM for the GT40.
Main points of the functionality are:

The ROM device now supports three modules, the BLANK, M9312 and VT40 modules. The module is selected by means of a 'SET ROM MODULE=' command.
The BLANK module is the functionality of the original ROM device. To preserve backward compatibility this is the default module selected.
The ROMs for the M9312 module now have to be selected by means of an ATTACH command. I had to use that command (instead of the FUNCTION modifier) to make a SAVE/RESTORE sequence preserve the ROM state.
On attachment of the B0 11/60, 11/70 Diagnostic ROM, the HITMISS register is set to 1,
On selection of the VT40 module, the applicable ROM is attached automatically as for that module just one ROM is available,
The validity of a SET ROM MODULE command is checked. The M9312 can only be selected on Unibus models and the VT40 can only be selected for a PDP-11/05. This check is not waterproof as of cause the CPU type can be changed after selection of the ROM module.

The changes are restricted to the ROM device itself (in four files: pdp11_rom.h, pdp11_rom.c, pdp11_m9312.h (added) and pdp11_vt40boot.h (added)). No changes are needed to other parts of simh. I didn't include changes to the vcxproj and makefiles but will include these if you like me to,
I tested the four diagnostic/console ROMS with the following results:

With the HITMISS work around, the B0 11/60, 11/70 Diagnostic ROM functions correctly,
The A0 11/04, 11/34 Diagnostic/Console functions correctly,
The 11/44 Diagnostic/Console seems to work correctly,
The 11/24 Diagnostic/Console ROM has an issue with the DL11 maintenance mode. In the diagnostic code the console DL11 is set in maintenance mode. In that mode the transmitter output is connected to the receiver input. The diagnostic checks that characters sent to the output can be read back. The maintenance mode currently is not supported in the DL11 implementation of simh. I am tempted to implement that mode :-).

The ROM for the GT40 is included in the VT40 module and I therefore selected that as name for that module but there might be a more appropriate name.
Not included yet is functionality for the internal M9312 switches and I would like to investigate if some form of auto-configuration of the ROMs is possible. I'll start working on these features now.","Mark, any chance on a reaction on my last update of the pull request and my question?",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1035,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1035#issuecomment-822688341,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","2 things:

Please resubmit this PR based on the current head of the master branch.  You submitted 2 separate PRs both against the prior head of the master branch.  Avoiding a merge commit asks you to start again.
This change is fine, but I'm thinking that in the routine vid_window_from_id(), in the path that returns NULL, there should be some sim_debug logic that describes whatever is available about these events so that the potential exists in the future to understand their root cause.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/1035#issuecomment-822720647,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","Rebased.
That's a good idea.  I'm not sure how to call sim_debug when there's no obvious device to point to.  I made something up, but maybe you have a better idea.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1035#issuecomment-822751632,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","That debug approach doesn't work since there isn't any SCP mechanism to manage the debug state of an unconnected device and a device which only exists for this purpose really shouldn't exist.
Maybe the vid_window_from_id() should have its name changed to vid_get_event_window() and the argument should be a SDL_Event.  Merely emitting the window Id value in the debug output isn't particularly valuable.  I'm saying this so that that one place (where the ID isn't found) can display via sim_debug ALL of the event attributes for the event that wasn't found.  Otherwise the same logic would be needed by each caller that actually had the event structure available.  Meanwhile I'd suggest that the call to sim_debug should use vid_first->vid_dev as the DEVICE.  Maybe there should be a new SIM_VID_DBG_UNK_EVT debug symbol so that only this relatively rare (I hope) thing produces output which won't be entangled with other debug output unless you actually want it to be.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/Isysxp,5,https://github.com/simh/simh/pull/1035#issuecomment-822800735,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","This is quite a tricky problem.

  1.  The error seems to be Linux specific and I can only check SDL2 2.0.2 ...latest 2.0.12
  2.  The error is in SDL2 which reports an incorrect windowid in the event structure only for initial key events. Mouse events are correctly reported.
  3.  The windowid in the chained (vptr) list is correct.
  4.  There is no obvious alternative way of obtaining the correct windowid from the event structure as this does not contain a pointer to struct SDL_Window.
  5.  I suggest that SDL2 2.0.12 is checked to see if this error still occurs.
…
________________________________
From: Mark Pizzolato ***@***.***>
Sent: 19 April 2021 9:09 PM
To: simh/simh ***@***.***>
Cc: Ian Schofield ***@***.***>; Mention ***@***.***>
Subject: Re: [simh/simh] video: unrecognized windowID (#1035)


⚠ External sender. Take care when opening links or attachments. Do not provide your login details.

That debug approach doesn't work since there isn't any SCP mechanism to manage the debug state of an unconnected device and a device which only exists for this purpose really shouldn't exist.

Maybe the vid_window_from_id() should have its name changed to vid_get_event_window() and the argument should be a SDL_Event. Merely emitting the window Id value in the debug output isn't particularly valuable. I'm saying this so that that one place (where the ID isn't found) can display via sim_debug ALL of the event attributes for the event that wasn't found. Otherwise the same logic would be needed by each caller that actually had the event structure available. Meanwhile I'd suggest that the call to sim_debug should use vid_first->vid_dev as the DEVICE. Maybe there should be a new SIM_VID_DBG_UNK_EVT debug symbol so that only this relatively rare (I hope) thing produces output which won't be entangled with other debug output unless you actually want it to be.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<#1035 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ACYZOBYLH4FY6O5LCOHGOFLTJSEYJANCNFSM43GCHYGQ>.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1035#issuecomment-822807356,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","I seem to remember seeing unexpected events when the thread digesting events got behind, and then there wasn't just one, but a failing case.
In any case, having the option to record unexpected events will be valuable if it happens again in the future.


The error is in SDL2 which reports an incorrect windowid in the event structure only for initial key events. Mouse events are correctly reported.


If this is reliably reproducible with the initial event, then if it isn't fixed in the latest SDL2 version, then reporting the problem up stream should be done with a reproducible simple case (NOT simh based), digging that deeply may make an internal to SDL2 fix be obvious so providing a fix along with the report will pretty much guarantee that the fix makes it into the codebase.  I've done that with them in the past.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/larsbrinkhoff,7,https://github.com/simh/simh/pull/1035#issuecomment-823073110,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","Due to how SDL events are defined, the resulting code is a little unwieldy.  But here it is anyway.
vid_first->vid_dev may be NULL, so instead I used sim_messagef.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/Isysxp,8,https://github.com/simh/simh/pull/1035#issuecomment-823371027,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","For information:   The error has been corrected in SDL2 2.0.14 for Linux. Unpatched code is now functioning correctly.
                                 The version provided in windows-build (2.0.10) is also correct.
                                 It is unlikely that existing Linux distros will provide this version. A build/install cycle may be required.
…
________________________________
From: Lars Brinkhoff ***@***.***>
Sent: 20 April 2021 9:10 AM
To: simh/simh ***@***.***>
Cc: Ian Schofield ***@***.***>; Mention ***@***.***>
Subject: Re: [simh/simh] video: unrecognized windowID (#1035)


⚠ External sender. Take care when opening links or attachments. Do not provide your login details.

Due to how SDL events are defined, the resulting code is a little unwieldy. But here it is anyway.

vid_first->vid_dev may be NULL, so instead I used sim_messagef.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<#1035 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ACYZOB4HQLZLO5EE2TFLEJLTJUZFTANCNFSM43GCHYGQ>.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,9,https://github.com/simh/simh/pull/1035#issuecomment-823415009,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","3 Things about this:



vid_first->vid_dev may be NULL, so instead I used sim_messagef.

I suggested debug since I got the impression that 1) this was a common occurrence and 2) it might produce excessive output.  If neither is true, then sim_messagef is OK.


If the event type is unknown (which is possible in this case of unexpected things), then you should at least emit the numeric value of the event type that was received so that it would be possible to track it down.


As @Isysxp points out:

It is unlikely that existing Linux distros will provide this version. A build/install cycle may be required.
Since we know how a user might fix it, it would be useful for them to explore how to get the root problem fixed, so suggesting that SDL2 2.0.14 is needed absolves simh of the problem.  Users can then either pressure their supplier to update the packaged version or somehow deal with upgrading themselves.  Building with self built & installed packages is not supported by the makefile, but we'll cross that bridge when it gets there.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/larsbrinkhoff,10,https://github.com/simh/simh/pull/1035#issuecomment-823436067,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","I made some updates as per the suggestions.
I have tested SIMH, but I haven't seen the problem.  @Isysxp, do you have a way to reproduce it and see if my added code is triggered?",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/Isysxp,11,https://github.com/simh/simh/pull/1035#issuecomment-823465031,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","Re: commit ab48f31<https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsimh%2Fsimh%2Fcommit%2Fab48f31317f63943cf36995d2e29feb16d122b36&data=04%7C01%7Cian.schofield%40newcastle.ac.uk%7Cef78a6dca0ee498dab4e08d9041ab701%7C9c5012c9b61644c2a91766814fbe3e87%7C1%7C0%7C637545335054910632%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=cvDA6w4twtmBMhR5eIGRnqQSsZ%2BGvhVtZ9Zxumb8FnY%3D&reserved=0> video: Ignore events from unrecognized windows.

I can confirm that this commit detects the error. It does not appear to correct the error.
Linux (Debian 8) SDL2 2.0.2
NB: Deprecated workaround. Minimise and restore graphic window.
…
________________________________
From: Mark Pizzolato ***@***.***>
Sent: 20 April 2021 6:09 PM
To: simh/simh ***@***.***>
Cc: Ian Schofield ***@***.***>; Mention ***@***.***>
Subject: Re: [simh/simh] video: unrecognized windowID (#1035)


⚠ External sender. Take care when opening links or attachments. Do not provide your login details.

Merged #1035<https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsimh%2Fsimh%2Fpull%2F1035&data=04%7C01%7Cian.schofield%40newcastle.ac.uk%7C468819e4ae1343a4ed0508d9041f1d3a%7C9c5012c9b61644c2a91766814fbe3e87%7C1%7C0%7C637545353954283448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=yYMNy%2FOGfTz1Qk7ESgASuuAo6dGUv%2B2D7mxz5PGsdB0%3D&reserved=0> into master.

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub<https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsimh%2Fsimh%2Fpull%2F1035%23event-4620511927&data=04%7C01%7Cian.schofield%40newcastle.ac.uk%7C468819e4ae1343a4ed0508d9041f1d3a%7C9c5012c9b61644c2a91766814fbe3e87%7C1%7C0%7C637545353954293404%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=1OOnEOlaQJr9CEbUUSe0Y9qjkXNZWOA8W%2Fb91kYtzYI%3D&reserved=0>, or unsubscribe<https://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FACYZOB7NF7TGMDJKVOBCBFDTJWYOBANCNFSM43GCHYGQ&data=04%7C01%7Cian.schofield%40newcastle.ac.uk%7C468819e4ae1343a4ed0508d9041f1d3a%7C9c5012c9b61644c2a91766814fbe3e87%7C1%7C0%7C637545353954293404%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=C8ABLDztdBB8yqNUjAlo7w47NFpIeLD%2BOw1JF8oEHSI%3D&reserved=0>.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,12,https://github.com/simh/simh/pull/1035#issuecomment-823477370,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.","The goal was not really to correct the error, just to potentially ignore/report the internal SDL problem.  You said that it happens on the first keyboard event.  It would seem that a single report is reasonable in this case.  The original suggestion to only emit messages via debug output was an idea to he;lp development understand the issue while also ignoring such events.  If things don't work correctly after ignoring this event, but can then be fixed by minimizing and restoring the graphics window, then that suggestion should be part of what is emitted as well as the SDL2 version upgrade information.",True,{}
simh/simh,https://github.com/simh/simh,1035,2021-04-19T15:48:16Z,2021-04-20T17:09:36Z,2021-04-25T17:40:25Z,MERGED,True,89,6,1,https://github.com/larsbrinkhoff,video: unrecognized windowID,1,[],https://github.com/simh/simh/pull/1035,https://github.com/markpizz,13,https://github.com/simh/simh/pull/1035#issuecomment-826361035,"Sometimes an SDL event is reported with windowID = 0 which is not a match to any window SIMH has opened.  Both @Isysxp and I have seen this.  I have no explanation for why this happens, but ignoring those events seem harmless.
I will produce a pull request that fixes this.",FYI: Ubuntu 21.04 includes libsdl2-dev 2.0.14,True,{}
simh/simh,https://github.com/simh/simh,1036,2021-04-19T16:11:13Z,2021-04-19T18:00:09Z,2021-04-19T18:45:16Z,MERGED,True,2,2,1,https://github.com/larsbrinkhoff,Intel-Systems: Remove imds and isys build targets from GitHub Actions.,1,[],https://github.com/simh/simh/pull/1036,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1036,Following up on @nj7p's commit 96c32fc.,Following up on @nj7p's commit 96c32fc.,True,{}
simh/simh,https://github.com/simh/simh,1037,2021-04-24T15:53:53Z,2021-04-24T16:00:10Z,2021-04-24T16:00:10Z,MERGED,True,0,2,2,https://github.com/sethm,3B2: Don't clobber number of serial lines,1,[],https://github.com/simh/simh/pull/1037,https://github.com/sethm,1,https://github.com/simh/simh/pull/1037,"Serial line setup was inadvertantly clobbering the number of lines on initial setup, leading to potential invalid configuration.","Serial line setup was inadvertantly clobbering the number of lines on initial setup, leading to potential invalid configuration.",True,{}
simh/simh,https://github.com/simh/simh,1044,2021-05-09T21:13:40Z,2021-05-15T22:28:34Z,2021-05-15T22:28:35Z,MERGED,True,4184,111,22,https://github.com/sethm,3B2: Rename files in prep for Rev 3 support,1,[],https://github.com/simh/simh/pull/1044,https://github.com/sethm,1,https://github.com/simh/simh/pull/1044,"This change lays the groundwork for adding support for Rev 3 3B2 models,
which includes the Model 500, Model 600, and Model 1000.
Rather than use the fixed strings ""400"" and ""1000"" in file names, the
strings ""rev2"" and ""rev3"" will be used, which allows greater flexibility
to implement various system configurations more easily.
Additionally, this change adds a copy of the Debug Monitor (DEMON) ROM
image for the Rev 2 board, to be used soon in a later checkin.","This change lays the groundwork for adding support for Rev 3 3B2 models,
which includes the Model 500, Model 600, and Model 1000.
Rather than use the fixed strings ""400"" and ""1000"" in file names, the
strings ""rev2"" and ""rev3"" will be used, which allows greater flexibility
to implement various system configurations more easily.
Additionally, this change adds a copy of the Debug Monitor (DEMON) ROM
image for the Rev 2 board, to be used soon in a later checkin.",True,{}
simh/simh,https://github.com/simh/simh,1044,2021-05-09T21:13:40Z,2021-05-15T22:28:34Z,2021-05-15T22:28:35Z,MERGED,True,4184,111,22,https://github.com/sethm,3B2: Rename files in prep for Rev 3 support,1,[],https://github.com/simh/simh/pull/1044,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1044#issuecomment-838251916,"This change lays the groundwork for adding support for Rev 3 3B2 models,
which includes the Model 500, Model 600, and Model 1000.
Rather than use the fixed strings ""400"" and ""1000"" in file names, the
strings ""rev2"" and ""rev3"" will be used, which allows greater flexibility
to implement various system configurations more easily.
Additionally, this change adds a copy of the Debug Monitor (DEMON) ROM
image for the Rev 2 board, to be used soon in a later checkin.",Please change the line endings on the 3 new rom_rev2_xxx_bin.h files to CRLF to be consistent with the rest of the source code line endings...,True,{}
simh/simh,https://github.com/simh/simh,1044,2021-05-09T21:13:40Z,2021-05-15T22:28:34Z,2021-05-15T22:28:35Z,MERGED,True,4184,111,22,https://github.com/sethm,3B2: Rename files in prep for Rev 3 support,1,[],https://github.com/simh/simh/pull/1044,https://github.com/sethm,3,https://github.com/simh/simh/pull/1044#issuecomment-838749076,"This change lays the groundwork for adding support for Rev 3 3B2 models,
which includes the Model 500, Model 600, and Model 1000.
Rather than use the fixed strings ""400"" and ""1000"" in file names, the
strings ""rev2"" and ""rev3"" will be used, which allows greater flexibility
to implement various system configurations more easily.
Additionally, this change adds a copy of the Debug Monitor (DEMON) ROM
image for the Rev 2 board, to be used soon in a later checkin.","I've run 'unix2dos' on the affected files. These files were auto-generated with sim_BuildRoms.c, which appears to emit Unix line-endings by default, so perhaps that should be changed too.",True,{}
simh/simh,https://github.com/simh/simh,1044,2021-05-09T21:13:40Z,2021-05-15T22:28:34Z,2021-05-15T22:28:35Z,MERGED,True,4184,111,22,https://github.com/sethm,3B2: Rename files in prep for Rev 3 support,1,[],https://github.com/simh/simh/pull/1044,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1044#issuecomment-839979335,"This change lays the groundwork for adding support for Rev 3 3B2 models,
which includes the Model 500, Model 600, and Model 1000.
Rather than use the fixed strings ""400"" and ""1000"" in file names, the
strings ""rev2"" and ""rev3"" will be used, which allows greater flexibility
to implement various system configurations more easily.
Additionally, this change adds a copy of the Debug Monitor (DEMON) ROM
image for the Rev 2 board, to be used soon in a later checkin.","Actually, it currently emits ""text"" files (since the call to fopen merely says ""w"").  That produces LF line endings on Unix systems and CRLF line endings on Windows.
To avoid this potential in the future, I'll change the fopen mode to ""wb"" and change the handful of nearby places which previously had \n to have \r\n instead.
Meanwhile, can you squash these two commits into one and push -f the branch to your repo so there's one commit for this change.",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/irsbugs,1,https://github.com/simh/simh/pull/1046,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1046#issuecomment-850778336,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","Hi @irsbugs,
2 things:

Can I get your full name?
The changes are simple and seem perfectly reasonable.  I'd prefer that the commit message have a header that said:

alpha: Correct opcode mnemonics
<skip-a-line>
Then essentially the complete text you provided in this pull request as the rest of the commit message skipping the first line that summarizes the effect of the diff: ""Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[]."".
You can do this by backing out the prior commit and doing a push -f to your github repo, or I'll do it via cherry pick once I get your full name.
Thanks.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/irsbugs,3,https://github.com/simh/simh/pull/1046#issuecomment-852713450,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","Hi Mark,

Can I get your full name?


Ian Robert Stewart

You can do this by backing out the prior commit and doing a push -f to your github repo, or I'll do it via cherry pick once I get your full name.

I'd prefer that you do it via cherry pick as I am not very experienced with using github.
Regards, Ian.",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1046#issuecomment-852732394,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","No problem.  Just wondering, how did you manage to find this stuff?  What inspired you?",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/irsbugs,5,https://github.com/simh/simh/pull/1046#issuecomment-852770798,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","Hi Mark,

how did you manage to find this stuff?

A friend in our local Linux Users Group told me about simh.

What inspired you?

I used to work for DEC. As part of servicing the PDP11 computers it was necessary to write small programs in machine code. However, at the time, my code only used looping on CSR's, rather than using device interrupts. So last year I experimented with the simh/pdp11. I wrote a program called 'stop-watch' that uses device interrupts for the KW11 and the console. It is posted on my github repository... https://github.com/irsbugs/pdp11-code
In the 1990's I was too busy working to find the time to learn the Alpha instruction set. So this year I compiled the simh/alpha code to experiment with writing Alpha machine code. I'm part way through writing a Python/GTK GUI application that will show how Alpha instructions are constructed. The 32 bits of each instruction are displayed and manipulation of the instructions registers and displacements, etc. are performed via slide and spin control widgets. Once an instruction is constructed my program passes its hex code to simh/alpha to retrieve the mnemonic.
On launching my Python program it reads the simh/alpha alpha_sys.c file to get the lists of mnemonics and the hex of the instructions. So, that explains how I spotted some typo's in the files 'const char *opcode[]' and 'const uint32 opval[]' data.
When I get my 'Alpha Instruction Builder' program operational I post it on my github repository.
cheers, Ian.",True,{}
simh/simh,https://github.com/simh/simh,1046,2021-05-26T10:22:49Z,2021-06-03T18:14:20Z,2021-06-03T18:14:20Z,CLOSED,False,6,6,1,https://github.com/irsbugs,Update alpha_sys.c,1,[],https://github.com/simh/simh/pull/1046,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1046#issuecomment-853932304,"Correct typos in 4 x mnemonics in const char *opcode[]. Remove 7 x extra space characters in const uint32 opval[].
Four corrections to typos in mnemonics in const char *opcode[] in alpha_sys.c:
_L should be _C for opcodes 2E and 2F.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 2E
sim> ev -m 0xB8000000
0:	STL_L R0,0(R0)
4:	00000000B8000000
sim>
sim> ; Opcode 2F
sim> ev -m 0xBC000000
0:	STQ_L R0,0(R0)
4:	00000000BC000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
There are no instructions with the mnemonics STL_L or STQ_L, but there are STL_C and STQ_C.
The nmemonics are correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_STL_C:                                      /* STL_C /
case OP_STQ_C:                                      / STQ_C */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line:
""STL"", ""STQ"", ""STL_L"", ""STQ_L"",
has been corrected to be:
""STL"", ""STQ"", ""STL_C"", ""STQ_C"",
=====
BF should be FB in mnemonic for Opcode 36.
Alpha simulator V4.0-0 Current        git commit id: 3c1c92d
sim> ; Opcode 36
sim> ev -m 0xD8000000
0:	BFGE R0,4
4:	00000000D8000000
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
FBGE Bra 36 Floating branch if ≥ zero
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case OP_FBGT:                                       /* FBGT */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""BSR"", ""FBNE"", ""BFGE"", ""FBGT"",
has been corrected to be...
""BSR"", ""FBNE"", ""FBGE"", ""FBGT"",
=====
MULLQ/V should MULQ/V as the mnemonic for Opcode 13.60
sim> ; Opcode 13.60
sim> ev -m 0x4C000C00
0:	MULLQ/V R0,R0,R0
4:	000000004C000C00
sim>
According to, Alpha Architecture Handbook V4, October 1998, Table C2:
MULQ/V Opr 13.60 Multiply quadword
This is correct in https://github.com/simh/simh/blob/master/alpha/alpha_cpu.c
case 0x60:                                      /* MULQ/V */
but in https://github.com/simh/simh/blob/master/alpha/alpha_sys.c
In const char *opcode[] = { the line
""MULL/V"", ""MULLQ/V"",
has been corrected to be:
""MULL/V"", ""MULQ/V"",
======
In alpha.sys.c the const uint32 opval[] had seven cases of double space characters. These extra space characters have been removed.","Hi Ian,


how did you manage to find this stuff?

A friend in our local Linux Users Group told me about simh.

What inspired you?

I used to work for DEC. As part of servicing the PDP11 computers it was necessary to write small programs in machine code. However, at the time, my code only used looping on CSR's, rather than using device interrupts. So last year I experimented with the simh/pdp11. I wrote a program called 'stop-watch' that uses device interrupts for the KW11 and the console. It is posted on my github repository... https://github.com/irsbugs/pdp11-code
In the 1990's I was too busy working to find the time to learn the Alpha instruction set. So this year I compiled the simh/alpha code to experiment with writing Alpha machine code. I'm part way through writing a Python/GTK GUI application that will show how Alpha instructions are constructed. The 32 bits of each instruction are displayed and manipulation of the instructions registers and displacements, etc. are performed via slide and spin control widgets. Once an instruction is constructed my program passes its hex code to simh/alpha to retrieve the mnemonic.
On launching my Python program it reads the simh/alpha alpha_sys.c file to get the lists of mnemonics and the hex of the instructions. So, that explains how I spotted some typo's in the files 'const char *opcode[]' and 'const uint32 opval[]' data.
When I get my 'Alpha Instruction Builder' program operational I post it on my github repository.

That's a good story. :-)
Your changes have been merged via Cherry Pick crediting you as author.

Mark",True,{}
simh/simh,https://github.com/simh/simh,1049,2021-06-13T07:24:28Z,2021-06-22T11:00:16Z,2021-06-22T11:00:16Z,CLOSED,False,5,5,1,https://github.com/irsbugs,alpha: Correct instruction mnemonics and hex values,1,[],https://github.com/simh/simh/pull/1049,https://github.com/irsbugs,1,https://github.com/simh/simh/pull/1049,"Corrections. The following lines have been changed to:
Line 307:  ""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
Line 310:  ""STF"", ""STG"", ""STS"", ""STT"",
Line 355:  0x400001E0, C_IO, 0x40000240, C_IO, 0x40000360, C_IO, 0x400003A0, C_IO,
Line 464:  0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
Line 472:  0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
Breakdown of changes:

The Opcode 24(hex), 0x90000000, returns the mnemonic ""STS"" when it should return ""STF""...

Alpha simulator V4.0-0 Current        git commit id: e7169d4
sim> ; Opcode 24. Incorrectly returning ""STS"" instead of ""STF"",
sim> ev -m 0x90000000
0:	STS R0,0(R0)
4:	0000000090000000
sim> ; Note that Opcode 26 correctly returns mnemonic ""STS"".
sim> ; Opcode 26
sim> ev -m 0x98000000
0:	STS R0,0(R0)
4:	0000000098000000
sim>
According to Alpha Architecture Handbook V4 October 1998. Table C2.
STF Mem 24 Store F_floating
STS Mem 26 Store S_floating
Line 310 in the file alpha_sys.c in const char *opcode[] contains...
""STS"", ""STG"", ""STS"", ""STT"",
Corrected to...
""STF"", ""STG"", ""STS"", ""STT"",
=====

In the file alpha_sys.c the const uint32 opval[] contains a duplication of ""0x70000780""
in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000780, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order.
1C.3B MINUW4. This is an instruction of 0x70000760
1C.3C MAXUB8. This is an instruction of 0x70000780
Corrected lines 472 and 473 to be ""0x70000760"" followed by ""0x70000780""...
0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
=====

After applying the correction above the file alpha_sys.c in the const uint32 opval[] now contains in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
This above corresponds with the following mnemonics from the file alpha_sys.c in the const char *opcode[] in lines 306 and 307...
""MINSB8"", ""MINSW4"", ""MINUB8"", ""MINUW4"",
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
According to the alpha_cpu.c file...
line 1430        case 0x38:                                      /* MINSB8 /
line 1439        case 0x39:                                      / MINSW4 /
line 1448        case 0x3A:                                      / MINUB8 /
line 1457        case 0x3B:                                      / MINUW4 /
line 1466        case 0x3C:                                      / MAXUB8 /
line 1475        case 0x3D:                                      / MAXUW4 /
line 1484        case 0x3E:                                      / MAXSB8 /
line 1493        case 0x3F:                                      / MAXSW4 */
According to Alpha Archtecture Handbook V4 October 1998 Table C–8: Common Architecture Opcodes in Numerical Order...
1C.38 MINSB8
1C.39 MINSW4
1C.3A MINUB8
1C.3B MINUW4
1C.3C MAXUB8
1C.3D MAXUW4
1C.3E MAXSB8
1C.3F MAXSW4
Thus line 307...
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
has been corrected to be:
""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
=====

Hex function code incorrect for CMPBGE instruction.

sim> ev CMPBGE R0,R0,R0
0:	00000000400001C0
The function bits ""1C"" in the CMPBGE instruction provide a function of ""E"".
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
10.0F CMPBGE
i.e. The function code should be ""F"".
In alpha_sys.c, in const uint32 opval[], line 355 incorrectly contains:
0x400001C0, C_IO,
This has been changed to:
0x400001E0, C_IO,
=====

Three CVTQL hex codes are incorrect.

sim> ev CVTQL R0,R0
0:	000000005FE00060
sim> ev CVTQL/V R0,R0
0:	000000005FE00260
sim> ev CVTQL/SV R0,R0
0:	000000005FE00A60
The above hex instructions decode their opcode and functions as follows:
CVTQL is 5FE00060 which decodes as: 17.003
CVTQL/V is 5FE00260 which decodes as: 17.013
CVTQL/SV is 5FE00A60 which decodes as: 17.053
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
17.030 CVTQL
17.130 CVTQL/V
17.530 CVTQL/SV
Thus in alpha_sys.c, in const uint32 opval[], line 464 incorrectly states:
0x5FE00060, C_IBC, 0x5FE00260, C_IBC, 0x5FE00A60, C_IBC,
This line has been corrected to:
0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
=====
Testing of the above changes applied to alpha_sys.c:
$ ./alpha
Alpha simulator V4.0-0
sim>; Compiled with an updated version of the alpha_sys.c
sim> ev -m 0x90000000
0:	STF R0,0(R0)
4:	0000000090000000
sim> ev MINUW4 R0,R0,R0
0:	0000000070000760
sim> ev -m 0x70000780
0:	MAXUB8 R0,R0,R0
4:	0000000070000780
sim> ev -m 0x700007A0
0:	MAXUW4 R0,R0,R0
4:	00000000700007A0
sim> ev -m 0x700007C0
0:	MAXSB8 R0,R0,R0
4:	00000000700007C0
sim> ev -m 0x700007E0
0:	MAXSW4 R0,R0,R0
4:	00000000700007E0
sim> ev -m 0x400001E0
0:	CMPBGE R0,R0,R0
4:	00000000400001E0
sim> ev CVTQL R0,R0
0:	000000005FE00600
sim> ev CVTQL/V R0,R0
0:	000000005FE02600
sim> ev CVTQL/SV R0,R0
0:	000000005FE0A600
=====","Corrections. The following lines have been changed to:
Line 307:  ""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
Line 310:  ""STF"", ""STG"", ""STS"", ""STT"",
Line 355:  0x400001E0, C_IO, 0x40000240, C_IO, 0x40000360, C_IO, 0x400003A0, C_IO,
Line 464:  0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
Line 472:  0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
Breakdown of changes:

The Opcode 24(hex), 0x90000000, returns the mnemonic ""STS"" when it should return ""STF""...

Alpha simulator V4.0-0 Current        git commit id: e7169d4
sim> ; Opcode 24. Incorrectly returning ""STS"" instead of ""STF"",
sim> ev -m 0x90000000
0:	STS R0,0(R0)
4:	0000000090000000
sim> ; Note that Opcode 26 correctly returns mnemonic ""STS"".
sim> ; Opcode 26
sim> ev -m 0x98000000
0:	STS R0,0(R0)
4:	0000000098000000
sim>
According to Alpha Architecture Handbook V4 October 1998. Table C2.
STF Mem 24 Store F_floating
STS Mem 26 Store S_floating
Line 310 in the file alpha_sys.c in const char *opcode[] contains...
""STS"", ""STG"", ""STS"", ""STT"",
Corrected to...
""STF"", ""STG"", ""STS"", ""STT"",
=====

In the file alpha_sys.c the const uint32 opval[] contains a duplication of ""0x70000780""
in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000780, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order.
1C.3B MINUW4. This is an instruction of 0x70000760
1C.3C MAXUB8. This is an instruction of 0x70000780
Corrected lines 472 and 473 to be ""0x70000760"" followed by ""0x70000780""...
0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
=====

After applying the correction above the file alpha_sys.c in the const uint32 opval[] now contains in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
This above corresponds with the following mnemonics from the file alpha_sys.c in the const char *opcode[] in lines 306 and 307...
""MINSB8"", ""MINSW4"", ""MINUB8"", ""MINUW4"",
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
According to the alpha_cpu.c file...
line 1430        case 0x38:                                      /* MINSB8 /
line 1439        case 0x39:                                      / MINSW4 /
line 1448        case 0x3A:                                      / MINUB8 /
line 1457        case 0x3B:                                      / MINUW4 /
line 1466        case 0x3C:                                      / MAXUB8 /
line 1475        case 0x3D:                                      / MAXUW4 /
line 1484        case 0x3E:                                      / MAXSB8 /
line 1493        case 0x3F:                                      / MAXSW4 */
According to Alpha Archtecture Handbook V4 October 1998 Table C–8: Common Architecture Opcodes in Numerical Order...
1C.38 MINSB8
1C.39 MINSW4
1C.3A MINUB8
1C.3B MINUW4
1C.3C MAXUB8
1C.3D MAXUW4
1C.3E MAXSB8
1C.3F MAXSW4
Thus line 307...
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
has been corrected to be:
""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
=====

Hex function code incorrect for CMPBGE instruction.

sim> ev CMPBGE R0,R0,R0
0:	00000000400001C0
The function bits ""1C"" in the CMPBGE instruction provide a function of ""E"".
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
10.0F CMPBGE
i.e. The function code should be ""F"".
In alpha_sys.c, in const uint32 opval[], line 355 incorrectly contains:
0x400001C0, C_IO,
This has been changed to:
0x400001E0, C_IO,
=====

Three CVTQL hex codes are incorrect.

sim> ev CVTQL R0,R0
0:	000000005FE00060
sim> ev CVTQL/V R0,R0
0:	000000005FE00260
sim> ev CVTQL/SV R0,R0
0:	000000005FE00A60
The above hex instructions decode their opcode and functions as follows:
CVTQL is 5FE00060 which decodes as: 17.003
CVTQL/V is 5FE00260 which decodes as: 17.013
CVTQL/SV is 5FE00A60 which decodes as: 17.053
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
17.030 CVTQL
17.130 CVTQL/V
17.530 CVTQL/SV
Thus in alpha_sys.c, in const uint32 opval[], line 464 incorrectly states:
0x5FE00060, C_IBC, 0x5FE00260, C_IBC, 0x5FE00A60, C_IBC,
This line has been corrected to:
0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
=====
Testing of the above changes applied to alpha_sys.c:
$ ./alpha
Alpha simulator V4.0-0
sim>; Compiled with an updated version of the alpha_sys.c
sim> ev -m 0x90000000
0:	STF R0,0(R0)
4:	0000000090000000
sim> ev MINUW4 R0,R0,R0
0:	0000000070000760
sim> ev -m 0x70000780
0:	MAXUB8 R0,R0,R0
4:	0000000070000780
sim> ev -m 0x700007A0
0:	MAXUW4 R0,R0,R0
4:	00000000700007A0
sim> ev -m 0x700007C0
0:	MAXSB8 R0,R0,R0
4:	00000000700007C0
sim> ev -m 0x700007E0
0:	MAXSW4 R0,R0,R0
4:	00000000700007E0
sim> ev -m 0x400001E0
0:	CMPBGE R0,R0,R0
4:	00000000400001E0
sim> ev CVTQL R0,R0
0:	000000005FE00600
sim> ev CVTQL/V R0,R0
0:	000000005FE02600
sim> ev CVTQL/SV R0,R0
0:	000000005FE0A600
=====",True,{}
simh/simh,https://github.com/simh/simh,1049,2021-06-13T07:24:28Z,2021-06-22T11:00:16Z,2021-06-22T11:00:16Z,CLOSED,False,5,5,1,https://github.com/irsbugs,alpha: Correct instruction mnemonics and hex values,1,[],https://github.com/simh/simh/pull/1049,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1049#issuecomment-865884465,"Corrections. The following lines have been changed to:
Line 307:  ""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
Line 310:  ""STF"", ""STG"", ""STS"", ""STT"",
Line 355:  0x400001E0, C_IO, 0x40000240, C_IO, 0x40000360, C_IO, 0x400003A0, C_IO,
Line 464:  0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
Line 472:  0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
Breakdown of changes:

The Opcode 24(hex), 0x90000000, returns the mnemonic ""STS"" when it should return ""STF""...

Alpha simulator V4.0-0 Current        git commit id: e7169d4
sim> ; Opcode 24. Incorrectly returning ""STS"" instead of ""STF"",
sim> ev -m 0x90000000
0:	STS R0,0(R0)
4:	0000000090000000
sim> ; Note that Opcode 26 correctly returns mnemonic ""STS"".
sim> ; Opcode 26
sim> ev -m 0x98000000
0:	STS R0,0(R0)
4:	0000000098000000
sim>
According to Alpha Architecture Handbook V4 October 1998. Table C2.
STF Mem 24 Store F_floating
STS Mem 26 Store S_floating
Line 310 in the file alpha_sys.c in const char *opcode[] contains...
""STS"", ""STG"", ""STS"", ""STT"",
Corrected to...
""STF"", ""STG"", ""STS"", ""STT"",
=====

In the file alpha_sys.c the const uint32 opval[] contains a duplication of ""0x70000780""
in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000780, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order.
1C.3B MINUW4. This is an instruction of 0x70000760
1C.3C MAXUB8. This is an instruction of 0x70000780
Corrected lines 472 and 473 to be ""0x70000760"" followed by ""0x70000780""...
0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
=====

After applying the correction above the file alpha_sys.c in the const uint32 opval[] now contains in lines 472 and 473...

0x70000700, C_IO, 0x70000720, C_IO, 0x70000740, C_IO, 0x70000760, C_IO,
0x70000780, C_IO, 0x700007A0, C_IO, 0x700007C0, C_IO, 0x700007E0, C_IO,
This above corresponds with the following mnemonics from the file alpha_sys.c in the const char *opcode[] in lines 306 and 307...
""MINSB8"", ""MINSW4"", ""MINUB8"", ""MINUW4"",
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
According to the alpha_cpu.c file...
line 1430        case 0x38:                                      /* MINSB8 /
line 1439        case 0x39:                                      / MINSW4 /
line 1448        case 0x3A:                                      / MINUB8 /
line 1457        case 0x3B:                                      / MINUW4 /
line 1466        case 0x3C:                                      / MAXUB8 /
line 1475        case 0x3D:                                      / MAXUW4 /
line 1484        case 0x3E:                                      / MAXSB8 /
line 1493        case 0x3F:                                      / MAXSW4 */
According to Alpha Archtecture Handbook V4 October 1998 Table C–8: Common Architecture Opcodes in Numerical Order...
1C.38 MINSB8
1C.39 MINSW4
1C.3A MINUB8
1C.3B MINUW4
1C.3C MAXUB8
1C.3D MAXUW4
1C.3E MAXSB8
1C.3F MAXSW4
Thus line 307...
""MAXSB8"", ""MAXSW4"", ""MAXUB8"", ""MAXUW4"",
has been corrected to be:
""MAXUB8"", ""MAXUW4"", ""MAXSB8"", ""MAXSW4"",
=====

Hex function code incorrect for CMPBGE instruction.

sim> ev CMPBGE R0,R0,R0
0:	00000000400001C0
The function bits ""1C"" in the CMPBGE instruction provide a function of ""E"".
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
10.0F CMPBGE
i.e. The function code should be ""F"".
In alpha_sys.c, in const uint32 opval[], line 355 incorrectly contains:
0x400001C0, C_IO,
This has been changed to:
0x400001E0, C_IO,
=====

Three CVTQL hex codes are incorrect.

sim> ev CVTQL R0,R0
0:	000000005FE00060
sim> ev CVTQL/V R0,R0
0:	000000005FE00260
sim> ev CVTQL/SV R0,R0
0:	000000005FE00A60
The above hex instructions decode their opcode and functions as follows:
CVTQL is 5FE00060 which decodes as: 17.003
CVTQL/V is 5FE00260 which decodes as: 17.013
CVTQL/SV is 5FE00A60 which decodes as: 17.053
According to the Alpha Architecture Handbook V4 October 1998, Table C–8: Common Architecture Opcodes in Numerical Order:
17.030 CVTQL
17.130 CVTQL/V
17.530 CVTQL/SV
Thus in alpha_sys.c, in const uint32 opval[], line 464 incorrectly states:
0x5FE00060, C_IBC, 0x5FE00260, C_IBC, 0x5FE00A60, C_IBC,
This line has been corrected to:
0x5FE00600, C_IBC, 0x5FE02600, C_IBC, 0x5FE0A600, C_IBC,
=====
Testing of the above changes applied to alpha_sys.c:
$ ./alpha
Alpha simulator V4.0-0
sim>; Compiled with an updated version of the alpha_sys.c
sim> ev -m 0x90000000
0:	STF R0,0(R0)
4:	0000000090000000
sim> ev MINUW4 R0,R0,R0
0:	0000000070000760
sim> ev -m 0x70000780
0:	MAXUB8 R0,R0,R0
4:	0000000070000780
sim> ev -m 0x700007A0
0:	MAXUW4 R0,R0,R0
4:	00000000700007A0
sim> ev -m 0x700007C0
0:	MAXSB8 R0,R0,R0
4:	00000000700007C0
sim> ev -m 0x700007E0
0:	MAXSW4 R0,R0,R0
4:	00000000700007E0
sim> ev -m 0x400001E0
0:	CMPBGE R0,R0,R0
4:	00000000400001E0
sim> ev CVTQL R0,R0
0:	000000005FE00600
sim> ev CVTQL/V R0,R0
0:	000000005FE02600
sim> ev CVTQL/SV R0,R0
0:	000000005FE0A600
=====","Merged via Cherry Pick.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1055,2021-07-26T00:38:21Z,2021-07-26T15:15:34Z,2021-07-26T15:15:34Z,MERGED,True,11,1,1,https://github.com/hharte,wd179x: Add support for wd1795/7 side select output.,1,[],https://github.com/simh/simh/pull/1055,https://github.com/hharte,1,https://github.com/simh/simh/pull/1055,"@psco, @markpizz : FYI, this adds support for the WD1795 / 1797 side select output.","@psco, @markpizz : FYI, this adds support for the WD1795 / 1797 side select output.",True,{}
simh/simh,https://github.com/simh/simh,1055,2021-07-26T00:38:21Z,2021-07-26T15:15:34Z,2021-07-26T15:15:34Z,MERGED,True,11,1,1,https://github.com/hharte,wd179x: Add support for wd1795/7 side select output.,1,[],https://github.com/simh/simh/pull/1055,https://github.com/psco,2,https://github.com/simh/simh/pull/1055#issuecomment-886454158,"@psco, @markpizz : FYI, this adds support for the WD1795 / 1797 side select output.",This looks fine. Thank you Howard.,True,{}
simh/simh,https://github.com/simh/simh,1058,2021-07-28T03:28:57Z,2021-07-28T11:51:29Z,2021-07-28T11:51:29Z,MERGED,True,3,0,2,https://github.com/hharte,wd179x: Keep WD179X_INFO_PUB in sync.,1,[],https://github.com/simh/simh/pull/1058,https://github.com/hharte,1,https://github.com/simh/simh/pull/1058,"FYI, @psco , @markpizz","FYI, @psco , @markpizz",True,{}
simh/simh,https://github.com/simh/simh,1058,2021-07-28T03:28:57Z,2021-07-28T11:51:29Z,2021-07-28T11:51:29Z,MERGED,True,3,0,2,https://github.com/hharte,wd179x: Keep WD179X_INFO_PUB in sync.,1,[],https://github.com/simh/simh/pull/1058,https://github.com/psco,2,https://github.com/simh/simh/pull/1058#issuecomment-888093283,"FYI, @psco , @markpizz",Looks ok. Thank you Howard!,True,{}
simh/simh,https://github.com/simh/simh,1061,2021-07-31T19:25:18Z,2021-07-31T19:50:30Z,2021-07-31T19:50:30Z,MERGED,True,38,1,3,https://github.com/sethm,3B2: Add DGMON SBD diagnostic tests,1,[],https://github.com/simh/simh/pull/1061,https://github.com/sethm,1,https://github.com/simh/simh/pull/1061,"This commit adds support for automatically running DGMON SBD diagnostic tests on build.
Additionally, a small bug is fixed in simulator boot caused by failure to parse boot switches.","This commit adds support for automatically running DGMON SBD diagnostic tests on build.
Additionally, a small bug is fixed in simulator boot caused by failure to parse boot switches.",True,{}
simh/simh,https://github.com/simh/simh,1066,2021-08-09T18:11:37Z,2021-08-09T18:26:31Z,2021-08-11T14:53:31Z,MERGED,True,6081,799,38,https://github.com/sethm,3B2: Rev 3 Development Base,1,[],https://github.com/simh/simh/pull/1066,https://github.com/sethm,1,https://github.com/simh/simh/pull/1066,"This change introduces initial support for the AT&T 3B2 Rev 3 platform, based
around the WE32200 CPU with up to 64MB of RAM and SCSI disk and tape support.
This simulator is experimental and not yet supported. It will not be built by
default, but can be built with:
 make 3b2-600

Or by using the 3B2-600 Windows Visual Studio project.","This change introduces initial support for the AT&T 3B2 Rev 3 platform, based
around the WE32200 CPU with up to 64MB of RAM and SCSI disk and tape support.
This simulator is experimental and not yet supported. It will not be built by
default, but can be built with:
 make 3b2-600

Or by using the 3B2-600 Windows Visual Studio project.",True,{}
simh/simh,https://github.com/simh/simh,1066,2021-08-09T18:11:37Z,2021-08-09T18:26:31Z,2021-08-11T14:53:31Z,MERGED,True,6081,799,38,https://github.com/sethm,3B2: Rev 3 Development Base,1,[],https://github.com/simh/simh/pull/1066,https://github.com/psco,2,https://github.com/simh/simh/pull/1066#issuecomment-896538069,"This change introduces initial support for the AT&T 3B2 Rev 3 platform, based
around the WE32200 CPU with up to 64MB of RAM and SCSI disk and tape support.
This simulator is experimental and not yet supported. It will not be built by
default, but can be built with:
 make 3b2-600

Or by using the 3B2-600 Windows Visual Studio project.","Xcode on MacOS chokes on the angled brackets
#include <sim_defs.h> (line 46 in 3b2_cpu.c)
and
#include <scp.h> (line 33 in 3b2_rev3_mmu.c)
Changing this to
#include ""sim_defs.h""
resp.
#include ""scp.h""
solves the problem.",True,{}
simh/simh,https://github.com/simh/simh,1066,2021-08-09T18:11:37Z,2021-08-09T18:26:31Z,2021-08-11T14:53:31Z,MERGED,True,6081,799,38,https://github.com/sethm,3B2: Rev 3 Development Base,1,[],https://github.com/simh/simh/pull/1066,https://github.com/markpizz,3,https://github.com/simh/simh/pull/1066#issuecomment-896864870,"This change introduces initial support for the AT&T 3B2 Rev 3 platform, based
around the WE32200 CPU with up to 64MB of RAM and SCSI disk and tape support.
This simulator is experimental and not yet supported. It will not be built by
default, but can be built with:
 make 3b2-600

Or by using the 3B2-600 Windows Visual Studio project.","Actually, less is better.

Remove ""#include <sim_defs.h>"" from 3b2_cpu.c, remove ""#include <scp.h>"" from 3b2_rev3_mmu.c

This should solve the XCode problem.  @pcsco, it would be nice if you could show me how to setup the XCode case that failed on MacOS on my environment.  Simple compiling with make from a terminal window works without error.  I've got XCode installed so I should be ready to go.

'#include ""sim_defs.h""' really shouldn't be done anywhere except one form or another of 3b2_defs.h (or the model specific variants of that 3b2_rev2_defs.h).   Any current specific cases of ""#include ""sim_defs.h"" in some include files should probably be replaced by '#include ""3b2_defs.h""'",True,{}
simh/simh,https://github.com/simh/simh,1066,2021-08-09T18:11:37Z,2021-08-09T18:26:31Z,2021-08-11T14:53:31Z,MERGED,True,6081,799,38,https://github.com/sethm,3B2: Rev 3 Development Base,1,[],https://github.com/simh/simh/pull/1066,https://github.com/sethm,4,https://github.com/simh/simh/pull/1066#issuecomment-896896320,"This change introduces initial support for the AT&T 3B2 Rev 3 platform, based
around the WE32200 CPU with up to 64MB of RAM and SCSI disk and tape support.
This simulator is experimental and not yet supported. It will not be built by
default, but can be built with:
 make 3b2-600

Or by using the 3B2-600 Windows Visual Studio project.","Yes, agreed, I will pull the two offending includes out, as well as removing the unnecessary sim_defs.h includes. They don't belong there and they serve no purposes. I'll prepare a PR.",True,{}
simh/simh,https://github.com/simh/simh,1068,2021-08-11T02:36:02Z,2021-08-11T14:29:00Z,2021-08-11T14:46:07Z,MERGED,True,6,0,1,https://github.com/sethm,3B2: Do not read from detached floppy,1,[],https://github.com/simh/simh/pull/1068,https://github.com/sethm,1,https://github.com/simh/simh/pull/1068,"The Rev 3 firmware does not check floppy controller status before
commanding a sector read, which can lead to calling sim_disk_rdsect()
on a detached unit. With this checkin, the simulator will no longer
attempt a read or write if the floppy unit is not attached.","The Rev 3 firmware does not check floppy controller status before
commanding a sector read, which can lead to calling sim_disk_rdsect()
on a detached unit. With this checkin, the simulator will no longer
attempt a read or write if the floppy unit is not attached.",True,{}
simh/simh,https://github.com/simh/simh,1069,2021-08-11T16:40:13Z,2021-08-12T03:38:37Z,2021-08-12T03:38:37Z,MERGED,True,235,131,40,https://github.com/sethm,3B2: Header cleanup,1,[],https://github.com/simh/simh/pull/1069,https://github.com/sethm,1,https://github.com/simh/simh/pull/1069,Remove unnecessary include directives and improve include hygiene.,Remove unnecessary include directives and improve include hygiene.,True,{}
simh/simh,https://github.com/simh/simh,1069,2021-08-11T16:40:13Z,2021-08-12T03:38:37Z,2021-08-12T03:38:37Z,MERGED,True,235,131,40,https://github.com/sethm,3B2: Header cleanup,1,[],https://github.com/simh/simh/pull/1069,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1069#issuecomment-896992213,Remove unnecessary include directives and improve include hygiene.,"I'm thinking you may have gone too far with removing includes.  For example, in 3b2_cpu.c you removed 3b2_cpu.h (and similarly for numerous other .c files).  I've found that having the module's include file included in the source it defines interfaces for provides the easiest place for declaration inconsistencies to be noticed and flagged by compilers.  Without this, on some platforms link time checking might catch such inconsistencies, while on others, nothing may be noticed and you're left with runtime issues which may send you into the weeds...",True,{}
simh/simh,https://github.com/simh/simh,1069,2021-08-11T16:40:13Z,2021-08-12T03:38:37Z,2021-08-12T03:38:37Z,MERGED,True,235,131,40,https://github.com/sethm,3B2: Header cleanup,1,[],https://github.com/simh/simh/pull/1069,https://github.com/sethm,3,https://github.com/simh/simh/pull/1069#issuecomment-897269767,Remove unnecessary include directives and improve include hygiene.,"I agree it would be worth taking another pass at this, but it's a larger change than I'll be able to make in the next day or two. Unfortunately, the 3B2 headers are structured poorly right now and I've found it's very tricky not to introduce cycles. This can be fixed, of course, but it will involve some thought so it's done correctly.
I'll keep this PR open and work on the changes, making sure that my master branch in fully in sync with upstream master before I force-push a new update.",True,{}
simh/simh,https://github.com/simh/simh,1069,2021-08-11T16:40:13Z,2021-08-12T03:38:37Z,2021-08-12T03:38:37Z,MERGED,True,235,131,40,https://github.com/sethm,3B2: Header cleanup,1,[],https://github.com/simh/simh/pull/1069,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1069#issuecomment-897304803,Remove unnecessary include directives and improve include hygiene.,"well, I just looked closer at what you're doing and as long as you include ALL of the modules' .h files in 3b2_defs.h, then the interfaces for each .c file will absolutely explicitly be declared and thus visible at compile time so that inconsistent declarations vs implementations can be reported.  I'm going to merge this now so that the MacOS XCode stuff gets in.  If you want to reorganize the includes later go ahead and submit a pull request at that time.",True,{}
simh/simh,https://github.com/simh/simh,1069,2021-08-11T16:40:13Z,2021-08-12T03:38:37Z,2021-08-12T03:38:37Z,MERGED,True,235,131,40,https://github.com/sethm,3B2: Header cleanup,1,[],https://github.com/simh/simh/pull/1069,https://github.com/sethm,5,https://github.com/simh/simh/pull/1069#issuecomment-897307535,Remove unnecessary include directives and improve include hygiene.,"Damn, it looks like I raced you, I'm sorry about that.
If you prefer, I'll back out the change I just pushed and JUST fix the XCode compilation issue, with no other changes.",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/sethm,1,https://github.com/simh/simh/pull/1071,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1071#issuecomment-903434794,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","Fix this First:
1>3b2_rev3_timer.c
1>..\3B2\3b2_rev3_timer.c(125) : warning C4101: 't' : unreferenced local variable
1>..\3B2\3b2_rev3_timer.c(218) : warning C4101: 'time' : unreferenced local variable
1>..\3B2\3b2_rev3_timer.c(269) : warning C4101: 'time' : unreferenced local variable",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/sethm,3,https://github.com/simh/simh/pull/1071#issuecomment-903878660,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.",The unreferenced local variable warnings are now fixed following my force-push.,True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1071#issuecomment-904061813,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","Thanks for the compile cleanup.
Meanwhile, I just paid enough attention to your commit comments for this.  Specifically:

The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.

For all simulators I've made specific effort to avoid compile time inputs that change behavior or functionality.  The goal would be for no user to have to recompile the simulators with different options to get different functionality.  Such options should usually be selected during simulator runtime by some sort of SET command or possibly different arguments to a BOOT command.
As far as implementing such an option (via SET or BOOT) it seems slightly complicated when using BuildROMs created include files, but not particularly hard.  The VAX750 simulator has two dynamically alternate boot ROMs and they're both included in vax750_mem.c.  It includes two boot rom include files using ""#undef BOOT_CODE_SIZE"", etc. between the respective includes.  The BOOT command for this simulator parses it's argument and based on the value uses one of the ROMs which are distinguished by the array name that each respective rom is known by.
However, to make multiple alternate ROM support somewhat easier, I've just reworked BuildROMs to define unique #define symbols (BOOT_CODE_SIZE_n, BOOT_CODE_FILENAME_n, BOOT_CODE_ARRAY_n) in the case where multiple ROM includes are performed.  No need to #undef anything.  These #defined symbols could then be used to potentially populate an array initialization.",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/markpizz,5,https://github.com/simh/simh/pull/1071#issuecomment-904082542,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","Arggh...
I broke the 3b2 build with the change to the BuildROMs output.  It was broken due to the fact that in 3b2_rev2_mmu.h you had defined the BOOT_CODE_SIZE name and the changed ROM definition files now explictly only define BOOT_CODE_SIZE, BOOT_CODE_FILENAME and BOOT_CODE_ARRAY if BOOT_CODE_SIZE isn't defined.  This check is needed to avoid defining the same names with different values and causing a compile error.
I didn't catch this when I tested since I was working in a directory which had the commit for this PR and you must have stopped doing defining BOOT_CODE_SIZE anywhere.
I'll change the BuildROMs generated files to avoid the above mentioned check and just explicitly #undef each name before defining it while continuing to generate the BOOT_CODE_SIZE_n and related names.",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/sethm,6,https://github.com/simh/simh/pull/1071#issuecomment-904123831,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","I'll get my master branch cleaned up and in sync with upstream master, and then I'll redo the multiple ROM support.",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/markpizz,7,https://github.com/simh/simh/pull/1071#issuecomment-904134506,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","The build problem is now fixed.
Things will be stable for at least a day from my side.
Do you want to drop this PR and come back with a new one?  It doesn't matter to me, but the opening comment in this PR will no longer be valid...",True,{}
simh/simh,https://github.com/simh/simh,1071,2021-08-23T03:12:08Z,2021-08-23T21:19:47Z,2021-08-23T21:19:47Z,CLOSED,False,1709,731,39,https://github.com/sethm,3B2: Interrupt subsystem refactor,1,[],https://github.com/simh/simh/pull/1071,https://github.com/sethm,8,https://github.com/simh/simh/pull/1071#issuecomment-904141135,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO).  Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The DEMON Rev 2 Debug Monitor ROMs can now be optionally compiled
into the 3B2/400 simulator by passing ""-DDEMON"" at compile time.
Note that this will require also adding ""TESTS=0"" to avoid trying
to run the compile-time 3B2/400 diagnostic test harness, which is not
expecting the DEMON ROM.","Yup, I'll kill this PR and come back with a new one. Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1072,2021-08-24T01:00:58Z,2021-08-24T15:24:37Z,2021-08-24T16:14:54Z,MERGED,True,1786,765,41,https://github.com/sethm,3B2: Interrupt Refactor and DEMON ROM,1,[],https://github.com/simh/simh/pull/1072,https://github.com/sethm,1,https://github.com/simh/simh/pull/1072,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO). Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The optional 3B2/400 Debug Monitor ROMs can now be booted by passing
the ""DEMON"" argument to the 3B2/400 simulator BOOT command. Any
of the following will cause the Debug Monitor ROM to be booted
instead of the standard 3B2/400 ROM:
 sim> BOOT DEMON
 sim> BOOT CPU DEMON
 sim> BOOT DEMON CPU","This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO). Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The optional 3B2/400 Debug Monitor ROMs can now be booted by passing
the ""DEMON"" argument to the 3B2/400 simulator BOOT command. Any
of the following will cause the Debug Monitor ROM to be booted
instead of the standard 3B2/400 ROM:
 sim> BOOT DEMON
 sim> BOOT CPU DEMON
 sim> BOOT DEMON CPU",True,{}
simh/simh,https://github.com/simh/simh,1072,2021-08-24T01:00:58Z,2021-08-24T15:24:37Z,2021-08-24T16:14:54Z,MERGED,True,1786,765,41,https://github.com/sethm,3B2: Interrupt Refactor and DEMON ROM,1,[],https://github.com/simh/simh/pull/1072,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1072#issuecomment-904331693,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO). Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The optional 3B2/400 Debug Monitor ROMs can now be booted by passing
the ""DEMON"" argument to the 3B2/400 simulator BOOT command. Any
of the following will cause the Debug Monitor ROM to be booted
instead of the standard 3B2/400 ROM:
 sim> BOOT DEMON
 sim> BOOT CPU DEMON
 sim> BOOT DEMON CPU","What are your thoughts about this warning:
In file included from ./3B2/3b2_rev3_mmu.c:31:
./3B2/3b2_rev3_mmu.c: In function ‘void put_sdce(uint32, uint32, uint32)’:
./3B2/3b2_rev3_mmu.h:170:37: warning: suggest parentheses around arithmetic in operand of ‘|’ [-Wparentheses]
  170 | #define SD_TO_SDCH(hi,lo)     ((hi) & SD_ADDR_MASK           |  \
      |                                     ^
./3B2/3b2_rev3_mmu.c:187:26: note: in expansion of macro ‘SD_TO_SDCH’
  187 |     mmu_state.sdch[ci] = SD_TO_SDCH(sd_hi, sd_lo);
      |                          ^~~~~~~~~~

If one set of parentheses are appropriate, then many would be for all expressions in 3b2_rev3_mmu.h from lines 171 thru 211.  It is up to you.",True,{}
simh/simh,https://github.com/simh/simh,1072,2021-08-24T01:00:58Z,2021-08-24T15:24:37Z,2021-08-24T16:14:54Z,MERGED,True,1786,765,41,https://github.com/sethm,3B2: Interrupt Refactor and DEMON ROM,1,[],https://github.com/simh/simh/pull/1072,https://github.com/sethm,3,https://github.com/simh/simh/pull/1072#issuecomment-904650845,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO). Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The optional 3B2/400 Debug Monitor ROMs can now be booted by passing
the ""DEMON"" argument to the 3B2/400 simulator BOOT command. Any
of the following will cause the Debug Monitor ROM to be booted
instead of the standard 3B2/400 ROM:
 sim> BOOT DEMON
 sim> BOOT CPU DEMON
 sim> BOOT DEMON CPU","I think it's a valid warning. I was only able to get it by compiling with GCC-11, oddly enough, but it's a good catch. I've added the parentheses and pushed, so I'm happy with the state of the macros in that file now.",True,{}
simh/simh,https://github.com/simh/simh,1072,2021-08-24T01:00:58Z,2021-08-24T15:24:37Z,2021-08-24T16:14:54Z,MERGED,True,1786,765,41,https://github.com/sethm,3B2: Interrupt Refactor and DEMON ROM,1,[],https://github.com/simh/simh/pull/1072,https://github.com/sethm,4,https://github.com/simh/simh/pull/1072#issuecomment-904665913,"This change introduces a full refactor of the interrupt subsystem
for the system board (SBD) and the I/O bus (CIO). Interrupt decode
should now be significantly faster, and not require an expensive
calculation on every step.


The TIMER device has been split into Rev 2 and Rev 3
implementations.


The optional 3B2/400 Debug Monitor ROMs can now be booted by passing
the ""DEMON"" argument to the 3B2/400 simulator BOOT command. Any
of the following will cause the Debug Monitor ROM to be booted
instead of the standard 3B2/400 ROM:
 sim> BOOT DEMON
 sim> BOOT CPU DEMON
 sim> BOOT DEMON CPU","Hmm, the vax8600 build seems to have failed diagnostics. Nothing I've touched should have interacted with other simulators, and I'm completely unfamiliar with the VAX diagnostics, so I'll let you look into it.",True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1074,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.","The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.",True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1074#issuecomment-907753383,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.","Why wouldn't each window have their own 'last' objects?  What's going on in one window is unrelated to what's going on in another, right?  Additionally the data in the 'last' objects are protected by a per window mutex.  Since there are different mutexes, there should be different 'last' objects.",True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/1074#issuecomment-907843983,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.",Sounds good.  I'll update the pull request.,True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1074#issuecomment-907844604,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.","On a related note.  I see that the current code is allocating and freeing these 'last' entries for each draw operation that happens.  Since draw operations happen very often the overhead of malloc and free for these things can be avoided by allocating them once and keeping the filled state in some sort of flag rather than merely the fact that the pointer is not NULL.  The buffer data is variable in size, so a separate variable would keep track of the allocated size and if, when it is to be filled, it is too small, it can be realloced and the buffer size updated.",True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/1074#issuecomment-911195223,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.",I'm on it.,True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/1074#issuecomment-912682341,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.","I updated to make the ""last"" data per-window.
I can take a look at the allocation optimization next.",True,{}
simh/simh,https://github.com/simh/simh,1074,2021-08-29T05:55:21Z,2021-09-04T13:06:25Z,2021-09-05T08:09:24Z,MERGED,True,15,13,1,https://github.com/larsbrinkhoff,VIDEO: Fix bug in vid_dst_last handling.,1,[],https://github.com/simh/simh/pull/1074,https://github.com/markpizz,7,https://github.com/simh/simh/pull/1074#issuecomment-912843405,"The handling of vid_dst_last and vid_data_last was not updated to work with multiple windows, which can cause window updates to be lost.
I'm posting this draft which fixes the problem by adding a new vid_vptr_last to keep track of the latest window making an update.  I'm not sure if this is preferable, or of each window should maintain their own vid_dst and data_last information.","In vid_draw_window(), the variable last is assigned a value WITHOUT being protected by the vid_draw_mutex,  That assignment should be done after the Mutex is locked.",True,{}
simh/simh,https://github.com/simh/simh,1075,2021-08-31T06:49:23Z,2021-08-31T10:39:32Z,2021-08-31T10:39:32Z,MERGED,True,50,46,1,https://github.com/psco,AltairZ80: Fix reset routine for DJ2D device,1,[],https://github.com/simh/simh/pull/1075,https://github.com/psco,1,https://github.com/simh/simh/pull/1075,,,True,{}
simh/simh,https://github.com/simh/simh,1080,2021-10-05T15:50:51Z,2021-10-05T17:15:57Z,2021-10-10T18:49:41Z,MERGED,True,23,24,1,https://github.com/sethm,3b2: Allow force interrupt if not attached,1,[],https://github.com/simh/simh/pull/1080,https://github.com/sethm,1,https://github.com/simh/simh/pull/1080,"This commit fixes an issue that caused 3B2 floppy diagnostics to fail if the floppy drive unit was not attached. The 3B2 floppy controller has a ""force interrupt"" command that should run whether or not the floppy unit is attached to an image.","This commit fixes an issue that caused 3B2 floppy diagnostics to fail if the floppy drive unit was not attached. The 3B2 floppy controller has a ""force interrupt"" command that should run whether or not the floppy unit is attached to an image.",True,{}
simh/simh,https://github.com/simh/simh,1082,2021-10-11T09:32:08Z,2021-10-11T16:19:51Z,2021-10-11T16:19:51Z,MERGED,True,61,8,4,https://github.com/hharte,AltairZ80: Add support for Z80 Mode 2 interrupts,2,[],https://github.com/simh/simh/pull/1082,https://github.com/hharte,1,https://github.com/simh/simh/pull/1082,"Some operating systems, like OASIS 5.6, make extensive use of Z80 Mode 2 interrupts.  Add support for them in the AltairZ80 CPU module, as well as the WD179x floppy controller and 2SIO UART.
FYI, @psco , @deltecent","Some operating systems, like OASIS 5.6, make extensive use of Z80 Mode 2 interrupts.  Add support for them in the AltairZ80 CPU module, as well as the WD179x floppy controller and 2SIO UART.
FYI, @psco , @deltecent",True,{}
simh/simh,https://github.com/simh/simh,1082,2021-10-11T09:32:08Z,2021-10-11T16:19:51Z,2021-10-11T16:19:51Z,MERGED,True,61,8,4,https://github.com/hharte,AltairZ80: Add support for Z80 Mode 2 interrupts,2,[],https://github.com/simh/simh/pull/1082,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1082#issuecomment-939964668,"Some operating systems, like OASIS 5.6, make extensive use of Z80 Mode 2 interrupts.  Add support for them in the AltairZ80 CPU module, as well as the WD179x floppy controller and 2SIO UART.
FYI, @psco , @deltecent","This doesn't build on Windows.
2>altairz80_cpu.c
2>..\AltairZ80\altairz80_cpu.c(2210) : error C2275: 'int32' : illegal use of this type as an expression
2>        d:\Projects\simh-zxz\sim_defs.h(206) : see declaration of 'int32'
2>..\AltairZ80\altairz80_cpu.c(2210) : error C2146: syntax error : missing ';' before identifier 'vectable'
2>..\AltairZ80\altairz80_cpu.c(2210) : error C2065: 'vectable' : undeclared identifier
2>..\AltairZ80\altairz80_cpu.c(2211) : error C2275: 'int32' : illegal use of this type as an expression
2>        d:\Projects\simh-zxz\sim_defs.h(206) : see declaration of 'int32'
2>..\AltairZ80\altairz80_cpu.c(2211) : error C2146: syntax error : missing ';' before identifier 'vector'

The problem is that the compiler only allows declarations immediately after an open brace.",True,{}
simh/simh,https://github.com/simh/simh,1082,2021-10-11T09:32:08Z,2021-10-11T16:19:51Z,2021-10-11T16:19:51Z,MERGED,True,61,8,4,https://github.com/hharte,AltairZ80: Add support for Z80 Mode 2 interrupts,2,[],https://github.com/simh/simh/pull/1082,https://github.com/psco,3,https://github.com/simh/simh/pull/1082#issuecomment-940122995,"Some operating systems, like OASIS 5.6, make extensive use of Z80 Mode 2 interrupts.  Add support for them in the AltairZ80 CPU module, as well as the WD179x floppy controller and 2SIO UART.
FYI, @psco , @deltecent","Apart from the Windows issue, ok from my side.",True,{}
simh/simh,https://github.com/simh/simh,1085,2021-10-18T12:28:27Z,2021-10-18T19:18:40Z,2021-10-21T06:29:22Z,MERGED,True,4,1,1,https://github.com/larsbrinkhoff,H316: Fix host interface word counts.,1,[],https://github.com/simh/simh/pull/1085,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1085,"The host interface uses the UDP packet format from the modem interface, with an additional flags word.  Ensure the flags are not included in the word count.  @charlesUnixPro, please check my reasoning is correct.","The host interface uses the UDP packet format from the modem interface, with an additional flags word.  Ensure the flags are not included in the word count.  @charlesUnixPro, please check my reasoning is correct.",True,{}
simh/simh,https://github.com/simh/simh,1085,2021-10-18T12:28:27Z,2021-10-18T19:18:40Z,2021-10-21T06:29:22Z,MERGED,True,4,1,1,https://github.com/larsbrinkhoff,H316: Fix host interface word counts.,1,[],https://github.com/simh/simh/pull/1085,https://github.com/charlesUnixPro,2,https://github.com/simh/simh/pull/1085#issuecomment-946035242,"The host interface uses the UDP packet format from the modem interface, with an additional flags word.  Ensure the flags are not included in the word count.  @charlesUnixPro, please check my reasoning is correct.","On Mon, Oct 18, 2021 at 5:28 AM Lars Brinkhoff ***@***.***> wrote:
 The host interface uses the UDP packet format from the modem interface,
 with an additional flags word. Ensure the flags are not included in the
 word count. @charlesUnixPro <https://github.com/charlesUnixPro>, please
 check my reasoning is correct.

Modulus that it has been a long time since I looked it the code, the fix
looks correct to me.
…
-- Charles",True,{}
simh/simh,https://github.com/simh/simh,1086,2021-10-20T19:44:11Z,2021-11-03T18:53:07Z,2021-11-03T18:53:07Z,CLOSED,False,22,8,1,https://github.com/Bikeman,Be less aggressive to disable throttling after initial calibration,1,[],https://github.com/simh/simh/pull/1086,https://github.com/Bikeman,1,https://github.com/simh/simh/pull/1086,"a) removed a somwhat unlikely but possible division-by-zero
b) in case the initial throttling calibration measures a slower cps rate than
the desired cps rate, check whether the measured rate is well below the
measured peak rate. If so, distrust the measured rate and instead use
half the peak rate as measured cps rate.
Otherwise (so measured cps is in the same ballpark as measured peak rate)
disable throttling
fix #815","a) removed a somwhat unlikely but possible division-by-zero
b) in case the initial throttling calibration measures a slower cps rate than
the desired cps rate, check whether the measured rate is well below the
measured peak rate. If so, distrust the measured rate and instead use
half the peak rate as measured cps rate.
Otherwise (so measured cps is in the same ballpark as measured peak rate)
disable throttling
fix #815",True,{}
simh/simh,https://github.com/simh/simh,1086,2021-10-20T19:44:11Z,2021-11-03T18:53:07Z,2021-11-03T18:53:07Z,CLOSED,False,22,8,1,https://github.com/Bikeman,Be less aggressive to disable throttling after initial calibration,1,[],https://github.com/simh/simh/pull/1086,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1086#issuecomment-950217390,"a) removed a somwhat unlikely but possible division-by-zero
b) in case the initial throttling calibration measures a slower cps rate than
the desired cps rate, check whether the measured rate is well below the
measured peak rate. If so, distrust the measured rate and instead use
half the peak rate as measured cps rate.
Otherwise (so measured cps is in the same ballpark as measured peak rate)
disable throttling
fix #815","Thank you for digging into this!
I've merged your change with minor reformatting and inclusion of the comments in your commit message so that the thinking in logic you've implement is directly mentioned in the code.",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1087,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp","I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,2,https://github.com/simh/simh/pull/1087#issuecomment-948296026,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp",The first fix is already committed: #1085.,True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/1087#issuecomment-948297672,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp","Upcoming commits will deal with:

Partially reading incoming host messages through DMC (direct multiplex control).
Signal the host and IMP ready bit.
Calling the host interface transmit service routine.

It's not fully working yet, so there will be more fixes coming.  I will open a pull request when things have stabilized.",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/1087#issuecomment-948324936,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp","A potential problem might be that the 1973 IMP software only supports the old 32-bit leaders (1822 message header).  The leader was extended to 96 bits in 1975, see RFC 704.  Supposedly some hosts that would want to connect to the IMP might have a newer NCP transmitting 96-bit leaders which will not work.
I propose a workaround for this would be to have an optional feature to make the H316 host interface transparently convert new format messages to the old format to make the 1973 IMP software happy.  And vice versa for messages going out from the IMP.",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/1087#issuecomment-948523913,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp","There's one more wrinkle to the DMC handling.  The IMP does not like the end of message bit to be set when the last words from a message are read out.  If this happens, it will send back an error message.  Instead, it wants to read all message words and then read one more time getting 0 words.  NOW the end of message bit should be set.
With this change in place, I have for the first time made an entire round trip from one host to another and back again.  An ECO (echo) message was sent, and the ERP (echo reply) made it back.",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/larsbrinkhoff,6,https://github.com/simh/simh/pull/1087#issuecomment-948573038,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp","This is now a pull request with fixes in four separate commits for easier review.  @SpareTimeGizmos and @charlesUnixPro, please have a look.",True,{}
simh/simh,https://github.com/simh/simh,1087,2021-10-21T12:32:50Z,2021-10-23T02:01:40Z,2021-10-23T02:01:40Z,MERGED,True,75,59,3,https://github.com/larsbrinkhoff,H316: Fix IMP host interface.,4,[],https://github.com/simh/simh/pull/1087,https://github.com/charlesUnixPro,7,https://github.com/simh/simh/pull/1087#issuecomment-949952112,"I'm testing the H316 IMP host interface (h316_hi.c) and I'm fixing some problems.  I'm opening this issue as a heads-up, and a place to discuss the changes.
The IMP hardware devices were originally written by @SpareTimeGizmos.  The host interface was added by @charlesUnixPro.
I am developing a ""POSIX NCP"" as a testing and debug tool: https://github.com/larsbrinkhoff/linux-ncp",I approve this pull request.,True,{}
simh/simh,https://github.com/simh/simh,1089,2021-10-23T21:09:35Z,2021-10-23T21:44:57Z,2021-10-23T21:44:57Z,MERGED,True,0,6,1,https://github.com/sethm,3b2: Remove glibc-specific longjmp,1,[],https://github.com/simh/simh/pull/1089,https://github.com/sethm,1,https://github.com/simh/simh/pull/1089,"At one point in the distant past, there was an unremembered
reason to prefer __libc_longjmp if it was available. It is no
longer needed, and has been removed from glibc in the most recent
versions.","At one point in the distant past, there was an unremembered
reason to prefer __libc_longjmp if it was available. It is no
longer needed, and has been removed from glibc in the most recent
versions.",True,{}
simh/simh,https://github.com/simh/simh,1089,2021-10-23T21:09:35Z,2021-10-23T21:44:57Z,2021-10-23T21:44:57Z,MERGED,True,0,6,1,https://github.com/sethm,3b2: Remove glibc-specific longjmp,1,[],https://github.com/simh/simh/pull/1089,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1089#issuecomment-950218079,"At one point in the distant past, there was an unremembered
reason to prefer __libc_longjmp if it was available. It is no
longer needed, and has been removed from glibc in the most recent
versions.","Hitting myself in the head...  We had a collision on timing.  Will you please back out this and force push it again.  Sorry,  Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1089,2021-10-23T21:09:35Z,2021-10-23T21:44:57Z,2021-10-23T21:44:57Z,MERGED,True,0,6,1,https://github.com/sethm,3b2: Remove glibc-specific longjmp,1,[],https://github.com/simh/simh/pull/1089,https://github.com/markpizz,3,https://github.com/simh/simh/pull/1089#issuecomment-950218216,"At one point in the distant past, there was an unremembered
reason to prefer __libc_longjmp if it was available. It is no
longer needed, and has been removed from glibc in the most recent
versions.","Mention ""Fixes #1088"" in your commit message and it will automatically close that issue.",True,{}
simh/simh,https://github.com/simh/simh,1089,2021-10-23T21:09:35Z,2021-10-23T21:44:57Z,2021-10-23T21:44:57Z,MERGED,True,0,6,1,https://github.com/sethm,3b2: Remove glibc-specific longjmp,1,[],https://github.com/simh/simh/pull/1089,https://github.com/sethm,4,https://github.com/simh/simh/pull/1089#issuecomment-950218847,"At one point in the distant past, there was an unremembered
reason to prefer __libc_longjmp if it was available. It is no
longer needed, and has been removed from glibc in the most recent
versions.","Done, and hopefully correctly!",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,https://github.com/bscottm,1,https://github.com/simh/simh/pull/1090,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1090#issuecomment-955644468,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","This change has similar consequences/complexity to the recent simh discussion and previous efforts to make the vax simulator uint32 clean and avoiding the consequences of some of the C99 behaviors that compilers now do.
The scope of the change is large enough to require rigorous testing to prove that the resulting VAX is still a VAX.  Being able to run the basic VAX 780 / 8600 diagnostics is certainly a necessary condition to incorporate this or the previously mentioned changes, however those diagnostics are do not sufficiently exercise the instructions with varying and complex data that DEC did when it verified each new processor model.  The tool they used to achieve this is/was known as AXE.   If you can inspire someone at HP to either provide the AXE tool so we can run it ourselves or provide a means where someone at HP can run it for us and provide feedback about what works and what doesn't, then we can embrace this change and varying pieces of other work that tries to bring the VAX simulator up to the subtleties in the generated results of new compilers.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,https://github.com/bscottm,3,https://github.com/simh/simh/pull/1090#issuecomment-955766132,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","0/1 boolean values have been part of STD99 through the present, so it's not a STD99-specific feature. That's why it passes the tests on the Github buildbots.
uint32-clean is a big change; I've been playing with that for over a year -- the vax_cpu/cpu1 changes aren't big, but the surrounding infrastructure in PDP-11 and the underlying simh core are fairly extensive.
One way around the AXE problem for this pull request would take the form of using the equivalent of Haskell's QuickCheck. Functionally, the two condition code evaluations are the same, Could be fairly straightforward to prove that with a bit of scaffolding. That's something I could put together on the CMake branch, since CMake's ctest structure makes that easy.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,None,4,https://github.com/simh/simh/pull/1090#issuecomment-956514620,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","This is not worth the risk. The performance gain will be minor, the potential consequences in the form of undiscovered bugs major.
There are individuals and organizations that depend on SimH VAX, in its validated form, to run their old but still critical systems.
This should be put on a side branch and not on the main VAX branch.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,https://github.com/bscottm,5,https://github.com/simh/simh/pull/1090#issuecomment-956987329,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","@archivisth I'd be happy if it were on a branch and let people ""kick the tires"" to gain confidence. Had I written functionally inequivalent code, the issue gets picked up before EVKAA executes, during the basic core instruction testing (something I actually tried.) Granted the test suite is necessary, but insufficient, it does provide some level of confidence that either code choice is correct at a functional level.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1090#issuecomment-959935308,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","I'd be happy if it were on a branch and let people ""kick the tires"" to gain confidence.

I'm 100% sure that when new VAX processors were produced by Digital, the development engineering folks were 100% ""confident"" that what they'd produced was indeed a VAX and it ran normal operating system activities and the basic diagnostics successfully.  The company then used AXE to actually confirm the fact or identify potential problems.  Bob may have some insight relating to how many confident iterations actually occurred for various projects he was involved in before they actually shipped.",True,{}
simh/simh,https://github.com/simh/simh,1090,2021-10-30T17:37:27Z,,2021-11-04T17:25:29Z,OPEN,False,245,68,5,https://github.com/bscottm,"""branchless"" condition code evaluation",1,[],https://github.com/simh/simh/pull/1090,None,7,https://github.com/simh/simh/pull/1090#issuecomment-960357224,"[You might wonder if ""the juice is worth the squeeze."" Generally speaking, yes, if conditional branches are unpredictable (50/50 odds of taking either path).]
High performance computing hack: Use boolean test results (0/1) to compute the condition code results, as opposed to if/else constructs (part of STD99.) For x86, there are fewer (sometimes no) conditional jumps, which reduces branch prediction delays and increases the length of basic blocks (instruction sequences between jumps).  Conditional branches are replaced with code sequences that utilize 'cmov*' instructions. Extract from the CMPB code:
CC_BRANCHLESS (gcc)              |!CC_BRANCHLESS (gcc)
.L1741:                          |.L1741:
        movl    -68(%rbp), %r8d  |        movl    -68(%rbp), %edx
        movl    -72(%rbp), %ecx  |        movl    -72(%rbp), %eax
        movl    $8, %eax         |        cmpb    %al, %dl
        cmpb    %r8b, %cl        |        jg      .L2702
        cmovge  %edi, %eax       |        je      .L3028
        cmpb    %cl, %r8b        |.L1960:
        movl    %eax, %edx       |        cmpb    %al, %dl
        movl    $4, %eax         |        jbe     .L1961
        cmove   %eax, %edi       |        orl     $1, %r15d
        seta    %al              |.L1961:
        movzbl  %al, %eax        |        movl    %r15d, -232(%rbp)
        orl     %edx, %eax       |        jmp     .L1348
        orl     %eax, %edi       |.L3028:
        movl    %edi, -232(%rbp) |        movl    $4, %r15d
        jmp     .L1348           |        jmp     .L1961
                                 |.L2702:
                                 |        movl    $8, %r15d
                                 |        jmp     .L1960

This hack also works for setting the overflow trap and computing flags for the VAX CMP* instructions.
Caveat: While the code eliminates extra jumps, the native pipeline can serialize waiting for condition codes from the previous instruction. Serializing the native pipeline is generally preferable to stalling in branch prediction.
Static inline code is used to minimize the preprocessor conditional compilation (ref: vax_mmu.h, which also has static inlines for similar purposes.)
vax4xx_va, vax_va.c: remove duplicate extern declarations for trpirq.
vax_cpu1.c: Fix signed/unsigned mismatch for trpirq.","In 1991, I compiled a detailed analysis of bugs in the four VAX microprocessor designs - MicroVAX II, CVAX, Rigel, NVAX.
Total passes+minipasses (CVAX includes CMOS-2 shrink bug fix pass):
	uVAX		CVAX		Rigel		NVAX
	----		----		-----		----
	5+11		5+11		6+1		2+0

Bugs found per pass:
	pass:	1	2	3	4	5
		-	-	-	-	-
uVAX		 6	11	10	3	3
CVAX		19	 7	 7	3
Rigel		 7       4	 1	2	2
NVAX		15	 3

Breakdown of bugs by error type:
	type:	logic	circuit	layout	ucode	spec change
		-----	-------	------	-----	-----------
uVAX errors	  9	   17	   2	  5	    0
uVAX fixes	  7	   16	   2	  5	    2

CVAX errors	 15	    9	   5	  7	    0
CVAX fixes	 15	    9	   5	  6	    1

Rigel errors	  3	    4	   0	  9	    0
Rigel fixes	  3	    4	   0	  8	    1

NVAX errors	 11	    1	   1	  5	    0
NVAX fixes	  8	    1	   1	  8	    0

In my conclusion, I wrote ""The significantly increased verification efforts on Rigel and NVAX were repaid by significantly reduced bug rates."" Key to that was being able to run  AXE cases on Rigel during simulation (on CVAX servers and workstations), and a  number of AXE cases on NVAX (on Rigel servers and workstations). Nonetheless, a VAX was not considered shippable until it had run a minimum of 5 million cases in each instruction class (roughly 60 million total for a subset VAX). Until SimH, which is as fast as or faster than most VAXes, this required real hardware. Note that AXE production runs required the hardware to be running VMS - that is, running VMS was not, in and of itself, sufficient verification for a VAX.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1091,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1091#issuecomment-956347742,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","I agree that there is absolutely no reason to have multiple copies of h316_udp.c.  This would be true for exactly the same reason that many of the pdp11 device simulator modules (pdp11_rq, pdp11_tq, pdp11_ts, pdp11_XX, etc.) are shared between the pdp11 simulator and many vax simulators as well as some of them being used in the pdp10 simulator.
Any simulator that needs to contain h316_udp can readily reference it as ../H316/h316_udp.c.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/rcornwell,3,https://github.com/simh/simh/pull/1091#issuecomment-956365433,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","The problem here is the H316 is not part of the Master PDP10 (KA10)
system.
…
 I agree that there is absolutely no reason to have multiple copies of
 h316_udp.c.  This would be true for exactly the same reason that many
 of the pdp11 device simulator modules (pdp11_rq, pdp11_tq, pdp11_ts,
 pdp11_XX, etc.) are shared between the pdp11 simulator and many vax
 simulators as well as some of them being used in the pdp10 simulator.

 Any simulator that needs to contain h316_udp can readily reference it
 as ../H316/h316_udp.c.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/1091#issuecomment-956365604,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","reference it as ../H316/h316_udp.c

That's what I did, and it works with a bit of strain.  The other simulators may also need to include h316_imp.h to get the declarations, which includes h316_defs.h which has this:
#if defined(USE_INT64) || defined(USE_ADDR64)
#error ""H316 does not support 64b values!""
#endif

So it's not entirely straight forward to use the code as is.  A band aid might be to write your own declarations and drop use of h316_imp.h, but that's not very satisfying either.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,5,https://github.com/simh/simh/pull/1091#issuecomment-956373545,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","I wasn't suggesting that the h316_imp.c and h316_imp.h modules couldn't be changed to make them generally more useful.
How about simply removing
#include ""h316_defs.h""          // H316 emulator definitions

from h316_udp.c",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1091#issuecomment-956376081,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","The problem here is the H316 is not part of the Master PDP10 (KA10)
system.

You mean the pieces you copy from the simh/simh repo into your rcornwell/sims repo?  If so, what's wrong with then just adding the H316 directory to the many other things that already migrate (i.e. sim_*, slirp, etc.).",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/rcornwell,7,https://github.com/simh/simh/pull/1091#issuecomment-956387929,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","Because this is another simulator.

Also I only copy over SCP.
…
 > The problem here is the H316 is not part of the Master PDP10 (KA10)
 >
 system.

 You mean the pieces you copy from the simh/simh repo into your
 rcornwell/sims repo?  If so, what's wrong with then just adding the
 H316 directory to the many other things that already migrate (i.e.
 sim_*, slirp, etc.).",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/larsbrinkhoff,8,https://github.com/simh/simh/pull/1091#issuecomment-956422580,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","How about simply removing [#include ""h316_defs.h""] from h316_udp.c

That actually works flawlessly.  Apparently h316_udp.c doesn't really need anything from h316_defs.h.
So any PDP-11 additions could easily be added to this repository.  As for the PDP-10 emulators, I guess we'll see.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,9,https://github.com/simh/simh/pull/1091#issuecomment-956423947,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","Because this is another simulator.
Also I only copy over SCP.

No need to build another simulator (H316), just add the H316 directory to what you copy and consider it SCP.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,10,https://github.com/simh/simh/pull/1091#issuecomment-956424945,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","So any PDP-11 additions could easily be added to this repository. As for the PDP-10 emulators, I guess we'll see.

I don't see the need for PDP11 pieces in Rich's repo since none of his simulators used PDP11 pieces.  His PDP10 directory just happens to have Bob's original KS10 simulator in it on the simh/simh repo.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/larsbrinkhoff,11,https://github.com/simh/simh/pull/1091#issuecomment-956428136,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","By ""this repository"" I mean mainline SIMH 4.x in which this issue was opened.
By ""any PDP-11 additions"" I mean future pull request I intend to submit here.  E.g. there is a PDP-11 Unix V6 with NCP support that should be able to talk to ARPANET.
This is now a pull request to remove the unneeded #include.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/larsbrinkhoff,12,https://github.com/simh/simh/pull/1091#issuecomment-956441624,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","I suppose Rich doesn't want a H316 directory with ""considered SCP"" code.  Since the h316_udp.c file is now well isolated from the rest of the H316 simulator, I suggest it could be made a ""proper SCP"" component.  If that would be under consideration, I volunteer to make it so.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/rcornwell,13,https://github.com/simh/simh/pull/1091#issuecomment-956446805,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","If several simulators can benefit from this code and it is not specific
to the H316, I am all for pulling it into an SCP level file. Being that
H316 and the KA10 simulators are maintained by two different people,
crossing them can cause problems. PDP11, PDP10 (Bob's), VAX are all
maintained by the same people, and all share common interfaces.
…
 I suppose Rich doesn't want a H316 directory with ""considered SCP""
 code.  Since the h316_udp.c file is now well isolated from the rest
 of the H316 simulator, I suggest it could be made a ""proper SCP""
 component.  If that would be under consideration, I volunteer to make
 it so.


-- 
==========================================================================
Richard Cornwell
***@***.***
http://sky-visions.com
LinkedIn:   https://www.linkedin.com/in/richard-cornwell-991076107
==========================================================================",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,14,https://github.com/simh/simh/pull/1091#issuecomment-956875190,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","The promotion to a SCP level file is really about the concept of reasonable numbers of future simulators that can use this.  My gut doesn't promote the earliest internet transport which was retired after a relatively short time to that level.
Meanwhile, you will need a h316_udp.h which doesn't seem to provided anywhere at this time...
As for unrelated (not git parentally related) repositories that include simh pieces, I've always wanted a sane way for folks who do this to also keep track of what simh commit the code they've included is actually based on.
This script which I've called update-scp.sh can pick up the latest code pieces from scp and then will display the local repo's commit id along with the commit which was gathered from simh/simh in the output of SHOW VERSION.
update-scp.sh
mkdir simh-archive
cd simh-archive
curl -L https://github.com/simh/simh/archive/master.zip --output master.zip
unzip master.zip
rm -Rf ../slirp ../slirp_glue ../H316
cd simh-master
cp *.h *.c ../../
mv slirp slirp_glue ../../
mkdir ../../H316
cp H316/h316_udp.* ../../H316/

Additionally the .gitignore in the rcornwell/sims repo should have this line added:
simh-archive

This method captures the fact that a git archive for the simh repo is setup to contain the commit-id and the current code will propagate that information when it is provided.",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/rcornwell,15,https://github.com/simh/simh/pull/1091#issuecomment-956998920,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","My thought on this is that the functions from h316_udp.c that are
needed can be copied into kx10_imp.c. I plan to add support for the
pdp10-ks simulator to use kx10_imp so any fixes Lars makes will
automatically move to the KS.

Merging in SCP changes is not that complex. I grab them over
periodically, run complete tests before pushing out the code to the
master repo.
…
 The promotion to a SCP level file is really about the concept of
 reasonable numbers of future simulators that can use this.  My gut
 doesn't promote the earliest internet transport which was retired
 after a relatively short time to that level.

 Meanwhile, you will need a h316_udp.h which doesn't seem to provided
 anywhere at this time...

-- 
==========================================================================
Richard Cornwell
***@***.***
http://sky-visions.com
LinkedIn:   https://www.linkedin.com/in/richard-cornwell-991076107
==========================================================================",True,{}
simh/simh,https://github.com/simh/simh,1091,2021-11-01T17:18:54Z,2021-11-01T18:00:51Z,2021-11-03T19:02:54Z,MERGED,True,0,1,1,https://github.com/larsbrinkhoff,H316: Remove unneeded #include in h316_udp.c.,1,[],https://github.com/simh/simh/pull/1091,https://github.com/markpizz,16,https://github.com/simh/simh/pull/1091#issuecomment-959834278,"The H316 has a file called h316_udp.c that implements a transport for an (ARPANET) host-IMP interface.  (Also the IMP-IMP modem links.)  The IMP was the router in the ARPANET.  Each IMP could serve up to four host computers.  So far this has been sitting unused on the IMP side.  I have tested and fixed some problems (#1085, #1087), and now I'm adding the interface to the host side.  At least two of the SIMH emulators have software for connecting to the ARPANET: PDP-10 and PDP-11.
This makes for potentially three copies of the h316_udp.c code.  Would it be possible to lift this to a common file?","Merging in SCP changes is not that complex. I grab them over
periodically, run complete tests before pushing out the code to the
master repo.

However complex you make it is fine, BUT please start from an archive of the simh/simh repo rather than a clone of the repo.  This will then drag the simh/simh commit-id into wherever you are copying the pieces, and SCP ""SHOW VERSION"" will display both the simh/simh commit-id and your rcornwell/sims commit-id.
If you pick the pieces of code from h316_udp.c into wherever, that's fine and thus the suggested update-scp.sh gets simpler.  I hope you realize that copying all the SCP pieces mentioned above over those same pieces in your local rcornwell/sims working directory won't actually confuse git in any way.  Git will only care about files with changed content.",True,{}
simh/simh,https://github.com/simh/simh,1097,2021-12-04T19:43:12Z,2021-12-04T19:53:45Z,2021-12-04T19:53:45Z,MERGED,True,136,24,5,https://github.com/psco,AltairZ80: Improved vector interrupt implementation,1,[],https://github.com/simh/simh/pull/1097,https://github.com/psco,1,https://github.com/simh/simh/pull/1097,,,True,{}
simh/simh,https://github.com/simh/simh,1099,2021-12-10T14:43:30Z,2021-12-11T02:48:08Z,2021-12-11T02:48:08Z,CLOSED,False,1848,37868,127,https://github.com/XVilka,Initial support for Meson buildsystem,2,[],https://github.com/simh/simh/pull/1099,https://github.com/XVilka,1,https://github.com/simh/simh/pull/1099,"To simplify compilation and cross-platform support, and inspired by various C projects that switched from autotools to Meson, including QEMU, I did an initial work of migrating from the Makefile to Meson.
There are two implementations of this language:

Meson
Muon - mostly work-in-progress

For now, I did the simplest compilation without running tests and optional features. Please let me know if there is an interest in this, before I proceed.
I split in two commits - adding the buildsystem and removing the unnecessary files.
The second commit is not really necessary, since these can coexist without any conflict, making the gradual transition possible, like X.org, Wayland, Mesa, QEMU did, slowly deprecating autotools on the course of multiple releases.","To simplify compilation and cross-platform support, and inspired by various C projects that switched from autotools to Meson, including QEMU, I did an initial work of migrating from the Makefile to Meson.
There are two implementations of this language:

Meson
Muon - mostly work-in-progress

For now, I did the simplest compilation without running tests and optional features. Please let me know if there is an interest in this, before I proceed.
I split in two commits - adding the buildsystem and removing the unnecessary files.
The second commit is not really necessary, since these can coexist without any conflict, making the gradual transition possible, like X.org, Wayland, Mesa, QEMU did, slowly deprecating autotools on the course of multiple releases.",True,{}
simh/simh,https://github.com/simh/simh,1099,2021-12-10T14:43:30Z,2021-12-11T02:48:08Z,2021-12-11T02:48:08Z,CLOSED,False,1848,37868,127,https://github.com/XVilka,Initial support for Meson buildsystem,2,[],https://github.com/simh/simh/pull/1099,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1099#issuecomment-991418422,"To simplify compilation and cross-platform support, and inspired by various C projects that switched from autotools to Meson, including QEMU, I did an initial work of migrating from the Makefile to Meson.
There are two implementations of this language:

Meson
Muon - mostly work-in-progress

For now, I did the simplest compilation without running tests and optional features. Please let me know if there is an interest in this, before I proceed.
I split in two commits - adding the buildsystem and removing the unnecessary files.
The second commit is not really necessary, since these can coexist without any conflict, making the gradual transition possible, like X.org, Wayland, Mesa, QEMU did, slowly deprecating autotools on the course of multiple releases.","Just because something doesn't happen to be how you may have solved the problem, doesn't mean there is a glaring need to make changes merely for change sake.  ""If it ain't broke, don't fix it!"".
Feel free to keep your own methods to things your way, but those changes will live in your personal repo.
Meanwhile, if you have contributions which add useful/missing functionality to existing simulators or better yet write a new simulator we will be glad to include those efforts.",True,{}
simh/simh,https://github.com/simh/simh,1102,2021-12-17T23:11:15Z,2021-12-18T00:48:23Z,2021-12-18T01:08:00Z,MERGED,True,5,1,1,https://github.com/hharte,serial: Support COM ports > COM9 on Windows,1,[],https://github.com/simh/simh/pull/1102,https://github.com/hharte,1,https://github.com/simh/simh/pull/1102,"COM ports greater than COM9 on Windows can only be opened using
the DOS device UNC path \\.\
Prefix the filename passed to CreateFile() with this prefix to
address this issue.","COM ports greater than COM9 on Windows can only be opened using
the DOS device UNC path \\.\
Prefix the filename passed to CreateFile() with this prefix to
address this issue.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/1103,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1103#issuecomment-1003148985,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","I'm looking at this now.

Cosmetic, but required issue relates to consistency in indentation style.
Parsing of attach parameters should reject incompatible options.
Framer speed should leverage existing speed validation and computation logic (extended as necessary for different framer requirements).
Device simulation code (not help comments) should know nothing about framer.  tmxr_start_framer and tmxr_stop_framer should be internal to TMXR.  You'll say: but, tmxr_start_framer  allows for specifying some sort of DMP specific mode.  Elaborate on this detail.  BTW, although DMP device simulation belongs in pdp11_dmc.c, currently only some of the basic things are actually implemented with no actual functioning device.  tmxr_start_famer and tmxr_stop_framer could happen at attach time (in TMXR), or on DTR transitions.

I've reproduced the problem Reindert was seeing.  I'm tracking that down before proceeding with framer stuff.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,3,https://github.com/simh/simh/pull/1103#issuecomment-1003152235,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Where is the indentation wrong?  I try to match the SIMH style, but it's hard to figure out what it actually is.
Ok.
The existing speed machinery is for UARTs, and accepts only UART speeds.  The framer accepts any speed between 500 and 1M, so it didn't seem to make sense to try to use the existing code.  I just copied the computation of the scheduling parameter from the speed.
Yes, I understand the concern.  The point is that there are differences between DMC (DDCMP 3.0) and DMR/DMP (DDCMP 4.0) mode that are visible in a sync framer, and from the documentation in the back of the DMP manual there are some that really matter.  So I implemented them as a mode setting in the framer.  At one point I had it specified at attach time, but with the DMP it's a choice specified by the driver when it starts DDCMP.   So the purpose of the start_framer call is to correspond to the DMC/DMP start operation.  I did find out in testing that DMP emulation doesn't actually work (for example, RSTS rejects the device outright).  So I suppose I could make it default to DMC mode and use another keyword in the attach string to say DDCMP 4.0 mode.  But either that would have to change for DMP, or be something it doesn't actually support.  And it gets worse if you wanted to emulate multipoint mode for DMP; the framer doesn't currently handle that but it could with enhanced firmware.

I've seen the same issue Reindert saw in the past, it appears if you stop the other end (drop it in to the sim> prompt) for long enough.  Apparently the timeout and retransmit keeps sucking up buffers if previous sends can't actually happen because the connection is blocked; I would think the solution is to detect that case and not queue up more stuff.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1103#issuecomment-1003215165,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","I'm thinking that you should include the framer device documentation right in the
Simh PDP11 directory so all of the DDCMP stuff is in one place.  Migrate updates
there as you make evolving changes in the future.
In pdp11_dup.c, why_ did you make this addition to dup_detach:

if (r == SCPE_OK)
r = tmxr_close_master (&dup_desc);

There may be many DUP devices, which share the dup_desc, closing one shouldn't close them all, right?
Your most recent commit removed the framer calls from pdp11_dup,c, but you left in a previously added line to pdp11_dup.c:

dup_desc.dptr = dptr;

Your initial change to pdp11_dup.c also changed when the DUP device enables the TMXR receive enable bit (rcve) to be triggered on DTR going up rather than the original code which did this when RTS went up.  I can understand the theory, but was this a necessary change?  Meanwhile, it would seem that in addition to this logic, the downward transition of the appropriate signal should also disable the TMXR bit (and possibly reset the line state to be sure that any pending but currently buffered data is discarded).",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,5,https://github.com/simh/simh/pull/1103#issuecomment-1003222106,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Framer documentation... I could include the framer API document, that would make sense.  But the whole set of design files is on Github, including schematics, firmware, and all that.
The point of the close_master change was to close the ethernet that was opened by the framer attach, which is via open_master.  But confusingly, open_master also does per-line stuff and in fact for these devices that's the only kind that's ever used.  Is there a ""close_line""?  That's what I really need here.
That dptr copy was to get trace messages from sim_tmxr to come out.  Without that change they never appear.  I can undo that change if you want.
The change to do receive enable via DTR is to allow the framer to be seen.  There was a deadlock: RTS is set if carrier is seen, but carrier can't be seen if you don't look at the framer to get status messages.  Apart from that, the logic is in the meaning of the signals.  DTR means data terminal ready, i.e., the device is ready to communicate with the modem (the framer, in this case).  RTS is request to SEND, and tying receive enable to a send request doesn't seem right at all.  Consider what would happen if someone were to run half duplex: RTS would be set when transmitting and clear when receiving, so when the emulated system wants to receive the simulator would be turning off receive.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1103#issuecomment-1003232284,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Framer documentation... I could include the framer API document, that would make sense. But the whole set of design files is on Github, including schematics, firmware, and all that.

Hmm..  What I meant was more like the framer marketing documentation...  OR, maybe the help could be expanded to cover that point.  I would definitely leave out any mention of Ethernet since that's an internal implementation detail a user needn't have any awareness of.  Likewise the pointer to your framer github stuff is all about how you implemented it which is good for you, but hardly required for someone who wants to use one (unless they've got to build it from scratch)...

The point of the close_master change was to close the ethernet that was opened by the framer attach, which is via open_master. But confusingly, open_master also does per-line stuff and in fact for these devices that's the only kind that's ever used. Is there a ""close_line""? That's what I really need here.

I'm thinking you need some framer code in _mux_detach_line.  Adding that there might change other stuff...

That dptr copy was to get trace messages from sim_tmxr to come out. Without that change they never appear. I can undo that change if you want.

Hmmm... Let me mess with how the attach should be done so the device relationship is properly established.  Leave that there for now.

The change to do receive enable via DTR is to allow the framer to be seen. There was a deadlock: RTS is set if carrier is seen, but carrier can't be seen if you don't look at the framer to get status messages. Apart from that, the logic is in the meaning of the signals. DTR means data terminal ready, i.e., the device is ready to communicate with the modem (the framer, in this case). RTS is request to SEND, and tying receive enable to a send request doesn't seem right at all. Consider what would happen if someone were to run half duplex: RTS would be set when transmitting and clear when receiving, so when the emulated system wants to receive the simulator would be turning off receive.

Good point.  I still think the DTR going down has the effect I mentioned above (turn off rcve and flush any pending input).",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,7,https://github.com/simh/simh/pull/1103#issuecomment-1003234068,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Framer marketing documentation, um, yes.  I suppose I should see which item of the framer description is its ""data sheet"" which would serve that purpose.  https://github.com/pkoning2/ddcmp/blob/main/README.md is not quite it, I think I need to write something new.  Will do that, and then I'll drop it here as well.  So right in the PDP11 directory?  Is a .md file ok?
Ok, so I missed tmxr_detach_ln, I'll remove the close_master from pdp11_dup and put the removal of the framer state there rather than in close_master.
As for cleaning up receive stuff on DTR drop, that seems logical but it wasn't there before for RTS drop.  I can think about adding it but since that's an unrelated improvement I'd rather keep it as a separate work item.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,8,https://github.com/simh/simh/pull/1103#issuecomment-1003235094,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Framer marketing documentation, um, yes. I suppose I should see which item of the framer description is its ""data sheet"" which would serve that purpose. https://github.com/pkoning2/ddcmp/blob/main/README.md is not quite it, I think I need to write something new. Will do that, and then I'll drop it here as well. So right in the PDP11 directory? Is a .md file ok?

A more thorough marketing like description in the help would be fine.  You'll also get a 1 line/paragraph mention in the simh/Readme.md.  If you want to drop a file in the PDP11 directory a .md file is great.

Ok, so I missed tmxr_detach_ln, I'll remove the close_master from pdp11_dup and put the removal of the framer state there rather than in close_master.

That sounds right.

As for cleaning up receive stuff on DTR drop, that seems logical but it wasn't there before for RTS drop. I can think about adding it but since that's an unrelated improvement I'd rather keep it as a separate work item.

Fine.  I'll deal with that detail along with getting the attach done right.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,9,https://github.com/simh/simh/pull/1103#issuecomment-1003243744,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","That dptr copy was to get trace messages from sim_tmxr to come out. Without that change they never appear. I can undo that change if you want.


Actually, that line you added is redundant.  dup_desc.dptr is set in dup_reset.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,10,https://github.com/simh/simh/pull/1103#issuecomment-1003444241,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","BTW, just to clarify: as things stand right now, if you want a framer you'd have to build it from the open source design files.  I'm not offering boards (bare or assembled).",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/R-Voorhorst,11,https://github.com/simh/simh/pull/1103#issuecomment-1003446418,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Nice, notice BTW in Dutch :Belasting :) Toegevoegde Waarde of which VAT only gives a subset of some possible meanings …





Reindert
…
 BTW, just to clarify: as things stand right now, if you want a framer you'd have to build it from the open source design files. I'm not offering boards (bare or assembled).",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,12,https://github.com/simh/simh/pull/1103#issuecomment-1003454396,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Although your engineering development name for this stuff is FRAMER, maybe the right name for the user facing part within TMXR is SYNC or something like that.  Thoughts?
Maybe we also add a SHOW SYNC command which lists the available SYNC devices like the SHOW ETHERNET or SHOW SERIAL does now and the attach syntax then refers to a SYNCn name displayed in the SHOW SYNC command.  Like the ethernet and serial cases, an attach can either use the SYNCn name or whatever the SHOW SYNC eth name that was displayed.  This (and the whole framer operation) presumes you can actually identify a framer eth device from other network interfaces...
Please enrich the help to explain more about what framer mode ""INTERNAL"" means which should probably include examples.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,13,https://github.com/simh/simh/pull/1103#issuecomment-1003455088,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","""SYNC"" instead of ""FRAMER"", sure, that seems like a reasonable change.  I called it ""framer"" because it isn't just a raw sync line interface (like, say, a DU-11) but it also includes the DDCMP frame delineation function.  That fact really only matters to someone using the API, though.
As for ""show sync"" and ""show ethernet"", it certainly is straightforward to distinguish a framer provided the ethernet interface MAC address is available at the time the show command is run.  The framer uses MAC addresses starting with aa-00-03, which isn't a value in use anywhere else.  It was assigned to DEC but never used, and later on it became obsolete as part of the 802.1 addressing rules.  So I grabbed that OUI.  :-)",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,14,https://github.com/simh/simh/pull/1103#issuecomment-1003455537,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Forgot to talk about ""internal"".  Looking back I think that's a naming error I made.  DEC refers to the coax-based connections as ""integral modem"" (also ""local"").  ""Integral"" because the modem function is built into the line card, rather than provided by an external telco-supplied box as would be the case for RS232 or V.35 or the like.  I included ""coax"" as an alternate keyword; should I make that be the primary one?  (And fix the other to be ""integral""?)",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,15,https://github.com/simh/simh/pull/1103#issuecomment-1003456238,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","I don't have enough direct experience in this domain to have a preference or useful knowledge about the terms you use.  My concern is that whatever terms you use, they're explained so that an interested, but not crazily involved user can understand what they mean and how it might be relevant to various use cases....",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,16,https://github.com/simh/simh/pull/1103#issuecomment-1004408137,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Looking at your most recent commit:

When I suggested


Maybe we also add a SHOW SYNC command which lists the available SYNC devices like the SHOW ETHERNET or SHOW SERIAL does now and the attach syntax then refers to a SYNCn name displayed in the SHOW SYNC command. Like the ethernet and serial cases, an attach can either use the SYNCn name or whatever the SHOW SYNC eth name that was displayed. This (and the whole framer operation) presumes you can actually identify a framer eth device from other network interfaces...

What I meant was, like the serial and ethernet cases SCP presents to a user ethN and serN names which users can specifically attach to, OR they can use the detailed (expanded) OS device name displayed by SHOW ETHERNET or SHOW SERIAL for each listed ethN or serN.  These names are abstracted to hopefully make the SCP internal state (contained in a SAVE/RESTORE) theoretically portable to other similar or completely different host systems.  In the case of ethernet, the value is minimally useful since different systems almost always will have different sets of network interfaces.  In the serial case, ser0 might be one specifically dedicated to simulator use and thus more commonly be correct.  In the sync case, it would seem that sync0 would always actually be correct across hosts since these devices are rare and only a dedicated user would have them on their system.
Although all the current use cases of your sync stuff are DDCMP devices, I've gotten the impression from many things you said, that your device is a general purpose sync device.  As such, I'd remove specific mention of DDCMP from the what is displayed by SCP relating to this unless it is part of the output for a specific device SHOW SYNC that is in a DDCMP mode, or some parameter to attach which specifies DDCMP.
The show_sync logic should exist in tmxr and tmxr_show_sync_devices should be there along with the MTAB display support routine tmxr_show_sync.  No need for singleton extern declarations in pdp11_dup & dmc.
In sim_ether _eth_devices is getting the host nic address (this is fine to properly determine framer devices and store the description, but you are saving the hwaddr which isn't needed at all.  Yes, you later reference the hwaddr in eth_show_fr, but that check would produce equivalent results if the description was compared to ""DDCMP synchronous interface"" or merely ""synchonous interface"" as suggested above.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,17,https://github.com/simh/simh/pull/1103#issuecomment-1004447112,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","I see what you're getting at with ""show sync"".  The difficulty is that, under the covers, they ARE ethernet devices.  I suppose I could make up ""sync"" aliases which map to the actual Ethernet interface name, so you'd see something like: ""sync0  en11"" rather than the current ""eth3 en11"".  I don't know what is involved in making up those ""sync"" pseudo-device names, though.
On keeping the hwaddr, I was thinking of having ""show eth"" show it, but it doesn't really given the width of the pseudo-device column.  So I can take it out, the most obvious alternative is to replace it by a true/false flag.  (Checking for a literal string seems a bit hacky.)
On the framer capabilities, perhaps I have not been very clear.  The current device is very definitely DDCMP specific; it does packet framing and that framing is specific to DDCMP.  The underlying hardware can do other sync protocols easily enough, but that would require substantially different firmware.  I've thought a bit about HDLC, and a bit less about Bisync.   But I have no personal experience with those, so the incentive for me to get into those options isn't really there.  (If someone else wants to expand the firmware to cover these, I'd certainly help with suggestions and the like.)  Also, the coax interface is designed to be compatible with the DMC integral modem line card.  It's possible that it could drive other coax-connected devices -- for all I know the hardware could, say, generate IBM style coax HDLC signals.  But that's not something I set out to do and if it's workable at all it too would take more development and some luck as well.  Last but not least, the device API is DDCMP specific; it sends and receives DDCMP frames to/from the SIMH host.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,18,https://github.com/simh/simh/pull/1103#issuecomment-1004997196,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Ok, I think I see how to make  ""sync"" pseudo-devices.  Will take a look at doing that.  Probably a couple of days before I have time.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,19,https://github.com/simh/simh/pull/1103#issuecomment-1005086085,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","OK.  Please keep the primary sync logic in TMXR with the framer specific support in sim_ether.
You (or someone) may come along with a framer variant for other than DDCMP at some time which will then extend in sim_ether logic for that.  Meanwhile, someone might be motivated to come at the sync problem with other hardware which isn't framer based and that would then dispatch from TMXR.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,20,https://github.com/simh/simh/pull/1103#issuecomment-1005094135,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","So, put the ""sync name handling in sim_tmxr?
I noticed that the eth check in eth_open is broken: it assumes that  is a single digit which is not necessarily the case.  On my laptop, because of various OS-generated interfaces, I see eth0 through eth13.  Should I fix that?",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,21,https://github.com/simh/simh/pull/1103#issuecomment-1005185028,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","Putting the sync name stuff in tmxr is the appropriate place since any sync capable simulator device will automatically be using tmxr anyway.
Yes, fix the ethN number size assumption.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/pkoning2,22,https://github.com/simh/simh/pull/1103#issuecomment-1006212665,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","The question is how to make a clean connection from sim_ether to sim_tmxr.  The routine used by ""show sync"" is _eth_devices which is internal to sim_ether.
One possible answer is to make that a public interface, call it from sim_tmxr, and have sim_tmxr pick up just the entries in the returned list that are sync devices.  I can see some other options but none of them feel better; in every case some Ethernet internals are necessarily exported to sim_tmxr, or ddcmp device knowledge imported into sim_ether, because that's the nature of the beast.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,23,https://github.com/simh/simh/pull/1103#issuecomment-1006257470,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.","I can see some other options but none of them feel better; in every case some Ethernet internals are necessarily exported to sim_tmxr, or ddcmp device knowledge imported into sim_ether, because that's the nature of the beast.

sim_ether functionality is already (and reasonably) leveraged by the tmxr sync support since the needed access is via ethernet.
Thinking a little more here and I realize that SHOW ETHERNET really shouldn't list the framer devices as an ethN item, which means that _eth_devices should be modified to remove them.
There should be a public routine exported from sim_ether:
int eth_framer_devices (int max, ETH_LIST *list)
which returns the list of framer devices.  This routine would be cloned from _eth_devices() and only return the framer DDCMP or other protocol framer devices.
TMXR can then leverage this along with minor variation of the logic in sim_serial.c to support the needed syncN semantics.  Internal to TMXR there should be sync_read and sync_write which now merely call the related eth routines and in the future might support either eth based dispatch or another flavor if an alternate sync paradigm exists.",True,{}
simh/simh,https://github.com/simh/simh,1103,2021-12-25T18:19:26Z,2022-01-08T22:28:26Z,2022-01-08T22:28:26Z,CLOSED,False,599,84,9,https://github.com/pkoning2,"TMXR, PDP11, PDP10, VAX: Add DDCMP sync framer support",10,[],https://github.com/simh/simh/pull/1103,https://github.com/markpizz,24,https://github.com/simh/simh/pull/1103#issuecomment-1008165328,"This adds support for the ""framer"" device, which is a USB-connected
device built around a Raspberry Pico that connects to a synchronous
line, either RS-232 or DEC ""integral modem"" coax connection.  It
implements the framing portion of DDCMP: clock recovery for the
integral modem case, byte sync, and DDCMP frame handling including
CRC.  The actual DDCMP protocol state machine, with its handling of
sequencing, timeout and retransmit, etc. is left to the host
software.  All the design files for the framer may be found at
https://github.com/pkoning2/ddcmp .
This commit adds code to drive the framer from the TMXR library,
allowing it to be used either from simulated DMC-11 or simulated
DUP-11 devices.  Both have been tested, using RSTS/E, RSX-11/M+, and
TOPS-20.",Merged manually.  Thanks.,True,{}
simh/simh,https://github.com/simh/simh,1104,2021-12-27T23:22:05Z,2021-12-28T02:08:43Z,2021-12-28T02:08:43Z,MERGED,True,10,2,2,https://github.com/sethm,3b2: Support for SVR 2.0.5 diagnostics,1,[],https://github.com/simh/simh/pull/1104,https://github.com/sethm,1,https://github.com/simh/simh/pull/1104,"The CTC and PORTS pump code for System V Release 2.0.5 for the 3B2 is
different from the pump code used by SVR 3, leading to PORTS and CTC
diagnostics failing to pass when running SVR2. This change adds
support for the pump code used in SVR 2.","The CTC and PORTS pump code for System V Release 2.0.5 for the 3B2 is
different from the pump code used by SVR 3, leading to PORTS and CTC
diagnostics failing to pass when running SVR2. This change adds
support for the pump code used in SVR 2.",True,{}
simh/simh,https://github.com/simh/simh,1110,2022-01-06T18:20:17Z,2022-01-07T18:29:27Z,2022-01-07T18:29:27Z,CLOSED,False,6,2,1,https://github.com/k1mu,Fix crash when using EP multiply,1,[],https://github.com/simh/simh/pull/1110,https://github.com/k1mu,1,https://github.com/simh/simh/pull/1110,"When performing floating point multiplication, the code overwrote an addtional word of the floating point fraction with zeroes. This is harmless with standard FP, as the floating variables always have space for EP-length vars. When doing an EP multiply, this causes a word on the stack to be zeroed. For the latest Raspbian release, this causes a segfault as there's no padding past that var on the stack.
This fix, which has been tested against the original crashing code plus validated using the FPP-8 diagnostics, avoids the overwrite.","When performing floating point multiplication, the code overwrote an addtional word of the floating point fraction with zeroes. This is harmless with standard FP, as the floating variables always have space for EP-length vars. When doing an EP multiply, this causes a word on the stack to be zeroed. For the latest Raspbian release, this causes a segfault as there's no padding past that var on the stack.
This fix, which has been tested against the original crashing code plus validated using the FPP-8 diagnostics, avoids the overwrite.",True,{}
simh/simh,https://github.com/simh/simh,1110,2022-01-06T18:20:17Z,2022-01-07T18:29:27Z,2022-01-07T18:29:27Z,CLOSED,False,6,2,1,https://github.com/k1mu,Fix crash when using EP multiply,1,[],https://github.com/simh/simh/pull/1110,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1110#issuecomment-1007637411,"When performing floating point multiplication, the code overwrote an addtional word of the floating point fraction with zeroes. This is harmless with standard FP, as the floating variables always have space for EP-length vars. When doing an EP multiply, this causes a word on the stack to be zeroed. For the latest Raspbian release, this causes a segfault as there's no padding past that var on the stack.
This fix, which has been tested against the original crashing code plus validated using the FPP-8 diagnostics, avoids the overwrite.","Merged with cherry pick reformatting the commit message.
Thanks,",True,{}
simh/simh,https://github.com/simh/simh,1120,2022-02-02T14:53:13Z,2022-02-06T16:30:41Z,2022-02-06T16:30:41Z,CLOSED,False,1,0,1,https://github.com/pkoning2,PDP11: Fix bug in KG11 emulation,13,[],https://github.com/simh/simh/pull/1120,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/1120,,,True,{}
simh/simh,https://github.com/simh/simh,1120,2022-02-02T14:53:13Z,2022-02-06T16:30:41Z,2022-02-06T16:30:41Z,CLOSED,False,1,0,1,https://github.com/pkoning2,PDP11: Fix bug in KG11 emulation,13,[],https://github.com/simh/simh/pull/1120,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1120#issuecomment-1030867131,,Merged with Cherry Pick,True,{}
simh/simh,https://github.com/simh/simh,1123,2022-02-19T03:21:41Z,2022-02-20T04:50:17Z,2022-02-20T04:50:17Z,MERGED,True,16893,4001,38,https://github.com/rcornwell,Add support for KS10 processor.,1,[],https://github.com/simh/simh/pull/1123,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1123,Add support for KS10 processor. Improve performance of PDP10 simulator. Minor fixes to B5500 simulator.,Add support for KS10 processor. Improve performance of PDP10 simulator. Minor fixes to B5500 simulator.,True,{}
simh/simh,https://github.com/simh/simh,1124,2022-02-19T21:36:06Z,2022-02-19T21:41:31Z,2022-02-19T21:41:32Z,MERGED,True,18,13,1,https://github.com/hharte,sim_imd: Resolve coverity issues.,1,[],https://github.com/simh/simh/pull/1124,https://github.com/hharte,1,https://github.com/simh/simh/pull/1124,"FYI, @markpizz","FYI, @markpizz",True,{}
simh/simh,https://github.com/simh/simh,1125,2022-02-21T20:26:08Z,2022-02-21T21:40:34Z,2022-02-21T21:40:34Z,MERGED,True,9,9,2,https://github.com/rcornwell,KA10: Fixed BLTUB/BLTBU instructions.,1,[],https://github.com/simh/simh/pull/1125,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1125,Allow Decnet links to work.,Allow Decnet links to work.,True,{}
simh/simh,https://github.com/simh/simh,1126,2022-02-22T02:01:06Z,2022-02-22T02:34:33Z,2022-02-22T02:34:33Z,MERGED,True,497,265,5,https://github.com/leobru,BESM6: Reorganized tape and disk devices.,2,[],https://github.com/simh/simh/pull/1126,https://github.com/leobru,1,https://github.com/simh/simh/pull/1126,,,True,{}
simh/simh,https://github.com/simh/simh,1127,2022-02-24T13:38:52Z,2022-02-24T17:08:40Z,2022-02-24T17:08:40Z,MERGED,True,20,32,6,https://github.com/rcornwell,KA10: Fixed bug with page fault during ILDB/IDBP,1,[],https://github.com/simh/simh/pull/1127,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1127,"Fixed page fault issue during ILDBP/IDBP.
Set KMC default state to disabled.","Fixed page fault issue during ILDBP/IDBP.
Set KMC default state to disabled.",True,{}
simh/simh,https://github.com/simh/simh,1128,2022-02-26T16:50:05Z,2022-02-26T17:37:32Z,2022-02-26T17:37:33Z,MERGED,True,13,2,1,https://github.com/rcornwell,KA10: Fix so KS10 ITS will build.,1,[],https://github.com/simh/simh/pull/1128,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1128,,,True,{}
simh/simh,https://github.com/simh/simh,1129,2022-02-26T18:30:15Z,2022-02-26T18:31:57Z,2022-02-26T18:31:57Z,MERGED,True,1,1,1,https://github.com/rcornwell,KA10: Removed stray tab.,1,[],https://github.com/simh/simh/pull/1129,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1129,,,True,{}
simh/simh,https://github.com/simh/simh,1130,2022-03-07T04:21:09Z,2022-03-07T04:25:18Z,2022-03-07T04:25:18Z,MERGED,True,7,7,2,https://github.com/rcornwell,KA10: Fixed some compiler warnings on MACOS.,1,[],https://github.com/simh/simh/pull/1130,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1130,,,True,{}
simh/simh,https://github.com/simh/simh,1131,2022-03-08T20:46:44Z,2022-03-09T21:13:42Z,2022-03-09T21:13:42Z,MERGED,True,16,7,2,https://github.com/hharte,"AltairZ80: Resolve CID 1514796,1514860, 1514861.",2,[],https://github.com/simh/simh/pull/1131,https://github.com/hharte,1,https://github.com/simh/simh/pull/1131,"FYI, @psco","FYI, @psco",True,{}
simh/simh,https://github.com/simh/simh,1131,2022-03-08T20:46:44Z,2022-03-09T21:13:42Z,2022-03-09T21:13:42Z,MERGED,True,16,7,2,https://github.com/hharte,"AltairZ80: Resolve CID 1514796,1514860, 1514861.",2,[],https://github.com/simh/simh/pull/1131,https://github.com/psco,2,https://github.com/simh/simh/pull/1131#issuecomment-1062240179,"FYI, @psco","Looks good, thanks Howard",True,{}
simh/simh,https://github.com/simh/simh,1132,2022-03-10T18:17:26Z,2022-03-10T18:20:48Z,2022-03-10T18:20:49Z,MERGED,True,2,2,1,https://github.com/AZBevier,SEL32: Correct Coverity detected warning errors.,1,[],https://github.com/simh/simh/pull/1132,https://github.com/AZBevier,1,https://github.com/simh/simh/pull/1132,,,True,{}
simh/simh,https://github.com/simh/simh,1133,2022-03-11T00:13:28Z,2022-03-11T00:45:15Z,2022-03-11T00:45:15Z,MERGED,True,8,2,3,https://github.com/rcornwell,KA10: Fixed some coverity errors.,1,[],https://github.com/simh/simh/pull/1133,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1133,,,True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/larsbrinkhoff,1,https://github.com/simh/simh/pull/1134,Coverity found three issues.  This fixes two of them.,Coverity found three issues.  This fixes two of them.,True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1134#issuecomment-1065706595,Coverity found three issues.  This fixes two of them.,"Actually Coverity found 5 tt2500 and 1 imlac.
Use the scroll bar below the issue list and scroll all the way over to the File column.  Clock on the column header and the issues will be grouped by the directory/file names and then they will all be visible together.  Note also that there currently are 2 pages of simh issues.",True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/larsbrinkhoff,3,https://github.com/simh/simh/pull/1134#issuecomment-1065865695,Coverity found three issues.  This fixes two of them.,"I'm aware there are more issues, but I don't have an immediate solution for the others (which is one problem manifesting as several).
However when I went to refresh the view this morning, it had changed.  It now lists ""Component"" instead of ""File"" and there's nothing to match tt2500.  I don't see anything in ""My Outstanding"" list either.",True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/larsbrinkhoff,4,https://github.com/simh/simh/pull/1134#issuecomment-1065889486,Coverity found three issues.  This fixes two of them.,"Never mind, I see them again.",True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/larsbrinkhoff,5,https://github.com/simh/simh/pull/1134#issuecomment-1065912059,Coverity found three issues.  This fixes two of them.,"As far as I can see, the four remaining tt2500_cpu.c issues are false positives, due to Coverity mistakenly using the ALTAIR/altair_sys.c instead of tt2500_sys.  The latter file implements fprint_sym in a way that does not use val as an array indexed beoynd 0.",True,{}
simh/simh,https://github.com/simh/simh,1134,2022-03-11T08:28:11Z,2022-03-11T16:42:28Z,2022-03-12T16:38:14Z,MERGED,True,2,2,2,https://github.com/larsbrinkhoff,"TT2500, IMLAC: Fix two Coverity issues.",2,[],https://github.com/simh/simh/pull/1134,https://github.com/markpizz,6,https://github.com/simh/simh/pull/1134#issuecomment-1065914832,Coverity found three issues.  This fixes two of them.,"Indeed.  All of the fprint_sym() routines have the same signature and the potential semantics of that signature allow for *val to be used as an array.  Mark these as “False Positive” “Ignore” with a comment that says ""the only use in this simulator is as a singleton"".",True,{}
simh/simh,https://github.com/simh/simh,1135,2022-03-12T04:06:59Z,2022-03-12T04:27:00Z,2022-03-12T04:27:00Z,MERGED,True,15,9,5,https://github.com/leobru,"BESM6: Coverity fixes, added disk type display for SHOW MDn.",1,[],https://github.com/simh/simh/pull/1135,https://github.com/leobru,1,https://github.com/simh/simh/pull/1135,,,True,{}
simh/simh,https://github.com/simh/simh,1136,2022-03-12T19:39:57Z,2022-03-12T19:45:20Z,2022-03-12T19:45:20Z,MERGED,True,14,2,1,https://github.com/sethm,3b2: Fix Coverity issues,1,[],https://github.com/simh/simh/pull/1136,https://github.com/sethm,1,https://github.com/simh/simh/pull/1136,,,True,{}
simh/simh,https://github.com/simh/simh,1137,2022-03-12T20:49:59Z,2022-03-12T21:48:02Z,2022-03-12T21:48:02Z,MERGED,True,43,27,1,https://github.com/rcornwell,KA10: Cleanup some extended addressing issues with KL10B.,1,[],https://github.com/simh/simh/pull/1137,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1137,Clean up coverity errors.,Clean up coverity errors.,True,{}
simh/simh,https://github.com/simh/simh,1138,2022-03-14T14:03:13Z,2022-03-14T16:59:48Z,2022-03-14T16:59:49Z,MERGED,True,8,5,1,https://github.com/psco,AltairZ80: Fix Coverity identified issues in s100_dj2d.c,1,[],https://github.com/simh/simh/pull/1138,https://github.com/psco,1,https://github.com/simh/simh/pull/1138,,,True,{}
simh/simh,https://github.com/simh/simh,1139,2022-03-15T05:45:49Z,2022-03-15T14:09:55Z,2022-03-15T14:09:55Z,MERGED,True,10,2,1,https://github.com/hharte,AltairZ80: s100_hdc1001: Resolve CID 1515006.,1,[],https://github.com/simh/simh/pull/1139,https://github.com/hharte,1,https://github.com/simh/simh/pull/1139,,,True,{}
simh/simh,https://github.com/simh/simh,1139,2022-03-15T05:45:49Z,2022-03-15T14:09:55Z,2022-03-15T14:09:55Z,MERGED,True,10,2,1,https://github.com/hharte,AltairZ80: s100_hdc1001: Resolve CID 1515006.,1,[],https://github.com/simh/simh/pull/1139,https://github.com/hharte,2,https://github.com/simh/simh/pull/1139#issuecomment-1067587230,,"FYI, @psco , @markpizz",True,{}
simh/simh,https://github.com/simh/simh,1139,2022-03-15T05:45:49Z,2022-03-15T14:09:55Z,2022-03-15T14:09:55Z,MERGED,True,10,2,1,https://github.com/hharte,AltairZ80: s100_hdc1001: Resolve CID 1515006.,1,[],https://github.com/simh/simh/pull/1139,https://github.com/psco,3,https://github.com/simh/simh/pull/1139#issuecomment-1067692295,,Thank you Howard,True,{}
simh/simh,https://github.com/simh/simh,1140,2022-03-15T15:39:40Z,2022-03-15T15:41:44Z,2022-03-15T15:41:45Z,MERGED,True,1,2,1,https://github.com/SpareTimeGizmos,H316: Fix missing initialization and remove dead code found by Coverity,1,[],https://github.com/simh/simh/pull/1140,https://github.com/SpareTimeGizmos,1,https://github.com/simh/simh/pull/1140,,,True,{}
simh/simh,https://github.com/simh/simh,1141,2022-03-16T01:31:36Z,2022-03-16T01:48:54Z,2022-03-16T01:48:54Z,MERGED,True,2,1,1,https://github.com/rcornwell,KA10: Clean up coverity error.,1,[],https://github.com/simh/simh/pull/1141,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1141,,,True,{}
simh/simh,https://github.com/simh/simh,1142,2022-03-16T17:02:35Z,2022-03-16T18:00:43Z,2022-03-16T18:00:44Z,MERGED,True,6,4,1,https://github.com/SpareTimeGizmos,H316: remove more dead code found by Coverity,1,[],https://github.com/simh/simh/pull/1142,https://github.com/SpareTimeGizmos,1,https://github.com/simh/simh/pull/1142,,,True,{}
simh/simh,https://github.com/simh/simh,1143,2022-03-17T02:55:23Z,2022-03-17T02:59:30Z,2022-03-17T02:59:31Z,MERGED,True,78,28,2,https://github.com/leobru,"BESM6: A Coverity fix, TTY enhancements.",1,[],https://github.com/simh/simh/pull/1143,https://github.com/leobru,1,https://github.com/simh/simh/pull/1143,"One of the two parallel interface consoles (TTY26) works in the Videoton-340 mode;
disconnecting a remote TTY session works like powering the terminal down.
After reconnecting, it is necessary to type ""HYC"" blindly to re-initialize the line.
Added TMXR line reordering.","One of the two parallel interface consoles (TTY26) works in the Videoton-340 mode;
disconnecting a remote TTY session works like powering the terminal down.
After reconnecting, it is necessary to type ""HYC"" blindly to re-initialize the line.
Added TMXR line reordering.",True,{}
simh/simh,https://github.com/simh/simh,1144,2022-03-17T23:05:22Z,2022-03-18T00:08:00Z,2022-03-18T00:08:00Z,MERGED,True,3,2,1,https://github.com/sethm,3b2: Fix Coverity issues,1,[],https://github.com/simh/simh/pull/1144,https://github.com/sethm,1,https://github.com/simh/simh/pull/1144,,,True,{}
simh/simh,https://github.com/simh/simh,1145,2022-03-18T14:54:24Z,2022-03-19T01:23:19Z,2022-03-19T01:23:19Z,MERGED,True,3,2,2,https://github.com/leobru,BESM6: Fixed a compilation warning and a Coverity defect.,1,[],https://github.com/simh/simh/pull/1145,https://github.com/leobru,1,https://github.com/simh/simh/pull/1145,,,True,{}
simh/simh,https://github.com/simh/simh,1146,2022-03-19T15:50:44Z,2022-03-19T15:54:28Z,2022-03-19T15:54:28Z,MERGED,True,17,2,1,https://github.com/hharte,"sim_imd: Resolve CID 1502448, 1502460.",1,[],https://github.com/simh/simh/pull/1146,https://github.com/hharte,1,https://github.com/simh/simh/pull/1146,"FYI, @markpizz","FYI, @markpizz",True,{}
simh/simh,https://github.com/simh/simh,1147,2022-03-20T23:41:19Z,2022-03-21T00:43:57Z,2022-03-21T00:43:57Z,MERGED,True,9,1,1,https://github.com/SpareTimeGizmos,H316: update IMP 00readme.txt to match current code,1,[],https://github.com/simh/simh/pull/1147,https://github.com/SpareTimeGizmos,1,https://github.com/simh/simh/pull/1147,,,True,{}
simh/simh,https://github.com/simh/simh,1148,2022-03-21T17:45:40Z,2022-03-21T18:34:48Z,2022-03-21T18:34:49Z,MERGED,True,1,1,1,https://github.com/pkoning2,DISK: Fix off by one error in reporting RSTS file structure info,1,[],https://github.com/simh/simh/pull/1148,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/1148,"This fixes issue #1106 -- the last sector number reported was
off by one (sector past the last free sector).","This fixes issue #1106 -- the last sector number reported was
off by one (sector past the last free sector).",True,{}
simh/simh,https://github.com/simh/simh,1149,2022-03-21T21:10:39Z,2022-03-21T21:15:07Z,2022-03-21T21:15:07Z,MERGED,True,2,2,1,https://github.com/pkoning2,DISK: Fix off by one error in reporting RSTS file structure info,1,[],https://github.com/simh/simh/pull/1149,https://github.com/pkoning2,1,https://github.com/simh/simh/pull/1149,"Updates the previous commit to do it better, by not changing
the return value of get_rsts_filesystem_size -- it still returns
the size, at least our best guess of it (for RSTS it's not possible
to get it correct in every case, but it will be correct for
most scenarios).","Updates the previous commit to do it better, by not changing
the return value of get_rsts_filesystem_size -- it still returns
the size, at least our best guess of it (for RSTS it's not possible
to get it correct in every case, but it will be correct for
most scenarios).",True,{}
simh/simh,https://github.com/simh/simh,1151,2022-03-25T23:18:51Z,2022-03-25T23:25:55Z,2022-03-25T23:25:55Z,MERGED,True,16,13,2,https://github.com/rcornwell,KA10: Minor updates.,2,[],https://github.com/simh/simh/pull/1151,https://github.com/rcornwell,1,https://github.com/simh/simh/pull/1151,Can these be merged in as two commits.,Can these be merged in as two commits.,True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/trevorwarwick,1,https://github.com/simh/simh/pull/1152,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.",True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1152#issuecomment-1105952196,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","Hi Trevor,
I'll get to this in the next few days.
Meanwhile, can you confirm the combination of endpoints you've tested with this change?
Specifically, DUP11<->DMC11  DUP11<->KDP11, etc. varying the host simulators/operating systems in the configs being tested...
I find it surprising that DECnet Phase V had DUP support while otherwise no such device has historically been in use on VAXen.  This seems very late in the day....

Mark",True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/trevorwarwick,3,https://github.com/simh/simh/pull/1152#issuecomment-1106125064,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","So far, I haven't tested anything else. I don't think it's interoperability with other devices that's relevant for this change, it's with host drivers only.  I'm not sure what other systems support DUP11/DDCMP but at the very least I can ask Paul K and Johnny B if they can try it out on RSTS and RSX.  If those work I think it would give good confidence against regressions.",True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/trevorwarwick,4,https://github.com/simh/simh/pull/1152#issuecomment-1107892244,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","I'm pursuing getting some testing on other OSes.
In the meantime, I agree, it's surprising that we supported the DUP/DPV11 with DECnet-VAX Phase V, since the main focus was on the more modern devices with higher line speeds like DSV11/DSB32/DSH32.  I think it was a combination of things: DUP/DPV were previously supported for VMS SNA and VAX PSI, but each layered product used a different driver. The Phase V implementation was very modular, so it wasn't that much work to add DDCMP support to a unified driver that was going to do SDLC/HDLC anyway. Also we obsoleted the microcoded DDCMP devices (DMC/DMR/DMV), so perhaps the idea was to keep another option open if customers didn't want to buy a more modern device.
Anyway, the upshot is that the DUP11 is actually the only serial device in simh that can work with DECnet-VAX Phase V, so I think it's important to get it working properly.",True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/markpizz,5,https://github.com/simh/simh/pull/1152#issuecomment-1107908309,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","Given this extra utility, maybe you want to take a crack at completing the DPV11 functionality since by the time Phase V came around, I think the vast majority of useful systems were Qbus...
I never had a good setup to test the DPV since my world experience was VMS and nothing on the PDP11.  By the time Phase V came along I was on to other things and never set it up.",True,{}
simh/simh,https://github.com/simh/simh,1152,2022-04-21T10:58:47Z,2022-05-17T14:12:04Z,2022-05-17T14:12:05Z,MERGED,True,14,6,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Extend DUP device for DECnet Phase V support",1,[],https://github.com/simh/simh/pull/1152,https://github.com/trevorwarwick,6,https://github.com/simh/simh/pull/1152#issuecomment-1128910037,"This change is necessary to make the DECnet/VAX Phase V DUP11 driver work in the simh environment. This VMS driver implements the CRC performance option in section 5.1.2 of the DDCMP spec., and thus relies on receiving a valid character after the CRC on a received frame.  I refined my original fix after some discussion with Paul Koning, and it's done in the way that he suggested would have least possible impact on any other driver.    I've also added the DUP11 to the default device list in the 8600 simulator as it was missing.","To confirm, I've updated to the latest changeset per your advice. This has been tested on VMS; RSX without KG11; RSX with KG11; communicating with both PyDecnet and RSX.",True,{}
simh/simh,https://github.com/simh/simh,1155,2022-04-29T05:05:59Z,2022-04-30T12:42:56Z,2022-04-30T12:42:56Z,CLOSED,False,9,3,1,https://github.com/agn453,sim_imd: Check for EOF when reading the IMD header,2,[],https://github.com/simh/simh/pull/1155,https://github.com/agn453,1,https://github.com/simh/simh/pull/1155,"The recent change to check that the IMD file track header is 5 bytes was attempting to read beyond the end-of-file, resulting in a spurious file open error and (under AltairZ80) a I8272: IMD disk corrupt diagnostic.
This change exits the IMD file parse if the sim_fread returns 0 bytes and the end-of-file is reached.","The recent change to check that the IMD file track header is 5 bytes was attempting to read beyond the end-of-file, resulting in a spurious file open error and (under AltairZ80) a I8272: IMD disk corrupt diagnostic.
This change exits the IMD file parse if the sim_fread returns 0 bytes and the end-of-file is reached.",True,{}
simh/simh,https://github.com/simh/simh,1155,2022-04-29T05:05:59Z,2022-04-30T12:42:56Z,2022-04-30T12:42:56Z,CLOSED,False,9,3,1,https://github.com/agn453,sim_imd: Check for EOF when reading the IMD header,2,[],https://github.com/simh/simh/pull/1155,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1155#issuecomment-1113335080,"The recent change to check that the IMD file track header is 5 bytes was attempting to read beyond the end-of-file, resulting in a spurious file open error and (under AltairZ80) a I8272: IMD disk corrupt diagnostic.
This change exits the IMD file parse if the sim_fread returns 0 bytes and the end-of-file is reached.","@psco and @hharte please review this change.
Once @psco and @hharte are good with this, @agn453, will you redo this commit with the above explanation in the commit message.  This lets the repo stand own for walking back in history (via blame or otherwise) rather than having to chase all over to understand each change.
Unwind the commit locally, commit again with revised commit message and push -f back to your github account.
Thanks.",True,{}
simh/simh,https://github.com/simh/simh,1155,2022-04-29T05:05:59Z,2022-04-30T12:42:56Z,2022-04-30T12:42:56Z,CLOSED,False,9,3,1,https://github.com/agn453,sim_imd: Check for EOF when reading the IMD header,2,[],https://github.com/simh/simh/pull/1155,https://github.com/hharte,3,https://github.com/simh/simh/pull/1155#issuecomment-1113356697,"The recent change to check that the IMD file track header is 5 bytes was attempting to read beyond the end-of-file, resulting in a spurious file open error and (under AltairZ80) a I8272: IMD disk corrupt diagnostic.
This change exits the IMD file parse if the sim_fread returns 0 bytes and the end-of-file is reached.","The change looks good, thanks @agn453 .",True,{}
simh/simh,https://github.com/simh/simh,1155,2022-04-29T05:05:59Z,2022-04-30T12:42:56Z,2022-04-30T12:42:56Z,CLOSED,False,9,3,1,https://github.com/agn453,sim_imd: Check for EOF when reading the IMD header,2,[],https://github.com/simh/simh/pull/1155,https://github.com/psco,4,https://github.com/simh/simh/pull/1155#issuecomment-1113725972,"The recent change to check that the IMD file track header is 5 bytes was attempting to read beyond the end-of-file, resulting in a spurious file open error and (under AltairZ80) a I8272: IMD disk corrupt diagnostic.
This change exits the IMD file parse if the sim_fread returns 0 bytes and the end-of-file is reached.",Also ok from my side. Thanks to @agn453 for finding and fixing this defect.,True,{}
simh/simh,https://github.com/simh/simh,1156,2022-04-30T22:07:53Z,2022-05-01T00:58:28Z,2022-05-01T00:58:28Z,MERGED,True,8,2,1,https://github.com/agn453,sim_imd: Check for EOF when reading IMD track headers,1,[],https://github.com/simh/simh/pull/1156,https://github.com/agn453,1,https://github.com/simh/simh/pull/1156,"The recent change to check that the IMD file track header record is 5
bytes introduced a problem with the end-of-file triggering an open file
error - instead of the previous behaviour where the number of bytes in
the track header was ignored and end-of-file was checked.
I noticed this after fetching and compiling the latest simh altairz80 - it
was refusing to my mount floppy disk IMD image files (which I had made
from 8-inch floppies back in 2006).
maxi:s100 tony$ altairz80 cpm3bk.ini

Altair 8800 (Z80) simulator V4.0-0 Current        simh git commit id: d3f1ee09
Console escape is CTRL-\
I8272: IMD disk corrupt.
/Users/tony/s100/cpm3bk.ini-58> att disk1a0 /Users/tony/s100/C3BKSIMH.IMD
File open error

Looking at the commit history, I saw the change by Howard Harte to
sim_imd.c to ""Resolve CID 1502448, 1502460"" - presumably to fix the
call to sim_fread() that was not checking the returned result.
Howard's ""fix"" broke the parsing of the IMD file sector headers by
not checking for an end-of-file condition (at the end of file it
would read 0 bytes and this was now treated as a fatal error - whereas
the old code had a check for end-of-file after the call to sim_fread()).
This commit now detects end-of-file correctly, as well as verifying
the track header is 5 bytes.","The recent change to check that the IMD file track header record is 5
bytes introduced a problem with the end-of-file triggering an open file
error - instead of the previous behaviour where the number of bytes in
the track header was ignored and end-of-file was checked.
I noticed this after fetching and compiling the latest simh altairz80 - it
was refusing to my mount floppy disk IMD image files (which I had made
from 8-inch floppies back in 2006).
maxi:s100 tony$ altairz80 cpm3bk.ini

Altair 8800 (Z80) simulator V4.0-0 Current        simh git commit id: d3f1ee09
Console escape is CTRL-\
I8272: IMD disk corrupt.
/Users/tony/s100/cpm3bk.ini-58> att disk1a0 /Users/tony/s100/C3BKSIMH.IMD
File open error

Looking at the commit history, I saw the change by Howard Harte to
sim_imd.c to ""Resolve CID 1502448, 1502460"" - presumably to fix the
call to sim_fread() that was not checking the returned result.
Howard's ""fix"" broke the parsing of the IMD file sector headers by
not checking for an end-of-file condition (at the end of file it
would read 0 bytes and this was now treated as a fatal error - whereas
the old code had a check for end-of-file after the call to sim_fread()).
This commit now detects end-of-file correctly, as well as verifying
the track header is 5 bytes.",True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/sethm,1,https://github.com/simh/simh/pull/1159,,,True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/markpizz,2,https://github.com/simh/simh/pull/1159#issuecomment-1129297301,,"I'll not be honoring simulator removal requests.  Sorry,",True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/rcornwell,3,https://github.com/simh/simh/pull/1159#issuecomment-1129300433,,Please honor his and mine.,True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/markpizz,4,https://github.com/simh/simh/pull/1159#issuecomment-1129307096,,"It’s too bad that this license stuff goes both ways, isn’t it.

Please thank that fantastic guy Chris Hanson for inspiring this change in the simh universe.

I’m sorry to have been such a bother over the past 11 years to everyone I had interacted with.

Going forward, folks will still be able to freely access and use what’s in the existing repo under the “Closed Source” license terms specified.  I’ll probably address bug reports and maybe even pass them along to the respective simulator developers as appropriate.


  *   Mark

From: Richard Cornwell ***@***.***>
Sent: Tuesday, May 17, 2022 1:45 PM
To: simh/simh ***@***.***>
Cc: Mark Pizzolato - Info Comm ***@***.***>; Comment ***@***.***>
Subject: Re: [simh/simh] 3b2: Remove 3B2 simulator (PR #1159)


Please honor his and mine.

—
Reply to this email directly, view it on GitHub<#1159 (comment)>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AADHGD7IDKVS7HPTE64V5HTVKQALTANCNFSM5WF7VBOA>.
You are receiving this because you commented.Message ID: ***@***.******@***.***>>",True,"{'THUMBS_DOWN': ['https://github.com/eschaton', 'https://github.com/nelsonVE', 'https://github.com/GeorgeRudolf', 'https://github.com/samkearney']}"
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/sethm,5,https://github.com/simh/simh/pull/1159#issuecomment-1129310835,,"Mark, there is nobody to blame here but yourself. I will close this PR.",True,"{'THUMBS_UP': ['https://github.com/eschaton', 'https://github.com/samkearney', 'https://github.com/GeorgeRudolf', 'https://github.com/ThePBone']}"
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/rcornwell,6,https://github.com/simh/simh/pull/1159#issuecomment-1129311135,,"I will no longer accept bug reports that are submitted against simH tree.
And it would look good for you to honor request to remove files from the authors.",True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/markpizz,7,https://github.com/simh/simh/pull/1159#issuecomment-1129315583,,"On Tuesday, May 17, 2022 at 1:59 PM, Richard Cornwell wrote:
 I will no longer accept bug reports that are submitted against simH tree.
Any such reports will be passed along to you and you can do whatever you want
with the info.  Under the open source license this is lives under, I’ll be free to pick
up any changes you make in your sims repo from time to time unless you change
your license to a closed source one in order to lock me out.
 And it would look good for you to honor request to remove files from the authors.
I don’t do everything you ask me to, now matter how good it makes me look.

  *   Mark",True,{}
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/rcornwell,8,https://github.com/simh/simh/pull/1159#issuecomment-1129318288,,I have no intention of changing the license file or copyright notices on my files. I am not a child who throws a tantrum when people disagree with him. I will be moving my simulators away from many of the 4.0 changes so you might have trouble keeping updated.,True,"{'HEART': ['https://github.com/eschaton', 'https://github.com/nelsonVE', 'https://github.com/sardaukar', 'https://github.com/nikitalita', 'https://github.com/curtbushko', 'https://github.com/Genda1ph', 'https://github.com/samkearney', 'https://github.com/GeorgeRudolf', 'https://github.com/ThePBone']}"
simh/simh,https://github.com/simh/simh,1159,2022-05-17T19:34:20Z,2022-05-17T20:58:05Z,2022-05-17T21:51:49Z,CLOSED,False,6,41530,71,https://github.com/sethm,3b2: Remove 3B2 simulator,1,[],https://github.com/simh/simh/pull/1159,https://github.com/ams,9,https://github.com/simh/simh/pull/1159#issuecomment-1129350843,,"For anyone working or wanting to work on SIMH and doesn't want to let those changes back into this or any future hostile versions of SIMH, a suggestion is to licenses future changes under a copyleft license -- such changes cannot be merged back.",True,{}
simh/simh,https://github.com/simh/simh,1160,2022-05-18T15:44:34Z,2022-05-18T16:19:52Z,2022-05-18T16:19:52Z,MERGED,True,2,0,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Fix DUP device loopback on device reset",1,[],https://github.com/simh/simh/pull/1160,https://github.com/trevorwarwick,1,https://github.com/simh/simh/pull/1160,"When the DUP TXCSR DEVICE_RESET bit is set, which clears the MAISEL bits, any
existing tmxr loopback must also be removed.","When the DUP TXCSR DEVICE_RESET bit is set, which clears the MAISEL bits, any
existing tmxr loopback must also be removed.",True,{}
simh/simh,https://github.com/simh/simh,1160,2022-05-18T15:44:34Z,2022-05-18T16:19:52Z,2022-05-18T16:19:52Z,MERGED,True,2,0,1,https://github.com/trevorwarwick,"PDP11, Qbus & Unibus VAX: Fix DUP device loopback on device reset",1,[],https://github.com/simh/simh/pull/1160,https://github.com/trevorwarwick,2,https://github.com/simh/simh/pull/1160#issuecomment-1130189790,"When the DUP TXCSR DEVICE_RESET bit is set, which clears the MAISEL bits, any
existing tmxr loopback must also be removed.","The VMS Phase V driver code has a test mode that puts the device into loopback.   The internal loopback within the tmxr layer wasn't being cleared on device reset, so once the device was put into loopback, it could never be successfully used for normal communications without a reboot.",True,{}
